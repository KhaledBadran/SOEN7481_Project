[
  {
    "name": "tests_\u0026_test_count.py",
    "testCases": [
      {
        "name": "TestIncrementingDict",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_no_setitem",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_getitem",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_insert",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_len",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_no_setitem",
                  "[]"
                ],
                [
                  "test_getitem",
                  "[]"
                ],
                [
                  "test_insert",
                  "[]"
                ],
                [
                  "test_len",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_no_setitem",
                  "false"
                ],
                [
                  "test_getitem",
                  "false"
                ],
                [
                  "test_insert",
                  "true"
                ],
                [
                  "test_len",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_no_setitem",
                  "false"
                ],
                [
                  "test_getitem",
                  "false"
                ],
                [
                  "test_insert",
                  "false"
                ],
                [
                  "test_len",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_no_setitem",
                  "false"
                ],
                [
                  "test_getitem",
                  "false"
                ],
                [
                  "test_insert",
                  "false"
                ],
                [
                  "test_len",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_no_setitem",
                  "false"
                ],
                [
                  "test_getitem",
                  "false"
                ],
                [
                  "test_insert",
                  "false"
                ],
                [
                  "test_len",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                "false"
              ],
              [
                "test_getitem",
                "false"
              ],
              [
                "test_insert",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                "false"
              ],
              [
                "test_getitem",
                "false"
              ],
              [
                "test_insert",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                []
              ],
              [
                "test_getitem",
                []
              ],
              [
                "test_insert",
                []
              ],
              [
                "test_len",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                "false"
              ],
              [
                "test_getitem",
                "false"
              ],
              [
                "test_insert",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_no_setitem",
                "false"
              ],
              [
                "test_getitem",
                "true"
              ],
              [
                "test_insert",
                "false"
              ],
              [
                "test_len",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_no_setitem",
                  "0"
                ],
                [
                  "test_getitem",
                  "0"
                ],
                [
                  "test_insert",
                  "0"
                ],
                [
                  "test_len",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_no_setitem",
                  "0"
                ],
                [
                  "test_getitem",
                  "0"
                ],
                [
                  "test_insert",
                  "0"
                ],
                [
                  "test_len",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                "false"
              ],
              [
                "test_getitem",
                "false"
              ],
              [
                "test_insert",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                "false"
              ],
              [
                "test_getitem",
                "false"
              ],
              [
                "test_insert",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                "1"
              ],
              [
                "test_getitem",
                "1"
              ],
              [
                "test_insert",
                "1"
              ],
              [
                "test_len",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                []
              ],
              [
                "test_getitem",
                [
                  "val"
                ]
              ],
              [
                "test_insert",
                [
                  "table"
                ]
              ],
              [
                "test_len",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                [
                  "self.d"
                ]
              ],
              [
                "test_getitem",
                [
                  "self.d"
                ]
              ],
              [
                "test_insert",
                [
                  "self.d"
                ]
              ],
              [
                "test_len",
                [
                  "self.d"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3344858991270476,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_no_setitem",
                  "test_getitem",
                  0.45454545454545453
                ],
                [
                  "test_getitem",
                  "test_len",
                  0.6092717958449424
                ],
                [
                  "test_no_setitem",
                  "test_len",
                  0.26111648393354675
                ],
                [
                  "test_insert",
                  "test_getitem",
                  0.2889427981985323
                ],
                [
                  "test_insert",
                  "test_len",
                  0.25819888974716115
                ],
                [
                  "test_insert",
                  "test_no_setitem",
                  0.13483997249264842
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_no_setitem",
                "false"
              ],
              [
                "test_getitem",
                "false"
              ],
              [
                "test_insert",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestObservationCounter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_count",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update",
                  "[]"
                ],
                [
                  "test_get_count",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update",
                  "true"
                ],
                [
                  "test_get_count",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_get_count",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_get_count",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update",
                  "false"
                ],
                [
                  "test_get_count",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_get_count",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_get_count",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                []
              ],
              [
                "test_get_count",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_get_count",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_get_count",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update",
                  "0"
                ],
                [
                  "test_get_count",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update",
                  "0"
                ],
                [
                  "test_get_count",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_get_count",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_get_count",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "4"
              ],
              [
                "test_get_count",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                [
                  "expected_joint_counts",
                  "counts",
                  "expected",
                  "expected_counts",
                  "table"
                ]
              ],
              [
                "test_get_count",
                [
                  "expected",
                  "count",
                  "table"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                [
                  "self.oc"
                ]
              ],
              [
                "test_get_count",
                [
                  "self.oc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8097841418233803,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_update",
                  "test_get_count",
                  0.8097841418233803
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ],
              [
                "test_get_count",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestObservationCounterWithMissingData",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                [
                  "expected_joint_counts",
                  "counts",
                  "expected",
                  "expected_counts",
                  "table"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                [
                  "self.oc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_update",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestIsNaN",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_isnan",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_isnan",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_isnan",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_isnan",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_isnan",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_isnan",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_isnan",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_isnan",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                [
                  "table",
                  "isnan_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_isnan",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestGetMode",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_mode",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_mode",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_mode",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_mode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_mode",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_mode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_mode",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_mode",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                [
                  "mode",
                  "table"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                [
                  "self.c2",
                  "self.c1"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_mode",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestFeatureTupleGetters",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_feature_name",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_feature_value",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_feature_name",
                  "[]"
                ],
                [
                  "test_get_feature_value",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_feature_name",
                  "false"
                ],
                [
                  "test_get_feature_value",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_feature_name",
                  "false"
                ],
                [
                  "test_get_feature_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_feature_name",
                  "false"
                ],
                [
                  "test_get_feature_value",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_feature_name",
                  "false"
                ],
                [
                  "test_get_feature_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "false"
              ],
              [
                "test_get_feature_value",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "false"
              ],
              [
                "test_get_feature_value",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                []
              ],
              [
                "test_get_feature_value",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "false"
              ],
              [
                "test_get_feature_value",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "false"
              ],
              [
                "test_get_feature_value",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_feature_name",
                  "0"
                ],
                [
                  "test_get_feature_value",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_feature_name",
                  "0"
                ],
                [
                  "test_get_feature_value",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "false"
              ],
              [
                "test_get_feature_value",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "false"
              ],
              [
                "test_get_feature_value",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "1"
              ],
              [
                "test_get_feature_value",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                [
                  "feature_name"
                ]
              ],
              [
                "test_get_feature_value",
                [
                  "feature_value"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                [
                  "self.tup"
                ]
              ],
              [
                "test_get_feature_value",
                [
                  "self.tup"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7727272727272727,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_feature_name",
                  "test_get_feature_value",
                  0.7727272727272727
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_feature_name",
                "false"
              ],
              [
                "test_get_feature_value",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_detect.py",
    "testCases": [
      {
        "name": "TestCBRW",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_score_unknown_features_default",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_score",
                  "[PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual]"
                ],
                [
                  "test_score_before_fit",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_fit_no_data",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_fit",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone]"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_feature_relevance",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compute_biases",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_score_unknown_features_default",
                  "[]"
                ],
                [
                  "test_score",
                  "[]"
                ],
                [
                  "test_score_before_fit",
                  "[]"
                ],
                [
                  "test_fit_no_data",
                  "[]"
                ],
                [
                  "test_fit",
                  "[]"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "[]"
                ],
                [
                  "test_get_feature_relevance",
                  "[]"
                ],
                [
                  "test_compute_biases",
                  "[]"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_score_unknown_features_default",
                  "false"
                ],
                [
                  "test_score",
                  "false"
                ],
                [
                  "test_score_before_fit",
                  "false"
                ],
                [
                  "test_fit_no_data",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "false"
                ],
                [
                  "test_get_feature_relevance",
                  "false"
                ],
                [
                  "test_compute_biases",
                  "false"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_score_unknown_features_default",
                  "false"
                ],
                [
                  "test_score",
                  "false"
                ],
                [
                  "test_score_before_fit",
                  "false"
                ],
                [
                  "test_fit_no_data",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "false"
                ],
                [
                  "test_get_feature_relevance",
                  "false"
                ],
                [
                  "test_compute_biases",
                  "false"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_score_unknown_features_default",
                  "true"
                ],
                [
                  "test_score",
                  "false"
                ],
                [
                  "test_score_before_fit",
                  "false"
                ],
                [
                  "test_fit_no_data",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "true"
                ],
                [
                  "test_get_feature_relevance",
                  "true"
                ],
                [
                  "test_compute_biases",
                  "false"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_score_unknown_features_default",
                  "false"
                ],
                [
                  "test_score",
                  "false"
                ],
                [
                  "test_score_before_fit",
                  "false"
                ],
                [
                  "test_fit_no_data",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "false"
                ],
                [
                  "test_get_feature_relevance",
                  "false"
                ],
                [
                  "test_compute_biases",
                  "false"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                "false"
              ],
              [
                "test_score",
                "false"
              ],
              [
                "test_score_before_fit",
                "false"
              ],
              [
                "test_fit_no_data",
                "false"
              ],
              [
                "test_fit",
                "false"
              ],
              [
                "test_score_unknown_features_ignore",
                "false"
              ],
              [
                "test_get_feature_relevance",
                "false"
              ],
              [
                "test_compute_biases",
                "false"
              ],
              [
                "test_compute_biased_transition_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                "false"
              ],
              [
                "test_score",
                "false"
              ],
              [
                "test_score_before_fit",
                "false"
              ],
              [
                "test_fit_no_data",
                "false"
              ],
              [
                "test_fit",
                "false"
              ],
              [
                "test_score_unknown_features_ignore",
                "false"
              ],
              [
                "test_get_feature_relevance",
                "false"
              ],
              [
                "test_compute_biases",
                "false"
              ],
              [
                "test_compute_biased_transition_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                []
              ],
              [
                "test_score",
                []
              ],
              [
                "test_score_before_fit",
                []
              ],
              [
                "test_fit_no_data",
                []
              ],
              [
                "test_fit",
                []
              ],
              [
                "test_score_unknown_features_ignore",
                []
              ],
              [
                "test_get_feature_relevance",
                []
              ],
              [
                "test_compute_biases",
                []
              ],
              [
                "test_compute_biased_transition_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                "false"
              ],
              [
                "test_score",
                "false"
              ],
              [
                "test_score_before_fit",
                "false"
              ],
              [
                "test_fit_no_data",
                "false"
              ],
              [
                "test_fit",
                "false"
              ],
              [
                "test_score_unknown_features_ignore",
                "false"
              ],
              [
                "test_get_feature_relevance",
                "false"
              ],
              [
                "test_compute_biases",
                "false"
              ],
              [
                "test_compute_biased_transition_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_score_unknown_features_default",
                "true"
              ],
              [
                "test_score",
                "true"
              ],
              [
                "test_score_before_fit",
                "false"
              ],
              [
                "test_fit_no_data",
                "false"
              ],
              [
                "test_fit",
                "false"
              ],
              [
                "test_score_unknown_features_ignore",
                "true"
              ],
              [
                "test_get_feature_relevance",
                "true"
              ],
              [
                "test_compute_biases",
                "true"
              ],
              [
                "test_compute_biased_transition_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_score_unknown_features_default",
                  "0"
                ],
                [
                  "test_score",
                  "0"
                ],
                [
                  "test_score_before_fit",
                  "0"
                ],
                [
                  "test_fit_no_data",
                  "0"
                ],
                [
                  "test_fit",
                  "0"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "0"
                ],
                [
                  "test_get_feature_relevance",
                  "0"
                ],
                [
                  "test_compute_biases",
                  "0"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_score_unknown_features_default",
                  "0"
                ],
                [
                  "test_score",
                  "0"
                ],
                [
                  "test_score_before_fit",
                  "0"
                ],
                [
                  "test_fit_no_data",
                  "0"
                ],
                [
                  "test_fit",
                  "0"
                ],
                [
                  "test_score_unknown_features_ignore",
                  "0"
                ],
                [
                  "test_get_feature_relevance",
                  "0"
                ],
                [
                  "test_compute_biases",
                  "0"
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                "false"
              ],
              [
                "test_score",
                "false"
              ],
              [
                "test_score_before_fit",
                "false"
              ],
              [
                "test_fit_no_data",
                "false"
              ],
              [
                "test_fit",
                "false"
              ],
              [
                "test_score_unknown_features_ignore",
                "false"
              ],
              [
                "test_get_feature_relevance",
                "false"
              ],
              [
                "test_compute_biases",
                "false"
              ],
              [
                "test_compute_biased_transition_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                "false"
              ],
              [
                "test_score",
                "false"
              ],
              [
                "test_score_before_fit",
                "false"
              ],
              [
                "test_fit_no_data",
                "false"
              ],
              [
                "test_fit",
                "false"
              ],
              [
                "test_score_unknown_features_ignore",
                "false"
              ],
              [
                "test_get_feature_relevance",
                "false"
              ],
              [
                "test_compute_biases",
                "false"
              ],
              [
                "test_compute_biased_transition_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                "6"
              ],
              [
                "test_score",
                "2"
              ],
              [
                "test_score_before_fit",
                "1"
              ],
              [
                "test_fit_no_data",
                "1"
              ],
              [
                "test_fit",
                "2"
              ],
              [
                "test_score_unknown_features_ignore",
                "6"
              ],
              [
                "test_get_feature_relevance",
                "3"
              ],
              [
                "test_compute_biases",
                "4"
              ],
              [
                "test_compute_biased_transition_matrix",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                [
                  "score",
                  "invalid_score",
                  "scores",
                  "valid_score",
                  "to_be_scored"
                ]
              ],
              [
                "test_score",
                [
                  "score",
                  "to_be_scored"
                ]
              ],
              [
                "test_score_before_fit",
                [
                  "_"
                ]
              ],
              [
                "test_fit_no_data",
                []
              ],
              [
                "test_fit",
                []
              ],
              [
                "test_score_unknown_features_ignore",
                [
                  "actual_score",
                  "score",
                  "actually_scored",
                  "to_be_scored"
                ]
              ],
              [
                "test_get_feature_relevance",
                [
                  "rel"
                ]
              ],
              [
                "test_compute_biases",
                [
                  "bias_dict"
                ]
              ],
              [
                "test_compute_biased_transition_matrix",
                [
                  "transition_matrix"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_score",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_score_before_fit",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_fit_no_data",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_fit",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_score_unknown_features_ignore",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_get_feature_relevance",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_compute_biases",
                [
                  "self.cbrw"
                ]
              ],
              [
                "test_compute_biased_transition_matrix",
                [
                  "self.cbrw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3425100777605754,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_fit_no_data",
                  "test_score_unknown_features_ignore",
                  0.21457543652623937
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "test_score",
                  0.25335585485476586
                ],
                [
                  "test_get_feature_relevance",
                  "test_compute_biased_transition_matrix",
                  0.28330563048072355
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "test_score_unknown_features_ignore",
                  0.234104260543897
                ],
                [
                  "test_compute_biases",
                  "test_score_before_fit",
                  0.38483282681089637
                ],
                [
                  "test_fit",
                  "test_score",
                  0.1873171623163388
                ],
                [
                  "test_get_feature_relevance",
                  "test_score_unknown_features_ignore",
                  0.36337073714964885
                ],
                [
                  "test_fit",
                  "test_score_unknown_features_ignore",
                  0.1407786204998929
                ],
                [
                  "test_fit",
                  "test_score_before_fit",
                  0.2341464528954235
                ],
                [
                  "test_fit_no_data",
                  "test_score",
                  0.2703690352179376
                ],
                [
                  "test_get_feature_relevance",
                  "test_score",
                  0.3461133276600444
                ],
                [
                  "test_compute_biases",
                  "test_score_unknown_features_default",
                  0.3868172449685508
                ],
                [
                  "test_get_feature_relevance",
                  "test_score_before_fit",
                  0.292865123404653
                ],
                [
                  "test_score",
                  "test_score_unknown_features_default",
                  0.7450502660458082
                ],
                [
                  "test_compute_biases",
                  "test_fit",
                  0.14887283354385342
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "test_score_before_fit",
                  0.3466974855907322
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "test_score_unknown_features_default",
                  0.24572678315998478
                ],
                [
                  "test_score_before_fit",
                  "test_score_unknown_features_ignore",
                  0.4493490890847018
                ],
                [
                  "test_score_unknown_features_default",
                  "test_score_unknown_features_ignore",
                  0.9086336263419765
                ],
                [
                  "test_get_feature_relevance",
                  "test_score_unknown_features_default",
                  0.3701992452895021
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "test_fit",
                  0.2847473987257497
                ],
                [
                  "test_score_before_fit",
                  "test_score_unknown_features_default",
                  0.4761267972363744
                ],
                [
                  "test_get_feature_relevance",
                  "test_fit",
                  0.18951174787165373
                ],
                [
                  "test_compute_biases",
                  "test_score_unknown_features_ignore",
                  0.4064197105454593
                ],
                [
                  "test_get_feature_relevance",
                  "test_fit_no_data",
                  0.21882931729659152
                ],
                [
                  "test_score",
                  "test_score_unknown_features_ignore",
                  0.626557180554725
                ],
                [
                  "test_score_before_fit",
                  "test_score",
                  0.4999999999999999
                ],
                [
                  "test_compute_biases",
                  "test_fit_no_data",
                  0.2578553115646984
                ],
                [
                  "test_get_feature_relevance",
                  "test_compute_biases",
                  0.40203740026089524
                ],
                [
                  "test_fit_no_data",
                  "test_score_unknown_features_default",
                  0.2174105700794576
                ],
                [
                  "test_fit",
                  "test_score_unknown_features_default",
                  0.17259282034506165
                ],
                [
                  "test_compute_biases",
                  "test_score",
                  0.3095394476522427
                ],
                [
                  "test_fit_no_data",
                  "test_fit",
                  0.2405626121623441
                ],
                [
                  "test_compute_biases",
                  "test_compute_biased_transition_matrix",
                  0.4069550600884204
                ],
                [
                  "test_fit_no_data",
                  "test_score_before_fit",
                  0.5407380704358752
                ],
                [
                  "test_compute_biased_transition_matrix",
                  "test_fit_no_data",
                  0.2739983121755955
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_score_unknown_features_default",
                "false"
              ],
              [
                "test_score",
                "false"
              ],
              [
                "test_score_before_fit",
                "false"
              ],
              [
                "test_fit_no_data",
                "false"
              ],
              [
                "test_fit",
                "false"
              ],
              [
                "test_score_unknown_features_ignore",
                "false"
              ],
              [
                "test_get_feature_relevance",
                "false"
              ],
              [
                "test_compute_biases",
                "false"
              ],
              [
                "test_compute_biased_transition_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "tests_\u0026_test_matrix.py",
    "testCases": [
      {
        "name": "TestRandomWalk",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_random_walk",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_random_walk",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_random_walk",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_random_walk",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_random_walk",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_random_walk",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_random_walk",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_random_walk",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_random_walk",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                [
                  "data",
                  "pi",
                  "matrix"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_random_walk",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestDictToCSRMatrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_dict_to_csr_matrix",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_dict_to_csr_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_dict_to_csr_matrix",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_dict_to_csr_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_dict_to_csr_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_dict_to_csr_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_dict_to_csr_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_dict_to_csr_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                [
                  "result",
                  "shape",
                  "expected",
                  "data_dict",
                  "table"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_dict_to_csr_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestRowNormalizeCSRMatrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_valid_row_normalize",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_valid_row_normalize",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_valid_row_normalize",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_valid_row_normalize",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_valid_row_normalize",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_valid_row_normalize",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_valid_row_normalize",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_valid_row_normalize",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_valid_row_normalize",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                [
                  "invalid_table",
                  "normalized",
                  "row_sums",
                  "matrix",
                  "valid_table",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_row_normalize",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]