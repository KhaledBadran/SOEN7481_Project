[
  {
    "name": "tests_\u0026_test_graph_\u0026_test_graph.py",
    "testCases": [
      {
        "name": "TestAdjacencyDictGraph",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_connected_components",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test__dfs",
                  "[PyCallExpression: self.assertSetEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_constructor",
                  "[]"
                ],
                [
                  "test_get_connected_components",
                  "[]"
                ],
                [
                  "test__dfs",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_constructor",
                  "true"
                ],
                [
                  "test_get_connected_components",
                  "true"
                ],
                [
                  "test__dfs",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_constructor",
                  "false"
                ],
                [
                  "test_get_connected_components",
                  "false"
                ],
                [
                  "test__dfs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_constructor",
                  "false"
                ],
                [
                  "test_get_connected_components",
                  "false"
                ],
                [
                  "test__dfs",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_constructor",
                  "false"
                ],
                [
                  "test_get_connected_components",
                  "false"
                ],
                [
                  "test__dfs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ],
              [
                "test_get_connected_components",
                "false"
              ],
              [
                "test__dfs",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ],
              [
                "test_get_connected_components",
                "false"
              ],
              [
                "test__dfs",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ],
              [
                "test_get_connected_components",
                []
              ],
              [
                "test__dfs",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ],
              [
                "test_get_connected_components",
                "false"
              ],
              [
                "test__dfs",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ],
              [
                "test_get_connected_components",
                "false"
              ],
              [
                "test__dfs",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_constructor",
                  "0"
                ],
                [
                  "test_get_connected_components",
                  "0"
                ],
                [
                  "test__dfs",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_constructor",
                  "0"
                ],
                [
                  "test_get_connected_components",
                  "0"
                ],
                [
                  "test__dfs",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ],
              [
                "test_get_connected_components",
                "false"
              ],
              [
                "test__dfs",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ],
              [
                "test_get_connected_components",
                "false"
              ],
              [
                "test__dfs",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "1"
              ],
              [
                "test_get_connected_components",
                "1"
              ],
              [
                "test__dfs",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                [
                  "graph"
                ]
              ],
              [
                "test_get_connected_components",
                [
                  "components",
                  "expected"
                ]
              ],
              [
                "test__dfs",
                [
                  "result_component",
                  "graph"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ],
              [
                "test_get_connected_components",
                []
              ],
              [
                "test__dfs",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7443361665018265,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_constructor",
                  "test_get_connected_components",
                  0.7248824356090754
                ],
                [
                  "test_get_connected_components",
                  "test__dfs",
                  0.7627700713964739
                ],
                [
                  "test_constructor",
                  "test__dfs",
                  0.74535599249993
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ],
              [
                "test_get_connected_components",
                "false"
              ],
              [
                "test__dfs",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_roles_\u0026_test_factor.py",
    "testCases": [
      {
        "name": "TestFactor",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_nmf_decomposition",
                  "[PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_encode",
                  "[PyCallExpression: self.assertLessEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_nmf_decomposition",
                  "[]"
                ],
                [
                  "test_encode",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_nmf_decomposition",
                  "true"
                ],
                [
                  "test_encode",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_nmf_decomposition",
                  "false"
                ],
                [
                  "test_encode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_nmf_decomposition",
                  "false"
                ],
                [
                  "test_encode",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_nmf_decomposition",
                  "false"
                ],
                [
                  "test_encode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "false"
              ],
              [
                "test_encode",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "false"
              ],
              [
                "test_encode",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                []
              ],
              [
                "test_encode",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "false"
              ],
              [
                "test_encode",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "false"
              ],
              [
                "test_encode",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_nmf_decomposition",
                  "0"
                ],
                [
                  "test_encode",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_nmf_decomposition",
                  "0"
                ],
                [
                  "test_encode",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "false"
              ],
              [
                "test_encode",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "false"
              ],
              [
                "test_encode",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "4"
              ],
              [
                "test_encode",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                [
                  "F",
                  "expected_G_shape",
                  "G",
                  "expected_F_shape"
                ]
              ],
              [
                "test_encode",
                [
                  "num_uniq_vals",
                  "encoded"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                []
              ],
              [
                "test_encode",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.38432946887118646,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_nmf_decomposition",
                  "test_encode",
                  0.38432946887118646
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nmf_decomposition",
                "false"
              ],
              [
                "test_encode",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_roles_\u0026_test_extract.py",
    "testCases": [
      {
        "name": "TestRoles",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_init",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertTupleEqual]"
                ],
                [
                  "test__get_encoded_role_factors",
                  "[PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertTupleEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_extract_role_factors",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertSetEqual]"
                ],
                [
                  "test_roles",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test__select_model",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__rescale_costs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_explain",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_init",
                  "[]"
                ],
                [
                  "test__get_encoded_role_factors",
                  "[]"
                ],
                [
                  "test_extract_role_factors",
                  "[]"
                ],
                [
                  "test_roles",
                  "[]"
                ],
                [
                  "test__select_model",
                  "[]"
                ],
                [
                  "test__rescale_costs",
                  "[]"
                ],
                [
                  "test_explain",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test__get_encoded_role_factors",
                  "true"
                ],
                [
                  "test_extract_role_factors",
                  "true"
                ],
                [
                  "test_roles",
                  "false"
                ],
                [
                  "test__select_model",
                  "false"
                ],
                [
                  "test__rescale_costs",
                  "false"
                ],
                [
                  "test_explain",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test__get_encoded_role_factors",
                  "false"
                ],
                [
                  "test_extract_role_factors",
                  "false"
                ],
                [
                  "test_roles",
                  "true"
                ],
                [
                  "test__select_model",
                  "false"
                ],
                [
                  "test__rescale_costs",
                  "false"
                ],
                [
                  "test_explain",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test__get_encoded_role_factors",
                  "false"
                ],
                [
                  "test_extract_role_factors",
                  "false"
                ],
                [
                  "test_roles",
                  "false"
                ],
                [
                  "test__select_model",
                  "false"
                ],
                [
                  "test__rescale_costs",
                  "false"
                ],
                [
                  "test_explain",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test__get_encoded_role_factors",
                  "false"
                ],
                [
                  "test_extract_role_factors",
                  "false"
                ],
                [
                  "test_roles",
                  "false"
                ],
                [
                  "test__select_model",
                  "false"
                ],
                [
                  "test__rescale_costs",
                  "false"
                ],
                [
                  "test_explain",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test__get_encoded_role_factors",
                "false"
              ],
              [
                "test_extract_role_factors",
                "false"
              ],
              [
                "test_roles",
                "false"
              ],
              [
                "test__select_model",
                "false"
              ],
              [
                "test__rescale_costs",
                "false"
              ],
              [
                "test_explain",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test__get_encoded_role_factors",
                "false"
              ],
              [
                "test_extract_role_factors",
                "false"
              ],
              [
                "test_roles",
                "false"
              ],
              [
                "test__select_model",
                "false"
              ],
              [
                "test__rescale_costs",
                "false"
              ],
              [
                "test_explain",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_init",
                [
                  "self.features",
                  "self.n_nodes",
                  "self.n_features"
                ]
              ],
              [
                "test__get_encoded_role_factors",
                []
              ],
              [
                "test_extract_role_factors",
                [
                  "self.n_nodes",
                  "self.n_features"
                ]
              ],
              [
                "test_roles",
                [
                  "self.n_nodes",
                  "self.n_features"
                ]
              ],
              [
                "test__select_model",
                [
                  "self.n_nodes",
                  "self.n_features"
                ]
              ],
              [
                "test__rescale_costs",
                [
                  "self.features",
                  "self.n_nodes",
                  "self.n_features"
                ]
              ],
              [
                "test_explain",
                [
                  "self.features",
                  "self.n_nodes",
                  "self.n_features"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test__get_encoded_role_factors",
                "false"
              ],
              [
                "test_extract_role_factors",
                "false"
              ],
              [
                "test_roles",
                "false"
              ],
              [
                "test__select_model",
                "false"
              ],
              [
                "test__rescale_costs",
                "false"
              ],
              [
                "test_explain",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_init",
                "true"
              ],
              [
                "test__get_encoded_role_factors",
                "false"
              ],
              [
                "test_extract_role_factors",
                "false"
              ],
              [
                "test_roles",
                "false"
              ],
              [
                "test__select_model",
                "false"
              ],
              [
                "test__rescale_costs",
                "true"
              ],
              [
                "test_explain",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_init",
                  "0"
                ],
                [
                  "test__get_encoded_role_factors",
                  "0"
                ],
                [
                  "test_extract_role_factors",
                  "0"
                ],
                [
                  "test_roles",
                  "0"
                ],
                [
                  "test__select_model",
                  "0"
                ],
                [
                  "test__rescale_costs",
                  "0"
                ],
                [
                  "test_explain",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_init",
                  "0"
                ],
                [
                  "test__get_encoded_role_factors",
                  "0"
                ],
                [
                  "test_extract_role_factors",
                  "0"
                ],
                [
                  "test_roles",
                  "0"
                ],
                [
                  "test__select_model",
                  "0"
                ],
                [
                  "test__rescale_costs",
                  "0"
                ],
                [
                  "test_explain",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test__get_encoded_role_factors",
                "false"
              ],
              [
                "test_extract_role_factors",
                "false"
              ],
              [
                "test_roles",
                "false"
              ],
              [
                "test__select_model",
                "false"
              ],
              [
                "test__rescale_costs",
                "false"
              ],
              [
                "test_explain",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test__get_encoded_role_factors",
                "false"
              ],
              [
                "test_extract_role_factors",
                "false"
              ],
              [
                "test_roles",
                "false"
              ],
              [
                "test__select_model",
                "false"
              ],
              [
                "test__rescale_costs",
                "false"
              ],
              [
                "test_explain",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "6"
              ],
              [
                "test__get_encoded_role_factors",
                "5"
              ],
              [
                "test_extract_role_factors",
                "6"
              ],
              [
                "test_roles",
                "7"
              ],
              [
                "test__select_model",
                "2"
              ],
              [
                "test__rescale_costs",
                "5"
              ],
              [
                "test_explain",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ],
              [
                "test__get_encoded_role_factors",
                [
                  "expected_uniq_vals",
                  "F",
                  "G",
                  "uniq_vals_f",
                  "uniq_vals_g",
                  "min_shape",
                  "total_values"
                ]
              ],
              [
                "test_extract_role_factors",
                [
                  "expected_nodes",
                  "expected_roles",
                  "expected_features"
                ]
              ],
              [
                "test_roles",
                [
                  "role_names",
                  "roles",
                  "n_roles",
                  "role_pct"
                ]
              ],
              [
                "test__select_model",
                [
                  "F",
                  "G",
                  "expected_n_roles",
                  "n_roles",
                  "model"
                ]
              ],
              [
                "test__rescale_costs",
                [
                  "costs",
                  "rescaled_costs"
                ]
              ],
              [
                "test_explain",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                [
                  "self.re"
                ]
              ],
              [
                "test__get_encoded_role_factors",
                [
                  "self.re",
                  "self.features",
                  "self.n_nodes",
                  "self.n_features"
                ]
              ],
              [
                "test_extract_role_factors",
                [
                  "self.re",
                  "self.features"
                ]
              ],
              [
                "test_roles",
                [
                  "self.re",
                  "self.features"
                ]
              ],
              [
                "test__select_model",
                [
                  "self.re",
                  "self.features"
                ]
              ],
              [
                "test__rescale_costs",
                [
                  "self.re"
                ]
              ],
              [
                "test_explain",
                [
                  "self.re"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.40927977371774105,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_init",
                  "test_explain",
                  0.1346488455751882
                ],
                [
                  "test_init",
                  "test_roles",
                  0.5153111860128656
                ],
                [
                  "test_extract_role_factors",
                  "test__select_model",
                  0.49415486235895617
                ],
                [
                  "test__select_model",
                  "test__rescale_costs",
                  0.6319064588360718
                ],
                [
                  "test_extract_role_factors",
                  "test__rescale_costs",
                  0.24287691441412865
                ],
                [
                  "test_extract_role_factors",
                  "test__get_encoded_role_factors",
                  0.5291161222330966
                ],
                [
                  "test_extract_role_factors",
                  "test_explain",
                  0.20857739983529944
                ],
                [
                  "test_init",
                  "test__get_encoded_role_factors",
                  0.5606989759291646
                ],
                [
                  "test_extract_role_factors",
                  "test_roles",
                  0.6445892052807394
                ],
                [
                  "test__select_model",
                  "test__get_encoded_role_factors",
                  0.6316550427042542
                ],
                [
                  "test__get_encoded_role_factors",
                  "test__rescale_costs",
                  0.4033810019634834
                ],
                [
                  "test_explain",
                  "test__get_encoded_role_factors",
                  0.1435916317235476
                ],
                [
                  "test_roles",
                  "test__select_model",
                  0.5135770613496653
                ],
                [
                  "test_init",
                  "test_extract_role_factors",
                  0.43297255238883675
                ],
                [
                  "test_init",
                  "test__select_model",
                  0.7209960159458398
                ],
                [
                  "test_roles",
                  "test__get_encoded_role_factors",
                  0.4871003625818816
                ],
                [
                  "test_roles",
                  "test__rescale_costs",
                  0.3263855463457692
                ],
                [
                  "test_explain",
                  "test__select_model",
                  0.07683787503952985
                ],
                [
                  "test_roles",
                  "test_explain",
                  0.17248787237282068
                ],
                [
                  "test_explain",
                  "test__rescale_costs",
                  0.11644450194791638
                ],
                [
                  "test_init",
                  "test__rescale_costs",
                  0.607565813233507
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test__get_encoded_role_factors",
                "false"
              ],
              [
                "test_extract_role_factors",
                "false"
              ],
              [
                "test_roles",
                "false"
              ],
              [
                "test__select_model",
                "false"
              ],
              [
                "test__rescale_costs",
                "false"
              ],
              [
                "test_explain",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_test_features_\u0026_test_prune.py",
    "testCases": [
      {
        "name": "TestVerticalLogBinning",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_vertical_log_binning",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_vertical_log_binning",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_vertical_log_binning",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_vertical_log_binning",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_vertical_log_binning",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_vertical_log_binning",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_vertical_log_binning",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_vertical_log_binning",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                [
                  "numpy_array_result",
                  "pandas_series_result",
                  "numpy_msg",
                  "pandas_msg",
                  "table",
                  "frac"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_vertical_log_binning",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestFeaturePruner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__group_features",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test__set_getitem",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_prune_features",
                  "[PyCallExpression: self.assertSetEqual]"
                ],
                [
                  "test__get_oldest_feature",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__group_features",
                  "[]"
                ],
                [
                  "test__set_getitem",
                  "[]"
                ],
                [
                  "test_prune_features",
                  "[]"
                ],
                [
                  "test__get_oldest_feature",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__group_features",
                  "true"
                ],
                [
                  "test__set_getitem",
                  "true"
                ],
                [
                  "test_prune_features",
                  "true"
                ],
                [
                  "test__get_oldest_feature",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__group_features",
                  "false"
                ],
                [
                  "test__set_getitem",
                  "false"
                ],
                [
                  "test_prune_features",
                  "false"
                ],
                [
                  "test__get_oldest_feature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__group_features",
                  "false"
                ],
                [
                  "test__set_getitem",
                  "false"
                ],
                [
                  "test_prune_features",
                  "false"
                ],
                [
                  "test__get_oldest_feature",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__group_features",
                  "false"
                ],
                [
                  "test__set_getitem",
                  "false"
                ],
                [
                  "test_prune_features",
                  "false"
                ],
                [
                  "test__get_oldest_feature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "false"
              ],
              [
                "test__set_getitem",
                "false"
              ],
              [
                "test_prune_features",
                "false"
              ],
              [
                "test__get_oldest_feature",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "false"
              ],
              [
                "test__set_getitem",
                "false"
              ],
              [
                "test_prune_features",
                "false"
              ],
              [
                "test__get_oldest_feature",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                []
              ],
              [
                "test__set_getitem",
                []
              ],
              [
                "test_prune_features",
                []
              ],
              [
                "test__get_oldest_feature",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "false"
              ],
              [
                "test__set_getitem",
                "false"
              ],
              [
                "test_prune_features",
                "false"
              ],
              [
                "test__get_oldest_feature",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "false"
              ],
              [
                "test__set_getitem",
                "false"
              ],
              [
                "test_prune_features",
                "false"
              ],
              [
                "test__get_oldest_feature",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__group_features",
                  "0"
                ],
                [
                  "test__set_getitem",
                  "0"
                ],
                [
                  "test_prune_features",
                  "0"
                ],
                [
                  "test__get_oldest_feature",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__group_features",
                  "0"
                ],
                [
                  "test__set_getitem",
                  "0"
                ],
                [
                  "test_prune_features",
                  "0"
                ],
                [
                  "test__get_oldest_feature",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "false"
              ],
              [
                "test__set_getitem",
                "false"
              ],
              [
                "test_prune_features",
                "false"
              ],
              [
                "test__get_oldest_feature",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "false"
              ],
              [
                "test__set_getitem",
                "false"
              ],
              [
                "test_prune_features",
                "false"
              ],
              [
                "test__get_oldest_feature",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "1"
              ],
              [
                "test__set_getitem",
                "1"
              ],
              [
                "test_prune_features",
                "1"
              ],
              [
                "test__get_oldest_feature",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                [
                  "features",
                  "data",
                  "groups",
                  "table"
                ]
              ],
              [
                "test__set_getitem",
                [
                  "result",
                  "n_trials",
                  "table"
                ]
              ],
              [
                "test_prune_features",
                [
                  "features",
                  "data",
                  "expected",
                  "generation_dict",
                  "features_to_drop",
                  "table"
                ]
              ],
              [
                "test__get_oldest_feature",
                [
                  "oldest",
                  "table"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                [
                  "self.pruner"
                ]
              ],
              [
                "test__set_getitem",
                [
                  "self.pruner"
                ]
              ],
              [
                "test_prune_features",
                [
                  "self.pruner"
                ]
              ],
              [
                "test__get_oldest_feature",
                [
                  "self.pruner"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6612822629200816,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__group_features",
                  "test__get_oldest_feature",
                  0.47923263586442255
                ],
                [
                  "test_prune_features",
                  "test__group_features",
                  0.8577269850417945
                ],
                [
                  "test_prune_features",
                  "test__get_oldest_feature",
                  0.45865815425996703
                ],
                [
                  "test_prune_features",
                  "test__set_getitem",
                  0.7672516289070437
                ],
                [
                  "test__get_oldest_feature",
                  "test__set_getitem",
                  0.612348707595642
                ],
                [
                  "test__group_features",
                  "test__set_getitem",
                  0.79247546585162
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__group_features",
                "false"
              ],
              [
                "test__set_getitem",
                "false"
              ],
              [
                "test_prune_features",
                "false"
              ],
              [
                "test__get_oldest_feature",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_graph_\u0026_test_interface.py",
    "testCases": [
      {
        "name": "TestGetInterface",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_interface",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_interface",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_interface",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_interface",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_interface",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_interface",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                [
                  "graph_interface",
                  "obj"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_interface",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_features_\u0026_test_extract.py",
    "testCases": [
      {
        "name": "TestAsFrame",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_as_frame",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_as_frame",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_as_frame",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_as_frame",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_as_frame",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_as_frame",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_as_frame",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_as_frame",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                [
                  "result",
                  "series",
                  "frame"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_as_frame",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestRecursiveFeatureExtractorWithDanglingNode",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_internal_with_dangling_nodes",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_internal_with_dangling_nodes",
                  "[]"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_internal_with_dangling_nodes",
                  "false"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_internal_with_dangling_nodes",
                  "false"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_internal_with_dangling_nodes",
                  "false"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_internal_with_dangling_nodes",
                  "false"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "false"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "false"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                [
                  "self.nodes",
                  "self.G"
                ]
              ],
              [
                "test_e2e_with_dangling_nodes",
                [
                  "self.edge",
                  "self.G"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "false"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "false"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_internal_with_dangling_nodes",
                  "0"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_internal_with_dangling_nodes",
                  "0"
                ],
                [
                  "test_e2e_with_dangling_nodes",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "false"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "false"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "2"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                [
                  "next_features0",
                  "next_features1"
                ]
              ],
              [
                "test_e2e_with_dangling_nodes",
                [
                  "features"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                [
                  "self.rfe",
                  "self.edge"
                ]
              ],
              [
                "test_e2e_with_dangling_nodes",
                [
                  "self.rfe",
                  "self.nodes"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5835206663338848,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_e2e_with_dangling_nodes",
                  "test_internal_with_dangling_nodes",
                  0.5835206663338848
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_internal_with_dangling_nodes",
                "false"
              ],
              [
                "test_e2e_with_dangling_nodes",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_roles_\u0026_test_description_length.py",
    "testCases": [
      {
        "name": "TestDescriptionLength",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_description_length",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_encoding_cost",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_error_cost",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_description_length",
                  "[]"
                ],
                [
                  "test_get_encoding_cost",
                  "[]"
                ],
                [
                  "test_get_error_cost",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_description_length",
                  "false"
                ],
                [
                  "test_get_encoding_cost",
                  "false"
                ],
                [
                  "test_get_error_cost",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_description_length",
                  "false"
                ],
                [
                  "test_get_encoding_cost",
                  "false"
                ],
                [
                  "test_get_error_cost",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_description_length",
                  "false"
                ],
                [
                  "test_get_encoding_cost",
                  "false"
                ],
                [
                  "test_get_error_cost",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_description_length",
                  "false"
                ],
                [
                  "test_get_encoding_cost",
                  "false"
                ],
                [
                  "test_get_error_cost",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                "false"
              ],
              [
                "test_get_encoding_cost",
                "false"
              ],
              [
                "test_get_error_cost",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                "false"
              ],
              [
                "test_get_encoding_cost",
                "false"
              ],
              [
                "test_get_error_cost",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                []
              ],
              [
                "test_get_encoding_cost",
                []
              ],
              [
                "test_get_error_cost",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                "false"
              ],
              [
                "test_get_encoding_cost",
                "false"
              ],
              [
                "test_get_error_cost",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_description_length",
                "true"
              ],
              [
                "test_get_encoding_cost",
                "false"
              ],
              [
                "test_get_error_cost",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_description_length",
                  "0"
                ],
                [
                  "test_get_encoding_cost",
                  "0"
                ],
                [
                  "test_get_error_cost",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_description_length",
                  "0"
                ],
                [
                  "test_get_encoding_cost",
                  "0"
                ],
                [
                  "test_get_error_cost",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                "false"
              ],
              [
                "test_get_encoding_cost",
                "false"
              ],
              [
                "test_get_error_cost",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                "false"
              ],
              [
                "test_get_encoding_cost",
                "false"
              ],
              [
                "test_get_error_cost",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                "1"
              ],
              [
                "test_get_encoding_cost",
                "1"
              ],
              [
                "test_get_error_cost",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                [
                  "costs",
                  "n_roles",
                  "model"
                ]
              ],
              [
                "test_get_encoding_cost",
                [
                  "cost",
                  "expected_cost",
                  "F",
                  "G",
                  "model"
                ]
              ],
              [
                "test_get_error_cost",
                [
                  "cost",
                  "approx"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                []
              ],
              [
                "test_get_encoding_cost",
                []
              ],
              [
                "test_get_error_cost",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4482748845105134,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_encoding_cost",
                  "test_get_description_length",
                  0.5326832956165538
                ],
                [
                  "test_get_error_cost",
                  "test_get_description_length",
                  0.46549166959277816
                ],
                [
                  "test_get_encoding_cost",
                  "test_get_error_cost",
                  0.3466496883222083
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_description_length",
                "false"
              ],
              [
                "test_get_encoding_cost",
                "false"
              ],
              [
                "test_get_error_cost",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]