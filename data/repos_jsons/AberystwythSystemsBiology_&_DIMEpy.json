[
  {
    "name": "tests_\u0026_scan_test.py",
    "testCases": [
      {
        "name": "ScanTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_scan",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_scan",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_scan",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_scan",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_scan",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_scan",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_scan",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_scan",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_scan",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_spectrum_test.py",
    "testCases": [
      {
        "name": "SpectrumTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_limit_spurious_peaks",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_positive_polarity",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_loading",
                  "[]"
                ],
                [
                  "test_infusion",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_reset",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_binning",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_negative_polarity",
                  "[PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_limit_spurious_peaks",
                  "[]"
                ],
                [
                  "test_positive_polarity",
                  "[]"
                ],
                [
                  "test_loading",
                  "[]"
                ],
                [
                  "test_infusion",
                  "[]"
                ],
                [
                  "test_reset",
                  "[]"
                ],
                [
                  "test_binning",
                  "[]"
                ],
                [
                  "test_negative_polarity",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_limit_spurious_peaks",
                  "false"
                ],
                [
                  "test_positive_polarity",
                  "false"
                ],
                [
                  "test_loading",
                  "false"
                ],
                [
                  "test_infusion",
                  "true"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_binning",
                  "false"
                ],
                [
                  "test_negative_polarity",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_limit_spurious_peaks",
                  "false"
                ],
                [
                  "test_positive_polarity",
                  "false"
                ],
                [
                  "test_loading",
                  "false"
                ],
                [
                  "test_infusion",
                  "false"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_binning",
                  "false"
                ],
                [
                  "test_negative_polarity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_limit_spurious_peaks",
                  "false"
                ],
                [
                  "test_positive_polarity",
                  "false"
                ],
                [
                  "test_loading",
                  "false"
                ],
                [
                  "test_infusion",
                  "false"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_binning",
                  "false"
                ],
                [
                  "test_negative_polarity",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_limit_spurious_peaks",
                  "false"
                ],
                [
                  "test_positive_polarity",
                  "false"
                ],
                [
                  "test_loading",
                  "false"
                ],
                [
                  "test_infusion",
                  "false"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_binning",
                  "false"
                ],
                [
                  "test_negative_polarity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "false"
              ],
              [
                "test_positive_polarity",
                "false"
              ],
              [
                "test_loading",
                "false"
              ],
              [
                "test_infusion",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_binning",
                "false"
              ],
              [
                "test_negative_polarity",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "false"
              ],
              [
                "test_positive_polarity",
                "false"
              ],
              [
                "test_loading",
                "false"
              ],
              [
                "test_infusion",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_binning",
                "false"
              ],
              [
                "test_negative_polarity",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                []
              ],
              [
                "test_positive_polarity",
                []
              ],
              [
                "test_loading",
                []
              ],
              [
                "test_infusion",
                []
              ],
              [
                "test_reset",
                []
              ],
              [
                "test_binning",
                []
              ],
              [
                "test_negative_polarity",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "false"
              ],
              [
                "test_positive_polarity",
                "false"
              ],
              [
                "test_loading",
                "false"
              ],
              [
                "test_infusion",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_binning",
                "false"
              ],
              [
                "test_negative_polarity",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "false"
              ],
              [
                "test_positive_polarity",
                "false"
              ],
              [
                "test_loading",
                "false"
              ],
              [
                "test_infusion",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_binning",
                "false"
              ],
              [
                "test_negative_polarity",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_limit_spurious_peaks",
                  "0"
                ],
                [
                  "test_positive_polarity",
                  "0"
                ],
                [
                  "test_loading",
                  "0"
                ],
                [
                  "test_infusion",
                  "0"
                ],
                [
                  "test_reset",
                  "0"
                ],
                [
                  "test_binning",
                  "0"
                ],
                [
                  "test_negative_polarity",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_limit_spurious_peaks",
                  "0"
                ],
                [
                  "test_positive_polarity",
                  "0"
                ],
                [
                  "test_loading",
                  "0"
                ],
                [
                  "test_infusion",
                  "0"
                ],
                [
                  "test_reset",
                  "0"
                ],
                [
                  "test_binning",
                  "0"
                ],
                [
                  "test_negative_polarity",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "false"
              ],
              [
                "test_positive_polarity",
                "false"
              ],
              [
                "test_loading",
                "false"
              ],
              [
                "test_infusion",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_binning",
                "false"
              ],
              [
                "test_negative_polarity",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "false"
              ],
              [
                "test_positive_polarity",
                "false"
              ],
              [
                "test_loading",
                "false"
              ],
              [
                "test_infusion",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_binning",
                "false"
              ],
              [
                "test_negative_polarity",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "1"
              ],
              [
                "test_positive_polarity",
                "1"
              ],
              [
                "test_loading",
                "0"
              ],
              [
                "test_infusion",
                "1"
              ],
              [
                "test_reset",
                "1"
              ],
              [
                "test_binning",
                "2"
              ],
              [
                "test_negative_polarity",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                [
                  "spectrum",
                  "m_l"
                ]
              ],
              [
                "test_positive_polarity",
                [
                  "spectrum"
                ]
              ],
              [
                "test_loading",
                [
                  "spectrum"
                ]
              ],
              [
                "test_infusion",
                [
                  "tics",
                  "spectrum"
                ]
              ],
              [
                "test_reset",
                [
                  "spectrum"
                ]
              ],
              [
                "test_binning",
                [
                  "spectrum"
                ]
              ],
              [
                "test_negative_polarity",
                [
                  "spectrum"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_limit_spurious_peaks",
                []
              ],
              [
                "test_positive_polarity",
                []
              ],
              [
                "test_loading",
                []
              ],
              [
                "test_infusion",
                []
              ],
              [
                "test_reset",
                []
              ],
              [
                "test_binning",
                []
              ],
              [
                "test_negative_polarity",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5188128090266747,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_negative_polarity",
                  "test_reset",
                  0.67175144212722
                ],
                [
                  "test_positive_polarity",
                  "test_infusion",
                  0.5109236037810609
                ],
                [
                  "test_loading",
                  "test_negative_polarity",
                  0.5244044240850758
                ],
                [
                  "test_positive_polarity",
                  "test_binning",
                  0.4435334837636412
                ],
                [
                  "test_binning",
                  "test_reset",
                  0.30410524493997143
                ],
                [
                  "test_loading",
                  "test_reset",
                  0.674199862463242
                ],
                [
                  "test_infusion",
                  "test_reset",
                  0.4018270376080562
                ],
                [
                  "test_positive_polarity",
                  "test_limit_spurious_peaks",
                  0.4634146341463415
                ],
                [
                  "test_loading",
                  "test_binning",
                  0.3618136134933163
                ],
                [
                  "test_positive_polarity",
                  "test_reset",
                  0.6635087809810993
                ],
                [
                  "test_binning",
                  "test_limit_spurious_peaks",
                  0.3498292266304776
                ],
                [
                  "test_loading",
                  "test_infusion",
                  0.4445731011107503
                ],
                [
                  "test_binning",
                  "test_infusion",
                  0.7538290085275734
                ],
                [
                  "test_loading",
                  "test_positive_polarity",
                  0.5179697702828122
                ],
                [
                  "test_negative_polarity",
                  "test_binning",
                  0.4553679830642466
                ],
                [
                  "test_loading",
                  "test_limit_spurious_peaks",
                  0.5650579312176133
                ],
                [
                  "test_negative_polarity",
                  "test_positive_polarity",
                  0.9136498769008704
                ],
                [
                  "test_negative_polarity",
                  "test_limit_spurious_peaks",
                  0.44447831849231534
                ],
                [
                  "test_infusion",
                  "test_limit_spurious_peaks",
                  0.41737421153945825
                ],
                [
                  "test_reset",
                  "test_limit_spurious_peaks",
                  0.4889012070387047
                ],
                [
                  "test_negative_polarity",
                  "test_infusion",
                  0.5245562273663231
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_limit_spurious_peaks",
                "true"
              ],
              [
                "test_positive_polarity",
                "true"
              ],
              [
                "test_loading",
                "false"
              ],
              [
                "test_infusion",
                "false"
              ],
              [
                "test_reset",
                "true"
              ],
              [
                "test_binning",
                "false"
              ],
              [
                "test_negative_polarity",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  }
]