[
  {
    "name": "pyhatch_\u0026_tests_\u0026_test_hatch_supt.py",
    "testCases": [
      {
        "name": "MyTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_myclass_existence",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "[]"
                ],
                [
                  "test_save_project",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_myclass_existence",
                  "[]"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "[]"
                ],
                [
                  "test_save_project",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_myclass_existence",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_save_project",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_myclass_existence",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_save_project",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_myclass_existence",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_save_project",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_myclass_existence",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_save_project",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_save_project",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_save_project",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_myclass_existence",
                []
              ],
              [
                "test_should_always_pass_cleanly",
                [
                  "self.myclass"
                ]
              ],
              [
                "test_save_project",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_save_project",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_save_project",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_myclass_existence",
                  "0"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "0"
                ],
                [
                  "test_save_project",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_myclass_existence",
                  "0"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "0"
                ],
                [
                  "test_save_project",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_save_project",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_save_project",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_myclass_existence",
                "1"
              ],
              [
                "test_should_always_pass_cleanly",
                "0"
              ],
              [
                "test_save_project",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                [
                  "result"
                ]
              ],
              [
                "test_should_always_pass_cleanly",
                []
              ],
              [
                "test_save_project",
                [
                  "result",
                  "h",
                  "PROJ_D"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_myclass_existence",
                [
                  "self.myclass"
                ]
              ],
              [
                "test_should_always_pass_cleanly",
                []
              ],
              [
                "test_save_project",
                [
                  "self.myclass"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.16299941210825117,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_myclass_existence",
                  "test_save_project",
                  0.28799106933337204
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_myclass_existence",
                  0.1254363015010636
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_save_project",
                  0.07557086549031783
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_myclass_existence",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_save_project",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "pyhatch_\u0026_tests_\u0026_test_templating.py",
    "testCases": [
      {
        "name": "MyTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bad_open_bracket",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_get_manifest_from_template",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_nominal_subst",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_bad_key",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "[]"
                ],
                [
                  "test_bad_closing_bracket",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bad_open_bracket",
                  "[]"
                ],
                [
                  "test_get_manifest_from_template",
                  "[]"
                ],
                [
                  "test_nominal_subst",
                  "[]"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "[]"
                ],
                [
                  "test_bad_key",
                  "[]"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "[]"
                ],
                [
                  "test_bad_closing_bracket",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bad_open_bracket",
                  "false"
                ],
                [
                  "test_get_manifest_from_template",
                  "false"
                ],
                [
                  "test_nominal_subst",
                  "false"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "false"
                ],
                [
                  "test_bad_key",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_bad_closing_bracket",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bad_open_bracket",
                  "false"
                ],
                [
                  "test_get_manifest_from_template",
                  "false"
                ],
                [
                  "test_nominal_subst",
                  "false"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "false"
                ],
                [
                  "test_bad_key",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_bad_closing_bracket",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bad_open_bracket",
                  "true"
                ],
                [
                  "test_get_manifest_from_template",
                  "false"
                ],
                [
                  "test_nominal_subst",
                  "false"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "false"
                ],
                [
                  "test_bad_key",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_bad_closing_bracket",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bad_open_bracket",
                  "false"
                ],
                [
                  "test_get_manifest_from_template",
                  "false"
                ],
                [
                  "test_nominal_subst",
                  "false"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "false"
                ],
                [
                  "test_bad_key",
                  "false"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "false"
                ],
                [
                  "test_bad_closing_bracket",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                "false"
              ],
              [
                "test_get_manifest_from_template",
                "false"
              ],
              [
                "test_nominal_subst",
                "false"
              ],
              [
                "test_get_simpleDesc_from_template",
                "false"
              ],
              [
                "test_bad_key",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_bad_closing_bracket",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                "false"
              ],
              [
                "test_get_manifest_from_template",
                "false"
              ],
              [
                "test_nominal_subst",
                "false"
              ],
              [
                "test_get_simpleDesc_from_template",
                "false"
              ],
              [
                "test_bad_key",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_bad_closing_bracket",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                []
              ],
              [
                "test_get_manifest_from_template",
                []
              ],
              [
                "test_nominal_subst",
                []
              ],
              [
                "test_get_simpleDesc_from_template",
                []
              ],
              [
                "test_bad_key",
                []
              ],
              [
                "test_should_always_pass_cleanly",
                []
              ],
              [
                "test_bad_closing_bracket",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                "false"
              ],
              [
                "test_get_manifest_from_template",
                "false"
              ],
              [
                "test_nominal_subst",
                "false"
              ],
              [
                "test_get_simpleDesc_from_template",
                "false"
              ],
              [
                "test_bad_key",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_bad_closing_bracket",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                "false"
              ],
              [
                "test_get_manifest_from_template",
                "false"
              ],
              [
                "test_nominal_subst",
                "false"
              ],
              [
                "test_get_simpleDesc_from_template",
                "false"
              ],
              [
                "test_bad_key",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_bad_closing_bracket",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bad_open_bracket",
                  "0"
                ],
                [
                  "test_get_manifest_from_template",
                  "0"
                ],
                [
                  "test_nominal_subst",
                  "0"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "0"
                ],
                [
                  "test_bad_key",
                  "0"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "0"
                ],
                [
                  "test_bad_closing_bracket",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bad_open_bracket",
                  "0"
                ],
                [
                  "test_get_manifest_from_template",
                  "0"
                ],
                [
                  "test_nominal_subst",
                  "0"
                ],
                [
                  "test_get_simpleDesc_from_template",
                  "0"
                ],
                [
                  "test_bad_key",
                  "0"
                ],
                [
                  "test_should_always_pass_cleanly",
                  "0"
                ],
                [
                  "test_bad_closing_bracket",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                "false"
              ],
              [
                "test_get_manifest_from_template",
                "false"
              ],
              [
                "test_nominal_subst",
                "false"
              ],
              [
                "test_get_simpleDesc_from_template",
                "false"
              ],
              [
                "test_bad_key",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_bad_closing_bracket",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                "false"
              ],
              [
                "test_get_manifest_from_template",
                "false"
              ],
              [
                "test_nominal_subst",
                "false"
              ],
              [
                "test_get_simpleDesc_from_template",
                "false"
              ],
              [
                "test_bad_key",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_bad_closing_bracket",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_open_bracket",
                "3"
              ],
              [
                "test_get_manifest_from_template",
                "1"
              ],
              [
                "test_nominal_subst",
                "1"
              ],
              [
                "test_get_simpleDesc_from_template",
                "1"
              ],
              [
                "test_bad_key",
                "1"
              ],
              [
                "test_should_always_pass_cleanly",
                "0"
              ],
              [
                "test_bad_closing_bracket",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                [
                  "s",
                  "D"
                ]
              ],
              [
                "test_get_manifest_from_template",
                [
                  "s",
                  "D"
                ]
              ],
              [
                "test_nominal_subst",
                [
                  "s",
                  "D"
                ]
              ],
              [
                "test_get_simpleDesc_from_template",
                [
                  "s",
                  "D"
                ]
              ],
              [
                "test_bad_key",
                [
                  "s",
                  "D"
                ]
              ],
              [
                "test_should_always_pass_cleanly",
                []
              ],
              [
                "test_bad_closing_bracket",
                [
                  "s",
                  "D"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_open_bracket",
                []
              ],
              [
                "test_get_manifest_from_template",
                []
              ],
              [
                "test_nominal_subst",
                []
              ],
              [
                "test_get_simpleDesc_from_template",
                []
              ],
              [
                "test_bad_key",
                []
              ],
              [
                "test_should_always_pass_cleanly",
                []
              ],
              [
                "test_bad_closing_bracket",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4424035432153745,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bad_key",
                  "test_get_manifest_from_template",
                  0.613651448591481
                ],
                [
                  "test_get_manifest_from_template",
                  "test_get_simpleDesc_from_template",
                  0.8206165576576293
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_nominal_subst",
                  0.10811249552346708
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_bad_key",
                  0.12309149097933272
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_get_manifest_from_template",
                  0.08843153765707637
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_get_simpleDesc_from_template",
                  0.08131156281817417
                ],
                [
                  "test_nominal_subst",
                  "test_get_manifest_from_template",
                  0.3505536546997459
                ],
                [
                  "test_bad_open_bracket",
                  "test_get_manifest_from_template",
                  0.44399618972177585
                ],
                [
                  "test_bad_key",
                  "test_get_simpleDesc_from_template",
                  0.5780059766913394
                ],
                [
                  "test_nominal_subst",
                  "test_bad_open_bracket",
                  0.592156525463792
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_bad_closing_bracket",
                  0.06639061303092922
                ],
                [
                  "test_nominal_subst",
                  "test_get_simpleDesc_from_template",
                  0.3062127263296445
                ],
                [
                  "test_bad_closing_bracket",
                  "test_bad_open_bracket",
                  0.9454545454545454
                ],
                [
                  "test_nominal_subst",
                  "test_bad_key",
                  0.5611425419454066
                ],
                [
                  "test_bad_closing_bracket",
                  "test_get_manifest_from_template",
                  0.44399618972177585
                ],
                [
                  "test_bad_closing_bracket",
                  "test_bad_key",
                  0.8090398349558905
                ],
                [
                  "test_bad_open_bracket",
                  "test_bad_key",
                  0.8090398349558905
                ],
                [
                  "test_should_always_pass_cleanly",
                  "test_bad_open_bracket",
                  0.06639061303092922
                ],
                [
                  "test_nominal_subst",
                  "test_bad_closing_bracket",
                  0.592156525463792
                ],
                [
                  "test_bad_closing_bracket",
                  "test_get_simpleDesc_from_template",
                  0.4453617714151233
                ],
                [
                  "test_bad_open_bracket",
                  "test_get_simpleDesc_from_template",
                  0.4453617714151233
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_open_bracket",
                "false"
              ],
              [
                "test_get_manifest_from_template",
                "true"
              ],
              [
                "test_nominal_subst",
                "false"
              ],
              [
                "test_get_simpleDesc_from_template",
                "true"
              ],
              [
                "test_bad_key",
                "false"
              ],
              [
                "test_should_always_pass_cleanly",
                "false"
              ],
              [
                "test_bad_closing_bracket",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  }
]