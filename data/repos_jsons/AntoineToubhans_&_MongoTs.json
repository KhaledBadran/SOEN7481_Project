[
  {
    "name": "test_\u0026_query_test.py",
    "testCases": [
      {
        "name": "QueryTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_build_project_succeeds",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_build_project_succeeds",
                  "[]"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "[]"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "[]"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "[]"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_build_project_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "false"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "false"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_build_project_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "false"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "false"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_build_project_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "false"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "false"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_build_project_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "false"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "false"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "false"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "false"
              ],
              [
                "test_build_initial_match_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "false"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "false"
              ],
              [
                "test_build_initial_match_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "false"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                []
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                []
              ],
              [
                "test_build_initial_match_succeeds",
                []
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                []
              ],
              [
                "test_build_unwind_and_match_succeeds",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "false"
              ],
              [
                "test_build_initial_match_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "false"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "false"
              ],
              [
                "test_build_initial_match_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "false"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_build_project_succeeds",
                  "0"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "0"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "0"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "0"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_build_project_succeeds",
                  "0"
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "0"
                ],
                [
                  "test_build_initial_match_succeeds",
                  "0"
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "0"
                ],
                [
                  "test_build_unwind_and_match_succeeds",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "false"
              ],
              [
                "test_build_initial_match_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "false"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "false"
              ],
              [
                "test_build_initial_match_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "false"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "1"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "1"
              ],
              [
                "test_build_initial_match_succeeds",
                "1"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "1"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                []
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                []
              ],
              [
                "test_build_initial_match_succeeds",
                []
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                []
              ],
              [
                "test_build_unwind_and_match_succeeds",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                []
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                []
              ],
              [
                "test_build_initial_match_succeeds",
                []
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                []
              ],
              [
                "test_build_unwind_and_match_succeeds",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.1620267160263964,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_build_unwind_and_match_succeeds",
                  "test_build_project_succeeds",
                  0.213049456516523
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "test_build_project_succeeds",
                  0.13762047064079508
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "test_build_initial_match_succeeds",
                  0.025078493128775955
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  0.6605782590758164
                ],
                [
                  "test_build_initial_match_succeeds",
                  "test_build_project_succeeds",
                  0.04179748854795993
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "test_build_unwind_and_match_succeeds",
                  0.15392982399673985
                ],
                [
                  "test_get_floor_datetime_returns_correct_datetime",
                  "test_build_initial_match_succeeds",
                  0.0483183963828173
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "test_build_unwind_and_match_succeeds",
                  0.13315591032282686
                ],
                [
                  "test_get_floor_datetime_fails_for_invalid_interval",
                  "test_build_project_succeeds",
                  0.16666666666666666
                ],
                [
                  "test_build_initial_match_succeeds",
                  "test_build_unwind_and_match_succeeds",
                  0.04007219498504305
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_build_project_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_fails_for_invalid_interval",
                "false"
              ],
              [
                "test_build_initial_match_succeeds",
                "false"
              ],
              [
                "test_get_floor_datetime_returns_correct_datetime",
                "false"
              ],
              [
                "test_build_unwind_and_match_succeeds",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "test_\u0026_client_test.py",
    "testCases": [
      {
        "name": "MongoTSClientTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_database_returns_a_database",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "[]"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "[]"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "[]"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "[]"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "[]"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "[]"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "[]"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "[]"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "[]"
                ],
                [
                  "test_get_database_returns_a_database",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "false"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "false"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "false"
                ],
                [
                  "test_get_database_returns_a_database",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "false"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "false"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "false"
                ],
                [
                  "test_get_database_returns_a_database",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "false"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "false"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "false"
                ],
                [
                  "test_get_database_returns_a_database",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "false"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "false"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "false"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "false"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "false"
                ],
                [
                  "test_get_database_returns_a_database",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "false"
              ],
              [
                "test_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "false"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "false"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "false"
              ],
              [
                "test_get_database_returns_a_database",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "false"
              ],
              [
                "test_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "false"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "false"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "false"
              ],
              [
                "test_get_database_returns_a_database",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                []
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                []
              ],
              [
                "test_get_collection_returns_a_collection",
                []
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                []
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                []
              ],
              [
                "test_magic_get_database_returns_a_database",
                []
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                []
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                []
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                []
              ],
              [
                "test_get_database_returns_a_database",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "false"
              ],
              [
                "test_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "false"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "false"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "false"
              ],
              [
                "test_get_database_returns_a_database",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "false"
              ],
              [
                "test_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "false"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "false"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "false"
              ],
              [
                "test_get_database_returns_a_database",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "0"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "0"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "0"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "0"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "0"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "0"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "0"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "0"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "0"
                ],
                [
                  "test_get_database_returns_a_database",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_magic_get_collection_returns_a_collection",
                  "0"
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "0"
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "0"
                ],
                [
                  "test_mongots_collection_has_a_metadata_collection",
                  "0"
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "0"
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "0"
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "0"
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "0"
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "0"
                ],
                [
                  "test_get_database_returns_a_database",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "false"
              ],
              [
                "test_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "false"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "false"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "false"
              ],
              [
                "test_get_database_returns_a_database",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "false"
              ],
              [
                "test_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "false"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "false"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "false"
              ],
              [
                "test_get_database_returns_a_database",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "3"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "1"
              ],
              [
                "test_get_collection_returns_a_collection",
                "3"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "3"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "2"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "3"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "1"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "2"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "3"
              ],
              [
                "test_get_database_returns_a_database",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                [
                  "mongots_collection"
                ]
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                []
              ],
              [
                "test_get_collection_returns_a_collection",
                [
                  "mongots_database",
                  "mongots_client",
                  "mongots_collection"
                ]
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                [
                  "mongots_collection"
                ]
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                [
                  "mongots_client"
                ]
              ],
              [
                "test_magic_get_database_returns_a_database",
                [
                  "mongots_database",
                  "mongots_client"
                ]
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                []
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                [
                  "mongots_client"
                ]
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                [
                  "mongots_client",
                  "mocked_mongo_client"
                ]
              ],
              [
                "test_get_database_returns_a_database",
                [
                  "mongots_database",
                  "mongots_client"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                []
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                []
              ],
              [
                "test_get_collection_returns_a_collection",
                []
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                []
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                []
              ],
              [
                "test_magic_get_database_returns_a_database",
                []
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                []
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                []
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                []
              ],
              [
                "test_get_database_returns_a_database",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5961242318800083,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_magic_get_database_fails_for_invalid_name",
                  0.3819143697985006
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  0.9606094746412625
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_magic_get_collection_returns_a_collection",
                  0.5240563981875065
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "test_get_collection_returns_a_collection",
                  0.7395099728874519
                ],
                [
                  "test_get_database_returns_a_database",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.4734712619241063
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.5144527715304276
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_magic_get_database_returns_a_database",
                  0.6067673909058285
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "test_magic_get_collection_returns_a_collection",
                  0.4947274449181537
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "test_magic_get_database_fails_for_invalid_name",
                  0.5449492609130661
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "test_get_database_returns_a_database",
                  0.5663178166863172
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "test_magic_get_collection_returns_a_collection",
                  0.7072427501871671
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.7852613185085998
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.37133747487219954
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_get_database_returns_a_database",
                  0.5535716086954976
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.5289972180268645
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.9254762227411248
                ],
                [
                  "test_get_database_returns_a_database",
                  "test_magic_get_database_returns_a_database",
                  0.9630363567333498
                ],
                [
                  "test_magic_get_collection_returns_a_collection",
                  "test_magic_get_database_fails_for_invalid_name",
                  0.5613835722137897
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  0.8487321841112898
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_get_collection_returns_a_collection",
                  0.5673665146135801
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "test_magic_get_database_returns_a_database",
                  0.5988354499392099
                ],
                [
                  "test_magic_get_collection_returns_a_collection",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.5743381002455481
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_get_database_returns_a_database",
                  0.5738190417570044
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.4789694820193478
                ],
                [
                  "test_get_database_returns_a_database",
                  "test_magic_get_database_fails_for_invalid_name",
                  0.5190388524734348
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  0.8517051775125647
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "test_magic_get_database_fails_for_invalid_name",
                  0.37832222460186715
                ],
                [
                  "test_get_database_returns_a_database",
                  "test_get_collection_returns_a_collection",
                  0.7617402824058349
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "test_get_collection_returns_a_collection",
                  0.5599496399301324
                ],
                [
                  "test_mongots_client_init_succeeds_when_args_are_provided",
                  "test_magic_get_database_fails_for_invalid_name",
                  0.3769218104076232
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.5094200348728194
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.653834841531101
                ],
                [
                  "test_magic_get_collection_fails_for_invalid_name",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.5102661237313955
                ],
                [
                  "test_magic_get_database_returns_a_database",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.49852724275079074
                ],
                [
                  "test_magic_get_database_fails_for_invalid_name",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.5000797384583652
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_magic_get_database_returns_a_database",
                  0.584467761388568
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_magic_get_collection_returns_a_collection",
                  0.501280411827603
                ],
                [
                  "test_magic_get_collection_returns_a_collection",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.8144444966089956
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "test_magic_get_collection_returns_a_collection",
                  0.8438530156892917
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_magic_get_database_fails_for_invalid_name",
                  0.48617243480439776
                ],
                [
                  "test_get_collection_returns_a_collection",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.3889222341312986
                ],
                [
                  "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                  "test_magic_get_collection_fails_for_invalid_name",
                  0.3762560663311362
                ],
                [
                  "test_get_database_returns_a_database",
                  "test_mongots_collection_has_a_metadata_collection",
                  0.6458120243009627
                ],
                [
                  "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                  "test_get_collection_returns_a_collection",
                  0.5345653124362572
                ],
                [
                  "test_get_database_returns_a_database",
                  "test_magic_get_collection_returns_a_collection",
                  0.6848672513487423
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_magic_get_database_fails_for_invalid_name",
                "false"
              ],
              [
                "test_get_collection_returns_a_collection",
                "false"
              ],
              [
                "test_mongots_collection_has_a_metadata_collection",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_args_are_provided",
                "false"
              ],
              [
                "test_magic_get_database_returns_a_database",
                "false"
              ],
              [
                "test_magic_get_collection_fails_for_invalid_name",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_kwargs_are_provided",
                "false"
              ],
              [
                "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
                "false"
              ],
              [
                "test_get_database_returns_a_database",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "test_\u0026_insert_test.py",
    "testCases": [
      {
        "name": "InsertTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_build_update_succeeds",
                  "[PyCallExpression: self.assertIsNotNone]"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_empty_document",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_build_update_succeeds",
                  "[]"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "[]"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "[]"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "[]"
                ],
                [
                  "test_empty_document",
                  "[]"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "[]"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "[]"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "[]"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "[]"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "[]"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_build_update_succeeds",
                  "false"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "false"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_empty_document",
                  "true"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "false"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "false"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "false"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "false"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_build_update_succeeds",
                  "false"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "false"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_empty_document",
                  "false"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "false"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "false"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "false"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "false"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_build_update_succeeds",
                  "false"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "false"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_empty_document",
                  "false"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "false"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "false"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "false"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "false"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_build_update_succeeds",
                  "false"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "false"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "false"
                ],
                [
                  "test_empty_document",
                  "false"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "false"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "false"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "false"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "false"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "false"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                "false"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "false"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "false"
              ],
              [
                "test_empty_document",
                "false"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "false"
              ],
              [
                "test_build_update_calls_build_max_update",
                "false"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "false"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "false"
              ],
              [
                "test_build_update_returns_correct_result",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                "false"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "false"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "false"
              ],
              [
                "test_empty_document",
                "false"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "false"
              ],
              [
                "test_build_update_calls_build_max_update",
                "false"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "false"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "false"
              ],
              [
                "test_build_update_returns_correct_result",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                []
              ],
              [
                "test_build_inc_update_returns_correct_result",
                []
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                []
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                []
              ],
              [
                "test_empty_document",
                []
              ],
              [
                "test_build_update_calls_build_inc_update",
                []
              ],
              [
                "test_build_update_calls_build_max_update",
                []
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                []
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                []
              ],
              [
                "test_build_update_keys_return_correct_reults",
                []
              ],
              [
                "test_build_update_returns_correct_result",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                "false"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "false"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "false"
              ],
              [
                "test_empty_document",
                "false"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "false"
              ],
              [
                "test_build_update_calls_build_max_update",
                "false"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "false"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "false"
              ],
              [
                "test_build_update_returns_correct_result",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_build_update_succeeds",
                "false"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "false"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "false"
              ],
              [
                "test_empty_document",
                "true"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "false"
              ],
              [
                "test_build_update_calls_build_max_update",
                "false"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "false"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "false"
              ],
              [
                "test_build_update_returns_correct_result",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_build_update_succeeds",
                  "0"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "0"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "0"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "0"
                ],
                [
                  "test_empty_document",
                  "0"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "0"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "0"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "0"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "0"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "0"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_build_update_succeeds",
                  "0"
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "0"
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "0"
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "0"
                ],
                [
                  "test_empty_document",
                  "0"
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "0"
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "0"
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "0"
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "0"
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "0"
                ],
                [
                  "test_build_update_returns_correct_result",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                "false"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "false"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "false"
              ],
              [
                "test_empty_document",
                "false"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "false"
              ],
              [
                "test_build_update_calls_build_max_update",
                "false"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "false"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "false"
              ],
              [
                "test_build_update_returns_correct_result",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                "false"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "false"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "false"
              ],
              [
                "test_empty_document",
                "false"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "false"
              ],
              [
                "test_build_update_calls_build_max_update",
                "false"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "false"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "false"
              ],
              [
                "test_build_update_returns_correct_result",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                "1"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "1"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "1"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "2"
              ],
              [
                "test_empty_document",
                "19"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "2"
              ],
              [
                "test_build_update_calls_build_max_update",
                "3"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "1"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "1"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "1"
              ],
              [
                "test_build_update_returns_correct_result",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                [
                  "update"
                ]
              ],
              [
                "test_build_inc_update_returns_correct_result",
                [
                  "inc_update"
                ]
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                [
                  "filters"
                ]
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                [
                  "max_update",
                  "min_update"
                ]
              ],
              [
                "test_empty_document",
                [
                  "empty_document"
                ]
              ],
              [
                "test_build_update_calls_build_inc_update",
                [
                  "update"
                ]
              ],
              [
                "test_build_update_calls_build_max_update",
                [
                  "update"
                ]
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                [
                  "tags"
                ]
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                [
                  "filters"
                ]
              ],
              [
                "test_build_update_keys_return_correct_reults",
                [
                  "update_keys"
                ]
              ],
              [
                "test_build_update_returns_correct_result",
                [
                  "update"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                []
              ],
              [
                "test_build_inc_update_returns_correct_result",
                []
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                []
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                []
              ],
              [
                "test_empty_document",
                []
              ],
              [
                "test_build_update_calls_build_inc_update",
                []
              ],
              [
                "test_build_update_calls_build_max_update",
                []
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                []
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                []
              ],
              [
                "test_build_update_keys_return_correct_reults",
                []
              ],
              [
                "test_build_update_returns_correct_result",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6234416180064121,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_update_keys_return_correct_reults",
                  0.5108569591865058
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_empty_document",
                  0.3847148871989044
                ],
                [
                  "test_build_update_succeeds",
                  "test_build_update_calls_build_inc_update",
                  0.7354253887275448
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_inc_update_returns_correct_result",
                  0.6232291509408052
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_update_returns_correct_result",
                  0.7829378257845123
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_build_update_returns_correct_result",
                  0.6988716305890416
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "test_build_update_calls_build_max_update",
                  0.6945718234047351
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "test_build_update_returns_correct_result",
                  0.8325189111423347
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_update_calls_build_max_update",
                  0.6156504586665812
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_build_inc_update_returns_correct_result",
                  0.5498824033572923
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  0.9571492690986115
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_build_update_calls_build_max_update",
                  0.5743367481093588
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "test_build_inc_update_returns_correct_result",
                  0.7047842692320895
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "test_build_update_returns_correct_result",
                  0.7864132198053729
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_update_calls_build_inc_update",
                  0.6543426938029534
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "test_build_update_calls_build_inc_update",
                  0.7775900151211357
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_update_succeeds",
                  0.8103653453761196
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "test_build_min_max_update_returns_correct_result",
                  0.8942910828999897
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "test_empty_document",
                  0.2235614613258148
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_update_calls_build_inc_update",
                  0.6649562610671719
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_build_min_max_update_returns_correct_result",
                  0.4905925679713635
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "test_build_update_calls_build_max_update",
                  0.7347382417838769
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_build_update_succeeds",
                  0.7437918297844622
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "test_build_update_returns_correct_result",
                  0.6649874359199643
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_empty_document",
                  0.37835290889166273
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_build_update_keys_return_correct_reults",
                  0.4604001269075899
                ],
                [
                  "test_build_update_succeeds",
                  "test_build_min_max_update_returns_correct_result",
                  0.6075482512438447
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_update_calls_build_max_update",
                  0.6250743130744701
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_empty_document",
                  0.3782690350677293
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_update_keys_return_correct_reults",
                  0.5017211754859809
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "test_empty_document",
                  0.23427599098675458
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_update_returns_correct_result",
                  0.7801378048105849
                ],
                [
                  "test_build_min_max_update_returns_correct_result",
                  "test_build_update_calls_build_inc_update",
                  0.7148652719601074
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_filter_do_not_modify_the_tag_object",
                  0.8367575507244679
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "test_build_update_calls_build_inc_update",
                  0.751724018561352
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "test_build_update_returns_correct_result",
                  0.7943184793138317
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_inc_update_returns_correct_result",
                  0.6288462911940258
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_min_max_update_returns_correct_result",
                  0.5480722048803899
                ],
                [
                  "test_build_update_succeeds",
                  "test_build_inc_update_returns_correct_result",
                  0.651663331935939
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "test_build_update_returns_correct_result",
                  0.7417817466685194
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_min_max_update_returns_correct_result",
                  0.5553382478545285
                ],
                [
                  "test_build_update_calls_build_max_update",
                  "test_empty_document",
                  0.28796774941799663
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "test_empty_document",
                  0.2506445670125628
                ],
                [
                  "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                  "test_build_update_succeeds",
                  0.8257293332619494
                ],
                [
                  "test_build_update_succeeds",
                  "test_empty_document",
                  0.31744999243811
                ],
                [
                  "test_build_update_calls_build_inc_update",
                  "test_build_update_calls_build_max_update",
                  0.8368000442045483
                ],
                [
                  "test_build_update_keys_return_correct_reults",
                  "test_build_min_max_update_returns_correct_result",
                  0.6855267192916219
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "test_build_update_calls_build_max_update",
                  0.6725166211623494
                ],
                [
                  "test_build_update_succeeds",
                  "test_build_update_calls_build_max_update",
                  0.6867522060273409
                ],
                [
                  "test_build_update_returns_correct_result",
                  "test_empty_document",
                  0.2908657534724299
                ],
                [
                  "test_build_filter_add_a_timestamp_to_tags",
                  "test_build_filter_do_not_modify_the_tag_object",
                  0.8799714013941744
                ],
                [
                  "test_build_filter_do_not_modify_the_tag_object",
                  "test_build_update_calls_build_inc_update",
                  0.6015440440189161
                ],
                [
                  "test_build_inc_update_returns_correct_result",
                  "test_empty_document",
                  0.21093317729320038
                ],
                [
                  "test_build_update_succeeds",
                  "test_build_update_keys_return_correct_reults",
                  0.609498379736422
                ],
                [
                  "test_build_update_succeeds",
                  "test_build_update_returns_correct_result",
                  0.833382371762726
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_build_update_succeeds",
                "false"
              ],
              [
                "test_build_inc_update_returns_correct_result",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_to_tags",
                "false"
              ],
              [
                "test_build_min_max_update_returns_correct_result",
                "false"
              ],
              [
                "test_empty_document",
                "false"
              ],
              [
                "test_build_update_calls_build_inc_update",
                "false"
              ],
              [
                "test_build_update_calls_build_max_update",
                "false"
              ],
              [
                "test_build_filter_do_not_modify_the_tag_object",
                "false"
              ],
              [
                "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
                "false"
              ],
              [
                "test_build_update_keys_return_correct_reults",
                "false"
              ],
              [
                "test_build_update_returns_correct_result",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "test_\u0026_database_test.py",
    "testCases": [
      {
        "name": "MongoTSDatabaseTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_collections_return_empty",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "[PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_collections_return_empty",
                  "[]"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "[]"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_collections_return_empty",
                  "false"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "false"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_collections_return_empty",
                  "false"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "false"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_collections_return_empty",
                  "false"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "false"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_collections_return_empty",
                  "false"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "false"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "false"
              ],
              [
                "test_get_collections_return_two_collection",
                "false"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "false"
              ],
              [
                "test_get_collections_return_two_collection",
                "false"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                []
              ],
              [
                "test_get_collections_return_two_collection",
                []
              ],
              [
                "test_database_is_instance_of_mongots_database",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "false"
              ],
              [
                "test_get_collections_return_two_collection",
                "false"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "false"
              ],
              [
                "test_get_collections_return_two_collection",
                "false"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_collections_return_empty",
                  "0"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "0"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_collections_return_empty",
                  "0"
                ],
                [
                  "test_get_collections_return_two_collection",
                  "0"
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "false"
              ],
              [
                "test_get_collections_return_two_collection",
                "false"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "false"
              ],
              [
                "test_get_collections_return_two_collection",
                "false"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "1"
              ],
              [
                "test_get_collections_return_two_collection",
                "1"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                []
              ],
              [
                "test_get_collections_return_two_collection",
                []
              ],
              [
                "test_database_is_instance_of_mongots_database",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                [
                  "self.database"
                ]
              ],
              [
                "test_get_collections_return_two_collection",
                [
                  "self.database"
                ]
              ],
              [
                "test_database_is_instance_of_mongots_database",
                [
                  "self.database"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.16988006802318545,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_database_is_instance_of_mongots_database",
                  "test_get_collections_return_empty",
                  0.2300894966542111
                ],
                [
                  "test_database_is_instance_of_mongots_database",
                  "test_get_collections_return_two_collection",
                  0.19951067739032335
                ],
                [
                  "test_get_collections_return_empty",
                  "test_get_collections_return_two_collection",
                  0.0800400300250219
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_collections_return_empty",
                "false"
              ],
              [
                "test_get_collections_return_two_collection",
                "false"
              ],
              [
                "test_database_is_instance_of_mongots_database",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_metadata_test.py",
    "testCases": [
      {
        "name": "MetadataTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_collections_returns_empty",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "[]"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "[]"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "[]"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "[]"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "[]"
                ],
                [
                  "test_get_collections_returns_empty",
                  "[]"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "[]"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "[]"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "[]"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "[]"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "false"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "false"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "false"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "false"
                ],
                [
                  "test_get_collections_returns_empty",
                  "false"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "false"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "false"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "false"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "false"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "false"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "false"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "false"
                ],
                [
                  "test_get_collections_returns_empty",
                  "false"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "false"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "false"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "false"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "false"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "false"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "false"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "false"
                ],
                [
                  "test_get_collections_returns_empty",
                  "false"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "false"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "false"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "false"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "false"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "false"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "false"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "false"
                ],
                [
                  "test_get_collections_returns_empty",
                  "false"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "false"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "false"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "false"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "false"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "false"
              ],
              [
                "test_get_collections_returns_two_collection",
                "false"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "false"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "false"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "false"
              ],
              [
                "test_get_collections_returns_empty",
                "false"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "false"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "false"
              ],
              [
                "test_metadata_collection_name_is_right",
                "false"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "false"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "false"
              ],
              [
                "test_get_collections_returns_two_collection",
                "false"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "false"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "false"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "false"
              ],
              [
                "test_get_collections_returns_empty",
                "false"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "false"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "false"
              ],
              [
                "test_metadata_collection_name_is_right",
                "false"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "false"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                []
              ],
              [
                "test_get_collections_returns_two_collection",
                []
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                []
              ],
              [
                "test_metadata_retrieves_one_tag",
                []
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                []
              ],
              [
                "test_get_collections_returns_empty",
                []
              ],
              [
                "test_metadata_retrieves_no_tags",
                []
              ],
              [
                "test_metadata_acknowledge_tag_update",
                []
              ],
              [
                "test_metadata_collection_name_is_right",
                []
              ],
              [
                "test_metadata_retrieves_two_tags",
                []
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "false"
              ],
              [
                "test_get_collections_returns_two_collection",
                "false"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "false"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "false"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "false"
              ],
              [
                "test_get_collections_returns_empty",
                "false"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "false"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "false"
              ],
              [
                "test_metadata_collection_name_is_right",
                "false"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "false"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "false"
              ],
              [
                "test_get_collections_returns_two_collection",
                "false"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "false"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "false"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "false"
              ],
              [
                "test_get_collections_returns_empty",
                "false"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "false"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "false"
              ],
              [
                "test_metadata_collection_name_is_right",
                "false"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "false"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "0"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "0"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "0"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "0"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "0"
                ],
                [
                  "test_get_collections_returns_empty",
                  "0"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "0"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "0"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "0"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "0"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_metadata_retrieves_empty_tags",
                  "0"
                ],
                [
                  "test_get_collections_returns_two_collection",
                  "0"
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "0"
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "0"
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "0"
                ],
                [
                  "test_get_collections_returns_empty",
                  "0"
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "0"
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "0"
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "0"
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "0"
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "false"
              ],
              [
                "test_get_collections_returns_two_collection",
                "false"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "false"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "false"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "false"
              ],
              [
                "test_get_collections_returns_empty",
                "false"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "false"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "false"
              ],
              [
                "test_metadata_collection_name_is_right",
                "false"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "false"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "false"
              ],
              [
                "test_get_collections_returns_two_collection",
                "false"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "false"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "false"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "false"
              ],
              [
                "test_get_collections_returns_empty",
                "false"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "false"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "false"
              ],
              [
                "test_metadata_collection_name_is_right",
                "false"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "false"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "1"
              ],
              [
                "test_get_collections_returns_two_collection",
                "1"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "1"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "1"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "1"
              ],
              [
                "test_get_collections_returns_empty",
                "1"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "1"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "1"
              ],
              [
                "test_metadata_collection_name_is_right",
                "1"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "1"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                [
                  "tags"
                ]
              ],
              [
                "test_get_collections_returns_two_collection",
                []
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                [
                  "result"
                ]
              ],
              [
                "test_metadata_retrieves_one_tag",
                [
                  "tags"
                ]
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                []
              ],
              [
                "test_get_collections_returns_empty",
                []
              ],
              [
                "test_metadata_retrieves_no_tags",
                [
                  "tags"
                ]
              ],
              [
                "test_metadata_acknowledge_tag_update",
                [
                  "result"
                ]
              ],
              [
                "test_metadata_collection_name_is_right",
                []
              ],
              [
                "test_metadata_retrieves_two_tags",
                [
                  "tags"
                ]
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_get_collections_returns_two_collection",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_retrieves_one_tag",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_get_collections_returns_empty",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_retrieves_no_tags",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_acknowledge_tag_update",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_collection_name_is_right",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_retrieves_two_tags",
                [
                  "self.metadata"
                ]
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                [
                  "self.metadata"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4670726283442502,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_get_collections_returns_two_collection",
                  0.8259582189656745
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "test_get_collections_returns_empty",
                  0.060485837890913385
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "test_get_collections_returns_empty",
                  0.3508232077228117
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.24006438046665274
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.8608581939007431
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "test_get_collections_returns_empty",
                  0.06780635036208102
                ],
                [
                  "test_metadata_retrieves_empty_tags",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.8087262284127343
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "test_get_collections_returns_two_collection",
                  0.8261510634638056
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "test_get_collections_returns_two_collection",
                  0.23768597289704124
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "test_metadata_retrieves_empty_tags",
                  0.563621480190678
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  0.26524794588365275
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_metadata_retrieves_one_tag",
                  0.7030312038332426
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_get_collections_returns_empty",
                  0.29814239699997197
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  0.3383639475502509
                ],
                [
                  "test_metadata_retrieves_two_tags",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.8236825531250414
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "test_metadata_retrieves_two_tags",
                  0.20447945297729908
                ],
                [
                  "test_metadata_retrieves_timestamp_statistics",
                  "test_get_collections_returns_two_collection",
                  0.9481898446633733
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "test_metadata_retrieves_one_tag",
                  0.31518754028368906
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "test_metadata_retrieves_two_tags",
                  0.9159623412344858
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_retrieves_no_tags",
                  0.314970394174356
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_metadata_retrieves_no_tags",
                  0.18394180184548972
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "test_get_collections_returns_empty",
                  0.10170952554312154
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  0.39223227027636814
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  0.31814238148788887
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_metadata_retrieves_empty_tags",
                  0.7916331135924696
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_metadata_retrieves_two_tags",
                  0.8922477901098586
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "test_get_collections_returns_empty",
                  0.253546276418555
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_acknowledge_tag_update",
                  0.3244428422615251
                ],
                [
                  "test_metadata_retrieves_empty_tags",
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  0.40492914359926285
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_metadata_retrieves_one_tag",
                  0.8362622455035791
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_acknowledge_no_edge_update",
                  0.35944257734479473
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_retrieves_one_tag",
                  0.2779692826455979
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "test_get_collections_returns_two_collection",
                  0.7313557328992686
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "test_get_collections_returns_two_collection",
                  0.027484792138418288
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_retrieves_two_tags",
                  0.2554730631557725
                ],
                [
                  "test_metadata_retrieves_empty_tags",
                  "test_metadata_retrieves_two_tags",
                  0.7757145035476137
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.8501772697518283
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_metadata_retrieves_no_tags",
                  0.2445417437817667
                ],
                [
                  "test_metadata_retrieves_empty_tags",
                  "test_get_collections_returns_empty",
                  0.15389675281277312
                ],
                [
                  "test_metadata_retrieves_empty_tags",
                  "test_get_collections_returns_two_collection",
                  0.7618403815102103
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  0.29735051672502627
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.0716335318826566
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_metadata_acknowledge_tag_update",
                  0.9096248571037153
                ],
                [
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.32708556839752895
                ],
                [
                  "test_metadata_retrieves_one_tag",
                  "test_metadata_retrieves_timestamp_statistics",
                  0.7413793103448275
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_metadata_retrieves_empty_tags",
                  0.3441236008058427
                ],
                [
                  "test_metadata_collection_name_is_right",
                  "test_get_collections_returns_two_collection",
                  0.21815377450367385
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_metadata_retrieves_empty_tags",
                  0.7815390739430262
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_get_collections_returns_empty",
                  0.10882143751650174
                ],
                [
                  "test_metadata_acknowledge_tag_update",
                  "test_get_collections_returns_two_collection",
                  0.8572054378728489
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_metadata_retrieves_two_tags",
                  0.7583903903122591
                ],
                [
                  "test_metadata_acknowledge_no_edge_update",
                  "test_get_collections_returns_empty",
                  0.14467284665112365
                ],
                [
                  "test_metadata_retrieves_no_tags",
                  "test_metadata_retrieves_empty_timestamp_statistics",
                  0.37062465833055064
                ],
                [
                  "test_metadata_retrieves_empty_tags",
                  "test_metadata_retrieves_one_tag",
                  0.7652463236593615
                ],
                [
                  "test_get_collections_returns_empty",
                  "test_get_collections_returns_two_collection",
                  0.08672118566015558
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_metadata_retrieves_empty_tags",
                "false"
              ],
              [
                "test_get_collections_returns_two_collection",
                "false"
              ],
              [
                "test_metadata_acknowledge_no_edge_update",
                "true"
              ],
              [
                "test_metadata_retrieves_one_tag",
                "false"
              ],
              [
                "test_metadata_retrieves_timestamp_statistics",
                "false"
              ],
              [
                "test_get_collections_returns_empty",
                "false"
              ],
              [
                "test_metadata_retrieves_no_tags",
                "false"
              ],
              [
                "test_metadata_acknowledge_tag_update",
                "true"
              ],
              [
                "test_metadata_collection_name_is_right",
                "false"
              ],
              [
                "test_metadata_retrieves_two_tags",
                "false"
              ],
              [
                "test_metadata_retrieves_empty_timestamp_statistics",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "test_\u0026_dataframe_test.py",
    "testCases": [
      {
        "name": "DataframeTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_build_dataframe",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_build_dataframe",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_build_dataframe",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_build_dataframe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_build_dataframe",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_build_dataframe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_build_dataframe",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_build_dataframe",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                [
                  "actual_df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_build_dataframe",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_collection_test.py",
    "testCases": [
      {
        "name": "MongoTSCollectionTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_query_calls_build_project",
                  "[]"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "[]"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "[]"
                ],
                [
                  "test_query_calls_build_update",
                  "[]"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "[]"
                ],
                [
                  "test_query_calls_build_sort",
                  "[]"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_insert_one_succeeds",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_insert_one_call_build_update",
                  "[]"
                ],
                [
                  "test_get_tags_returns_tags",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_query_calls_build_project",
                  "[]"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "[]"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "[]"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "[]"
                ],
                [
                  "test_query_calls_build_update",
                  "[]"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "[]"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "[]"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "[]"
                ],
                [
                  "test_query_calls_build_sort",
                  "[]"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "[]"
                ],
                [
                  "test_insert_one_succeeds",
                  "[]"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "[]"
                ],
                [
                  "test_insert_one_call_build_update",
                  "[]"
                ],
                [
                  "test_get_tags_returns_tags",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_query_calls_build_project",
                  "false"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "false"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "false"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "false"
                ],
                [
                  "test_query_calls_build_update",
                  "false"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "false"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "false"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "false"
                ],
                [
                  "test_query_calls_build_sort",
                  "false"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "false"
                ],
                [
                  "test_insert_one_succeeds",
                  "false"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "false"
                ],
                [
                  "test_insert_one_call_build_update",
                  "false"
                ],
                [
                  "test_get_tags_returns_tags",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_query_calls_build_project",
                  "false"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "false"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "false"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "false"
                ],
                [
                  "test_query_calls_build_update",
                  "false"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "false"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "false"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "false"
                ],
                [
                  "test_query_calls_build_sort",
                  "false"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "false"
                ],
                [
                  "test_insert_one_succeeds",
                  "false"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "false"
                ],
                [
                  "test_insert_one_call_build_update",
                  "false"
                ],
                [
                  "test_get_tags_returns_tags",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_query_calls_build_project",
                  "false"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "false"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "false"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "false"
                ],
                [
                  "test_query_calls_build_update",
                  "false"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "false"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "false"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "false"
                ],
                [
                  "test_query_calls_build_sort",
                  "false"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "true"
                ],
                [
                  "test_insert_one_succeeds",
                  "false"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "false"
                ],
                [
                  "test_insert_one_call_build_update",
                  "false"
                ],
                [
                  "test_get_tags_returns_tags",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_query_calls_build_project",
                  "false"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "false"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "false"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "false"
                ],
                [
                  "test_query_calls_build_update",
                  "false"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "false"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "false"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "false"
                ],
                [
                  "test_query_calls_build_sort",
                  "false"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "false"
                ],
                [
                  "test_insert_one_succeeds",
                  "false"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "false"
                ],
                [
                  "test_insert_one_call_build_update",
                  "false"
                ],
                [
                  "test_get_tags_returns_tags",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                "false"
              ],
              [
                "test_insert_one_call_build_filters",
                "false"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "false"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "false"
              ],
              [
                "test_query_calls_build_update",
                "false"
              ],
              [
                "test_get_timerange_returns_timerange",
                "false"
              ],
              [
                "test_get_tags_returns_no_tag",
                "false"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "false"
              ],
              [
                "test_query_calls_build_sort",
                "false"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "false"
              ],
              [
                "test_insert_one_succeeds",
                "false"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "false"
              ],
              [
                "test_insert_one_call_build_update",
                "false"
              ],
              [
                "test_get_tags_returns_tags",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                "false"
              ],
              [
                "test_insert_one_call_build_filters",
                "false"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "false"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "false"
              ],
              [
                "test_query_calls_build_update",
                "false"
              ],
              [
                "test_get_timerange_returns_timerange",
                "false"
              ],
              [
                "test_get_tags_returns_no_tag",
                "false"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "false"
              ],
              [
                "test_query_calls_build_sort",
                "false"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "false"
              ],
              [
                "test_insert_one_succeeds",
                "false"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "false"
              ],
              [
                "test_insert_one_call_build_update",
                "false"
              ],
              [
                "test_get_tags_returns_tags",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                []
              ],
              [
                "test_insert_one_call_build_filters",
                []
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                []
              ],
              [
                "test_metadata_is_updated_when_inserting",
                []
              ],
              [
                "test_query_calls_build_update",
                []
              ],
              [
                "test_get_timerange_returns_timerange",
                []
              ],
              [
                "test_get_tags_returns_no_tag",
                []
              ],
              [
                "test_query_calls_build_unwind_and_match",
                []
              ],
              [
                "test_query_calls_build_sort",
                []
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                []
              ],
              [
                "test_insert_one_succeeds",
                []
              ],
              [
                "test_get_timerange_returns_no_timerange",
                []
              ],
              [
                "test_insert_one_call_build_update",
                []
              ],
              [
                "test_get_tags_returns_tags",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                "false"
              ],
              [
                "test_insert_one_call_build_filters",
                "false"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "false"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "false"
              ],
              [
                "test_query_calls_build_update",
                "false"
              ],
              [
                "test_get_timerange_returns_timerange",
                "false"
              ],
              [
                "test_get_tags_returns_no_tag",
                "false"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "false"
              ],
              [
                "test_query_calls_build_sort",
                "false"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "false"
              ],
              [
                "test_insert_one_succeeds",
                "false"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "false"
              ],
              [
                "test_insert_one_call_build_update",
                "false"
              ],
              [
                "test_get_tags_returns_tags",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                "false"
              ],
              [
                "test_insert_one_call_build_filters",
                "false"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "false"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "false"
              ],
              [
                "test_query_calls_build_update",
                "false"
              ],
              [
                "test_get_timerange_returns_timerange",
                "false"
              ],
              [
                "test_get_tags_returns_no_tag",
                "false"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "false"
              ],
              [
                "test_query_calls_build_sort",
                "false"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "false"
              ],
              [
                "test_insert_one_succeeds",
                "false"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "false"
              ],
              [
                "test_insert_one_call_build_update",
                "false"
              ],
              [
                "test_get_tags_returns_tags",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_query_calls_build_project",
                  "0"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "0"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "0"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "0"
                ],
                [
                  "test_query_calls_build_update",
                  "0"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "0"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "0"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "0"
                ],
                [
                  "test_query_calls_build_sort",
                  "0"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "0"
                ],
                [
                  "test_insert_one_succeeds",
                  "0"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "0"
                ],
                [
                  "test_insert_one_call_build_update",
                  "0"
                ],
                [
                  "test_get_tags_returns_tags",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_query_calls_build_project",
                  "0"
                ],
                [
                  "test_insert_one_call_build_filters",
                  "0"
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "0"
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "0"
                ],
                [
                  "test_query_calls_build_update",
                  "0"
                ],
                [
                  "test_get_timerange_returns_timerange",
                  "0"
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "0"
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "0"
                ],
                [
                  "test_query_calls_build_sort",
                  "0"
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "0"
                ],
                [
                  "test_insert_one_succeeds",
                  "0"
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "0"
                ],
                [
                  "test_insert_one_call_build_update",
                  "0"
                ],
                [
                  "test_get_tags_returns_tags",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                "false"
              ],
              [
                "test_insert_one_call_build_filters",
                "false"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "false"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "false"
              ],
              [
                "test_query_calls_build_update",
                "false"
              ],
              [
                "test_get_timerange_returns_timerange",
                "false"
              ],
              [
                "test_get_tags_returns_no_tag",
                "false"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "false"
              ],
              [
                "test_query_calls_build_sort",
                "false"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "false"
              ],
              [
                "test_insert_one_succeeds",
                "false"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "false"
              ],
              [
                "test_insert_one_call_build_update",
                "false"
              ],
              [
                "test_get_tags_returns_tags",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                "false"
              ],
              [
                "test_insert_one_call_build_filters",
                "false"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "false"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "false"
              ],
              [
                "test_query_calls_build_update",
                "false"
              ],
              [
                "test_get_timerange_returns_timerange",
                "false"
              ],
              [
                "test_get_tags_returns_no_tag",
                "false"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "false"
              ],
              [
                "test_query_calls_build_sort",
                "false"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "false"
              ],
              [
                "test_insert_one_succeeds",
                "false"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "false"
              ],
              [
                "test_insert_one_call_build_update",
                "false"
              ],
              [
                "test_get_tags_returns_tags",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                "2"
              ],
              [
                "test_insert_one_call_build_filters",
                "1"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "2"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "1"
              ],
              [
                "test_query_calls_build_update",
                "1"
              ],
              [
                "test_get_timerange_returns_timerange",
                "1"
              ],
              [
                "test_get_tags_returns_no_tag",
                "1"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "2"
              ],
              [
                "test_query_calls_build_sort",
                "1"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "2"
              ],
              [
                "test_insert_one_succeeds",
                "1"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "1"
              ],
              [
                "test_insert_one_call_build_update",
                "1"
              ],
              [
                "test_get_tags_returns_tags",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                [
                  "parsed_aggregateby"
                ]
              ],
              [
                "test_insert_one_call_build_filters",
                []
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                [
                  "df"
                ]
              ],
              [
                "test_metadata_is_updated_when_inserting",
                []
              ],
              [
                "test_query_calls_build_update",
                []
              ],
              [
                "test_get_timerange_returns_timerange",
                [
                  "timerange"
                ]
              ],
              [
                "test_get_tags_returns_no_tag",
                [
                  "tags"
                ]
              ],
              [
                "test_query_calls_build_unwind_and_match",
                [
                  "parsed_aggregateby"
                ]
              ],
              [
                "test_query_calls_build_sort",
                []
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                []
              ],
              [
                "test_insert_one_succeeds",
                [
                  "result"
                ]
              ],
              [
                "test_get_timerange_returns_no_timerange",
                [
                  "timerange"
                ]
              ],
              [
                "test_insert_one_call_build_update",
                []
              ],
              [
                "test_get_tags_returns_tags",
                [
                  "tags"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_query_calls_build_project",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_insert_one_call_build_filters",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_metadata_is_updated_when_inserting",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_query_calls_build_update",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_get_timerange_returns_timerange",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_get_tags_returns_no_tag",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_query_calls_build_unwind_and_match",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_query_calls_build_sort",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_insert_one_succeeds",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_get_timerange_returns_no_timerange",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_insert_one_call_build_update",
                [
                  "self.mongots_collection"
                ]
              ],
              [
                "test_get_tags_returns_tags",
                [
                  "self.mongots_collection"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5398230779048095,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_query_calls_build_update",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.8093561051824503
                ],
                [
                  "test_query_calls_build_update",
                  "test_get_tags_returns_tags",
                  0.763820081303963
                ],
                [
                  "test_query_calls_build_project",
                  "test_metadata_is_updated_when_inserting",
                  0.6341072860401503
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_get_timerange_returns_timerange",
                  0.7680956303598782
                ],
                [
                  "test_query_calls_build_update",
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  0.045567663536030575
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_query_calls_build_sort",
                  0.7882373930624911
                ],
                [
                  "test_query_calls_build_sort",
                  "test_metadata_is_updated_when_inserting",
                  0.7849672506711397
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "test_get_timerange_returns_timerange",
                  0.7941966584421293
                ],
                [
                  "test_query_calls_build_update",
                  "test_query_calls_build_sort",
                  0.889244890603968
                ],
                [
                  "test_query_calls_build_project",
                  "test_get_timerange_returns_no_timerange",
                  0.20497289793748075
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_get_timerange_returns_no_timerange",
                  0.20623947784607638
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_get_timerange_returns_no_timerange",
                  0.2058378426492411
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.7072414265177727
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_get_tags_returns_tags",
                  0.6664466934746511
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  0.04941058844013092
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  0.07097403351110756
                ],
                [
                  "test_insert_one_succeeds",
                  "test_query_calls_build_unwind_and_match",
                  0.736864549091471
                ],
                [
                  "test_insert_one_succeeds",
                  "test_query_calls_build_project",
                  0.6894410398057408
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "test_get_tags_returns_tags",
                  0.8500433706661505
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_get_timerange_returns_timerange",
                  0.8488302553933464
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "test_metadata_is_updated_when_inserting",
                  0.07159275810130729
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "test_get_tags_returns_tags",
                  0.7485934217571941
                ],
                [
                  "test_insert_one_succeeds",
                  "test_get_tags_returns_no_tag",
                  0.14930178053803186
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_query_calls_build_sort",
                  0.8878053195370199
                ],
                [
                  "test_query_calls_build_project",
                  "test_get_timerange_returns_timerange",
                  0.5580659575891468
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_get_timerange_returns_timerange",
                  0.6829364292401405
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "test_get_timerange_returns_no_timerange",
                  0.2608745973749755
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "test_get_tags_returns_no_tag",
                  0.09412995243209424
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_metadata_is_updated_when_inserting",
                  0.8328145177171817
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.7939225148707613
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_get_timerange_returns_no_timerange",
                  0.18809216422895955
                ],
                [
                  "test_query_calls_build_sort",
                  "test_get_tags_returns_no_tag",
                  0.09126332951925507
                ],
                [
                  "test_query_calls_build_project",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.5851276800099919
                ],
                [
                  "test_insert_one_succeeds",
                  "test_metadata_is_updated_when_inserting",
                  0.8428357875182015
                ],
                [
                  "test_get_timerange_returns_no_timerange",
                  "test_get_timerange_returns_timerange",
                  0.31071546931753624
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "test_get_timerange_returns_timerange",
                  0.07396054859615199
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "test_metadata_is_updated_when_inserting",
                  0.8098535333568537
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_get_tags_returns_tags",
                  0.7592167417645699
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_query_calls_build_update",
                  0.9132378588815335
                ],
                [
                  "test_insert_one_succeeds",
                  "test_get_tags_returns_tags",
                  0.8044325214976904
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_get_tags_returns_no_tag",
                  0.07579238282385406
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "test_get_timerange_returns_no_timerange",
                  0.5144957554275266
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_query_calls_build_update",
                  0.8970075875522157
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_query_calls_build_unwind_and_match",
                  0.7886558188600973
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.13124359177794212
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "test_get_tags_returns_tags",
                  0.13968605915391563
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_insert_one_call_build_update",
                  0.9551675067512019
                ],
                [
                  "test_insert_one_succeeds",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.7380714283808124
                ],
                [
                  "test_query_calls_build_update",
                  "test_query_calls_build_project",
                  0.7381961492836953
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "test_get_tags_returns_no_tag",
                  0.11743577988830127
                ],
                [
                  "test_insert_one_succeeds",
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  0.11355499479153378
                ],
                [
                  "test_get_tags_returns_tags",
                  "test_get_timerange_returns_timerange",
                  0.8311966314671322
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_get_tags_returns_no_tag",
                  0.060515826485367775
                ],
                [
                  "test_query_calls_build_sort",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.7353025611673946
                ],
                [
                  "test_query_calls_build_update",
                  "test_get_tags_returns_no_tag",
                  0.05591808408913987
                ],
                [
                  "test_query_calls_build_sort",
                  "test_get_tags_returns_tags",
                  0.7064196395211774
                ],
                [
                  "test_insert_one_succeeds",
                  "test_get_timerange_returns_timerange",
                  0.7940484817308748
                ],
                [
                  "test_query_calls_build_update",
                  "test_query_calls_build_unwind_and_match",
                  0.813561074407678
                ],
                [
                  "test_query_calls_build_update",
                  "test_metadata_is_updated_when_inserting",
                  0.8537943648295847
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_query_calls_build_unwind_and_match",
                  0.7995645581108911
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_get_tags_returns_no_tag",
                  0.07257946509373268
                ],
                [
                  "test_query_calls_build_project",
                  "test_query_calls_build_sort",
                  0.7734533525013484
                ],
                [
                  "test_query_calls_build_project",
                  "test_get_tags_returns_no_tag",
                  0.11504474832710555
                ],
                [
                  "test_query_calls_build_sort",
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  0.0743705146635912
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_query_calls_build_project",
                  0.7559820031340031
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_query_calls_build_sort",
                  0.8743402772507111
                ],
                [
                  "test_query_calls_build_project",
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  0.08749999999999998
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_query_calls_build_project",
                  0.8516884021332908
                ],
                [
                  "test_insert_one_succeeds",
                  "test_query_calls_build_sort",
                  0.8107337669057074
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_query_calls_build_project",
                  0.7249211683963332
                ],
                [
                  "test_query_calls_build_update",
                  "test_get_timerange_returns_no_timerange",
                  0.19019913405248526
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "test_get_tags_returns_tags",
                  0.4017536880041851
                ],
                [
                  "test_get_tags_returns_tags",
                  "test_get_timerange_returns_no_timerange",
                  0.3644054444067475
                ],
                [
                  "test_insert_one_succeeds",
                  "test_insert_one_call_build_update",
                  0.9279821829131305
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  0.03945149215762358
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_get_tags_returns_tags",
                  0.8128464614179067
                ],
                [
                  "test_query_calls_build_sort",
                  "test_get_timerange_returns_timerange",
                  0.7040619601788636
                ],
                [
                  "test_insert_one_succeeds",
                  "test_get_timerange_returns_no_timerange",
                  0.2901905000440047
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "test_get_timerange_returns_timerange",
                  0.8527076862608473
                ],
                [
                  "test_insert_one_succeeds",
                  "test_insert_one_call_build_filters",
                  0.9105557874755743
                ],
                [
                  "test_query_calls_build_project",
                  "test_get_tags_returns_tags",
                  0.5762049940099019
                ],
                [
                  "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                  "test_get_tags_returns_no_tag",
                  0.2684377460965796
                ],
                [
                  "test_get_tags_returns_no_tag",
                  "test_get_timerange_returns_timerange",
                  0.12376396653642134
                ],
                [
                  "test_query_calls_build_update",
                  "test_get_timerange_returns_timerange",
                  0.7843396406387649
                ],
                [
                  "test_query_calls_build_unwind_and_match",
                  "test_metadata_is_updated_when_inserting",
                  0.7420204234323838
                ],
                [
                  "test_insert_one_call_build_filters",
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  0.7263001870593784
                ],
                [
                  "test_insert_one_call_build_update",
                  "test_metadata_is_updated_when_inserting",
                  0.8917164154079672
                ],
                [
                  "test_query_raises_an_exception_if_no_interval_is_provided",
                  "test_get_timerange_returns_no_timerange",
                  0.24455799402225925
                ],
                [
                  "test_insert_one_succeeds",
                  "test_query_calls_build_update",
                  0.8338233681885492
                ],
                [
                  "test_query_calls_build_sort",
                  "test_get_timerange_returns_no_timerange",
                  0.22173003507924643
                ],
                [
                  "test_metadata_is_updated_when_inserting",
                  "test_get_timerange_returns_no_timerange",
                  0.24394098866471906
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_query_calls_build_project",
                "false"
              ],
              [
                "test_insert_one_call_build_filters",
                "false"
              ],
              [
                "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
                "false"
              ],
              [
                "test_metadata_is_updated_when_inserting",
                "false"
              ],
              [
                "test_query_calls_build_update",
                "false"
              ],
              [
                "test_get_timerange_returns_timerange",
                "false"
              ],
              [
                "test_get_tags_returns_no_tag",
                "false"
              ],
              [
                "test_query_calls_build_unwind_and_match",
                "false"
              ],
              [
                "test_query_calls_build_sort",
                "false"
              ],
              [
                "test_query_raises_an_exception_if_no_interval_is_provided",
                "false"
              ],
              [
                "test_insert_one_succeeds",
                "true"
              ],
              [
                "test_get_timerange_returns_no_timerange",
                "true"
              ],
              [
                "test_insert_one_call_build_update",
                "false"
              ],
              [
                "test_get_tags_returns_tags",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 14
      }
    ]
  },
  {
    "name": "test_\u0026_aggregateby_test.py",
    "testCases": [
      {
        "name": "AggregatebyTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_parse_valid_str_aggregateby",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aggregateby_freq",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_parse_valid_str_aggregateby",
                  "[]"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "[]"
                ],
                [
                  "test_aggregateby_freq",
                  "[]"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_aggregateby_freq",
                  "false"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_aggregateby_freq",
                  "false"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_aggregateby_freq",
                  "false"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "false"
                ],
                [
                  "test_aggregateby_freq",
                  "false"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_aggregateby_freq",
                "false"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_aggregateby_freq",
                "false"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                []
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                []
              ],
              [
                "test_aggregateby_freq",
                []
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_aggregateby_freq",
                "false"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_aggregateby_freq",
                "false"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_parse_valid_str_aggregateby",
                  "0"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "0"
                ],
                [
                  "test_aggregateby_freq",
                  "0"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_parse_valid_str_aggregateby",
                  "0"
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "0"
                ],
                [
                  "test_aggregateby_freq",
                  "0"
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_aggregateby_freq",
                "false"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_aggregateby_freq",
                "false"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "3"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "1"
              ],
              [
                "test_aggregateby_freq",
                "1"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                [
                  "parsed_aggregateby"
                ]
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                [
                  "parsed_aggregateby"
                ]
              ],
              [
                "test_aggregateby_freq",
                [
                  "parsed_aggregateby"
                ]
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                []
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                []
              ],
              [
                "test_aggregateby_freq",
                []
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.44928245235131437,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_parse_valid_str_aggregateby",
                  "test_can_parse_valid_str_aggregateby",
                  0.6512825616191885
                ],
                [
                  "test_parse_valid_str_aggregateby",
                  "test_aggregateby_freq",
                  0.48991647126865073
                ],
                [
                  "test_parse_valid_str_aggregateby",
                  "test_fails_to_parse_invalid_aggregateby",
                  0.4891159880445184
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "test_can_parse_valid_str_aggregateby",
                  0.34585723193303736
                ],
                [
                  "test_fails_to_parse_invalid_aggregateby",
                  "test_aggregateby_freq",
                  0.23754227473946876
                ],
                [
                  "test_can_parse_valid_str_aggregateby",
                  "test_aggregateby_freq",
                  0.4819801865030224
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_can_parse_valid_str_aggregateby",
                "false"
              ],
              [
                "test_aggregateby_freq",
                "false"
              ],
              [
                "test_fails_to_parse_invalid_aggregateby",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  }
]