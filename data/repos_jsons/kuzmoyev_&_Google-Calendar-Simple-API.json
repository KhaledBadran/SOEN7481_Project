[
  {
    "name": "tests_\u0026_test_event.py",
    "testCases": [
      {
        "name": "TestEvent",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_reminders_checks",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_add_reminders",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_str",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_init_no_end",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_init_different_date_types",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_add_attendees",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_attachment",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_init",
                  "[]"
                ],
                [
                  "test_reminders_checks",
                  "[]"
                ],
                [
                  "test_add_reminders",
                  "[]"
                ],
                [
                  "test_str",
                  "[]"
                ],
                [
                  "test_init_no_end",
                  "[]"
                ],
                [
                  "test_init_different_date_types",
                  "[]"
                ],
                [
                  "test_add_attendees",
                  "[]"
                ],
                [
                  "test_add_attachment",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_reminders_checks",
                  "false"
                ],
                [
                  "test_add_reminders",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_init_no_end",
                  "false"
                ],
                [
                  "test_init_different_date_types",
                  "false"
                ],
                [
                  "test_add_attendees",
                  "false"
                ],
                [
                  "test_add_attachment",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_reminders_checks",
                  "false"
                ],
                [
                  "test_add_reminders",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_init_no_end",
                  "false"
                ],
                [
                  "test_init_different_date_types",
                  "false"
                ],
                [
                  "test_add_attendees",
                  "false"
                ],
                [
                  "test_add_attachment",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_reminders_checks",
                  "true"
                ],
                [
                  "test_add_reminders",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_init_no_end",
                  "false"
                ],
                [
                  "test_init_different_date_types",
                  "false"
                ],
                [
                  "test_add_attendees",
                  "false"
                ],
                [
                  "test_add_attachment",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_reminders_checks",
                  "false"
                ],
                [
                  "test_add_reminders",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_init_no_end",
                  "false"
                ],
                [
                  "test_init_different_date_types",
                  "false"
                ],
                [
                  "test_add_attendees",
                  "false"
                ],
                [
                  "test_add_attachment",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_reminders_checks",
                "false"
              ],
              [
                "test_add_reminders",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_init_no_end",
                "false"
              ],
              [
                "test_init_different_date_types",
                "false"
              ],
              [
                "test_add_attendees",
                "false"
              ],
              [
                "test_add_attachment",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_reminders_checks",
                "false"
              ],
              [
                "test_add_reminders",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_init_no_end",
                "false"
              ],
              [
                "test_init_different_date_types",
                "false"
              ],
              [
                "test_add_attendees",
                "false"
              ],
              [
                "test_add_attachment",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ],
              [
                "test_reminders_checks",
                []
              ],
              [
                "test_add_reminders",
                []
              ],
              [
                "test_str",
                []
              ],
              [
                "test_init_no_end",
                []
              ],
              [
                "test_init_different_date_types",
                []
              ],
              [
                "test_add_attendees",
                []
              ],
              [
                "test_add_attachment",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_reminders_checks",
                "false"
              ],
              [
                "test_add_reminders",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_init_no_end",
                "false"
              ],
              [
                "test_init_different_date_types",
                "false"
              ],
              [
                "test_add_attendees",
                "false"
              ],
              [
                "test_add_attachment",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_init",
                "true"
              ],
              [
                "test_reminders_checks",
                "false"
              ],
              [
                "test_add_reminders",
                "true"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_init_no_end",
                "false"
              ],
              [
                "test_init_different_date_types",
                "false"
              ],
              [
                "test_add_attendees",
                "true"
              ],
              [
                "test_add_attachment",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_reminders_checks",
                  "0"
                ],
                [
                  "test_add_reminders",
                  "0"
                ],
                [
                  "test_str",
                  "0"
                ],
                [
                  "test_init_no_end",
                  "0"
                ],
                [
                  "test_init_different_date_types",
                  "0"
                ],
                [
                  "test_add_attendees",
                  "0"
                ],
                [
                  "test_add_attachment",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_reminders_checks",
                  "0"
                ],
                [
                  "test_add_reminders",
                  "0"
                ],
                [
                  "test_str",
                  "0"
                ],
                [
                  "test_init_no_end",
                  "0"
                ],
                [
                  "test_init_different_date_types",
                  "0"
                ],
                [
                  "test_add_attendees",
                  "0"
                ],
                [
                  "test_add_attachment",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_reminders_checks",
                "false"
              ],
              [
                "test_add_reminders",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_init_no_end",
                "false"
              ],
              [
                "test_init_different_date_types",
                "false"
              ],
              [
                "test_add_attendees",
                "false"
              ],
              [
                "test_add_attachment",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_reminders_checks",
                "false"
              ],
              [
                "test_add_reminders",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_init_no_end",
                "false"
              ],
              [
                "test_init_different_date_types",
                "false"
              ],
              [
                "test_add_attendees",
                "false"
              ],
              [
                "test_add_attachment",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "9"
              ],
              [
                "test_reminders_checks",
                "3"
              ],
              [
                "test_add_reminders",
                "7"
              ],
              [
                "test_str",
                "1"
              ],
              [
                "test_init_no_end",
                "2"
              ],
              [
                "test_init_different_date_types",
                "1"
              ],
              [
                "test_add_attendees",
                "6"
              ],
              [
                "test_add_attachment",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                [
                  "event"
                ]
              ],
              [
                "test_reminders_checks",
                [
                  "e"
                ]
              ],
              [
                "test_add_reminders",
                [
                  "e"
                ]
              ],
              [
                "test_str",
                [
                  "e"
                ]
              ],
              [
                "test_init_no_end",
                [
                  "start",
                  "event"
                ]
              ],
              [
                "test_init_different_date_types",
                []
              ],
              [
                "test_add_attendees",
                [
                  "e"
                ]
              ],
              [
                "test_add_attachment",
                [
                  "e"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ],
              [
                "test_reminders_checks",
                []
              ],
              [
                "test_add_reminders",
                []
              ],
              [
                "test_str",
                []
              ],
              [
                "test_init_no_end",
                []
              ],
              [
                "test_init_different_date_types",
                []
              ],
              [
                "test_add_attendees",
                []
              ],
              [
                "test_add_attachment",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.712569125603208,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_init_no_end",
                  "test_add_attendees",
                  0.609201391973509
                ],
                [
                  "test_init",
                  "test_add_attendees",
                  0.6508542035993172
                ],
                [
                  "test_init_different_date_types",
                  "test_add_attendees",
                  0.5953876571577678
                ],
                [
                  "test_init",
                  "test_add_reminders",
                  0.7814063111440954
                ],
                [
                  "test_add_attendees",
                  "test_reminders_checks",
                  0.5704276764747856
                ],
                [
                  "test_reminders_checks",
                  "test_str",
                  0.715398203142821
                ],
                [
                  "test_init",
                  "test_str",
                  0.7751314597752161
                ],
                [
                  "test_init_no_end",
                  "test_init_different_date_types",
                  0.8354578971729604
                ],
                [
                  "test_init_no_end",
                  "test_add_attachment",
                  0.7578984842045473
                ],
                [
                  "test_init",
                  "test_init_different_date_types",
                  0.8498505844111642
                ],
                [
                  "test_init_no_end",
                  "test_str",
                  0.7644630949749867
                ],
                [
                  "test_init_different_date_types",
                  "test_reminders_checks",
                  0.7576835647580212
                ],
                [
                  "test_init_different_date_types",
                  "test_add_reminders",
                  0.6693014638720614
                ],
                [
                  "test_add_attachment",
                  "test_str",
                  0.7102658741205988
                ],
                [
                  "test_add_attachment",
                  "test_add_reminders",
                  0.6937499999999999
                ],
                [
                  "test_add_attendees",
                  "test_str",
                  0.588755203974877
                ],
                [
                  "test_init_different_date_types",
                  "test_add_attachment",
                  0.7603264629586617
                ],
                [
                  "test_add_reminders",
                  "test_add_attendees",
                  0.6793558642154364
                ],
                [
                  "test_add_reminders",
                  "test_reminders_checks",
                  0.6690542393542463
                ],
                [
                  "test_add_attachment",
                  "test_add_attendees",
                  0.6246950475544243
                ],
                [
                  "test_add_attachment",
                  "test_reminders_checks",
                  0.6374679877109128
                ],
                [
                  "test_init",
                  "test_reminders_checks",
                  0.7714820377030942
                ],
                [
                  "test_init",
                  "test_add_attachment",
                  0.7703225336810586
                ],
                [
                  "test_init_different_date_types",
                  "test_str",
                  0.7372077618485915
                ],
                [
                  "test_add_reminders",
                  "test_str",
                  0.6692889967674874
                ],
                [
                  "test_init_no_end",
                  "test_reminders_checks",
                  0.740242427120102
                ],
                [
                  "test_init",
                  "test_init_no_end",
                  0.8623604970148471
                ],
                [
                  "test_init_no_end",
                  "test_add_reminders",
                  0.7048985902042294
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_reminders_checks",
                "false"
              ],
              [
                "test_add_reminders",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_init_no_end",
                "false"
              ],
              [
                "test_init_different_date_types",
                "false"
              ],
              [
                "test_add_attendees",
                "false"
              ],
              [
                "test_add_attachment",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      },
      {
        "name": "TestEventSerializer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_to_json",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_to_json_reminders",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_to_json_attendees",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_to_json_recurrence",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_to_json_attachments",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_to_object",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_to_json",
                  "[]"
                ],
                [
                  "test_to_json_reminders",
                  "[]"
                ],
                [
                  "test_to_json_attendees",
                  "[]"
                ],
                [
                  "test_to_json_recurrence",
                  "[]"
                ],
                [
                  "test_to_json_attachments",
                  "[]"
                ],
                [
                  "test_to_object",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_to_json",
                  "false"
                ],
                [
                  "test_to_json_reminders",
                  "false"
                ],
                [
                  "test_to_json_attendees",
                  "false"
                ],
                [
                  "test_to_json_recurrence",
                  "false"
                ],
                [
                  "test_to_json_attachments",
                  "false"
                ],
                [
                  "test_to_object",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_to_json",
                  "false"
                ],
                [
                  "test_to_json_reminders",
                  "false"
                ],
                [
                  "test_to_json_attendees",
                  "false"
                ],
                [
                  "test_to_json_recurrence",
                  "false"
                ],
                [
                  "test_to_json_attachments",
                  "false"
                ],
                [
                  "test_to_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_to_json",
                  "true"
                ],
                [
                  "test_to_json_reminders",
                  "false"
                ],
                [
                  "test_to_json_attendees",
                  "true"
                ],
                [
                  "test_to_json_recurrence",
                  "false"
                ],
                [
                  "test_to_json_attachments",
                  "false"
                ],
                [
                  "test_to_object",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_to_json",
                  "false"
                ],
                [
                  "test_to_json_reminders",
                  "false"
                ],
                [
                  "test_to_json_attendees",
                  "false"
                ],
                [
                  "test_to_json_recurrence",
                  "false"
                ],
                [
                  "test_to_json_attachments",
                  "false"
                ],
                [
                  "test_to_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_json_reminders",
                "false"
              ],
              [
                "test_to_json_attendees",
                "false"
              ],
              [
                "test_to_json_recurrence",
                "false"
              ],
              [
                "test_to_json_attachments",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_json_reminders",
                "false"
              ],
              [
                "test_to_json_attendees",
                "false"
              ],
              [
                "test_to_json_recurrence",
                "false"
              ],
              [
                "test_to_json_attachments",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_to_json",
                [
                  "self.maxDiff"
                ]
              ],
              [
                "test_to_json_reminders",
                [
                  "self.maxDiff"
                ]
              ],
              [
                "test_to_json_attendees",
                [
                  "self.maxDiff"
                ]
              ],
              [
                "test_to_json_recurrence",
                [
                  "self.maxDiff"
                ]
              ],
              [
                "test_to_json_attachments",
                [
                  "self.maxDiff"
                ]
              ],
              [
                "test_to_object",
                [
                  "self.maxDiff"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_json_reminders",
                "false"
              ],
              [
                "test_to_json_attendees",
                "false"
              ],
              [
                "test_to_json_recurrence",
                "false"
              ],
              [
                "test_to_json_attachments",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_json_reminders",
                "false"
              ],
              [
                "test_to_json_attendees",
                "false"
              ],
              [
                "test_to_json_recurrence",
                "false"
              ],
              [
                "test_to_json_attachments",
                "false"
              ],
              [
                "test_to_object",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_to_json",
                  "0"
                ],
                [
                  "test_to_json_reminders",
                  "0"
                ],
                [
                  "test_to_json_attendees",
                  "0"
                ],
                [
                  "test_to_json_recurrence",
                  "0"
                ],
                [
                  "test_to_json_attachments",
                  "0"
                ],
                [
                  "test_to_object",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_to_json",
                  "0"
                ],
                [
                  "test_to_json_reminders",
                  "0"
                ],
                [
                  "test_to_json_attendees",
                  "0"
                ],
                [
                  "test_to_json_recurrence",
                  "0"
                ],
                [
                  "test_to_json_attachments",
                  "0"
                ],
                [
                  "test_to_object",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_json_reminders",
                "false"
              ],
              [
                "test_to_json_attendees",
                "false"
              ],
              [
                "test_to_json_recurrence",
                "false"
              ],
              [
                "test_to_json_attachments",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_json_reminders",
                "false"
              ],
              [
                "test_to_json_attendees",
                "false"
              ],
              [
                "test_to_json_recurrence",
                "false"
              ],
              [
                "test_to_json_attachments",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "2"
              ],
              [
                "test_to_json_reminders",
                "1"
              ],
              [
                "test_to_json_attendees",
                "2"
              ],
              [
                "test_to_json_recurrence",
                "1"
              ],
              [
                "test_to_json_attachments",
                "1"
              ],
              [
                "test_to_object",
                "20"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                [
                  "e",
                  "event_json"
                ]
              ],
              [
                "test_to_json_reminders",
                [
                  "e",
                  "event_json"
                ]
              ],
              [
                "test_to_json_attendees",
                [
                  "e",
                  "event_json"
                ]
              ],
              [
                "test_to_json_recurrence",
                [
                  "e",
                  "event_json"
                ]
              ],
              [
                "test_to_json_attachments",
                [
                  "e",
                  "event_json"
                ]
              ],
              [
                "test_to_object",
                [
                  "event_json_str",
                  "serializer",
                  "event_json",
                  "event"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_to_json",
                []
              ],
              [
                "test_to_json_reminders",
                []
              ],
              [
                "test_to_json_attendees",
                []
              ],
              [
                "test_to_json_recurrence",
                []
              ],
              [
                "test_to_json_attachments",
                []
              ],
              [
                "test_to_object",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8372163706137093,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_to_json",
                  "test_to_json_attendees",
                  0.9294137759043666
                ],
                [
                  "test_to_json_attachments",
                  "test_to_json_attendees",
                  0.8087241541762493
                ],
                [
                  "test_to_json_recurrence",
                  "test_to_json_attachments",
                  0.7770572894303462
                ],
                [
                  "test_to_json_attachments",
                  "test_to_json_reminders",
                  0.8318650013496569
                ],
                [
                  "test_to_json",
                  "test_to_json_attachments",
                  0.8226648597416639
                ],
                [
                  "test_to_json",
                  "test_to_json_recurrence",
                  0.8665272430463551
                ],
                [
                  "test_to_json",
                  "test_to_object",
                  0.7800100747340741
                ],
                [
                  "test_to_json_reminders",
                  "test_to_json_attendees",
                  0.8821024984235089
                ],
                [
                  "test_to_json",
                  "test_to_json_reminders",
                  0.9113531384928593
                ],
                [
                  "test_to_json_attachments",
                  "test_to_object",
                  0.7527799021070554
                ],
                [
                  "test_to_json_recurrence",
                  "test_to_object",
                  0.8373400988150491
                ],
                [
                  "test_to_json_reminders",
                  "test_to_object",
                  0.7914474001562136
                ],
                [
                  "test_to_json_attendees",
                  "test_to_object",
                  0.8172153511154832
                ],
                [
                  "test_to_json_recurrence",
                  "test_to_json_attendees",
                  0.8733785410521476
                ],
                [
                  "test_to_json_recurrence",
                  "test_to_json_reminders",
                  0.8763662306606103
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_json_reminders",
                "false"
              ],
              [
                "test_to_json_attendees",
                "false"
              ],
              [
                "test_to_json_recurrence",
                "false"
              ],
              [
                "test_to_json_attachments",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_gadget.py",
    "testCases": [
      {
        "name": "TestGadget",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_init",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_init",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_init",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_init",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_init",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_init",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                [
                  "required_args",
                  "gadget"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestGadgetSerializer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_to_json",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_to_object",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_to_json",
                  "[]"
                ],
                [
                  "test_to_object",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_to_json",
                  "false"
                ],
                [
                  "test_to_object",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_to_json",
                  "false"
                ],
                [
                  "test_to_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_to_json",
                  "true"
                ],
                [
                  "test_to_object",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_to_json",
                  "false"
                ],
                [
                  "test_to_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                []
              ],
              [
                "test_to_object",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_object",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_to_json",
                  "0"
                ],
                [
                  "test_to_object",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_to_json",
                  "0"
                ],
                [
                  "test_to_object",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "2"
              ],
              [
                "test_to_object",
                "18"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                [
                  "required_args",
                  "gadget",
                  "gadget_json"
                ]
              ],
              [
                "test_to_object",
                [
                  "gadget_json_str",
                  "gadget",
                  "serializer",
                  "gadget_json"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                []
              ],
              [
                "test_to_object",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7064007333008537,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_to_json",
                  "test_to_object",
                  0.7064007333008537
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_to_json",
                "false"
              ],
              [
                "test_to_object",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_attendee.py",
    "testCases": [
      {
        "name": "TestAttendeeSerializer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_to_object",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_to_json",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_to_object",
                  "[]"
                ],
                [
                  "test_to_json",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                []
              ],
              [
                "test_to_json",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_to_object",
                "true"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_to_object",
                  "0"
                ],
                [
                  "test_to_json",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_to_object",
                  "0"
                ],
                [
                  "test_to_json",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "14"
              ],
              [
                "test_to_json",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                [
                  "attendee",
                  "attendee_json_str",
                  "serializer",
                  "attendee_json"
                ]
              ],
              [
                "test_to_json",
                [
                  "attendee",
                  "attendee_json"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                []
              ],
              [
                "test_to_json",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6619876729065997,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_to_json",
                  "test_to_object",
                  0.6619876729065997
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_to_object",
                "true"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_reminder.py",
    "testCases": [
      {
        "name": "TestReminder",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_email_reminder",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_popup_reminder",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_email_reminder",
                  "[]"
                ],
                [
                  "test_popup_reminder",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_email_reminder",
                  "false"
                ],
                [
                  "test_popup_reminder",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_email_reminder",
                  "false"
                ],
                [
                  "test_popup_reminder",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_email_reminder",
                  "false"
                ],
                [
                  "test_popup_reminder",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_email_reminder",
                  "false"
                ],
                [
                  "test_popup_reminder",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                "false"
              ],
              [
                "test_popup_reminder",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                "false"
              ],
              [
                "test_popup_reminder",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                []
              ],
              [
                "test_popup_reminder",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                "false"
              ],
              [
                "test_popup_reminder",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_email_reminder",
                "true"
              ],
              [
                "test_popup_reminder",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_email_reminder",
                  "0"
                ],
                [
                  "test_popup_reminder",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_email_reminder",
                  "0"
                ],
                [
                  "test_popup_reminder",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                "false"
              ],
              [
                "test_popup_reminder",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                "false"
              ],
              [
                "test_popup_reminder",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                "2"
              ],
              [
                "test_popup_reminder",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                [
                  "reminder"
                ]
              ],
              [
                "test_popup_reminder",
                [
                  "reminder"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                []
              ],
              [
                "test_popup_reminder",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8148148148148148,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_email_reminder",
                  "test_popup_reminder",
                  0.8148148148148148
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_email_reminder",
                "false"
              ],
              [
                "test_popup_reminder",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestReminderSerializer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_to_object",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_to_json",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_to_object",
                  "[]"
                ],
                [
                  "test_to_json",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_to_object",
                  "true"
                ],
                [
                  "test_to_json",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                []
              ],
              [
                "test_to_json",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_to_object",
                "true"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_to_object",
                  "0"
                ],
                [
                  "test_to_json",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_to_object",
                  "0"
                ],
                [
                  "test_to_json",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "7"
              ],
              [
                "test_to_json",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                [
                  "reminder_json",
                  "reminder",
                  "reminder_json_str"
                ]
              ],
              [
                "test_to_json",
                [
                  "reminder_json",
                  "reminder",
                  "serializer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                []
              ],
              [
                "test_to_json",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8301360363048612,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_to_json",
                  "test_to_object",
                  0.8301360363048612
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_attachment.py",
    "testCases": [
      {
        "name": "TestAttachment",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                [
                  "attachment"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_create",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestAttachmentSerializer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_to_object",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_to_json",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_to_object",
                  "[]"
                ],
                [
                  "test_to_json",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_to_object",
                  "true"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_to_object",
                  "false"
                ],
                [
                  "test_to_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                []
              ],
              [
                "test_to_json",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_to_object",
                  "0"
                ],
                [
                  "test_to_json",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_to_object",
                  "0"
                ],
                [
                  "test_to_json",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "15"
              ],
              [
                "test_to_json",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                [
                  "attachment",
                  "serializer",
                  "attachment_json",
                  "attachment_json_str"
                ]
              ],
              [
                "test_to_json",
                [
                  "attachment",
                  "serializer",
                  "attachment_json"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                []
              ],
              [
                "test_to_json",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.786215813810173,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_to_json",
                  "test_to_object",
                  0.786215813810173
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_to_object",
                "false"
              ],
              [
                "test_to_json",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_recurrence.py",
    "testCases": [
      {
        "name": "TestRecurrence",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__rule",
                  "[]"
                ],
                [
                  "test__periods_errors",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__times",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__times_errors",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__periods",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__rule_errors",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__dates_errors",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__dates",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__rule",
                  "[]"
                ],
                [
                  "test__periods_errors",
                  "[]"
                ],
                [
                  "test__times",
                  "[]"
                ],
                [
                  "test__times_errors",
                  "[]"
                ],
                [
                  "test__periods",
                  "[]"
                ],
                [
                  "test__rule_errors",
                  "[]"
                ],
                [
                  "test__dates_errors",
                  "[]"
                ],
                [
                  "test__dates",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__rule",
                  "false"
                ],
                [
                  "test__periods_errors",
                  "false"
                ],
                [
                  "test__times",
                  "false"
                ],
                [
                  "test__times_errors",
                  "false"
                ],
                [
                  "test__periods",
                  "false"
                ],
                [
                  "test__rule_errors",
                  "false"
                ],
                [
                  "test__dates_errors",
                  "false"
                ],
                [
                  "test__dates",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__rule",
                  "false"
                ],
                [
                  "test__periods_errors",
                  "false"
                ],
                [
                  "test__times",
                  "false"
                ],
                [
                  "test__times_errors",
                  "false"
                ],
                [
                  "test__periods",
                  "false"
                ],
                [
                  "test__rule_errors",
                  "false"
                ],
                [
                  "test__dates_errors",
                  "false"
                ],
                [
                  "test__dates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__rule",
                  "false"
                ],
                [
                  "test__periods_errors",
                  "true"
                ],
                [
                  "test__times",
                  "false"
                ],
                [
                  "test__times_errors",
                  "true"
                ],
                [
                  "test__periods",
                  "false"
                ],
                [
                  "test__rule_errors",
                  "false"
                ],
                [
                  "test__dates_errors",
                  "true"
                ],
                [
                  "test__dates",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__rule",
                  "false"
                ],
                [
                  "test__periods_errors",
                  "false"
                ],
                [
                  "test__times",
                  "false"
                ],
                [
                  "test__times_errors",
                  "false"
                ],
                [
                  "test__periods",
                  "false"
                ],
                [
                  "test__rule_errors",
                  "false"
                ],
                [
                  "test__dates_errors",
                  "false"
                ],
                [
                  "test__dates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "false"
              ],
              [
                "test__periods_errors",
                "false"
              ],
              [
                "test__times",
                "false"
              ],
              [
                "test__times_errors",
                "false"
              ],
              [
                "test__periods",
                "false"
              ],
              [
                "test__rule_errors",
                "false"
              ],
              [
                "test__dates_errors",
                "false"
              ],
              [
                "test__dates",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "false"
              ],
              [
                "test__periods_errors",
                "false"
              ],
              [
                "test__times",
                "false"
              ],
              [
                "test__times_errors",
                "false"
              ],
              [
                "test__periods",
                "false"
              ],
              [
                "test__rule_errors",
                "false"
              ],
              [
                "test__dates_errors",
                "false"
              ],
              [
                "test__dates",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                []
              ],
              [
                "test__periods_errors",
                []
              ],
              [
                "test__times",
                []
              ],
              [
                "test__times_errors",
                []
              ],
              [
                "test__periods",
                []
              ],
              [
                "test__rule_errors",
                []
              ],
              [
                "test__dates_errors",
                []
              ],
              [
                "test__dates",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "false"
              ],
              [
                "test__periods_errors",
                "false"
              ],
              [
                "test__times",
                "false"
              ],
              [
                "test__times_errors",
                "false"
              ],
              [
                "test__periods",
                "false"
              ],
              [
                "test__rule_errors",
                "false"
              ],
              [
                "test__dates_errors",
                "false"
              ],
              [
                "test__dates",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "false"
              ],
              [
                "test__periods_errors",
                "false"
              ],
              [
                "test__times",
                "false"
              ],
              [
                "test__times_errors",
                "false"
              ],
              [
                "test__periods",
                "false"
              ],
              [
                "test__rule_errors",
                "false"
              ],
              [
                "test__dates_errors",
                "false"
              ],
              [
                "test__dates",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__rule",
                  "0"
                ],
                [
                  "test__periods_errors",
                  "0"
                ],
                [
                  "test__times",
                  "0"
                ],
                [
                  "test__times_errors",
                  "0"
                ],
                [
                  "test__periods",
                  "0"
                ],
                [
                  "test__rule_errors",
                  "0"
                ],
                [
                  "test__dates_errors",
                  "0"
                ],
                [
                  "test__dates",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__rule",
                  "0"
                ],
                [
                  "test__periods_errors",
                  "0"
                ],
                [
                  "test__times",
                  "0"
                ],
                [
                  "test__times_errors",
                  "0"
                ],
                [
                  "test__periods",
                  "0"
                ],
                [
                  "test__rule_errors",
                  "0"
                ],
                [
                  "test__dates_errors",
                  "0"
                ],
                [
                  "test__dates",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "false"
              ],
              [
                "test__periods_errors",
                "false"
              ],
              [
                "test__times",
                "false"
              ],
              [
                "test__times_errors",
                "false"
              ],
              [
                "test__periods",
                "false"
              ],
              [
                "test__rule_errors",
                "false"
              ],
              [
                "test__dates_errors",
                "false"
              ],
              [
                "test__dates",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "false"
              ],
              [
                "test__periods_errors",
                "false"
              ],
              [
                "test__times",
                "false"
              ],
              [
                "test__times_errors",
                "false"
              ],
              [
                "test__periods",
                "false"
              ],
              [
                "test__rule_errors",
                "false"
              ],
              [
                "test__dates_errors",
                "false"
              ],
              [
                "test__dates",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "19"
              ],
              [
                "test__periods_errors",
                "3"
              ],
              [
                "test__times",
                "9"
              ],
              [
                "test__times_errors",
                "2"
              ],
              [
                "test__periods",
                "16"
              ],
              [
                "test__rule_errors",
                "41"
              ],
              [
                "test__dates_errors",
                "2"
              ],
              [
                "test__dates",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                []
              ],
              [
                "test__periods_errors",
                []
              ],
              [
                "test__times",
                []
              ],
              [
                "test__times_errors",
                []
              ],
              [
                "test__periods",
                [
                  "exclude_periods",
                  "periods"
                ]
              ],
              [
                "test__rule_errors",
                []
              ],
              [
                "test__dates_errors",
                []
              ],
              [
                "test__dates",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                []
              ],
              [
                "test__periods_errors",
                []
              ],
              [
                "test__times",
                []
              ],
              [
                "test__times_errors",
                []
              ],
              [
                "test__periods",
                []
              ],
              [
                "test__rule_errors",
                []
              ],
              [
                "test__dates_errors",
                []
              ],
              [
                "test__dates",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5547613291770492,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__rule_errors",
                  "test__times_errors",
                  0.23421061968917667
                ],
                [
                  "test__times",
                  "test__periods_errors",
                  0.8468057922039435
                ],
                [
                  "test__times_errors",
                  "test__dates_errors",
                  0.9001800540180063
                ],
                [
                  "test__times_errors",
                  "test__periods",
                  0.6385407157228067
                ],
                [
                  "test__rule_errors",
                  "test__times",
                  0.33283381381117905
                ],
                [
                  "test__rule",
                  "test__times",
                  0.29938207967349956
                ],
                [
                  "test__times_errors",
                  "test__dates",
                  0.6311618121574432
                ],
                [
                  "test__times",
                  "test__dates",
                  0.9140372822649515
                ],
                [
                  "test__rule",
                  "test__times_errors",
                  0.2749640892273183
                ],
                [
                  "test__times",
                  "test__dates_errors",
                  0.6264127208175676
                ],
                [
                  "test__times",
                  "test__periods",
                  0.9413699260418997
                ],
                [
                  "test__times_errors",
                  "test__periods_errors",
                  0.7979159465861954
                ],
                [
                  "test__rule_errors",
                  "test__periods_errors",
                  0.3182504401203933
                ],
                [
                  "test__rule",
                  "test__periods_errors",
                  0.2999897875604985
                ],
                [
                  "test__times",
                  "test__times_errors",
                  0.6775252746370719
                ],
                [
                  "test__rule",
                  "test__rule_errors",
                  0.10810290775675753
                ],
                [
                  "test__periods",
                  "test__periods_errors",
                  0.8799062044014061
                ],
                [
                  "test__rule_errors",
                  "test__dates",
                  0.3710850296847339
                ],
                [
                  "test__rule",
                  "test__dates",
                  0.3118552969575653
                ],
                [
                  "test__rule",
                  "test__dates_errors",
                  0.2779220779220779
                ],
                [
                  "test__dates",
                  "test__periods_errors",
                  0.8794953630224281
                ],
                [
                  "test__rule",
                  "test__periods",
                  0.31277258683315523
                ],
                [
                  "test__rule_errors",
                  "test__periods",
                  0.33690491284057666
                ],
                [
                  "test__dates_errors",
                  "test__periods",
                  0.6306439974756883
                ],
                [
                  "test__dates",
                  "test__periods",
                  0.9086326132775099
                ],
                [
                  "test__dates_errors",
                  "test__periods_errors",
                  0.8261868965215496
                ],
                [
                  "test__rule_errors",
                  "test__dates_errors",
                  0.28952172127286485
                ],
                [
                  "test__dates",
                  "test__dates_errors",
                  0.6667072544591139
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__rule",
                "false"
              ],
              [
                "test__periods_errors",
                "false"
              ],
              [
                "test__times",
                "false"
              ],
              [
                "test__times_errors",
                "false"
              ],
              [
                "test__periods",
                "false"
              ],
              [
                "test__rule_errors",
                "false"
              ],
              [
                "test__dates_errors",
                "false"
              ],
              [
                "test__dates",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_base_serializer.py",
    "testCases": [
      {
        "name": "TestBaseSerializer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_init",
                  "[]"
                ],
                [
                  "test_subclass",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_assure_dict",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_init",
                  "[]"
                ],
                [
                  "test_subclass",
                  "[]"
                ],
                [
                  "test_assure_dict",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_subclass",
                  "true"
                ],
                [
                  "test_assure_dict",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_subclass",
                  "false"
                ],
                [
                  "test_assure_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_subclass",
                  "true"
                ],
                [
                  "test_assure_dict",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_subclass",
                  "false"
                ],
                [
                  "test_assure_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_init",
                "true"
              ],
              [
                "test_subclass",
                "false"
              ],
              [
                "test_assure_dict",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_subclass",
                "false"
              ],
              [
                "test_assure_dict",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ],
              [
                "test_subclass",
                []
              ],
              [
                "test_assure_dict",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_subclass",
                "false"
              ],
              [
                "test_assure_dict",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_subclass",
                "false"
              ],
              [
                "test_assure_dict",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_subclass",
                  "0"
                ],
                [
                  "test_assure_dict",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_subclass",
                  "0"
                ],
                [
                  "test_assure_dict",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_subclass",
                "false"
              ],
              [
                "test_assure_dict",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_subclass",
                "false"
              ],
              [
                "test_assure_dict",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_init",
                "0"
              ],
              [
                "test_subclass",
                "4"
              ],
              [
                "test_assure_dict",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ],
              [
                "test_subclass",
                [
                  "type_"
                ]
              ],
              [
                "test_assure_dict",
                [
                  "json_dict",
                  "json_str",
                  "json_object"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                []
              ],
              [
                "test_subclass",
                []
              ],
              [
                "test_assure_dict",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2502615403599669,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_init",
                  "test_assure_dict",
                  0.0668153104781061
                ],
                [
                  "test_init",
                  "test_subclass",
                  0.19145989526687088
                ],
                [
                  "test_assure_dict",
                  "test_subclass",
                  0.4925094153349237
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_init",
                "false"
              ],
              [
                "test_subclass",
                "false"
              ],
              [
                "test_assure_dict",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]