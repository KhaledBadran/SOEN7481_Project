[
  {
    "name": "tests_\u0026_test_helper.py",
    "testCases": [
      {
        "name": "TestHelper",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_read_config",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_read_config",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_read_config",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_read_config",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_read_config",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_read_config",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_read_config",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_read_config",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                [
                  "dong_test_fp",
                  "test_config_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_read_config",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_parsers.py",
    "testCases": [
      {
        "name": "TestParsers",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_dong",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_dong",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_dong",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_dong",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_dong",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_dong",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_dong",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_dong",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                [
                  "bad_sent_path",
                  "test_file_path",
                  "test_result",
                  "multi_expected",
                  "test_mwe_path",
                  "expected_value",
                  "expected_results",
                  "test_multiple_path",
                  "mwe_expected",
                  "test_value"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_dong",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_contexts.py",
    "testCases": [
      {
        "name": "TestContexts",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_context",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_right_context",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_target_context",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_full_context",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_left_context",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_context",
                  "[]"
                ],
                [
                  "test_right_context",
                  "[]"
                ],
                [
                  "test_target_context",
                  "[]"
                ],
                [
                  "test_full_context",
                  "[]"
                ],
                [
                  "test_left_context",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_context",
                  "false"
                ],
                [
                  "test_right_context",
                  "true"
                ],
                [
                  "test_target_context",
                  "true"
                ],
                [
                  "test_full_context",
                  "true"
                ],
                [
                  "test_left_context",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_context",
                  "false"
                ],
                [
                  "test_right_context",
                  "false"
                ],
                [
                  "test_target_context",
                  "false"
                ],
                [
                  "test_full_context",
                  "false"
                ],
                [
                  "test_left_context",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_context",
                  "false"
                ],
                [
                  "test_right_context",
                  "true"
                ],
                [
                  "test_target_context",
                  "false"
                ],
                [
                  "test_full_context",
                  "false"
                ],
                [
                  "test_left_context",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_context",
                  "false"
                ],
                [
                  "test_right_context",
                  "false"
                ],
                [
                  "test_target_context",
                  "false"
                ],
                [
                  "test_full_context",
                  "false"
                ],
                [
                  "test_left_context",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "false"
              ],
              [
                "test_right_context",
                "false"
              ],
              [
                "test_target_context",
                "false"
              ],
              [
                "test_full_context",
                "false"
              ],
              [
                "test_left_context",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "false"
              ],
              [
                "test_right_context",
                "false"
              ],
              [
                "test_target_context",
                "false"
              ],
              [
                "test_full_context",
                "false"
              ],
              [
                "test_left_context",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                []
              ],
              [
                "test_right_context",
                []
              ],
              [
                "test_target_context",
                []
              ],
              [
                "test_full_context",
                []
              ],
              [
                "test_left_context",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "false"
              ],
              [
                "test_right_context",
                "false"
              ],
              [
                "test_target_context",
                "false"
              ],
              [
                "test_full_context",
                "false"
              ],
              [
                "test_left_context",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "false"
              ],
              [
                "test_right_context",
                "false"
              ],
              [
                "test_target_context",
                "false"
              ],
              [
                "test_full_context",
                "false"
              ],
              [
                "test_left_context",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_context",
                  "0"
                ],
                [
                  "test_right_context",
                  "0"
                ],
                [
                  "test_target_context",
                  "0"
                ],
                [
                  "test_full_context",
                  "0"
                ],
                [
                  "test_left_context",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_context",
                  "0"
                ],
                [
                  "test_right_context",
                  "0"
                ],
                [
                  "test_target_context",
                  "0"
                ],
                [
                  "test_full_context",
                  "0"
                ],
                [
                  "test_left_context",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "false"
              ],
              [
                "test_right_context",
                "false"
              ],
              [
                "test_target_context",
                "false"
              ],
              [
                "test_full_context",
                "false"
              ],
              [
                "test_left_context",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "false"
              ],
              [
                "test_right_context",
                "false"
              ],
              [
                "test_target_context",
                "false"
              ],
              [
                "test_full_context",
                "false"
              ],
              [
                "test_left_context",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "1"
              ],
              [
                "test_right_context",
                "4"
              ],
              [
                "test_target_context",
                "2"
              ],
              [
                "test_full_context",
                "2"
              ],
              [
                "test_left_context",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                []
              ],
              [
                "test_right_context",
                [
                  "msg",
                  "test_target",
                  "test_text",
                  "right_string",
                  "correct_context",
                  "multi_right",
                  "single_right"
                ]
              ],
              [
                "test_target_context",
                [
                  "msg",
                  "multi_targets",
                  "correct_targets",
                  "test_text",
                  "target_strings",
                  "single_targets",
                  "correct_target",
                  "target_string"
                ]
              ],
              [
                "test_full_context",
                [
                  "msg",
                  "multi_targets",
                  "correct_targets",
                  "test_text",
                  "target_strings",
                  "single_targets",
                  "correct_target",
                  "target_string"
                ]
              ],
              [
                "test_left_context",
                [
                  "msg",
                  "test_target",
                  "test_text",
                  "correct_context",
                  "single_left",
                  "multi_left",
                  "left_string"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                []
              ],
              [
                "test_right_context",
                []
              ],
              [
                "test_target_context",
                []
              ],
              [
                "test_full_context",
                []
              ],
              [
                "test_left_context",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5656643532490523,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_context",
                  "test_right_context",
                  0.36379089612704946
                ],
                [
                  "test_left_context",
                  "test_right_context",
                  0.8127014085295935
                ],
                [
                  "test_context",
                  "test_left_context",
                  0.2956925145397702
                ],
                [
                  "test_right_context",
                  "test_full_context",
                  0.7648053165433155
                ],
                [
                  "test_left_context",
                  "test_full_context",
                  0.769322186175411
                ],
                [
                  "test_context",
                  "test_full_context",
                  0.2937267266822275
                ],
                [
                  "test_right_context",
                  "test_target_context",
                  0.6597629384964122
                ],
                [
                  "test_context",
                  "test_target_context",
                  0.32985990371714374
                ],
                [
                  "test_left_context",
                  "test_target_context",
                  0.6536648557469041
                ],
                [
                  "test_target_context",
                  "test_full_context",
                  0.713316785932695
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_context",
                "false"
              ],
              [
                "test_right_context",
                "false"
              ],
              [
                "test_target_context",
                "false"
              ],
              [
                "test_full_context",
                "false"
              ],
              [
                "test_left_context",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_lexicons.py",
    "testCases": [
      {
        "name": "TestLexicons",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_nrc",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_lexicon_combo",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_lexicon_values",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mpqa",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_subset_values_class",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_huliu",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_nrc",
                  "[]"
                ],
                [
                  "test_lexicon_combo",
                  "[]"
                ],
                [
                  "test_lexicon_values",
                  "[]"
                ],
                [
                  "test_mpqa",
                  "[]"
                ],
                [
                  "test_subset_values_class",
                  "[]"
                ],
                [
                  "test_huliu",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_nrc",
                  "false"
                ],
                [
                  "test_lexicon_combo",
                  "false"
                ],
                [
                  "test_lexicon_values",
                  "false"
                ],
                [
                  "test_mpqa",
                  "false"
                ],
                [
                  "test_subset_values_class",
                  "false"
                ],
                [
                  "test_huliu",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_nrc",
                  "true"
                ],
                [
                  "test_lexicon_combo",
                  "false"
                ],
                [
                  "test_lexicon_values",
                  "false"
                ],
                [
                  "test_mpqa",
                  "true"
                ],
                [
                  "test_subset_values_class",
                  "false"
                ],
                [
                  "test_huliu",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_nrc",
                  "false"
                ],
                [
                  "test_lexicon_combo",
                  "false"
                ],
                [
                  "test_lexicon_values",
                  "false"
                ],
                [
                  "test_mpqa",
                  "false"
                ],
                [
                  "test_subset_values_class",
                  "false"
                ],
                [
                  "test_huliu",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_nrc",
                  "false"
                ],
                [
                  "test_lexicon_combo",
                  "false"
                ],
                [
                  "test_lexicon_values",
                  "false"
                ],
                [
                  "test_mpqa",
                  "false"
                ],
                [
                  "test_subset_values_class",
                  "false"
                ],
                [
                  "test_huliu",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                "false"
              ],
              [
                "test_lexicon_combo",
                "false"
              ],
              [
                "test_lexicon_values",
                "false"
              ],
              [
                "test_mpqa",
                "false"
              ],
              [
                "test_subset_values_class",
                "false"
              ],
              [
                "test_huliu",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                "false"
              ],
              [
                "test_lexicon_combo",
                "false"
              ],
              [
                "test_lexicon_values",
                "false"
              ],
              [
                "test_mpqa",
                "false"
              ],
              [
                "test_subset_values_class",
                "false"
              ],
              [
                "test_huliu",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                []
              ],
              [
                "test_lexicon_combo",
                []
              ],
              [
                "test_lexicon_values",
                []
              ],
              [
                "test_mpqa",
                []
              ],
              [
                "test_subset_values_class",
                []
              ],
              [
                "test_huliu",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                "false"
              ],
              [
                "test_lexicon_combo",
                "false"
              ],
              [
                "test_lexicon_values",
                "false"
              ],
              [
                "test_mpqa",
                "false"
              ],
              [
                "test_subset_values_class",
                "false"
              ],
              [
                "test_huliu",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                "false"
              ],
              [
                "test_lexicon_combo",
                "false"
              ],
              [
                "test_lexicon_values",
                "false"
              ],
              [
                "test_mpqa",
                "false"
              ],
              [
                "test_subset_values_class",
                "false"
              ],
              [
                "test_huliu",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_nrc",
                  "0"
                ],
                [
                  "test_lexicon_combo",
                  "0"
                ],
                [
                  "test_lexicon_values",
                  "0"
                ],
                [
                  "test_mpqa",
                  "0"
                ],
                [
                  "test_subset_values_class",
                  "0"
                ],
                [
                  "test_huliu",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_nrc",
                  "0"
                ],
                [
                  "test_lexicon_combo",
                  "0"
                ],
                [
                  "test_lexicon_values",
                  "0"
                ],
                [
                  "test_mpqa",
                  "0"
                ],
                [
                  "test_subset_values_class",
                  "0"
                ],
                [
                  "test_huliu",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                "false"
              ],
              [
                "test_lexicon_combo",
                "false"
              ],
              [
                "test_lexicon_values",
                "false"
              ],
              [
                "test_mpqa",
                "false"
              ],
              [
                "test_subset_values_class",
                "false"
              ],
              [
                "test_huliu",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                "false"
              ],
              [
                "test_lexicon_combo",
                "false"
              ],
              [
                "test_lexicon_values",
                "false"
              ],
              [
                "test_mpqa",
                "false"
              ],
              [
                "test_subset_values_class",
                "false"
              ],
              [
                "test_huliu",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                "3"
              ],
              [
                "test_lexicon_combo",
                "5"
              ],
              [
                "test_lexicon_values",
                "3"
              ],
              [
                "test_mpqa",
                "4"
              ],
              [
                "test_subset_values_class",
                "10"
              ],
              [
                "test_huliu",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_nrc",
                [
                  "valid_value_types",
                  "word_sentiment",
                  "value_types",
                  "nrc_lex"
                ]
              ],
              [
                "test_lexicon_combo",
                [
                  "valied_combined",
                  "valid_combined1",
                  "combined_lexicon1",
                  "combined_fake",
                  "fake_lex3",
                  "fake_lexicon1",
                  "fake_lex2",
                  "fake_lex1",
                  "combined_fake1",
                  "fake_lexicon3",
                  "fake_lexicon2",
                  "combined_lexicon"
                ]
              ],
              [
                "test_lexicon_values",
                [
                  "valid_words",
                  "valid_lexicon"
                ]
              ],
              [
                "test_mpqa",
                [
                  "valid_value_types",
                  "mpqa_lex",
                  "word_sentiment",
                  "value_types",
                  "lexicon_length",
                  "valid_lexicon_length"
                ]
              ],
              [
                "test_subset_values_class",
                [
                  "subset_size",
                  "false_value",
                  "normal_mpqa",
                  "valid_subset_size",
                  "mpqa_lower",
                  "mpqa_upper"
                ]
              ],
              [
                "test_huliu",
                [
                  "valid_value_types",
                  "hu_liu_lex",
                  "word_sentiment",
                  "value_types",
                  "lexicon_length",
                  "valid_lexicon_length"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_nrc",
                []
              ],
              [
                "test_lexicon_combo",
                []
              ],
              [
                "test_lexicon_values",
                []
              ],
              [
                "test_mpqa",
                []
              ],
              [
                "test_subset_values_class",
                []
              ],
              [
                "test_huliu",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5875217694480452,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_lexicon_combo",
                  "test_mpqa",
                  0.42675311524725357
                ],
                [
                  "test_lexicon_combo",
                  "test_nrc",
                  0.2947093944648151
                ],
                [
                  "test_lexicon_values",
                  "test_subset_values_class",
                  0.5208156913746482
                ],
                [
                  "test_nrc",
                  "test_mpqa",
                  0.8934979157453751
                ],
                [
                  "test_lexicon_values",
                  "test_huliu",
                  0.667718784707502
                ],
                [
                  "test_subset_values_class",
                  "test_nrc",
                  0.45113579858029484
                ],
                [
                  "test_huliu",
                  "test_mpqa",
                  0.9690007369099899
                ],
                [
                  "test_lexicon_values",
                  "test_mpqa",
                  0.6763190130459201
                ],
                [
                  "test_subset_values_class",
                  "test_mpqa",
                  0.5343424796157288
                ],
                [
                  "test_lexicon_combo",
                  "test_lexicon_values",
                  0.5165960826335882
                ],
                [
                  "test_lexicon_values",
                  "test_nrc",
                  0.5717746321979479
                ],
                [
                  "test_lexicon_combo",
                  "test_subset_values_class",
                  0.45530307725669555
                ],
                [
                  "test_subset_values_class",
                  "test_huliu",
                  0.5337687384438214
                ],
                [
                  "test_lexicon_combo",
                  "test_huliu",
                  0.4213264243447928
                ],
                [
                  "test_nrc",
                  "test_huliu",
                  0.8797646571523052
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_nrc",
                "false"
              ],
              [
                "test_lexicon_combo",
                "false"
              ],
              [
                "test_lexicon_values",
                "false"
              ],
              [
                "test_mpqa",
                "false"
              ],
              [
                "test_subset_values_class",
                "true"
              ],
              [
                "test_huliu",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_data_types.py",
    "testCases": [
      {
        "name": "TestTarget",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_targetcoll_stored_sent",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_targetcoll_sent_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_targetcoll_add",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_split_dataset",
                  "[]"
                ],
                [
                  "test_targetcoll_constructor",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_targetcoll_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_target_eq",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_target_set",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_target_constructor",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_targetcoll_add_preds",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_targetcoll_set",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_targetcoll_get",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_targetcoll_stored_sent",
                  "[]"
                ],
                [
                  "test_targetcoll_sent_data",
                  "[]"
                ],
                [
                  "test_targetcoll_add",
                  "[]"
                ],
                [
                  "test_split_dataset",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_targetcoll_constructor",
                  "[]"
                ],
                [
                  "test_targetcoll_data",
                  "[]"
                ],
                [
                  "test_target_eq",
                  "[]"
                ],
                [
                  "test_target_set",
                  "[]"
                ],
                [
                  "test_target_constructor",
                  "[]"
                ],
                [
                  "test_targetcoll_add_preds",
                  "[]"
                ],
                [
                  "test_targetcoll_set",
                  "[]"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "[]"
                ],
                [
                  "test_targetcoll_get",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_targetcoll_stored_sent",
                  "false"
                ],
                [
                  "test_targetcoll_sent_data",
                  "false"
                ],
                [
                  "test_targetcoll_add",
                  "true"
                ],
                [
                  "test_split_dataset",
                  "true"
                ],
                [
                  "test_targetcoll_constructor",
                  "false"
                ],
                [
                  "test_targetcoll_data",
                  "false"
                ],
                [
                  "test_target_eq",
                  "false"
                ],
                [
                  "test_target_set",
                  "false"
                ],
                [
                  "test_target_constructor",
                  "false"
                ],
                [
                  "test_targetcoll_add_preds",
                  "false"
                ],
                [
                  "test_targetcoll_set",
                  "true"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "false"
                ],
                [
                  "test_targetcoll_get",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_targetcoll_stored_sent",
                  "false"
                ],
                [
                  "test_targetcoll_sent_data",
                  "false"
                ],
                [
                  "test_targetcoll_add",
                  "false"
                ],
                [
                  "test_split_dataset",
                  "false"
                ],
                [
                  "test_targetcoll_constructor",
                  "false"
                ],
                [
                  "test_targetcoll_data",
                  "false"
                ],
                [
                  "test_target_eq",
                  "false"
                ],
                [
                  "test_target_set",
                  "false"
                ],
                [
                  "test_target_constructor",
                  "false"
                ],
                [
                  "test_targetcoll_add_preds",
                  "false"
                ],
                [
                  "test_targetcoll_set",
                  "false"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "false"
                ],
                [
                  "test_targetcoll_get",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_targetcoll_stored_sent",
                  "false"
                ],
                [
                  "test_targetcoll_sent_data",
                  "false"
                ],
                [
                  "test_targetcoll_add",
                  "false"
                ],
                [
                  "test_split_dataset",
                  "false"
                ],
                [
                  "test_targetcoll_constructor",
                  "false"
                ],
                [
                  "test_targetcoll_data",
                  "false"
                ],
                [
                  "test_target_eq",
                  "false"
                ],
                [
                  "test_target_set",
                  "false"
                ],
                [
                  "test_target_constructor",
                  "true"
                ],
                [
                  "test_targetcoll_add_preds",
                  "true"
                ],
                [
                  "test_targetcoll_set",
                  "false"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "true"
                ],
                [
                  "test_targetcoll_get",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_targetcoll_stored_sent",
                  "false"
                ],
                [
                  "test_targetcoll_sent_data",
                  "false"
                ],
                [
                  "test_targetcoll_add",
                  "false"
                ],
                [
                  "test_split_dataset",
                  "false"
                ],
                [
                  "test_targetcoll_constructor",
                  "false"
                ],
                [
                  "test_targetcoll_data",
                  "false"
                ],
                [
                  "test_target_eq",
                  "false"
                ],
                [
                  "test_target_set",
                  "false"
                ],
                [
                  "test_target_constructor",
                  "false"
                ],
                [
                  "test_targetcoll_add_preds",
                  "false"
                ],
                [
                  "test_targetcoll_set",
                  "false"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "false"
                ],
                [
                  "test_targetcoll_get",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "false"
              ],
              [
                "test_targetcoll_sent_data",
                "false"
              ],
              [
                "test_targetcoll_add",
                "false"
              ],
              [
                "test_split_dataset",
                "false"
              ],
              [
                "test_targetcoll_constructor",
                "false"
              ],
              [
                "test_targetcoll_data",
                "false"
              ],
              [
                "test_target_eq",
                "false"
              ],
              [
                "test_target_set",
                "false"
              ],
              [
                "test_target_constructor",
                "false"
              ],
              [
                "test_targetcoll_add_preds",
                "false"
              ],
              [
                "test_targetcoll_set",
                "false"
              ],
              [
                "test_target_coll_subset_by_sent",
                "false"
              ],
              [
                "test_targetcoll_get",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "false"
              ],
              [
                "test_targetcoll_sent_data",
                "false"
              ],
              [
                "test_targetcoll_add",
                "true"
              ],
              [
                "test_split_dataset",
                "false"
              ],
              [
                "test_targetcoll_constructor",
                "false"
              ],
              [
                "test_targetcoll_data",
                "false"
              ],
              [
                "test_target_eq",
                "false"
              ],
              [
                "test_target_set",
                "false"
              ],
              [
                "test_target_constructor",
                "false"
              ],
              [
                "test_targetcoll_add_preds",
                "false"
              ],
              [
                "test_targetcoll_set",
                "true"
              ],
              [
                "test_target_coll_subset_by_sent",
                "false"
              ],
              [
                "test_targetcoll_get",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                []
              ],
              [
                "test_targetcoll_sent_data",
                []
              ],
              [
                "test_targetcoll_add",
                []
              ],
              [
                "test_split_dataset",
                []
              ],
              [
                "test_targetcoll_constructor",
                []
              ],
              [
                "test_targetcoll_data",
                []
              ],
              [
                "test_target_eq",
                []
              ],
              [
                "test_target_set",
                []
              ],
              [
                "test_target_constructor",
                []
              ],
              [
                "test_targetcoll_add_preds",
                []
              ],
              [
                "test_targetcoll_set",
                []
              ],
              [
                "test_target_coll_subset_by_sent",
                []
              ],
              [
                "test_targetcoll_get",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "false"
              ],
              [
                "test_targetcoll_sent_data",
                "false"
              ],
              [
                "test_targetcoll_add",
                "false"
              ],
              [
                "test_split_dataset",
                "false"
              ],
              [
                "test_targetcoll_constructor",
                "false"
              ],
              [
                "test_targetcoll_data",
                "false"
              ],
              [
                "test_target_eq",
                "false"
              ],
              [
                "test_target_set",
                "false"
              ],
              [
                "test_target_constructor",
                "false"
              ],
              [
                "test_targetcoll_add_preds",
                "false"
              ],
              [
                "test_targetcoll_set",
                "false"
              ],
              [
                "test_target_coll_subset_by_sent",
                "false"
              ],
              [
                "test_targetcoll_get",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "false"
              ],
              [
                "test_targetcoll_sent_data",
                "false"
              ],
              [
                "test_targetcoll_add",
                "false"
              ],
              [
                "test_split_dataset",
                "false"
              ],
              [
                "test_targetcoll_constructor",
                "false"
              ],
              [
                "test_targetcoll_data",
                "true"
              ],
              [
                "test_target_eq",
                "false"
              ],
              [
                "test_target_set",
                "false"
              ],
              [
                "test_target_constructor",
                "false"
              ],
              [
                "test_targetcoll_add_preds",
                "true"
              ],
              [
                "test_targetcoll_set",
                "false"
              ],
              [
                "test_target_coll_subset_by_sent",
                "false"
              ],
              [
                "test_targetcoll_get",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_targetcoll_stored_sent",
                  "0"
                ],
                [
                  "test_targetcoll_sent_data",
                  "0"
                ],
                [
                  "test_targetcoll_add",
                  "0"
                ],
                [
                  "test_split_dataset",
                  "0"
                ],
                [
                  "test_targetcoll_constructor",
                  "0"
                ],
                [
                  "test_targetcoll_data",
                  "0"
                ],
                [
                  "test_target_eq",
                  "0"
                ],
                [
                  "test_target_set",
                  "0"
                ],
                [
                  "test_target_constructor",
                  "0"
                ],
                [
                  "test_targetcoll_add_preds",
                  "0"
                ],
                [
                  "test_targetcoll_set",
                  "0"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "0"
                ],
                [
                  "test_targetcoll_get",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_targetcoll_stored_sent",
                  "0"
                ],
                [
                  "test_targetcoll_sent_data",
                  "0"
                ],
                [
                  "test_targetcoll_add",
                  "0"
                ],
                [
                  "test_split_dataset",
                  "0"
                ],
                [
                  "test_targetcoll_constructor",
                  "0"
                ],
                [
                  "test_targetcoll_data",
                  "0"
                ],
                [
                  "test_target_eq",
                  "0"
                ],
                [
                  "test_target_set",
                  "0"
                ],
                [
                  "test_target_constructor",
                  "0"
                ],
                [
                  "test_targetcoll_add_preds",
                  "0"
                ],
                [
                  "test_targetcoll_set",
                  "0"
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "0"
                ],
                [
                  "test_targetcoll_get",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "false"
              ],
              [
                "test_targetcoll_sent_data",
                "false"
              ],
              [
                "test_targetcoll_add",
                "false"
              ],
              [
                "test_split_dataset",
                "false"
              ],
              [
                "test_targetcoll_constructor",
                "false"
              ],
              [
                "test_targetcoll_data",
                "false"
              ],
              [
                "test_target_eq",
                "false"
              ],
              [
                "test_target_set",
                "false"
              ],
              [
                "test_target_constructor",
                "false"
              ],
              [
                "test_targetcoll_add_preds",
                "false"
              ],
              [
                "test_targetcoll_set",
                "false"
              ],
              [
                "test_target_coll_subset_by_sent",
                "false"
              ],
              [
                "test_targetcoll_get",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "false"
              ],
              [
                "test_targetcoll_sent_data",
                "false"
              ],
              [
                "test_targetcoll_add",
                "false"
              ],
              [
                "test_split_dataset",
                "false"
              ],
              [
                "test_targetcoll_constructor",
                "false"
              ],
              [
                "test_targetcoll_data",
                "false"
              ],
              [
                "test_target_eq",
                "false"
              ],
              [
                "test_target_set",
                "false"
              ],
              [
                "test_target_constructor",
                "false"
              ],
              [
                "test_targetcoll_add_preds",
                "false"
              ],
              [
                "test_targetcoll_set",
                "false"
              ],
              [
                "test_target_coll_subset_by_sent",
                "false"
              ],
              [
                "test_targetcoll_get",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "1"
              ],
              [
                "test_targetcoll_sent_data",
                "9"
              ],
              [
                "test_targetcoll_add",
                "3"
              ],
              [
                "test_split_dataset",
                "8"
              ],
              [
                "test_targetcoll_constructor",
                "3"
              ],
              [
                "test_targetcoll_data",
                "5"
              ],
              [
                "test_target_eq",
                "4"
              ],
              [
                "test_target_set",
                "3"
              ],
              [
                "test_target_constructor",
                "21"
              ],
              [
                "test_targetcoll_add_preds",
                "6"
              ],
              [
                "test_targetcoll_set",
                "3"
              ],
              [
                "test_target_coll_subset_by_sent",
                "3"
              ],
              [
                "test_targetcoll_get",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                [
                  "test_sentiments",
                  "target_col",
                  "target_example_0",
                  "valid_sentiments",
                  "target_example_2",
                  "target_example_1"
                ]
              ],
              [
                "test_targetcoll_sent_data",
                [
                  "target_col_int",
                  "target_col_str",
                  "test_sentiments",
                  "target_col",
                  "target_example_0",
                  "valid_sentiments",
                  "target_example_2",
                  "int_mapper",
                  "target_example_1",
                  "str_mapper"
                ]
              ],
              [
                "test_targetcoll_add",
                [
                  "target_col",
                  "target_example_0",
                  "target_example_1"
                ]
              ],
              [
                "test_split_dataset",
                [
                  "data_size",
                  "test_ids",
                  "data",
                  "test",
                  "test_size",
                  "test_dir",
                  "train_ids",
                  "true_test_ids",
                  "test_ids_",
                  "data_fp",
                  "train_size",
                  "train",
                  "_"
                ]
              ],
              [
                "test_targetcoll_constructor",
                [
                  "another_example",
                  "dup_example",
                  "target_example"
                ]
              ],
              [
                "test_targetcoll_data",
                [
                  "all_data",
                  "target_col",
                  "target_example_0",
                  "target_example_2",
                  "target_example_1"
                ]
              ],
              [
                "test_target_eq",
                [
                  "test_equality",
                  "target_example_0",
                  "dict_example_1",
                  "target_example_2",
                  "target_example_1",
                  "target_example_dup0",
                  "target_example_dup1",
                  "target_example_dup2"
                ]
              ],
              [
                "test_target_set",
                [
                  "target_example_string",
                  "predicted_sentiment",
                  "target_example_int"
                ]
              ],
              [
                "test_target_constructor",
                [
                  "sentiment",
                  "sentence_id",
                  "target_example",
                  "target_id",
                  "text",
                  "predicted",
                  "span",
                  "target"
                ]
              ],
              [
                "test_targetcoll_add_preds",
                [
                  "target_col_int",
                  "target_example_int_1",
                  "target_example_int_2",
                  "target_col_str",
                  "target_example_int_0",
                  "target_example_0",
                  "target_example_2",
                  "target_example_1",
                  "pred_sents"
                ]
              ],
              [
                "test_targetcoll_set",
                [
                  "target_diff_1",
                  "target_example_4",
                  "target_example_3",
                  "target_col",
                  "target_example_5",
                  "target_example_0",
                  "target_example_2",
                  "target_example_1"
                ]
              ],
              [
                "test_target_coll_subset_by_sent",
                [
                  "target_example_8",
                  "target_example_7",
                  "target_example_9",
                  "target_example_4",
                  "target_example_3",
                  "all_targets",
                  "valid_col",
                  "target_example_6",
                  "target_example_10",
                  "target_example_5",
                  "target_col",
                  "target_example_0",
                  "test_col",
                  "target_example_2",
                  "target_example_1"
                ]
              ],
              [
                "test_targetcoll_get",
                [
                  "target_col",
                  "target_example_0",
                  "target_example_2",
                  "target_example_1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                []
              ],
              [
                "test_targetcoll_sent_data",
                []
              ],
              [
                "test_targetcoll_add",
                []
              ],
              [
                "test_split_dataset",
                []
              ],
              [
                "test_targetcoll_constructor",
                []
              ],
              [
                "test_targetcoll_data",
                []
              ],
              [
                "test_target_eq",
                []
              ],
              [
                "test_target_set",
                []
              ],
              [
                "test_target_constructor",
                []
              ],
              [
                "test_targetcoll_add_preds",
                []
              ],
              [
                "test_targetcoll_set",
                []
              ],
              [
                "test_target_coll_subset_by_sent",
                []
              ],
              [
                "test_targetcoll_get",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8022938153278187,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_targetcoll_add",
                  "test_targetcoll_add_preds",
                  0.9087688674052353
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_add",
                  0.842500983321364
                ],
                [
                  "test_target_set",
                  "test_targetcoll_add",
                  0.8150739765611597
                ],
                [
                  "test_targetcoll_sent_data",
                  "test_split_dataset",
                  0.47444447089866854
                ],
                [
                  "test_targetcoll_set",
                  "test_target_coll_subset_by_sent",
                  0.9281944802869071
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_sent_data",
                  0.8580631998515982
                ],
                [
                  "test_targetcoll_data",
                  "test_split_dataset",
                  0.36393801502342615
                ],
                [
                  "test_targetcoll_add",
                  "test_targetcoll_stored_sent",
                  0.908843441766657
                ],
                [
                  "test_targetcoll_set",
                  "test_targetcoll_stored_sent",
                  0.9307830289624407
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_set",
                  0.940496650624346
                ],
                [
                  "test_targetcoll_get",
                  "test_targetcoll_set",
                  0.9562035196681944
                ],
                [
                  "test_targetcoll_add",
                  "test_target_coll_subset_by_sent",
                  0.9035264323279585
                ],
                [
                  "test_targetcoll_get",
                  "test_target_coll_subset_by_sent",
                  0.9153171656495912
                ],
                [
                  "test_targetcoll_constructor",
                  "test_targetcoll_add_preds",
                  0.9073259845639019
                ],
                [
                  "test_targetcoll_get",
                  "test_targetcoll_stored_sent",
                  0.9291275767785656
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_stored_sent",
                  0.9238158796232231
                ],
                [
                  "test_target_set",
                  "test_targetcoll_get",
                  0.8062328111929068
                ],
                [
                  "test_target_constructor",
                  "test_target_coll_subset_by_sent",
                  0.8186403401848751
                ],
                [
                  "test_targetcoll_constructor",
                  "test_targetcoll_get",
                  0.9117823618273343
                ],
                [
                  "test_target_set",
                  "test_targetcoll_constructor",
                  0.7740220442860111
                ],
                [
                  "test_target_set",
                  "test_target_coll_subset_by_sent",
                  0.7624857773665844
                ],
                [
                  "test_targetcoll_add_preds",
                  "test_target_coll_subset_by_sent",
                  0.9024683305745593
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_constructor",
                  0.8666732994500023
                ],
                [
                  "test_targetcoll_set",
                  "test_targetcoll_sent_data",
                  0.9059050035722079
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_add_preds",
                  0.8583627665314193
                ],
                [
                  "test_target_set",
                  "test_split_dataset",
                  0.38592858096000177
                ],
                [
                  "test_targetcoll_constructor",
                  "test_targetcoll_sent_data",
                  0.8882917600999648
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_data",
                  0.8600546654759669
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_get",
                  0.8487262489834476
                ],
                [
                  "test_targetcoll_constructor",
                  "test_target_coll_subset_by_sent",
                  0.8666444451239856
                ],
                [
                  "test_target_set",
                  "test_targetcoll_sent_data",
                  0.8158795509362842
                ],
                [
                  "test_target_eq",
                  "test_split_dataset",
                  0.42001707154746465
                ],
                [
                  "test_targetcoll_constructor",
                  "test_targetcoll_set",
                  0.9046994085165208
                ],
                [
                  "test_targetcoll_set",
                  "test_targetcoll_data",
                  0.8454212195212915
                ],
                [
                  "test_targetcoll_stored_sent",
                  "test_split_dataset",
                  0.47129918324872216
                ],
                [
                  "test_targetcoll_constructor",
                  "test_targetcoll_stored_sent",
                  0.9000703527011357
                ],
                [
                  "test_targetcoll_get",
                  "test_targetcoll_add_preds",
                  0.9294821837662495
                ],
                [
                  "test_targetcoll_set",
                  "test_split_dataset",
                  0.39294382198382083
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_set",
                  0.819639336113799
                ],
                [
                  "test_target_set",
                  "test_targetcoll_data",
                  0.7646809074509529
                ],
                [
                  "test_targetcoll_stored_sent",
                  "test_target_coll_subset_by_sent",
                  0.9424633713183564
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_data",
                  0.7698492395046472
                ],
                [
                  "test_targetcoll_get",
                  "test_targetcoll_add",
                  0.9309796282657913
                ],
                [
                  "test_targetcoll_data",
                  "test_targetcoll_sent_data",
                  0.8426773888882709
                ],
                [
                  "test_targetcoll_sent_data",
                  "test_targetcoll_add_preds",
                  0.9291066272905021
                ],
                [
                  "test_targetcoll_stored_sent",
                  "test_targetcoll_sent_data",
                  0.9597827133102258
                ],
                [
                  "test_targetcoll_add",
                  "test_split_dataset",
                  0.4012225161007393
                ],
                [
                  "test_target_constructor",
                  "test_targetcoll_stored_sent",
                  0.8438498368666317
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_sent_data",
                  0.9108954950873163
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_constructor",
                  0.9101063597073622
                ],
                [
                  "test_target_eq",
                  "test_target_set",
                  0.787816833126475
                ],
                [
                  "test_targetcoll_constructor",
                  "test_targetcoll_add",
                  0.8932980805060032
                ],
                [
                  "test_target_set",
                  "test_targetcoll_stored_sent",
                  0.7903699857777654
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_get",
                  0.929278520597919
                ],
                [
                  "test_targetcoll_data",
                  "test_targetcoll_add_preds",
                  0.8538999855409097
                ],
                [
                  "test_targetcoll_constructor",
                  "test_split_dataset",
                  0.4121265473269019
                ],
                [
                  "test_target_eq",
                  "test_target_coll_subset_by_sent",
                  0.9176100975821988
                ],
                [
                  "test_targetcoll_sent_data",
                  "test_target_coll_subset_by_sent",
                  0.9187033064285287
                ],
                [
                  "test_target_set",
                  "test_targetcoll_set",
                  0.7900018652604315
                ],
                [
                  "test_target_constructor",
                  "test_target_eq",
                  0.8385179882355495
                ],
                [
                  "test_targetcoll_add",
                  "test_targetcoll_data",
                  0.84842403586337
                ],
                [
                  "test_targetcoll_add_preds",
                  "test_split_dataset",
                  0.3703780861191221
                ],
                [
                  "test_target_set",
                  "test_targetcoll_add_preds",
                  0.8137884435883862
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_add",
                  0.9167317933982556
                ],
                [
                  "test_targetcoll_data",
                  "test_targetcoll_stored_sent",
                  0.851516972628792
                ],
                [
                  "test_target_constructor",
                  "test_target_set",
                  0.7497455377242722
                ],
                [
                  "test_targetcoll_constructor",
                  "test_targetcoll_data",
                  0.8174895499745469
                ],
                [
                  "test_target_constructor",
                  "test_split_dataset",
                  0.37613862412571014
                ],
                [
                  "test_targetcoll_get",
                  "test_targetcoll_sent_data",
                  0.9117530470454849
                ],
                [
                  "test_target_coll_subset_by_sent",
                  "test_split_dataset",
                  0.4256699648162418
                ],
                [
                  "test_targetcoll_get",
                  "test_targetcoll_data",
                  0.8642095376615165
                ],
                [
                  "test_targetcoll_get",
                  "test_split_dataset",
                  0.4193917249208937
                ],
                [
                  "test_targetcoll_set",
                  "test_targetcoll_add_preds",
                  0.92125918221656
                ],
                [
                  "test_targetcoll_data",
                  "test_target_coll_subset_by_sent",
                  0.8257859576999834
                ],
                [
                  "test_targetcoll_add",
                  "test_targetcoll_sent_data",
                  0.8948762067344621
                ],
                [
                  "test_targetcoll_stored_sent",
                  "test_targetcoll_add_preds",
                  0.918231232160504
                ],
                [
                  "test_target_eq",
                  "test_targetcoll_add_preds",
                  0.9126837542832783
                ],
                [
                  "test_targetcoll_set",
                  "test_targetcoll_add",
                  0.941512413157214
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_targetcoll_stored_sent",
                "false"
              ],
              [
                "test_targetcoll_sent_data",
                "false"
              ],
              [
                "test_targetcoll_add",
                "false"
              ],
              [
                "test_split_dataset",
                "false"
              ],
              [
                "test_targetcoll_constructor",
                "false"
              ],
              [
                "test_targetcoll_data",
                "false"
              ],
              [
                "test_target_eq",
                "true"
              ],
              [
                "test_target_set",
                "false"
              ],
              [
                "test_target_constructor",
                "false"
              ],
              [
                "test_targetcoll_add_preds",
                "false"
              ],
              [
                "test_targetcoll_set",
                "false"
              ],
              [
                "test_target_coll_subset_by_sent",
                "false"
              ],
              [
                "test_targetcoll_get",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 13
      }
    ]
  },
  {
    "name": "tests_\u0026_test_tokenisers.py",
    "testCases": [
      {
        "name": "TestTokenisers",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_whitespace",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ark_twokenize",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_spacy_tokeniser",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_whitespace",
                  "[]"
                ],
                [
                  "test_ark_twokenize",
                  "[]"
                ],
                [
                  "test_spacy_tokeniser",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_whitespace",
                  "true"
                ],
                [
                  "test_ark_twokenize",
                  "true"
                ],
                [
                  "test_spacy_tokeniser",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_whitespace",
                  "false"
                ],
                [
                  "test_ark_twokenize",
                  "false"
                ],
                [
                  "test_spacy_tokeniser",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_whitespace",
                  "false"
                ],
                [
                  "test_ark_twokenize",
                  "false"
                ],
                [
                  "test_spacy_tokeniser",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_whitespace",
                  "false"
                ],
                [
                  "test_ark_twokenize",
                  "false"
                ],
                [
                  "test_spacy_tokeniser",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "false"
              ],
              [
                "test_ark_twokenize",
                "false"
              ],
              [
                "test_spacy_tokeniser",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "false"
              ],
              [
                "test_ark_twokenize",
                "false"
              ],
              [
                "test_spacy_tokeniser",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                []
              ],
              [
                "test_ark_twokenize",
                []
              ],
              [
                "test_spacy_tokeniser",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "false"
              ],
              [
                "test_ark_twokenize",
                "false"
              ],
              [
                "test_spacy_tokeniser",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "false"
              ],
              [
                "test_ark_twokenize",
                "false"
              ],
              [
                "test_spacy_tokeniser",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_whitespace",
                  "0"
                ],
                [
                  "test_ark_twokenize",
                  "0"
                ],
                [
                  "test_spacy_tokeniser",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_whitespace",
                  "0"
                ],
                [
                  "test_ark_twokenize",
                  "0"
                ],
                [
                  "test_spacy_tokeniser",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "false"
              ],
              [
                "test_ark_twokenize",
                "false"
              ],
              [
                "test_spacy_tokeniser",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "false"
              ],
              [
                "test_ark_twokenize",
                "false"
              ],
              [
                "test_spacy_tokeniser",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "3"
              ],
              [
                "test_ark_twokenize",
                "3"
              ],
              [
                "test_spacy_tokeniser",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                [
                  "test_result",
                  "expected_results",
                  "expected_result"
                ]
              ],
              [
                "test_ark_twokenize",
                [
                  "test_result",
                  "expected_results",
                  "expected_result"
                ]
              ],
              [
                "test_spacy_tokeniser",
                [
                  "test_result",
                  "expected_results",
                  "expected_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                []
              ],
              [
                "test_ark_twokenize",
                []
              ],
              [
                "test_spacy_tokeniser",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9359062772488951,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_whitespace",
                  "test_spacy_tokeniser",
                  0.9440179991643138
                ],
                [
                  "test_whitespace",
                  "test_ark_twokenize",
                  0.9429499118309901
                ],
                [
                  "test_ark_twokenize",
                  "test_spacy_tokeniser",
                  0.9207509207513812
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_whitespace",
                "false"
              ],
              [
                "test_ark_twokenize",
                "false"
              ],
              [
                "test_spacy_tokeniser",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_word_vectors.py",
    "testCases": [
      {
        "name": "TestWordVectors",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wordvector_methods",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_unit_norm",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pre_trained",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_gensim_word2vec",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_glove_twitter_download",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_glove_common_download",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_padded_vector",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wordvector_methods",
                  "[]"
                ],
                [
                  "test_unit_norm",
                  "[]"
                ],
                [
                  "test_pre_trained",
                  "[]"
                ],
                [
                  "test_gensim_word2vec",
                  "[]"
                ],
                [
                  "test_glove_twitter_download",
                  "[]"
                ],
                [
                  "test_glove_common_download",
                  "[]"
                ],
                [
                  "test_padded_vector",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wordvector_methods",
                  "false"
                ],
                [
                  "test_unit_norm",
                  "false"
                ],
                [
                  "test_pre_trained",
                  "false"
                ],
                [
                  "test_gensim_word2vec",
                  "false"
                ],
                [
                  "test_glove_twitter_download",
                  "true"
                ],
                [
                  "test_glove_common_download",
                  "true"
                ],
                [
                  "test_padded_vector",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wordvector_methods",
                  "false"
                ],
                [
                  "test_unit_norm",
                  "false"
                ],
                [
                  "test_pre_trained",
                  "false"
                ],
                [
                  "test_gensim_word2vec",
                  "false"
                ],
                [
                  "test_glove_twitter_download",
                  "false"
                ],
                [
                  "test_glove_common_download",
                  "false"
                ],
                [
                  "test_padded_vector",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wordvector_methods",
                  "false"
                ],
                [
                  "test_unit_norm",
                  "false"
                ],
                [
                  "test_pre_trained",
                  "false"
                ],
                [
                  "test_gensim_word2vec",
                  "false"
                ],
                [
                  "test_glove_twitter_download",
                  "false"
                ],
                [
                  "test_glove_common_download",
                  "false"
                ],
                [
                  "test_padded_vector",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wordvector_methods",
                  "false"
                ],
                [
                  "test_unit_norm",
                  "false"
                ],
                [
                  "test_pre_trained",
                  "false"
                ],
                [
                  "test_gensim_word2vec",
                  "false"
                ],
                [
                  "test_glove_twitter_download",
                  "false"
                ],
                [
                  "test_glove_common_download",
                  "false"
                ],
                [
                  "test_padded_vector",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                "false"
              ],
              [
                "test_unit_norm",
                "false"
              ],
              [
                "test_pre_trained",
                "false"
              ],
              [
                "test_gensim_word2vec",
                "false"
              ],
              [
                "test_glove_twitter_download",
                "false"
              ],
              [
                "test_glove_common_download",
                "false"
              ],
              [
                "test_padded_vector",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                "false"
              ],
              [
                "test_unit_norm",
                "false"
              ],
              [
                "test_pre_trained",
                "false"
              ],
              [
                "test_gensim_word2vec",
                "false"
              ],
              [
                "test_glove_twitter_download",
                "false"
              ],
              [
                "test_glove_common_download",
                "false"
              ],
              [
                "test_padded_vector",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                []
              ],
              [
                "test_unit_norm",
                []
              ],
              [
                "test_pre_trained",
                []
              ],
              [
                "test_gensim_word2vec",
                []
              ],
              [
                "test_glove_twitter_download",
                []
              ],
              [
                "test_glove_common_download",
                []
              ],
              [
                "test_padded_vector",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                "false"
              ],
              [
                "test_unit_norm",
                "false"
              ],
              [
                "test_pre_trained",
                "false"
              ],
              [
                "test_gensim_word2vec",
                "false"
              ],
              [
                "test_glove_twitter_download",
                "false"
              ],
              [
                "test_glove_common_download",
                "false"
              ],
              [
                "test_padded_vector",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_wordvector_methods",
                "true"
              ],
              [
                "test_unit_norm",
                "true"
              ],
              [
                "test_pre_trained",
                "true"
              ],
              [
                "test_gensim_word2vec",
                "true"
              ],
              [
                "test_glove_twitter_download",
                "false"
              ],
              [
                "test_glove_common_download",
                "false"
              ],
              [
                "test_padded_vector",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wordvector_methods",
                  "0"
                ],
                [
                  "test_unit_norm",
                  "0"
                ],
                [
                  "test_pre_trained",
                  "0"
                ],
                [
                  "test_gensim_word2vec",
                  "0"
                ],
                [
                  "test_glove_twitter_download",
                  "0"
                ],
                [
                  "test_glove_common_download",
                  "0"
                ],
                [
                  "test_padded_vector",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wordvector_methods",
                  "0"
                ],
                [
                  "test_unit_norm",
                  "0"
                ],
                [
                  "test_pre_trained",
                  "0"
                ],
                [
                  "test_gensim_word2vec",
                  "0"
                ],
                [
                  "test_glove_twitter_download",
                  "0"
                ],
                [
                  "test_glove_common_download",
                  "0"
                ],
                [
                  "test_padded_vector",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                "false"
              ],
              [
                "test_unit_norm",
                "false"
              ],
              [
                "test_pre_trained",
                "false"
              ],
              [
                "test_gensim_word2vec",
                "false"
              ],
              [
                "test_glove_twitter_download",
                "false"
              ],
              [
                "test_glove_common_download",
                "false"
              ],
              [
                "test_padded_vector",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                "false"
              ],
              [
                "test_unit_norm",
                "false"
              ],
              [
                "test_pre_trained",
                "false"
              ],
              [
                "test_gensim_word2vec",
                "false"
              ],
              [
                "test_glove_twitter_download",
                "false"
              ],
              [
                "test_glove_common_download",
                "false"
              ],
              [
                "test_padded_vector",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                "10"
              ],
              [
                "test_unit_norm",
                "4"
              ],
              [
                "test_pre_trained",
                "8"
              ],
              [
                "test_gensim_word2vec",
                "14"
              ],
              [
                "test_glove_twitter_download",
                "2"
              ],
              [
                "test_glove_common_download",
                "2"
              ],
              [
                "test_padded_vector",
                "21"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_wordvector_methods",
                [
                  "embedding_matrix",
                  "unknown_index",
                  "index2word",
                  "another_vec",
                  "word_vector",
                  "is_nothing_vector",
                  "test_vectors",
                  "hello_lookup",
                  "index_correct",
                  "is_hello_vector",
                  "zero_vec",
                  "vec_size",
                  "hello_index",
                  "index2vector",
                  "nothing_vec",
                  "word2index",
                  "another_index",
                  "hello_vec"
                ]
              ],
              [
                "test_unit_norm",
                [
                  "unit_is_equal",
                  "test_unit_mag",
                  "another_vec",
                  "word_vector",
                  "test_vectors",
                  "hello_embedding",
                  "unknown_vector",
                  "hello_vec",
                  "unit_hello_vec",
                  "hello_index"
                ]
              ],
              [
                "test_pre_trained",
                [
                  "unknown_word",
                  "is_zero",
                  "sswe_model",
                  "zero_vector",
                  "unknown_vector",
                  "sswe_vec_size"
                ]
              ],
              [
                "test_gensim_word2vec",
                [
                  "word_index",
                  "vo_zhang",
                  "data",
                  "the_vector",
                  "zero_vector",
                  "the_index",
                  "data_path",
                  "test_file_path",
                  "d_vec_size",
                  "oov_vector",
                  "saved_vector",
                  "oov_word",
                  "index_vector",
                  "s_vec_size",
                  "equal_sherlocks",
                  "index_word",
                  "the_vectors_match",
                  "sherlock_vec",
                  "data_vector"
                ]
              ],
              [
                "test_glove_twitter_download",
                [
                  "glove_twitter_vectors",
                  "glove_twitter_folder",
                  "glove_twitter_files",
                  "current_dir",
                  "glove_file_path"
                ]
              ],
              [
                "test_glove_common_download",
                [
                  "glove_common_folder",
                  "glove_common_file_path",
                  "glove_common_file_name",
                  "current_dir"
                ]
              ],
              [
                "test_padded_vector",
                [
                  "embedding_matrix",
                  "vo_zhang",
                  "unk_not_equal_pad",
                  "pad_vec",
                  "another_vec",
                  "word_vector",
                  "unk_emb_vec",
                  "vo_zhang_unk_index",
                  "test_vectors",
                  "hello_emb_vec",
                  "anno_unk_vec",
                  "pad_emb_vec",
                  "hello_vec"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wordvector_methods",
                []
              ],
              [
                "test_unit_norm",
                []
              ],
              [
                "test_pre_trained",
                []
              ],
              [
                "test_gensim_word2vec",
                []
              ],
              [
                "test_glove_twitter_download",
                []
              ],
              [
                "test_glove_common_download",
                []
              ],
              [
                "test_padded_vector",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4999611590002989,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_pre_trained",
                  "test_glove_common_download",
                  0.39923409902443285
                ],
                [
                  "test_wordvector_methods",
                  "test_glove_common_download",
                  0.3152773647009614
                ],
                [
                  "test_wordvector_methods",
                  "test_padded_vector",
                  0.6494117138474212
                ],
                [
                  "test_pre_trained",
                  "test_glove_twitter_download",
                  0.4154916323132807
                ],
                [
                  "test_unit_norm",
                  "test_gensim_word2vec",
                  0.6594966632616338
                ],
                [
                  "test_gensim_word2vec",
                  "test_pre_trained",
                  0.7629771691306125
                ],
                [
                  "test_unit_norm",
                  "test_padded_vector",
                  0.5301292108536682
                ],
                [
                  "test_glove_twitter_download",
                  "test_glove_common_download",
                  0.6159092948666681
                ],
                [
                  "test_padded_vector",
                  "test_pre_trained",
                  0.3853730362482448
                ],
                [
                  "test_padded_vector",
                  "test_glove_twitter_download",
                  0.2390579795423043
                ],
                [
                  "test_wordvector_methods",
                  "test_gensim_word2vec",
                  0.7368700661151023
                ],
                [
                  "test_padded_vector",
                  "test_gensim_word2vec",
                  0.5039732911645732
                ],
                [
                  "test_padded_vector",
                  "test_glove_common_download",
                  0.2290245634408428
                ],
                [
                  "test_unit_norm",
                  "test_pre_trained",
                  0.6313083078434508
                ],
                [
                  "test_unit_norm",
                  "test_glove_twitter_download",
                  0.393336195252012
                ],
                [
                  "test_gensim_word2vec",
                  "test_glove_common_download",
                  0.43882768026716584
                ],
                [
                  "test_wordvector_methods",
                  "test_pre_trained",
                  0.6856390891197168
                ],
                [
                  "test_wordvector_methods",
                  "test_unit_norm",
                  0.7124586352597722
                ],
                [
                  "test_gensim_word2vec",
                  "test_glove_twitter_download",
                  0.4592127499685932
                ],
                [
                  "test_unit_norm",
                  "test_glove_common_download",
                  0.3875110914578274
                ],
                [
                  "test_wordvector_methods",
                  "test_glove_twitter_download",
                  0.3486645053279924
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_wordvector_methods",
                "true"
              ],
              [
                "test_unit_norm",
                "true"
              ],
              [
                "test_pre_trained",
                "true"
              ],
              [
                "test_gensim_word2vec",
                "true"
              ],
              [
                "test_glove_twitter_download",
                "true"
              ],
              [
                "test_glove_common_download",
                "true"
              ],
              [
                "test_padded_vector",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_test_neural_pooling.py",
    "testCases": [
      {
        "name": "TestNeuralPooling",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_matrix_prod",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_matrix_min",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_matrix_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_matrix_median",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_inf_nan_checker",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_matrix_avg",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_decorator",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_matrix_std",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_matrix_prod",
                  "[]"
                ],
                [
                  "test_matrix_min",
                  "[]"
                ],
                [
                  "test_matrix_max",
                  "[]"
                ],
                [
                  "test_matrix_median",
                  "[]"
                ],
                [
                  "test_inf_nan_checker",
                  "[]"
                ],
                [
                  "test_matrix_avg",
                  "[]"
                ],
                [
                  "test_check_decorator",
                  "[]"
                ],
                [
                  "test_matrix_std",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_matrix_prod",
                  "false"
                ],
                [
                  "test_matrix_min",
                  "false"
                ],
                [
                  "test_matrix_max",
                  "false"
                ],
                [
                  "test_matrix_median",
                  "false"
                ],
                [
                  "test_inf_nan_checker",
                  "false"
                ],
                [
                  "test_matrix_avg",
                  "false"
                ],
                [
                  "test_check_decorator",
                  "false"
                ],
                [
                  "test_matrix_std",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_matrix_prod",
                  "false"
                ],
                [
                  "test_matrix_min",
                  "false"
                ],
                [
                  "test_matrix_max",
                  "false"
                ],
                [
                  "test_matrix_median",
                  "false"
                ],
                [
                  "test_inf_nan_checker",
                  "false"
                ],
                [
                  "test_matrix_avg",
                  "false"
                ],
                [
                  "test_check_decorator",
                  "false"
                ],
                [
                  "test_matrix_std",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_matrix_prod",
                  "false"
                ],
                [
                  "test_matrix_min",
                  "false"
                ],
                [
                  "test_matrix_max",
                  "false"
                ],
                [
                  "test_matrix_median",
                  "false"
                ],
                [
                  "test_inf_nan_checker",
                  "true"
                ],
                [
                  "test_matrix_avg",
                  "false"
                ],
                [
                  "test_check_decorator",
                  "false"
                ],
                [
                  "test_matrix_std",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_matrix_prod",
                  "false"
                ],
                [
                  "test_matrix_min",
                  "false"
                ],
                [
                  "test_matrix_max",
                  "false"
                ],
                [
                  "test_matrix_median",
                  "false"
                ],
                [
                  "test_inf_nan_checker",
                  "false"
                ],
                [
                  "test_matrix_avg",
                  "false"
                ],
                [
                  "test_check_decorator",
                  "false"
                ],
                [
                  "test_matrix_std",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                "false"
              ],
              [
                "test_matrix_min",
                "false"
              ],
              [
                "test_matrix_max",
                "false"
              ],
              [
                "test_matrix_median",
                "false"
              ],
              [
                "test_inf_nan_checker",
                "false"
              ],
              [
                "test_matrix_avg",
                "false"
              ],
              [
                "test_check_decorator",
                "false"
              ],
              [
                "test_matrix_std",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                "false"
              ],
              [
                "test_matrix_min",
                "false"
              ],
              [
                "test_matrix_max",
                "false"
              ],
              [
                "test_matrix_median",
                "false"
              ],
              [
                "test_inf_nan_checker",
                "false"
              ],
              [
                "test_matrix_avg",
                "false"
              ],
              [
                "test_check_decorator",
                "false"
              ],
              [
                "test_matrix_std",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                []
              ],
              [
                "test_matrix_min",
                []
              ],
              [
                "test_matrix_max",
                []
              ],
              [
                "test_matrix_median",
                []
              ],
              [
                "test_inf_nan_checker",
                []
              ],
              [
                "test_matrix_avg",
                []
              ],
              [
                "test_check_decorator",
                []
              ],
              [
                "test_matrix_std",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                "false"
              ],
              [
                "test_matrix_min",
                "false"
              ],
              [
                "test_matrix_max",
                "false"
              ],
              [
                "test_matrix_median",
                "false"
              ],
              [
                "test_inf_nan_checker",
                "false"
              ],
              [
                "test_matrix_avg",
                "false"
              ],
              [
                "test_check_decorator",
                "false"
              ],
              [
                "test_matrix_std",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                "false"
              ],
              [
                "test_matrix_min",
                "false"
              ],
              [
                "test_matrix_max",
                "false"
              ],
              [
                "test_matrix_median",
                "false"
              ],
              [
                "test_inf_nan_checker",
                "false"
              ],
              [
                "test_matrix_avg",
                "false"
              ],
              [
                "test_check_decorator",
                "false"
              ],
              [
                "test_matrix_std",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_matrix_prod",
                  "0"
                ],
                [
                  "test_matrix_min",
                  "0"
                ],
                [
                  "test_matrix_max",
                  "0"
                ],
                [
                  "test_matrix_median",
                  "0"
                ],
                [
                  "test_inf_nan_checker",
                  "0"
                ],
                [
                  "test_matrix_avg",
                  "0"
                ],
                [
                  "test_check_decorator",
                  "0"
                ],
                [
                  "test_matrix_std",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_matrix_prod",
                  "0"
                ],
                [
                  "test_matrix_min",
                  "0"
                ],
                [
                  "test_matrix_max",
                  "0"
                ],
                [
                  "test_matrix_median",
                  "0"
                ],
                [
                  "test_inf_nan_checker",
                  "0"
                ],
                [
                  "test_matrix_avg",
                  "0"
                ],
                [
                  "test_check_decorator",
                  "0"
                ],
                [
                  "test_matrix_std",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                "false"
              ],
              [
                "test_matrix_min",
                "false"
              ],
              [
                "test_matrix_max",
                "false"
              ],
              [
                "test_matrix_median",
                "false"
              ],
              [
                "test_inf_nan_checker",
                "false"
              ],
              [
                "test_matrix_avg",
                "false"
              ],
              [
                "test_check_decorator",
                "false"
              ],
              [
                "test_matrix_std",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                "false"
              ],
              [
                "test_matrix_min",
                "false"
              ],
              [
                "test_matrix_max",
                "false"
              ],
              [
                "test_matrix_median",
                "false"
              ],
              [
                "test_inf_nan_checker",
                "false"
              ],
              [
                "test_matrix_avg",
                "false"
              ],
              [
                "test_check_decorator",
                "false"
              ],
              [
                "test_matrix_std",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                "3"
              ],
              [
                "test_matrix_min",
                "3"
              ],
              [
                "test_matrix_max",
                "3"
              ],
              [
                "test_matrix_median",
                "3"
              ],
              [
                "test_inf_nan_checker",
                "11"
              ],
              [
                "test_matrix_avg",
                "3"
              ],
              [
                "test_check_decorator",
                "5"
              ],
              [
                "test_matrix_std",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_matrix_prod",
                [
                  "zero_array",
                  "std_corr",
                  "num_array",
                  "zero_out",
                  "std_array",
                  "num_out",
                  "num_cor",
                  "std_out",
                  "zero_corr"
                ]
              ],
              [
                "test_matrix_min",
                [
                  "minus_cor",
                  "num_out",
                  "float_out",
                  "minus_out",
                  "num_cor",
                  "float_cor"
                ]
              ],
              [
                "test_matrix_max",
                [
                  "minus_cor",
                  "num_out",
                  "float_out",
                  "minus_out",
                  "num_cor",
                  "float_cor"
                ]
              ],
              [
                "test_matrix_median",
                [
                  "minus_cor",
                  "float_med_cor",
                  "num_out",
                  "float_out",
                  "minus_out",
                  "num_cor"
                ]
              ],
              [
                "test_inf_nan_checker",
                [
                  "valid_zero_matrix",
                  "float_64_info",
                  "test_result",
                  "higher_than_values",
                  "nan_values",
                  "valid_values",
                  "float_32_info",
                  "lower_than_values",
                  "test_zero_matrix",
                  "the_same",
                  "higher_and_lower",
                  "error_zero_matrix"
                ]
              ],
              [
                "test_matrix_avg",
                [
                  "minus_cor",
                  "num_out",
                  "float_out",
                  "minus_out",
                  "num_cor",
                  "float_cor"
                ]
              ],
              [
                "test_check_decorator",
                [
                  "vector_2d",
                  "test_array",
                  "vector_max",
                  "test_vec_max"
                ]
              ],
              [
                "test_matrix_std",
                [
                  "std_corr",
                  "num_array",
                  "std_array",
                  "num_out",
                  "num_cor",
                  "std_out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_matrix_prod",
                []
              ],
              [
                "test_matrix_min",
                []
              ],
              [
                "test_matrix_max",
                []
              ],
              [
                "test_matrix_median",
                []
              ],
              [
                "test_inf_nan_checker",
                []
              ],
              [
                "test_matrix_avg",
                []
              ],
              [
                "test_check_decorator",
                []
              ],
              [
                "test_matrix_std",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8021869174823263,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_inf_nan_checker",
                  "test_matrix_prod",
                  0.6569187571808796
                ],
                [
                  "test_matrix_median",
                  "test_matrix_prod",
                  0.8592213024518542
                ],
                [
                  "test_inf_nan_checker",
                  "test_matrix_max",
                  0.6192475371140643
                ],
                [
                  "test_inf_nan_checker",
                  "test_matrix_median",
                  0.6020911556358596
                ],
                [
                  "test_matrix_std",
                  "test_matrix_prod",
                  0.9705139458880159
                ],
                [
                  "test_matrix_avg",
                  "test_matrix_prod",
                  0.8621109314787316
                ],
                [
                  "test_matrix_max",
                  "test_matrix_avg",
                  0.9853108524700518
                ],
                [
                  "test_matrix_max",
                  "test_matrix_prod",
                  0.8642636000367807
                ],
                [
                  "test_matrix_median",
                  "test_matrix_std",
                  0.8657252303087319
                ],
                [
                  "test_matrix_min",
                  "test_matrix_prod",
                  0.8610568783876291
                ],
                [
                  "test_matrix_min",
                  "test_matrix_max",
                  0.946333094798075
                ],
                [
                  "test_matrix_max",
                  "test_matrix_std",
                  0.8767728321101457
                ],
                [
                  "test_check_decorator",
                  "test_matrix_prod",
                  0.7919376754209936
                ],
                [
                  "test_matrix_avg",
                  "test_matrix_median",
                  0.9692402847570607
                ],
                [
                  "test_matrix_avg",
                  "test_matrix_std",
                  0.8675182709513449
                ],
                [
                  "test_matrix_max",
                  "test_matrix_median",
                  0.9690805948893889
                ],
                [
                  "test_check_decorator",
                  "test_matrix_median",
                  0.6809573277482193
                ],
                [
                  "test_check_decorator",
                  "test_matrix_max",
                  0.6824973543209223
                ],
                [
                  "test_matrix_min",
                  "test_matrix_avg",
                  0.9486999065062892
                ],
                [
                  "test_inf_nan_checker",
                  "test_matrix_min",
                  0.6051505567272427
                ],
                [
                  "test_check_decorator",
                  "test_matrix_avg",
                  0.6666130854991866
                ],
                [
                  "test_check_decorator",
                  "test_matrix_std",
                  0.793291378484806
                ],
                [
                  "test_inf_nan_checker",
                  "test_matrix_avg",
                  0.599742046441764
                ],
                [
                  "test_matrix_min",
                  "test_matrix_median",
                  0.9437839036686031
                ],
                [
                  "test_matrix_min",
                  "test_matrix_std",
                  0.8700302774132745
                ],
                [
                  "test_check_decorator",
                  "test_matrix_min",
                  0.7007700941246425
                ],
                [
                  "test_inf_nan_checker",
                  "test_check_decorator",
                  0.7423169751860241
                ],
                [
                  "test_inf_nan_checker",
                  "test_matrix_std",
                  0.660037839504554
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_matrix_prod",
                "true"
              ],
              [
                "test_matrix_min",
                "true"
              ],
              [
                "test_matrix_max",
                "true"
              ],
              [
                "test_matrix_median",
                "true"
              ],
              [
                "test_inf_nan_checker",
                "true"
              ],
              [
                "test_matrix_avg",
                "true"
              ],
              [
                "test_check_decorator",
                "true"
              ],
              [
                "test_matrix_std",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_dependency_tokens.py",
    "testCases": [
      {
        "name": "TestDependencyTokens",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_n_relations",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_connected_target_span",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_n_relations",
                  "[]"
                ],
                [
                  "test_connected_target_span",
                  "[]"
                ],
                [
                  "test_init",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_n_relations",
                  "false"
                ],
                [
                  "test_connected_target_span",
                  "false"
                ],
                [
                  "test_init",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_n_relations",
                  "false"
                ],
                [
                  "test_connected_target_span",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_n_relations",
                  "true"
                ],
                [
                  "test_connected_target_span",
                  "true"
                ],
                [
                  "test_init",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_n_relations",
                  "false"
                ],
                [
                  "test_connected_target_span",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                "false"
              ],
              [
                "test_connected_target_span",
                "false"
              ],
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                "false"
              ],
              [
                "test_connected_target_span",
                "false"
              ],
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                []
              ],
              [
                "test_connected_target_span",
                []
              ],
              [
                "test_init",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                "false"
              ],
              [
                "test_connected_target_span",
                "false"
              ],
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                "false"
              ],
              [
                "test_connected_target_span",
                "false"
              ],
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_n_relations",
                  "0"
                ],
                [
                  "test_connected_target_span",
                  "0"
                ],
                [
                  "test_init",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_n_relations",
                  "0"
                ],
                [
                  "test_connected_target_span",
                  "0"
                ],
                [
                  "test_init",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                "false"
              ],
              [
                "test_connected_target_span",
                "false"
              ],
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                "false"
              ],
              [
                "test_connected_target_span",
                "false"
              ],
              [
                "test_init",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                "21"
              ],
              [
                "test_connected_target_span",
                "7"
              ],
              [
                "test_init",
                "18"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_get_n_relations",
                [
                  "valid_neg_3",
                  "test_comp_3",
                  "valid_neg_2",
                  "valid_neg_4",
                  "test_neg_4",
                  "test_neg_3",
                  "test_neg_2",
                  "test_neg_1",
                  "test_2_4",
                  "test_2_7",
                  "valid_comp_3",
                  "connected_words",
                  "test_1_2",
                  "test_comp_1",
                  "valid_comp_2",
                  "valid_comp_1",
                  "test_comp_2",
                  "valid_1",
                  "valid_2",
                  "token",
                  "test_2",
                  "test_1",
                  "dep_token",
                  "valid_1_2",
                  "relations",
                  "valid_2_4",
                  "valid_neg_1",
                  "valid_2_7"
                ]
              ],
              [
                "test_connected_target_span",
                [
                  "valid_targ_span",
                  "test_targ_span",
                  "dep_token",
                  "test_con_text",
                  "relations",
                  "connected_words",
                  "token",
                  "valid_con_text"
                ]
              ],
              [
                "test_init",
                [
                  "has_key",
                  "test_token",
                  "relations",
                  "test_value",
                  "connected_words",
                  "token"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_n_relations",
                []
              ],
              [
                "test_connected_target_span",
                []
              ],
              [
                "test_init",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5364846777245849,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_init",
                  "test_get_n_relations",
                  0.683827778525123
                ],
                [
                  "test_get_n_relations",
                  "test_connected_target_span",
                  0.4488849440140574
                ],
                [
                  "test_init",
                  "test_connected_target_span",
                  0.47674131063457426
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_get_n_relations",
                "false"
              ],
              [
                "test_connected_target_span",
                "false"
              ],
              [
                "test_init",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_dependency_parsers.py",
    "testCases": [
      {
        "name": "TestDependencyParsers",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_tweebo",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_tweebo",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_tweebo",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_tweebo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_tweebo",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_tweebo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_tweebo",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_tweebo",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_tweebo",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_tweebo",
                [
                  "rel_correct_con",
                  "test_words",
                  "valid_con_words",
                  "valid_words",
                  "rel_correct_deps",
                  "test_dep",
                  "test_tokens_2",
                  "test_tokens_1",
                  "valid_token",
                  "test_deps",
                  "valid_dep",
                  "test_sentences",
                  "has_key",
                  "test_tokens",
                  "test_connected_words_2",
                  "rel_correct_tokens",
                  "test_connected_words_1",
                  "test_token",
                  "test_dep_1",
                  "test_con_words",
                  "test_dep_2",
                  "test_connected_words",
                  "results"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_tweebo",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_tweebo",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_syntactic_contexts.py",
    "testCases": [
      {
        "name": "TestTarget",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_dependency_context",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_dependency_relation_context",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_context",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_target_normlisation",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_dependency_context",
                  "[]"
                ],
                [
                  "test_dependency_relation_context",
                  "[]"
                ],
                [
                  "test_context",
                  "[]"
                ],
                [
                  "test_target_normlisation",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_dependency_context",
                  "true"
                ],
                [
                  "test_dependency_relation_context",
                  "true"
                ],
                [
                  "test_context",
                  "true"
                ],
                [
                  "test_target_normlisation",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_dependency_context",
                  "true"
                ],
                [
                  "test_dependency_relation_context",
                  "true"
                ],
                [
                  "test_context",
                  "false"
                ],
                [
                  "test_target_normlisation",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_dependency_context",
                  "true"
                ],
                [
                  "test_dependency_relation_context",
                  "true"
                ],
                [
                  "test_context",
                  "false"
                ],
                [
                  "test_target_normlisation",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_dependency_context",
                  "false"
                ],
                [
                  "test_dependency_relation_context",
                  "false"
                ],
                [
                  "test_context",
                  "false"
                ],
                [
                  "test_target_normlisation",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "false"
              ],
              [
                "test_dependency_relation_context",
                "false"
              ],
              [
                "test_context",
                "false"
              ],
              [
                "test_target_normlisation",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "false"
              ],
              [
                "test_dependency_relation_context",
                "false"
              ],
              [
                "test_context",
                "false"
              ],
              [
                "test_target_normlisation",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                []
              ],
              [
                "test_dependency_relation_context",
                []
              ],
              [
                "test_context",
                []
              ],
              [
                "test_target_normlisation",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "false"
              ],
              [
                "test_dependency_relation_context",
                "false"
              ],
              [
                "test_context",
                "false"
              ],
              [
                "test_target_normlisation",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "false"
              ],
              [
                "test_dependency_relation_context",
                "false"
              ],
              [
                "test_context",
                "false"
              ],
              [
                "test_target_normlisation",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_dependency_context",
                  "0"
                ],
                [
                  "test_dependency_relation_context",
                  "0"
                ],
                [
                  "test_context",
                  "0"
                ],
                [
                  "test_target_normlisation",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_dependency_context",
                  "0"
                ],
                [
                  "test_dependency_relation_context",
                  "0"
                ],
                [
                  "test_context",
                  "0"
                ],
                [
                  "test_target_normlisation",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "false"
              ],
              [
                "test_dependency_relation_context",
                "false"
              ],
              [
                "test_context",
                "false"
              ],
              [
                "test_target_normlisation",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "false"
              ],
              [
                "test_dependency_relation_context",
                "false"
              ],
              [
                "test_context",
                "false"
              ],
              [
                "test_target_normlisation",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "6"
              ],
              [
                "test_dependency_relation_context",
                "4"
              ],
              [
                "test_context",
                "1"
              ],
              [
                "test_target_normlisation",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                [
                  "test_dict",
                  "test_result",
                  "valid_results",
                  "test_values",
                  "test_results"
                ]
              ],
              [
                "test_dependency_relation_context",
                [
                  "test_result",
                  "valid_results",
                  "test_values",
                  "test_results"
                ]
              ],
              [
                "test_context",
                [
                  "valid_full_results",
                  "valid_left_results",
                  "test_result",
                  "test_target_results",
                  "test_full_results",
                  "test_values",
                  "test_left_results",
                  "test_right_results",
                  "valid_target_results",
                  "valid_right_results"
                ]
              ],
              [
                "test_target_normlisation",
                [
                  "test_result",
                  "valid_results",
                  "test_values",
                  "valid_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                []
              ],
              [
                "test_dependency_relation_context",
                []
              ],
              [
                "test_context",
                []
              ],
              [
                "test_target_normlisation",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7130784618817186,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_target_normlisation",
                  "test_dependency_relation_context",
                  0.6502496505689558
                ],
                [
                  "test_dependency_relation_context",
                  "test_context",
                  0.7222149185321713
                ],
                [
                  "test_target_normlisation",
                  "test_dependency_context",
                  0.8502232233968258
                ],
                [
                  "test_target_normlisation",
                  "test_context",
                  0.7148577384905611
                ],
                [
                  "test_dependency_context",
                  "test_context",
                  0.6908726120221254
                ],
                [
                  "test_dependency_relation_context",
                  "test_dependency_context",
                  0.6500526282796725
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_dependency_context",
                "false"
              ],
              [
                "test_dependency_relation_context",
                "false"
              ],
              [
                "test_context",
                "false"
              ],
              [
                "test_target_normlisation",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  }
]