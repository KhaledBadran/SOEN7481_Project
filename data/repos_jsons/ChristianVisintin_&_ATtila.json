[
  {
    "name": "tests_\u0026_test_esk.py",
    "testCases": [
      {
        "name": "TestEsk",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_esks_to_string",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "tests_setters_getters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_esks_to_string",
                  "[]"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "[]"
                ],
                [
                  "tests_setters_getters",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_esks_to_string",
                  "false"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "false"
                ],
                [
                  "tests_setters_getters",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_esks_to_string",
                  "false"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "false"
                ],
                [
                  "tests_setters_getters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_esks_to_string",
                  "false"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "false"
                ],
                [
                  "tests_setters_getters",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_esks_to_string",
                  "false"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "false"
                ],
                [
                  "tests_setters_getters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                "false"
              ],
              [
                "tests_esks_to_eskvalue",
                "false"
              ],
              [
                "tests_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                "false"
              ],
              [
                "tests_esks_to_eskvalue",
                "false"
              ],
              [
                "tests_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                []
              ],
              [
                "tests_esks_to_eskvalue",
                []
              ],
              [
                "tests_setters_getters",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                "false"
              ],
              [
                "tests_esks_to_eskvalue",
                "false"
              ],
              [
                "tests_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_esks_to_string",
                "false"
              ],
              [
                "tests_esks_to_eskvalue",
                "false"
              ],
              [
                "tests_setters_getters",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_esks_to_string",
                  "0"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "0"
                ],
                [
                  "tests_setters_getters",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_esks_to_string",
                  "0"
                ],
                [
                  "tests_esks_to_eskvalue",
                  "0"
                ],
                [
                  "tests_setters_getters",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                "false"
              ],
              [
                "tests_esks_to_eskvalue",
                "false"
              ],
              [
                "tests_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                "false"
              ],
              [
                "tests_esks_to_eskvalue",
                "false"
              ],
              [
                "tests_setters_getters",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                "13"
              ],
              [
                "tests_esks_to_eskvalue",
                "38"
              ],
              [
                "tests_setters_getters",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                []
              ],
              [
                "tests_esks_to_eskvalue",
                []
              ],
              [
                "tests_setters_getters",
                [
                  "esk"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_esks_to_string",
                []
              ],
              [
                "tests_esks_to_eskvalue",
                []
              ],
              [
                "tests_setters_getters",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.39225228253479355,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "tests_esks_to_eskvalue",
                  "tests_setters_getters",
                  0.4553696854854511
                ],
                [
                  "test_esks_to_string",
                  "tests_setters_getters",
                  0.22659031539382338
                ],
                [
                  "test_esks_to_string",
                  "tests_esks_to_eskvalue",
                  0.4947968467251062
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_esks_to_string",
                "false"
              ],
              [
                "tests_esks_to_eskvalue",
                "true"
              ],
              [
                "tests_setters_getters",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_atre.py",
    "testCases": [
      {
        "name": "TestATRE",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_reconfigure_communicator",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_set_esks",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_parse_script",
                  "[]"
                ],
                [
                  "test_session_reset",
                  "[]"
                ],
                [
                  "test_add_command",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_write",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_serial",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_exceptions",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_exec_step",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_session_key",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_configure_communicator",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_exec",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_run",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fail_parse",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_reconfigure_communicator",
                  "[]"
                ],
                [
                  "test_set_esks",
                  "[]"
                ],
                [
                  "test_parse_script",
                  "[]"
                ],
                [
                  "test_session_reset",
                  "[]"
                ],
                [
                  "test_add_command",
                  "[]"
                ],
                [
                  "test_write",
                  "[]"
                ],
                [
                  "test_serial",
                  "[]"
                ],
                [
                  "test_exceptions",
                  "[]"
                ],
                [
                  "test_exec_step",
                  "[]"
                ],
                [
                  "test_session_key",
                  "[]"
                ],
                [
                  "test_configure_communicator",
                  "[]"
                ],
                [
                  "test_exec",
                  "[]"
                ],
                [
                  "test_run",
                  "[]"
                ],
                [
                  "test_fail_parse",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_reconfigure_communicator",
                  "false"
                ],
                [
                  "test_set_esks",
                  "false"
                ],
                [
                  "test_parse_script",
                  "false"
                ],
                [
                  "test_session_reset",
                  "false"
                ],
                [
                  "test_add_command",
                  "false"
                ],
                [
                  "test_write",
                  "false"
                ],
                [
                  "test_serial",
                  "false"
                ],
                [
                  "test_exceptions",
                  "false"
                ],
                [
                  "test_exec_step",
                  "true"
                ],
                [
                  "test_session_key",
                  "false"
                ],
                [
                  "test_configure_communicator",
                  "false"
                ],
                [
                  "test_exec",
                  "false"
                ],
                [
                  "test_run",
                  "false"
                ],
                [
                  "test_fail_parse",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_reconfigure_communicator",
                  "false"
                ],
                [
                  "test_set_esks",
                  "false"
                ],
                [
                  "test_parse_script",
                  "false"
                ],
                [
                  "test_session_reset",
                  "false"
                ],
                [
                  "test_add_command",
                  "false"
                ],
                [
                  "test_write",
                  "false"
                ],
                [
                  "test_serial",
                  "false"
                ],
                [
                  "test_exceptions",
                  "false"
                ],
                [
                  "test_exec_step",
                  "false"
                ],
                [
                  "test_session_key",
                  "false"
                ],
                [
                  "test_configure_communicator",
                  "false"
                ],
                [
                  "test_exec",
                  "false"
                ],
                [
                  "test_run",
                  "false"
                ],
                [
                  "test_fail_parse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_reconfigure_communicator",
                  "false"
                ],
                [
                  "test_set_esks",
                  "false"
                ],
                [
                  "test_parse_script",
                  "false"
                ],
                [
                  "test_session_reset",
                  "false"
                ],
                [
                  "test_add_command",
                  "false"
                ],
                [
                  "test_write",
                  "false"
                ],
                [
                  "test_serial",
                  "true"
                ],
                [
                  "test_exceptions",
                  "true"
                ],
                [
                  "test_exec_step",
                  "true"
                ],
                [
                  "test_session_key",
                  "false"
                ],
                [
                  "test_configure_communicator",
                  "false"
                ],
                [
                  "test_exec",
                  "true"
                ],
                [
                  "test_run",
                  "false"
                ],
                [
                  "test_fail_parse",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_reconfigure_communicator",
                  "false"
                ],
                [
                  "test_set_esks",
                  "false"
                ],
                [
                  "test_parse_script",
                  "false"
                ],
                [
                  "test_session_reset",
                  "false"
                ],
                [
                  "test_add_command",
                  "false"
                ],
                [
                  "test_write",
                  "false"
                ],
                [
                  "test_serial",
                  "false"
                ],
                [
                  "test_exceptions",
                  "false"
                ],
                [
                  "test_exec_step",
                  "false"
                ],
                [
                  "test_session_key",
                  "false"
                ],
                [
                  "test_configure_communicator",
                  "false"
                ],
                [
                  "test_exec",
                  "false"
                ],
                [
                  "test_run",
                  "false"
                ],
                [
                  "test_fail_parse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_reconfigure_communicator",
                "false"
              ],
              [
                "test_set_esks",
                "false"
              ],
              [
                "test_parse_script",
                "false"
              ],
              [
                "test_session_reset",
                "false"
              ],
              [
                "test_add_command",
                "false"
              ],
              [
                "test_write",
                "false"
              ],
              [
                "test_serial",
                "false"
              ],
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_exec_step",
                "false"
              ],
              [
                "test_session_key",
                "false"
              ],
              [
                "test_configure_communicator",
                "false"
              ],
              [
                "test_exec",
                "false"
              ],
              [
                "test_run",
                "false"
              ],
              [
                "test_fail_parse",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_reconfigure_communicator",
                "false"
              ],
              [
                "test_set_esks",
                "false"
              ],
              [
                "test_parse_script",
                "true"
              ],
              [
                "test_session_reset",
                "false"
              ],
              [
                "test_add_command",
                "false"
              ],
              [
                "test_write",
                "false"
              ],
              [
                "test_serial",
                "false"
              ],
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_exec_step",
                "true"
              ],
              [
                "test_session_key",
                "false"
              ],
              [
                "test_configure_communicator",
                "false"
              ],
              [
                "test_exec",
                "false"
              ],
              [
                "test_run",
                "true"
              ],
              [
                "test_fail_parse",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_reconfigure_communicator",
                []
              ],
              [
                "test_set_esks",
                []
              ],
              [
                "test_parse_script",
                []
              ],
              [
                "test_session_reset",
                []
              ],
              [
                "test_add_command",
                []
              ],
              [
                "test_write",
                []
              ],
              [
                "test_serial",
                []
              ],
              [
                "test_exceptions",
                []
              ],
              [
                "test_exec_step",
                []
              ],
              [
                "test_session_key",
                []
              ],
              [
                "test_configure_communicator",
                []
              ],
              [
                "test_exec",
                []
              ],
              [
                "test_run",
                []
              ],
              [
                "test_fail_parse",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_reconfigure_communicator",
                "false"
              ],
              [
                "test_set_esks",
                "false"
              ],
              [
                "test_parse_script",
                "false"
              ],
              [
                "test_session_reset",
                "false"
              ],
              [
                "test_add_command",
                "false"
              ],
              [
                "test_write",
                "false"
              ],
              [
                "test_serial",
                "false"
              ],
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_exec_step",
                "false"
              ],
              [
                "test_session_key",
                "false"
              ],
              [
                "test_configure_communicator",
                "false"
              ],
              [
                "test_exec",
                "false"
              ],
              [
                "test_run",
                "false"
              ],
              [
                "test_fail_parse",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_reconfigure_communicator",
                "false"
              ],
              [
                "test_set_esks",
                "false"
              ],
              [
                "test_parse_script",
                "false"
              ],
              [
                "test_session_reset",
                "false"
              ],
              [
                "test_add_command",
                "false"
              ],
              [
                "test_write",
                "false"
              ],
              [
                "test_serial",
                "false"
              ],
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_exec_step",
                "false"
              ],
              [
                "test_session_key",
                "false"
              ],
              [
                "test_configure_communicator",
                "true"
              ],
              [
                "test_exec",
                "false"
              ],
              [
                "test_run",
                "false"
              ],
              [
                "test_fail_parse",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_reconfigure_communicator",
                  "0"
                ],
                [
                  "test_set_esks",
                  "0"
                ],
                [
                  "test_parse_script",
                  "0"
                ],
                [
                  "test_session_reset",
                  "0"
                ],
                [
                  "test_add_command",
                  "0"
                ],
                [
                  "test_write",
                  "0"
                ],
                [
                  "test_serial",
                  "0"
                ],
                [
                  "test_exceptions",
                  "0"
                ],
                [
                  "test_exec_step",
                  "0"
                ],
                [
                  "test_session_key",
                  "0"
                ],
                [
                  "test_configure_communicator",
                  "0"
                ],
                [
                  "test_exec",
                  "0"
                ],
                [
                  "test_run",
                  "0"
                ],
                [
                  "test_fail_parse",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_reconfigure_communicator",
                  "0"
                ],
                [
                  "test_set_esks",
                  "0"
                ],
                [
                  "test_parse_script",
                  "0"
                ],
                [
                  "test_session_reset",
                  "0"
                ],
                [
                  "test_add_command",
                  "0"
                ],
                [
                  "test_write",
                  "0"
                ],
                [
                  "test_serial",
                  "0"
                ],
                [
                  "test_exceptions",
                  "0"
                ],
                [
                  "test_exec_step",
                  "0"
                ],
                [
                  "test_session_key",
                  "0"
                ],
                [
                  "test_configure_communicator",
                  "0"
                ],
                [
                  "test_exec",
                  "0"
                ],
                [
                  "test_run",
                  "0"
                ],
                [
                  "test_fail_parse",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_reconfigure_communicator",
                "false"
              ],
              [
                "test_set_esks",
                "false"
              ],
              [
                "test_parse_script",
                "false"
              ],
              [
                "test_session_reset",
                "false"
              ],
              [
                "test_add_command",
                "false"
              ],
              [
                "test_write",
                "false"
              ],
              [
                "test_serial",
                "false"
              ],
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_exec_step",
                "false"
              ],
              [
                "test_session_key",
                "false"
              ],
              [
                "test_configure_communicator",
                "false"
              ],
              [
                "test_exec",
                "false"
              ],
              [
                "test_run",
                "false"
              ],
              [
                "test_fail_parse",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_reconfigure_communicator",
                "false"
              ],
              [
                "test_set_esks",
                "false"
              ],
              [
                "test_parse_script",
                "false"
              ],
              [
                "test_session_reset",
                "false"
              ],
              [
                "test_add_command",
                "false"
              ],
              [
                "test_write",
                "false"
              ],
              [
                "test_serial",
                "false"
              ],
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_exec_step",
                "false"
              ],
              [
                "test_session_key",
                "false"
              ],
              [
                "test_configure_communicator",
                "false"
              ],
              [
                "test_exec",
                "false"
              ],
              [
                "test_run",
                "false"
              ],
              [
                "test_fail_parse",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_reconfigure_communicator",
                "1"
              ],
              [
                "test_set_esks",
                "14"
              ],
              [
                "test_parse_script",
                "0"
              ],
              [
                "test_session_reset",
                "0"
              ],
              [
                "test_add_command",
                "1"
              ],
              [
                "test_write",
                "2"
              ],
              [
                "test_serial",
                "2"
              ],
              [
                "test_exceptions",
                "10"
              ],
              [
                "test_exec_step",
                "4"
              ],
              [
                "test_session_key",
                "1"
              ],
              [
                "test_configure_communicator",
                "6"
              ],
              [
                "test_exec",
                "4"
              ],
              [
                "test_run",
                "3"
              ],
              [
                "test_fail_parse",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_reconfigure_communicator",
                []
              ],
              [
                "test_set_esks",
                [
                  "tempfile",
                  "esks",
                  "new_atre",
                  "esk"
                ]
              ],
              [
                "test_parse_script",
                []
              ],
              [
                "test_session_reset",
                [
                  "cmds",
                  "cmd"
                ]
              ],
              [
                "test_add_command",
                [
                  "cmd"
                ]
              ],
              [
                "test_write",
                [
                  "tempfile"
                ]
              ],
              [
                "test_serial",
                []
              ],
              [
                "test_exceptions",
                [
                  "msg",
                  "exc"
                ]
              ],
              [
                "test_exec_step",
                [
                  "res"
                ]
              ],
              [
                "test_session_key",
                []
              ],
              [
                "test_configure_communicator",
                []
              ],
              [
                "test_exec",
                []
              ],
              [
                "test_run",
                []
              ],
              [
                "test_fail_parse",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_reconfigure_communicator",
                []
              ],
              [
                "test_set_esks",
                []
              ],
              [
                "test_parse_script",
                []
              ],
              [
                "test_session_reset",
                []
              ],
              [
                "test_add_command",
                []
              ],
              [
                "test_write",
                []
              ],
              [
                "test_serial",
                []
              ],
              [
                "test_exceptions",
                []
              ],
              [
                "test_exec_step",
                []
              ],
              [
                "test_session_key",
                []
              ],
              [
                "test_configure_communicator",
                []
              ],
              [
                "test_exec",
                []
              ],
              [
                "test_run",
                []
              ],
              [
                "test_fail_parse",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5338008122248179,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_write",
                  "test_configure_communicator",
                  0.7166991976103058
                ],
                [
                  "test_session_key",
                  "test_fail_parse",
                  0.3057803726183793
                ],
                [
                  "test_configure_communicator",
                  "test_run",
                  0.7069019291582452
                ],
                [
                  "test_parse_script",
                  "test_configure_communicator",
                  0.5245629097389468
                ],
                [
                  "test_session_key",
                  "test_serial",
                  0.3183105180528657
                ],
                [
                  "test_configure_communicator",
                  "test_exec",
                  0.6273452808679364
                ],
                [
                  "test_configure_communicator",
                  "test_session_key",
                  0.23391070075083142
                ],
                [
                  "test_configure_communicator",
                  "test_add_command",
                  0.5840136282162373
                ],
                [
                  "test_reconfigure_communicator",
                  "test_session_key",
                  0.25286086871208685
                ],
                [
                  "test_write",
                  "test_fail_parse",
                  0.6249316129346663
                ],
                [
                  "test_set_esks",
                  "test_fail_parse",
                  0.647037792727013
                ],
                [
                  "test_exec",
                  "test_add_command",
                  0.6381549471014302
                ],
                [
                  "test_reconfigure_communicator",
                  "test_run",
                  0.500033805483288
                ],
                [
                  "test_parse_script",
                  "test_fail_parse",
                  0.6880220170568244
                ],
                [
                  "test_parse_script",
                  "test_serial",
                  0.36209075189448015
                ],
                [
                  "test_write",
                  "test_serial",
                  0.5097397458976504
                ],
                [
                  "test_session_reset",
                  "test_reconfigure_communicator",
                  0.3049247893083225
                ],
                [
                  "test_set_esks",
                  "test_serial",
                  0.49683284726395777
                ],
                [
                  "test_fail_parse",
                  "test_add_command",
                  0.7287509117826718
                ],
                [
                  "test_set_esks",
                  "test_reconfigure_communicator",
                  0.5933619733118638
                ],
                [
                  "test_session_reset",
                  "test_run",
                  0.38751367983316676
                ],
                [
                  "test_session_reset",
                  "test_configure_communicator",
                  0.3453952551143047
                ],
                [
                  "test_run",
                  "test_exec_step",
                  0.9418623001798777
                ],
                [
                  "test_reconfigure_communicator",
                  "test_add_command",
                  0.4285372672044641
                ],
                [
                  "test_reconfigure_communicator",
                  "test_exec",
                  0.4973242051000774
                ],
                [
                  "test_write",
                  "test_session_key",
                  0.2929374625741901
                ],
                [
                  "test_session_reset",
                  "test_session_key",
                  0.4119532374502261
                ],
                [
                  "test_set_esks",
                  "test_add_command",
                  0.5685668761745858
                ],
                [
                  "test_session_reset",
                  "test_exec_step",
                  0.4106308805251621
                ],
                [
                  "test_set_esks",
                  "test_exec",
                  0.5944574546421849
                ],
                [
                  "test_exec",
                  "test_serial",
                  0.71348244595586
                ],
                [
                  "test_write",
                  "test_parse_script",
                  0.48029248259655655
                ],
                [
                  "test_serial",
                  "test_exceptions",
                  0.4610393497502136
                ],
                [
                  "test_session_reset",
                  "test_parse_script",
                  0.35273781075132926
                ],
                [
                  "test_write",
                  "test_exceptions",
                  0.5941339612968222
                ],
                [
                  "test_session_reset",
                  "test_exceptions",
                  0.432951803588511
                ],
                [
                  "test_run",
                  "test_exceptions",
                  0.6873858916213603
                ],
                [
                  "test_configure_communicator",
                  "test_fail_parse",
                  0.6932845269708282
                ],
                [
                  "test_parse_script",
                  "test_exec_step",
                  0.7582129501848768
                ],
                [
                  "test_write",
                  "test_exec_step",
                  0.6452112298760866
                ],
                [
                  "test_configure_communicator",
                  "test_serial",
                  0.5105570491481551
                ],
                [
                  "test_session_key",
                  "test_add_command",
                  0.2072390845763268
                ],
                [
                  "test_session_key",
                  "test_exec",
                  0.4016501132786178
                ],
                [
                  "test_set_esks",
                  "test_session_key",
                  0.2258781396626414
                ],
                [
                  "test_exec",
                  "test_fail_parse",
                  0.7153083558327196
                ],
                [
                  "test_parse_script",
                  "test_add_command",
                  0.4096682888050979
                ],
                [
                  "test_session_key",
                  "test_exec_step",
                  0.24463553976186292
                ],
                [
                  "test_parse_script",
                  "test_exec",
                  0.4271210980886246
                ],
                [
                  "test_write",
                  "test_exec",
                  0.6168840729775148
                ],
                [
                  "test_write",
                  "test_add_command",
                  0.5998858827434879
                ],
                [
                  "test_exec_step",
                  "test_exceptions",
                  0.7175356929209505
                ],
                [
                  "test_exec_step",
                  "test_serial",
                  0.6409305382572528
                ],
                [
                  "test_write",
                  "test_run",
                  0.6466442764972707
                ],
                [
                  "test_parse_script",
                  "test_run",
                  0.7166981701557099
                ],
                [
                  "test_exec",
                  "test_exceptions",
                  0.5518422618780395
                ],
                [
                  "test_session_reset",
                  "test_set_esks",
                  0.3781928986354129
                ],
                [
                  "test_reconfigure_communicator",
                  "test_fail_parse",
                  0.4979400958207051
                ],
                [
                  "test_set_esks",
                  "test_run",
                  0.6798755301403413
                ],
                [
                  "test_reconfigure_communicator",
                  "test_serial",
                  0.35414840610618475
                ],
                [
                  "test_add_command",
                  "test_exceptions",
                  0.5534226996584323
                ],
                [
                  "test_set_esks",
                  "test_write",
                  0.7170448705128466
                ],
                [
                  "test_session_reset",
                  "test_write",
                  0.43736102166411783
                ],
                [
                  "test_session_key",
                  "test_run",
                  0.2599350243648482
                ],
                [
                  "test_write",
                  "test_reconfigure_communicator",
                  0.5906041055515311
                ],
                [
                  "test_run",
                  "test_serial",
                  0.6237327016949684
                ],
                [
                  "test_session_reset",
                  "test_serial",
                  0.30994138718952297
                ],
                [
                  "test_reconfigure_communicator",
                  "test_configure_communicator",
                  0.6510379705147968
                ],
                [
                  "test_session_reset",
                  "test_fail_parse",
                  0.3819096910790977
                ],
                [
                  "test_run",
                  "test_fail_parse",
                  0.8507741100494836
                ],
                [
                  "test_fail_parse",
                  "test_serial",
                  0.6375318627615327
                ],
                [
                  "test_set_esks",
                  "test_exec_step",
                  0.6920361458401731
                ],
                [
                  "test_run",
                  "test_exec",
                  0.6733082387573073
                ],
                [
                  "test_run",
                  "test_add_command",
                  0.6989118058548808
                ],
                [
                  "test_fail_parse",
                  "test_exceptions",
                  0.6442139200803534
                ],
                [
                  "test_parse_script",
                  "test_session_key",
                  0.22750787759664506
                ],
                [
                  "test_exec",
                  "test_exec_step",
                  0.6579784083666897
                ],
                [
                  "test_session_reset",
                  "test_exec",
                  0.3682843048267415
                ],
                [
                  "test_session_reset",
                  "test_add_command",
                  0.5156862774427126
                ],
                [
                  "test_reconfigure_communicator",
                  "test_exec_step",
                  0.49613893835683387
                ],
                [
                  "test_set_esks",
                  "test_configure_communicator",
                  0.8099789318515626
                ],
                [
                  "test_reconfigure_communicator",
                  "test_parse_script",
                  0.39694209301872235
                ],
                [
                  "test_configure_communicator",
                  "test_exec_step",
                  0.7122989736008529
                ],
                [
                  "test_set_esks",
                  "test_parse_script",
                  0.5126202702256399
                ],
                [
                  "test_configure_communicator",
                  "test_exceptions",
                  0.6175882913105417
                ],
                [
                  "test_exec_step",
                  "test_fail_parse",
                  0.8514314608502938
                ],
                [
                  "test_set_esks",
                  "test_exceptions",
                  0.6180822237317952
                ],
                [
                  "test_session_key",
                  "test_exceptions",
                  0.22486497080646453
                ],
                [
                  "test_add_command",
                  "test_serial",
                  0.6010270211697736
                ],
                [
                  "test_exec_step",
                  "test_add_command",
                  0.647808356803852
                ],
                [
                  "test_reconfigure_communicator",
                  "test_exceptions",
                  0.4615657739308006
                ],
                [
                  "test_parse_script",
                  "test_exceptions",
                  0.5294910158290066
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_reconfigure_communicator",
                "false"
              ],
              [
                "test_set_esks",
                "false"
              ],
              [
                "test_parse_script",
                "false"
              ],
              [
                "test_session_reset",
                "false"
              ],
              [
                "test_add_command",
                "false"
              ],
              [
                "test_write",
                "false"
              ],
              [
                "test_serial",
                "false"
              ],
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_exec_step",
                "false"
              ],
              [
                "test_session_key",
                "false"
              ],
              [
                "test_configure_communicator",
                "true"
              ],
              [
                "test_exec",
                "false"
              ],
              [
                "test_run",
                "false"
              ],
              [
                "test_fail_parse",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 14
      }
    ]
  },
  {
    "name": "tests_\u0026_test_parser.py",
    "testCases": [
      {
        "name": "TestParser",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_file_parser",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_syntax_errors",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_file_parser",
                  "[]"
                ],
                [
                  "test_syntax_errors",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_file_parser",
                  "false"
                ],
                [
                  "test_syntax_errors",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_file_parser",
                  "false"
                ],
                [
                  "test_syntax_errors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_file_parser",
                  "false"
                ],
                [
                  "test_syntax_errors",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_file_parser",
                  "false"
                ],
                [
                  "test_syntax_errors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                "false"
              ],
              [
                "test_syntax_errors",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                "false"
              ],
              [
                "test_syntax_errors",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                []
              ],
              [
                "test_syntax_errors",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                "false"
              ],
              [
                "test_syntax_errors",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                "false"
              ],
              [
                "test_syntax_errors",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_file_parser",
                  "0"
                ],
                [
                  "test_syntax_errors",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_file_parser",
                  "0"
                ],
                [
                  "test_syntax_errors",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_file_parser",
                "true"
              ],
              [
                "test_syntax_errors",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                "false"
              ],
              [
                "test_syntax_errors",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                "1"
              ],
              [
                "test_syntax_errors",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                [
                  "script_parser"
                ]
              ],
              [
                "test_syntax_errors",
                [
                  "parser"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                []
              ],
              [
                "test_syntax_errors",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5405793110594649,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_file_parser",
                  "test_syntax_errors",
                  0.5405793110594649
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_file_parser",
                "false"
              ],
              [
                "test_syntax_errors",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_session.py",
    "testCases": [
      {
        "name": "TestSession",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_doppelganger",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_particular_cases",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone]"
                ],
                [
                  "test_session_values",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_commands_operations",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_collectables",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_doppelganger",
                  "[]"
                ],
                [
                  "test_particular_cases",
                  "[]"
                ],
                [
                  "test_session_values",
                  "[]"
                ],
                [
                  "test_commands_operations",
                  "[]"
                ],
                [
                  "test_collectables",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_doppelganger",
                  "false"
                ],
                [
                  "test_particular_cases",
                  "false"
                ],
                [
                  "test_session_values",
                  "false"
                ],
                [
                  "test_commands_operations",
                  "false"
                ],
                [
                  "test_collectables",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_doppelganger",
                  "false"
                ],
                [
                  "test_particular_cases",
                  "false"
                ],
                [
                  "test_session_values",
                  "false"
                ],
                [
                  "test_commands_operations",
                  "false"
                ],
                [
                  "test_collectables",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_doppelganger",
                  "false"
                ],
                [
                  "test_particular_cases",
                  "false"
                ],
                [
                  "test_session_values",
                  "true"
                ],
                [
                  "test_commands_operations",
                  "true"
                ],
                [
                  "test_collectables",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_doppelganger",
                  "false"
                ],
                [
                  "test_particular_cases",
                  "false"
                ],
                [
                  "test_session_values",
                  "false"
                ],
                [
                  "test_commands_operations",
                  "false"
                ],
                [
                  "test_collectables",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                "false"
              ],
              [
                "test_particular_cases",
                "false"
              ],
              [
                "test_session_values",
                "false"
              ],
              [
                "test_commands_operations",
                "false"
              ],
              [
                "test_collectables",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_doppelganger",
                "false"
              ],
              [
                "test_particular_cases",
                "false"
              ],
              [
                "test_session_values",
                "false"
              ],
              [
                "test_commands_operations",
                "false"
              ],
              [
                "test_collectables",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                []
              ],
              [
                "test_particular_cases",
                []
              ],
              [
                "test_session_values",
                []
              ],
              [
                "test_commands_operations",
                []
              ],
              [
                "test_collectables",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                "false"
              ],
              [
                "test_particular_cases",
                "false"
              ],
              [
                "test_session_values",
                "false"
              ],
              [
                "test_commands_operations",
                "false"
              ],
              [
                "test_collectables",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_doppelganger",
                "false"
              ],
              [
                "test_particular_cases",
                "false"
              ],
              [
                "test_session_values",
                "false"
              ],
              [
                "test_commands_operations",
                "false"
              ],
              [
                "test_collectables",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_doppelganger",
                  "0"
                ],
                [
                  "test_particular_cases",
                  "0"
                ],
                [
                  "test_session_values",
                  "0"
                ],
                [
                  "test_commands_operations",
                  "0"
                ],
                [
                  "test_collectables",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_doppelganger",
                  "0"
                ],
                [
                  "test_particular_cases",
                  "0"
                ],
                [
                  "test_session_values",
                  "0"
                ],
                [
                  "test_commands_operations",
                  "0"
                ],
                [
                  "test_collectables",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_doppelganger",
                "true"
              ],
              [
                "test_particular_cases",
                "false"
              ],
              [
                "test_session_values",
                "true"
              ],
              [
                "test_commands_operations",
                "false"
              ],
              [
                "test_collectables",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                "false"
              ],
              [
                "test_particular_cases",
                "false"
              ],
              [
                "test_session_values",
                "false"
              ],
              [
                "test_commands_operations",
                "false"
              ],
              [
                "test_collectables",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                "7"
              ],
              [
                "test_particular_cases",
                "2"
              ],
              [
                "test_session_values",
                "11"
              ],
              [
                "test_commands_operations",
                "11"
              ],
              [
                "test_collectables",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                [
                  "cpin_command",
                  "read_pin",
                  "session",
                  "response",
                  "cpin_enter_pin",
                  "serial_response",
                  "sim_pin",
                  "next_command"
                ]
              ],
              [
                "test_particular_cases",
                [
                  "session"
                ]
              ],
              [
                "test_session_values",
                [
                  "gsn_command",
                  "csq_command",
                  "session",
                  "response",
                  "csq_response",
                  "serial_response",
                  "command_not_replaceable",
                  "next_command",
                  "simple_command2",
                  "simple_command"
                ]
              ],
              [
                "test_commands_operations",
                [
                  "session"
                ]
              ],
              [
                "test_collectables",
                [
                  "rssi",
                  "csq_command",
                  "session",
                  "response",
                  "imei_command",
                  "imei",
                  "serial_response",
                  "next_command",
                  "ber"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                []
              ],
              [
                "test_particular_cases",
                []
              ],
              [
                "test_session_values",
                []
              ],
              [
                "test_commands_operations",
                []
              ],
              [
                "test_collectables",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6843793394350914,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_session_values",
                  "test_commands_operations",
                  0.6588504416178453
                ],
                [
                  "test_session_values",
                  "test_particular_cases",
                  0.5619484093058241
                ],
                [
                  "test_collectables",
                  "test_particular_cases",
                  0.5488098603323975
                ],
                [
                  "test_doppelganger",
                  "test_particular_cases",
                  0.5677065332261299
                ],
                [
                  "test_commands_operations",
                  "test_particular_cases",
                  0.51063612778781
                ],
                [
                  "test_session_values",
                  "test_doppelganger",
                  0.8748871627007724
                ],
                [
                  "test_commands_operations",
                  "test_collectables",
                  0.658733881952782
                ],
                [
                  "test_session_values",
                  "test_collectables",
                  0.8744361323496938
                ],
                [
                  "test_collectables",
                  "test_doppelganger",
                  0.8706022931710335
                ],
                [
                  "test_commands_operations",
                  "test_doppelganger",
                  0.7171825519066263
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_doppelganger",
                "false"
              ],
              [
                "test_particular_cases",
                "false"
              ],
              [
                "test_session_values",
                "false"
              ],
              [
                "test_commands_operations",
                "false"
              ],
              [
                "test_collectables",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_virtual.py",
    "testCases": [
      {
        "name": "TestATCommunicator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_exceptions",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_virtual_serial",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_communicator",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_exceptions",
                  "[]"
                ],
                [
                  "test_virtual_serial",
                  "[]"
                ],
                [
                  "test_communicator",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_exceptions",
                  "false"
                ],
                [
                  "test_virtual_serial",
                  "false"
                ],
                [
                  "test_communicator",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_exceptions",
                  "false"
                ],
                [
                  "test_virtual_serial",
                  "false"
                ],
                [
                  "test_communicator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_exceptions",
                  "false"
                ],
                [
                  "test_virtual_serial",
                  "false"
                ],
                [
                  "test_communicator",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_exceptions",
                  "false"
                ],
                [
                  "test_virtual_serial",
                  "false"
                ],
                [
                  "test_communicator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_virtual_serial",
                "false"
              ],
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_virtual_serial",
                "false"
              ],
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                []
              ],
              [
                "test_virtual_serial",
                []
              ],
              [
                "test_communicator",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_virtual_serial",
                "false"
              ],
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_virtual_serial",
                "true"
              ],
              [
                "test_communicator",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_exceptions",
                  "0"
                ],
                [
                  "test_virtual_serial",
                  "0"
                ],
                [
                  "test_communicator",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_exceptions",
                  "0"
                ],
                [
                  "test_virtual_serial",
                  "0"
                ],
                [
                  "test_communicator",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_virtual_serial",
                "false"
              ],
              [
                "test_communicator",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_virtual_serial",
                "false"
              ],
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                "3"
              ],
              [
                "test_virtual_serial",
                "8"
              ],
              [
                "test_communicator",
                "15"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                [
                  "msg",
                  "com",
                  "exc"
                ]
              ],
              [
                "test_virtual_serial",
                [
                  "device"
                ]
              ],
              [
                "test_communicator",
                [
                  "com",
                  "resp"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                []
              ],
              [
                "test_virtual_serial",
                []
              ],
              [
                "test_communicator",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7173825038861049,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_virtual_serial",
                  "test_exceptions",
                  0.6531591807690416
                ],
                [
                  "test_communicator",
                  "test_virtual_serial",
                  0.7268017445055768
                ],
                [
                  "test_communicator",
                  "test_exceptions",
                  0.7721865863836964
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_exceptions",
                "false"
              ],
              [
                "test_virtual_serial",
                "false"
              ],
              [
                "test_communicator",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_atcommand.py",
    "testCases": [
      {
        "name": "TestATCommands",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_at_commands",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_at_commands",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_at_commands",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_at_commands",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_at_commands",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_at_commands",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_at_commands",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_at_commands",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_at_commands",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "22"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                [
                  "response_nok",
                  "cmd4",
                  "response_ok",
                  "cmd2",
                  "cmd3",
                  "cmd",
                  "bad_doppelganger"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_atresponse.py",
    "testCases": [
      {
        "name": "TestATResponse",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_at_commands",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_at_commands",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_at_commands",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_at_commands",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_at_commands",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_at_commands",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_at_commands",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_at_commands",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_at_commands",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "10"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                [
                  "resp",
                  "cmd"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_at_commands",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_atcommunicator.py",
    "testCases": [
      {
        "name": "TestATCommunicator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_communicator",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertFalse, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_communicator",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_communicator",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_communicator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_communicator",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_communicator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_communicator",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_communicator",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_communicator",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                "19"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                [
                  "com"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_communicator",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_communicator",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]