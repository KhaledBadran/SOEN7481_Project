[
  {
    "name": "tests_\u0026_NeuNorm_\u0026_roi_test.py",
    "testCases": [
      {
        "name": "TestRoi",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_x_and_y_correctly_sorted",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_x_and_y_correctly_sorted",
                  "[]"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "[]"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "[]"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "[]"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_x_and_y_correctly_sorted",
                  "false"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "false"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_x_and_y_correctly_sorted",
                  "false"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "false"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_x_and_y_correctly_sorted",
                  "true"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "false"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_x_and_y_correctly_sorted",
                  "false"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "false"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "false"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "false"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "false"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "false"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "false"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                []
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                []
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                []
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                []
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "false"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "false"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "false"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "false"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_x_and_y_correctly_sorted",
                  "0"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "0"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "0"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "0"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_x_and_y_correctly_sorted",
                  "0"
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "0"
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "0"
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "0"
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "false"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "false"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "false"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "false"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "6"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "2"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "1"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "1"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                [
                  "_roi",
                  "y0",
                  "x0",
                  "y1",
                  "width",
                  "x1",
                  "_x0_expected",
                  "_x0_returned",
                  "_y0_returned",
                  "height",
                  "_y0_expected"
                ]
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                [
                  "y0",
                  "x0",
                  "y1",
                  "x1"
                ]
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                [
                  "_roi",
                  "_expected",
                  "_returned",
                  "y0",
                  "x0",
                  "width",
                  "height"
                ]
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                [
                  "_roi",
                  "_expected",
                  "_returned",
                  "y0",
                  "x0",
                  "y1",
                  "x1"
                ]
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                [
                  "y0",
                  "y1",
                  "x0",
                  "x1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                []
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                []
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                []
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                []
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9354754278031058,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_setting_roi_x0_y0_width_height",
                  "test_x_and_y_correctly_sorted",
                  0.9392508591991025
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  0.9827640366864275
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "test_error_raised_when_x0_or_y0_not_provided",
                  0.9210873847318471
                ],
                [
                  "test_error_raised_when_x0_or_y0_not_provided",
                  "test_x_and_y_correctly_sorted",
                  0.9471416957726028
                ],
                [
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  "test_x_and_y_correctly_sorted",
                  0.93297860364734
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  0.9162611383431071
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "test_error_raised_when_x0_or_y0_not_provided",
                  0.8988608796508706
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "test_x_and_y_correctly_sorted",
                  0.9366830534122761
                ],
                [
                  "test_setting_roi_x0_y0_width_height",
                  "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                  0.9066668556188798
                ],
                [
                  "test_setting_roi_x0_y0_x1_y1",
                  "test_setting_roi_x0_y0_width_height",
                  0.9730597709686042
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_x_and_y_correctly_sorted",
                "true"
              ],
              [
                "test_error_raised_when_x1_and_width_or_y1_and_height_not_provided",
                "false"
              ],
              [
                "test_setting_roi_x0_y0_width_height",
                "true"
              ],
              [
                "test_setting_roi_x0_y0_x1_y1",
                "true"
              ],
              [
                "test_error_raised_when_x0_or_y0_not_provided",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_NeuNorm_\u0026_export_test.py",
    "testCases": [
      {
        "name": "TestExportingPhase1",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_error_raised_if_wrong_folder",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "[PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_error_raised_if_wrong_folder",
                  "[]"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "[]"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_error_raised_if_wrong_folder",
                  "false"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "false"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_error_raised_if_wrong_folder",
                  "false"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "false"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_error_raised_if_wrong_folder",
                  "false"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "false"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_error_raised_if_wrong_folder",
                  "false"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "false"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "false"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "false"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "false"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "false"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                []
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                []
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "false"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "false"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "false"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "false"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_error_raised_if_wrong_folder",
                  "0"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "0"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_error_raised_if_wrong_folder",
                  "0"
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "0"
                ],
                [
                  "test_do_nothing_if_nothing_to_export",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "false"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "false"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "false"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "false"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "1"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "1"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                [
                  "o_norm",
                  "sample_path",
                  "ob_path"
                ]
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                [
                  "o_norm",
                  "sample_path",
                  "ob_path"
                ]
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                [
                  "o_norm",
                  "sample_path",
                  "ob_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                [
                  "self.data_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7761477908682343,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_error_raised_if_wrong_folder",
                  "test_do_nothing_if_nothing_to_export",
                  0.735082526214792
                ],
                [
                  "test_error_raised_if_data_type_is_not_valid",
                  "test_do_nothing_if_nothing_to_export",
                  0.7165896164654156
                ],
                [
                  "test_error_raised_if_wrong_folder",
                  "test_error_raised_if_data_type_is_not_valid",
                  0.8767712299244952
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_error_raised_if_wrong_folder",
                "false"
              ],
              [
                "test_error_raised_if_data_type_is_not_valid",
                "false"
              ],
              [
                "test_do_nothing_if_nothing_to_export",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestExportingPhase2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_export_works_for_fits",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_export_works_for_tif",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_export_works_for_fits",
                  "[]"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "[]"
                ],
                [
                  "test_export_works_for_tif",
                  "[]"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "[]"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_export_works_for_fits",
                  "false"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "false"
                ],
                [
                  "test_export_works_for_tif",
                  "false"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "false"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_export_works_for_fits",
                  "false"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "false"
                ],
                [
                  "test_export_works_for_tif",
                  "false"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "false"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_export_works_for_fits",
                  "false"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "false"
                ],
                [
                  "test_export_works_for_tif",
                  "false"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "true"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_export_works_for_fits",
                  "false"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "false"
                ],
                [
                  "test_export_works_for_tif",
                  "false"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "false"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                "false"
              ],
              [
                "test_export_with_manually_loaded_data",
                "false"
              ],
              [
                "test_export_works_for_tif",
                "false"
              ],
              [
                "test_export_create_the_right_file_name",
                "false"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                "false"
              ],
              [
                "test_export_with_manually_loaded_data",
                "false"
              ],
              [
                "test_export_works_for_tif",
                "false"
              ],
              [
                "test_export_create_the_right_file_name",
                "false"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                []
              ],
              [
                "test_export_with_manually_loaded_data",
                []
              ],
              [
                "test_export_works_for_tif",
                []
              ],
              [
                "test_export_create_the_right_file_name",
                []
              ],
              [
                "test_export_works_for_tiff_metadata",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                "false"
              ],
              [
                "test_export_with_manually_loaded_data",
                "false"
              ],
              [
                "test_export_works_for_tif",
                "false"
              ],
              [
                "test_export_create_the_right_file_name",
                "false"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                "false"
              ],
              [
                "test_export_with_manually_loaded_data",
                "false"
              ],
              [
                "test_export_works_for_tif",
                "false"
              ],
              [
                "test_export_create_the_right_file_name",
                "false"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_export_works_for_fits",
                  "0"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "0"
                ],
                [
                  "test_export_works_for_tif",
                  "0"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "0"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_export_works_for_fits",
                  "0"
                ],
                [
                  "test_export_with_manually_loaded_data",
                  "0"
                ],
                [
                  "test_export_works_for_tif",
                  "0"
                ],
                [
                  "test_export_create_the_right_file_name",
                  "0"
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                "false"
              ],
              [
                "test_export_with_manually_loaded_data",
                "false"
              ],
              [
                "test_export_works_for_tif",
                "false"
              ],
              [
                "test_export_create_the_right_file_name",
                "false"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                "false"
              ],
              [
                "test_export_with_manually_loaded_data",
                "false"
              ],
              [
                "test_export_works_for_tif",
                "false"
              ],
              [
                "test_export_create_the_right_file_name",
                "false"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                "1"
              ],
              [
                "test_export_with_manually_loaded_data",
                "2"
              ],
              [
                "test_export_works_for_tif",
                "1"
              ],
              [
                "test_export_create_the_right_file_name",
                "2"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                [
                  "o_norm",
                  "o_norm_2",
                  "_sample_reloaded",
                  "sample_path",
                  "_sample_0"
                ]
              ],
              [
                "test_export_with_manually_loaded_data",
                [
                  "o_norm",
                  "data",
                  "file_name",
                  "o_norm_2",
                  "_sample_reloaded",
                  "o_norm_1",
                  "sample_path",
                  "output_file",
                  "_sample_0"
                ]
              ],
              [
                "test_export_works_for_tif",
                [
                  "o_norm",
                  "o_norm_2",
                  "_sample_reloaded",
                  "sample_path",
                  "_sample_0"
                ]
              ],
              [
                "test_export_create_the_right_file_name",
                [
                  "_output_file_name_0",
                  "_expected_file_name_0",
                  "o_norm",
                  "_new_file_name",
                  "sample_path",
                  "ob_path",
                  "_file_name_0"
                ]
              ],
              [
                "test_export_works_for_tiff_metadata",
                [
                  "o_norm",
                  "o_norm_2",
                  "input_metadata",
                  "export_metadata",
                  "sample_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_export_works_for_fits",
                [
                  "self.data_path",
                  "self.export_folder"
                ]
              ],
              [
                "test_export_with_manually_loaded_data",
                [
                  "self.data_path",
                  "self.export_folder"
                ]
              ],
              [
                "test_export_works_for_tif",
                [
                  "self.data_path",
                  "self.export_folder"
                ]
              ],
              [
                "test_export_create_the_right_file_name",
                [
                  "self.data_path",
                  "self.export_folder"
                ]
              ],
              [
                "test_export_works_for_tiff_metadata",
                [
                  "self.data_path",
                  "self.export_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.82261584598296,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_export_create_the_right_file_name",
                  "test_export_works_for_tif",
                  0.759355483215148
                ],
                [
                  "test_export_create_the_right_file_name",
                  "test_export_works_for_tiff_metadata",
                  0.6182933507492906
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "test_export_works_for_fits",
                  0.7966024315860841
                ],
                [
                  "test_export_works_for_tif",
                  "test_export_works_for_fits",
                  0.9857709885307746
                ],
                [
                  "test_export_works_for_tif",
                  "test_export_with_manually_loaded_data",
                  0.9386249779514246
                ],
                [
                  "test_export_works_for_fits",
                  "test_export_with_manually_loaded_data",
                  0.9480183367553335
                ],
                [
                  "test_export_create_the_right_file_name",
                  "test_export_works_for_fits",
                  0.7741416662775346
                ],
                [
                  "test_export_works_for_tif",
                  "test_export_works_for_tiff_metadata",
                  0.8088210326069984
                ],
                [
                  "test_export_works_for_tiff_metadata",
                  "test_export_with_manually_loaded_data",
                  0.7999854311027732
                ],
                [
                  "test_export_create_the_right_file_name",
                  "test_export_with_manually_loaded_data",
                  0.7965447610542385
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_export_works_for_fits",
                "false"
              ],
              [
                "test_export_with_manually_loaded_data",
                "false"
              ],
              [
                "test_export_works_for_tif",
                "false"
              ],
              [
                "test_export_create_the_right_file_name",
                "true"
              ],
              [
                "test_export_works_for_tiff_metadata",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_NeuNorm_\u0026_loading_test.py",
    "testCases": [
      {
        "name": "TestLoading",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_loading_bad_single_files",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_loading_good_single_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_dict_initialized",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_loading_good_several_single_files",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_loading_tiff_metadata",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_loading_bad_single_files",
                  "[]"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "[]"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "[]"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "[]"
                ],
                [
                  "test_loading_good_single_file",
                  "[]"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "[]"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "[]"
                ],
                [
                  "test_dict_initialized",
                  "[]"
                ],
                [
                  "test_loading_good_several_single_files",
                  "[]"
                ],
                [
                  "test_loading_tiff_metadata",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_loading_bad_single_files",
                  "false"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "false"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "false"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "false"
                ],
                [
                  "test_loading_good_single_file",
                  "false"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "false"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "false"
                ],
                [
                  "test_dict_initialized",
                  "false"
                ],
                [
                  "test_loading_good_several_single_files",
                  "false"
                ],
                [
                  "test_loading_tiff_metadata",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_loading_bad_single_files",
                  "false"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "false"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "false"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "false"
                ],
                [
                  "test_loading_good_single_file",
                  "false"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "true"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "false"
                ],
                [
                  "test_dict_initialized",
                  "false"
                ],
                [
                  "test_loading_good_several_single_files",
                  "false"
                ],
                [
                  "test_loading_tiff_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_loading_bad_single_files",
                  "false"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "false"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "false"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "false"
                ],
                [
                  "test_loading_good_single_file",
                  "true"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "true"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "false"
                ],
                [
                  "test_dict_initialized",
                  "false"
                ],
                [
                  "test_loading_good_several_single_files",
                  "true"
                ],
                [
                  "test_loading_tiff_metadata",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_loading_bad_single_files",
                  "false"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "false"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "false"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "false"
                ],
                [
                  "test_loading_good_single_file",
                  "false"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "false"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "false"
                ],
                [
                  "test_dict_initialized",
                  "false"
                ],
                [
                  "test_loading_good_several_single_files",
                  "false"
                ],
                [
                  "test_loading_tiff_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_loading_bad_single_files",
                "false"
              ],
              [
                "test_loading_unsuported_file_format",
                "false"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "false"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "false"
              ],
              [
                "test_loading_good_single_file",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "false"
              ],
              [
                "test_loading_hdf_raise_error",
                "false"
              ],
              [
                "test_dict_initialized",
                "false"
              ],
              [
                "test_loading_good_several_single_files",
                "false"
              ],
              [
                "test_loading_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_loading_bad_single_files",
                "false"
              ],
              [
                "test_loading_unsuported_file_format",
                "false"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "false"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "false"
              ],
              [
                "test_loading_good_single_file",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "false"
              ],
              [
                "test_loading_hdf_raise_error",
                "false"
              ],
              [
                "test_dict_initialized",
                "false"
              ],
              [
                "test_loading_good_several_single_files",
                "false"
              ],
              [
                "test_loading_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_loading_bad_single_files",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_loading_unsuported_file_format",
                []
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                []
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                []
              ],
              [
                "test_loading_good_single_file",
                []
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                []
              ],
              [
                "test_loading_hdf_raise_error",
                []
              ],
              [
                "test_dict_initialized",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_loading_good_several_single_files",
                []
              ],
              [
                "test_loading_tiff_metadata",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_loading_bad_single_files",
                "false"
              ],
              [
                "test_loading_unsuported_file_format",
                "false"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "false"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "false"
              ],
              [
                "test_loading_good_single_file",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "false"
              ],
              [
                "test_loading_hdf_raise_error",
                "false"
              ],
              [
                "test_dict_initialized",
                "false"
              ],
              [
                "test_loading_good_several_single_files",
                "false"
              ],
              [
                "test_loading_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_loading_bad_single_files",
                "false"
              ],
              [
                "test_loading_unsuported_file_format",
                "false"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "false"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "false"
              ],
              [
                "test_loading_good_single_file",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "false"
              ],
              [
                "test_loading_hdf_raise_error",
                "false"
              ],
              [
                "test_dict_initialized",
                "false"
              ],
              [
                "test_loading_good_several_single_files",
                "false"
              ],
              [
                "test_loading_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_loading_bad_single_files",
                  "0"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "0"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "0"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "0"
                ],
                [
                  "test_loading_good_single_file",
                  "0"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "0"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "0"
                ],
                [
                  "test_dict_initialized",
                  "0"
                ],
                [
                  "test_loading_good_several_single_files",
                  "0"
                ],
                [
                  "test_loading_tiff_metadata",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_loading_bad_single_files",
                  "0"
                ],
                [
                  "test_loading_unsuported_file_format",
                  "0"
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "0"
                ],
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "0"
                ],
                [
                  "test_loading_good_single_file",
                  "0"
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "0"
                ],
                [
                  "test_loading_hdf_raise_error",
                  "0"
                ],
                [
                  "test_dict_initialized",
                  "0"
                ],
                [
                  "test_loading_good_several_single_files",
                  "0"
                ],
                [
                  "test_loading_tiff_metadata",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_loading_bad_single_files",
                "false"
              ],
              [
                "test_loading_unsuported_file_format",
                "false"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "false"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "false"
              ],
              [
                "test_loading_good_single_file",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "false"
              ],
              [
                "test_loading_hdf_raise_error",
                "false"
              ],
              [
                "test_dict_initialized",
                "false"
              ],
              [
                "test_loading_good_several_single_files",
                "false"
              ],
              [
                "test_loading_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_loading_bad_single_files",
                "false"
              ],
              [
                "test_loading_unsuported_file_format",
                "false"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "false"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "false"
              ],
              [
                "test_loading_good_single_file",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "false"
              ],
              [
                "test_loading_hdf_raise_error",
                "false"
              ],
              [
                "test_dict_initialized",
                "false"
              ],
              [
                "test_loading_good_several_single_files",
                "false"
              ],
              [
                "test_loading_tiff_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_loading_bad_single_files",
                "9"
              ],
              [
                "test_loading_unsuported_file_format",
                "1"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "3"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "1"
              ],
              [
                "test_loading_good_single_file",
                "4"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "2"
              ],
              [
                "test_loading_hdf_raise_error",
                "1"
              ],
              [
                "test_dict_initialized",
                "12"
              ],
              [
                "test_loading_good_several_single_files",
                "9"
              ],
              [
                "test_loading_tiff_metadata",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_loading_bad_single_files",
                [
                  "bad_tiff_file_name",
                  "o_norm",
                  "bad_fits_file_name",
                  "bad_h5_file_name"
                ]
              ],
              [
                "test_loading_unsuported_file_format",
                [
                  "o_norm",
                  "sample_fake_file"
                ]
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                [
                  "df2",
                  "o_norm",
                  "image1",
                  "image2",
                  "ob2",
                  "df1",
                  "ob1"
                ]
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                [
                  "new_sample_tif_file",
                  "o_norm",
                  "sample_tif_file",
                  "ob_tif_file"
                ]
              ],
              [
                "test_loading_good_single_file",
                [
                  "_loaded_data",
                  "o_norm",
                  "_expected_name",
                  "sample_fits_file",
                  "sample_tif_file",
                  "_expected_data",
                  "_loaded_name"
                ]
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                [
                  "path",
                  "o_norm",
                  "list_of_files_retrieved",
                  "list_of_files",
                  "list_of_files_expected"
                ]
              ],
              [
                "test_loading_hdf_raise_error",
                [
                  "o_norm",
                  "sample_hdf5_file"
                ]
              ],
              [
                "test_dict_initialized",
                [
                  "o_norm",
                  "data",
                  "dict_ob",
                  "dict_image",
                  "dict_df"
                ]
              ],
              [
                "test_loading_good_several_single_files",
                [
                  "_expected_data_2",
                  "_expected_data_1",
                  "_expected_name_2",
                  "_expected_name_1",
                  "_loaded_name_2",
                  "_loaded_name_1",
                  "ob_tif_file_1",
                  "_loaded_data_2",
                  "o_norm",
                  "sample_fits_file_2",
                  "sample_fits_file_1",
                  "sample_tif_file_1",
                  "_loaded_data_1",
                  "sample_tif_file_2"
                ]
              ],
              [
                "test_loading_tiff_metadata",
                [
                  "metadata_1_expected",
                  "metadata",
                  "o_norm",
                  "metadata_1_returned",
                  "sample_tif_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_loading_bad_single_files",
                []
              ],
              [
                "test_loading_unsuported_file_format",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_loading_good_single_file",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_loading_hdf_raise_error",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_dict_initialized",
                []
              ],
              [
                "test_loading_good_several_single_files",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_loading_tiff_metadata",
                [
                  "self.data_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.42073654291379725,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  "test_loading_tiff_metadata",
                  0.37558528287360543
                ],
                [
                  "test_dict_initialized",
                  "test_loading_tiff_metadata",
                  0.17340580418862225
                ],
                [
                  "test_loading_unsuported_file_format",
                  "test_loading_tiff_metadata",
                  0.33858061155492897
                ],
                [
                  "test_dict_initialized",
                  "test_loading_hdf_raise_error",
                  0.1904033892965789
                ],
                [
                  "test_dict_initialized",
                  "test_error_raised_when_data_size_do_not_match",
                  0.22836939690366487
                ],
                [
                  "test_loading_good_single_file",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.40965904289599236
                ],
                [
                  "test_loading_bad_single_files",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.33477202998198136
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "test_loading_tiff_metadata",
                  0.726153702593741
                ],
                [
                  "test_loading_unsuported_file_format",
                  "test_error_raised_when_data_size_do_not_match",
                  0.4164843145808268
                ],
                [
                  "test_dict_initialized",
                  "test_loading_unsuported_file_format",
                  0.21237337115470056
                ],
                [
                  "test_loading_unsuported_file_format",
                  "test_all_images_names_retrieved_from_folder",
                  0.4467871792845421
                ],
                [
                  "test_loading_bad_single_files",
                  "test_loading_good_single_file",
                  0.3341578612628721
                ],
                [
                  "test_dict_initialized",
                  "test_loading_good_several_single_files",
                  0.13267651515635012
                ],
                [
                  "test_loading_good_several_single_files",
                  "test_all_images_names_retrieved_from_folder",
                  0.3817714577147042
                ],
                [
                  "test_dict_initialized",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.20191324136702246
                ],
                [
                  "test_loading_hdf_raise_error",
                  "test_loading_good_several_single_files",
                  0.5054610806709489
                ],
                [
                  "test_loading_unsuported_file_format",
                  "test_loading_good_single_file",
                  0.37351116710467963
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "test_loading_tiff_metadata",
                  0.414930539634108
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.4333816779132424
                ],
                [
                  "test_loading_bad_single_files",
                  "test_all_images_names_retrieved_from_folder",
                  0.3726462675869181
                ],
                [
                  "test_all_images_names_retrieved_from_folder",
                  "test_error_raised_when_data_size_do_not_match",
                  0.44233818431242156
                ],
                [
                  "test_loading_good_several_single_files",
                  "test_loading_tiff_metadata",
                  0.8295056986965952
                ],
                [
                  "test_loading_bad_single_files",
                  "test_error_raised_when_data_size_do_not_match",
                  0.34656031461327624
                ],
                [
                  "test_loading_bad_single_files",
                  "test_loading_hdf_raise_error",
                  0.37640292296924327
                ],
                [
                  "test_loading_good_several_single_files",
                  "test_error_raised_when_data_size_do_not_match",
                  0.7341171006647879
                ],
                [
                  "test_loading_bad_single_files",
                  "test_loading_tiff_metadata",
                  0.29369158137056217
                ],
                [
                  "test_error_raised_when_data_size_do_not_match",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.5387332292911358
                ],
                [
                  "test_loading_good_single_file",
                  "test_error_raised_when_data_size_do_not_match",
                  0.7184554236868513
                ],
                [
                  "test_loading_hdf_raise_error",
                  "test_loading_tiff_metadata",
                  0.5176715070972953
                ],
                [
                  "test_loading_hdf_raise_error",
                  "test_loading_unsuported_file_format",
                  0.5730682550612528
                ],
                [
                  "test_loading_hdf_raise_error",
                  "test_error_raised_when_data_size_do_not_match",
                  0.5692484984978842
                ],
                [
                  "test_loading_good_single_file",
                  "test_all_images_names_retrieved_from_folder",
                  0.47959207431937556
                ],
                [
                  "test_loading_good_single_file",
                  "test_loading_tiff_metadata",
                  0.8038644147565767
                ],
                [
                  "test_loading_hdf_raise_error",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.4082482904638631
                ],
                [
                  "test_loading_bad_single_files",
                  "test_loading_unsuported_file_format",
                  0.5248811112471191
                ],
                [
                  "test_loading_unsuported_file_format",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.4913036844405175
                ],
                [
                  "test_dict_initialized",
                  "test_all_images_names_retrieved_from_folder",
                  0.18857492352983662
                ],
                [
                  "test_loading_unsuported_file_format",
                  "test_loading_good_several_single_files",
                  0.27014288496985456
                ],
                [
                  "test_loading_good_several_single_files",
                  "test_loading_new_data_not_allowed_if_algorithm_already_run",
                  0.29927683699170204
                ],
                [
                  "test_loading_bad_single_files",
                  "test_loading_good_several_single_files",
                  0.28229993834039746
                ],
                [
                  "test_dict_initialized",
                  "test_loading_bad_single_files",
                  0.23539862177960277
                ],
                [
                  "test_dict_initialized",
                  "test_loading_good_single_file",
                  0.20369749130091855
                ],
                [
                  "test_loading_good_single_file",
                  "test_loading_good_several_single_files",
                  0.9265280892075443
                ],
                [
                  "test_loading_hdf_raise_error",
                  "test_loading_good_single_file",
                  0.5284656575762822
                ],
                [
                  "test_loading_hdf_raise_error",
                  "test_all_images_names_retrieved_from_folder",
                  0.3480537622159509
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_loading_bad_single_files",
                "false"
              ],
              [
                "test_loading_unsuported_file_format",
                "false"
              ],
              [
                "test_error_raised_when_data_size_do_not_match",
                "false"
              ],
              [
                "test_loading_new_data_not_allowed_if_algorithm_already_run",
                "false"
              ],
              [
                "test_loading_good_single_file",
                "true"
              ],
              [
                "test_all_images_names_retrieved_from_folder",
                "true"
              ],
              [
                "test_loading_hdf_raise_error",
                "false"
              ],
              [
                "test_dict_initialized",
                "false"
              ],
              [
                "test_loading_good_several_single_files",
                "true"
              ],
              [
                "test_loading_tiff_metadata",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      },
      {
        "name": "TestGammaFiltering",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_auto_gamma_filtered_works",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_gamma_filtered_works",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_auto_gamma_filtered_works",
                  "[]"
                ],
                [
                  "test_gamma_filtered_works",
                  "[]"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_auto_gamma_filtered_works",
                  "false"
                ],
                [
                  "test_gamma_filtered_works",
                  "false"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_auto_gamma_filtered_works",
                  "false"
                ],
                [
                  "test_gamma_filtered_works",
                  "false"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_auto_gamma_filtered_works",
                  "false"
                ],
                [
                  "test_gamma_filtered_works",
                  "true"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_auto_gamma_filtered_works",
                  "false"
                ],
                [
                  "test_gamma_filtered_works",
                  "false"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "false"
              ],
              [
                "test_gamma_filtered_works",
                "false"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "false"
              ],
              [
                "test_gamma_filtered_works",
                "false"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                []
              ],
              [
                "test_gamma_filtered_works",
                []
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "false"
              ],
              [
                "test_gamma_filtered_works",
                "false"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "false"
              ],
              [
                "test_gamma_filtered_works",
                "false"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_auto_gamma_filtered_works",
                  "0"
                ],
                [
                  "test_gamma_filtered_works",
                  "0"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_auto_gamma_filtered_works",
                  "0"
                ],
                [
                  "test_gamma_filtered_works",
                  "0"
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "false"
              ],
              [
                "test_gamma_filtered_works",
                "false"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "false"
              ],
              [
                "test_gamma_filtered_works",
                "false"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "1"
              ],
              [
                "test_gamma_filtered_works",
                "2"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                [
                  "expected_data",
                  "o_norm",
                  "file_name",
                  "loaded_data"
                ]
              ],
              [
                "test_gamma_filtered_works",
                [
                  "path",
                  "_returned_sample",
                  "o_norm",
                  "_expected_sample"
                ]
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                [
                  "path",
                  "o_norm",
                  "data_0"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_gamma_filtered_works",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                [
                  "self.data_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.605396176838342,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "test_gamma_filtered_works",
                  0.5522472903644811
                ],
                [
                  "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                  "test_auto_gamma_filtered_works",
                  0.6387861066232602
                ],
                [
                  "test_gamma_filtered_works",
                  "test_auto_gamma_filtered_works",
                  0.6251551335272847
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_auto_gamma_filtered_works",
                "false"
              ],
              [
                "test_gamma_filtered_works",
                "false"
              ],
              [
                "test_manuel_gamma_filtered_raises_error_when_array_is_empty",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_NeuNorm_\u0026_cropping_test.py",
    "testCases": [
      {
        "name": "TestCropping",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_roi_object_passed_to_crop",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_crop_works",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_crop_works_on_df_data",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_roi_object_passed_to_crop",
                  "[]"
                ],
                [
                  "test_crop_works",
                  "[]"
                ],
                [
                  "test_crop_works_on_df_data",
                  "[]"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "[]"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "[]"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "[]"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_roi_object_passed_to_crop",
                  "false"
                ],
                [
                  "test_crop_works",
                  "false"
                ],
                [
                  "test_crop_works_on_df_data",
                  "false"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "false"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "false"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "false"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_roi_object_passed_to_crop",
                  "false"
                ],
                [
                  "test_crop_works",
                  "false"
                ],
                [
                  "test_crop_works_on_df_data",
                  "false"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "false"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "false"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "false"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_roi_object_passed_to_crop",
                  "false"
                ],
                [
                  "test_crop_works",
                  "false"
                ],
                [
                  "test_crop_works_on_df_data",
                  "false"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "true"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "false"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "false"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_roi_object_passed_to_crop",
                  "false"
                ],
                [
                  "test_crop_works",
                  "false"
                ],
                [
                  "test_crop_works_on_df_data",
                  "false"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "false"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "false"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "false"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "false"
              ],
              [
                "test_crop_works",
                "false"
              ],
              [
                "test_crop_works_on_df_data",
                "false"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "false"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "false"
              ],
              [
                "test_crop_works_on_normalized_data",
                "false"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "false"
              ],
              [
                "test_crop_works",
                "false"
              ],
              [
                "test_crop_works_on_df_data",
                "false"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "false"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "false"
              ],
              [
                "test_crop_works_on_normalized_data",
                "false"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                []
              ],
              [
                "test_crop_works",
                []
              ],
              [
                "test_crop_works_on_df_data",
                []
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                []
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                []
              ],
              [
                "test_crop_works_on_normalized_data",
                []
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "false"
              ],
              [
                "test_crop_works",
                "false"
              ],
              [
                "test_crop_works_on_df_data",
                "false"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "false"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "false"
              ],
              [
                "test_crop_works_on_normalized_data",
                "false"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "false"
              ],
              [
                "test_crop_works",
                "false"
              ],
              [
                "test_crop_works_on_df_data",
                "false"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "false"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "false"
              ],
              [
                "test_crop_works_on_normalized_data",
                "false"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_roi_object_passed_to_crop",
                  "0"
                ],
                [
                  "test_crop_works",
                  "0"
                ],
                [
                  "test_crop_works_on_df_data",
                  "0"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "0"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "0"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "0"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_roi_object_passed_to_crop",
                  "0"
                ],
                [
                  "test_crop_works",
                  "0"
                ],
                [
                  "test_crop_works_on_df_data",
                  "0"
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "0"
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "0"
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "0"
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "false"
              ],
              [
                "test_crop_works",
                "false"
              ],
              [
                "test_crop_works_on_df_data",
                "false"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "false"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "false"
              ],
              [
                "test_crop_works_on_normalized_data",
                "false"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "false"
              ],
              [
                "test_crop_works",
                "false"
              ],
              [
                "test_crop_works_on_df_data",
                "false"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "false"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "false"
              ],
              [
                "test_crop_works_on_normalized_data",
                "false"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "1"
              ],
              [
                "test_crop_works",
                "2"
              ],
              [
                "test_crop_works_on_df_data",
                "1"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "3"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "2"
              ],
              [
                "test_crop_works_on_normalized_data",
                "1"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                [
                  "_roi",
                  "o_norm",
                  "sample_path",
                  "ob_path"
                ]
              ],
              [
                "test_crop_works",
                [
                  "_roi",
                  "_returned_sample",
                  "o_norm",
                  "_expected_sample",
                  "y0",
                  "_returned_ob",
                  "x0",
                  "y1",
                  "x1",
                  "sample_path",
                  "ob_path",
                  "_expected_ob"
                ]
              ],
              [
                "test_crop_works_on_df_data",
                [
                  "_returned_df",
                  "_roi",
                  "o_norm",
                  "y0",
                  "x0",
                  "y1",
                  "x1",
                  "sample_path",
                  "ob_path",
                  "df_path",
                  "_expected_df"
                ]
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                [
                  "_roi",
                  "o_norm",
                  "sample_path",
                  "ob_path"
                ]
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                [
                  "_roi",
                  "_sample_first_time",
                  "_expected_ob_second_run",
                  "ob_path",
                  "_ob_first_time",
                  "o_norm",
                  "_ob_second_time",
                  "y0",
                  "x0",
                  "y1",
                  "x1",
                  "_sample_second_time",
                  "_expected_sample_second_run",
                  "sample_path"
                ]
              ],
              [
                "test_crop_works_on_normalized_data",
                [
                  "_expected_norm",
                  "_roi",
                  "o_norm",
                  "y0",
                  "x0",
                  "y1",
                  "x1",
                  "sample_path",
                  "ob_path",
                  "_returned_norm"
                ]
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                [
                  "_roi",
                  "_sample_first_time",
                  "o_norm",
                  "_ob_second_time",
                  "y0",
                  "x0",
                  "y1",
                  "x1",
                  "_sample_second_time",
                  "sample_path",
                  "ob_path",
                  "_ob_first_time"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_crop_works",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_crop_works_on_df_data",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_crop_works_on_normalized_data",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                [
                  "self.data_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7683715068074302,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_crop_works",
                  "test_crop_works_again_if_force_flag_is_true",
                  0.9094562152852953
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "test_crop_works_on_normalized_data",
                  0.8313281811445353
                ],
                [
                  "test_roi_object_passed_to_crop",
                  "test_crop_works",
                  0.6131834506745498
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "test_crop_works_on_df_data",
                  0.8291540930766678
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "test_crop_works",
                  0.7061544522995318
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "test_crop_works_again_if_force_flag_is_true",
                  0.6251480358397098
                ],
                [
                  "test_crop_works",
                  "test_crop_works_only_once_without_force_flag",
                  0.850928458888594
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "test_roi_object_passed_to_crop",
                  0.8413128069019506
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "test_crop_works_only_once_without_force_flag",
                  0.7087367612399429
                ],
                [
                  "test_roi_object_passed_to_crop",
                  "test_crop_works_on_normalized_data",
                  0.6305099008284764
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "test_crop_works_again_if_force_flag_is_true",
                  0.9365475823712243
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "test_crop_works_on_df_data",
                  0.7430950369962216
                ],
                [
                  "test_crop_works_only_once_without_force_flag",
                  "test_crop_works_on_df_data",
                  0.7979734408934727
                ],
                [
                  "test_roi_object_passed_to_crop",
                  "test_crop_works_on_df_data",
                  0.6724779497140355
                ],
                [
                  "test_crop_works_again_if_force_flag_is_true",
                  "test_crop_works_on_normalized_data",
                  0.8817172443503171
                ],
                [
                  "test_roi_object_passed_to_crop",
                  "test_crop_works_again_if_force_flag_is_true",
                  0.5273680010266673
                ],
                [
                  "test_roi_object_passed_to_crop",
                  "test_crop_works_only_once_without_force_flag",
                  0.6105983665294348
                ],
                [
                  "test_crop_works_on_normalized_data",
                  "test_crop_works_on_df_data",
                  0.9300500666800623
                ],
                [
                  "test_cropping_raises_error_when_no_data_and_ob_loaded",
                  "test_crop_works_on_normalized_data",
                  0.7136331055046489
                ],
                [
                  "test_crop_works",
                  "test_crop_works_on_normalized_data",
                  0.9139454632518723
                ],
                [
                  "test_crop_works",
                  "test_crop_works_on_df_data",
                  0.8624830294588203
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_roi_object_passed_to_crop",
                "false"
              ],
              [
                "test_crop_works",
                "false"
              ],
              [
                "test_crop_works_on_df_data",
                "false"
              ],
              [
                "test_cropping_raises_error_when_no_data_and_ob_loaded",
                "false"
              ],
              [
                "test_crop_works_again_if_force_flag_is_true",
                "false"
              ],
              [
                "test_crop_works_on_normalized_data",
                "false"
              ],
              [
                "test_crop_works_only_once_without_force_flag",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_NeuNorm_\u0026_utilities_test.py",
    "testCases": [
      {
        "name": "TestUtilites",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_df_averaging",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_df_averaging",
                  "[]"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_df_averaging",
                  "false"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_df_averaging",
                  "false"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_df_averaging",
                  "false"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_df_averaging",
                  "false"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                []
              ],
              [
                "test_all_images_names_retrieved_from_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_df_averaging",
                  "0"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_df_averaging",
                  "0"
                ],
                [
                  "test_all_images_names_retrieved_from_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                "1"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                [
                  "expected_df",
                  "o_norm",
                  "df_tif_file_3",
                  "df_tif_file_2",
                  "_average_df"
                ]
              ],
              [
                "test_all_images_names_retrieved_from_file",
                [
                  "path",
                  "o_norm",
                  "list_files_expected",
                  "list_files"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_df_averaging",
                [
                  "self.data_path"
                ]
              ],
              [
                "test_all_images_names_retrieved_from_file",
                [
                  "self.data_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4592058028030617,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_all_images_names_retrieved_from_file",
                  "test_df_averaging",
                  0.4592058028030617
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_df_averaging",
                "false"
              ],
              [
                "test_all_images_names_retrieved_from_file",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]