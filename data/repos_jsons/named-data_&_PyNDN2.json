[
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_regex.py",
    "testCases": [
      {
        "name": "TestRegex",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_component_matcher",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_top_matcher",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_repeat_matcher",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_backref_matcher",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pattern_list_matcher",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_component_set_matcher",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail]"
                ],
                [
                  "test_backref_matcher_advanced",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_top_matcher_advanced",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_component_matcher",
                  "[]"
                ],
                [
                  "test_top_matcher",
                  "[]"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "[]"
                ],
                [
                  "test_repeat_matcher",
                  "[]"
                ],
                [
                  "test_backref_matcher",
                  "[]"
                ],
                [
                  "test_pattern_list_matcher",
                  "[]"
                ],
                [
                  "test_component_set_matcher",
                  "[]"
                ],
                [
                  "test_backref_matcher_advanced",
                  "[]"
                ],
                [
                  "test_top_matcher_advanced",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_component_matcher",
                  "false"
                ],
                [
                  "test_top_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "false"
                ],
                [
                  "test_repeat_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher",
                  "false"
                ],
                [
                  "test_pattern_list_matcher",
                  "false"
                ],
                [
                  "test_component_set_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher_advanced",
                  "false"
                ],
                [
                  "test_top_matcher_advanced",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_component_matcher",
                  "false"
                ],
                [
                  "test_top_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "false"
                ],
                [
                  "test_repeat_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher",
                  "false"
                ],
                [
                  "test_pattern_list_matcher",
                  "false"
                ],
                [
                  "test_component_set_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher_advanced",
                  "false"
                ],
                [
                  "test_top_matcher_advanced",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_component_matcher",
                  "true"
                ],
                [
                  "test_top_matcher",
                  "true"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "false"
                ],
                [
                  "test_repeat_matcher",
                  "true"
                ],
                [
                  "test_backref_matcher",
                  "true"
                ],
                [
                  "test_pattern_list_matcher",
                  "true"
                ],
                [
                  "test_component_set_matcher",
                  "true"
                ],
                [
                  "test_backref_matcher_advanced",
                  "false"
                ],
                [
                  "test_top_matcher_advanced",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_component_matcher",
                  "false"
                ],
                [
                  "test_top_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "false"
                ],
                [
                  "test_repeat_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher",
                  "false"
                ],
                [
                  "test_pattern_list_matcher",
                  "false"
                ],
                [
                  "test_component_set_matcher",
                  "false"
                ],
                [
                  "test_backref_matcher_advanced",
                  "false"
                ],
                [
                  "test_top_matcher_advanced",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                "false"
              ],
              [
                "test_top_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced2",
                "false"
              ],
              [
                "test_repeat_matcher",
                "false"
              ],
              [
                "test_backref_matcher",
                "false"
              ],
              [
                "test_pattern_list_matcher",
                "false"
              ],
              [
                "test_component_set_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced",
                "false"
              ],
              [
                "test_top_matcher_advanced",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_component_matcher",
                "false"
              ],
              [
                "test_top_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced2",
                "false"
              ],
              [
                "test_repeat_matcher",
                "false"
              ],
              [
                "test_backref_matcher",
                "false"
              ],
              [
                "test_pattern_list_matcher",
                "false"
              ],
              [
                "test_component_set_matcher",
                "true"
              ],
              [
                "test_backref_matcher_advanced",
                "false"
              ],
              [
                "test_top_matcher_advanced",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                []
              ],
              [
                "test_top_matcher",
                []
              ],
              [
                "test_backref_matcher_advanced2",
                []
              ],
              [
                "test_repeat_matcher",
                []
              ],
              [
                "test_backref_matcher",
                []
              ],
              [
                "test_pattern_list_matcher",
                []
              ],
              [
                "test_component_set_matcher",
                []
              ],
              [
                "test_backref_matcher_advanced",
                []
              ],
              [
                "test_top_matcher_advanced",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                "false"
              ],
              [
                "test_top_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced2",
                "false"
              ],
              [
                "test_repeat_matcher",
                "false"
              ],
              [
                "test_backref_matcher",
                "false"
              ],
              [
                "test_pattern_list_matcher",
                "false"
              ],
              [
                "test_component_set_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced",
                "false"
              ],
              [
                "test_top_matcher_advanced",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_component_matcher",
                "true"
              ],
              [
                "test_top_matcher",
                "true"
              ],
              [
                "test_backref_matcher_advanced2",
                "true"
              ],
              [
                "test_repeat_matcher",
                "true"
              ],
              [
                "test_backref_matcher",
                "true"
              ],
              [
                "test_pattern_list_matcher",
                "true"
              ],
              [
                "test_component_set_matcher",
                "true"
              ],
              [
                "test_backref_matcher_advanced",
                "true"
              ],
              [
                "test_top_matcher_advanced",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_component_matcher",
                  "0"
                ],
                [
                  "test_top_matcher",
                  "0"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "0"
                ],
                [
                  "test_repeat_matcher",
                  "0"
                ],
                [
                  "test_backref_matcher",
                  "0"
                ],
                [
                  "test_pattern_list_matcher",
                  "0"
                ],
                [
                  "test_component_set_matcher",
                  "0"
                ],
                [
                  "test_backref_matcher_advanced",
                  "0"
                ],
                [
                  "test_top_matcher_advanced",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_component_matcher",
                  "0"
                ],
                [
                  "test_top_matcher",
                  "0"
                ],
                [
                  "test_backref_matcher_advanced2",
                  "0"
                ],
                [
                  "test_repeat_matcher",
                  "0"
                ],
                [
                  "test_backref_matcher",
                  "0"
                ],
                [
                  "test_pattern_list_matcher",
                  "0"
                ],
                [
                  "test_component_set_matcher",
                  "0"
                ],
                [
                  "test_backref_matcher_advanced",
                  "0"
                ],
                [
                  "test_top_matcher_advanced",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                "false"
              ],
              [
                "test_top_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced2",
                "false"
              ],
              [
                "test_repeat_matcher",
                "false"
              ],
              [
                "test_backref_matcher",
                "false"
              ],
              [
                "test_pattern_list_matcher",
                "false"
              ],
              [
                "test_component_set_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced",
                "false"
              ],
              [
                "test_top_matcher_advanced",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                "false"
              ],
              [
                "test_top_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced2",
                "false"
              ],
              [
                "test_repeat_matcher",
                "false"
              ],
              [
                "test_backref_matcher",
                "false"
              ],
              [
                "test_pattern_list_matcher",
                "false"
              ],
              [
                "test_component_set_matcher",
                "false"
              ],
              [
                "test_backref_matcher_advanced",
                "false"
              ],
              [
                "test_top_matcher_advanced",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                "11"
              ],
              [
                "test_top_matcher",
                "32"
              ],
              [
                "test_backref_matcher_advanced2",
                "9"
              ],
              [
                "test_repeat_matcher",
                "80"
              ],
              [
                "test_backref_matcher",
                "13"
              ],
              [
                "test_pattern_list_matcher",
                "14"
              ],
              [
                "test_component_set_matcher",
                "15"
              ],
              [
                "test_backref_matcher_advanced",
                "6"
              ],
              [
                "test_top_matcher_advanced",
                "21"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                [
                  "backRef",
                  "res",
                  "cm"
                ]
              ],
              [
                "test_top_matcher",
                [
                  "res",
                  "cm"
                ]
              ],
              [
                "test_backref_matcher_advanced2",
                [
                  "backRef",
                  "res",
                  "cm"
                ]
              ],
              [
                "test_repeat_matcher",
                [
                  "backRef",
                  "res",
                  "cm"
                ]
              ],
              [
                "test_backref_matcher",
                [
                  "backRef",
                  "res",
                  "cm"
                ]
              ],
              [
                "test_pattern_list_matcher",
                [
                  "backRef",
                  "res",
                  "cm"
                ]
              ],
              [
                "test_component_set_matcher",
                [
                  "backRef",
                  "res",
                  "cm"
                ]
              ],
              [
                "test_backref_matcher_advanced",
                [
                  "backRef",
                  "res",
                  "cm"
                ]
              ],
              [
                "test_top_matcher_advanced",
                [
                  "res",
                  "cm"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_component_matcher",
                []
              ],
              [
                "test_top_matcher",
                []
              ],
              [
                "test_backref_matcher_advanced2",
                []
              ],
              [
                "test_repeat_matcher",
                []
              ],
              [
                "test_backref_matcher",
                []
              ],
              [
                "test_pattern_list_matcher",
                []
              ],
              [
                "test_component_set_matcher",
                []
              ],
              [
                "test_backref_matcher_advanced",
                []
              ],
              [
                "test_top_matcher_advanced",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8141636556736322,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_pattern_list_matcher",
                  "test_top_matcher",
                  0.7532375645167587
                ],
                [
                  "test_backref_matcher",
                  "test_backref_matcher_advanced2",
                  0.9559345758057903
                ],
                [
                  "test_pattern_list_matcher",
                  "test_top_matcher_advanced",
                  0.7064185952322475
                ],
                [
                  "test_component_set_matcher",
                  "test_repeat_matcher",
                  0.894514257818595
                ],
                [
                  "test_component_matcher",
                  "test_component_set_matcher",
                  0.9411589828070417
                ],
                [
                  "test_component_set_matcher",
                  "test_top_matcher",
                  0.6182894722450976
                ],
                [
                  "test_component_set_matcher",
                  "test_pattern_list_matcher",
                  0.9125623599326523
                ],
                [
                  "test_component_set_matcher",
                  "test_top_matcher_advanced",
                  0.759258692558367
                ],
                [
                  "test_backref_matcher",
                  "test_backref_matcher_advanced",
                  0.9607951488574379
                ],
                [
                  "test_repeat_matcher",
                  "test_backref_matcher",
                  0.8843916350559335
                ],
                [
                  "test_backref_matcher",
                  "test_top_matcher",
                  0.8114610466653314
                ],
                [
                  "test_backref_matcher",
                  "test_top_matcher_advanced",
                  0.6046885645401336
                ],
                [
                  "test_component_matcher",
                  "test_repeat_matcher",
                  0.9025387639704738
                ],
                [
                  "test_component_matcher",
                  "test_backref_matcher",
                  0.9024629110946438
                ],
                [
                  "test_backref_matcher_advanced",
                  "test_pattern_list_matcher",
                  0.917250555090164
                ],
                [
                  "test_backref_matcher_advanced2",
                  "test_top_matcher_advanced",
                  0.5230103918171474
                ],
                [
                  "test_component_matcher",
                  "test_top_matcher_advanced",
                  0.7194504499660698
                ],
                [
                  "test_repeat_matcher",
                  "test_backref_matcher_advanced2",
                  0.8412933882424486
                ],
                [
                  "test_top_matcher",
                  "test_top_matcher_advanced",
                  0.6006449572887084
                ],
                [
                  "test_component_matcher",
                  "test_pattern_list_matcher",
                  0.9375874374882432
                ],
                [
                  "test_component_set_matcher",
                  "test_backref_matcher",
                  0.7963249177128888
                ],
                [
                  "test_component_matcher",
                  "test_backref_matcher_advanced2",
                  0.8244235725519211
                ],
                [
                  "test_repeat_matcher",
                  "test_top_matcher_advanced",
                  0.7260285923342422
                ],
                [
                  "test_repeat_matcher",
                  "test_pattern_list_matcher",
                  0.9311751868076867
                ],
                [
                  "test_component_set_matcher",
                  "test_backref_matcher_advanced",
                  0.8445960653007919
                ],
                [
                  "test_backref_matcher_advanced2",
                  "test_top_matcher",
                  0.8653454391250673
                ],
                [
                  "test_backref_matcher_advanced2",
                  "test_pattern_list_matcher",
                  0.8316194692840526
                ],
                [
                  "test_backref_matcher_advanced",
                  "test_backref_matcher_advanced2",
                  0.930015427132439
                ],
                [
                  "test_repeat_matcher",
                  "test_backref_matcher_advanced",
                  0.935581234955417
                ],
                [
                  "test_repeat_matcher",
                  "test_top_matcher",
                  0.836352888433748
                ],
                [
                  "test_component_set_matcher",
                  "test_backref_matcher_advanced2",
                  0.6916249226959134
                ],
                [
                  "test_backref_matcher_advanced",
                  "test_top_matcher_advanced",
                  0.6446605067749009
                ],
                [
                  "test_component_matcher",
                  "test_top_matcher",
                  0.6930194721641781
                ],
                [
                  "test_backref_matcher_advanced",
                  "test_top_matcher",
                  0.8044373065955437
                ],
                [
                  "test_component_matcher",
                  "test_backref_matcher_advanced",
                  0.9167822959375258
                ],
                [
                  "test_backref_matcher",
                  "test_pattern_list_matcher",
                  0.890954555451159
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_component_matcher",
                "true"
              ],
              [
                "test_top_matcher",
                "true"
              ],
              [
                "test_backref_matcher_advanced2",
                "true"
              ],
              [
                "test_repeat_matcher",
                "true"
              ],
              [
                "test_backref_matcher",
                "true"
              ],
              [
                "test_pattern_list_matcher",
                "true"
              ],
              [
                "test_component_set_matcher",
                "true"
              ],
              [
                "test_backref_matcher_advanced",
                "true"
              ],
              [
                "test_top_matcher_advanced",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_interval.py",
    "testCases": [
      {
        "name": "TestInterval",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cover_time_point",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_construction",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_intersection_and_union",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cover_time_point",
                  "[]"
                ],
                [
                  "test_construction",
                  "[]"
                ],
                [
                  "test_intersection_and_union",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cover_time_point",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_intersection_and_union",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cover_time_point",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_intersection_and_union",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cover_time_point",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_intersection_and_union",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cover_time_point",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_intersection_and_union",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_intersection_and_union",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_intersection_and_union",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                []
              ],
              [
                "test_construction",
                []
              ],
              [
                "test_intersection_and_union",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_intersection_and_union",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_intersection_and_union",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cover_time_point",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ],
                [
                  "test_intersection_and_union",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cover_time_point",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ],
                [
                  "test_intersection_and_union",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_intersection_and_union",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_intersection_and_union",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                "4"
              ],
              [
                "test_construction",
                "6"
              ],
              [
                "test_intersection_and_union",
                "24"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                [
                  "timePoint2",
                  "timePoint1",
                  "interval",
                  "timePoint4",
                  "timePoint3"
                ]
              ],
              [
                "test_construction",
                [
                  "interval1",
                  "interval2",
                  "interval3"
                ]
              ],
              [
                "test_intersection_and_union",
                [
                  "interval1",
                  "tempInterval",
                  "interval2",
                  "interval3",
                  "interval4",
                  "interval5",
                  "gotError",
                  "interval6",
                  "interval7"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                []
              ],
              [
                "test_construction",
                []
              ],
              [
                "test_intersection_and_union",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6871948767203966,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_construction",
                  "test_cover_time_point",
                  0.6517885254113623
                ],
                [
                  "test_construction",
                  "test_intersection_and_union",
                  0.7544491489464751
                ],
                [
                  "test_cover_time_point",
                  "test_intersection_and_union",
                  0.6553469558033521
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_intersection_and_union",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_schedule.py",
    "testCases": [
      {
        "name": "TestSchedule",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_calculate_interval_without_black",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_calculate_interval_without_white",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_encode_and_decode",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_calculate_interval_without_black",
                  "[]"
                ],
                [
                  "test_calculate_interval_without_white",
                  "[]"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "[]"
                ],
                [
                  "test_encode_and_decode",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_calculate_interval_without_black",
                  "false"
                ],
                [
                  "test_calculate_interval_without_white",
                  "false"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "false"
                ],
                [
                  "test_encode_and_decode",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_calculate_interval_without_black",
                  "false"
                ],
                [
                  "test_calculate_interval_without_white",
                  "false"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "false"
                ],
                [
                  "test_encode_and_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_calculate_interval_without_black",
                  "true"
                ],
                [
                  "test_calculate_interval_without_white",
                  "true"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "true"
                ],
                [
                  "test_encode_and_decode",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_calculate_interval_without_black",
                  "false"
                ],
                [
                  "test_calculate_interval_without_white",
                  "false"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "false"
                ],
                [
                  "test_encode_and_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "false"
              ],
              [
                "test_calculate_interval_without_white",
                "false"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "false"
              ],
              [
                "test_encode_and_decode",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "false"
              ],
              [
                "test_calculate_interval_without_white",
                "false"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "false"
              ],
              [
                "test_encode_and_decode",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                []
              ],
              [
                "test_calculate_interval_without_white",
                []
              ],
              [
                "test_calculate_interval_with_black_and_white",
                []
              ],
              [
                "test_encode_and_decode",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "false"
              ],
              [
                "test_calculate_interval_without_white",
                "false"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "false"
              ],
              [
                "test_encode_and_decode",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "false"
              ],
              [
                "test_calculate_interval_without_white",
                "false"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "false"
              ],
              [
                "test_encode_and_decode",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_calculate_interval_without_black",
                  "0"
                ],
                [
                  "test_calculate_interval_without_white",
                  "0"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "0"
                ],
                [
                  "test_encode_and_decode",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_calculate_interval_without_black",
                  "0"
                ],
                [
                  "test_calculate_interval_without_white",
                  "0"
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "0"
                ],
                [
                  "test_encode_and_decode",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "false"
              ],
              [
                "test_calculate_interval_without_white",
                "false"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "false"
              ],
              [
                "test_encode_and_decode",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "false"
              ],
              [
                "test_calculate_interval_without_white",
                "false"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "false"
              ],
              [
                "test_encode_and_decode",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "17"
              ],
              [
                "test_calculate_interval_without_white",
                "8"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "20"
              ],
              [
                "test_encode_and_decode",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_calculate_interval_without_black",
                [
                  "interval1",
                  "result",
                  "timePoint2",
                  "schedule",
                  "interval2",
                  "timePoint1",
                  "interval3",
                  "timePoint5",
                  "timePoint4",
                  "timePoint3"
                ]
              ],
              [
                "test_calculate_interval_without_white",
                [
                  "interval1",
                  "result",
                  "timePoint2",
                  "schedule",
                  "interval2",
                  "timePoint1"
                ]
              ],
              [
                "test_calculate_interval_with_black_and_white",
                [
                  "interval1",
                  "result",
                  "timePoint2",
                  "schedule",
                  "interval2",
                  "timePoint1",
                  "interval3",
                  "interval4",
                  "timePoint6",
                  "timePoint5",
                  "timePoint4",
                  "timePoint3"
                ]
              ],
              [
                "test_encode_and_decode",
                [
                  "interval1",
                  "schedule2",
                  "result",
                  "timePoint2",
                  "schedule",
                  "interval2",
                  "timePoint1",
                  "interval3",
                  "interval4",
                  "encoding2",
                  "encoding"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_interval_without_black",
                []
              ],
              [
                "test_calculate_interval_without_white",
                []
              ],
              [
                "test_calculate_interval_with_black_and_white",
                []
              ],
              [
                "test_encode_and_decode",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9837390025650365,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_calculate_interval_with_black_and_white",
                  "test_calculate_interval_without_white",
                  0.98804755661481
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "test_encode_and_decode",
                  0.974166904436318
                ],
                [
                  "test_calculate_interval_with_black_and_white",
                  "test_calculate_interval_without_black",
                  0.9993384838062113
                ],
                [
                  "test_calculate_interval_without_white",
                  "test_encode_and_decode",
                  0.9804733162597264
                ],
                [
                  "test_calculate_interval_without_black",
                  "test_calculate_interval_without_white",
                  0.9884651550102631
                ],
                [
                  "test_calculate_interval_without_black",
                  "test_encode_and_decode",
                  0.9719425992628903
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_calculate_interval_without_black",
                "true"
              ],
              [
                "test_calculate_interval_without_white",
                "true"
              ],
              [
                "test_calculate_interval_with_black_and_white",
                "true"
              ],
              [
                "test_encode_and_decode",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_encryptor.py",
    "testCases": [
      {
        "name": "TestEncryptor",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_content_symmetric_encrypt",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_content_symmetric_encrypt",
                  "[]"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "[]"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_content_symmetric_encrypt",
                  "true"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "true"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_content_symmetric_encrypt",
                  "false"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "false"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_content_symmetric_encrypt",
                  "false"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "false"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_content_symmetric_encrypt",
                  "false"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "false"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                []
              ],
              [
                "test_content_asymmetric_encrypt_large",
                []
              ],
              [
                "test_content_asymmetric_encrypt_small",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "true"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_content_symmetric_encrypt",
                  "0"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "0"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_content_symmetric_encrypt",
                  "0"
                ],
                [
                  "test_content_asymmetric_encrypt_large",
                  "0"
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "3"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "9"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                [
                  "data",
                  "decryptedOutput",
                  "content"
                ]
              ],
              [
                "test_content_asymmetric_encrypt_large",
                [
                  "payloadContent",
                  "encryptParams",
                  "largeDataContent",
                  "encryptedPayload",
                  "largeContent",
                  "data",
                  "keyName",
                  "rsaParams",
                  "encryptedNonce",
                  "encryptKey",
                  "blobNonce",
                  "nonce",
                  "nonceKeyName",
                  "largePayload",
                  "eKey",
                  "dKey",
                  "decryptKey",
                  "bufferPayload"
                ]
              ],
              [
                "test_content_asymmetric_encrypt_small",
                [
                  "encryptParams",
                  "recovered",
                  "data",
                  "eKey",
                  "dKey",
                  "decryptKey",
                  "keyName",
                  "rsaParams",
                  "encryptKey",
                  "extractContent",
                  "decrypted",
                  "rawContent"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                []
              ],
              [
                "test_content_asymmetric_encrypt_large",
                []
              ],
              [
                "test_content_asymmetric_encrypt_small",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5778283254270461,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_content_symmetric_encrypt",
                  "test_content_asymmetric_encrypt_large",
                  0.3313033113646087
                ],
                [
                  "test_content_symmetric_encrypt",
                  "test_content_asymmetric_encrypt_small",
                  0.513355324791675
                ],
                [
                  "test_content_asymmetric_encrypt_small",
                  "test_content_asymmetric_encrypt_large",
                  0.8888263401248545
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_content_symmetric_encrypt",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_large",
                "false"
              ],
              [
                "test_content_asymmetric_encrypt_small",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_certificate.py",
    "testCases": [
      {
        "name": "TestCertificate",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_setters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail]"
                ],
                [
                  "test_print_certificate_info",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_validity_period_checking",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_setters",
                  "[]"
                ],
                [
                  "test_print_certificate_info",
                  "[]"
                ],
                [
                  "test_validity_period_checking",
                  "[]"
                ],
                [
                  "test_constructor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_setters",
                  "false"
                ],
                [
                  "test_print_certificate_info",
                  "false"
                ],
                [
                  "test_validity_period_checking",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_setters",
                  "false"
                ],
                [
                  "test_print_certificate_info",
                  "false"
                ],
                [
                  "test_validity_period_checking",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_setters",
                  "false"
                ],
                [
                  "test_print_certificate_info",
                  "false"
                ],
                [
                  "test_validity_period_checking",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_setters",
                  "false"
                ],
                [
                  "test_print_certificate_info",
                  "false"
                ],
                [
                  "test_validity_period_checking",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                "false"
              ],
              [
                "test_print_certificate_info",
                "false"
              ],
              [
                "test_validity_period_checking",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_setters",
                "true"
              ],
              [
                "test_print_certificate_info",
                "false"
              ],
              [
                "test_validity_period_checking",
                "false"
              ],
              [
                "test_constructor",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                []
              ],
              [
                "test_print_certificate_info",
                []
              ],
              [
                "test_validity_period_checking",
                []
              ],
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                "false"
              ],
              [
                "test_print_certificate_info",
                "false"
              ],
              [
                "test_validity_period_checking",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_setters",
                "true"
              ],
              [
                "test_print_certificate_info",
                "false"
              ],
              [
                "test_validity_period_checking",
                "false"
              ],
              [
                "test_constructor",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_setters",
                  "0"
                ],
                [
                  "test_print_certificate_info",
                  "0"
                ],
                [
                  "test_validity_period_checking",
                  "0"
                ],
                [
                  "test_constructor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_setters",
                  "0"
                ],
                [
                  "test_print_certificate_info",
                  "0"
                ],
                [
                  "test_validity_period_checking",
                  "0"
                ],
                [
                  "test_constructor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                "false"
              ],
              [
                "test_print_certificate_info",
                "false"
              ],
              [
                "test_validity_period_checking",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                "false"
              ],
              [
                "test_print_certificate_info",
                "false"
              ],
              [
                "test_validity_period_checking",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                "8"
              ],
              [
                "test_print_certificate_info",
                "1"
              ],
              [
                "test_validity_period_checking",
                "4"
              ],
              [
                "test_constructor",
                "10"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                [
                  "certificate"
                ]
              ],
              [
                "test_print_certificate_info",
                [
                  "actual",
                  "expectedCertificateInfo",
                  "certificate"
                ]
              ],
              [
                "test_validity_period_checking",
                [
                  "certificate"
                ]
              ],
              [
                "test_constructor",
                [
                  "certificate2",
                  "data",
                  "certificate"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_setters",
                []
              ],
              [
                "test_print_certificate_info",
                []
              ],
              [
                "test_validity_period_checking",
                []
              ],
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6525601135293608,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_constructor",
                  "test_setters",
                  0.9358345639937486
                ],
                [
                  "test_constructor",
                  "test_print_certificate_info",
                  0.5297501299052725
                ],
                [
                  "test_validity_period_checking",
                  "test_print_certificate_info",
                  0.5362930587632752
                ],
                [
                  "test_constructor",
                  "test_validity_period_checking",
                  0.6527168085494819
                ],
                [
                  "test_setters",
                  "test_validity_period_checking",
                  0.7135226687712147
                ],
                [
                  "test_setters",
                  "test_print_certificate_info",
                  0.5472434511931721
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_setters",
                "false"
              ],
              [
                "test_print_certificate_info",
                "false"
              ],
              [
                "test_validity_period_checking",
                "true"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_psync_state.py",
    "testCases": [
      {
        "name": "TestPSyncState",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testEncodeDecode",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "testEmptyContent",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testEncodeDecode",
                  "[]"
                ],
                [
                  "testEmptyContent",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testEncodeDecode",
                  "false"
                ],
                [
                  "testEmptyContent",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testEncodeDecode",
                  "false"
                ],
                [
                  "testEmptyContent",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testEncodeDecode",
                  "false"
                ],
                [
                  "testEmptyContent",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testEncodeDecode",
                  "false"
                ],
                [
                  "testEmptyContent",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                "false"
              ],
              [
                "testEmptyContent",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                "false"
              ],
              [
                "testEmptyContent",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                []
              ],
              [
                "testEmptyContent",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                "false"
              ],
              [
                "testEmptyContent",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testEncodeDecode",
                "false"
              ],
              [
                "testEmptyContent",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testEncodeDecode",
                  "0"
                ],
                [
                  "testEmptyContent",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testEncodeDecode",
                  "0"
                ],
                [
                  "testEmptyContent",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                "false"
              ],
              [
                "testEmptyContent",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                "false"
              ],
              [
                "testEmptyContent",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                "2"
              ],
              [
                "testEmptyContent",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                [
                  "data",
                  "receivedState",
                  "expectedEncoding",
                  "state",
                  "encoding"
                ]
              ],
              [
                "testEmptyContent",
                [
                  "data",
                  "state",
                  "state2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testEncodeDecode",
                []
              ],
              [
                "testEmptyContent",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6140882486291177,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testEncodeDecode",
                  "testEmptyContent",
                  0.6140882486291177
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "testEncodeDecode",
                "true"
              ],
              [
                "testEmptyContent",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_data_methods.py",
    "testCases": [
      {
        "name": "TestDataDump",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_verify",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_verify_ecdsa",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_verify_digest_sha256",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_empty_signature",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_full_name",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_encode_decode",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_generic_signature",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail]"
                ],
                [
                  "test_congestion_mark",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_dump",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_copy_fields",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_verify",
                  "[]"
                ],
                [
                  "test_verify_ecdsa",
                  "[]"
                ],
                [
                  "test_verify_digest_sha256",
                  "[]"
                ],
                [
                  "test_empty_signature",
                  "[]"
                ],
                [
                  "test_full_name",
                  "[]"
                ],
                [
                  "test_encode_decode",
                  "[]"
                ],
                [
                  "test_generic_signature",
                  "[]"
                ],
                [
                  "test_congestion_mark",
                  "[]"
                ],
                [
                  "test_dump",
                  "[]"
                ],
                [
                  "test_copy_fields",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_ecdsa",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_empty_signature",
                  "false"
                ],
                [
                  "test_full_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_generic_signature",
                  "true"
                ],
                [
                  "test_congestion_mark",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_copy_fields",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_ecdsa",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_empty_signature",
                  "false"
                ],
                [
                  "test_full_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_generic_signature",
                  "false"
                ],
                [
                  "test_congestion_mark",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_copy_fields",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_ecdsa",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_empty_signature",
                  "false"
                ],
                [
                  "test_full_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_generic_signature",
                  "false"
                ],
                [
                  "test_congestion_mark",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_copy_fields",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_ecdsa",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_empty_signature",
                  "false"
                ],
                [
                  "test_full_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_generic_signature",
                  "false"
                ],
                [
                  "test_congestion_mark",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_copy_fields",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_ecdsa",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_empty_signature",
                "false"
              ],
              [
                "test_full_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_generic_signature",
                "false"
              ],
              [
                "test_congestion_mark",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_copy_fields",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_ecdsa",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_empty_signature",
                "false"
              ],
              [
                "test_full_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_generic_signature",
                "true"
              ],
              [
                "test_congestion_mark",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_copy_fields",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_verify",
                []
              ],
              [
                "test_verify_ecdsa",
                []
              ],
              [
                "test_verify_digest_sha256",
                []
              ],
              [
                "test_empty_signature",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_full_name",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_encode_decode",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_generic_signature",
                [
                  "self.credentials"
                ]
              ],
              [
                "test_congestion_mark",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_dump",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_copy_fields",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_ecdsa",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_empty_signature",
                "false"
              ],
              [
                "test_full_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_generic_signature",
                "false"
              ],
              [
                "test_congestion_mark",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_copy_fields",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_verify",
                "true"
              ],
              [
                "test_verify_ecdsa",
                "true"
              ],
              [
                "test_verify_digest_sha256",
                "true"
              ],
              [
                "test_empty_signature",
                "false"
              ],
              [
                "test_full_name",
                "true"
              ],
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_generic_signature",
                "false"
              ],
              [
                "test_congestion_mark",
                "true"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_copy_fields",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_verify",
                  "0"
                ],
                [
                  "test_verify_ecdsa",
                  "0"
                ],
                [
                  "test_verify_digest_sha256",
                  "0"
                ],
                [
                  "test_empty_signature",
                  "0"
                ],
                [
                  "test_full_name",
                  "0"
                ],
                [
                  "test_encode_decode",
                  "0"
                ],
                [
                  "test_generic_signature",
                  "0"
                ],
                [
                  "test_congestion_mark",
                  "0"
                ],
                [
                  "test_dump",
                  "0"
                ],
                [
                  "test_copy_fields",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_verify",
                  "0"
                ],
                [
                  "test_verify_ecdsa",
                  "0"
                ],
                [
                  "test_verify_digest_sha256",
                  "0"
                ],
                [
                  "test_empty_signature",
                  "0"
                ],
                [
                  "test_full_name",
                  "0"
                ],
                [
                  "test_encode_decode",
                  "0"
                ],
                [
                  "test_generic_signature",
                  "0"
                ],
                [
                  "test_congestion_mark",
                  "0"
                ],
                [
                  "test_dump",
                  "0"
                ],
                [
                  "test_copy_fields",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_ecdsa",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_empty_signature",
                "false"
              ],
              [
                "test_full_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_generic_signature",
                "false"
              ],
              [
                "test_congestion_mark",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_copy_fields",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_ecdsa",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_empty_signature",
                "false"
              ],
              [
                "test_full_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_generic_signature",
                "false"
              ],
              [
                "test_congestion_mark",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_copy_fields",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify",
                "2"
              ],
              [
                "test_verify_ecdsa",
                "2"
              ],
              [
                "test_verify_digest_sha256",
                "2"
              ],
              [
                "test_empty_signature",
                "2"
              ],
              [
                "test_full_name",
                "6"
              ],
              [
                "test_encode_decode",
                "1"
              ],
              [
                "test_generic_signature",
                "3"
              ],
              [
                "test_congestion_mark",
                "1"
              ],
              [
                "test_dump",
                "1"
              ],
              [
                "test_copy_fields",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_verify",
                [
                  "verifiedCallback",
                  "failedCallback"
                ]
              ],
              [
                "test_verify_ecdsa",
                [
                  "verifiedCallback",
                  "failedCallback"
                ]
              ],
              [
                "test_verify_digest_sha256",
                [
                  "verifiedCallback",
                  "failedCallback"
                ]
              ],
              [
                "test_empty_signature",
                [
                  "data",
                  "signature"
                ]
              ],
              [
                "test_full_name",
                [
                  "newDigest",
                  "data",
                  "sha256",
                  "saveFullName"
                ]
              ],
              [
                "test_encode_decode",
                [
                  "data",
                  "reDecodedData",
                  "encoding"
                ]
              ],
              [
                "test_generic_signature",
                [
                  "decodedData",
                  "signature",
                  "encoding",
                  "gotError",
                  "decodedSignature",
                  "signatureValue"
                ]
              ],
              [
                "test_congestion_mark",
                [
                  "data",
                  "lpPacket",
                  "element"
                ]
              ],
              [
                "test_dump",
                [
                  "data"
                ]
              ],
              [
                "test_copy_fields",
                [
                  "data",
                  "freshDump"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_verify",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_verify_ecdsa",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_verify_digest_sha256",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ],
              [
                "test_empty_signature",
                []
              ],
              [
                "test_full_name",
                []
              ],
              [
                "test_encode_decode",
                []
              ],
              [
                "test_generic_signature",
                [
                  "self.freshData"
                ]
              ],
              [
                "test_congestion_mark",
                []
              ],
              [
                "test_dump",
                []
              ],
              [
                "test_copy_fields",
                [
                  "self.credentials",
                  "self.freshData"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3683352726777686,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_encode_decode",
                  "test_verify_digest_sha256",
                  0.26943012562182533
                ],
                [
                  "test_verify",
                  "test_congestion_mark",
                  0.3867634482629927
                ],
                [
                  "test_copy_fields",
                  "test_full_name",
                  0.23752714395226102
                ],
                [
                  "test_copy_fields",
                  "test_verify_digest_sha256",
                  0.22739701341354884
                ],
                [
                  "test_copy_fields",
                  "test_verify_ecdsa",
                  0.21350420507344953
                ],
                [
                  "test_generic_signature",
                  "test_full_name",
                  0.43687488965019144
                ],
                [
                  "test_verify_digest_sha256",
                  "test_generic_signature",
                  0.3984568431916878
                ],
                [
                  "test_dump",
                  "test_verify_ecdsa",
                  0.24098563043068372
                ],
                [
                  "test_full_name",
                  "test_congestion_mark",
                  0.532651819120423
                ],
                [
                  "test_encode_decode",
                  "test_verify_ecdsa",
                  0.21863775779997943
                ],
                [
                  "test_verify_ecdsa",
                  "test_verify_digest_sha256",
                  0.9323848796425264
                ],
                [
                  "test_generic_signature",
                  "test_congestion_mark",
                  0.5426101191133249
                ],
                [
                  "test_dump",
                  "test_encode_decode",
                  0.5773502691896257
                ],
                [
                  "test_empty_signature",
                  "test_full_name",
                  0.26868266527023615
                ],
                [
                  "test_empty_signature",
                  "test_verify_digest_sha256",
                  0.3208118263409688
                ],
                [
                  "test_verify_digest_sha256",
                  "test_congestion_mark",
                  0.42451669572734946
                ],
                [
                  "test_empty_signature",
                  "test_copy_fields",
                  0.30897169910547834
                ],
                [
                  "test_empty_signature",
                  "test_congestion_mark",
                  0.26828121219517786
                ],
                [
                  "test_verify_ecdsa",
                  "test_full_name",
                  0.33680075995998277
                ],
                [
                  "test_encode_decode",
                  "test_verify",
                  0.2375429785673882
                ],
                [
                  "test_copy_fields",
                  "test_generic_signature",
                  0.20913516309257904
                ],
                [
                  "test_dump",
                  "test_verify",
                  0.2683281572999748
                ],
                [
                  "test_encode_decode",
                  "test_congestion_mark",
                  0.3077935056255462
                ],
                [
                  "test_dump",
                  "test_verify_digest_sha256",
                  0.2833333333333333
                ],
                [
                  "test_empty_signature",
                  "test_verify",
                  0.30382181012509996
                ],
                [
                  "test_verify_ecdsa",
                  "test_congestion_mark",
                  0.3721633016122446
                ],
                [
                  "test_verify_digest_sha256",
                  "test_full_name",
                  0.40936702300311645
                ],
                [
                  "test_dump",
                  "test_generic_signature",
                  0.2667563708104352
                ],
                [
                  "test_verify",
                  "test_full_name",
                  0.3537371660837711
                ],
                [
                  "test_verify",
                  "test_verify_ecdsa",
                  0.9699484522385713
                ],
                [
                  "test_empty_signature",
                  "test_generic_signature",
                  0.3590311901880411
                ],
                [
                  "test_verify",
                  "test_verify_digest_sha256",
                  0.9466021104749108
                ],
                [
                  "test_copy_fields",
                  "test_congestion_mark",
                  0.22041550751119354
                ],
                [
                  "test_verify",
                  "test_generic_signature",
                  0.36914566824293166
                ],
                [
                  "test_copy_fields",
                  "test_verify",
                  0.22188007849009164
                ],
                [
                  "test_encode_decode",
                  "test_generic_signature",
                  0.38938848253567204
                ],
                [
                  "test_encode_decode",
                  "test_empty_signature",
                  0.3399346342395189
                ],
                [
                  "test_encode_decode",
                  "test_full_name",
                  0.29323195559228143
                ],
                [
                  "test_dump",
                  "test_empty_signature",
                  0.3170375695604868
                ],
                [
                  "test_verify_ecdsa",
                  "test_generic_signature",
                  0.35521058488373486
                ],
                [
                  "test_dump",
                  "test_full_name",
                  0.27476159510039677
                ],
                [
                  "test_dump",
                  "test_congestion_mark",
                  0.24878652865881878
                ],
                [
                  "test_encode_decode",
                  "test_copy_fields",
                  0.4010243294620824
                ],
                [
                  "test_dump",
                  "test_copy_fields",
                  0.4217180976033088
                ],
                [
                  "test_empty_signature",
                  "test_verify_ecdsa",
                  0.2923526731023431
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_ecdsa",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_empty_signature",
                "false"
              ],
              [
                "test_full_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_generic_signature",
                "false"
              ],
              [
                "test_congestion_mark",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_copy_fields",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_name_methods.py",
    "testCases": [
      {
        "name": "TestNameComponentMethods",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unicode",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compare",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unicode",
                  "[]"
                ],
                [
                  "test_compare",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unicode",
                  "false"
                ],
                [
                  "test_compare",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unicode",
                  "false"
                ],
                [
                  "test_compare",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unicode",
                  "false"
                ],
                [
                  "test_compare",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unicode",
                  "false"
                ],
                [
                  "test_compare",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                "false"
              ],
              [
                "test_compare",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                "false"
              ],
              [
                "test_compare",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                []
              ],
              [
                "test_compare",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                "false"
              ],
              [
                "test_compare",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                "false"
              ],
              [
                "test_compare",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unicode",
                  "0"
                ],
                [
                  "test_compare",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unicode",
                  "0"
                ],
                [
                  "test_compare",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                "false"
              ],
              [
                "test_compare",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                "false"
              ],
              [
                "test_compare",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                "1"
              ],
              [
                "test_compare",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                [
                  "comp1",
                  "expected"
                ]
              ],
              [
                "test_compare",
                [
                  "c7f",
                  "c80",
                  "c81"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode",
                []
              ],
              [
                "test_compare",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5553017033350571,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_unicode",
                  "test_compare",
                  0.5553017033350571
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_unicode",
                "false"
              ],
              [
                "test_compare",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestNameMethods",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_uri_constructor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_subname",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_successor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_slice",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_append",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_copy_constructor",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_prefix",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_implicit_sha256_digest",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_component",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_parameters_sha256_digest",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_match",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_compare",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_clear",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_typed_name_component",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_encode_decode",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_uri_constructor",
                  "[]"
                ],
                [
                  "test_subname",
                  "[]"
                ],
                [
                  "test_get_successor",
                  "[]"
                ],
                [
                  "test_slice",
                  "[]"
                ],
                [
                  "test_append",
                  "[]"
                ],
                [
                  "test_copy_constructor",
                  "[]"
                ],
                [
                  "test_prefix",
                  "[]"
                ],
                [
                  "test_implicit_sha256_digest",
                  "[]"
                ],
                [
                  "test_get_component",
                  "[]"
                ],
                [
                  "test_parameters_sha256_digest",
                  "[]"
                ],
                [
                  "test_match",
                  "[]"
                ],
                [
                  "test_compare",
                  "[]"
                ],
                [
                  "test_clear",
                  "[]"
                ],
                [
                  "test_typed_name_component",
                  "[]"
                ],
                [
                  "test_encode_decode",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_uri_constructor",
                  "false"
                ],
                [
                  "test_subname",
                  "false"
                ],
                [
                  "test_get_successor",
                  "false"
                ],
                [
                  "test_slice",
                  "true"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_prefix",
                  "true"
                ],
                [
                  "test_implicit_sha256_digest",
                  "true"
                ],
                [
                  "test_get_component",
                  "false"
                ],
                [
                  "test_parameters_sha256_digest",
                  "true"
                ],
                [
                  "test_match",
                  "false"
                ],
                [
                  "test_compare",
                  "false"
                ],
                [
                  "test_clear",
                  "false"
                ],
                [
                  "test_typed_name_component",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_uri_constructor",
                  "false"
                ],
                [
                  "test_subname",
                  "false"
                ],
                [
                  "test_get_successor",
                  "false"
                ],
                [
                  "test_slice",
                  "false"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_prefix",
                  "false"
                ],
                [
                  "test_implicit_sha256_digest",
                  "false"
                ],
                [
                  "test_get_component",
                  "false"
                ],
                [
                  "test_parameters_sha256_digest",
                  "false"
                ],
                [
                  "test_match",
                  "false"
                ],
                [
                  "test_compare",
                  "true"
                ],
                [
                  "test_clear",
                  "false"
                ],
                [
                  "test_typed_name_component",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_uri_constructor",
                  "false"
                ],
                [
                  "test_subname",
                  "false"
                ],
                [
                  "test_get_successor",
                  "false"
                ],
                [
                  "test_slice",
                  "false"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_prefix",
                  "false"
                ],
                [
                  "test_implicit_sha256_digest",
                  "true"
                ],
                [
                  "test_get_component",
                  "false"
                ],
                [
                  "test_parameters_sha256_digest",
                  "true"
                ],
                [
                  "test_match",
                  "false"
                ],
                [
                  "test_compare",
                  "true"
                ],
                [
                  "test_clear",
                  "false"
                ],
                [
                  "test_typed_name_component",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_uri_constructor",
                  "false"
                ],
                [
                  "test_subname",
                  "false"
                ],
                [
                  "test_get_successor",
                  "false"
                ],
                [
                  "test_slice",
                  "false"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_prefix",
                  "false"
                ],
                [
                  "test_implicit_sha256_digest",
                  "false"
                ],
                [
                  "test_get_component",
                  "false"
                ],
                [
                  "test_parameters_sha256_digest",
                  "false"
                ],
                [
                  "test_match",
                  "false"
                ],
                [
                  "test_compare",
                  "false"
                ],
                [
                  "test_clear",
                  "false"
                ],
                [
                  "test_typed_name_component",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uri_constructor",
                "false"
              ],
              [
                "test_subname",
                "false"
              ],
              [
                "test_get_successor",
                "false"
              ],
              [
                "test_slice",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_prefix",
                "false"
              ],
              [
                "test_implicit_sha256_digest",
                "false"
              ],
              [
                "test_get_component",
                "false"
              ],
              [
                "test_parameters_sha256_digest",
                "false"
              ],
              [
                "test_match",
                "false"
              ],
              [
                "test_compare",
                "false"
              ],
              [
                "test_clear",
                "false"
              ],
              [
                "test_typed_name_component",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_uri_constructor",
                "false"
              ],
              [
                "test_subname",
                "false"
              ],
              [
                "test_get_successor",
                "false"
              ],
              [
                "test_slice",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_prefix",
                "false"
              ],
              [
                "test_implicit_sha256_digest",
                "true"
              ],
              [
                "test_get_component",
                "false"
              ],
              [
                "test_parameters_sha256_digest",
                "true"
              ],
              [
                "test_match",
                "false"
              ],
              [
                "test_compare",
                "false"
              ],
              [
                "test_clear",
                "false"
              ],
              [
                "test_typed_name_component",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_uri_constructor",
                [
                  "self.entree",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_subname",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_get_successor",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_slice",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_append",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_copy_constructor",
                [
                  "self.entree",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_prefix",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_implicit_sha256_digest",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_get_component",
                [
                  "self.entree",
                  "self.comp1"
                ]
              ],
              [
                "test_parameters_sha256_digest",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_match",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_compare",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_clear",
                [
                  "self.entree",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_typed_name_component",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ],
              [
                "test_encode_decode",
                [
                  "self.entree",
                  "self.expectedURI",
                  "self.comp1",
                  "self.comp2"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uri_constructor",
                "false"
              ],
              [
                "test_subname",
                "false"
              ],
              [
                "test_get_successor",
                "false"
              ],
              [
                "test_slice",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_prefix",
                "false"
              ],
              [
                "test_implicit_sha256_digest",
                "false"
              ],
              [
                "test_get_component",
                "false"
              ],
              [
                "test_parameters_sha256_digest",
                "false"
              ],
              [
                "test_match",
                "false"
              ],
              [
                "test_compare",
                "false"
              ],
              [
                "test_clear",
                "false"
              ],
              [
                "test_typed_name_component",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_uri_constructor",
                "true"
              ],
              [
                "test_subname",
                "false"
              ],
              [
                "test_get_successor",
                "false"
              ],
              [
                "test_slice",
                "true"
              ],
              [
                "test_append",
                "true"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_prefix",
                "true"
              ],
              [
                "test_implicit_sha256_digest",
                "false"
              ],
              [
                "test_get_component",
                "false"
              ],
              [
                "test_parameters_sha256_digest",
                "false"
              ],
              [
                "test_match",
                "false"
              ],
              [
                "test_compare",
                "true"
              ],
              [
                "test_clear",
                "false"
              ],
              [
                "test_typed_name_component",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_uri_constructor",
                  "0"
                ],
                [
                  "test_subname",
                  "0"
                ],
                [
                  "test_get_successor",
                  "0"
                ],
                [
                  "test_slice",
                  "0"
                ],
                [
                  "test_append",
                  "0"
                ],
                [
                  "test_copy_constructor",
                  "0"
                ],
                [
                  "test_prefix",
                  "0"
                ],
                [
                  "test_implicit_sha256_digest",
                  "0"
                ],
                [
                  "test_get_component",
                  "0"
                ],
                [
                  "test_parameters_sha256_digest",
                  "0"
                ],
                [
                  "test_match",
                  "0"
                ],
                [
                  "test_compare",
                  "0"
                ],
                [
                  "test_clear",
                  "0"
                ],
                [
                  "test_typed_name_component",
                  "0"
                ],
                [
                  "test_encode_decode",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_uri_constructor",
                  "0"
                ],
                [
                  "test_subname",
                  "0"
                ],
                [
                  "test_get_successor",
                  "0"
                ],
                [
                  "test_slice",
                  "0"
                ],
                [
                  "test_append",
                  "0"
                ],
                [
                  "test_copy_constructor",
                  "0"
                ],
                [
                  "test_prefix",
                  "0"
                ],
                [
                  "test_implicit_sha256_digest",
                  "0"
                ],
                [
                  "test_get_component",
                  "0"
                ],
                [
                  "test_parameters_sha256_digest",
                  "0"
                ],
                [
                  "test_match",
                  "0"
                ],
                [
                  "test_compare",
                  "0"
                ],
                [
                  "test_clear",
                  "0"
                ],
                [
                  "test_typed_name_component",
                  "0"
                ],
                [
                  "test_encode_decode",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_uri_constructor",
                "false"
              ],
              [
                "test_subname",
                "false"
              ],
              [
                "test_get_successor",
                "false"
              ],
              [
                "test_slice",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_prefix",
                "false"
              ],
              [
                "test_implicit_sha256_digest",
                "false"
              ],
              [
                "test_get_component",
                "false"
              ],
              [
                "test_parameters_sha256_digest",
                "false"
              ],
              [
                "test_match",
                "false"
              ],
              [
                "test_compare",
                "false"
              ],
              [
                "test_clear",
                "false"
              ],
              [
                "test_typed_name_component",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uri_constructor",
                "false"
              ],
              [
                "test_subname",
                "false"
              ],
              [
                "test_get_successor",
                "false"
              ],
              [
                "test_slice",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_prefix",
                "false"
              ],
              [
                "test_implicit_sha256_digest",
                "false"
              ],
              [
                "test_get_component",
                "false"
              ],
              [
                "test_parameters_sha256_digest",
                "false"
              ],
              [
                "test_match",
                "false"
              ],
              [
                "test_compare",
                "false"
              ],
              [
                "test_clear",
                "false"
              ],
              [
                "test_typed_name_component",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uri_constructor",
                "2"
              ],
              [
                "test_subname",
                "7"
              ],
              [
                "test_get_successor",
                "5"
              ],
              [
                "test_slice",
                "9"
              ],
              [
                "test_append",
                "6"
              ],
              [
                "test_copy_constructor",
                "1"
              ],
              [
                "test_prefix",
                "3"
              ],
              [
                "test_implicit_sha256_digest",
                "9"
              ],
              [
                "test_get_component",
                "1"
              ],
              [
                "test_parameters_sha256_digest",
                "9"
              ],
              [
                "test_match",
                "4"
              ],
              [
                "test_compare",
                "41"
              ],
              [
                "test_clear",
                "1"
              ],
              [
                "test_typed_name_component",
                "5"
              ],
              [
                "test_encode_decode",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_uri_constructor",
                [
                  "name"
                ]
              ],
              [
                "test_subname",
                [
                  "subName1",
                  "subName2",
                  "name",
                  "subName7",
                  "subName3",
                  "subName4",
                  "subName5",
                  "subName6"
                ]
              ],
              [
                "test_get_successor",
                []
              ],
              [
                "test_slice",
                [
                  "subName1",
                  "subName2",
                  "name",
                  "subName7",
                  "subName3",
                  "subName4",
                  "subName5",
                  "prefix1",
                  "subName6"
                ]
              ],
              [
                "test_append",
                [
                  "name",
                  "name2",
                  "uri"
                ]
              ],
              [
                "test_copy_constructor",
                [
                  "name",
                  "name2"
                ]
              ],
              [
                "test_prefix",
                [
                  "prefix2",
                  "name",
                  "prefix1"
                ]
              ],
              [
                "test_implicit_sha256_digest",
                [
                  "name",
                  "digest",
                  "gotError",
                  "name2"
                ]
              ],
              [
                "test_get_component",
                [
                  "comp2",
                  "name"
                ]
              ],
              [
                "test_parameters_sha256_digest",
                [
                  "name",
                  "digest",
                  "gotError",
                  "name2"
                ]
              ],
              [
                "test_match",
                [
                  "name",
                  "name2"
                ]
              ],
              [
                "test_compare",
                [
                  "expectedOrder",
                  "sortedURIs",
                  "sortedNames",
                  "names"
                ]
              ],
              [
                "test_clear",
                [
                  "name"
                ]
              ],
              [
                "test_typed_name_component",
                [
                  "decodedName",
                  "name",
                  "nameFromUri",
                  "otherTypeCode",
                  "uri"
                ]
              ],
              [
                "test_encode_decode",
                [
                  "name3",
                  "decodedName",
                  "encoding3",
                  "name",
                  "decodedName3",
                  "encoding2",
                  "decodedName2",
                  "encoding",
                  "name2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_uri_constructor",
                [
                  "self.expectedURI"
                ]
              ],
              [
                "test_subname",
                []
              ],
              [
                "test_get_successor",
                []
              ],
              [
                "test_slice",
                []
              ],
              [
                "test_append",
                []
              ],
              [
                "test_copy_constructor",
                [
                  "self.expectedURI"
                ]
              ],
              [
                "test_prefix",
                []
              ],
              [
                "test_implicit_sha256_digest",
                []
              ],
              [
                "test_get_component",
                [
                  "self.expectedURI",
                  "self.comp2"
                ]
              ],
              [
                "test_parameters_sha256_digest",
                []
              ],
              [
                "test_match",
                []
              ],
              [
                "test_compare",
                []
              ],
              [
                "test_clear",
                [
                  "self.expectedURI"
                ]
              ],
              [
                "test_typed_name_component",
                []
              ],
              [
                "test_encode_decode",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48762855154837254,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_subname",
                  "test_clear",
                  0.4175917014222978
                ],
                [
                  "test_uri_constructor",
                  "test_get_component",
                  0.5811877117829862
                ],
                [
                  "test_copy_constructor",
                  "test_get_successor",
                  0.15109662034355792
                ],
                [
                  "test_prefix",
                  "test_typed_name_component",
                  0.37931587716573156
                ],
                [
                  "test_copy_constructor",
                  "test_prefix",
                  0.4703022544346517
                ],
                [
                  "test_prefix",
                  "test_subname",
                  0.5871275990718927
                ],
                [
                  "test_get_component",
                  "test_clear",
                  0.5026155365907202
                ],
                [
                  "test_copy_constructor",
                  "test_compare",
                  0.37530908846388106
                ],
                [
                  "test_prefix",
                  "test_implicit_sha256_digest",
                  0.47627548396265545
                ],
                [
                  "test_copy_constructor",
                  "test_encode_decode",
                  0.6473894994300466
                ],
                [
                  "test_clear",
                  "test_get_successor",
                  0.12424730498438732
                ],
                [
                  "test_get_component",
                  "test_append",
                  0.6293599000924993
                ],
                [
                  "test_copy_constructor",
                  "test_match",
                  0.7486553602859252
                ],
                [
                  "test_prefix",
                  "test_encode_decode",
                  0.4863550827958134
                ],
                [
                  "test_prefix",
                  "test_compare",
                  0.42969369174231753
                ],
                [
                  "test_uri_constructor",
                  "test_append",
                  0.7416585975995608
                ],
                [
                  "test_match",
                  "test_encode_decode",
                  0.5471127430052068
                ],
                [
                  "test_copy_constructor",
                  "test_parameters_sha256_digest",
                  0.4868452270364466
                ],
                [
                  "test_parameters_sha256_digest",
                  "test_typed_name_component",
                  0.43103062494211797
                ],
                [
                  "test_append",
                  "test_get_successor",
                  0.2139207115948961
                ],
                [
                  "test_clear",
                  "test_compare",
                  0.19931581731505615
                ],
                [
                  "test_prefix",
                  "test_clear",
                  0.39773581672299296
                ],
                [
                  "test_compare",
                  "test_get_successor",
                  0.2216374175482583
                ],
                [
                  "test_uri_constructor",
                  "test_get_successor",
                  0.16652712762836383
                ],
                [
                  "test_uri_constructor",
                  "test_copy_constructor",
                  0.5567764362830021
                ],
                [
                  "test_uri_constructor",
                  "test_subname",
                  0.4578487000567903
                ],
                [
                  "test_copy_constructor",
                  "test_append",
                  0.6701394330198723
                ],
                [
                  "test_slice",
                  "test_subname",
                  0.8339321174404234
                ],
                [
                  "test_copy_constructor",
                  "test_slice",
                  0.6974599752335804
                ],
                [
                  "test_slice",
                  "test_get_successor",
                  0.18037077862077533
                ],
                [
                  "test_uri_constructor",
                  "test_compare",
                  0.35874068398736086
                ],
                [
                  "test_compare",
                  "test_encode_decode",
                  0.5568521237072678
                ],
                [
                  "test_match",
                  "test_get_successor",
                  0.15879045384807033
                ],
                [
                  "test_match",
                  "test_implicit_sha256_digest",
                  0.3702094878802527
                ],
                [
                  "test_get_component",
                  "test_prefix",
                  0.5399055247990171
                ],
                [
                  "test_subname",
                  "test_parameters_sha256_digest",
                  0.44165412844588964
                ],
                [
                  "test_compare",
                  "test_match",
                  0.28642391061819944
                ],
                [
                  "test_get_successor",
                  "test_typed_name_component",
                  0.16964985168663893
                ],
                [
                  "test_prefix",
                  "test_parameters_sha256_digest",
                  0.47627548396265545
                ],
                [
                  "test_slice",
                  "test_compare",
                  0.4408315782810856
                ],
                [
                  "test_get_component",
                  "test_slice",
                  0.6163685368651843
                ],
                [
                  "test_append",
                  "test_compare",
                  0.4723181591556628
                ],
                [
                  "test_match",
                  "test_typed_name_component",
                  0.4386344633065126
                ],
                [
                  "test_clear",
                  "test_parameters_sha256_digest",
                  0.26668937597009157
                ],
                [
                  "test_encode_decode",
                  "test_parameters_sha256_digest",
                  0.7647396376055028
                ],
                [
                  "test_copy_constructor",
                  "test_clear",
                  0.6331738236133035
                ],
                [
                  "test_append",
                  "test_implicit_sha256_digest",
                  0.6095790972599296
                ],
                [
                  "test_uri_constructor",
                  "test_parameters_sha256_digest",
                  0.42800953149773246
                ],
                [
                  "test_subname",
                  "test_compare",
                  0.44586593423848375
                ],
                [
                  "test_subname",
                  "test_match",
                  0.5723634611232101
                ],
                [
                  "test_get_component",
                  "test_encode_decode",
                  0.6825034643571253
                ],
                [
                  "test_append",
                  "test_slice",
                  0.7212892474646386
                ],
                [
                  "test_slice",
                  "test_parameters_sha256_digest",
                  0.5325020960826515
                ],
                [
                  "test_compare",
                  "test_implicit_sha256_digest",
                  0.6978271446079027
                ],
                [
                  "test_get_successor",
                  "test_parameters_sha256_digest",
                  0.2344583139463885
                ],
                [
                  "test_append",
                  "test_typed_name_component",
                  0.48509439959584066
                ],
                [
                  "test_get_successor",
                  "test_encode_decode",
                  0.22440192662296596
                ],
                [
                  "test_uri_constructor",
                  "test_implicit_sha256_digest",
                  0.42800953149773246
                ],
                [
                  "test_get_component",
                  "test_compare",
                  0.5429701401824787
                ],
                [
                  "test_get_component",
                  "test_parameters_sha256_digest",
                  0.6866975957560928
                ],
                [
                  "test_get_component",
                  "test_match",
                  0.4750168687962835
                ],
                [
                  "test_append",
                  "test_parameters_sha256_digest",
                  0.6095790972599296
                ],
                [
                  "test_slice",
                  "test_implicit_sha256_digest",
                  0.5325020960826515
                ],
                [
                  "test_encode_decode",
                  "test_typed_name_component",
                  0.5449144021841295
                ],
                [
                  "test_clear",
                  "test_typed_name_component",
                  0.372387484580831
                ],
                [
                  "test_append",
                  "test_subname",
                  0.5664702740953836
                ],
                [
                  "test_compare",
                  "test_typed_name_component",
                  0.32737289445440754
                ],
                [
                  "test_implicit_sha256_digest",
                  "test_typed_name_component",
                  0.43103062494211797
                ],
                [
                  "test_get_successor",
                  "test_implicit_sha256_digest",
                  0.2344583139463885
                ],
                [
                  "test_get_component",
                  "test_get_successor",
                  0.2222436391066507
                ],
                [
                  "test_uri_constructor",
                  "test_match",
                  0.5536690027569546
                ],
                [
                  "test_get_component",
                  "test_implicit_sha256_digest",
                  0.6866975957560928
                ],
                [
                  "test_slice",
                  "test_typed_name_component",
                  0.49228420034569353
                ],
                [
                  "test_uri_constructor",
                  "test_typed_name_component",
                  0.40787185120403724
                ],
                [
                  "test_copy_constructor",
                  "test_subname",
                  0.5820993432801828
                ],
                [
                  "test_clear",
                  "test_implicit_sha256_digest",
                  0.26668937597009157
                ],
                [
                  "test_append",
                  "test_match",
                  0.6598626946044001
                ],
                [
                  "test_subname",
                  "test_implicit_sha256_digest",
                  0.44165412844588964
                ],
                [
                  "test_get_component",
                  "test_typed_name_component",
                  0.4609937770895205
                ],
                [
                  "test_subname",
                  "test_get_successor",
                  0.140614903359431
                ],
                [
                  "test_encode_decode",
                  "test_implicit_sha256_digest",
                  0.7647396376055028
                ],
                [
                  "test_subname",
                  "test_typed_name_component",
                  0.3886557577491184
                ],
                [
                  "test_slice",
                  "test_match",
                  0.7204782739162429
                ],
                [
                  "test_implicit_sha256_digest",
                  "test_parameters_sha256_digest",
                  0.9896334295180077
                ],
                [
                  "test_append",
                  "test_prefix",
                  0.6333676756745484
                ],
                [
                  "test_get_component",
                  "test_subname",
                  0.4645093334320335
                ],
                [
                  "test_copy_constructor",
                  "test_implicit_sha256_digest",
                  0.4868452270364466
                ],
                [
                  "test_clear",
                  "test_match",
                  0.5809178640206307
                ],
                [
                  "test_match",
                  "test_parameters_sha256_digest",
                  0.3702094878802527
                ],
                [
                  "test_append",
                  "test_clear",
                  0.5193658038669485
                ],
                [
                  "test_copy_constructor",
                  "test_typed_name_component",
                  0.4860596344626534
                ],
                [
                  "test_prefix",
                  "test_get_successor",
                  0.1654415415616043
                ],
                [
                  "test_clear",
                  "test_encode_decode",
                  0.45820487896403445
                ],
                [
                  "test_uri_constructor",
                  "test_clear",
                  0.5144538430201883
                ],
                [
                  "test_slice",
                  "test_clear",
                  0.5257302373046263
                ],
                [
                  "test_slice",
                  "test_encode_decode",
                  0.6313753767324476
                ],
                [
                  "test_uri_constructor",
                  "test_encode_decode",
                  0.48584216925326557
                ],
                [
                  "test_append",
                  "test_encode_decode",
                  0.6798940157745401
                ],
                [
                  "test_uri_constructor",
                  "test_slice",
                  0.6031398605719941
                ],
                [
                  "test_uri_constructor",
                  "test_prefix",
                  0.6077631620298678
                ],
                [
                  "test_slice",
                  "test_prefix",
                  0.6839860632963725
                ],
                [
                  "test_prefix",
                  "test_match",
                  0.5177857407897897
                ],
                [
                  "test_copy_constructor",
                  "test_get_component",
                  0.6079600189283705
                ],
                [
                  "test_subname",
                  "test_encode_decode",
                  0.5167358217380845
                ],
                [
                  "test_compare",
                  "test_parameters_sha256_digest",
                  0.6978271446079027
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_uri_constructor",
                "false"
              ],
              [
                "test_subname",
                "false"
              ],
              [
                "test_get_successor",
                "false"
              ],
              [
                "test_slice",
                "true"
              ],
              [
                "test_append",
                "true"
              ],
              [
                "test_copy_constructor",
                "true"
              ],
              [
                "test_prefix",
                "true"
              ],
              [
                "test_implicit_sha256_digest",
                "true"
              ],
              [
                "test_get_component",
                "true"
              ],
              [
                "test_parameters_sha256_digest",
                "true"
              ],
              [
                "test_match",
                "false"
              ],
              [
                "test_compare",
                "true"
              ],
              [
                "test_clear",
                "true"
              ],
              [
                "test_typed_name_component",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 15
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_pib_key_impl.py",
    "testCases": [
      {
        "name": "TestPibKeyImpl",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_overwrite",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_errors",
                  "[PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail]"
                ],
                [
                  "test_certificate_operation",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_basic",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_overwrite",
                  "[]"
                ],
                [
                  "test_errors",
                  "[]"
                ],
                [
                  "test_certificate_operation",
                  "[]"
                ],
                [
                  "test_basic",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_overwrite",
                  "false"
                ],
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_certificate_operation",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_overwrite",
                  "false"
                ],
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_certificate_operation",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_overwrite",
                  "false"
                ],
                [
                  "test_errors",
                  "true"
                ],
                [
                  "test_certificate_operation",
                  "true"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_overwrite",
                  "false"
                ],
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_certificate_operation",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_certificate_operation",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_overwrite",
                "true"
              ],
              [
                "test_errors",
                "true"
              ],
              [
                "test_certificate_operation",
                "true"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                []
              ],
              [
                "test_errors",
                []
              ],
              [
                "test_certificate_operation",
                []
              ],
              [
                "test_basic",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_certificate_operation",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_certificate_operation",
                "true"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_overwrite",
                  "0"
                ],
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_certificate_operation",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_overwrite",
                  "0"
                ],
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_certificate_operation",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_certificate_operation",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_certificate_operation",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_overwrite",
                "7"
              ],
              [
                "test_errors",
                "0"
              ],
              [
                "test_certificate_operation",
                "14"
              ],
              [
                "test_basic",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                [
                  "fixture",
                  "key1",
                  "key2",
                  "pibImpl",
                  "otherCert"
                ]
              ],
              [
                "test_errors",
                [
                  "fixture",
                  "pibImpl",
                  "wrongKey",
                  "key11"
                ]
              ],
              [
                "test_certificate_operation",
                [
                  "fixture",
                  "defaultCert1",
                  "defaultCert2",
                  "defaultCert3",
                  "pibImpl",
                  "defaultCert0",
                  "key11"
                ]
              ],
              [
                "test_basic",
                [
                  "fixture",
                  "pibImpl",
                  "key11FromBackend",
                  "key11"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_errors",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_certificate_operation",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_basic",
                [
                  "self.fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7651788159328275,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_basic",
                  "test_certificate_operation",
                  0.7161214363427266
                ],
                [
                  "test_basic",
                  "test_errors",
                  0.5834152140389556
                ],
                [
                  "test_certificate_operation",
                  "test_overwrite",
                  0.8488244041022502
                ],
                [
                  "test_basic",
                  "test_overwrite",
                  0.8824888308838089
                ],
                [
                  "test_overwrite",
                  "test_errors",
                  0.7220833159814343
                ],
                [
                  "test_certificate_operation",
                  "test_errors",
                  0.8381396942477893
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_certificate_operation",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_signing_info.py",
    "testCases": [
      {
        "name": "TestSigningInfo",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_chaining",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_from_string",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_basic",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_to_string",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_chaining",
                  "[]"
                ],
                [
                  "test_from_string",
                  "[]"
                ],
                [
                  "test_basic",
                  "[]"
                ],
                [
                  "test_to_string",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_chaining",
                  "false"
                ],
                [
                  "test_from_string",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_to_string",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_chaining",
                  "false"
                ],
                [
                  "test_from_string",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_to_string",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_chaining",
                  "false"
                ],
                [
                  "test_from_string",
                  "false"
                ],
                [
                  "test_basic",
                  "true"
                ],
                [
                  "test_to_string",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_chaining",
                  "false"
                ],
                [
                  "test_from_string",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_to_string",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "false"
              ],
              [
                "test_from_string",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_to_string",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "false"
              ],
              [
                "test_from_string",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_to_string",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                []
              ],
              [
                "test_from_string",
                []
              ],
              [
                "test_basic",
                []
              ],
              [
                "test_to_string",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "false"
              ],
              [
                "test_from_string",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_to_string",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "false"
              ],
              [
                "test_from_string",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_to_string",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_chaining",
                  "0"
                ],
                [
                  "test_from_string",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_to_string",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_chaining",
                  "0"
                ],
                [
                  "test_from_string",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_to_string",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "false"
              ],
              [
                "test_from_string",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_to_string",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "false"
              ],
              [
                "test_from_string",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_to_string",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "1"
              ],
              [
                "test_from_string",
                "15"
              ],
              [
                "test_basic",
                "27"
              ],
              [
                "test_to_string",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                [
                  "info"
                ]
              ],
              [
                "test_from_string",
                [
                  "infoCert",
                  "infoId",
                  "infoKey",
                  "infoSha",
                  "infoDefault"
                ]
              ],
              [
                "test_basic",
                [
                  "infoCert",
                  "identityName",
                  "infoId",
                  "infoKey",
                  "keyName",
                  "certificateName",
                  "infoSha256",
                  "info"
                ]
              ],
              [
                "test_to_string",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                []
              ],
              [
                "test_from_string",
                []
              ],
              [
                "test_basic",
                []
              ],
              [
                "test_to_string",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5067029226049523,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_basic",
                  "test_to_string",
                  0.6240758202276946
                ],
                [
                  "test_from_string",
                  "test_to_string",
                  0.5330224991757891
                ],
                [
                  "test_to_string",
                  "test_chaining",
                  0.3178016029622766
                ],
                [
                  "test_basic",
                  "test_chaining",
                  0.327824909515672
                ],
                [
                  "test_basic",
                  "test_from_string",
                  0.9229144526226711
                ],
                [
                  "test_from_string",
                  "test_chaining",
                  0.31457825112560994
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_chaining",
                "false"
              ],
              [
                "test_from_string",
                "false"
              ],
              [
                "test_basic",
                "false"
              ],
              [
                "test_to_string",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_aes_algorithm.py",
    "testCases": [
      {
        "name": "TestAesAlgorithm",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_key_generation",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_encryption_decryption",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_key_generation",
                  "[]"
                ],
                [
                  "test_encryption_decryption",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_key_generation",
                  "false"
                ],
                [
                  "test_encryption_decryption",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_key_generation",
                  "false"
                ],
                [
                  "test_encryption_decryption",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_key_generation",
                  "false"
                ],
                [
                  "test_encryption_decryption",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_key_generation",
                  "false"
                ],
                [
                  "test_encryption_decryption",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "false"
              ],
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "false"
              ],
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                []
              ],
              [
                "test_encryption_decryption",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "false"
              ],
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "false"
              ],
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_key_generation",
                  "0"
                ],
                [
                  "test_encryption_decryption",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_key_generation",
                  "0"
                ],
                [
                  "test_encryption_decryption",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "false"
              ],
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "false"
              ],
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "1"
              ],
              [
                "test_encryption_decryption",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                [
                  "plainBlob",
                  "encryptParams",
                  "keyParams",
                  "decryptKey",
                  "cipherBlob",
                  "encryptKey",
                  "receivedBlob"
                ]
              ],
              [
                "test_encryption_decryption",
                [
                  "encryptParams",
                  "plainBlob",
                  "decryptKey",
                  "cipherBlob",
                  "encryptKey",
                  "initialVector",
                  "key",
                  "receivedBlob"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                []
              ],
              [
                "test_encryption_decryption",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.942069543560204,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_encryption_decryption",
                  "test_key_generation",
                  0.942069543560204
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_key_generation",
                "false"
              ],
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_rsa_algorithm.py",
    "testCases": [
      {
        "name": "TestRsaAlgorithm",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_encryption_decryption",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_encryption_decryption",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_encryption_decryption",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_encryption_decryption",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_encryption_decryption",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_encryption_decryption",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_encryption_decryption",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_encryption_decryption",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_encryption_decryption",
                [
                  "encryptParams",
                  "plainBlob",
                  "privateKeyBlob",
                  "derivedPublicKey",
                  "publicKeyBlob",
                  "encodedPublic",
                  "decryptKey",
                  "decryptedBlob",
                  "encryptBlob",
                  "cipherBlob",
                  "encryptKey",
                  "receivedBlob"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_encryption_decryption",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_consumer.py",
    "testCases": [
      {
        "name": "TestConsumer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_consumer_with_link",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_consume",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decrypt_content",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_consumer_with_link",
                  "[]"
                ],
                [
                  "test_consume",
                  "[]"
                ],
                [
                  "test_decrypt_content",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_consumer_with_link",
                  "true"
                ],
                [
                  "test_consume",
                  "true"
                ],
                [
                  "test_decrypt_content",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_consumer_with_link",
                  "false"
                ],
                [
                  "test_consume",
                  "false"
                ],
                [
                  "test_decrypt_content",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_consumer_with_link",
                  "false"
                ],
                [
                  "test_consume",
                  "false"
                ],
                [
                  "test_decrypt_content",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_consumer_with_link",
                  "false"
                ],
                [
                  "test_consume",
                  "false"
                ],
                [
                  "test_decrypt_content",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_consumer_with_link",
                "false"
              ],
              [
                "test_consume",
                "false"
              ],
              [
                "test_decrypt_content",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_consumer_with_link",
                "false"
              ],
              [
                "test_consume",
                "false"
              ],
              [
                "test_decrypt_content",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_consumer_with_link",
                [
                  "self.cKeyName",
                  "self.dKeyName",
                  "self.encryptionKeys",
                  "self.fixtureCKeyBlob",
                  "self.eKeyName",
                  "self.fixtureUEKeyBlob",
                  "self.decryptionKeys",
                  "self.fixtureEKeyBlob",
                  "self.fixtureDKeyBlob"
                ]
              ],
              [
                "test_consume",
                [
                  "self.cKeyName",
                  "self.dKeyName",
                  "self.encryptionKeys",
                  "self.fixtureCKeyBlob",
                  "self.certificateName",
                  "self.eKeyName",
                  "self.fixtureUEKeyBlob",
                  "self.decryptionKeys",
                  "self.fixtureEKeyBlob",
                  "self.fixtureDKeyBlob"
                ]
              ],
              [
                "test_decrypt_content",
                [
                  "self.cKeyName",
                  "self.dKeyName",
                  "self.encryptionKeys",
                  "self.groupName",
                  "self.certificateName",
                  "self.eKeyName",
                  "self.fixtureUDKeyBlob",
                  "self.fixtureUEKeyBlob",
                  "self.keyChain",
                  "self.uName",
                  "self.decryptionKeys",
                  "self.fixtureEKeyBlob",
                  "self.contentName",
                  "self.uKeyName",
                  "self.databaseFilePath"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_consumer_with_link",
                "false"
              ],
              [
                "test_consume",
                "false"
              ],
              [
                "test_decrypt_content",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_consumer_with_link",
                "true"
              ],
              [
                "test_consume",
                "true"
              ],
              [
                "test_decrypt_content",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_consumer_with_link",
                  "0"
                ],
                [
                  "test_consume",
                  "0"
                ],
                [
                  "test_decrypt_content",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_consumer_with_link",
                  "0"
                ],
                [
                  "test_consume",
                  "0"
                ],
                [
                  "test_decrypt_content",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_consumer_with_link",
                "false"
              ],
              [
                "test_consume",
                "false"
              ],
              [
                "test_decrypt_content",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_consumer_with_link",
                "false"
              ],
              [
                "test_consume",
                "false"
              ],
              [
                "test_decrypt_content",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_consumer_with_link",
                "6"
              ],
              [
                "test_consume",
                "5"
              ],
              [
                "test_decrypt_content",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_consumer_with_link",
                [
                  "cKeyCount",
                  "face",
                  "dkeyLink",
                  "dKeyCount",
                  "ckeyLink",
                  "contentData",
                  "dataLink",
                  "finalCount",
                  "cKeyData",
                  "dKeyData",
                  "contentCount",
                  "consumer"
                ]
              ],
              [
                "test_consume",
                [
                  "cKeyCount",
                  "face",
                  "dKeyCount",
                  "contentData",
                  "finalCount",
                  "cKeyData",
                  "dKeyData",
                  "contentCount",
                  "consumer"
                ]
              ],
              [
                "test_decrypt_content",
                [
                  "contentData",
                  "cKeyData",
                  "aesKeyBlob"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_consumer_with_link",
                [
                  "self.uName",
                  "self.contentName",
                  "self.certificateName",
                  "self.groupName",
                  "self.uKeyName",
                  "self.keyChain",
                  "self.databaseFilePath",
                  "self.fixtureUDKeyBlob"
                ]
              ],
              [
                "test_consume",
                [
                  "self.uName",
                  "self.contentName",
                  "self.groupName",
                  "self.uKeyName",
                  "self.keyChain",
                  "self.databaseFilePath",
                  "self.fixtureUDKeyBlob"
                ]
              ],
              [
                "test_decrypt_content",
                [
                  "self.fixtureDKeyBlob",
                  "self.fixtureCKeyBlob"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7355264567107603,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_decrypt_content",
                  "test_consume",
                  0.6496898396989046
                ],
                [
                  "test_consume",
                  "test_consumer_with_link",
                  0.907327925560565
                ],
                [
                  "test_decrypt_content",
                  "test_consumer_with_link",
                  0.6495616048728111
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_consumer_with_link",
                "false"
              ],
              [
                "test_consume",
                "false"
              ],
              [
                "test_decrypt_content",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_pib_impl.py",
    "testCases": [
      {
        "name": "TestPibImpl",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_overwrite",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_key_management",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_identity_management",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_certificate_decoding",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_clear_identities",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_tpm_locator",
                  "[PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_certificate_management",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_defaults_management",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_overwrite",
                  "[]"
                ],
                [
                  "test_key_management",
                  "[]"
                ],
                [
                  "test_identity_management",
                  "[]"
                ],
                [
                  "test_certificate_decoding",
                  "[]"
                ],
                [
                  "test_clear_identities",
                  "[]"
                ],
                [
                  "test_tpm_locator",
                  "[]"
                ],
                [
                  "test_certificate_management",
                  "[]"
                ],
                [
                  "test_defaults_management",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_overwrite",
                  "true"
                ],
                [
                  "test_key_management",
                  "true"
                ],
                [
                  "test_identity_management",
                  "true"
                ],
                [
                  "test_certificate_decoding",
                  "false"
                ],
                [
                  "test_clear_identities",
                  "true"
                ],
                [
                  "test_tpm_locator",
                  "true"
                ],
                [
                  "test_certificate_management",
                  "true"
                ],
                [
                  "test_defaults_management",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_overwrite",
                  "false"
                ],
                [
                  "test_key_management",
                  "false"
                ],
                [
                  "test_identity_management",
                  "false"
                ],
                [
                  "test_certificate_decoding",
                  "false"
                ],
                [
                  "test_clear_identities",
                  "false"
                ],
                [
                  "test_tpm_locator",
                  "false"
                ],
                [
                  "test_certificate_management",
                  "false"
                ],
                [
                  "test_defaults_management",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_overwrite",
                  "false"
                ],
                [
                  "test_key_management",
                  "true"
                ],
                [
                  "test_identity_management",
                  "true"
                ],
                [
                  "test_certificate_decoding",
                  "false"
                ],
                [
                  "test_clear_identities",
                  "false"
                ],
                [
                  "test_tpm_locator",
                  "true"
                ],
                [
                  "test_certificate_management",
                  "true"
                ],
                [
                  "test_defaults_management",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_overwrite",
                  "false"
                ],
                [
                  "test_key_management",
                  "false"
                ],
                [
                  "test_identity_management",
                  "false"
                ],
                [
                  "test_certificate_decoding",
                  "false"
                ],
                [
                  "test_clear_identities",
                  "false"
                ],
                [
                  "test_tpm_locator",
                  "false"
                ],
                [
                  "test_certificate_management",
                  "false"
                ],
                [
                  "test_defaults_management",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ],
              [
                "test_identity_management",
                "false"
              ],
              [
                "test_certificate_decoding",
                "false"
              ],
              [
                "test_clear_identities",
                "false"
              ],
              [
                "test_tpm_locator",
                "false"
              ],
              [
                "test_certificate_management",
                "false"
              ],
              [
                "test_defaults_management",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_key_management",
                "true"
              ],
              [
                "test_identity_management",
                "true"
              ],
              [
                "test_certificate_decoding",
                "false"
              ],
              [
                "test_clear_identities",
                "false"
              ],
              [
                "test_tpm_locator",
                "true"
              ],
              [
                "test_certificate_management",
                "true"
              ],
              [
                "test_defaults_management",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_overwrite",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibMemoryFixture",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_key_management",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibMemoryFixture",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_identity_management",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibMemoryFixture",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_certificate_decoding",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibImpls",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_clear_identities",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibMemoryFixture",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_tpm_locator",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibMemoryFixture",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_certificate_management",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibMemoryFixture",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_defaults_management",
                [
                  "self.pibSqlite3Fixture",
                  "self.pibMemoryFixture",
                  "self.databaseFilePath"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ],
              [
                "test_identity_management",
                "false"
              ],
              [
                "test_certificate_decoding",
                "false"
              ],
              [
                "test_clear_identities",
                "false"
              ],
              [
                "test_tpm_locator",
                "false"
              ],
              [
                "test_certificate_management",
                "false"
              ],
              [
                "test_defaults_management",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_key_management",
                "true"
              ],
              [
                "test_identity_management",
                "true"
              ],
              [
                "test_certificate_decoding",
                "false"
              ],
              [
                "test_clear_identities",
                "true"
              ],
              [
                "test_tpm_locator",
                "false"
              ],
              [
                "test_certificate_management",
                "true"
              ],
              [
                "test_defaults_management",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_overwrite",
                  "0"
                ],
                [
                  "test_key_management",
                  "0"
                ],
                [
                  "test_identity_management",
                  "0"
                ],
                [
                  "test_certificate_decoding",
                  "0"
                ],
                [
                  "test_clear_identities",
                  "0"
                ],
                [
                  "test_tpm_locator",
                  "0"
                ],
                [
                  "test_certificate_management",
                  "0"
                ],
                [
                  "test_defaults_management",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_overwrite",
                  "0"
                ],
                [
                  "test_key_management",
                  "0"
                ],
                [
                  "test_identity_management",
                  "0"
                ],
                [
                  "test_certificate_decoding",
                  "0"
                ],
                [
                  "test_clear_identities",
                  "0"
                ],
                [
                  "test_tpm_locator",
                  "0"
                ],
                [
                  "test_certificate_management",
                  "0"
                ],
                [
                  "test_defaults_management",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ],
              [
                "test_identity_management",
                "false"
              ],
              [
                "test_certificate_decoding",
                "false"
              ],
              [
                "test_clear_identities",
                "false"
              ],
              [
                "test_tpm_locator",
                "false"
              ],
              [
                "test_certificate_management",
                "false"
              ],
              [
                "test_defaults_management",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ],
              [
                "test_identity_management",
                "false"
              ],
              [
                "test_certificate_decoding",
                "false"
              ],
              [
                "test_clear_identities",
                "false"
              ],
              [
                "test_tpm_locator",
                "false"
              ],
              [
                "test_certificate_management",
                "false"
              ],
              [
                "test_defaults_management",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                "9"
              ],
              [
                "test_key_management",
                "16"
              ],
              [
                "test_identity_management",
                "11"
              ],
              [
                "test_certificate_decoding",
                "22"
              ],
              [
                "test_clear_identities",
                "7"
              ],
              [
                "test_tpm_locator",
                "10"
              ],
              [
                "test_certificate_management",
                "17"
              ],
              [
                "test_defaults_management",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                [
                  "pib",
                  "keyBits",
                  "cert",
                  "keyBits2",
                  "cert2",
                  "cert3",
                  "keyBits3"
                ]
              ],
              [
                "test_key_management",
                [
                  "pib",
                  "keyBits",
                  "keyNames"
                ]
              ],
              [
                "test_identity_management",
                [
                  "idNames",
                  "pib"
                ]
              ],
              [
                "test_certificate_decoding",
                [
                  "fixture"
                ]
              ],
              [
                "test_clear_identities",
                [
                  "pib"
                ]
              ],
              [
                "test_tpm_locator",
                [
                  "pib"
                ]
              ],
              [
                "test_certificate_management",
                [
                  "pib",
                  "certNames"
                ]
              ],
              [
                "test_defaults_management",
                [
                  "pib"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_overwrite",
                [
                  "self.pibImpls"
                ]
              ],
              [
                "test_key_management",
                [
                  "self.pibImpls"
                ]
              ],
              [
                "test_identity_management",
                [
                  "self.pibImpls"
                ]
              ],
              [
                "test_certificate_decoding",
                [
                  "self.pibMemoryFixture"
                ]
              ],
              [
                "test_clear_identities",
                [
                  "self.pibImpls"
                ]
              ],
              [
                "test_tpm_locator",
                [
                  "self.pibImpls"
                ]
              ],
              [
                "test_certificate_management",
                [
                  "self.pibImpls"
                ]
              ],
              [
                "test_defaults_management",
                [
                  "self.pibImpls"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7629543203679269,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_certificate_decoding",
                  "test_key_management",
                  0.7632191233200136
                ],
                [
                  "test_certificate_management",
                  "test_overwrite",
                  0.9332526438511322
                ],
                [
                  "test_key_management",
                  "test_certificate_management",
                  0.9201735839270035
                ],
                [
                  "test_certificate_decoding",
                  "test_identity_management",
                  0.459778514839007
                ],
                [
                  "test_certificate_decoding",
                  "test_certificate_management",
                  0.8428828331380536
                ],
                [
                  "test_key_management",
                  "test_overwrite",
                  0.891024152727616
                ],
                [
                  "test_certificate_decoding",
                  "test_tpm_locator",
                  0.7263250157464832
                ],
                [
                  "test_certificate_decoding",
                  "test_overwrite",
                  0.8709619023836362
                ],
                [
                  "test_clear_identities",
                  "test_key_management",
                  0.7478181681920354
                ],
                [
                  "test_certificate_decoding",
                  "test_clear_identities",
                  0.7143732152664941
                ],
                [
                  "test_identity_management",
                  "test_defaults_management",
                  0.6953278213034456
                ],
                [
                  "test_clear_identities",
                  "test_overwrite",
                  0.7782541903553304
                ],
                [
                  "test_clear_identities",
                  "test_certificate_management",
                  0.7632732989180276
                ],
                [
                  "test_tpm_locator",
                  "test_identity_management",
                  0.623119281471137
                ],
                [
                  "test_certificate_management",
                  "test_defaults_management",
                  0.870989959815319
                ],
                [
                  "test_defaults_management",
                  "test_overwrite",
                  0.852612939674386
                ],
                [
                  "test_tpm_locator",
                  "test_key_management",
                  0.7648542521456787
                ],
                [
                  "test_tpm_locator",
                  "test_clear_identities",
                  0.8154479838158466
                ],
                [
                  "test_key_management",
                  "test_defaults_management",
                  0.9039218090898876
                ],
                [
                  "test_tpm_locator",
                  "test_certificate_management",
                  0.8088442231225588
                ],
                [
                  "test_tpm_locator",
                  "test_defaults_management",
                  0.7145482929366719
                ],
                [
                  "test_tpm_locator",
                  "test_overwrite",
                  0.7740997815953159
                ],
                [
                  "test_identity_management",
                  "test_clear_identities",
                  0.5882435421846228
                ],
                [
                  "test_identity_management",
                  "test_overwrite",
                  0.5718726589105615
                ],
                [
                  "test_certificate_decoding",
                  "test_defaults_management",
                  0.7551982121165287
                ],
                [
                  "test_identity_management",
                  "test_key_management",
                  0.7672773276147924
                ],
                [
                  "test_clear_identities",
                  "test_defaults_management",
                  0.7368046172507389
                ],
                [
                  "test_identity_management",
                  "test_certificate_management",
                  0.7082216245896287
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_overwrite",
                "true"
              ],
              [
                "test_key_management",
                "true"
              ],
              [
                "test_identity_management",
                "true"
              ],
              [
                "test_certificate_decoding",
                "false"
              ],
              [
                "test_clear_identities",
                "false"
              ],
              [
                "test_tpm_locator",
                "false"
              ],
              [
                "test_certificate_management",
                "true"
              ],
              [
                "test_defaults_management",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_producer.py",
    "testCases": [
      {
        "name": "TestProducer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_content_key_request",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_producer_with_link",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_content_key_search",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_content_key_timeout",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_content_key_request",
                  "[]"
                ],
                [
                  "test_producer_with_link",
                  "[]"
                ],
                [
                  "test_content_key_search",
                  "[]"
                ],
                [
                  "test_content_key_timeout",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_content_key_request",
                  "true"
                ],
                [
                  "test_producer_with_link",
                  "false"
                ],
                [
                  "test_content_key_search",
                  "true"
                ],
                [
                  "test_content_key_timeout",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_content_key_request",
                  "false"
                ],
                [
                  "test_producer_with_link",
                  "false"
                ],
                [
                  "test_content_key_search",
                  "false"
                ],
                [
                  "test_content_key_timeout",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_content_key_request",
                  "false"
                ],
                [
                  "test_producer_with_link",
                  "false"
                ],
                [
                  "test_content_key_search",
                  "false"
                ],
                [
                  "test_content_key_timeout",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_content_key_request",
                  "false"
                ],
                [
                  "test_producer_with_link",
                  "false"
                ],
                [
                  "test_content_key_search",
                  "false"
                ],
                [
                  "test_content_key_timeout",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_key_request",
                "false"
              ],
              [
                "test_producer_with_link",
                "false"
              ],
              [
                "test_content_key_search",
                "false"
              ],
              [
                "test_content_key_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_content_key_request",
                "false"
              ],
              [
                "test_producer_with_link",
                "false"
              ],
              [
                "test_content_key_search",
                "false"
              ],
              [
                "test_content_key_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_content_key_request",
                [
                  "self.certificateName"
                ]
              ],
              [
                "test_producer_with_link",
                [
                  "self.decryptionKeys",
                  "self.encryptionKeys"
                ]
              ],
              [
                "test_content_key_search",
                [
                  "self.decryptionKeys",
                  "self.certificateName"
                ]
              ],
              [
                "test_content_key_timeout",
                [
                  "self.decryptionKeys",
                  "self.encryptionKeys",
                  "self.certificateName"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_key_request",
                "false"
              ],
              [
                "test_producer_with_link",
                "false"
              ],
              [
                "test_content_key_search",
                "false"
              ],
              [
                "test_content_key_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_content_key_request",
                "true"
              ],
              [
                "test_producer_with_link",
                "true"
              ],
              [
                "test_content_key_search",
                "true"
              ],
              [
                "test_content_key_timeout",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_content_key_request",
                  "0"
                ],
                [
                  "test_producer_with_link",
                  "0"
                ],
                [
                  "test_content_key_search",
                  "0"
                ],
                [
                  "test_content_key_timeout",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_content_key_request",
                  "0"
                ],
                [
                  "test_producer_with_link",
                  "0"
                ],
                [
                  "test_content_key_search",
                  "0"
                ],
                [
                  "test_content_key_timeout",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_content_key_request",
                "false"
              ],
              [
                "test_producer_with_link",
                "false"
              ],
              [
                "test_content_key_search",
                "false"
              ],
              [
                "test_content_key_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_key_request",
                "false"
              ],
              [
                "test_producer_with_link",
                "false"
              ],
              [
                "test_content_key_search",
                "false"
              ],
              [
                "test_content_key_timeout",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_content_key_request",
                "20"
              ],
              [
                "test_producer_with_link",
                "4"
              ],
              [
                "test_content_key_search",
                "7"
              ],
              [
                "test_content_key_timeout",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_content_key_request",
                [
                  "expectedInterest",
                  "testData",
                  "dataContent",
                  "prefix",
                  "expressInterestCallCount",
                  "testDb",
                  "cKeyName",
                  "suffix",
                  "initialVector",
                  "content",
                  "decryptionKey",
                  "timeMarker",
                  "encryptedData",
                  "testTime1",
                  "testTimeRounded2",
                  "testTime2",
                  "contentKeyName1",
                  "testTimeRounded1",
                  "interestName",
                  "contentKeyName2",
                  "key",
                  "contentKey",
                  "keyName",
                  "encryptedKey",
                  "params",
                  "testTimeComponent2",
                  "face",
                  "retrievedKey",
                  "decryptTest",
                  "producer",
                  "producedName",
                  "dataBlob",
                  "encryptedKeyEncoding"
                ]
              ],
              [
                "test_producer_with_link",
                [
                  "expectedInterest",
                  "face",
                  "prefix",
                  "testDb",
                  "link",
                  "producer",
                  "testTime",
                  "suffix",
                  "timeoutCount"
                ]
              ],
              [
                "test_content_key_search",
                [
                  "expectedInterest",
                  "requestCount",
                  "gotInterestName",
                  "timeMarkerFirstHop",
                  "prefix",
                  "testDb",
                  "cKeyName",
                  "keyName",
                  "timeMarkerThirdHop",
                  "suffix",
                  "face",
                  "keyData",
                  "producer",
                  "testTime",
                  "interestName",
                  "timeMarkerSecondHop"
                ]
              ],
              [
                "test_content_key_timeout",
                [
                  "expectedInterest",
                  "face",
                  "prefix",
                  "testDb",
                  "producer",
                  "testTime",
                  "suffix",
                  "timeoutCount"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_content_key_request",
                [
                  "self.decryptionKeys",
                  "self.encryptionKeys",
                  "self.databaseFilePath",
                  "self.keyChain"
                ]
              ],
              [
                "test_producer_with_link",
                [
                  "self.certificateName",
                  "self.keyChain",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_content_key_search",
                [
                  "self.encryptionKeys",
                  "self.databaseFilePath",
                  "self.keyChain"
                ]
              ],
              [
                "test_content_key_timeout",
                [
                  "self.databaseFilePath",
                  "self.keyChain"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8828042623599074,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_content_key_request",
                  "test_producer_with_link",
                  0.8367468333164015
                ],
                [
                  "test_content_key_search",
                  "test_producer_with_link",
                  0.8624893831292949
                ],
                [
                  "test_content_key_search",
                  "test_content_key_timeout",
                  0.8756658126224128
                ],
                [
                  "test_content_key_timeout",
                  "test_producer_with_link",
                  0.9737569909540074
                ],
                [
                  "test_content_key_request",
                  "test_content_key_timeout",
                  0.8400341677685148
                ],
                [
                  "test_content_key_request",
                  "test_content_key_search",
                  0.9081323863688133
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_content_key_request",
                "true"
              ],
              [
                "test_producer_with_link",
                "false"
              ],
              [
                "test_content_key_search",
                "false"
              ],
              [
                "test_content_key_timeout",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_tpm_private_key.py",
    "testCases": [
      {
        "name": "TestTpmPrivateKey",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_generate_key",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_save_load",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_rsa_decryption",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_derive_public_key",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_generate_key",
                  "[]"
                ],
                [
                  "test_save_load",
                  "[]"
                ],
                [
                  "test_rsa_decryption",
                  "[]"
                ],
                [
                  "test_derive_public_key",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_generate_key",
                  "true"
                ],
                [
                  "test_save_load",
                  "true"
                ],
                [
                  "test_rsa_decryption",
                  "false"
                ],
                [
                  "test_derive_public_key",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_generate_key",
                  "false"
                ],
                [
                  "test_save_load",
                  "false"
                ],
                [
                  "test_rsa_decryption",
                  "false"
                ],
                [
                  "test_derive_public_key",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_generate_key",
                  "false"
                ],
                [
                  "test_save_load",
                  "false"
                ],
                [
                  "test_rsa_decryption",
                  "false"
                ],
                [
                  "test_derive_public_key",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_generate_key",
                  "false"
                ],
                [
                  "test_save_load",
                  "false"
                ],
                [
                  "test_rsa_decryption",
                  "false"
                ],
                [
                  "test_derive_public_key",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "false"
              ],
              [
                "test_save_load",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_derive_public_key",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "false"
              ],
              [
                "test_save_load",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_derive_public_key",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_generate_key",
                [
                  "self.ecKeyTestData",
                  "self.rsaKeyTestData"
                ]
              ],
              [
                "test_save_load",
                [
                  "self.ecKeyTestData",
                  "self.rsaKeyTestData"
                ]
              ],
              [
                "test_rsa_decryption",
                [
                  "self.keyTestData",
                  "self.ecKeyTestData"
                ]
              ],
              [
                "test_derive_public_key",
                [
                  "self.ecKeyTestData",
                  "self.rsaKeyTestData"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "false"
              ],
              [
                "test_save_load",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_derive_public_key",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "false"
              ],
              [
                "test_save_load",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_derive_public_key",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_generate_key",
                  "0"
                ],
                [
                  "test_save_load",
                  "0"
                ],
                [
                  "test_rsa_decryption",
                  "0"
                ],
                [
                  "test_derive_public_key",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_generate_key",
                  "0"
                ],
                [
                  "test_save_load",
                  "0"
                ],
                [
                  "test_rsa_decryption",
                  "0"
                ],
                [
                  "test_derive_public_key",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "false"
              ],
              [
                "test_save_load",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_derive_public_key",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "false"
              ],
              [
                "test_save_load",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_derive_public_key",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "2"
              ],
              [
                "test_save_load",
                "3"
              ],
              [
                "test_rsa_decryption",
                "1"
              ],
              [
                "test_derive_public_key",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_generate_key",
                [
                  "result",
                  "key2",
                  "data",
                  "signature",
                  "publicKeyBits",
                  "publicKey",
                  "key"
                ]
              ],
              [
                "test_save_load",
                [
                  "key1",
                  "pkcs8",
                  "password",
                  "savedEncryptedPkcs8Key",
                  "encryptedPkcs8",
                  "encryptedKey8",
                  "pkcs1",
                  "key8",
                  "savedPkcs8Key",
                  "resavedPkcs8Key",
                  "savedPkcs1Key"
                ]
              ],
              [
                "test_rsa_decryption",
                [
                  "pkcs8",
                  "decryptedText",
                  "cipherText",
                  "plainText",
                  "cipherTextBase64",
                  "dataSet",
                  "key"
                ]
              ],
              [
                "test_derive_public_key",
                [
                  "pkcs8",
                  "expected",
                  "publicKeyBits",
                  "key"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                [
                  "self.keyTestData"
                ]
              ],
              [
                "test_save_load",
                [
                  "self.keyTestData"
                ]
              ],
              [
                "test_rsa_decryption",
                [
                  "self.rsaKeyTestData"
                ]
              ],
              [
                "test_derive_public_key",
                [
                  "self.keyTestData"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6537287057346138,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_save_load",
                  "test_rsa_decryption",
                  0.6524427133361975
                ],
                [
                  "test_derive_public_key",
                  "test_rsa_decryption",
                  0.4509958539432182
                ],
                [
                  "test_derive_public_key",
                  "test_generate_key",
                  0.7064687843323825
                ],
                [
                  "test_save_load",
                  "test_generate_key",
                  0.7011597644177306
                ],
                [
                  "test_rsa_decryption",
                  "test_generate_key",
                  0.704081133364884
                ],
                [
                  "test_save_load",
                  "test_derive_public_key",
                  0.7072239850132699
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_key",
                "false"
              ],
              [
                "test_save_load",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_derive_public_key",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_key_chain.py",
    "testCases": [
      {
        "name": "TestKeyChain",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_management",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_self_signed_cert_validity",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_management",
                  "[]"
                ],
                [
                  "test_self_signed_cert_validity",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_management",
                  "false"
                ],
                [
                  "test_self_signed_cert_validity",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_management",
                  "false"
                ],
                [
                  "test_self_signed_cert_validity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_management",
                  "true"
                ],
                [
                  "test_self_signed_cert_validity",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_management",
                  "false"
                ],
                [
                  "test_self_signed_cert_validity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_management",
                "false"
              ],
              [
                "test_self_signed_cert_validity",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_management",
                "true"
              ],
              [
                "test_self_signed_cert_validity",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_management",
                []
              ],
              [
                "test_self_signed_cert_validity",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_management",
                "false"
              ],
              [
                "test_self_signed_cert_validity",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_management",
                "true"
              ],
              [
                "test_self_signed_cert_validity",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_management",
                  "0"
                ],
                [
                  "test_self_signed_cert_validity",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_management",
                  "0"
                ],
                [
                  "test_self_signed_cert_validity",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_management",
                "false"
              ],
              [
                "test_self_signed_cert_validity",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_management",
                "false"
              ],
              [
                "test_self_signed_cert_validity",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_management",
                "23"
              ],
              [
                "test_self_signed_cert_validity",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_management",
                [
                  "key3Cert2",
                  "key2",
                  "identityName",
                  "key3Cert1",
                  "identity2Name",
                  "key3CertName",
                  "key3Cert2Name",
                  "key3",
                  "id2",
                  "key1Name",
                  "id",
                  "key"
                ]
              ],
              [
                "test_self_signed_cert_validity",
                [
                  "certificate"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_management",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_self_signed_cert_validity",
                [
                  "self._fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6324725376335458,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_management",
                  "test_self_signed_cert_validity",
                  0.6324725376335458
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_management",
                "true"
              ],
              [
                "test_self_signed_cert_validity",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_validator.py",
    "testCases": [
      {
        "name": "TestValidator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_trusted_certificate_caching",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_expired_certificate",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_nacked_interests",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_malformed_certificate",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_reset_anchors",
                  "[]"
                ],
                [
                  "test_timeouts",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_infinite_certificate_chain",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_looped_certificate_chain",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_constructor_set_validator",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_trusted_certificate_caching",
                  "[]"
                ],
                [
                  "test_expired_certificate",
                  "[]"
                ],
                [
                  "test_nacked_interests",
                  "[]"
                ],
                [
                  "test_malformed_certificate",
                  "[]"
                ],
                [
                  "test_reset_anchors",
                  "[]"
                ],
                [
                  "test_timeouts",
                  "[]"
                ],
                [
                  "test_infinite_certificate_chain",
                  "[]"
                ],
                [
                  "test_looped_certificate_chain",
                  "[]"
                ],
                [
                  "test_constructor_set_validator",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_trusted_certificate_caching",
                  "false"
                ],
                [
                  "test_expired_certificate",
                  "true"
                ],
                [
                  "test_nacked_interests",
                  "false"
                ],
                [
                  "test_malformed_certificate",
                  "true"
                ],
                [
                  "test_reset_anchors",
                  "false"
                ],
                [
                  "test_timeouts",
                  "false"
                ],
                [
                  "test_infinite_certificate_chain",
                  "false"
                ],
                [
                  "test_looped_certificate_chain",
                  "false"
                ],
                [
                  "test_constructor_set_validator",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_trusted_certificate_caching",
                  "false"
                ],
                [
                  "test_expired_certificate",
                  "false"
                ],
                [
                  "test_nacked_interests",
                  "false"
                ],
                [
                  "test_malformed_certificate",
                  "false"
                ],
                [
                  "test_reset_anchors",
                  "false"
                ],
                [
                  "test_timeouts",
                  "false"
                ],
                [
                  "test_infinite_certificate_chain",
                  "false"
                ],
                [
                  "test_looped_certificate_chain",
                  "false"
                ],
                [
                  "test_constructor_set_validator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_trusted_certificate_caching",
                  "false"
                ],
                [
                  "test_expired_certificate",
                  "false"
                ],
                [
                  "test_nacked_interests",
                  "false"
                ],
                [
                  "test_malformed_certificate",
                  "false"
                ],
                [
                  "test_reset_anchors",
                  "false"
                ],
                [
                  "test_timeouts",
                  "false"
                ],
                [
                  "test_infinite_certificate_chain",
                  "false"
                ],
                [
                  "test_looped_certificate_chain",
                  "false"
                ],
                [
                  "test_constructor_set_validator",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_trusted_certificate_caching",
                  "false"
                ],
                [
                  "test_expired_certificate",
                  "false"
                ],
                [
                  "test_nacked_interests",
                  "false"
                ],
                [
                  "test_malformed_certificate",
                  "false"
                ],
                [
                  "test_reset_anchors",
                  "false"
                ],
                [
                  "test_timeouts",
                  "false"
                ],
                [
                  "test_infinite_certificate_chain",
                  "false"
                ],
                [
                  "test_looped_certificate_chain",
                  "false"
                ],
                [
                  "test_constructor_set_validator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "false"
              ],
              [
                "test_expired_certificate",
                "false"
              ],
              [
                "test_nacked_interests",
                "false"
              ],
              [
                "test_malformed_certificate",
                "false"
              ],
              [
                "test_reset_anchors",
                "false"
              ],
              [
                "test_timeouts",
                "false"
              ],
              [
                "test_infinite_certificate_chain",
                "false"
              ],
              [
                "test_looped_certificate_chain",
                "false"
              ],
              [
                "test_constructor_set_validator",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "false"
              ],
              [
                "test_expired_certificate",
                "true"
              ],
              [
                "test_nacked_interests",
                "false"
              ],
              [
                "test_malformed_certificate",
                "true"
              ],
              [
                "test_reset_anchors",
                "false"
              ],
              [
                "test_timeouts",
                "false"
              ],
              [
                "test_infinite_certificate_chain",
                "true"
              ],
              [
                "test_looped_certificate_chain",
                "false"
              ],
              [
                "test_constructor_set_validator",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_trusted_certificate_caching",
                []
              ],
              [
                "test_expired_certificate",
                []
              ],
              [
                "test_nacked_interests",
                []
              ],
              [
                "test_malformed_certificate",
                []
              ],
              [
                "test_reset_anchors",
                []
              ],
              [
                "test_timeouts",
                []
              ],
              [
                "test_infinite_certificate_chain",
                []
              ],
              [
                "test_looped_certificate_chain",
                []
              ],
              [
                "test_constructor_set_validator",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "false"
              ],
              [
                "test_expired_certificate",
                "false"
              ],
              [
                "test_nacked_interests",
                "false"
              ],
              [
                "test_malformed_certificate",
                "false"
              ],
              [
                "test_reset_anchors",
                "false"
              ],
              [
                "test_timeouts",
                "false"
              ],
              [
                "test_infinite_certificate_chain",
                "false"
              ],
              [
                "test_looped_certificate_chain",
                "false"
              ],
              [
                "test_constructor_set_validator",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "true"
              ],
              [
                "test_expired_certificate",
                "true"
              ],
              [
                "test_nacked_interests",
                "false"
              ],
              [
                "test_malformed_certificate",
                "true"
              ],
              [
                "test_reset_anchors",
                "false"
              ],
              [
                "test_timeouts",
                "false"
              ],
              [
                "test_infinite_certificate_chain",
                "true"
              ],
              [
                "test_looped_certificate_chain",
                "true"
              ],
              [
                "test_constructor_set_validator",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_trusted_certificate_caching",
                  "0"
                ],
                [
                  "test_expired_certificate",
                  "0"
                ],
                [
                  "test_nacked_interests",
                  "0"
                ],
                [
                  "test_malformed_certificate",
                  "0"
                ],
                [
                  "test_reset_anchors",
                  "0"
                ],
                [
                  "test_timeouts",
                  "0"
                ],
                [
                  "test_infinite_certificate_chain",
                  "0"
                ],
                [
                  "test_looped_certificate_chain",
                  "0"
                ],
                [
                  "test_constructor_set_validator",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_trusted_certificate_caching",
                  "0"
                ],
                [
                  "test_expired_certificate",
                  "0"
                ],
                [
                  "test_nacked_interests",
                  "0"
                ],
                [
                  "test_malformed_certificate",
                  "0"
                ],
                [
                  "test_reset_anchors",
                  "0"
                ],
                [
                  "test_timeouts",
                  "0"
                ],
                [
                  "test_infinite_certificate_chain",
                  "0"
                ],
                [
                  "test_looped_certificate_chain",
                  "0"
                ],
                [
                  "test_constructor_set_validator",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "false"
              ],
              [
                "test_expired_certificate",
                "false"
              ],
              [
                "test_nacked_interests",
                "false"
              ],
              [
                "test_malformed_certificate",
                "false"
              ],
              [
                "test_reset_anchors",
                "false"
              ],
              [
                "test_timeouts",
                "false"
              ],
              [
                "test_infinite_certificate_chain",
                "false"
              ],
              [
                "test_looped_certificate_chain",
                "false"
              ],
              [
                "test_constructor_set_validator",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "false"
              ],
              [
                "test_expired_certificate",
                "false"
              ],
              [
                "test_nacked_interests",
                "false"
              ],
              [
                "test_malformed_certificate",
                "false"
              ],
              [
                "test_reset_anchors",
                "false"
              ],
              [
                "test_timeouts",
                "false"
              ],
              [
                "test_infinite_certificate_chain",
                "false"
              ],
              [
                "test_looped_certificate_chain",
                "false"
              ],
              [
                "test_constructor_set_validator",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "3"
              ],
              [
                "test_expired_certificate",
                "1"
              ],
              [
                "test_nacked_interests",
                "1"
              ],
              [
                "test_malformed_certificate",
                "1"
              ],
              [
                "test_reset_anchors",
                "0"
              ],
              [
                "test_timeouts",
                "1"
              ],
              [
                "test_infinite_certificate_chain",
                "4"
              ],
              [
                "test_looped_certificate_chain",
                "1"
              ],
              [
                "test_constructor_set_validator",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_trusted_certificate_caching",
                [
                  "data"
                ]
              ],
              [
                "test_expired_certificate",
                [
                  "originalProcessInterest",
                  "expiredCertificate",
                  "data",
                  "now",
                  "info"
                ]
              ],
              [
                "test_nacked_interests",
                [
                  "data",
                  "networkNack"
                ]
              ],
              [
                "test_malformed_certificate",
                [
                  "originalProcessInterest",
                  "data",
                  "malformedCertificate"
                ]
              ],
              [
                "test_reset_anchors",
                [
                  "data"
                ]
              ],
              [
                "test_timeouts",
                [
                  "data"
                ]
              ],
              [
                "test_infinite_certificate_chain",
                [
                  "parentKey",
                  "data",
                  "now",
                  "certificate",
                  "certificateName",
                  "requestedKey",
                  "params"
                ]
              ],
              [
                "test_looped_certificate_chain",
                [
                  "key1",
                  "key2",
                  "data",
                  "identity1",
                  "key3"
                ]
              ],
              [
                "test_constructor_set_validator",
                [
                  "middlePolicy",
                  "validator",
                  "innerPolicy"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_trusted_certificate_caching",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_expired_certificate",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_nacked_interests",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_malformed_certificate",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_reset_anchors",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_timeouts",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_infinite_certificate_chain",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_looped_certificate_chain",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_constructor_set_validator",
                [
                  "self._fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5639893374058572,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_nacked_interests",
                  "test_malformed_certificate",
                  0.7040225290814017
                ],
                [
                  "test_trusted_certificate_caching",
                  "test_looped_certificate_chain",
                  0.5176574803052924
                ],
                [
                  "test_infinite_certificate_chain",
                  "test_looped_certificate_chain",
                  0.6109543016931013
                ],
                [
                  "test_constructor_set_validator",
                  "test_infinite_certificate_chain",
                  0.3895816165069617
                ],
                [
                  "test_constructor_set_validator",
                  "test_expired_certificate",
                  0.3836022449082824
                ],
                [
                  "test_timeouts",
                  "test_trusted_certificate_caching",
                  0.8604091281998638
                ],
                [
                  "test_timeouts",
                  "test_infinite_certificate_chain",
                  0.7592760625242624
                ],
                [
                  "test_nacked_interests",
                  "test_trusted_certificate_caching",
                  0.6812919890265586
                ],
                [
                  "test_expired_certificate",
                  "test_infinite_certificate_chain",
                  0.8750478293205829
                ],
                [
                  "test_expired_certificate",
                  "test_trusted_certificate_caching",
                  0.7517642621605095
                ],
                [
                  "test_constructor_set_validator",
                  "test_timeouts",
                  0.31645512082801547
                ],
                [
                  "test_constructor_set_validator",
                  "test_looped_certificate_chain",
                  0.222815966633365
                ],
                [
                  "test_constructor_set_validator",
                  "test_reset_anchors",
                  0.22406831897938612
                ],
                [
                  "test_reset_anchors",
                  "test_looped_certificate_chain",
                  0.39595631867160475
                ],
                [
                  "test_timeouts",
                  "test_expired_certificate",
                  0.7526947334320144
                ],
                [
                  "test_timeouts",
                  "test_looped_certificate_chain",
                  0.48728455060210923
                ],
                [
                  "test_nacked_interests",
                  "test_infinite_certificate_chain",
                  0.6318196523450965
                ],
                [
                  "test_malformed_certificate",
                  "test_expired_certificate",
                  0.7996749000337648
                ],
                [
                  "test_expired_certificate",
                  "test_looped_certificate_chain",
                  0.5200647787776871
                ],
                [
                  "test_malformed_certificate",
                  "test_looped_certificate_chain",
                  0.43651095084755215
                ],
                [
                  "test_constructor_set_validator",
                  "test_malformed_certificate",
                  0.25687040446902815
                ],
                [
                  "test_malformed_certificate",
                  "test_infinite_certificate_chain",
                  0.6795011490520072
                ],
                [
                  "test_nacked_interests",
                  "test_expired_certificate",
                  0.7373210997303145
                ],
                [
                  "test_reset_anchors",
                  "test_infinite_certificate_chain",
                  0.49767922891485733
                ],
                [
                  "test_timeouts",
                  "test_malformed_certificate",
                  0.6702046449707543
                ],
                [
                  "test_malformed_certificate",
                  "test_trusted_certificate_caching",
                  0.6820279962187648
                ],
                [
                  "test_timeouts",
                  "test_reset_anchors",
                  0.6952769591074811
                ],
                [
                  "test_constructor_set_validator",
                  "test_nacked_interests",
                  0.2675647755047534
                ],
                [
                  "test_nacked_interests",
                  "test_looped_certificate_chain",
                  0.3941708096945884
                ],
                [
                  "test_expired_certificate",
                  "test_reset_anchors",
                  0.5442787420922037
                ],
                [
                  "test_reset_anchors",
                  "test_trusted_certificate_caching",
                  0.564636174325051
                ],
                [
                  "test_trusted_certificate_caching",
                  "test_infinite_certificate_chain",
                  0.8031060517374208
                ],
                [
                  "test_constructor_set_validator",
                  "test_trusted_certificate_caching",
                  0.3017209458158534
                ],
                [
                  "test_timeouts",
                  "test_nacked_interests",
                  0.7517309741553295
                ],
                [
                  "test_malformed_certificate",
                  "test_reset_anchors",
                  0.5627748595326502
                ],
                [
                  "test_nacked_interests",
                  "test_reset_anchors",
                  0.5737985964123903
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_trusted_certificate_caching",
                "true"
              ],
              [
                "test_expired_certificate",
                "false"
              ],
              [
                "test_nacked_interests",
                "true"
              ],
              [
                "test_malformed_certificate",
                "false"
              ],
              [
                "test_reset_anchors",
                "false"
              ],
              [
                "test_timeouts",
                "true"
              ],
              [
                "test_infinite_certificate_chain",
                "false"
              ],
              [
                "test_looped_certificate_chain",
                "false"
              ],
              [
                "test_constructor_set_validator",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      },
      {
        "name": "TestValidatorInterestOnly",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_validate_interests_but_bypass_for_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                [
                  "data",
                  "interest"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                [
                  "self._fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_interests_but_bypass_for_data",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_control_response.py",
    "testCases": [
      {
        "name": "TestControlResponse",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_encode",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_decode",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_encode",
                  "[]"
                ],
                [
                  "test_decode",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_encode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_encode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_encode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_encode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                []
              ],
              [
                "test_decode",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_encode",
                "false"
              ],
              [
                "test_decode",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_encode",
                  "0"
                ],
                [
                  "test_decode",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_encode",
                  "0"
                ],
                [
                  "test_decode",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                "1"
              ],
              [
                "test_decode",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                [
                  "wire",
                  "response"
                ]
              ],
              [
                "test_decode",
                [
                  "response"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                []
              ],
              [
                "test_decode",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6166089039638531,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_encode",
                  "test_decode",
                  0.6166089039638531
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_encode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_interest_methods.py",
    "testCases": [
      {
        "name": "TestInterestDump",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_create_fresh",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_dump",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_redecode",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decode_v03_as_v02",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "[]"
                ],
                [
                  "test_create_fresh",
                  "[]"
                ],
                [
                  "test_dump",
                  "[]"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "[]"
                ],
                [
                  "test_redecode",
                  "[]"
                ],
                [
                  "test_decode_v03_as_v02",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "false"
                ],
                [
                  "test_create_fresh",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "false"
                ],
                [
                  "test_redecode",
                  "false"
                ],
                [
                  "test_decode_v03_as_v02",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "false"
                ],
                [
                  "test_create_fresh",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "false"
                ],
                [
                  "test_redecode",
                  "false"
                ],
                [
                  "test_decode_v03_as_v02",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "false"
                ],
                [
                  "test_create_fresh",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "false"
                ],
                [
                  "test_redecode",
                  "false"
                ],
                [
                  "test_decode_v03_as_v02",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "false"
                ],
                [
                  "test_create_fresh",
                  "false"
                ],
                [
                  "test_dump",
                  "false"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "false"
                ],
                [
                  "test_redecode",
                  "false"
                ],
                [
                  "test_decode_v03_as_v02",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "false"
              ],
              [
                "test_create_fresh",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "false"
              ],
              [
                "test_redecode",
                "false"
              ],
              [
                "test_decode_v03_as_v02",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "false"
              ],
              [
                "test_create_fresh",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "false"
              ],
              [
                "test_redecode",
                "false"
              ],
              [
                "test_decode_v03_as_v02",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_create_fresh",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_dump",
                []
              ],
              [
                "test_no_selectors_must_be_fresh",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_redecode",
                []
              ],
              [
                "test_decode_v03_as_v02",
                [
                  "self.referenceInterest"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "false"
              ],
              [
                "test_create_fresh",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "false"
              ],
              [
                "test_redecode",
                "false"
              ],
              [
                "test_decode_v03_as_v02",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "false"
              ],
              [
                "test_create_fresh",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "false"
              ],
              [
                "test_redecode",
                "false"
              ],
              [
                "test_decode_v03_as_v02",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "0"
                ],
                [
                  "test_create_fresh",
                  "0"
                ],
                [
                  "test_dump",
                  "0"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "0"
                ],
                [
                  "test_redecode",
                  "0"
                ],
                [
                  "test_decode_v03_as_v02",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "0"
                ],
                [
                  "test_create_fresh",
                  "0"
                ],
                [
                  "test_dump",
                  "0"
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "0"
                ],
                [
                  "test_redecode",
                  "0"
                ],
                [
                  "test_decode_v03_as_v02",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "false"
              ],
              [
                "test_create_fresh",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "false"
              ],
              [
                "test_redecode",
                "false"
              ],
              [
                "test_decode_v03_as_v02",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "false"
              ],
              [
                "test_create_fresh",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "false"
              ],
              [
                "test_redecode",
                "false"
              ],
              [
                "test_decode_v03_as_v02",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "1"
              ],
              [
                "test_create_fresh",
                "2"
              ],
              [
                "test_dump",
                "1"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "1"
              ],
              [
                "test_redecode",
                "1"
              ],
              [
                "test_decode_v03_as_v02",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                [
                  "interest",
                  "redecodedDump",
                  "dump",
                  "encoding",
                  "reDecodedInterest"
                ]
              ],
              [
                "test_create_fresh",
                [
                  "freshDump",
                  "freshInterest",
                  "reDecodedFreshDump",
                  "reDecodedFreshInterest"
                ]
              ],
              [
                "test_dump",
                [
                  "decodedDump"
                ]
              ],
              [
                "test_no_selectors_must_be_fresh",
                [
                  "interest"
                ]
              ],
              [
                "test_redecode",
                [
                  "redecodedDump",
                  "encoding",
                  "reDecodedInterest"
                ]
              ],
              [
                "test_decode_v03_as_v02",
                [
                  "interest1",
                  "dump1",
                  "dump2",
                  "interest2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                []
              ],
              [
                "test_create_fresh",
                []
              ],
              [
                "test_dump",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_no_selectors_must_be_fresh",
                []
              ],
              [
                "test_redecode",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_decode_v03_as_v02",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.39125757492645963,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_redecode_implicit_digest_exclude",
                  "test_decode_v03_as_v02",
                  0.48165211697872384
                ],
                [
                  "test_create_fresh",
                  "test_decode_v03_as_v02",
                  0.37878796782780544
                ],
                [
                  "test_redecode",
                  "test_no_selectors_must_be_fresh",
                  0.20770964681638046
                ],
                [
                  "test_no_selectors_must_be_fresh",
                  "test_decode_v03_as_v02",
                  0.26302277094805093
                ],
                [
                  "test_dump",
                  "test_redecode_implicit_digest_exclude",
                  0.4205625941793868
                ],
                [
                  "test_dump",
                  "test_decode_v03_as_v02",
                  0.300505120771961
                ],
                [
                  "test_redecode",
                  "test_redecode_implicit_digest_exclude",
                  0.7387487426998531
                ],
                [
                  "test_redecode_implicit_digest_exclude",
                  "test_no_selectors_must_be_fresh",
                  0.22570724319392213
                ],
                [
                  "test_redecode",
                  "test_create_fresh",
                  0.6058459646804953
                ],
                [
                  "test_create_fresh",
                  "test_no_selectors_must_be_fresh",
                  0.25098867384426454
                ],
                [
                  "test_dump",
                  "test_create_fresh",
                  0.43725219610466987
                ],
                [
                  "test_redecode",
                  "test_decode_v03_as_v02",
                  0.43370113158761775
                ],
                [
                  "test_dump",
                  "test_no_selectors_must_be_fresh",
                  0.08858233390878899
                ],
                [
                  "test_redecode_implicit_digest_exclude",
                  "test_create_fresh",
                  0.5240308046358155
                ],
                [
                  "test_dump",
                  "test_redecode",
                  0.511766315719159
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_redecode_implicit_digest_exclude",
                "false"
              ],
              [
                "test_create_fresh",
                "false"
              ],
              [
                "test_dump",
                "false"
              ],
              [
                "test_no_selectors_must_be_fresh",
                "true"
              ],
              [
                "test_redecode",
                "false"
              ],
              [
                "test_decode_v03_as_v02",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "TestInterestMethods",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_exclude_matches",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_interest_filter_matching",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_set_application_parameters",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_copy_constructor",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_verify_digest_sha256",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_matches_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_empty_nonce",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_set_removes_nonce",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_refresh_nonce",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_append_parameters_digest",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_exclude_matches",
                  "[]"
                ],
                [
                  "test_interest_filter_matching",
                  "[]"
                ],
                [
                  "test_set_application_parameters",
                  "[]"
                ],
                [
                  "test_copy_constructor",
                  "[]"
                ],
                [
                  "test_verify_digest_sha256",
                  "[]"
                ],
                [
                  "test_matches_data",
                  "[]"
                ],
                [
                  "test_empty_nonce",
                  "[]"
                ],
                [
                  "test_set_removes_nonce",
                  "[]"
                ],
                [
                  "test_refresh_nonce",
                  "[]"
                ],
                [
                  "test_append_parameters_digest",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_exclude_matches",
                  "false"
                ],
                [
                  "test_interest_filter_matching",
                  "false"
                ],
                [
                  "test_set_application_parameters",
                  "false"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_matches_data",
                  "false"
                ],
                [
                  "test_empty_nonce",
                  "false"
                ],
                [
                  "test_set_removes_nonce",
                  "false"
                ],
                [
                  "test_refresh_nonce",
                  "false"
                ],
                [
                  "test_append_parameters_digest",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_exclude_matches",
                  "false"
                ],
                [
                  "test_interest_filter_matching",
                  "false"
                ],
                [
                  "test_set_application_parameters",
                  "false"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_matches_data",
                  "false"
                ],
                [
                  "test_empty_nonce",
                  "false"
                ],
                [
                  "test_set_removes_nonce",
                  "false"
                ],
                [
                  "test_refresh_nonce",
                  "false"
                ],
                [
                  "test_append_parameters_digest",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_exclude_matches",
                  "true"
                ],
                [
                  "test_interest_filter_matching",
                  "false"
                ],
                [
                  "test_set_application_parameters",
                  "true"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_matches_data",
                  "false"
                ],
                [
                  "test_empty_nonce",
                  "false"
                ],
                [
                  "test_set_removes_nonce",
                  "false"
                ],
                [
                  "test_refresh_nonce",
                  "false"
                ],
                [
                  "test_append_parameters_digest",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_exclude_matches",
                  "false"
                ],
                [
                  "test_interest_filter_matching",
                  "false"
                ],
                [
                  "test_set_application_parameters",
                  "false"
                ],
                [
                  "test_copy_constructor",
                  "false"
                ],
                [
                  "test_verify_digest_sha256",
                  "false"
                ],
                [
                  "test_matches_data",
                  "false"
                ],
                [
                  "test_empty_nonce",
                  "false"
                ],
                [
                  "test_set_removes_nonce",
                  "false"
                ],
                [
                  "test_refresh_nonce",
                  "false"
                ],
                [
                  "test_append_parameters_digest",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exclude_matches",
                "false"
              ],
              [
                "test_interest_filter_matching",
                "false"
              ],
              [
                "test_set_application_parameters",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_matches_data",
                "false"
              ],
              [
                "test_empty_nonce",
                "false"
              ],
              [
                "test_set_removes_nonce",
                "false"
              ],
              [
                "test_refresh_nonce",
                "false"
              ],
              [
                "test_append_parameters_digest",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_exclude_matches",
                "false"
              ],
              [
                "test_interest_filter_matching",
                "false"
              ],
              [
                "test_set_application_parameters",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_matches_data",
                "false"
              ],
              [
                "test_empty_nonce",
                "false"
              ],
              [
                "test_set_removes_nonce",
                "false"
              ],
              [
                "test_refresh_nonce",
                "false"
              ],
              [
                "test_append_parameters_digest",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_exclude_matches",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_interest_filter_matching",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_set_application_parameters",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_copy_constructor",
                []
              ],
              [
                "test_verify_digest_sha256",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_matches_data",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_empty_nonce",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_set_removes_nonce",
                []
              ],
              [
                "test_refresh_nonce",
                []
              ],
              [
                "test_append_parameters_digest",
                [
                  "self.referenceInterest"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exclude_matches",
                "false"
              ],
              [
                "test_interest_filter_matching",
                "false"
              ],
              [
                "test_set_application_parameters",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_matches_data",
                "false"
              ],
              [
                "test_empty_nonce",
                "false"
              ],
              [
                "test_set_removes_nonce",
                "false"
              ],
              [
                "test_refresh_nonce",
                "false"
              ],
              [
                "test_append_parameters_digest",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_exclude_matches",
                "false"
              ],
              [
                "test_interest_filter_matching",
                "false"
              ],
              [
                "test_set_application_parameters",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "true"
              ],
              [
                "test_matches_data",
                "false"
              ],
              [
                "test_empty_nonce",
                "false"
              ],
              [
                "test_set_removes_nonce",
                "false"
              ],
              [
                "test_refresh_nonce",
                "true"
              ],
              [
                "test_append_parameters_digest",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_exclude_matches",
                  "0"
                ],
                [
                  "test_interest_filter_matching",
                  "0"
                ],
                [
                  "test_set_application_parameters",
                  "0"
                ],
                [
                  "test_copy_constructor",
                  "0"
                ],
                [
                  "test_verify_digest_sha256",
                  "0"
                ],
                [
                  "test_matches_data",
                  "0"
                ],
                [
                  "test_empty_nonce",
                  "0"
                ],
                [
                  "test_set_removes_nonce",
                  "0"
                ],
                [
                  "test_refresh_nonce",
                  "0"
                ],
                [
                  "test_append_parameters_digest",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_exclude_matches",
                  "0"
                ],
                [
                  "test_interest_filter_matching",
                  "0"
                ],
                [
                  "test_set_application_parameters",
                  "0"
                ],
                [
                  "test_copy_constructor",
                  "0"
                ],
                [
                  "test_verify_digest_sha256",
                  "0"
                ],
                [
                  "test_matches_data",
                  "0"
                ],
                [
                  "test_empty_nonce",
                  "0"
                ],
                [
                  "test_set_removes_nonce",
                  "0"
                ],
                [
                  "test_refresh_nonce",
                  "0"
                ],
                [
                  "test_append_parameters_digest",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_exclude_matches",
                "false"
              ],
              [
                "test_interest_filter_matching",
                "false"
              ],
              [
                "test_set_application_parameters",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_matches_data",
                "false"
              ],
              [
                "test_empty_nonce",
                "false"
              ],
              [
                "test_set_removes_nonce",
                "false"
              ],
              [
                "test_refresh_nonce",
                "false"
              ],
              [
                "test_append_parameters_digest",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exclude_matches",
                "false"
              ],
              [
                "test_interest_filter_matching",
                "false"
              ],
              [
                "test_set_application_parameters",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_matches_data",
                "false"
              ],
              [
                "test_empty_nonce",
                "false"
              ],
              [
                "test_set_removes_nonce",
                "false"
              ],
              [
                "test_refresh_nonce",
                "false"
              ],
              [
                "test_append_parameters_digest",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_exclude_matches",
                "3"
              ],
              [
                "test_interest_filter_matching",
                "13"
              ],
              [
                "test_set_application_parameters",
                "5"
              ],
              [
                "test_copy_constructor",
                "1"
              ],
              [
                "test_verify_digest_sha256",
                "2"
              ],
              [
                "test_matches_data",
                "15"
              ],
              [
                "test_empty_nonce",
                "1"
              ],
              [
                "test_set_removes_nonce",
                "2"
              ],
              [
                "test_refresh_nonce",
                "3"
              ],
              [
                "test_append_parameters_digest",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_exclude_matches",
                [
                  "component",
                  "exclude"
                ]
              ],
              [
                "test_interest_filter_matching",
                []
              ],
              [
                "test_set_application_parameters",
                [
                  "interest",
                  "applicationParameters",
                  "decodedInterest"
                ]
              ],
              [
                "test_copy_constructor",
                [
                  "interest"
                ]
              ],
              [
                "test_verify_digest_sha256",
                [
                  "verifiedCallback",
                  "interest",
                  "failedCallback",
                  "identityStorage",
                  "keyChain"
                ]
              ],
              [
                "test_matches_data",
                [
                  "data7",
                  "data6",
                  "data",
                  "data5",
                  "signature",
                  "data4",
                  "data3",
                  "data2",
                  "interest7b",
                  "data1",
                  "signature3",
                  "interest1",
                  "interest",
                  "interest7",
                  "interest8",
                  "interest3",
                  "interest2",
                  "interest5",
                  "interest4"
                ]
              ],
              [
                "test_empty_nonce",
                [
                  "freshInterest"
                ]
              ],
              [
                "test_set_removes_nonce",
                [
                  "interest"
                ]
              ],
              [
                "test_refresh_nonce",
                [
                  "interest",
                  "oldNonce"
                ]
              ],
              [
                "test_append_parameters_digest",
                [
                  "interest",
                  "name",
                  "SHA256_LENGTH",
                  "applicationParameters"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_exclude_matches",
                []
              ],
              [
                "test_interest_filter_matching",
                []
              ],
              [
                "test_set_application_parameters",
                []
              ],
              [
                "test_copy_constructor",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_verify_digest_sha256",
                []
              ],
              [
                "test_matches_data",
                []
              ],
              [
                "test_empty_nonce",
                []
              ],
              [
                "test_set_removes_nonce",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_refresh_nonce",
                [
                  "self.referenceInterest"
                ]
              ],
              [
                "test_append_parameters_digest",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3218269977815124,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_verify_digest_sha256",
                  "test_matches_data",
                  0.6325930295071064
                ],
                [
                  "test_empty_nonce",
                  "test_matches_data",
                  0.1570322693235036
                ],
                [
                  "test_set_removes_nonce",
                  "test_set_application_parameters",
                  0.32235295999785285
                ],
                [
                  "test_refresh_nonce",
                  "test_matches_data",
                  0.2200408141230344
                ],
                [
                  "test_verify_digest_sha256",
                  "test_set_application_parameters",
                  0.3748887684648396
                ],
                [
                  "test_empty_nonce",
                  "test_append_parameters_digest",
                  0.16288220358559116
                ],
                [
                  "test_exclude_matches",
                  "test_interest_filter_matching",
                  0.18258908260914686
                ],
                [
                  "test_interest_filter_matching",
                  "test_set_application_parameters",
                  0.35329305255405735
                ],
                [
                  "test_empty_nonce",
                  "test_set_removes_nonce",
                  0.5053652107611433
                ],
                [
                  "test_set_removes_nonce",
                  "test_refresh_nonce",
                  0.37352108685170693
                ],
                [
                  "test_exclude_matches",
                  "test_verify_digest_sha256",
                  0.27633196928187687
                ],
                [
                  "test_copy_constructor",
                  "test_empty_nonce",
                  0.28128433856309726
                ],
                [
                  "test_set_removes_nonce",
                  "test_matches_data",
                  0.3977780553233694
                ],
                [
                  "test_exclude_matches",
                  "test_set_application_parameters",
                  0.22933599557595127
                ],
                [
                  "test_empty_nonce",
                  "test_set_application_parameters",
                  0.16944976323857572
                ],
                [
                  "test_empty_nonce",
                  "test_verify_digest_sha256",
                  0.2069802467478306
                ],
                [
                  "test_verify_digest_sha256",
                  "test_append_parameters_digest",
                  0.6023460565763717
                ],
                [
                  "test_refresh_nonce",
                  "test_verify_digest_sha256",
                  0.22256328926282304
                ],
                [
                  "test_copy_constructor",
                  "test_set_application_parameters",
                  0.22949123682928538
                ],
                [
                  "test_matches_data",
                  "test_append_parameters_digest",
                  0.6367644764633521
                ],
                [
                  "test_refresh_nonce",
                  "test_set_application_parameters",
                  0.2518311258631033
                ],
                [
                  "test_copy_constructor",
                  "test_verify_digest_sha256",
                  0.25228797447572415
                ],
                [
                  "test_set_application_parameters",
                  "test_append_parameters_digest",
                  0.6685418312968431
                ],
                [
                  "test_matches_data",
                  "test_interest_filter_matching",
                  0.42402916451601663
                ],
                [
                  "test_set_removes_nonce",
                  "test_append_parameters_digest",
                  0.4340245409425236
                ],
                [
                  "test_interest_filter_matching",
                  "test_append_parameters_digest",
                  0.4457534002362116
                ],
                [
                  "test_set_removes_nonce",
                  "test_verify_digest_sha256",
                  0.3900863377272134
                ],
                [
                  "test_refresh_nonce",
                  "test_exclude_matches",
                  0.26239752097989316
                ],
                [
                  "test_copy_constructor",
                  "test_append_parameters_digest",
                  0.23671709997957588
                ],
                [
                  "test_exclude_matches",
                  "test_matches_data",
                  0.40447590921801607
                ],
                [
                  "test_verify_digest_sha256",
                  "test_interest_filter_matching",
                  0.3367523976481898
                ],
                [
                  "test_set_removes_nonce",
                  "test_exclude_matches",
                  0.20234530523582606
                ],
                [
                  "test_set_removes_nonce",
                  "test_interest_filter_matching",
                  0.36210826098266596
                ],
                [
                  "test_copy_constructor",
                  "test_matches_data",
                  0.2533856744240349
                ],
                [
                  "test_empty_nonce",
                  "test_exclude_matches",
                  0.11116714294074974
                ],
                [
                  "test_refresh_nonce",
                  "test_interest_filter_matching",
                  0.26586687863625547
                ],
                [
                  "test_exclude_matches",
                  "test_append_parameters_digest",
                  0.3543827773664297
                ],
                [
                  "test_empty_nonce",
                  "test_interest_filter_matching",
                  0.23778915568583467
                ],
                [
                  "test_refresh_nonce",
                  "test_append_parameters_digest",
                  0.29574238257529467
                ],
                [
                  "test_matches_data",
                  "test_set_application_parameters",
                  0.42022637324875667
                ],
                [
                  "test_copy_constructor",
                  "test_set_removes_nonce",
                  0.35466036164961473
                ],
                [
                  "test_copy_constructor",
                  "test_refresh_nonce",
                  0.2397561119080782
                ],
                [
                  "test_copy_constructor",
                  "test_exclude_matches",
                  0.1838948890284144
                ],
                [
                  "test_copy_constructor",
                  "test_interest_filter_matching",
                  0.284755988261316
                ],
                [
                  "test_empty_nonce",
                  "test_refresh_nonce",
                  0.2723523897009611
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_exclude_matches",
                "false"
              ],
              [
                "test_interest_filter_matching",
                "true"
              ],
              [
                "test_set_application_parameters",
                "false"
              ],
              [
                "test_copy_constructor",
                "false"
              ],
              [
                "test_verify_digest_sha256",
                "false"
              ],
              [
                "test_matches_data",
                "true"
              ],
              [
                "test_empty_nonce",
                "false"
              ],
              [
                "test_set_removes_nonce",
                "false"
              ],
              [
                "test_refresh_nonce",
                "false"
              ],
              [
                "test_append_parameters_digest",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_name_conventions.py",
    "testCases": [
      {
        "name": "TestNameConventions",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testSequenceNumber",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "testVersion",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "testTimestamp",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "testNumberWithMarker",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "testSegment",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "testSegmentOffset",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testSequenceNumber",
                  "[]"
                ],
                [
                  "testVersion",
                  "[]"
                ],
                [
                  "testTimestamp",
                  "[]"
                ],
                [
                  "testNumberWithMarker",
                  "[]"
                ],
                [
                  "testSegment",
                  "[]"
                ],
                [
                  "testSegmentOffset",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testSequenceNumber",
                  "false"
                ],
                [
                  "testVersion",
                  "false"
                ],
                [
                  "testTimestamp",
                  "false"
                ],
                [
                  "testNumberWithMarker",
                  "false"
                ],
                [
                  "testSegment",
                  "false"
                ],
                [
                  "testSegmentOffset",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testSequenceNumber",
                  "false"
                ],
                [
                  "testVersion",
                  "false"
                ],
                [
                  "testTimestamp",
                  "false"
                ],
                [
                  "testNumberWithMarker",
                  "false"
                ],
                [
                  "testSegment",
                  "false"
                ],
                [
                  "testSegmentOffset",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testSequenceNumber",
                  "false"
                ],
                [
                  "testVersion",
                  "false"
                ],
                [
                  "testTimestamp",
                  "false"
                ],
                [
                  "testNumberWithMarker",
                  "false"
                ],
                [
                  "testSegment",
                  "false"
                ],
                [
                  "testSegmentOffset",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testSequenceNumber",
                  "false"
                ],
                [
                  "testVersion",
                  "false"
                ],
                [
                  "testTimestamp",
                  "false"
                ],
                [
                  "testNumberWithMarker",
                  "false"
                ],
                [
                  "testSegment",
                  "false"
                ],
                [
                  "testSegmentOffset",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "false"
              ],
              [
                "testVersion",
                "false"
              ],
              [
                "testTimestamp",
                "false"
              ],
              [
                "testNumberWithMarker",
                "false"
              ],
              [
                "testSegment",
                "false"
              ],
              [
                "testSegmentOffset",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "false"
              ],
              [
                "testVersion",
                "false"
              ],
              [
                "testTimestamp",
                "false"
              ],
              [
                "testNumberWithMarker",
                "false"
              ],
              [
                "testSegment",
                "false"
              ],
              [
                "testSegmentOffset",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                []
              ],
              [
                "testVersion",
                []
              ],
              [
                "testTimestamp",
                []
              ],
              [
                "testNumberWithMarker",
                []
              ],
              [
                "testSegment",
                []
              ],
              [
                "testSegmentOffset",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "false"
              ],
              [
                "testVersion",
                "false"
              ],
              [
                "testTimestamp",
                "false"
              ],
              [
                "testNumberWithMarker",
                "false"
              ],
              [
                "testSegment",
                "false"
              ],
              [
                "testSegmentOffset",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "false"
              ],
              [
                "testVersion",
                "false"
              ],
              [
                "testTimestamp",
                "false"
              ],
              [
                "testNumberWithMarker",
                "false"
              ],
              [
                "testSegment",
                "false"
              ],
              [
                "testSegmentOffset",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testSequenceNumber",
                  "0"
                ],
                [
                  "testVersion",
                  "0"
                ],
                [
                  "testTimestamp",
                  "0"
                ],
                [
                  "testNumberWithMarker",
                  "0"
                ],
                [
                  "testSegment",
                  "0"
                ],
                [
                  "testSegmentOffset",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testSequenceNumber",
                  "0"
                ],
                [
                  "testVersion",
                  "0"
                ],
                [
                  "testTimestamp",
                  "0"
                ],
                [
                  "testNumberWithMarker",
                  "0"
                ],
                [
                  "testSegment",
                  "0"
                ],
                [
                  "testSegmentOffset",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "false"
              ],
              [
                "testVersion",
                "false"
              ],
              [
                "testTimestamp",
                "false"
              ],
              [
                "testNumberWithMarker",
                "false"
              ],
              [
                "testSegment",
                "false"
              ],
              [
                "testSegmentOffset",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "false"
              ],
              [
                "testVersion",
                "false"
              ],
              [
                "testTimestamp",
                "false"
              ],
              [
                "testNumberWithMarker",
                "false"
              ],
              [
                "testSegment",
                "false"
              ],
              [
                "testSegmentOffset",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "3"
              ],
              [
                "testVersion",
                "3"
              ],
              [
                "testTimestamp",
                "3"
              ],
              [
                "testNumberWithMarker",
                "2"
              ],
              [
                "testSegment",
                "3"
              ],
              [
                "testSegmentOffset",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                [
                  "number",
                  "expected"
                ]
              ],
              [
                "testVersion",
                [
                  "number",
                  "expected"
                ]
              ],
              [
                "testTimestamp",
                [
                  "number",
                  "expected"
                ]
              ],
              [
                "testNumberWithMarker",
                [
                  "number",
                  "marker",
                  "expected"
                ]
              ],
              [
                "testSegment",
                [
                  "number",
                  "expected"
                ]
              ],
              [
                "testSegmentOffset",
                [
                  "number",
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                []
              ],
              [
                "testVersion",
                []
              ],
              [
                "testTimestamp",
                []
              ],
              [
                "testNumberWithMarker",
                []
              ],
              [
                "testSegment",
                []
              ],
              [
                "testSegmentOffset",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6655093302423648,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testVersion",
                  "testTimestamp",
                  0.7200852222290964
                ],
                [
                  "testNumberWithMarker",
                  "testSegment",
                  0.6423922242762804
                ],
                [
                  "testNumberWithMarker",
                  "testSequenceNumber",
                  0.6023386019368342
                ],
                [
                  "testSegmentOffset",
                  "testVersion",
                  0.7131997238879486
                ],
                [
                  "testSegmentOffset",
                  "testTimestamp",
                  0.5598127485064209
                ],
                [
                  "testSequenceNumber",
                  "testTimestamp",
                  0.5628211765451587
                ],
                [
                  "testSegmentOffset",
                  "testSequenceNumber",
                  0.6160831149758971
                ],
                [
                  "testNumberWithMarker",
                  "testTimestamp",
                  0.5357551691951423
                ],
                [
                  "testNumberWithMarker",
                  "testVersion",
                  0.6454972243679028
                ],
                [
                  "testNumberWithMarker",
                  "testSegmentOffset",
                  0.5185102123212345
                ],
                [
                  "testVersion",
                  "testSequenceNumber",
                  0.7144345083117601
                ],
                [
                  "testSegment",
                  "testVersion",
                  0.8707910352243108
                ],
                [
                  "testSegment",
                  "testSequenceNumber",
                  0.7428336299615155
                ],
                [
                  "testSegment",
                  "testSegmentOffset",
                  0.8597678402922146
                ],
                [
                  "testSegment",
                  "testTimestamp",
                  0.6783175216037546
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testSequenceNumber",
                "false"
              ],
              [
                "testVersion",
                "false"
              ],
              [
                "testTimestamp",
                "false"
              ],
              [
                "testNumberWithMarker",
                "false"
              ],
              [
                "testSegment",
                "false"
              ],
              [
                "testSegmentOffset",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_der_encode_decode.py",
    "testCases": [
      {
        "name": "TestCertificate",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_encode_decode",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decode",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_representation",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_extension",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_oid",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_encode_decode",
                  "[]"
                ],
                [
                  "test_decode",
                  "[]"
                ],
                [
                  "test_representation",
                  "[]"
                ],
                [
                  "test_extension",
                  "[]"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "[]"
                ],
                [
                  "test_oid",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ],
                [
                  "test_representation",
                  "false"
                ],
                [
                  "test_extension",
                  "false"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "false"
                ],
                [
                  "test_oid",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ],
                [
                  "test_representation",
                  "false"
                ],
                [
                  "test_extension",
                  "false"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "false"
                ],
                [
                  "test_oid",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ],
                [
                  "test_representation",
                  "false"
                ],
                [
                  "test_extension",
                  "false"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "false"
                ],
                [
                  "test_oid",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_encode_decode",
                  "false"
                ],
                [
                  "test_decode",
                  "false"
                ],
                [
                  "test_representation",
                  "false"
                ],
                [
                  "test_extension",
                  "false"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "false"
                ],
                [
                  "test_oid",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ],
              [
                "test_representation",
                "false"
              ],
              [
                "test_extension",
                "false"
              ],
              [
                "test_prepare_unsigned_certificate",
                "false"
              ],
              [
                "test_oid",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ],
              [
                "test_representation",
                "false"
              ],
              [
                "test_extension",
                "false"
              ],
              [
                "test_prepare_unsigned_certificate",
                "false"
              ],
              [
                "test_oid",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_encode_decode",
                [
                  "self.toyCertNotBefore",
                  "self.toyCertNotAfter"
                ]
              ],
              [
                "test_decode",
                [
                  "self.toyCert",
                  "self.toyCertNotBefore",
                  "self.toyCertNotAfter"
                ]
              ],
              [
                "test_representation",
                [
                  "self.toyCertNotBefore",
                  "self.toyCertNotAfter"
                ]
              ],
              [
                "test_extension",
                [
                  "self.toyCertNotBefore",
                  "self.toyCertNotAfter"
                ]
              ],
              [
                "test_prepare_unsigned_certificate",
                []
              ],
              [
                "test_oid",
                [
                  "self.toyCert",
                  "self.toyCertNotBefore",
                  "self.toyCertNotAfter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ],
              [
                "test_representation",
                "false"
              ],
              [
                "test_extension",
                "false"
              ],
              [
                "test_prepare_unsigned_certificate",
                "false"
              ],
              [
                "test_oid",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ],
              [
                "test_representation",
                "false"
              ],
              [
                "test_extension",
                "true"
              ],
              [
                "test_prepare_unsigned_certificate",
                "false"
              ],
              [
                "test_oid",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_encode_decode",
                  "0"
                ],
                [
                  "test_decode",
                  "0"
                ],
                [
                  "test_representation",
                  "0"
                ],
                [
                  "test_extension",
                  "0"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "0"
                ],
                [
                  "test_oid",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_encode_decode",
                  "0"
                ],
                [
                  "test_decode",
                  "0"
                ],
                [
                  "test_representation",
                  "0"
                ],
                [
                  "test_extension",
                  "0"
                ],
                [
                  "test_prepare_unsigned_certificate",
                  "0"
                ],
                [
                  "test_oid",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ],
              [
                "test_representation",
                "false"
              ],
              [
                "test_extension",
                "false"
              ],
              [
                "test_prepare_unsigned_certificate",
                "false"
              ],
              [
                "test_oid",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ],
              [
                "test_representation",
                "false"
              ],
              [
                "test_extension",
                "false"
              ],
              [
                "test_prepare_unsigned_certificate",
                "false"
              ],
              [
                "test_oid",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode",
                "1"
              ],
              [
                "test_decode",
                "1"
              ],
              [
                "test_representation",
                "1"
              ],
              [
                "test_extension",
                "7"
              ],
              [
                "test_prepare_unsigned_certificate",
                "1"
              ],
              [
                "test_oid",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_encode_decode",
                [
                  "decoded_cert",
                  "cert_data"
                ]
              ],
              [
                "test_decode",
                [
                  "realCert"
                ]
              ],
              [
                "test_representation",
                []
              ],
              [
                "test_extension",
                [
                  "extValueData",
                  "extValueTrustClass",
                  "extValueName",
                  "decodedCert",
                  "cert",
                  "trustClass",
                  "trustLevel",
                  "oidString",
                  "extValueRoot",
                  "extValueTrustLevel",
                  "parsedExtValue",
                  "plainData",
                  "decodedExtValueRoot",
                  "certExtension",
                  "decodedTrustClass",
                  "decodedName",
                  "decodedExtension",
                  "name",
                  "isCritical",
                  "certData",
                  "decodedTrustLevel"
                ]
              ],
              [
                "test_prepare_unsigned_certificate",
                [
                  "identityManager",
                  "privateKeyStorage",
                  "keyName",
                  "certificateCopy",
                  "identityStorage",
                  "subjectDescriptions",
                  "newCertificate"
                ]
              ],
              [
                "test_oid",
                [
                  "derOid",
                  "expectedEncoding",
                  "oidString"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_encode_decode",
                [
                  "self.toyCert"
                ]
              ],
              [
                "test_decode",
                []
              ],
              [
                "test_representation",
                [
                  "self.toyCert"
                ]
              ],
              [
                "test_extension",
                [
                  "self.toyCert"
                ]
              ],
              [
                "test_prepare_unsigned_certificate",
                [
                  "self.toyCert",
                  "self.toyCertNotBefore",
                  "self.toyCertNotAfter"
                ]
              ],
              [
                "test_oid",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3050541574545202,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_extension",
                  "test_decode",
                  0.30429650071622677
                ],
                [
                  "test_encode_decode",
                  "test_extension",
                  0.38976390763662067
                ],
                [
                  "test_encode_decode",
                  "test_oid",
                  0.19518001458970666
                ],
                [
                  "test_representation",
                  "test_prepare_unsigned_certificate",
                  0.3672196560748385
                ],
                [
                  "test_oid",
                  "test_prepare_unsigned_certificate",
                  0.2971716777243459
                ],
                [
                  "test_representation",
                  "test_extension",
                  0.1866357415969549
                ],
                [
                  "test_representation",
                  "test_oid",
                  0.18257418583505539
                ],
                [
                  "test_representation",
                  "test_encode_decode",
                  0.2969569354582493
                ],
                [
                  "test_representation",
                  "test_decode",
                  0.3347193406976015
                ],
                [
                  "test_encode_decode",
                  "test_prepare_unsigned_certificate",
                  0.2705579809836729
                ],
                [
                  "test_decode",
                  "test_oid",
                  0.2222222222222222
                ],
                [
                  "test_extension",
                  "test_prepare_unsigned_certificate",
                  0.41638717782296214
                ],
                [
                  "test_extension",
                  "test_oid",
                  0.42791695413219394
                ],
                [
                  "test_decode",
                  "test_prepare_unsigned_certificate",
                  0.4077050456584014
                ],
                [
                  "test_encode_decode",
                  "test_decode",
                  0.27650502066875104
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode",
                "false"
              ],
              [
                "test_decode",
                "false"
              ],
              [
                "test_representation",
                "false"
              ],
              [
                "test_extension",
                "false"
              ],
              [
                "test_prepare_unsigned_certificate",
                "false"
              ],
              [
                "test_oid",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_encrypted_content.py",
    "testCases": [
      {
        "name": "TestEncryptedContent",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_decoding_error",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_setter_getter",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_decoding_error",
                  "[]"
                ],
                [
                  "test_setter_getter",
                  "[]"
                ],
                [
                  "test_constructor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_decoding_error",
                  "false"
                ],
                [
                  "test_setter_getter",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_decoding_error",
                  "false"
                ],
                [
                  "test_setter_getter",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_decoding_error",
                  "false"
                ],
                [
                  "test_setter_getter",
                  "true"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_decoding_error",
                  "false"
                ],
                [
                  "test_setter_getter",
                  "false"
                ],
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                "false"
              ],
              [
                "test_setter_getter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                "false"
              ],
              [
                "test_setter_getter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                []
              ],
              [
                "test_setter_getter",
                []
              ],
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                "false"
              ],
              [
                "test_setter_getter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                "false"
              ],
              [
                "test_setter_getter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_decoding_error",
                  "0"
                ],
                [
                  "test_setter_getter",
                  "0"
                ],
                [
                  "test_constructor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_decoding_error",
                  "0"
                ],
                [
                  "test_setter_getter",
                  "0"
                ],
                [
                  "test_constructor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                "false"
              ],
              [
                "test_setter_getter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                "false"
              ],
              [
                "test_setter_getter",
                "false"
              ],
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                "6"
              ],
              [
                "test_setter_getter",
                "15"
              ],
              [
                "test_constructor",
                "26"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                [
                  "errorBlob3",
                  "errorBlob4",
                  "encryptedContent",
                  "errorBlob1",
                  "errorBlob2",
                  "errorBlob5",
                  "errorBlob6"
                ]
              ],
              [
                "test_setter_getter",
                [
                  "keyLocator",
                  "contentBlob",
                  "content",
                  "encoded"
                ]
              ],
              [
                "test_constructor",
                [
                  "rsaOaepContentNoIv",
                  "keyLocator",
                  "encryptedBlob",
                  "rsaOaepContent",
                  "rsaOaepContentNoIv2",
                  "encryptedBlob2",
                  "rsaOaepContent2",
                  "encodedNoIv",
                  "content",
                  "encoded"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_decoding_error",
                []
              ],
              [
                "test_setter_getter",
                []
              ],
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48651648856237123,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_constructor",
                  "test_setter_getter",
                  0.7105130031939557
                ],
                [
                  "test_constructor",
                  "test_decoding_error",
                  0.4077093351717413
                ],
                [
                  "test_decoding_error",
                  "test_setter_getter",
                  0.3413271273214168
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_decoding_error",
                "false"
              ],
              [
                "test_setter_getter",
                "true"
              ],
              [
                "test_constructor",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_pib_identity_impl.py",
    "testCases": [
      {
        "name": "TestPibIdentityImpl",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_basic",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_errors",
                  "[PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail]"
                ],
                [
                  "test_key_operation",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.fail]"
                ],
                [
                  "test_overwrite",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_basic",
                  "[]"
                ],
                [
                  "test_errors",
                  "[]"
                ],
                [
                  "test_key_operation",
                  "[]"
                ],
                [
                  "test_overwrite",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_key_operation",
                  "false"
                ],
                [
                  "test_overwrite",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_key_operation",
                  "false"
                ],
                [
                  "test_overwrite",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_errors",
                  "true"
                ],
                [
                  "test_key_operation",
                  "true"
                ],
                [
                  "test_overwrite",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_key_operation",
                  "false"
                ],
                [
                  "test_overwrite",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_key_operation",
                "false"
              ],
              [
                "test_overwrite",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_errors",
                "true"
              ],
              [
                "test_key_operation",
                "true"
              ],
              [
                "test_overwrite",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                []
              ],
              [
                "test_errors",
                []
              ],
              [
                "test_key_operation",
                []
              ],
              [
                "test_overwrite",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_key_operation",
                "false"
              ],
              [
                "test_overwrite",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_key_operation",
                "true"
              ],
              [
                "test_overwrite",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_key_operation",
                  "0"
                ],
                [
                  "test_overwrite",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_key_operation",
                  "0"
                ],
                [
                  "test_overwrite",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_key_operation",
                "false"
              ],
              [
                "test_overwrite",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_key_operation",
                "false"
              ],
              [
                "test_overwrite",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                "1"
              ],
              [
                "test_errors",
                "0"
              ],
              [
                "test_key_operation",
                "14"
              ],
              [
                "test_overwrite",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                [
                  "fixture",
                  "identity1",
                  "pibImpl"
                ]
              ],
              [
                "test_errors",
                [
                  "fixture",
                  "identity1",
                  "pibImpl"
                ]
              ],
              [
                "test_key_operation",
                [
                  "fixture",
                  "defaultKey0",
                  "defaultKey1",
                  "defaultKey2",
                  "defaultKey3",
                  "identity1",
                  "pibImpl"
                ]
              ],
              [
                "test_overwrite",
                [
                  "fixture",
                  "identity1",
                  "pibImpl"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_errors",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_key_operation",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_overwrite",
                [
                  "self.fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6826053785839935,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_key_operation",
                  "test_overwrite",
                  0.7948619520240913
                ],
                [
                  "test_overwrite",
                  "test_errors",
                  0.7592822100035505
                ],
                [
                  "test_basic",
                  "test_errors",
                  0.48847060470956133
                ],
                [
                  "test_basic",
                  "test_key_operation",
                  0.4961350991042077
                ],
                [
                  "test_basic",
                  "test_overwrite",
                  0.6618054257808551
                ],
                [
                  "test_key_operation",
                  "test_errors",
                  0.8950769798816947
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_errors",
                "false"
              ],
              [
                "test_key_operation",
                "false"
              ],
              [
                "test_overwrite",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_pib_key_container.py",
    "testCases": [
      {
        "name": "TestPibKeyContainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_errors",
                  "[PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail]"
                ],
                [
                  "test_basic",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_errors",
                  "[]"
                ],
                [
                  "test_basic",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_errors",
                  "true"
                ],
                [
                  "test_basic",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "true"
              ],
              [
                "test_basic",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                []
              ],
              [
                "test_basic",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "0"
              ],
              [
                "test_basic",
                "35"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                [
                  "fixture",
                  "container",
                  "pibImpl"
                ]
              ],
              [
                "test_basic",
                [
                  "fixture",
                  "container",
                  "key1",
                  "key2",
                  "key12",
                  "pibImpl",
                  "id1Key3Name",
                  "container2",
                  "key11",
                  "key21"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_basic",
                [
                  "self.fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.60821304764564,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_basic",
                  "test_errors",
                  0.60821304764564
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_consumer_db.py",
    "testCases": [
      {
        "name": "TestConsumerDb",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_operate_aes_decryption_key",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_operate_aes_decryption_key",
                  "[]"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_operate_aes_decryption_key",
                  "false"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_operate_aes_decryption_key",
                  "false"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_operate_aes_decryption_key",
                  "false"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_operate_aes_decryption_key",
                  "false"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "false"
              ],
              [
                "test_operate_rsa_decryption_key",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "false"
              ],
              [
                "test_operate_rsa_decryption_key",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                []
              ],
              [
                "test_operate_rsa_decryption_key",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "false"
              ],
              [
                "test_operate_rsa_decryption_key",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "true"
              ],
              [
                "test_operate_rsa_decryption_key",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_operate_aes_decryption_key",
                  "0"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_operate_aes_decryption_key",
                  "0"
                ],
                [
                  "test_operate_rsa_decryption_key",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "false"
              ],
              [
                "test_operate_rsa_decryption_key",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "false"
              ],
              [
                "test_operate_rsa_decryption_key",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "2"
              ],
              [
                "test_operate_rsa_decryption_key",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                [
                  "encryptionKeyBlob",
                  "database",
                  "keyName",
                  "resultBlob",
                  "decryptionKeyBlob"
                ]
              ],
              [
                "test_operate_rsa_decryption_key",
                [
                  "encryptionKeyBlob",
                  "database",
                  "keyName",
                  "resultBlob",
                  "decryptionKeyBlob"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                [
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_operate_rsa_decryption_key",
                [
                  "self.databaseFilePath"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9665514330515128,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_operate_aes_decryption_key",
                  "test_operate_rsa_decryption_key",
                  0.9665514330515128
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_operate_aes_decryption_key",
                "false"
              ],
              [
                "test_operate_rsa_decryption_key",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_producer_db.py",
    "testCases": [
      {
        "name": "TestProducerDb",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_database_functions",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_database_functions",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_database_functions",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_database_functions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_database_functions",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_database_functions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_database_functions",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_database_functions",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_database_functions",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "10"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                [
                  "database",
                  "keyBlob2",
                  "keyBlob1",
                  "point4",
                  "keyResult",
                  "params",
                  "point1",
                  "point2",
                  "point3"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                [
                  "self.databaseFilePath"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_database_functions",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_decryptor_v2.py",
    "testCases": [
      {
        "name": "TestDecryptorV2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_decrypt_valid",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decrypt_invalid",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_decrypt_valid",
                  "[]"
                ],
                [
                  "test_decrypt_invalid",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_decrypt_valid",
                  "false"
                ],
                [
                  "test_decrypt_invalid",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_decrypt_valid",
                  "false"
                ],
                [
                  "test_decrypt_invalid",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_decrypt_valid",
                  "false"
                ],
                [
                  "test_decrypt_invalid",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_decrypt_valid",
                  "false"
                ],
                [
                  "test_decrypt_invalid",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                "false"
              ],
              [
                "test_decrypt_invalid",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                "false"
              ],
              [
                "test_decrypt_invalid",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                []
              ],
              [
                "test_decrypt_invalid",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                "false"
              ],
              [
                "test_decrypt_invalid",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_decrypt_valid",
                "true"
              ],
              [
                "test_decrypt_invalid",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_decrypt_valid",
                  "0"
                ],
                [
                  "test_decrypt_invalid",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_decrypt_valid",
                  "0"
                ],
                [
                  "test_decrypt_invalid",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                "false"
              ],
              [
                "test_decrypt_invalid",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                "false"
              ],
              [
                "test_decrypt_invalid",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                "4"
              ],
              [
                "test_decrypt_invalid",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                [
                  "fixture",
                  "nSuccesses",
                  "encryptedContent",
                  "nFailures"
                ]
              ],
              [
                "test_decrypt_invalid",
                [
                  "fixture",
                  "nSuccesses",
                  "encryptedContent",
                  "nFailures"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                []
              ],
              [
                "test_decrypt_invalid",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9621404708847278,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_decrypt_valid",
                  "test_decrypt_invalid",
                  0.9621404708847278
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_decrypt_valid",
                "false"
              ],
              [
                "test_decrypt_invalid",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_encryptor_v2.py",
    "testCases": [
      {
        "name": "TestEncryptorV2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_kek_retrieval_failure",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_kek_retrieval_failure",
                  "[]"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "[]"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_kek_retrieval_failure",
                  "false"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "false"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_kek_retrieval_failure",
                  "false"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "false"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_kek_retrieval_failure",
                  "true"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "true"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_kek_retrieval_failure",
                  "false"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "false"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "false"
              ],
              [
                "test_encrypt_and_publish_ck",
                "false"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "false"
              ],
              [
                "test_encrypt_and_publish_ck",
                "false"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                []
              ],
              [
                "test_encrypt_and_publish_ck",
                []
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "false"
              ],
              [
                "test_encrypt_and_publish_ck",
                "false"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "true"
              ],
              [
                "test_encrypt_and_publish_ck",
                "true"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_kek_retrieval_failure",
                  "0"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "0"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_kek_retrieval_failure",
                  "0"
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "0"
                ],
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "false"
              ],
              [
                "test_encrypt_and_publish_ck",
                "false"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "false"
              ],
              [
                "test_encrypt_and_publish_ck",
                "false"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "6"
              ],
              [
                "test_encrypt_and_publish_ck",
                "11"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                [
                  "kekData",
                  "encryptedContent",
                  "plainText",
                  "nErrors"
                ]
              ],
              [
                "test_encrypt_and_publish_ck",
                [
                  "ckPrefix",
                  "kekData",
                  "extractedKek",
                  "encryptedContent",
                  "plainText",
                  "ckName"
                ]
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                [
                  "nCk"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_kek_retrieval_failure",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_encrypt_and_publish_ck",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                [
                  "self._fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6800741386473986,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_encrypt_and_publish_ck",
                  "test_kek_retrieval_failure",
                  0.8177995401164748
                ],
                [
                  "test_encrypt_and_publish_ck",
                  "test_enumerate_data_from_in_memory_storage",
                  0.6044478182788253
                ],
                [
                  "test_kek_retrieval_failure",
                  "test_enumerate_data_from_in_memory_storage",
                  0.6179750575468956
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_kek_retrieval_failure",
                "false"
              ],
              [
                "test_encrypt_and_publish_ck",
                "true"
              ],
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_face_methods.py",
    "testCases": [
      {
        "name": "TestFaceRegisterMethods",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_register_prefix_response",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_register_prefix_response",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_register_prefix_response",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_register_prefix_response",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_register_prefix_response",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_register_prefix_response",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_register_prefix_response",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_register_prefix_response",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_register_prefix_response",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_register_prefix_response",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_register_prefix_response",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_register_prefix_response",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_register_prefix_response",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_register_prefix_response",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_register_prefix_response",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_register_prefix_response",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_register_prefix_response",
                [
                  "timeoutCallback",
                  "onDataArgs",
                  "interestCallbackCount",
                  "data",
                  "failedCallback",
                  "prefixName",
                  "dataCallback",
                  "expectedBlob",
                  "startTime",
                  "interestName",
                  "done",
                  "timeout"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_register_prefix_response",
                [
                  "self.face_out",
                  "self.face_in",
                  "self.keyChain"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_register_prefix_response",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestFaceInterestMethods",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_network_nack",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_remove_pending",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_timeout",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_max_ndn_packet_size",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_network_nack",
                  "[]"
                ],
                [
                  "test_remove_pending",
                  "[]"
                ],
                [
                  "test_timeout",
                  "[]"
                ],
                [
                  "test_max_ndn_packet_size",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_network_nack",
                  "false"
                ],
                [
                  "test_remove_pending",
                  "true"
                ],
                [
                  "test_timeout",
                  "false"
                ],
                [
                  "test_max_ndn_packet_size",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_network_nack",
                  "false"
                ],
                [
                  "test_remove_pending",
                  "false"
                ],
                [
                  "test_timeout",
                  "false"
                ],
                [
                  "test_max_ndn_packet_size",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_network_nack",
                  "false"
                ],
                [
                  "test_remove_pending",
                  "false"
                ],
                [
                  "test_timeout",
                  "false"
                ],
                [
                  "test_max_ndn_packet_size",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_network_nack",
                  "false"
                ],
                [
                  "test_remove_pending",
                  "false"
                ],
                [
                  "test_timeout",
                  "false"
                ],
                [
                  "test_max_ndn_packet_size",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_network_nack",
                "false"
              ],
              [
                "test_remove_pending",
                "false"
              ],
              [
                "test_timeout",
                "false"
              ],
              [
                "test_max_ndn_packet_size",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_network_nack",
                "false"
              ],
              [
                "test_remove_pending",
                "false"
              ],
              [
                "test_timeout",
                "false"
              ],
              [
                "test_max_ndn_packet_size",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_network_nack",
                [
                  "self.face"
                ]
              ],
              [
                "test_remove_pending",
                []
              ],
              [
                "test_timeout",
                [
                  "self.face"
                ]
              ],
              [
                "test_max_ndn_packet_size",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_network_nack",
                "false"
              ],
              [
                "test_remove_pending",
                "false"
              ],
              [
                "test_timeout",
                "false"
              ],
              [
                "test_max_ndn_packet_size",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_network_nack",
                "true"
              ],
              [
                "test_remove_pending",
                "true"
              ],
              [
                "test_timeout",
                "false"
              ],
              [
                "test_max_ndn_packet_size",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_network_nack",
                  "0"
                ],
                [
                  "test_remove_pending",
                  "0"
                ],
                [
                  "test_timeout",
                  "0"
                ],
                [
                  "test_max_ndn_packet_size",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_network_nack",
                  "0"
                ],
                [
                  "test_remove_pending",
                  "0"
                ],
                [
                  "test_timeout",
                  "0"
                ],
                [
                  "test_max_ndn_packet_size",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_network_nack",
                "false"
              ],
              [
                "test_remove_pending",
                "false"
              ],
              [
                "test_timeout",
                "false"
              ],
              [
                "test_max_ndn_packet_size",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_network_nack",
                "false"
              ],
              [
                "test_remove_pending",
                "true"
              ],
              [
                "test_timeout",
                "false"
              ],
              [
                "test_max_ndn_packet_size",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_network_nack",
                "4"
              ],
              [
                "test_remove_pending",
                "2"
              ],
              [
                "test_timeout",
                "3"
              ],
              [
                "test_max_ndn_packet_size",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_network_nack",
                [
                  "timeoutCallback",
                  "onNetworkNackArgs",
                  "dataCallback",
                  "callbackNetworkNack",
                  "onNackCallback",
                  "uri"
                ]
              ],
              [
                "test_remove_pending",
                [
                  "timeoutCallback",
                  "dataCallback",
                  "interestID",
                  "name",
                  "startTime",
                  "timeout"
                ]
              ],
              [
                "test_timeout",
                [
                  "timeoutCallback",
                  "dataCallback",
                  "callbackInterest",
                  "onNackCallback",
                  "onTimeoutArgs",
                  "uri"
                ]
              ],
              [
                "test_max_ndn_packet_size",
                [
                  "interestSize",
                  "targetSize",
                  "interest",
                  "initialSize"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_network_nack",
                []
              ],
              [
                "test_remove_pending",
                [
                  "self.face"
                ]
              ],
              [
                "test_timeout",
                []
              ],
              [
                "test_max_ndn_packet_size",
                [
                  "self.face"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5040780573642091,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_timeout",
                  "test_network_nack",
                  0.5890160284946436
                ],
                [
                  "test_remove_pending",
                  "test_max_ndn_packet_size",
                  0.4449333392657779
                ],
                [
                  "test_timeout",
                  "test_max_ndn_packet_size",
                  0.39849375788880914
                ],
                [
                  "test_max_ndn_packet_size",
                  "test_network_nack",
                  0.38914865285189776
                ],
                [
                  "test_remove_pending",
                  "test_network_nack",
                  0.5820978724735577
                ],
                [
                  "test_timeout",
                  "test_remove_pending",
                  0.6207786932105681
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_network_nack",
                "false"
              ],
              [
                "test_remove_pending",
                "false"
              ],
              [
                "test_timeout",
                "true"
              ],
              [
                "test_max_ndn_packet_size",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_repetitive_interval.py",
    "testCases": [
      {
        "name": "TestRepetitiveInterval",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_comparison",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_cover_time_point",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_construction",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_comparison",
                  "[]"
                ],
                [
                  "test_cover_time_point",
                  "[]"
                ],
                [
                  "test_construction",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_comparison",
                  "false"
                ],
                [
                  "test_cover_time_point",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_comparison",
                  "false"
                ],
                [
                  "test_cover_time_point",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_comparison",
                  "false"
                ],
                [
                  "test_cover_time_point",
                  "true"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_comparison",
                  "false"
                ],
                [
                  "test_cover_time_point",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                "false"
              ],
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                "false"
              ],
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                []
              ],
              [
                "test_cover_time_point",
                []
              ],
              [
                "test_construction",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                "false"
              ],
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_comparison",
                "false"
              ],
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_comparison",
                  "0"
                ],
                [
                  "test_cover_time_point",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_comparison",
                  "0"
                ],
                [
                  "test_cover_time_point",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                "false"
              ],
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                "false"
              ],
              [
                "test_cover_time_point",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                "5"
              ],
              [
                "test_cover_time_point",
                "24"
              ],
              [
                "test_construction",
                "12"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_comparison",
                []
              ],
              [
                "test_cover_time_point",
                [
                  "timePoint9",
                  "timePoint8",
                  "timePoint7",
                  "timePoint6",
                  "timePoint5",
                  "timePoint4",
                  "timePoint3",
                  "result",
                  "timePoint2",
                  "repetitiveInterval3",
                  "timePoint10",
                  "timePoint1",
                  "repetitiveInterval2",
                  "timePoint11",
                  "repetitiveInterval1",
                  "timePoint12"
                ]
              ],
              [
                "test_construction",
                [
                  "repetitiveInterval3",
                  "repetitiveInterval2",
                  "repetitiveInterval5",
                  "repetitiveInterval4",
                  "repetitiveInterval1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison",
                []
              ],
              [
                "test_cover_time_point",
                []
              ],
              [
                "test_construction",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8152970857488034,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_construction",
                  "test_cover_time_point",
                  0.8261958016675847
                ],
                [
                  "test_cover_time_point",
                  "test_comparison",
                  0.7700227768475578
                ],
                [
                  "test_construction",
                  "test_comparison",
                  0.8496726787312678
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_comparison",
                "false"
              ],
              [
                "test_cover_time_point",
                "true"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_group_manager.py",
    "testCases": [
      {
        "name": "TestGroupManager",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_group_key",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_calculate_interval",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_e_key_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_create_d_key_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_group_key",
                  "[]"
                ],
                [
                  "test_calculate_interval",
                  "[]"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "[]"
                ],
                [
                  "test_create_e_key_data",
                  "[]"
                ],
                [
                  "test_create_d_key_data",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_group_key",
                  "false"
                ],
                [
                  "test_calculate_interval",
                  "false"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "false"
                ],
                [
                  "test_create_e_key_data",
                  "false"
                ],
                [
                  "test_create_d_key_data",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_group_key",
                  "false"
                ],
                [
                  "test_calculate_interval",
                  "false"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "false"
                ],
                [
                  "test_create_e_key_data",
                  "false"
                ],
                [
                  "test_create_d_key_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_group_key",
                  "false"
                ],
                [
                  "test_calculate_interval",
                  "false"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "false"
                ],
                [
                  "test_create_e_key_data",
                  "false"
                ],
                [
                  "test_create_d_key_data",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_group_key",
                  "false"
                ],
                [
                  "test_calculate_interval",
                  "false"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "false"
                ],
                [
                  "test_create_e_key_data",
                  "false"
                ],
                [
                  "test_create_d_key_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_group_key",
                "false"
              ],
              [
                "test_calculate_interval",
                "false"
              ],
              [
                "test_get_group_key_without_regeneration",
                "false"
              ],
              [
                "test_create_e_key_data",
                "false"
              ],
              [
                "test_create_d_key_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_group_key",
                "false"
              ],
              [
                "test_calculate_interval",
                "false"
              ],
              [
                "test_get_group_key_without_regeneration",
                "false"
              ],
              [
                "test_create_e_key_data",
                "false"
              ],
              [
                "test_create_d_key_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_group_key",
                [
                  "self.intervalDatabaseFilePath",
                  "self.dKeyDatabaseFilePath",
                  "self.encryptKeyBlob",
                  "self.eKeyDatabaseFilePath",
                  "self.certificate"
                ]
              ],
              [
                "test_calculate_interval",
                [
                  "self.decryptKeyBlob",
                  "self.dKeyDatabaseFilePath",
                  "self.groupKeyDatabaseFilePath",
                  "self.encryptKeyBlob",
                  "self.eKeyDatabaseFilePath",
                  "self.certificate"
                ]
              ],
              [
                "test_get_group_key_without_regeneration",
                [
                  "self.decryptKeyBlob",
                  "self.intervalDatabaseFilePath",
                  "self.dKeyDatabaseFilePath",
                  "self.encryptKeyBlob",
                  "self.eKeyDatabaseFilePath"
                ]
              ],
              [
                "test_create_e_key_data",
                [
                  "self.decryptKeyBlob",
                  "self.intervalDatabaseFilePath",
                  "self.dKeyDatabaseFilePath",
                  "self.groupKeyDatabaseFilePath",
                  "self.certificate"
                ]
              ],
              [
                "test_create_d_key_data",
                [
                  "self.intervalDatabaseFilePath",
                  "self.groupKeyDatabaseFilePath",
                  "self.encryptKeyBlob",
                  "self.eKeyDatabaseFilePath"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_group_key",
                "false"
              ],
              [
                "test_calculate_interval",
                "false"
              ],
              [
                "test_get_group_key_without_regeneration",
                "false"
              ],
              [
                "test_create_e_key_data",
                "false"
              ],
              [
                "test_create_d_key_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_group_key",
                "true"
              ],
              [
                "test_calculate_interval",
                "false"
              ],
              [
                "test_get_group_key_without_regeneration",
                "true"
              ],
              [
                "test_create_e_key_data",
                "false"
              ],
              [
                "test_create_d_key_data",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_group_key",
                  "0"
                ],
                [
                  "test_calculate_interval",
                  "0"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "0"
                ],
                [
                  "test_create_e_key_data",
                  "0"
                ],
                [
                  "test_create_d_key_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_group_key",
                  "0"
                ],
                [
                  "test_calculate_interval",
                  "0"
                ],
                [
                  "test_get_group_key_without_regeneration",
                  "0"
                ],
                [
                  "test_create_e_key_data",
                  "0"
                ],
                [
                  "test_create_d_key_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_group_key",
                "false"
              ],
              [
                "test_calculate_interval",
                "false"
              ],
              [
                "test_get_group_key_without_regeneration",
                "false"
              ],
              [
                "test_create_e_key_data",
                "false"
              ],
              [
                "test_create_d_key_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_group_key",
                "false"
              ],
              [
                "test_calculate_interval",
                "false"
              ],
              [
                "test_get_group_key_without_regeneration",
                "false"
              ],
              [
                "test_create_e_key_data",
                "false"
              ],
              [
                "test_create_d_key_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_group_key",
                "12"
              ],
              [
                "test_calculate_interval",
                "7"
              ],
              [
                "test_get_group_key_without_regeneration",
                "7"
              ],
              [
                "test_create_e_key_data",
                "2"
              ],
              [
                "test_create_d_key_data",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_get_group_key",
                [
                  "payloadContent",
                  "dataContent",
                  "encryptedPayload",
                  "manager",
                  "data",
                  "groupDKey",
                  "blobPayload",
                  "encryptedNonce",
                  "groupEKey",
                  "blobNonce",
                  "nonce",
                  "timePoint3",
                  "result",
                  "timePoint2",
                  "timePoint1",
                  "largePayload",
                  "decryptParams",
                  "derivedGroupEKey"
                ]
              ],
              [
                "test_calculate_interval",
                [
                  "result",
                  "timePoint2",
                  "timePoint1",
                  "manager",
                  "memberKeys",
                  "timePoint4",
                  "timePoint3"
                ]
              ],
              [
                "test_get_group_key_without_regeneration",
                [
                  "result",
                  "timePoint1",
                  "manager",
                  "data",
                  "memberD",
                  "data2",
                  "data1",
                  "groupEKey1",
                  "groupEKey2",
                  "dataBlob",
                  "result2"
                ]
              ],
              [
                "test_create_e_key_data",
                [
                  "contentBlob",
                  "manager",
                  "data"
                ]
              ],
              [
                "test_create_d_key_data",
                [
                  "payloadContent",
                  "dataContent",
                  "encryptedPayload",
                  "manager",
                  "data",
                  "blobPayload",
                  "encryptedNonce",
                  "newCertificate",
                  "blobNonce",
                  "nonce",
                  "newCertificateBlob",
                  "largePayload",
                  "decryptParams"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_group_key",
                [
                  "self.decryptKeyBlob",
                  "self.groupKeyDatabaseFilePath",
                  "self.keyChain"
                ]
              ],
              [
                "test_calculate_interval",
                [
                  "self.intervalDatabaseFilePath",
                  "self.keyChain"
                ]
              ],
              [
                "test_get_group_key_without_regeneration",
                [
                  "self.groupKeyDatabaseFilePath",
                  "self.certificate",
                  "self.keyChain"
                ]
              ],
              [
                "test_create_e_key_data",
                [
                  "self.encryptKeyBlob",
                  "self.eKeyDatabaseFilePath",
                  "self.keyChain"
                ]
              ],
              [
                "test_create_d_key_data",
                [
                  "self.decryptKeyBlob",
                  "self.dKeyDatabaseFilePath",
                  "self.certificate",
                  "self.keyChain"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7514403437113305,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_create_d_key_data",
                  "test_get_group_key_without_regeneration",
                  0.7053423612832246
                ],
                [
                  "test_create_e_key_data",
                  "test_calculate_interval",
                  0.7399766723720124
                ],
                [
                  "test_calculate_interval",
                  "test_get_group_key_without_regeneration",
                  0.7435930539864898
                ],
                [
                  "test_create_e_key_data",
                  "test_get_group_key_without_regeneration",
                  0.8361678882327735
                ],
                [
                  "test_create_d_key_data",
                  "test_create_e_key_data",
                  0.6601235758323923
                ],
                [
                  "test_get_group_key",
                  "test_get_group_key_without_regeneration",
                  0.8899040425467007
                ],
                [
                  "test_create_d_key_data",
                  "test_get_group_key",
                  0.8931829693215149
                ],
                [
                  "test_create_d_key_data",
                  "test_calculate_interval",
                  0.5738807619276051
                ],
                [
                  "test_create_e_key_data",
                  "test_get_group_key",
                  0.7613662854318439
                ],
                [
                  "test_calculate_interval",
                  "test_get_group_key",
                  0.7108658261787484
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_get_group_key",
                "false"
              ],
              [
                "test_calculate_interval",
                "true"
              ],
              [
                "test_get_group_key_without_regeneration",
                "false"
              ],
              [
                "test_create_e_key_data",
                "false"
              ],
              [
                "test_create_d_key_data",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_tpm_back_ends.py",
    "testCases": [
      {
        "name": "TestTpmBackEnds",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_rsa_signing",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_import_export",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.fail]"
                ],
                [
                  "test_rsa_decryption",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ecdsa_signing",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_random_key_id",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_key_management",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_rsa_signing",
                  "[]"
                ],
                [
                  "test_import_export",
                  "[]"
                ],
                [
                  "test_rsa_decryption",
                  "[]"
                ],
                [
                  "test_ecdsa_signing",
                  "[]"
                ],
                [
                  "test_random_key_id",
                  "[]"
                ],
                [
                  "test_key_management",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_rsa_signing",
                  "true"
                ],
                [
                  "test_import_export",
                  "true"
                ],
                [
                  "test_rsa_decryption",
                  "true"
                ],
                [
                  "test_ecdsa_signing",
                  "true"
                ],
                [
                  "test_random_key_id",
                  "true"
                ],
                [
                  "test_key_management",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_rsa_signing",
                  "false"
                ],
                [
                  "test_import_export",
                  "false"
                ],
                [
                  "test_rsa_decryption",
                  "false"
                ],
                [
                  "test_ecdsa_signing",
                  "false"
                ],
                [
                  "test_random_key_id",
                  "false"
                ],
                [
                  "test_key_management",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_rsa_signing",
                  "false"
                ],
                [
                  "test_import_export",
                  "true"
                ],
                [
                  "test_rsa_decryption",
                  "false"
                ],
                [
                  "test_ecdsa_signing",
                  "false"
                ],
                [
                  "test_random_key_id",
                  "false"
                ],
                [
                  "test_key_management",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_rsa_signing",
                  "false"
                ],
                [
                  "test_import_export",
                  "false"
                ],
                [
                  "test_rsa_decryption",
                  "false"
                ],
                [
                  "test_ecdsa_signing",
                  "false"
                ],
                [
                  "test_random_key_id",
                  "false"
                ],
                [
                  "test_key_management",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                "false"
              ],
              [
                "test_import_export",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_ecdsa_signing",
                "false"
              ],
              [
                "test_random_key_id",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_rsa_signing",
                "false"
              ],
              [
                "test_import_export",
                "true"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_ecdsa_signing",
                "false"
              ],
              [
                "test_random_key_id",
                "false"
              ],
              [
                "test_key_management",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_rsa_signing",
                [
                  "self.backEndMemory",
                  "self.backEndFile",
                  "self.backEndOsx"
                ]
              ],
              [
                "test_import_export",
                [
                  "self.backEndMemory",
                  "self.backEndFile"
                ]
              ],
              [
                "test_rsa_decryption",
                [
                  "self.backEndMemory",
                  "self.backEndFile",
                  "self.backEndOsx"
                ]
              ],
              [
                "test_ecdsa_signing",
                [
                  "self.backEndMemory",
                  "self.backEndFile",
                  "self.backEndOsx"
                ]
              ],
              [
                "test_random_key_id",
                [
                  "self.backEndList",
                  "self.backEndFile",
                  "self.backEndOsx"
                ]
              ],
              [
                "test_key_management",
                [
                  "self.backEndMemory",
                  "self.backEndFile",
                  "self.backEndOsx"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                "false"
              ],
              [
                "test_import_export",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_ecdsa_signing",
                "false"
              ],
              [
                "test_random_key_id",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                "false"
              ],
              [
                "test_import_export",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_ecdsa_signing",
                "false"
              ],
              [
                "test_random_key_id",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_rsa_signing",
                  "0"
                ],
                [
                  "test_import_export",
                  "0"
                ],
                [
                  "test_rsa_decryption",
                  "0"
                ],
                [
                  "test_ecdsa_signing",
                  "0"
                ],
                [
                  "test_random_key_id",
                  "0"
                ],
                [
                  "test_key_management",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_rsa_signing",
                  "0"
                ],
                [
                  "test_import_export",
                  "0"
                ],
                [
                  "test_rsa_decryption",
                  "0"
                ],
                [
                  "test_ecdsa_signing",
                  "0"
                ],
                [
                  "test_random_key_id",
                  "0"
                ],
                [
                  "test_key_management",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                "false"
              ],
              [
                "test_import_export",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_ecdsa_signing",
                "false"
              ],
              [
                "test_random_key_id",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                "false"
              ],
              [
                "test_import_export",
                "false"
              ],
              [
                "test_rsa_decryption",
                "false"
              ],
              [
                "test_ecdsa_signing",
                "false"
              ],
              [
                "test_random_key_id",
                "false"
              ],
              [
                "test_key_management",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                "2"
              ],
              [
                "test_import_export",
                "5"
              ],
              [
                "test_rsa_decryption",
                "2"
              ],
              [
                "test_ecdsa_signing",
                "2"
              ],
              [
                "test_random_key_id",
                "1"
              ],
              [
                "test_key_management",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                [
                  "result",
                  "identityName",
                  "signature",
                  "keyName",
                  "publicKey",
                  "key",
                  "content"
                ]
              ],
              [
                "test_import_export",
                [
                  "privateKey",
                  "password",
                  "encryptedPkcs8",
                  "privateKeyPkcs1Base64",
                  "privateKeyPkcs1Encoding",
                  "privateKey2",
                  "keyName",
                  "exportedKey",
                  "privateKey2Pkcs1Encoding"
                ]
              ],
              [
                "test_rsa_decryption",
                [
                  "identityName",
                  "cipherText",
                  "keyName",
                  "plainText",
                  "publicKey",
                  "key",
                  "content"
                ]
              ],
              [
                "test_ecdsa_signing",
                [
                  "result",
                  "identityName",
                  "signature",
                  "keyName",
                  "publicKey",
                  "key",
                  "content"
                ]
              ],
              [
                "test_random_key_id",
                [
                  "tpm",
                  "identityName",
                  "keyName",
                  "saveSize",
                  "key",
                  "keyNames"
                ]
              ],
              [
                "test_key_management",
                [
                  "identityName",
                  "keyName",
                  "keyId"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_rsa_signing",
                [
                  "self.backEndList"
                ]
              ],
              [
                "test_import_export",
                [
                  "self.backEndList",
                  "self.backEndOsx"
                ]
              ],
              [
                "test_rsa_decryption",
                [
                  "self.backEndList"
                ]
              ],
              [
                "test_ecdsa_signing",
                [
                  "self.backEndList"
                ]
              ],
              [
                "test_random_key_id",
                [
                  "self.backEndMemory"
                ]
              ],
              [
                "test_key_management",
                [
                  "self.backEndList"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6616822452617096,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_rsa_signing",
                  "test_random_key_id",
                  0.6537706022526073
                ],
                [
                  "test_key_management",
                  "test_ecdsa_signing",
                  0.6580557834104023
                ],
                [
                  "test_rsa_decryption",
                  "test_random_key_id",
                  0.5992202725750649
                ],
                [
                  "test_ecdsa_signing",
                  "test_random_key_id",
                  0.6427896608305352
                ],
                [
                  "test_key_management",
                  "test_rsa_signing",
                  0.6678914327118056
                ],
                [
                  "test_key_management",
                  "test_rsa_decryption",
                  0.6745127888493018
                ],
                [
                  "test_rsa_signing",
                  "test_import_export",
                  0.5871798425343165
                ],
                [
                  "test_key_management",
                  "test_random_key_id",
                  0.5623659587385696
                ],
                [
                  "test_rsa_decryption",
                  "test_ecdsa_signing",
                  0.8733957544463404
                ],
                [
                  "test_rsa_signing",
                  "test_ecdsa_signing",
                  0.9731803832657285
                ],
                [
                  "test_rsa_decryption",
                  "test_import_export",
                  0.651016823348902
                ],
                [
                  "test_import_export",
                  "test_random_key_id",
                  0.27189176013906036
                ],
                [
                  "test_ecdsa_signing",
                  "test_import_export",
                  0.5912213393825798
                ],
                [
                  "test_rsa_signing",
                  "test_rsa_decryption",
                  0.9149295521564776
                ],
                [
                  "test_key_management",
                  "test_import_export",
                  0.6038117242839505
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_rsa_signing",
                "true"
              ],
              [
                "test_import_export",
                "true"
              ],
              [
                "test_rsa_decryption",
                "true"
              ],
              [
                "test_ecdsa_signing",
                "true"
              ],
              [
                "test_random_key_id",
                "true"
              ],
              [
                "test_key_management",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_policy_manager.py",
    "testCases": [
      {
        "name": "TestConfigPolicyManager",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_interest_timestamp",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_no_verify",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_refresh_10s",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_self_verification",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_interest_timestamp",
                  "[]"
                ],
                [
                  "test_no_verify",
                  "[]"
                ],
                [
                  "test_refresh_10s",
                  "[]"
                ],
                [
                  "test_self_verification",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_interest_timestamp",
                  "false"
                ],
                [
                  "test_no_verify",
                  "false"
                ],
                [
                  "test_refresh_10s",
                  "false"
                ],
                [
                  "test_self_verification",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_interest_timestamp",
                  "false"
                ],
                [
                  "test_no_verify",
                  "false"
                ],
                [
                  "test_refresh_10s",
                  "false"
                ],
                [
                  "test_self_verification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_interest_timestamp",
                  "true"
                ],
                [
                  "test_no_verify",
                  "false"
                ],
                [
                  "test_refresh_10s",
                  "true"
                ],
                [
                  "test_self_verification",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_interest_timestamp",
                  "false"
                ],
                [
                  "test_no_verify",
                  "false"
                ],
                [
                  "test_refresh_10s",
                  "false"
                ],
                [
                  "test_self_verification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_no_verify",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ],
              [
                "test_self_verification",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_no_verify",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ],
              [
                "test_self_verification",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_interest_timestamp",
                [
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.keyName",
                  "self.testCertFile"
                ]
              ],
              [
                "test_no_verify",
                [
                  "self.policyManager",
                  "self.face",
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.keyName",
                  "self.testCertFile",
                  "self.identityName",
                  "self.keyChain"
                ]
              ],
              [
                "test_refresh_10s",
                [
                  "self.face",
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.keyName",
                  "self.identityManager"
                ]
              ],
              [
                "test_self_verification",
                [
                  "self.policyManager",
                  "self.face",
                  "self.privateKeyStorage",
                  "self.keyName",
                  "self.testCertFile",
                  "self.identityName",
                  "self.keyChain"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_no_verify",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ],
              [
                "test_self_verification",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_interest_timestamp",
                "true"
              ],
              [
                "test_no_verify",
                "true"
              ],
              [
                "test_refresh_10s",
                "true"
              ],
              [
                "test_self_verification",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_interest_timestamp",
                  "0"
                ],
                [
                  "test_no_verify",
                  "0"
                ],
                [
                  "test_refresh_10s",
                  "0"
                ],
                [
                  "test_self_verification",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_interest_timestamp",
                  "0"
                ],
                [
                  "test_no_verify",
                  "0"
                ],
                [
                  "test_refresh_10s",
                  "0"
                ],
                [
                  "test_self_verification",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_no_verify",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ],
              [
                "test_self_verification",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_no_verify",
                "false"
              ],
              [
                "test_refresh_10s",
                "true"
              ],
              [
                "test_self_verification",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "6"
              ],
              [
                "test_no_verify",
                "3"
              ],
              [
                "test_refresh_10s",
                "9"
              ],
              [
                "test_self_verification",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                [
                  "newInterest",
                  "certName",
                  "oldInterest",
                  "vr",
                  "interestName"
                ]
              ],
              [
                "test_no_verify",
                [
                  "policyManager",
                  "identityName",
                  "data",
                  "keyChain",
                  "vr"
                ]
              ],
              [
                "test_refresh_10s",
                [
                  "encodedData",
                  "data",
                  "cert",
                  "certData",
                  "vr",
                  "dataBlob",
                  "encodedCert"
                ]
              ],
              [
                "test_self_verification",
                [
                  "policyManager",
                  "identityName",
                  "data",
                  "data2",
                  "keyChain",
                  "vr"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                [
                  "self.policyManager",
                  "self.face",
                  "self.identityManager",
                  "self.identityName",
                  "self.keyChain"
                ]
              ],
              [
                "test_no_verify",
                [
                  "self.identityManager"
                ]
              ],
              [
                "test_refresh_10s",
                [
                  "self.policyManager",
                  "self.testCertFile",
                  "self.identityName",
                  "self.keyChain"
                ]
              ],
              [
                "test_self_verification",
                [
                  "self.identityStorage",
                  "self.identityManager"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.736962436171826,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_self_verification",
                  "test_refresh_10s",
                  0.7333825356304948
                ],
                [
                  "test_interest_timestamp",
                  "test_refresh_10s",
                  0.7014769345079683
                ],
                [
                  "test_no_verify",
                  "test_interest_timestamp",
                  0.6686078926213931
                ],
                [
                  "test_no_verify",
                  "test_self_verification",
                  0.880065557325376
                ],
                [
                  "test_no_verify",
                  "test_refresh_10s",
                  0.6927726247986575
                ],
                [
                  "test_self_verification",
                  "test_interest_timestamp",
                  0.7454690721470668
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_no_verify",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ],
              [
                "test_self_verification",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_validator_null.py",
    "testCases": [
      {
        "name": "TestValidatorNull",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_validate_data",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_validate_interest",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_validate_data",
                  "[]"
                ],
                [
                  "test_validate_interest",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_validate_data",
                  "false"
                ],
                [
                  "test_validate_interest",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_validate_data",
                  "false"
                ],
                [
                  "test_validate_interest",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_validate_data",
                  "false"
                ],
                [
                  "test_validate_interest",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_validate_data",
                  "false"
                ],
                [
                  "test_validate_interest",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                "false"
              ],
              [
                "test_validate_interest",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                "false"
              ],
              [
                "test_validate_interest",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                []
              ],
              [
                "test_validate_interest",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                "false"
              ],
              [
                "test_validate_interest",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                "false"
              ],
              [
                "test_validate_interest",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_validate_data",
                  "0"
                ],
                [
                  "test_validate_interest",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_validate_data",
                  "0"
                ],
                [
                  "test_validate_interest",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                "false"
              ],
              [
                "test_validate_interest",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                "false"
              ],
              [
                "test_validate_interest",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                "1"
              ],
              [
                "test_validate_interest",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                [
                  "data",
                  "identity",
                  "validator",
                  "successCount",
                  "failureCount"
                ]
              ],
              [
                "test_validate_interest",
                [
                  "interest",
                  "identity",
                  "validator",
                  "successCount",
                  "failureCount"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_validate_data",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_validate_interest",
                [
                  "self._fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9736842105263156,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_validate_data",
                  "test_validate_interest",
                  0.9736842105263156
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_validate_data",
                "true"
              ],
              [
                "test_validate_interest",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_pib_identity_container.py",
    "testCases": [
      {
        "name": "TestPibIdentityContainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_basic",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_basic",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_basic",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_basic",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_basic",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_basic",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "30"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                [
                  "fixture",
                  "container",
                  "identity12",
                  "identity11",
                  "identity2",
                  "identity21",
                  "identity1",
                  "pibImpl",
                  "container2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                [
                  "self.fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_group_manager_db.py",
    "testCases": [
      {
        "name": "TestGroupManagerDb",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_database_functions",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_database_functions",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_database_functions",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_database_functions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_database_functions",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_database_functions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_database_functions",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_database_functions",
                [
                  "self.databaseFilePath"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_database_functions",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_database_functions",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_database_functions",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                "38"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_database_functions",
                [
                  "keyBlob",
                  "memberMap",
                  "scheduleResult",
                  "scheduleBlob",
                  "params",
                  "encryptKey",
                  "schedule",
                  "name5",
                  "name4",
                  "name3",
                  "names",
                  "decryptKey",
                  "members",
                  "newSchedule",
                  "name2",
                  "repetitiveInterval",
                  "name1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_database_functions",
                [
                  "self.database"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_database_functions",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_identity_methods.py",
    "testCases": [
      {
        "name": "TestSqlIdentityStorage",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_stress",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_ecdsa_identity",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_identity_create_delete",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_key_autocreate_identity",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_certificate_add_delete",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_key_create_delete",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_stress",
                  "[]"
                ],
                [
                  "test_ecdsa_identity",
                  "[]"
                ],
                [
                  "test_identity_create_delete",
                  "[]"
                ],
                [
                  "test_key_autocreate_identity",
                  "[]"
                ],
                [
                  "test_certificate_add_delete",
                  "[]"
                ],
                [
                  "test_key_create_delete",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_stress",
                  "false"
                ],
                [
                  "test_ecdsa_identity",
                  "false"
                ],
                [
                  "test_identity_create_delete",
                  "false"
                ],
                [
                  "test_key_autocreate_identity",
                  "false"
                ],
                [
                  "test_certificate_add_delete",
                  "false"
                ],
                [
                  "test_key_create_delete",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_stress",
                  "false"
                ],
                [
                  "test_ecdsa_identity",
                  "false"
                ],
                [
                  "test_identity_create_delete",
                  "false"
                ],
                [
                  "test_key_autocreate_identity",
                  "false"
                ],
                [
                  "test_certificate_add_delete",
                  "false"
                ],
                [
                  "test_key_create_delete",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_stress",
                  "true"
                ],
                [
                  "test_ecdsa_identity",
                  "false"
                ],
                [
                  "test_identity_create_delete",
                  "false"
                ],
                [
                  "test_key_autocreate_identity",
                  "true"
                ],
                [
                  "test_certificate_add_delete",
                  "false"
                ],
                [
                  "test_key_create_delete",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_stress",
                  "false"
                ],
                [
                  "test_ecdsa_identity",
                  "false"
                ],
                [
                  "test_identity_create_delete",
                  "false"
                ],
                [
                  "test_key_autocreate_identity",
                  "false"
                ],
                [
                  "test_certificate_add_delete",
                  "false"
                ],
                [
                  "test_key_create_delete",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                "false"
              ],
              [
                "test_ecdsa_identity",
                "false"
              ],
              [
                "test_identity_create_delete",
                "false"
              ],
              [
                "test_key_autocreate_identity",
                "false"
              ],
              [
                "test_certificate_add_delete",
                "false"
              ],
              [
                "test_key_create_delete",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                "false"
              ],
              [
                "test_ecdsa_identity",
                "false"
              ],
              [
                "test_identity_create_delete",
                "false"
              ],
              [
                "test_key_autocreate_identity",
                "false"
              ],
              [
                "test_certificate_add_delete",
                "false"
              ],
              [
                "test_key_create_delete",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_stress",
                [
                  "self.policyManager",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_ecdsa_identity",
                [
                  "self.policyManager",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_identity_create_delete",
                [
                  "self.policyManager",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_key_autocreate_identity",
                [
                  "self.policyManager",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_certificate_add_delete",
                [
                  "self.policyManager",
                  "self.databaseFilePath"
                ]
              ],
              [
                "test_key_create_delete",
                [
                  "self.policyManager",
                  "self.databaseFilePath"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                "false"
              ],
              [
                "test_ecdsa_identity",
                "false"
              ],
              [
                "test_identity_create_delete",
                "false"
              ],
              [
                "test_key_autocreate_identity",
                "false"
              ],
              [
                "test_certificate_add_delete",
                "false"
              ],
              [
                "test_key_create_delete",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_stress",
                "false"
              ],
              [
                "test_ecdsa_identity",
                "true"
              ],
              [
                "test_identity_create_delete",
                "false"
              ],
              [
                "test_key_autocreate_identity",
                "false"
              ],
              [
                "test_certificate_add_delete",
                "false"
              ],
              [
                "test_key_create_delete",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_stress",
                  "0"
                ],
                [
                  "test_ecdsa_identity",
                  "0"
                ],
                [
                  "test_identity_create_delete",
                  "0"
                ],
                [
                  "test_key_autocreate_identity",
                  "0"
                ],
                [
                  "test_certificate_add_delete",
                  "0"
                ],
                [
                  "test_key_create_delete",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_stress",
                  "0"
                ],
                [
                  "test_ecdsa_identity",
                  "0"
                ],
                [
                  "test_identity_create_delete",
                  "0"
                ],
                [
                  "test_key_autocreate_identity",
                  "0"
                ],
                [
                  "test_certificate_add_delete",
                  "0"
                ],
                [
                  "test_key_create_delete",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                "false"
              ],
              [
                "test_ecdsa_identity",
                "false"
              ],
              [
                "test_identity_create_delete",
                "false"
              ],
              [
                "test_key_autocreate_identity",
                "false"
              ],
              [
                "test_certificate_add_delete",
                "false"
              ],
              [
                "test_key_create_delete",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                "false"
              ],
              [
                "test_ecdsa_identity",
                "false"
              ],
              [
                "test_identity_create_delete",
                "false"
              ],
              [
                "test_key_autocreate_identity",
                "false"
              ],
              [
                "test_certificate_add_delete",
                "false"
              ],
              [
                "test_key_create_delete",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                "24"
              ],
              [
                "test_ecdsa_identity",
                "2"
              ],
              [
                "test_identity_create_delete",
                "8"
              ],
              [
                "test_key_autocreate_identity",
                "9"
              ],
              [
                "test_certificate_add_delete",
                "4"
              ],
              [
                "test_key_create_delete",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_stress",
                [
                  "keyName1",
                  "identityName",
                  "cert2",
                  "cert3",
                  "keyName2",
                  "keyName3",
                  "cert4",
                  "cert5",
                  "certName5",
                  "certName4",
                  "certName3",
                  "certName2",
                  "certName1"
                ]
              ],
              [
                "test_ecdsa_identity",
                [
                  "verifiedCallback",
                  "identityName",
                  "failedCallback",
                  "keyName",
                  "cert"
                ]
              ],
              [
                "test_identity_create_delete",
                [
                  "identityName",
                  "keyName",
                  "certificateName"
                ]
              ],
              [
                "test_key_autocreate_identity",
                [
                  "keyName1",
                  "identityName",
                  "decodedKey",
                  "cert",
                  "certName2",
                  "certName1",
                  "keyName2"
                ]
              ],
              [
                "test_certificate_add_delete",
                [
                  "keyName1",
                  "identityName",
                  "cert2",
                  "certName2",
                  "certName1"
                ]
              ],
              [
                "test_key_create_delete",
                [
                  "keyName1",
                  "identityName",
                  "keyName2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                [
                  "self.identityStorage",
                  "self.identityManager",
                  "self.keyChain"
                ]
              ],
              [
                "test_ecdsa_identity",
                [
                  "self.identityStorage",
                  "self.identityManager",
                  "self.keyChain"
                ]
              ],
              [
                "test_identity_create_delete",
                [
                  "self.identityStorage",
                  "self.identityManager",
                  "self.keyChain"
                ]
              ],
              [
                "test_key_autocreate_identity",
                [
                  "self.identityStorage",
                  "self.identityManager",
                  "self.keyChain"
                ]
              ],
              [
                "test_certificate_add_delete",
                [
                  "self.identityStorage",
                  "self.identityManager",
                  "self.keyChain"
                ]
              ],
              [
                "test_key_create_delete",
                [
                  "self.identityStorage",
                  "self.identityManager",
                  "self.keyChain"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6357927634066062,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_identity_create_delete",
                  "test_certificate_add_delete",
                  0.5649472851115479
                ],
                [
                  "test_key_autocreate_identity",
                  "test_certificate_add_delete",
                  0.8532097400435376
                ],
                [
                  "test_identity_create_delete",
                  "test_stress",
                  0.5031640803075987
                ],
                [
                  "test_identity_create_delete",
                  "test_ecdsa_identity",
                  0.5556451574025736
                ],
                [
                  "test_certificate_add_delete",
                  "test_stress",
                  0.8389052243178738
                ],
                [
                  "test_key_create_delete",
                  "test_key_autocreate_identity",
                  0.8133124017144262
                ],
                [
                  "test_certificate_add_delete",
                  "test_ecdsa_identity",
                  0.6039848876571601
                ],
                [
                  "test_stress",
                  "test_ecdsa_identity",
                  0.5362182009157204
                ],
                [
                  "test_identity_create_delete",
                  "test_key_autocreate_identity",
                  0.5613189110998636
                ],
                [
                  "test_key_create_delete",
                  "test_certificate_add_delete",
                  0.6966099706505238
                ],
                [
                  "test_key_create_delete",
                  "test_stress",
                  0.602854317327077
                ],
                [
                  "test_key_autocreate_identity",
                  "test_ecdsa_identity",
                  0.5963242934346418
                ],
                [
                  "test_identity_create_delete",
                  "test_key_create_delete",
                  0.5230312919752143
                ],
                [
                  "test_key_create_delete",
                  "test_ecdsa_identity",
                  0.5478514789045048
                ],
                [
                  "test_key_autocreate_identity",
                  "test_stress",
                  0.7395142102368301
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_stress",
                "false"
              ],
              [
                "test_ecdsa_identity",
                "false"
              ],
              [
                "test_identity_create_delete",
                "false"
              ],
              [
                "test_key_autocreate_identity",
                "false"
              ],
              [
                "test_certificate_add_delete",
                "false"
              ],
              [
                "test_key_create_delete",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_access_manager_v2.py",
    "testCases": [
      {
        "name": "TestAccessManagerV2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_published_kek",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_published_kdks",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "[]"
                ],
                [
                  "test_published_kek",
                  "[]"
                ],
                [
                  "test_published_kdks",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "true"
                ],
                [
                  "test_published_kek",
                  "false"
                ],
                [
                  "test_published_kdks",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "false"
                ],
                [
                  "test_published_kek",
                  "false"
                ],
                [
                  "test_published_kdks",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "false"
                ],
                [
                  "test_published_kek",
                  "false"
                ],
                [
                  "test_published_kdks",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "false"
                ],
                [
                  "test_published_kek",
                  "false"
                ],
                [
                  "test_published_kdks",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ],
              [
                "test_published_kek",
                "false"
              ],
              [
                "test_published_kdks",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ],
              [
                "test_published_kek",
                "false"
              ],
              [
                "test_published_kdks",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                []
              ],
              [
                "test_published_kek",
                []
              ],
              [
                "test_published_kdks",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ],
              [
                "test_published_kek",
                "false"
              ],
              [
                "test_published_kdks",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "true"
              ],
              [
                "test_published_kek",
                "false"
              ],
              [
                "test_published_kdks",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "0"
                ],
                [
                  "test_published_kek",
                  "0"
                ],
                [
                  "test_published_kdks",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_enumerate_data_from_in_memory_storage",
                  "0"
                ],
                [
                  "test_published_kek",
                  "0"
                ],
                [
                  "test_published_kdks",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ],
              [
                "test_published_kek",
                "false"
              ],
              [
                "test_published_kdks",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ],
              [
                "test_published_kek",
                "false"
              ],
              [
                "test_published_kdks",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "3"
              ],
              [
                "test_published_kek",
                "2"
              ],
              [
                "test_published_kdks",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                [
                  "nKek",
                  "nKdk"
                ]
              ],
              [
                "test_published_kek",
                []
              ],
              [
                "test_published_kdks",
                [
                  "kdkName"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_published_kek",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_published_kdks",
                [
                  "self._fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3601872585841975,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_published_kdks",
                  "test_enumerate_data_from_in_memory_storage",
                  0.42662874579678184
                ],
                [
                  "test_published_kek",
                  "test_published_kdks",
                  0.5414506039620101
                ],
                [
                  "test_published_kek",
                  "test_enumerate_data_from_in_memory_storage",
                  0.11248242599380047
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_enumerate_data_from_in_memory_storage",
                "false"
              ],
              [
                "test_published_kek",
                "false"
              ],
              [
                "test_published_kdks",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_policy_manager_v2.py",
    "testCases": [
      {
        "name": "TestPolicyManagerV2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_interest_timestamp",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_refresh_10s",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_interest_timestamp",
                  "[]"
                ],
                [
                  "test_refresh_10s",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_interest_timestamp",
                  "false"
                ],
                [
                  "test_refresh_10s",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_interest_timestamp",
                  "false"
                ],
                [
                  "test_refresh_10s",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_interest_timestamp",
                  "true"
                ],
                [
                  "test_refresh_10s",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_interest_timestamp",
                  "false"
                ],
                [
                  "test_refresh_10s",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_interest_timestamp",
                [
                  "self.tpmBackEnd",
                  "self.testCertFile",
                  "self.pibImpl"
                ]
              ],
              [
                "test_refresh_10s",
                [
                  "self.tpmBackEnd",
                  "self.keyName",
                  "self.pibImpl"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_interest_timestamp",
                "true"
              ],
              [
                "test_refresh_10s",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_interest_timestamp",
                  "0"
                ],
                [
                  "test_refresh_10s",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_interest_timestamp",
                  "0"
                ],
                [
                  "test_refresh_10s",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_refresh_10s",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "6"
              ],
              [
                "test_refresh_10s",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                [
                  "face",
                  "newInterest",
                  "certName",
                  "oldInterest",
                  "vr",
                  "interestName"
                ]
              ],
              [
                "test_refresh_10s",
                [
                  "encodedData",
                  "data",
                  "signingInfo",
                  "now",
                  "cert",
                  "certData",
                  "vr",
                  "dataBlob",
                  "encodedCert"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                [
                  "self.policyManager",
                  "self.keyName",
                  "self.identityName",
                  "self.keyChain"
                ]
              ],
              [
                "test_refresh_10s",
                [
                  "self.policyManager",
                  "self.identityName",
                  "self.testCertFile",
                  "self.keyChain"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7235406842335891,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_interest_timestamp",
                  "test_refresh_10s",
                  0.7235406842335891
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_interest_timestamp",
                "false"
              ],
              [
                "test_refresh_10s",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_verification_rules.py",
    "testCases": [
      {
        "name": "TestRegexMatching",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hyperrelation",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_name_relation",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_simple_regex",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_interest_matching",
                  "[]"
                ],
                [
                  "test_checker_hierarchical",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hyperrelation",
                  "[]"
                ],
                [
                  "test_name_relation",
                  "[]"
                ],
                [
                  "test_simple_regex",
                  "[]"
                ],
                [
                  "test_interest_matching",
                  "[]"
                ],
                [
                  "test_checker_hierarchical",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hyperrelation",
                  "false"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "false"
                ],
                [
                  "test_interest_matching",
                  "false"
                ],
                [
                  "test_checker_hierarchical",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hyperrelation",
                  "false"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "false"
                ],
                [
                  "test_interest_matching",
                  "false"
                ],
                [
                  "test_checker_hierarchical",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hyperrelation",
                  "false"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "false"
                ],
                [
                  "test_interest_matching",
                  "false"
                ],
                [
                  "test_checker_hierarchical",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hyperrelation",
                  "false"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "false"
                ],
                [
                  "test_interest_matching",
                  "false"
                ],
                [
                  "test_checker_hierarchical",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hyperrelation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ],
              [
                "test_interest_matching",
                "true"
              ],
              [
                "test_checker_hierarchical",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hyperrelation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ],
              [
                "test_interest_matching",
                "false"
              ],
              [
                "test_checker_hierarchical",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_hyperrelation",
                [
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.identityName"
                ]
              ],
              [
                "test_name_relation",
                [
                  "self.shortCertName",
                  "self.defaultCertName",
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.identityName",
                  "self.keyChain"
                ]
              ],
              [
                "test_simple_regex",
                [
                  "self.shortCertName",
                  "self.defaultCertName",
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.identityName",
                  "self.keyChain"
                ]
              ],
              [
                "test_interest_matching",
                [
                  "self.shortCertName",
                  "self.defaultCertName",
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.identityName",
                  "self.keyChain"
                ]
              ],
              [
                "test_checker_hierarchical",
                [
                  "self.identityStorage",
                  "self.privateKeyStorage",
                  "self.identityName"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hyperrelation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ],
              [
                "test_interest_matching",
                "false"
              ],
              [
                "test_checker_hierarchical",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hyperrelation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ],
              [
                "test_interest_matching",
                "false"
              ],
              [
                "test_checker_hierarchical",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hyperrelation",
                  "0"
                ],
                [
                  "test_name_relation",
                  "0"
                ],
                [
                  "test_simple_regex",
                  "0"
                ],
                [
                  "test_interest_matching",
                  "0"
                ],
                [
                  "test_checker_hierarchical",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hyperrelation",
                  "0"
                ],
                [
                  "test_name_relation",
                  "0"
                ],
                [
                  "test_simple_regex",
                  "0"
                ],
                [
                  "test_interest_matching",
                  "0"
                ],
                [
                  "test_checker_hierarchical",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hyperrelation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ],
              [
                "test_interest_matching",
                "false"
              ],
              [
                "test_checker_hierarchical",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hyperrelation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ],
              [
                "test_interest_matching",
                "false"
              ],
              [
                "test_checker_hierarchical",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hyperrelation",
                "4"
              ],
              [
                "test_name_relation",
                "9"
              ],
              [
                "test_simple_regex",
                "7"
              ],
              [
                "test_interest_matching",
                "0"
              ],
              [
                "test_checker_hierarchical",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_hyperrelation",
                [
                  "policyManager",
                  "matchedRule",
                  "data2",
                  "failureReason",
                  "data1",
                  "signatureName1",
                  "signatureName2",
                  "dataName"
                ]
              ],
              [
                "test_name_relation",
                [
                  "policyManagerPrefix",
                  "policyManagerEqual",
                  "dataName",
                  "policyManagerStrict"
                ]
              ],
              [
                "test_simple_regex",
                [
                  "policyManager",
                  "dataName4",
                  "dataName3",
                  "dataName2",
                  "matchedRule5",
                  "dataName1",
                  "matchedRule4",
                  "matchedRule3",
                  "matchedRule2",
                  "matchedRule1",
                  "dataName5"
                ]
              ],
              [
                "test_interest_matching",
                []
              ],
              [
                "test_checker_hierarchical",
                [
                  "policyManager",
                  "dataName2",
                  "dataName1",
                  "matchedRule",
                  "data2",
                  "failureReason",
                  "data1",
                  "signatureName1",
                  "signatureName2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_hyperrelation",
                [
                  "self.shortCertName",
                  "self.defaultCertName",
                  "self.keyChain"
                ]
              ],
              [
                "test_name_relation",
                []
              ],
              [
                "test_simple_regex",
                []
              ],
              [
                "test_interest_matching",
                []
              ],
              [
                "test_checker_hierarchical",
                [
                  "self.shortCertName",
                  "self.defaultCertName",
                  "self.keyChain"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3707190767317282,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_simple_regex",
                  "test_hyperrelation",
                  0.6514002526531799
                ],
                [
                  "test_name_relation",
                  "test_checker_hierarchical",
                  0.33884846627456855
                ],
                [
                  "test_name_relation",
                  "test_interest_matching",
                  0.023262105259961776
                ],
                [
                  "test_simple_regex",
                  "test_checker_hierarchical",
                  0.6632753273770622
                ],
                [
                  "test_hyperrelation",
                  "test_interest_matching",
                  0.06337242505244779
                ],
                [
                  "test_name_relation",
                  "test_hyperrelation",
                  0.3756200504435853
                ],
                [
                  "test_simple_regex",
                  "test_interest_matching",
                  0.03724247322069526
                ],
                [
                  "test_name_relation",
                  "test_simple_regex",
                  0.5607931786956739
                ],
                [
                  "test_checker_hierarchical",
                  "test_hyperrelation",
                  0.9333824874402578
                ],
                [
                  "test_checker_hierarchical",
                  "test_interest_matching",
                  0.059994000899850033
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hyperrelation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ],
              [
                "test_interest_matching",
                "false"
              ],
              [
                "test_checker_hierarchical",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_pib_certificate_container.py",
    "testCases": [
      {
        "name": "TestPibCertificateContainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_errors",
                  "[PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail]"
                ],
                [
                  "test_basic",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_errors",
                  "[]"
                ],
                [
                  "test_basic",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_errors",
                  "true"
                ],
                [
                  "test_basic",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_basic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "true"
              ],
              [
                "test_basic",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                []
              ],
              [
                "test_basic",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_basic",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "0"
              ],
              [
                "test_basic",
                "27"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                [
                  "fixture",
                  "container",
                  "pibImpl"
                ]
              ],
              [
                "test_basic",
                [
                  "fixture",
                  "container",
                  "pibImpl",
                  "container2",
                  "id1Key1Cert3Name",
                  "cert2",
                  "cert1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                [
                  "self.fixture"
                ]
              ],
              [
                "test_basic",
                [
                  "self.fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6428856532583,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_basic",
                  "test_errors",
                  0.6428856532583
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_basic",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_registration_callbacks.py",
    "testCases": [
      {
        "name": "TestRegistrationCallbacks",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_registration_callbacks",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_registration_callbacks",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_registration_callbacks",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_registration_callbacks",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_registration_callbacks",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_registration_callbacks",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_registration_callbacks",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_registration_callbacks",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_registration_callbacks",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_registration_callbacks",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                [
                  "onRegisterSuccess",
                  "onRegisterFailed"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                [
                  "self.face"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_callbacks",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_trust_anchor_container.py",
    "testCases": [
      {
        "name": "TestTrustAnchorContainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_insert",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail, PyCallExpression: self.fail, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.fail]"
                ],
                [
                  "test_find_by_interest",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_insert",
                  "[]"
                ],
                [
                  "test_find_by_interest",
                  "[]"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_insert",
                  "false"
                ],
                [
                  "test_find_by_interest",
                  "false"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_insert",
                  "false"
                ],
                [
                  "test_find_by_interest",
                  "false"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_insert",
                  "true"
                ],
                [
                  "test_find_by_interest",
                  "true"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_insert",
                  "false"
                ],
                [
                  "test_find_by_interest",
                  "false"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_insert",
                "false"
              ],
              [
                "test_find_by_interest",
                "false"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_insert",
                "true"
              ],
              [
                "test_find_by_interest",
                "false"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_insert",
                [
                  "self.fixture",
                  "self.certificateDirectoryPath"
                ]
              ],
              [
                "test_find_by_interest",
                [
                  "self.certificatePath2",
                  "self.certificate1",
                  "self.certificateDirectoryPath",
                  "self.certificate2",
                  "self.identity2"
                ]
              ],
              [
                "test_dynamic_anchor_from_directory",
                [
                  "self.certificate1",
                  "self.certificatePath1"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_insert",
                "false"
              ],
              [
                "test_find_by_interest",
                "false"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_insert",
                "true"
              ],
              [
                "test_find_by_interest",
                "false"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_insert",
                  "0"
                ],
                [
                  "test_find_by_interest",
                  "0"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_insert",
                  "0"
                ],
                [
                  "test_find_by_interest",
                  "0"
                ],
                [
                  "test_dynamic_anchor_from_directory",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_insert",
                "false"
              ],
              [
                "test_find_by_interest",
                "false"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_insert",
                "true"
              ],
              [
                "test_find_by_interest",
                "false"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_insert",
                "17"
              ],
              [
                "test_find_by_interest",
                "9"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_insert",
                [
                  "staticGroup",
                  "certificate"
                ]
              ],
              [
                "test_find_by_interest",
                [
                  "interest1",
                  "certificate3",
                  "interest",
                  "certificate4",
                  "certificate5",
                  "certificate3Copy",
                  "interest3",
                  "interest2",
                  "foundCertificate"
                ]
              ],
              [
                "test_dynamic_anchor_from_directory",
                [
                  "allFiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_insert",
                [
                  "self.certificatePath2",
                  "self.certificate1",
                  "self.certificate2",
                  "self.anchorContainer",
                  "self.identity1",
                  "self.certificatePath1",
                  "self.identity2"
                ]
              ],
              [
                "test_find_by_interest",
                [
                  "self.fixture",
                  "self.anchorContainer",
                  "self.identity1",
                  "self.certificatePath1"
                ]
              ],
              [
                "test_dynamic_anchor_from_directory",
                [
                  "self.fixture",
                  "self.certificatePath2",
                  "self.certificateDirectoryPath",
                  "self.certificate2",
                  "self.anchorContainer",
                  "self.identity1",
                  "self.identity2"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6442418911716977,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_dynamic_anchor_from_directory",
                  "test_find_by_interest",
                  0.6179724721574665
                ],
                [
                  "test_insert",
                  "test_find_by_interest",
                  0.5754715743007491
                ],
                [
                  "test_insert",
                  "test_dynamic_anchor_from_directory",
                  0.7392816270568775
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_insert",
                "true"
              ],
              [
                "test_find_by_interest",
                "true"
              ],
              [
                "test_dynamic_anchor_from_directory",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_invertible_bloom_lookup_table.py",
    "testCases": [
      {
        "name": "TestInvertibleBloomLookupTable",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testCopyInsertErase",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "testDifference",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "testEqual",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "testNameAppendAndExtract",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.fail]"
                ],
                [
                  "testHigherSequence",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testCopyInsertErase",
                  "[]"
                ],
                [
                  "testDifference",
                  "[]"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "[]"
                ],
                [
                  "testEqual",
                  "[]"
                ],
                [
                  "testNameAppendAndExtract",
                  "[]"
                ],
                [
                  "testHigherSequence",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testCopyInsertErase",
                  "false"
                ],
                [
                  "testDifference",
                  "false"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "true"
                ],
                [
                  "testEqual",
                  "false"
                ],
                [
                  "testNameAppendAndExtract",
                  "false"
                ],
                [
                  "testHigherSequence",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testCopyInsertErase",
                  "false"
                ],
                [
                  "testDifference",
                  "false"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "false"
                ],
                [
                  "testEqual",
                  "false"
                ],
                [
                  "testNameAppendAndExtract",
                  "false"
                ],
                [
                  "testHigherSequence",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testCopyInsertErase",
                  "false"
                ],
                [
                  "testDifference",
                  "true"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "false"
                ],
                [
                  "testEqual",
                  "true"
                ],
                [
                  "testNameAppendAndExtract",
                  "false"
                ],
                [
                  "testHigherSequence",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testCopyInsertErase",
                  "false"
                ],
                [
                  "testDifference",
                  "false"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "false"
                ],
                [
                  "testEqual",
                  "false"
                ],
                [
                  "testNameAppendAndExtract",
                  "false"
                ],
                [
                  "testHigherSequence",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                "false"
              ],
              [
                "testDifference",
                "false"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "false"
              ],
              [
                "testEqual",
                "false"
              ],
              [
                "testNameAppendAndExtract",
                "false"
              ],
              [
                "testHigherSequence",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "testCopyInsertErase",
                "false"
              ],
              [
                "testDifference",
                "false"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "false"
              ],
              [
                "testEqual",
                "false"
              ],
              [
                "testNameAppendAndExtract",
                "true"
              ],
              [
                "testHigherSequence",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                []
              ],
              [
                "testDifference",
                []
              ],
              [
                "testDifferenceBwOversizedIblts",
                []
              ],
              [
                "testEqual",
                []
              ],
              [
                "testNameAppendAndExtract",
                []
              ],
              [
                "testHigherSequence",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                "false"
              ],
              [
                "testDifference",
                "false"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "false"
              ],
              [
                "testEqual",
                "false"
              ],
              [
                "testNameAppendAndExtract",
                "false"
              ],
              [
                "testHigherSequence",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testCopyInsertErase",
                "false"
              ],
              [
                "testDifference",
                "true"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "true"
              ],
              [
                "testEqual",
                "false"
              ],
              [
                "testNameAppendAndExtract",
                "false"
              ],
              [
                "testHigherSequence",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testCopyInsertErase",
                  "0"
                ],
                [
                  "testDifference",
                  "0"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "0"
                ],
                [
                  "testEqual",
                  "0"
                ],
                [
                  "testNameAppendAndExtract",
                  "0"
                ],
                [
                  "testHigherSequence",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testCopyInsertErase",
                  "0"
                ],
                [
                  "testDifference",
                  "0"
                ],
                [
                  "testDifferenceBwOversizedIblts",
                  "0"
                ],
                [
                  "testEqual",
                  "0"
                ],
                [
                  "testNameAppendAndExtract",
                  "0"
                ],
                [
                  "testHigherSequence",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                "false"
              ],
              [
                "testDifference",
                "false"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "false"
              ],
              [
                "testEqual",
                "false"
              ],
              [
                "testNameAppendAndExtract",
                "false"
              ],
              [
                "testHigherSequence",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                "false"
              ],
              [
                "testDifference",
                "false"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "false"
              ],
              [
                "testEqual",
                "false"
              ],
              [
                "testNameAppendAndExtract",
                "false"
              ],
              [
                "testHigherSequence",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                "1"
              ],
              [
                "testDifference",
                "9"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "6"
              ],
              [
                "testEqual",
                "3"
              ],
              [
                "testNameAppendAndExtract",
                "2"
              ],
              [
                "testHigherSequence",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                [
                  "hash5",
                  "hash3",
                  "size",
                  "hash1",
                  "iblt2",
                  "iblt1",
                  "prefix"
                ]
              ],
              [
                "testDifference",
                [
                  "ownIblt",
                  "negative",
                  "size",
                  "receivedIblt",
                  "prefix",
                  "newHash",
                  "diff",
                  "positive"
                ]
              ],
              [
                "testDifferenceBwOversizedIblts",
                [
                  "ownIblt",
                  "negative",
                  "size",
                  "prefix",
                  "receivedIblt",
                  "newHash",
                  "diff",
                  "positive"
                ]
              ],
              [
                "testEqual",
                [
                  "size",
                  "iblt2",
                  "iblt1",
                  "prefix",
                  "newHash",
                  "ibfName1",
                  "ibfName2"
                ]
              ],
              [
                "testNameAppendAndExtract",
                [
                  "iblt",
                  "encodedIblt",
                  "receivedDifferentSize",
                  "size",
                  "prefix",
                  "newHash",
                  "expectedEncoding",
                  "received",
                  "ibltName"
                ]
              ],
              [
                "testHigherSequence",
                [
                  "prefix2",
                  "ownIblt",
                  "negative",
                  "hash2",
                  "size",
                  "hash1",
                  "receivedIblt",
                  "prefix",
                  "diff",
                  "positive"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testCopyInsertErase",
                []
              ],
              [
                "testDifference",
                []
              ],
              [
                "testDifferenceBwOversizedIblts",
                []
              ],
              [
                "testEqual",
                []
              ],
              [
                "testNameAppendAndExtract",
                []
              ],
              [
                "testHigherSequence",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7506637220898215,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testEqual",
                  "testHigherSequence",
                  0.7557313398004571
                ],
                [
                  "testNameAppendAndExtract",
                  "testHigherSequence",
                  0.7238896185773502
                ],
                [
                  "testDifference",
                  "testDifferenceBwOversizedIblts",
                  0.8726186081329531
                ],
                [
                  "testNameAppendAndExtract",
                  "testCopyInsertErase",
                  0.7120417031568168
                ],
                [
                  "testCopyInsertErase",
                  "testHigherSequence",
                  0.8431301067590788
                ],
                [
                  "testCopyInsertErase",
                  "testDifferenceBwOversizedIblts",
                  0.7785778803219621
                ],
                [
                  "testCopyInsertErase",
                  "testDifference",
                  0.6459172514523666
                ],
                [
                  "testNameAppendAndExtract",
                  "testDifference",
                  0.6129372159002363
                ],
                [
                  "testNameAppendAndExtract",
                  "testDifferenceBwOversizedIblts",
                  0.7280575696901113
                ],
                [
                  "testEqual",
                  "testDifference",
                  0.6441311456952487
                ],
                [
                  "testEqual",
                  "testDifferenceBwOversizedIblts",
                  0.7626489446302814
                ],
                [
                  "testHigherSequence",
                  "testDifference",
                  0.8264561725239432
                ],
                [
                  "testEqual",
                  "testNameAppendAndExtract",
                  0.6979264476283233
                ],
                [
                  "testEqual",
                  "testCopyInsertErase",
                  0.7773068146741904
                ],
                [
                  "testHigherSequence",
                  "testDifferenceBwOversizedIblts",
                  0.878585012404002
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "testCopyInsertErase",
                "false"
              ],
              [
                "testDifference",
                "false"
              ],
              [
                "testDifferenceBwOversizedIblts",
                "false"
              ],
              [
                "testEqual",
                "false"
              ],
              [
                "testNameAppendAndExtract",
                "false"
              ],
              [
                "testHigherSequence",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_validation_policy_config.py",
    "testCases": [
      {
        "name": "TestValidationPolicyConfig",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hierarchical",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_hyper_relation",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_name_relation",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_simple_regex",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hierarchical",
                  "[]"
                ],
                [
                  "test_hyper_relation",
                  "[]"
                ],
                [
                  "test_name_relation",
                  "[]"
                ],
                [
                  "test_simple_regex",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hierarchical",
                  "false"
                ],
                [
                  "test_hyper_relation",
                  "false"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hierarchical",
                  "false"
                ],
                [
                  "test_hyper_relation",
                  "false"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hierarchical",
                  "true"
                ],
                [
                  "test_hyper_relation",
                  "true"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hierarchical",
                  "false"
                ],
                [
                  "test_hyper_relation",
                  "false"
                ],
                [
                  "test_name_relation",
                  "false"
                ],
                [
                  "test_simple_regex",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                "false"
              ],
              [
                "test_hyper_relation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                "false"
              ],
              [
                "test_hyper_relation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                []
              ],
              [
                "test_hyper_relation",
                []
              ],
              [
                "test_name_relation",
                []
              ],
              [
                "test_simple_regex",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                "false"
              ],
              [
                "test_hyper_relation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                "false"
              ],
              [
                "test_hyper_relation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hierarchical",
                  "0"
                ],
                [
                  "test_hyper_relation",
                  "0"
                ],
                [
                  "test_name_relation",
                  "0"
                ],
                [
                  "test_simple_regex",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hierarchical",
                  "0"
                ],
                [
                  "test_hyper_relation",
                  "0"
                ],
                [
                  "test_name_relation",
                  "0"
                ],
                [
                  "test_simple_regex",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                "false"
              ],
              [
                "test_hyper_relation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                "false"
              ],
              [
                "test_hyper_relation",
                "false"
              ],
              [
                "test_name_relation",
                "false"
              ],
              [
                "test_simple_regex",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                "4"
              ],
              [
                "test_hyper_relation",
                "4"
              ],
              [
                "test_name_relation",
                "9"
              ],
              [
                "test_simple_regex",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                [
                  "result",
                  "fetcher",
                  "data",
                  "validator"
                ]
              ],
              [
                "test_hyper_relation",
                [
                  "result",
                  "fetcher",
                  "data",
                  "validator"
                ]
              ],
              [
                "test_name_relation",
                [
                  "result",
                  "fetcher",
                  "validatorEqual",
                  "validatorStrict",
                  "data",
                  "validatorPrefix"
                ]
              ],
              [
                "test_simple_regex",
                [
                  "result",
                  "fetcher",
                  "data",
                  "validator"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hierarchical",
                [
                  "self._policyConfigDirectory"
                ]
              ],
              [
                "test_hyper_relation",
                [
                  "self._policyConfigDirectory"
                ]
              ],
              [
                "test_name_relation",
                [
                  "self._policyConfigDirectory"
                ]
              ],
              [
                "test_simple_regex",
                [
                  "self._policyConfigDirectory"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7865281182410412,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_name_relation",
                  "test_simple_regex",
                  0.6954691996019603
                ],
                [
                  "test_hierarchical",
                  "test_hyper_relation",
                  0.9458285414514371
                ],
                [
                  "test_name_relation",
                  "test_hierarchical",
                  0.6311152150925929
                ],
                [
                  "test_simple_regex",
                  "test_hyper_relation",
                  0.8907899919885957
                ],
                [
                  "test_name_relation",
                  "test_hyper_relation",
                  0.6206445501523956
                ],
                [
                  "test_simple_regex",
                  "test_hierarchical",
                  0.9353212111592656
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_hierarchical",
                "true"
              ],
              [
                "test_hyper_relation",
                "true"
              ],
              [
                "test_name_relation",
                "true"
              ],
              [
                "test_simple_regex",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_tests_\u0026_test_control_parameters_encode_decode.py",
    "testCases": [
      {
        "name": "TestControlParametersEncodeDecode",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_encode_decode_with_no_name",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_encode_decode",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_encode_decode_with_no_name",
                  "[]"
                ],
                [
                  "test_encode_decode",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_encode_decode_with_no_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_encode_decode_with_no_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_encode_decode_with_no_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_encode_decode_with_no_name",
                  "false"
                ],
                [
                  "test_encode_decode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                []
              ],
              [
                "test_encode_decode",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_encode_decode_with_no_name",
                  "0"
                ],
                [
                  "test_encode_decode",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_encode_decode_with_no_name",
                  "0"
                ],
                [
                  "test_encode_decode",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "false"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "3"
              ],
              [
                "test_encode_decode",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                [
                  "parameters",
                  "encoded",
                  "decodedParameters"
                ]
              ],
              [
                "test_encode_decode",
                [
                  "parameters",
                  "encoded",
                  "decodedParameters"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                []
              ],
              [
                "test_encode_decode",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7392236555354718,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_encode_decode",
                  "test_encode_decode_with_no_name",
                  0.7392236555354718
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_encode_decode_with_no_name",
                "true"
              ],
              [
                "test_encode_decode",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_tests_\u0026_test_validation_policy_command_interest.py",
    "testCases": [
      {
        "name": "TestValidationPolicyCommandInterest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_basic",
                  "[]"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "[]"
                ],
                [
                  "test_limited_records",
                  "[]"
                ],
                [
                  "test_limited_record_lifetime",
                  "[]"
                ],
                [
                  "test_name_too_short",
                  "[]"
                ],
                [
                  "test_bad_signature_info",
                  "[]"
                ],
                [
                  "test_unlimited_records",
                  "[]"
                ],
                [
                  "test_zero_records",
                  "[]"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "[]"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "[]"
                ],
                [
                  "test_missing_key_locator",
                  "[]"
                ],
                [
                  "test_inner_policy_reject",
                  "[]"
                ],
                [
                  "test_zero_record_lifetime",
                  "[]"
                ],
                [
                  "test_bad_certificate_name",
                  "[]"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "[]"
                ],
                [
                  "test_bad_key_locator_type",
                  "[]"
                ],
                [
                  "test_data_passthrough",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_basic",
                  "[]"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "[]"
                ],
                [
                  "test_limited_records",
                  "[]"
                ],
                [
                  "test_limited_record_lifetime",
                  "[]"
                ],
                [
                  "test_name_too_short",
                  "[]"
                ],
                [
                  "test_bad_signature_info",
                  "[]"
                ],
                [
                  "test_unlimited_records",
                  "[]"
                ],
                [
                  "test_zero_records",
                  "[]"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "[]"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "[]"
                ],
                [
                  "test_missing_key_locator",
                  "[]"
                ],
                [
                  "test_inner_policy_reject",
                  "[]"
                ],
                [
                  "test_zero_record_lifetime",
                  "[]"
                ],
                [
                  "test_bad_certificate_name",
                  "[]"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "[]"
                ],
                [
                  "test_bad_key_locator_type",
                  "[]"
                ],
                [
                  "test_data_passthrough",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "false"
                ],
                [
                  "test_limited_records",
                  "false"
                ],
                [
                  "test_limited_record_lifetime",
                  "false"
                ],
                [
                  "test_name_too_short",
                  "false"
                ],
                [
                  "test_bad_signature_info",
                  "false"
                ],
                [
                  "test_unlimited_records",
                  "true"
                ],
                [
                  "test_zero_records",
                  "false"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "false"
                ],
                [
                  "test_missing_key_locator",
                  "false"
                ],
                [
                  "test_inner_policy_reject",
                  "false"
                ],
                [
                  "test_zero_record_lifetime",
                  "false"
                ],
                [
                  "test_bad_certificate_name",
                  "false"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "false"
                ],
                [
                  "test_bad_key_locator_type",
                  "false"
                ],
                [
                  "test_data_passthrough",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "false"
                ],
                [
                  "test_limited_records",
                  "false"
                ],
                [
                  "test_limited_record_lifetime",
                  "false"
                ],
                [
                  "test_name_too_short",
                  "false"
                ],
                [
                  "test_bad_signature_info",
                  "false"
                ],
                [
                  "test_unlimited_records",
                  "false"
                ],
                [
                  "test_zero_records",
                  "false"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "false"
                ],
                [
                  "test_missing_key_locator",
                  "false"
                ],
                [
                  "test_inner_policy_reject",
                  "false"
                ],
                [
                  "test_zero_record_lifetime",
                  "false"
                ],
                [
                  "test_bad_certificate_name",
                  "false"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "false"
                ],
                [
                  "test_bad_key_locator_type",
                  "false"
                ],
                [
                  "test_data_passthrough",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "false"
                ],
                [
                  "test_limited_records",
                  "false"
                ],
                [
                  "test_limited_record_lifetime",
                  "false"
                ],
                [
                  "test_name_too_short",
                  "false"
                ],
                [
                  "test_bad_signature_info",
                  "false"
                ],
                [
                  "test_unlimited_records",
                  "false"
                ],
                [
                  "test_zero_records",
                  "false"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "false"
                ],
                [
                  "test_missing_key_locator",
                  "false"
                ],
                [
                  "test_inner_policy_reject",
                  "false"
                ],
                [
                  "test_zero_record_lifetime",
                  "false"
                ],
                [
                  "test_bad_certificate_name",
                  "false"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "false"
                ],
                [
                  "test_bad_key_locator_type",
                  "false"
                ],
                [
                  "test_data_passthrough",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "false"
                ],
                [
                  "test_limited_records",
                  "false"
                ],
                [
                  "test_limited_record_lifetime",
                  "false"
                ],
                [
                  "test_name_too_short",
                  "false"
                ],
                [
                  "test_bad_signature_info",
                  "false"
                ],
                [
                  "test_unlimited_records",
                  "false"
                ],
                [
                  "test_zero_records",
                  "false"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "false"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "false"
                ],
                [
                  "test_missing_key_locator",
                  "false"
                ],
                [
                  "test_inner_policy_reject",
                  "false"
                ],
                [
                  "test_zero_record_lifetime",
                  "false"
                ],
                [
                  "test_bad_certificate_name",
                  "false"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "false"
                ],
                [
                  "test_bad_key_locator_type",
                  "false"
                ],
                [
                  "test_data_passthrough",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "false"
              ],
              [
                "test_limited_records",
                "false"
              ],
              [
                "test_limited_record_lifetime",
                "false"
              ],
              [
                "test_name_too_short",
                "false"
              ],
              [
                "test_bad_signature_info",
                "false"
              ],
              [
                "test_unlimited_records",
                "false"
              ],
              [
                "test_zero_records",
                "false"
              ],
              [
                "test_timestamp_reorder_negative",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "false"
              ],
              [
                "test_missing_key_locator",
                "false"
              ],
              [
                "test_inner_policy_reject",
                "false"
              ],
              [
                "test_zero_record_lifetime",
                "false"
              ],
              [
                "test_bad_certificate_name",
                "false"
              ],
              [
                "test_timestamp_reorder_equal",
                "false"
              ],
              [
                "test_bad_key_locator_type",
                "false"
              ],
              [
                "test_data_passthrough",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "false"
              ],
              [
                "test_limited_records",
                "false"
              ],
              [
                "test_limited_record_lifetime",
                "false"
              ],
              [
                "test_name_too_short",
                "false"
              ],
              [
                "test_bad_signature_info",
                "false"
              ],
              [
                "test_unlimited_records",
                "false"
              ],
              [
                "test_zero_records",
                "false"
              ],
              [
                "test_timestamp_reorder_negative",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "false"
              ],
              [
                "test_missing_key_locator",
                "false"
              ],
              [
                "test_inner_policy_reject",
                "false"
              ],
              [
                "test_zero_record_lifetime",
                "false"
              ],
              [
                "test_bad_certificate_name",
                "false"
              ],
              [
                "test_timestamp_reorder_equal",
                "false"
              ],
              [
                "test_bad_key_locator_type",
                "false"
              ],
              [
                "test_data_passthrough",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                []
              ],
              [
                "test_timestamp_out_of_grace_positive",
                []
              ],
              [
                "test_limited_records",
                []
              ],
              [
                "test_limited_record_lifetime",
                []
              ],
              [
                "test_name_too_short",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_bad_signature_info",
                []
              ],
              [
                "test_unlimited_records",
                []
              ],
              [
                "test_zero_records",
                []
              ],
              [
                "test_timestamp_reorder_negative",
                []
              ],
              [
                "test_timestamp_out_of_grace_negative",
                []
              ],
              [
                "test_missing_key_locator",
                []
              ],
              [
                "test_inner_policy_reject",
                []
              ],
              [
                "test_zero_record_lifetime",
                []
              ],
              [
                "test_bad_certificate_name",
                []
              ],
              [
                "test_timestamp_reorder_equal",
                []
              ],
              [
                "test_bad_key_locator_type",
                []
              ],
              [
                "test_data_passthrough",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "false"
              ],
              [
                "test_limited_records",
                "false"
              ],
              [
                "test_limited_record_lifetime",
                "false"
              ],
              [
                "test_name_too_short",
                "false"
              ],
              [
                "test_bad_signature_info",
                "false"
              ],
              [
                "test_unlimited_records",
                "false"
              ],
              [
                "test_zero_records",
                "false"
              ],
              [
                "test_timestamp_reorder_negative",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "false"
              ],
              [
                "test_missing_key_locator",
                "false"
              ],
              [
                "test_inner_policy_reject",
                "false"
              ],
              [
                "test_zero_record_lifetime",
                "false"
              ],
              [
                "test_bad_certificate_name",
                "false"
              ],
              [
                "test_timestamp_reorder_equal",
                "false"
              ],
              [
                "test_bad_key_locator_type",
                "false"
              ],
              [
                "test_data_passthrough",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "false"
              ],
              [
                "test_limited_records",
                "false"
              ],
              [
                "test_limited_record_lifetime",
                "false"
              ],
              [
                "test_name_too_short",
                "false"
              ],
              [
                "test_bad_signature_info",
                "false"
              ],
              [
                "test_unlimited_records",
                "false"
              ],
              [
                "test_zero_records",
                "false"
              ],
              [
                "test_timestamp_reorder_negative",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "false"
              ],
              [
                "test_missing_key_locator",
                "false"
              ],
              [
                "test_inner_policy_reject",
                "false"
              ],
              [
                "test_zero_record_lifetime",
                "false"
              ],
              [
                "test_bad_certificate_name",
                "false"
              ],
              [
                "test_timestamp_reorder_equal",
                "false"
              ],
              [
                "test_bad_key_locator_type",
                "false"
              ],
              [
                "test_data_passthrough",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "0"
                ],
                [
                  "test_limited_records",
                  "0"
                ],
                [
                  "test_limited_record_lifetime",
                  "0"
                ],
                [
                  "test_name_too_short",
                  "0"
                ],
                [
                  "test_bad_signature_info",
                  "0"
                ],
                [
                  "test_unlimited_records",
                  "0"
                ],
                [
                  "test_zero_records",
                  "0"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "0"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "0"
                ],
                [
                  "test_missing_key_locator",
                  "0"
                ],
                [
                  "test_inner_policy_reject",
                  "0"
                ],
                [
                  "test_zero_record_lifetime",
                  "0"
                ],
                [
                  "test_bad_certificate_name",
                  "0"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "0"
                ],
                [
                  "test_bad_key_locator_type",
                  "0"
                ],
                [
                  "test_data_passthrough",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "0"
                ],
                [
                  "test_limited_records",
                  "0"
                ],
                [
                  "test_limited_record_lifetime",
                  "0"
                ],
                [
                  "test_name_too_short",
                  "0"
                ],
                [
                  "test_bad_signature_info",
                  "0"
                ],
                [
                  "test_unlimited_records",
                  "0"
                ],
                [
                  "test_zero_records",
                  "0"
                ],
                [
                  "test_timestamp_reorder_negative",
                  "0"
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "0"
                ],
                [
                  "test_missing_key_locator",
                  "0"
                ],
                [
                  "test_inner_policy_reject",
                  "0"
                ],
                [
                  "test_zero_record_lifetime",
                  "0"
                ],
                [
                  "test_bad_certificate_name",
                  "0"
                ],
                [
                  "test_timestamp_reorder_equal",
                  "0"
                ],
                [
                  "test_bad_key_locator_type",
                  "0"
                ],
                [
                  "test_data_passthrough",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "false"
              ],
              [
                "test_limited_records",
                "false"
              ],
              [
                "test_limited_record_lifetime",
                "false"
              ],
              [
                "test_name_too_short",
                "false"
              ],
              [
                "test_bad_signature_info",
                "false"
              ],
              [
                "test_unlimited_records",
                "false"
              ],
              [
                "test_zero_records",
                "false"
              ],
              [
                "test_timestamp_reorder_negative",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "false"
              ],
              [
                "test_missing_key_locator",
                "false"
              ],
              [
                "test_inner_policy_reject",
                "false"
              ],
              [
                "test_zero_record_lifetime",
                "false"
              ],
              [
                "test_bad_certificate_name",
                "false"
              ],
              [
                "test_timestamp_reorder_equal",
                "false"
              ],
              [
                "test_bad_key_locator_type",
                "false"
              ],
              [
                "test_data_passthrough",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "false"
              ],
              [
                "test_limited_records",
                "false"
              ],
              [
                "test_limited_record_lifetime",
                "false"
              ],
              [
                "test_name_too_short",
                "false"
              ],
              [
                "test_bad_signature_info",
                "false"
              ],
              [
                "test_unlimited_records",
                "false"
              ],
              [
                "test_zero_records",
                "false"
              ],
              [
                "test_timestamp_reorder_negative",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "false"
              ],
              [
                "test_missing_key_locator",
                "false"
              ],
              [
                "test_inner_policy_reject",
                "false"
              ],
              [
                "test_zero_record_lifetime",
                "false"
              ],
              [
                "test_bad_certificate_name",
                "false"
              ],
              [
                "test_timestamp_reorder_equal",
                "false"
              ],
              [
                "test_bad_key_locator_type",
                "false"
              ],
              [
                "test_data_passthrough",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                "0"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "0"
              ],
              [
                "test_limited_records",
                "0"
              ],
              [
                "test_limited_record_lifetime",
                "0"
              ],
              [
                "test_name_too_short",
                "0"
              ],
              [
                "test_bad_signature_info",
                "0"
              ],
              [
                "test_unlimited_records",
                "0"
              ],
              [
                "test_zero_records",
                "0"
              ],
              [
                "test_timestamp_reorder_negative",
                "0"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "0"
              ],
              [
                "test_missing_key_locator",
                "0"
              ],
              [
                "test_inner_policy_reject",
                "0"
              ],
              [
                "test_zero_record_lifetime",
                "0"
              ],
              [
                "test_bad_certificate_name",
                "0"
              ],
              [
                "test_timestamp_reorder_equal",
                "0"
              ],
              [
                "test_bad_key_locator_type",
                "0"
              ],
              [
                "test_data_passthrough",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                [
                  "interest1",
                  "interest2"
                ]
              ],
              [
                "test_timestamp_out_of_grace_positive",
                [
                  "interest1",
                  "interest2"
                ]
              ],
              [
                "test_limited_records",
                [
                  "identity3",
                  "identity2",
                  "interest1",
                  "identity4",
                  "identity1",
                  "interest00",
                  "interest01",
                  "interest3",
                  "interest2",
                  "interest02"
                ]
              ],
              [
                "test_limited_record_lifetime",
                [
                  "interest1",
                  "interest3",
                  "interest2"
                ]
              ],
              [
                "test_name_too_short",
                [
                  "interest1"
                ]
              ],
              [
                "test_bad_signature_info",
                [
                  "interest1"
                ]
              ],
              [
                "test_unlimited_records",
                [
                  "interest1",
                  "identities",
                  "identity",
                  "interest2"
                ]
              ],
              [
                "test_zero_records",
                [
                  "interest1",
                  "interest2"
                ]
              ],
              [
                "test_timestamp_reorder_negative",
                [
                  "interest1",
                  "interest3",
                  "interest2",
                  "interest4"
                ]
              ],
              [
                "test_timestamp_out_of_grace_negative",
                [
                  "interest1",
                  "interest3",
                  "interest2"
                ]
              ],
              [
                "test_missing_key_locator",
                [
                  "interest1",
                  "signatureInfo"
                ]
              ],
              [
                "test_inner_policy_reject",
                [
                  "interest1"
                ]
              ],
              [
                "test_zero_record_lifetime",
                [
                  "interest1",
                  "interest2"
                ]
              ],
              [
                "test_bad_certificate_name",
                [
                  "interest1",
                  "keyLocator",
                  "signatureInfo"
                ]
              ],
              [
                "test_timestamp_reorder_equal",
                [
                  "interest1",
                  "interest3",
                  "interest2"
                ]
              ],
              [
                "test_bad_key_locator_type",
                [
                  "interest1",
                  "keyLocator",
                  "signatureInfo"
                ]
              ],
              [
                "test_data_passthrough",
                [
                  "data1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_basic",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_timestamp_out_of_grace_positive",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_limited_records",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_limited_record_lifetime",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_name_too_short",
                []
              ],
              [
                "test_bad_signature_info",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_unlimited_records",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_zero_records",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_timestamp_reorder_negative",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_timestamp_out_of_grace_negative",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_missing_key_locator",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_inner_policy_reject",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_zero_record_lifetime",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_bad_certificate_name",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_timestamp_reorder_equal",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_bad_key_locator_type",
                [
                  "self._fixture"
                ]
              ],
              [
                "test_data_passthrough",
                [
                  "self._fixture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6627058391207119,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_basic",
                  "test_zero_record_lifetime",
                  0.7633612498704605
                ],
                [
                  "test_basic",
                  "test_bad_key_locator_type",
                  0.47237364297481366
                ],
                [
                  "test_basic",
                  "test_timestamp_reorder_equal",
                  0.7803976465927096
                ],
                [
                  "test_missing_key_locator",
                  "test_zero_record_lifetime",
                  0.7614867385131373
                ],
                [
                  "test_bad_key_locator_type",
                  "test_bad_certificate_name",
                  0.870863811875455
                ],
                [
                  "test_basic",
                  "test_bad_signature_info",
                  0.6182045541309925
                ],
                [
                  "test_missing_key_locator",
                  "test_limited_records",
                  0.6581551578282863
                ],
                [
                  "test_data_passthrough",
                  "test_timestamp_reorder_negative",
                  0.3919508967992545
                ],
                [
                  "test_zero_records",
                  "test_zero_record_lifetime",
                  0.9854772923665919
                ],
                [
                  "test_basic",
                  "test_limited_records",
                  0.7468493526275927
                ],
                [
                  "test_name_too_short",
                  "test_zero_record_lifetime",
                  0.4940094076095274
                ],
                [
                  "test_data_passthrough",
                  "test_name_too_short",
                  0.36313651960128146
                ],
                [
                  "test_name_too_short",
                  "test_timestamp_reorder_equal",
                  0.5423382014634069
                ],
                [
                  "test_name_too_short",
                  "test_bad_key_locator_type",
                  0.4311107465519481
                ],
                [
                  "test_data_passthrough",
                  "test_limited_record_lifetime",
                  0.44919142595794975
                ],
                [
                  "test_inner_policy_reject",
                  "test_timestamp_reorder_negative",
                  0.45907808504876707
                ],
                [
                  "test_timestamp_reorder_equal",
                  "test_zero_record_lifetime",
                  0.9088872937774616
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_unlimited_records",
                  0.8975213999639036
                ],
                [
                  "test_basic",
                  "test_timestamp_out_of_grace_positive",
                  0.7407413448468713
                ],
                [
                  "test_data_passthrough",
                  "test_bad_certificate_name",
                  0.38424189237036366
                ],
                [
                  "test_name_too_short",
                  "test_bad_signature_info",
                  0.520847435706514
                ],
                [
                  "test_data_passthrough",
                  "test_timestamp_out_of_grace_negative",
                  0.4234544332075691
                ],
                [
                  "test_bad_key_locator_type",
                  "test_timestamp_reorder_equal",
                  0.6859712463011388
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_timestamp_reorder_negative",
                  0.8706733559678027
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "test_limited_record_lifetime",
                  0.9591801914599547
                ],
                [
                  "test_basic",
                  "test_zero_records",
                  0.769930754903932
                ],
                [
                  "test_bad_key_locator_type",
                  "test_timestamp_reorder_negative",
                  0.5681247522690012
                ],
                [
                  "test_bad_key_locator_type",
                  "test_unlimited_records",
                  0.6271132236211951
                ],
                [
                  "test_bad_certificate_name",
                  "test_inner_policy_reject",
                  0.4041254562261773
                ],
                [
                  "test_timestamp_reorder_equal",
                  "test_limited_records",
                  0.8109016653570873
                ],
                [
                  "test_bad_signature_info",
                  "test_bad_key_locator_type",
                  0.6091947232721404
                ],
                [
                  "test_bad_signature_info",
                  "test_timestamp_out_of_grace_negative",
                  0.6166396831031117
                ],
                [
                  "test_inner_policy_reject",
                  "test_limited_record_lifetime",
                  0.43711365162417437
                ],
                [
                  "test_bad_key_locator_type",
                  "test_timestamp_out_of_grace_negative",
                  0.6808326986596738
                ],
                [
                  "test_inner_policy_reject",
                  "test_unlimited_records",
                  0.5152887558514558
                ],
                [
                  "test_data_passthrough",
                  "test_inner_policy_reject",
                  0.4507489358552088
                ],
                [
                  "test_name_too_short",
                  "test_timestamp_out_of_grace_positive",
                  0.4959009629949823
                ],
                [
                  "test_bad_certificate_name",
                  "test_unlimited_records",
                  0.5757519091704003
                ],
                [
                  "test_bad_signature_info",
                  "test_limited_record_lifetime",
                  0.5843252290917035
                ],
                [
                  "test_unlimited_records",
                  "test_limited_record_lifetime",
                  0.8849943940883269
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "test_timestamp_reorder_negative",
                  0.9014124276365018
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "test_zero_records",
                  0.9369288658163494
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_limited_records",
                  0.8243982516751343
                ],
                [
                  "test_name_too_short",
                  "test_unlimited_records",
                  0.47845685763598905
                ],
                [
                  "test_bad_signature_info",
                  "test_zero_record_lifetime",
                  0.639902699879465
                ],
                [
                  "test_bad_key_locator_type",
                  "test_limited_record_lifetime",
                  0.6839680330014549
                ],
                [
                  "test_inner_policy_reject",
                  "test_timestamp_out_of_grace_negative",
                  0.47395490485249836
                ],
                [
                  "test_limited_records",
                  "test_unlimited_records",
                  0.8980123748901758
                ],
                [
                  "test_bad_signature_info",
                  "test_timestamp_reorder_negative",
                  0.551065757771026
                ],
                [
                  "test_data_passthrough",
                  "test_unlimited_records",
                  0.5314557775992672
                ],
                [
                  "test_bad_signature_info",
                  "test_zero_records",
                  0.6400757530925302
                ],
                [
                  "test_bad_certificate_name",
                  "test_timestamp_out_of_grace_positive",
                  0.6086781704139407
                ],
                [
                  "test_name_too_short",
                  "test_inner_policy_reject",
                  0.5012804118276031
                ],
                [
                  "test_timestamp_reorder_negative",
                  "test_unlimited_records",
                  0.8063911710198478
                ],
                [
                  "test_missing_key_locator",
                  "test_unlimited_records",
                  0.706334368223072
                ],
                [
                  "test_timestamp_reorder_negative",
                  "test_limited_records",
                  0.7772072409878478
                ],
                [
                  "test_missing_key_locator",
                  "test_timestamp_out_of_grace_positive",
                  0.7555654383348785
                ],
                [
                  "test_timestamp_reorder_equal",
                  "test_unlimited_records",
                  0.8462148623744677
                ],
                [
                  "test_data_passthrough",
                  "test_bad_signature_info",
                  0.3385309064224042
                ],
                [
                  "test_bad_signature_info",
                  "test_missing_key_locator",
                  0.8373592320268283
                ],
                [
                  "test_bad_certificate_name",
                  "test_limited_records",
                  0.5362268983509517
                ],
                [
                  "test_bad_signature_info",
                  "test_timestamp_reorder_equal",
                  0.734943057227382
                ],
                [
                  "test_name_too_short",
                  "test_limited_records",
                  0.4377271512713173
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "test_zero_record_lifetime",
                  0.9279327700837176
                ],
                [
                  "test_missing_key_locator",
                  "test_timestamp_out_of_grace_negative",
                  0.7430724248213187
                ],
                [
                  "test_timestamp_reorder_negative",
                  "test_zero_record_lifetime",
                  0.8453776279345934
                ],
                [
                  "test_basic",
                  "test_inner_policy_reject",
                  0.6454972243679028
                ],
                [
                  "test_missing_key_locator",
                  "test_inner_policy_reject",
                  0.4944990010975896
                ],
                [
                  "test_basic",
                  "test_timestamp_out_of_grace_negative",
                  0.7192631327400675
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_zero_record_lifetime",
                  0.9477776218343478
                ],
                [
                  "test_data_passthrough",
                  "test_zero_records",
                  0.4770149788458325
                ],
                [
                  "test_missing_key_locator",
                  "test_limited_record_lifetime",
                  0.7273745543934882
                ],
                [
                  "test_data_passthrough",
                  "test_timestamp_out_of_grace_positive",
                  0.4526004377525566
                ],
                [
                  "test_bad_signature_info",
                  "test_bad_certificate_name",
                  0.702876296171167
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "test_timestamp_reorder_equal",
                  0.9115992463657111
                ],
                [
                  "test_basic",
                  "test_limited_record_lifetime",
                  0.7282913663671908
                ],
                [
                  "test_inner_policy_reject",
                  "test_timestamp_out_of_grace_positive",
                  0.5262908864750564
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "test_limited_records",
                  0.8065460467419507
                ],
                [
                  "test_data_passthrough",
                  "test_limited_records",
                  0.565803090000563
                ],
                [
                  "test_inner_policy_reject",
                  "test_zero_records",
                  0.535218024111047
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_timestamp_reorder_equal",
                  0.9234667712471215
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_zero_records",
                  0.9596001065893958
                ],
                [
                  "test_limited_record_lifetime",
                  "test_zero_record_lifetime",
                  0.9663030082512646
                ],
                [
                  "test_basic",
                  "test_missing_key_locator",
                  0.6266278069754327
                ],
                [
                  "test_bad_key_locator_type",
                  "test_timestamp_out_of_grace_positive",
                  0.6852107264582066
                ],
                [
                  "test_basic",
                  "test_timestamp_reorder_negative",
                  0.7334905294092635
                ],
                [
                  "test_basic",
                  "test_unlimited_records",
                  0.7103355960663252
                ],
                [
                  "test_bad_key_locator_type",
                  "test_zero_records",
                  0.6816971525846344
                ],
                [
                  "test_bad_certificate_name",
                  "test_zero_record_lifetime",
                  0.6133260540016477
                ],
                [
                  "test_inner_policy_reject",
                  "test_limited_records",
                  0.5021004332951434
                ],
                [
                  "test_unlimited_records",
                  "test_zero_records",
                  0.8949423628055133
                ],
                [
                  "test_missing_key_locator",
                  "test_bad_certificate_name",
                  0.8581823010458841
                ],
                [
                  "test_bad_certificate_name",
                  "test_timestamp_out_of_grace_negative",
                  0.5951335738361101
                ],
                [
                  "test_bad_key_locator_type",
                  "test_inner_policy_reject",
                  0.31377667862168845
                ],
                [
                  "test_data_passthrough",
                  "test_zero_record_lifetime",
                  0.4741951184839478
                ],
                [
                  "test_data_passthrough",
                  "test_bad_key_locator_type",
                  0.3823665369359429
                ],
                [
                  "test_data_passthrough",
                  "test_timestamp_reorder_equal",
                  0.41316308437171545
                ],
                [
                  "test_timestamp_reorder_equal",
                  "test_limited_record_lifetime",
                  0.9004508086594695
                ],
                [
                  "test_limited_records",
                  "test_zero_record_lifetime",
                  0.8383213016732114
                ],
                [
                  "test_basic",
                  "test_data_passthrough",
                  0.4676097647914122
                ],
                [
                  "test_bad_signature_info",
                  "test_inner_policy_reject",
                  0.5481281277625191
                ],
                [
                  "test_bad_signature_info",
                  "test_limited_records",
                  0.5683795694092951
                ],
                [
                  "test_timestamp_reorder_negative",
                  "test_zero_records",
                  0.8478938218961426
                ],
                [
                  "test_timestamp_out_of_grace_negative",
                  "test_unlimited_records",
                  0.8728186021275574
                ],
                [
                  "test_data_passthrough",
                  "test_missing_key_locator",
                  0.4044463884548025
                ],
                [
                  "test_bad_key_locator_type",
                  "test_zero_record_lifetime",
                  0.6866241928067701
                ],
                [
                  "test_inner_policy_reject",
                  "test_timestamp_reorder_equal",
                  0.5609882096400691
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_limited_record_lifetime",
                  0.9562440621203758
                ],
                [
                  "test_bad_key_locator_type",
                  "test_limited_records",
                  0.5726824323826384
                ],
                [
                  "test_zero_records",
                  "test_limited_record_lifetime",
                  0.9643232527765271
                ],
                [
                  "test_basic",
                  "test_name_too_short",
                  0.47545731105019645
                ],
                [
                  "test_basic",
                  "test_bad_certificate_name",
                  0.510078101817855
                ],
                [
                  "test_name_too_short",
                  "test_missing_key_locator",
                  0.5483118811101303
                ],
                [
                  "test_name_too_short",
                  "test_timestamp_reorder_negative",
                  0.4277139004463535
                ],
                [
                  "test_bad_certificate_name",
                  "test_timestamp_reorder_equal",
                  0.6528022429558173
                ],
                [
                  "test_name_too_short",
                  "test_zero_records",
                  0.4912921808791658
                ],
                [
                  "test_missing_key_locator",
                  "test_timestamp_reorder_negative",
                  0.6411379708555216
                ],
                [
                  "test_timestamp_reorder_negative",
                  "test_limited_record_lifetime",
                  0.8998007605439142
                ],
                [
                  "test_missing_key_locator",
                  "test_zero_records",
                  0.7590678978589647
                ],
                [
                  "test_bad_certificate_name",
                  "test_timestamp_reorder_negative",
                  0.5146902815385279
                ],
                [
                  "test_bad_certificate_name",
                  "test_zero_records",
                  0.6120171797206041
                ],
                [
                  "test_unlimited_records",
                  "test_zero_record_lifetime",
                  0.8844580414121128
                ],
                [
                  "test_bad_signature_info",
                  "test_unlimited_records",
                  0.596557630799396
                ],
                [
                  "test_timestamp_out_of_grace_positive",
                  "test_timestamp_out_of_grace_negative",
                  0.968995307988057
                ],
                [
                  "test_limited_records",
                  "test_zero_records",
                  0.8465626950410325
                ],
                [
                  "test_timestamp_reorder_equal",
                  "test_zero_records",
                  0.9194699488633916
                ],
                [
                  "test_name_too_short",
                  "test_timestamp_out_of_grace_negative",
                  0.4800172791699002
                ],
                [
                  "test_limited_records",
                  "test_limited_record_lifetime",
                  0.8349590636728491
                ],
                [
                  "test_bad_signature_info",
                  "test_timestamp_out_of_grace_positive",
                  0.6306737354716864
                ],
                [
                  "test_inner_policy_reject",
                  "test_zero_record_lifetime",
                  0.5242834123322047
                ],
                [
                  "test_timestamp_reorder_equal",
                  "test_timestamp_reorder_negative",
                  0.8514501565035282
                ],
                [
                  "test_missing_key_locator",
                  "test_timestamp_reorder_equal",
                  0.8130486521259311
                ],
                [
                  "test_name_too_short",
                  "test_bad_certificate_name",
                  0.44766601199956557
                ],
                [
                  "test_bad_certificate_name",
                  "test_limited_record_lifetime",
                  0.5833925465672518
                ],
                [
                  "test_missing_key_locator",
                  "test_bad_key_locator_type",
                  0.8241175989157554
                ],
                [
                  "test_name_too_short",
                  "test_limited_record_lifetime",
                  0.4535284933597123
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_positive",
                "false"
              ],
              [
                "test_limited_records",
                "false"
              ],
              [
                "test_limited_record_lifetime",
                "false"
              ],
              [
                "test_name_too_short",
                "false"
              ],
              [
                "test_bad_signature_info",
                "false"
              ],
              [
                "test_unlimited_records",
                "false"
              ],
              [
                "test_zero_records",
                "false"
              ],
              [
                "test_timestamp_reorder_negative",
                "false"
              ],
              [
                "test_timestamp_out_of_grace_negative",
                "false"
              ],
              [
                "test_missing_key_locator",
                "false"
              ],
              [
                "test_inner_policy_reject",
                "false"
              ],
              [
                "test_zero_record_lifetime",
                "false"
              ],
              [
                "test_bad_certificate_name",
                "false"
              ],
              [
                "test_timestamp_reorder_equal",
                "false"
              ],
              [
                "test_bad_key_locator_type",
                "false"
              ],
              [
                "test_data_passthrough",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 17
      }
    ]
  }
]