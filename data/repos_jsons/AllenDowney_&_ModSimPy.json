[
  {
    "name": "modsim_\u0026_test_modsim.py",
    "testCases": [
      {
        "name": "TestModSimSeries",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_constructor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_constructor",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_constructor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_constructor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                [
                  "q",
                  "s"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestModSimDataFrame",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_constructor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_constructor",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_constructor",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_constructor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_constructor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "13"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                [
                  "msf",
                  "col",
                  "row"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestTimeFrame",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_constructor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_constructor",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_constructor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_constructor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                [
                  "msf",
                  "col",
                  "row"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestSweepFrame",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_constructor",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_constructor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_constructor",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_constructor",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_constructor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_constructor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_constructor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                [
                  "msf",
                  "col",
                  "row"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_constructor",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestCartPol",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cart2pol",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_pol2cart",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cart2pol",
                  "[]"
                ],
                [
                  "test_pol2cart",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cart2pol",
                  "false"
                ],
                [
                  "test_pol2cart",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cart2pol",
                  "false"
                ],
                [
                  "test_pol2cart",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cart2pol",
                  "false"
                ],
                [
                  "test_pol2cart",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cart2pol",
                  "false"
                ],
                [
                  "test_pol2cart",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                "false"
              ],
              [
                "test_pol2cart",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                "false"
              ],
              [
                "test_pol2cart",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                []
              ],
              [
                "test_pol2cart",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                "false"
              ],
              [
                "test_pol2cart",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_cart2pol",
                "true"
              ],
              [
                "test_pol2cart",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cart2pol",
                  "0"
                ],
                [
                  "test_pol2cart",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cart2pol",
                  "0"
                ],
                [
                  "test_pol2cart",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                "false"
              ],
              [
                "test_pol2cart",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                "false"
              ],
              [
                "test_pol2cart",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                "5"
              ],
              [
                "test_pol2cart",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                [
                  "r",
                  "z",
                  "theta"
                ]
              ],
              [
                "test_pol2cart",
                [
                  "r",
                  "x",
                  "y",
                  "angle",
                  "z",
                  "theta"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                []
              ],
              [
                "test_pol2cart",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8265809276925163,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cart2pol",
                  "test_pol2cart",
                  0.8265809276925163
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_cart2pol",
                "false"
              ],
              [
                "test_pol2cart",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestLinspaceLinRange",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_linrange",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_linspace",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_linrange",
                  "[]"
                ],
                [
                  "test_linspace",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_linrange",
                  "false"
                ],
                [
                  "test_linspace",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_linrange",
                  "false"
                ],
                [
                  "test_linspace",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_linrange",
                  "true"
                ],
                [
                  "test_linspace",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_linrange",
                  "false"
                ],
                [
                  "test_linspace",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                "false"
              ],
              [
                "test_linspace",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                "false"
              ],
              [
                "test_linspace",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                []
              ],
              [
                "test_linspace",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                "false"
              ],
              [
                "test_linspace",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_linrange",
                "true"
              ],
              [
                "test_linspace",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_linrange",
                  "0"
                ],
                [
                  "test_linspace",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_linrange",
                  "0"
                ],
                [
                  "test_linspace",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                "false"
              ],
              [
                "test_linspace",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                "false"
              ],
              [
                "test_linspace",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                "8"
              ],
              [
                "test_linspace",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                [
                  "array"
                ]
              ],
              [
                "test_linspace",
                [
                  "array"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                []
              ],
              [
                "test_linspace",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9803366732684976,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_linspace",
                  "test_linrange",
                  0.9803366732684976
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_linrange",
                "false"
              ],
              [
                "test_linspace",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestAbsRelDiff",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_abs_diff",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_rel_diff",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_abs_diff",
                  "[]"
                ],
                [
                  "test_rel_diff",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_abs_diff",
                  "false"
                ],
                [
                  "test_rel_diff",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_abs_diff",
                  "false"
                ],
                [
                  "test_rel_diff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_abs_diff",
                  "true"
                ],
                [
                  "test_rel_diff",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_abs_diff",
                  "false"
                ],
                [
                  "test_rel_diff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                "false"
              ],
              [
                "test_rel_diff",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                "false"
              ],
              [
                "test_rel_diff",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                []
              ],
              [
                "test_rel_diff",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                "false"
              ],
              [
                "test_rel_diff",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_abs_diff",
                "true"
              ],
              [
                "test_rel_diff",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_abs_diff",
                  "0"
                ],
                [
                  "test_rel_diff",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_abs_diff",
                  "0"
                ],
                [
                  "test_rel_diff",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                "false"
              ],
              [
                "test_rel_diff",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                "false"
              ],
              [
                "test_rel_diff",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                "6"
              ],
              [
                "test_rel_diff",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                [
                  "ps",
                  "series",
                  "abs_diff",
                  "ts"
                ]
              ],
              [
                "test_rel_diff",
                [
                  "ps",
                  "series",
                  "rel_diff",
                  "ts"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                []
              ],
              [
                "test_rel_diff",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8457338401788255,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_abs_diff",
                  "test_rel_diff",
                  0.8457338401788255
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_abs_diff",
                "false"
              ],
              [
                "test_rel_diff",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestOdeSolvers",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_run_euler",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_run_ralston",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_run_solve_ivp",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_run_euler",
                  "[]"
                ],
                [
                  "test_run_ralston",
                  "[]"
                ],
                [
                  "test_run_solve_ivp",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_run_euler",
                  "false"
                ],
                [
                  "test_run_ralston",
                  "false"
                ],
                [
                  "test_run_solve_ivp",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_run_euler",
                  "false"
                ],
                [
                  "test_run_ralston",
                  "false"
                ],
                [
                  "test_run_solve_ivp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_run_euler",
                  "false"
                ],
                [
                  "test_run_ralston",
                  "false"
                ],
                [
                  "test_run_solve_ivp",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_run_euler",
                  "false"
                ],
                [
                  "test_run_ralston",
                  "false"
                ],
                [
                  "test_run_solve_ivp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                "false"
              ],
              [
                "test_run_ralston",
                "false"
              ],
              [
                "test_run_solve_ivp",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                "false"
              ],
              [
                "test_run_ralston",
                "false"
              ],
              [
                "test_run_solve_ivp",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                []
              ],
              [
                "test_run_ralston",
                []
              ],
              [
                "test_run_solve_ivp",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                "false"
              ],
              [
                "test_run_ralston",
                "false"
              ],
              [
                "test_run_solve_ivp",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_run_euler",
                "false"
              ],
              [
                "test_run_ralston",
                "false"
              ],
              [
                "test_run_solve_ivp",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_run_euler",
                  "0"
                ],
                [
                  "test_run_ralston",
                  "0"
                ],
                [
                  "test_run_solve_ivp",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_run_euler",
                  "0"
                ],
                [
                  "test_run_ralston",
                  "0"
                ],
                [
                  "test_run_solve_ivp",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                "false"
              ],
              [
                "test_run_ralston",
                "false"
              ],
              [
                "test_run_solve_ivp",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                "false"
              ],
              [
                "test_run_ralston",
                "false"
              ],
              [
                "test_run_solve_ivp",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                "1"
              ],
              [
                "test_run_ralston",
                "1"
              ],
              [
                "test_run_solve_ivp",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                [
                  "y_end",
                  "init",
                  "s",
                  "system",
                  "y",
                  "dydt",
                  "details",
                  "m",
                  "results"
                ]
              ],
              [
                "test_run_ralston",
                [
                  "y_end",
                  "init",
                  "s",
                  "system",
                  "y",
                  "dydt",
                  "details",
                  "m",
                  "results"
                ]
              ],
              [
                "test_run_solve_ivp",
                [
                  "y_end",
                  "init",
                  "s",
                  "system",
                  "y",
                  "dydt",
                  "details",
                  "m",
                  "results"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                []
              ],
              [
                "test_run_ralston",
                []
              ],
              [
                "test_run_solve_ivp",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.967799137046315,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_run_euler",
                  "test_run_solve_ivp",
                  0.9547290085997756
                ],
                [
                  "test_run_ralston",
                  "test_run_solve_ivp",
                  0.9547290085997756
                ],
                [
                  "test_run_euler",
                  "test_run_ralston",
                  0.9939393939393939
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_run_euler",
                "false"
              ],
              [
                "test_run_ralston",
                "false"
              ],
              [
                "test_run_solve_ivp",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestRootFinders",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_root_secant",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_root_scalar",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_root_secant",
                  "[]"
                ],
                [
                  "test_root_scalar",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_root_secant",
                  "false"
                ],
                [
                  "test_root_scalar",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_root_secant",
                  "false"
                ],
                [
                  "test_root_scalar",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_root_secant",
                  "false"
                ],
                [
                  "test_root_scalar",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_root_secant",
                  "false"
                ],
                [
                  "test_root_scalar",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                "false"
              ],
              [
                "test_root_scalar",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                "false"
              ],
              [
                "test_root_scalar",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                []
              ],
              [
                "test_root_scalar",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                "false"
              ],
              [
                "test_root_scalar",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_root_secant",
                "true"
              ],
              [
                "test_root_scalar",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_root_secant",
                  "0"
                ],
                [
                  "test_root_scalar",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_root_secant",
                  "0"
                ],
                [
                  "test_root_scalar",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                "false"
              ],
              [
                "test_root_scalar",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                "false"
              ],
              [
                "test_root_scalar",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                "2"
              ],
              [
                "test_root_scalar",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                [
                  "res"
                ]
              ],
              [
                "test_root_scalar",
                [
                  "res"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                []
              ],
              [
                "test_root_scalar",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9406853703528274,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_root_scalar",
                  "test_root_secant",
                  0.9406853703528274
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_root_secant",
                "false"
              ],
              [
                "test_root_scalar",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestRunInterpolate",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_has_nan",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_interpolate_with_units",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_interpolate",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_is_strictly_increasing",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_has_nan",
                  "[]"
                ],
                [
                  "test_interpolate_with_units",
                  "[]"
                ],
                [
                  "test_interpolate",
                  "[]"
                ],
                [
                  "test_is_strictly_increasing",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_has_nan",
                  "false"
                ],
                [
                  "test_interpolate_with_units",
                  "false"
                ],
                [
                  "test_interpolate",
                  "false"
                ],
                [
                  "test_is_strictly_increasing",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_has_nan",
                  "false"
                ],
                [
                  "test_interpolate_with_units",
                  "false"
                ],
                [
                  "test_interpolate",
                  "false"
                ],
                [
                  "test_is_strictly_increasing",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_has_nan",
                  "false"
                ],
                [
                  "test_interpolate_with_units",
                  "false"
                ],
                [
                  "test_interpolate",
                  "false"
                ],
                [
                  "test_is_strictly_increasing",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_has_nan",
                  "false"
                ],
                [
                  "test_interpolate_with_units",
                  "false"
                ],
                [
                  "test_interpolate",
                  "false"
                ],
                [
                  "test_is_strictly_increasing",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                "false"
              ],
              [
                "test_interpolate_with_units",
                "false"
              ],
              [
                "test_interpolate",
                "false"
              ],
              [
                "test_is_strictly_increasing",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                "false"
              ],
              [
                "test_interpolate_with_units",
                "false"
              ],
              [
                "test_interpolate",
                "false"
              ],
              [
                "test_is_strictly_increasing",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                []
              ],
              [
                "test_interpolate_with_units",
                []
              ],
              [
                "test_interpolate",
                []
              ],
              [
                "test_is_strictly_increasing",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                "false"
              ],
              [
                "test_interpolate_with_units",
                "false"
              ],
              [
                "test_interpolate",
                "false"
              ],
              [
                "test_is_strictly_increasing",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_has_nan",
                "false"
              ],
              [
                "test_interpolate_with_units",
                "false"
              ],
              [
                "test_interpolate",
                "true"
              ],
              [
                "test_is_strictly_increasing",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_has_nan",
                  "0"
                ],
                [
                  "test_interpolate_with_units",
                  "0"
                ],
                [
                  "test_interpolate",
                  "0"
                ],
                [
                  "test_is_strictly_increasing",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_has_nan",
                  "0"
                ],
                [
                  "test_interpolate_with_units",
                  "0"
                ],
                [
                  "test_interpolate",
                  "0"
                ],
                [
                  "test_is_strictly_increasing",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                "false"
              ],
              [
                "test_interpolate_with_units",
                "false"
              ],
              [
                "test_interpolate",
                "false"
              ],
              [
                "test_is_strictly_increasing",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                "false"
              ],
              [
                "test_interpolate_with_units",
                "false"
              ],
              [
                "test_interpolate",
                "false"
              ],
              [
                "test_is_strictly_increasing",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                "6"
              ],
              [
                "test_interpolate_with_units",
                "1"
              ],
              [
                "test_interpolate",
                "1"
              ],
              [
                "test_is_strictly_increasing",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                [
                  "a"
                ]
              ],
              [
                "test_interpolate_with_units",
                [
                  "series",
                  "values",
                  "index",
                  "i"
                ]
              ],
              [
                "test_interpolate",
                [
                  "series",
                  "values",
                  "index",
                  "i"
                ]
              ],
              [
                "test_is_strictly_increasing",
                [
                  "a"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                []
              ],
              [
                "test_interpolate_with_units",
                []
              ],
              [
                "test_interpolate",
                []
              ],
              [
                "test_is_strictly_increasing",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.44584314020421534,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_is_strictly_increasing",
                  "test_interpolate",
                  0.2907968712240785
                ],
                [
                  "test_is_strictly_increasing",
                  "test_interpolate_with_units",
                  0.2599327573969046
                ],
                [
                  "test_has_nan",
                  "test_interpolate_with_units",
                  0.32618326166224965
                ],
                [
                  "test_has_nan",
                  "test_interpolate",
                  0.3538558869798631
                ],
                [
                  "test_interpolate",
                  "test_interpolate_with_units",
                  0.9496675847628856
                ],
                [
                  "test_has_nan",
                  "test_is_strictly_increasing",
                  0.4946224791993107
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_has_nan",
                "false"
              ],
              [
                "test_interpolate_with_units",
                "false"
              ],
              [
                "test_interpolate",
                "false"
              ],
              [
                "test_is_strictly_increasing",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestGradient",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_gradient_with_units",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_gradient",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_gradient_with_units",
                  "[]"
                ],
                [
                  "test_gradient",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_gradient_with_units",
                  "false"
                ],
                [
                  "test_gradient",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_gradient_with_units",
                  "false"
                ],
                [
                  "test_gradient",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_gradient_with_units",
                  "false"
                ],
                [
                  "test_gradient",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_gradient_with_units",
                  "false"
                ],
                [
                  "test_gradient",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                "false"
              ],
              [
                "test_gradient",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                "false"
              ],
              [
                "test_gradient",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                []
              ],
              [
                "test_gradient",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                "false"
              ],
              [
                "test_gradient",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_gradient_with_units",
                "false"
              ],
              [
                "test_gradient",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_gradient_with_units",
                  "0"
                ],
                [
                  "test_gradient",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_gradient_with_units",
                  "0"
                ],
                [
                  "test_gradient",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                "false"
              ],
              [
                "test_gradient",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                "false"
              ],
              [
                "test_gradient",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                "2"
              ],
              [
                "test_gradient",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                [
                  "r",
                  "s"
                ]
              ],
              [
                "test_gradient",
                [
                  "a",
                  "r",
                  "s"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                []
              ],
              [
                "test_gradient",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.764664108804992,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_gradient",
                  "test_gradient_with_units",
                  0.764664108804992
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_gradient_with_units",
                "false"
              ],
              [
                "test_gradient",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestGolden",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_minimize",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_maximize",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_minimize",
                  "[]"
                ],
                [
                  "test_maximize",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                []
              ],
              [
                "test_maximize",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_minimize",
                "true"
              ],
              [
                "test_maximize",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_minimize",
                  "0"
                ],
                [
                  "test_maximize",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_minimize",
                  "0"
                ],
                [
                  "test_maximize",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "2"
              ],
              [
                "test_maximize",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                [
                  "res",
                  "system"
                ]
              ],
              [
                "test_maximize",
                [
                  "res",
                  "system"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                []
              ],
              [
                "test_maximize",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9468085106382977,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_minimize",
                  "test_maximize",
                  0.9468085106382977
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestVector",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_vector_dot",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_scalar_proj",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_vector_dist",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_vector_angle",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_vector_perp",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_vector_cross_2D",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_vector_hat",
                  "[]"
                ],
                [
                  "test_vector_diff_angle",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_vector_proj",
                  "[]"
                ],
                [
                  "test_vector_cross_3D",
                  "[]"
                ],
                [
                  "test_vector_mag",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_vector_mag2",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_vector_dot",
                  "[]"
                ],
                [
                  "test_scalar_proj",
                  "[]"
                ],
                [
                  "test_vector_dist",
                  "[]"
                ],
                [
                  "test_vector_angle",
                  "[]"
                ],
                [
                  "test_vector_perp",
                  "[]"
                ],
                [
                  "test_vector_cross_2D",
                  "[]"
                ],
                [
                  "test_vector_hat",
                  "[]"
                ],
                [
                  "test_vector_diff_angle",
                  "[]"
                ],
                [
                  "test_vector_proj",
                  "[]"
                ],
                [
                  "test_vector_cross_3D",
                  "[]"
                ],
                [
                  "test_vector_mag",
                  "[]"
                ],
                [
                  "test_vector_mag2",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_vector_dot",
                  "false"
                ],
                [
                  "test_scalar_proj",
                  "false"
                ],
                [
                  "test_vector_dist",
                  "false"
                ],
                [
                  "test_vector_angle",
                  "false"
                ],
                [
                  "test_vector_perp",
                  "false"
                ],
                [
                  "test_vector_cross_2D",
                  "false"
                ],
                [
                  "test_vector_hat",
                  "false"
                ],
                [
                  "test_vector_diff_angle",
                  "false"
                ],
                [
                  "test_vector_proj",
                  "false"
                ],
                [
                  "test_vector_cross_3D",
                  "false"
                ],
                [
                  "test_vector_mag",
                  "false"
                ],
                [
                  "test_vector_mag2",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_vector_dot",
                  "false"
                ],
                [
                  "test_scalar_proj",
                  "false"
                ],
                [
                  "test_vector_dist",
                  "false"
                ],
                [
                  "test_vector_angle",
                  "false"
                ],
                [
                  "test_vector_perp",
                  "false"
                ],
                [
                  "test_vector_cross_2D",
                  "false"
                ],
                [
                  "test_vector_hat",
                  "false"
                ],
                [
                  "test_vector_diff_angle",
                  "false"
                ],
                [
                  "test_vector_proj",
                  "false"
                ],
                [
                  "test_vector_cross_3D",
                  "false"
                ],
                [
                  "test_vector_mag",
                  "false"
                ],
                [
                  "test_vector_mag2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_vector_dot",
                  "true"
                ],
                [
                  "test_scalar_proj",
                  "true"
                ],
                [
                  "test_vector_dist",
                  "true"
                ],
                [
                  "test_vector_angle",
                  "true"
                ],
                [
                  "test_vector_perp",
                  "true"
                ],
                [
                  "test_vector_cross_2D",
                  "true"
                ],
                [
                  "test_vector_hat",
                  "false"
                ],
                [
                  "test_vector_diff_angle",
                  "true"
                ],
                [
                  "test_vector_proj",
                  "false"
                ],
                [
                  "test_vector_cross_3D",
                  "false"
                ],
                [
                  "test_vector_mag",
                  "true"
                ],
                [
                  "test_vector_mag2",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_vector_dot",
                  "false"
                ],
                [
                  "test_scalar_proj",
                  "false"
                ],
                [
                  "test_vector_dist",
                  "false"
                ],
                [
                  "test_vector_angle",
                  "false"
                ],
                [
                  "test_vector_perp",
                  "false"
                ],
                [
                  "test_vector_cross_2D",
                  "false"
                ],
                [
                  "test_vector_hat",
                  "false"
                ],
                [
                  "test_vector_diff_angle",
                  "false"
                ],
                [
                  "test_vector_proj",
                  "false"
                ],
                [
                  "test_vector_cross_3D",
                  "false"
                ],
                [
                  "test_vector_mag",
                  "false"
                ],
                [
                  "test_vector_mag2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                "false"
              ],
              [
                "test_scalar_proj",
                "false"
              ],
              [
                "test_vector_dist",
                "false"
              ],
              [
                "test_vector_angle",
                "false"
              ],
              [
                "test_vector_perp",
                "false"
              ],
              [
                "test_vector_cross_2D",
                "false"
              ],
              [
                "test_vector_hat",
                "false"
              ],
              [
                "test_vector_diff_angle",
                "false"
              ],
              [
                "test_vector_proj",
                "false"
              ],
              [
                "test_vector_cross_3D",
                "false"
              ],
              [
                "test_vector_mag",
                "false"
              ],
              [
                "test_vector_mag2",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                "false"
              ],
              [
                "test_scalar_proj",
                "false"
              ],
              [
                "test_vector_dist",
                "false"
              ],
              [
                "test_vector_angle",
                "false"
              ],
              [
                "test_vector_perp",
                "false"
              ],
              [
                "test_vector_cross_2D",
                "false"
              ],
              [
                "test_vector_hat",
                "false"
              ],
              [
                "test_vector_diff_angle",
                "false"
              ],
              [
                "test_vector_proj",
                "false"
              ],
              [
                "test_vector_cross_3D",
                "false"
              ],
              [
                "test_vector_mag",
                "false"
              ],
              [
                "test_vector_mag2",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                []
              ],
              [
                "test_scalar_proj",
                []
              ],
              [
                "test_vector_dist",
                []
              ],
              [
                "test_vector_angle",
                []
              ],
              [
                "test_vector_perp",
                []
              ],
              [
                "test_vector_cross_2D",
                []
              ],
              [
                "test_vector_hat",
                []
              ],
              [
                "test_vector_diff_angle",
                []
              ],
              [
                "test_vector_proj",
                []
              ],
              [
                "test_vector_cross_3D",
                []
              ],
              [
                "test_vector_mag",
                []
              ],
              [
                "test_vector_mag2",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                "false"
              ],
              [
                "test_scalar_proj",
                "false"
              ],
              [
                "test_vector_dist",
                "false"
              ],
              [
                "test_vector_angle",
                "false"
              ],
              [
                "test_vector_perp",
                "false"
              ],
              [
                "test_vector_cross_2D",
                "false"
              ],
              [
                "test_vector_hat",
                "false"
              ],
              [
                "test_vector_diff_angle",
                "false"
              ],
              [
                "test_vector_proj",
                "false"
              ],
              [
                "test_vector_cross_3D",
                "false"
              ],
              [
                "test_vector_mag",
                "false"
              ],
              [
                "test_vector_mag2",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_vector_dot",
                "false"
              ],
              [
                "test_scalar_proj",
                "false"
              ],
              [
                "test_vector_dist",
                "false"
              ],
              [
                "test_vector_angle",
                "false"
              ],
              [
                "test_vector_perp",
                "false"
              ],
              [
                "test_vector_cross_2D",
                "false"
              ],
              [
                "test_vector_hat",
                "false"
              ],
              [
                "test_vector_diff_angle",
                "false"
              ],
              [
                "test_vector_proj",
                "false"
              ],
              [
                "test_vector_cross_3D",
                "false"
              ],
              [
                "test_vector_mag",
                "true"
              ],
              [
                "test_vector_mag2",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_vector_dot",
                  "0"
                ],
                [
                  "test_scalar_proj",
                  "0"
                ],
                [
                  "test_vector_dist",
                  "0"
                ],
                [
                  "test_vector_angle",
                  "0"
                ],
                [
                  "test_vector_perp",
                  "0"
                ],
                [
                  "test_vector_cross_2D",
                  "0"
                ],
                [
                  "test_vector_hat",
                  "0"
                ],
                [
                  "test_vector_diff_angle",
                  "0"
                ],
                [
                  "test_vector_proj",
                  "0"
                ],
                [
                  "test_vector_cross_3D",
                  "0"
                ],
                [
                  "test_vector_mag",
                  "0"
                ],
                [
                  "test_vector_mag2",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_vector_dot",
                  "0"
                ],
                [
                  "test_scalar_proj",
                  "0"
                ],
                [
                  "test_vector_dist",
                  "0"
                ],
                [
                  "test_vector_angle",
                  "0"
                ],
                [
                  "test_vector_perp",
                  "0"
                ],
                [
                  "test_vector_cross_2D",
                  "0"
                ],
                [
                  "test_vector_hat",
                  "0"
                ],
                [
                  "test_vector_diff_angle",
                  "0"
                ],
                [
                  "test_vector_proj",
                  "0"
                ],
                [
                  "test_vector_cross_3D",
                  "0"
                ],
                [
                  "test_vector_mag",
                  "0"
                ],
                [
                  "test_vector_mag2",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                "false"
              ],
              [
                "test_scalar_proj",
                "false"
              ],
              [
                "test_vector_dist",
                "false"
              ],
              [
                "test_vector_angle",
                "false"
              ],
              [
                "test_vector_perp",
                "false"
              ],
              [
                "test_vector_cross_2D",
                "false"
              ],
              [
                "test_vector_hat",
                "false"
              ],
              [
                "test_vector_diff_angle",
                "false"
              ],
              [
                "test_vector_proj",
                "false"
              ],
              [
                "test_vector_cross_3D",
                "false"
              ],
              [
                "test_vector_mag",
                "false"
              ],
              [
                "test_vector_mag2",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                "false"
              ],
              [
                "test_scalar_proj",
                "false"
              ],
              [
                "test_vector_dist",
                "false"
              ],
              [
                "test_vector_angle",
                "false"
              ],
              [
                "test_vector_perp",
                "false"
              ],
              [
                "test_vector_cross_2D",
                "false"
              ],
              [
                "test_vector_hat",
                "false"
              ],
              [
                "test_vector_diff_angle",
                "false"
              ],
              [
                "test_vector_proj",
                "false"
              ],
              [
                "test_vector_cross_3D",
                "false"
              ],
              [
                "test_vector_mag",
                "false"
              ],
              [
                "test_vector_mag2",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                "7"
              ],
              [
                "test_scalar_proj",
                "8"
              ],
              [
                "test_vector_dist",
                "6"
              ],
              [
                "test_vector_angle",
                "3"
              ],
              [
                "test_vector_perp",
                "3"
              ],
              [
                "test_vector_cross_2D",
                "8"
              ],
              [
                "test_vector_hat",
                "6"
              ],
              [
                "test_vector_diff_angle",
                "6"
              ],
              [
                "test_vector_proj",
                "8"
              ],
              [
                "test_vector_cross_3D",
                "8"
              ],
              [
                "test_vector_mag",
                "4"
              ],
              [
                "test_vector_mag2",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                [
                  "s",
                  "v",
                  "w",
                  "ans",
                  "m"
                ]
              ],
              [
                "test_scalar_proj",
                [
                  "ans2",
                  "s",
                  "v",
                  "ans",
                  "w",
                  "m"
                ]
              ],
              [
                "test_vector_dist",
                [
                  "v",
                  "w",
                  "ans",
                  "m"
                ]
              ],
              [
                "test_vector_angle",
                [
                  "v",
                  "ans",
                  "m"
                ]
              ],
              [
                "test_vector_perp",
                [
                  "v",
                  "ans",
                  "m"
                ]
              ],
              [
                "test_vector_cross_2D",
                [
                  "s",
                  "v",
                  "ans",
                  "w",
                  "m"
                ]
              ],
              [
                "test_vector_hat",
                [
                  "v",
                  "ans",
                  "m"
                ]
              ],
              [
                "test_vector_diff_angle",
                [
                  "v",
                  "w",
                  "ans",
                  "m"
                ]
              ],
              [
                "test_vector_proj",
                [
                  "ans2",
                  "s",
                  "v",
                  "ans",
                  "w",
                  "m"
                ]
              ],
              [
                "test_vector_cross_3D",
                [
                  "s",
                  "v",
                  "ans",
                  "w",
                  "m"
                ]
              ],
              [
                "test_vector_mag",
                [
                  "v",
                  "m"
                ]
              ],
              [
                "test_vector_mag2",
                [
                  "v",
                  "m"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                []
              ],
              [
                "test_scalar_proj",
                []
              ],
              [
                "test_vector_dist",
                []
              ],
              [
                "test_vector_angle",
                []
              ],
              [
                "test_vector_perp",
                []
              ],
              [
                "test_vector_cross_2D",
                []
              ],
              [
                "test_vector_hat",
                []
              ],
              [
                "test_vector_diff_angle",
                []
              ],
              [
                "test_vector_proj",
                []
              ],
              [
                "test_vector_cross_3D",
                []
              ],
              [
                "test_vector_mag",
                []
              ],
              [
                "test_vector_mag2",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8195388778764023,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_vector_cross_2D",
                  "test_vector_dist",
                  0.9235889092951939
                ],
                [
                  "test_vector_angle",
                  "test_vector_cross_2D",
                  0.8490538583190036
                ],
                [
                  "test_vector_mag2",
                  "test_vector_hat",
                  0.8184398981754302
                ],
                [
                  "test_vector_dot",
                  "test_scalar_proj",
                  0.8463735367737846
                ],
                [
                  "test_vector_cross_3D",
                  "test_vector_dist",
                  0.8502257288370199
                ],
                [
                  "test_vector_hat",
                  "test_vector_perp",
                  0.7979429273608004
                ],
                [
                  "test_vector_mag",
                  "test_vector_mag2",
                  0.9193471837374406
                ],
                [
                  "test_vector_angle",
                  "test_vector_dist",
                  0.8975014352268273
                ],
                [
                  "test_vector_mag",
                  "test_vector_cross_2D",
                  0.7982863896038292
                ],
                [
                  "test_vector_perp",
                  "test_vector_proj",
                  0.7245464457387348
                ],
                [
                  "test_vector_hat",
                  "test_vector_proj",
                  0.8251888567053454
                ],
                [
                  "test_scalar_proj",
                  "test_vector_dist",
                  0.8371141961062883
                ],
                [
                  "test_vector_dot",
                  "test_vector_proj",
                  0.8948321840888154
                ],
                [
                  "test_vector_angle",
                  "test_vector_hat",
                  0.8898907003681765
                ],
                [
                  "test_vector_perp",
                  "test_vector_dist",
                  0.7532741464847743
                ],
                [
                  "test_vector_cross_3D",
                  "test_vector_diff_angle",
                  0.7842974376558456
                ],
                [
                  "test_vector_dist",
                  "test_vector_diff_angle",
                  0.8848365790988085
                ],
                [
                  "test_vector_mag",
                  "test_vector_proj",
                  0.7775171838923993
                ],
                [
                  "test_vector_dot",
                  "test_vector_cross_3D",
                  0.8487381573634538
                ],
                [
                  "test_vector_angle",
                  "test_vector_cross_3D",
                  0.8245095035647894
                ],
                [
                  "test_vector_perp",
                  "test_vector_cross_3D",
                  0.7949407240568374
                ],
                [
                  "test_vector_mag2",
                  "test_vector_proj",
                  0.7512410689195821
                ],
                [
                  "test_vector_dot",
                  "test_vector_diff_angle",
                  0.8590220680429298
                ],
                [
                  "test_vector_hat",
                  "test_vector_diff_angle",
                  0.7958070898111567
                ],
                [
                  "test_vector_mag",
                  "test_vector_angle",
                  0.8670780922216029
                ],
                [
                  "test_vector_angle",
                  "test_vector_diff_angle",
                  0.8552223735598155
                ],
                [
                  "test_vector_hat",
                  "test_vector_cross_3D",
                  0.8610227996047558
                ],
                [
                  "test_vector_cross_2D",
                  "test_scalar_proj",
                  0.8232116671010545
                ],
                [
                  "test_vector_mag2",
                  "test_vector_dot",
                  0.776959030008794
                ],
                [
                  "test_vector_angle",
                  "test_scalar_proj",
                  0.798563876372623
                ],
                [
                  "test_vector_dot",
                  "test_vector_cross_2D",
                  0.9394812904161094
                ],
                [
                  "test_vector_perp",
                  "test_vector_dot",
                  0.7336781586661872
                ],
                [
                  "test_vector_perp",
                  "test_vector_diff_angle",
                  0.7050774232792194
                ],
                [
                  "test_vector_mag",
                  "test_vector_cross_3D",
                  0.8326768477172608
                ],
                [
                  "test_vector_mag2",
                  "test_vector_diff_angle",
                  0.75751311263382
                ],
                [
                  "test_vector_dot",
                  "test_vector_dist",
                  0.9360380926810189
                ],
                [
                  "test_vector_cross_3D",
                  "test_scalar_proj",
                  0.7851723748508254
                ],
                [
                  "test_vector_mag2",
                  "test_vector_cross_3D",
                  0.8031320456803397
                ],
                [
                  "test_vector_mag",
                  "test_vector_diff_angle",
                  0.7773932902208301
                ],
                [
                  "test_vector_hat",
                  "test_vector_dist",
                  0.8416188917012146
                ],
                [
                  "test_vector_mag",
                  "test_scalar_proj",
                  0.7591114340364926
                ],
                [
                  "test_vector_hat",
                  "test_vector_cross_2D",
                  0.7795310420550269
                ],
                [
                  "test_vector_mag",
                  "test_vector_dot",
                  0.7983367761649798
                ],
                [
                  "test_vector_mag2",
                  "test_vector_angle",
                  0.8444454790873722
                ],
                [
                  "test_vector_angle",
                  "test_vector_proj",
                  0.8410140804596816
                ],
                [
                  "test_vector_mag2",
                  "test_scalar_proj",
                  0.7228006525329538
                ],
                [
                  "test_vector_mag2",
                  "test_vector_dist",
                  0.8038606122934261
                ],
                [
                  "test_vector_perp",
                  "test_scalar_proj",
                  0.7307305340129074
                ],
                [
                  "test_vector_proj",
                  "test_vector_diff_angle",
                  0.8260196601456496
                ],
                [
                  "test_vector_mag2",
                  "test_vector_cross_2D",
                  0.7741684495740427
                ],
                [
                  "test_vector_mag",
                  "test_vector_perp",
                  0.813616513466827
                ],
                [
                  "test_vector_angle",
                  "test_vector_dot",
                  0.8624588318443994
                ],
                [
                  "test_scalar_proj",
                  "test_vector_proj",
                  0.8684779012775982
                ],
                [
                  "test_vector_cross_2D",
                  "test_vector_cross_3D",
                  0.8704939682959882
                ],
                [
                  "test_vector_angle",
                  "test_vector_perp",
                  0.7979689795588678
                ],
                [
                  "test_vector_cross_2D",
                  "test_vector_proj",
                  0.8765775609738734
                ],
                [
                  "test_scalar_proj",
                  "test_vector_diff_angle",
                  0.7721242919970812
                ],
                [
                  "test_vector_hat",
                  "test_vector_dot",
                  0.801128292988639
                ],
                [
                  "test_vector_perp",
                  "test_vector_cross_2D",
                  0.7112693007644741
                ],
                [
                  "test_vector_cross_2D",
                  "test_vector_diff_angle",
                  0.8689503720394692
                ],
                [
                  "test_vector_cross_3D",
                  "test_vector_proj",
                  0.860582761863704
                ],
                [
                  "test_vector_mag",
                  "test_vector_dist",
                  0.8282111956049216
                ],
                [
                  "test_vector_hat",
                  "test_scalar_proj",
                  0.7202695686547234
                ],
                [
                  "test_vector_mag2",
                  "test_vector_perp",
                  0.7951510416485469
                ],
                [
                  "test_vector_mag",
                  "test_vector_hat",
                  0.8343760185260348
                ],
                [
                  "test_vector_proj",
                  "test_vector_dist",
                  0.8875350440321336
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_vector_dot",
                "false"
              ],
              [
                "test_scalar_proj",
                "false"
              ],
              [
                "test_vector_dist",
                "false"
              ],
              [
                "test_vector_angle",
                "false"
              ],
              [
                "test_vector_perp",
                "false"
              ],
              [
                "test_vector_cross_2D",
                "false"
              ],
              [
                "test_vector_hat",
                "false"
              ],
              [
                "test_vector_diff_angle",
                "false"
              ],
              [
                "test_vector_proj",
                "false"
              ],
              [
                "test_vector_cross_3D",
                "false"
              ],
              [
                "test_vector_mag",
                "false"
              ],
              [
                "test_vector_mag2",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 12
      },
      {
        "name": "TestSeriesCopy",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_series_copy",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_series_copy",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_series_copy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_series_copy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_series_copy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_series_copy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_series_copy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_series_copy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                [
                  "res",
                  "series"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_series_copy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestMagnitudeUnits",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_magnitudes",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_units",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_magnitudes",
                  "[]"
                ],
                [
                  "test_units",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_magnitudes",
                  "false"
                ],
                [
                  "test_units",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_magnitudes",
                  "false"
                ],
                [
                  "test_units",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_magnitudes",
                  "true"
                ],
                [
                  "test_units",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_magnitudes",
                  "false"
                ],
                [
                  "test_units",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                "false"
              ],
              [
                "test_units",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                "false"
              ],
              [
                "test_units",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                []
              ],
              [
                "test_units",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                "false"
              ],
              [
                "test_units",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_magnitudes",
                "true"
              ],
              [
                "test_units",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_magnitudes",
                  "0"
                ],
                [
                  "test_units",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_magnitudes",
                  "0"
                ],
                [
                  "test_units",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                "false"
              ],
              [
                "test_units",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                "false"
              ],
              [
                "test_units",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                "7"
              ],
              [
                "test_units",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                [
                  "res",
                  "s",
                  "t",
                  "x"
                ]
              ],
              [
                "test_units",
                [
                  "res",
                  "s",
                  "t",
                  "x"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                []
              ],
              [
                "test_units",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9381329264487251,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_magnitudes",
                  "test_units",
                  0.9381329264487251
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_magnitudes",
                "false"
              ],
              [
                "test_units",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestPlot",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_plot",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_plot",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_plot",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_plot",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_plot",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_plot",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_plot",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                [
                  "a",
                  "s",
                  "t",
                  "x"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_plot",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]