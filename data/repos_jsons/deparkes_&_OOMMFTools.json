[
  {
    "name": "tests_\u0026_test_odtchomp.py",
    "testCases": [
      {
        "name": "Test_headers_prettify",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_headers_prettify_key_collision",
                  "[]"
                ],
                [
                  "test_headers_prettify",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_headers_prettify_key_collision",
                  "[]"
                ],
                [
                  "test_headers_prettify",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_headers_prettify_key_collision",
                  "false"
                ],
                [
                  "test_headers_prettify",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_headers_prettify_key_collision",
                  "false"
                ],
                [
                  "test_headers_prettify",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_headers_prettify_key_collision",
                  "false"
                ],
                [
                  "test_headers_prettify",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_headers_prettify_key_collision",
                  "false"
                ],
                [
                  "test_headers_prettify",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "false"
              ],
              [
                "test_headers_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "false"
              ],
              [
                "test_headers_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                []
              ],
              [
                "test_headers_prettify",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "false"
              ],
              [
                "test_headers_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "false"
              ],
              [
                "test_headers_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_headers_prettify_key_collision",
                  "0"
                ],
                [
                  "test_headers_prettify",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_headers_prettify_key_collision",
                  "0"
                ],
                [
                  "test_headers_prettify",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "false"
              ],
              [
                "test_headers_prettify",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "false"
              ],
              [
                "test_headers_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "0"
              ],
              [
                "test_headers_prettify",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                []
              ],
              [
                "test_headers_prettify",
                [
                  "test_dict",
                  "test_output"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                []
              ],
              [
                "test_headers_prettify",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3317703219174801,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_headers_prettify",
                  "test_headers_prettify_key_collision",
                  0.3317703219174801
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_headers_prettify_key_collision",
                "false"
              ],
              [
                "test_headers_prettify",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "Test_list_prettify",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_list_prettify",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_list_prettify",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_list_prettify",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_list_prettify",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_list_prettify",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_list_prettify",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_list_prettify",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_list_prettify",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_list_prettify",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                [
                  "test_list",
                  "test_output"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_list_prettify",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "Test_namepolish",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test4_givenName_evolver_quantity",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test2_givenName_quantity",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test1_quantity",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_remove_evolver_prefix",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test6_evolver_quantity",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test4_givenName_evolver_quantity",
                  "[]"
                ],
                [
                  "test2_givenName_quantity",
                  "[]"
                ],
                [
                  "test1_quantity",
                  "[]"
                ],
                [
                  "test_remove_evolver_prefix",
                  "[]"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "[]"
                ],
                [
                  "test6_evolver_quantity",
                  "[]"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test4_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test2_givenName_quantity",
                  "false"
                ],
                [
                  "test1_quantity",
                  "false"
                ],
                [
                  "test_remove_evolver_prefix",
                  "false"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test6_evolver_quantity",
                  "false"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test4_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test2_givenName_quantity",
                  "false"
                ],
                [
                  "test1_quantity",
                  "false"
                ],
                [
                  "test_remove_evolver_prefix",
                  "false"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test6_evolver_quantity",
                  "false"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test4_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test2_givenName_quantity",
                  "false"
                ],
                [
                  "test1_quantity",
                  "false"
                ],
                [
                  "test_remove_evolver_prefix",
                  "false"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test6_evolver_quantity",
                  "false"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test4_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test2_givenName_quantity",
                  "false"
                ],
                [
                  "test1_quantity",
                  "false"
                ],
                [
                  "test_remove_evolver_prefix",
                  "false"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "false"
                ],
                [
                  "test6_evolver_quantity",
                  "false"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "false"
              ],
              [
                "test2_givenName_quantity",
                "false"
              ],
              [
                "test1_quantity",
                "false"
              ],
              [
                "test_remove_evolver_prefix",
                "false"
              ],
              [
                "test5_givenName_evolver_quantity",
                "false"
              ],
              [
                "test6_evolver_quantity",
                "false"
              ],
              [
                "test3_evolver_givenName_quantity",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "false"
              ],
              [
                "test2_givenName_quantity",
                "false"
              ],
              [
                "test1_quantity",
                "false"
              ],
              [
                "test_remove_evolver_prefix",
                "false"
              ],
              [
                "test5_givenName_evolver_quantity",
                "false"
              ],
              [
                "test6_evolver_quantity",
                "false"
              ],
              [
                "test3_evolver_givenName_quantity",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                []
              ],
              [
                "test2_givenName_quantity",
                []
              ],
              [
                "test1_quantity",
                []
              ],
              [
                "test_remove_evolver_prefix",
                []
              ],
              [
                "test5_givenName_evolver_quantity",
                []
              ],
              [
                "test6_evolver_quantity",
                []
              ],
              [
                "test3_evolver_givenName_quantity",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "false"
              ],
              [
                "test2_givenName_quantity",
                "false"
              ],
              [
                "test1_quantity",
                "false"
              ],
              [
                "test_remove_evolver_prefix",
                "false"
              ],
              [
                "test5_givenName_evolver_quantity",
                "false"
              ],
              [
                "test6_evolver_quantity",
                "false"
              ],
              [
                "test3_evolver_givenName_quantity",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "false"
              ],
              [
                "test2_givenName_quantity",
                "false"
              ],
              [
                "test1_quantity",
                "false"
              ],
              [
                "test_remove_evolver_prefix",
                "false"
              ],
              [
                "test5_givenName_evolver_quantity",
                "false"
              ],
              [
                "test6_evolver_quantity",
                "false"
              ],
              [
                "test3_evolver_givenName_quantity",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test4_givenName_evolver_quantity",
                  "0"
                ],
                [
                  "test2_givenName_quantity",
                  "0"
                ],
                [
                  "test1_quantity",
                  "0"
                ],
                [
                  "test_remove_evolver_prefix",
                  "0"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "0"
                ],
                [
                  "test6_evolver_quantity",
                  "0"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test4_givenName_evolver_quantity",
                  "0"
                ],
                [
                  "test2_givenName_quantity",
                  "0"
                ],
                [
                  "test1_quantity",
                  "0"
                ],
                [
                  "test_remove_evolver_prefix",
                  "0"
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "0"
                ],
                [
                  "test6_evolver_quantity",
                  "0"
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "false"
              ],
              [
                "test2_givenName_quantity",
                "false"
              ],
              [
                "test1_quantity",
                "false"
              ],
              [
                "test_remove_evolver_prefix",
                "false"
              ],
              [
                "test5_givenName_evolver_quantity",
                "false"
              ],
              [
                "test6_evolver_quantity",
                "false"
              ],
              [
                "test3_evolver_givenName_quantity",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "false"
              ],
              [
                "test2_givenName_quantity",
                "false"
              ],
              [
                "test1_quantity",
                "false"
              ],
              [
                "test_remove_evolver_prefix",
                "false"
              ],
              [
                "test5_givenName_evolver_quantity",
                "false"
              ],
              [
                "test6_evolver_quantity",
                "false"
              ],
              [
                "test3_evolver_givenName_quantity",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "1"
              ],
              [
                "test2_givenName_quantity",
                "1"
              ],
              [
                "test1_quantity",
                "1"
              ],
              [
                "test_remove_evolver_prefix",
                "1"
              ],
              [
                "test5_givenName_evolver_quantity",
                "1"
              ],
              [
                "test6_evolver_quantity",
                "1"
              ],
              [
                "test3_evolver_givenName_quantity",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                [
                  "uniquenessCheck",
                  "name",
                  "new_name"
                ]
              ],
              [
                "test2_givenName_quantity",
                [
                  "uniquenessCheck",
                  "name",
                  "new_name"
                ]
              ],
              [
                "test1_quantity",
                [
                  "uniquenessCheck",
                  "name",
                  "new_name"
                ]
              ],
              [
                "test_remove_evolver_prefix",
                [
                  "uniquenessCheck",
                  "name",
                  "new_name"
                ]
              ],
              [
                "test5_givenName_evolver_quantity",
                [
                  "uniquenessCheck",
                  "name",
                  "new_name"
                ]
              ],
              [
                "test6_evolver_quantity",
                [
                  "uniquenessCheck",
                  "name",
                  "new_name"
                ]
              ],
              [
                "test3_evolver_givenName_quantity",
                [
                  "uniquenessCheck",
                  "name",
                  "new_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                []
              ],
              [
                "test2_givenName_quantity",
                []
              ],
              [
                "test1_quantity",
                []
              ],
              [
                "test_remove_evolver_prefix",
                []
              ],
              [
                "test5_givenName_evolver_quantity",
                []
              ],
              [
                "test6_evolver_quantity",
                []
              ],
              [
                "test3_evolver_givenName_quantity",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8290572586172884,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test5_givenName_evolver_quantity",
                  "test_remove_evolver_prefix",
                  0.6831356104584244
                ],
                [
                  "test4_givenName_evolver_quantity",
                  "test6_evolver_quantity",
                  0.8068466650064616
                ],
                [
                  "test1_quantity",
                  "test4_givenName_evolver_quantity",
                  0.8417742723809202
                ],
                [
                  "test1_quantity",
                  "test_remove_evolver_prefix",
                  0.6671680027981193
                ],
                [
                  "test6_evolver_quantity",
                  "test_remove_evolver_prefix",
                  0.8071929013058705
                ],
                [
                  "test2_givenName_quantity",
                  "test5_givenName_evolver_quantity",
                  0.9200084416415263
                ],
                [
                  "test2_givenName_quantity",
                  "test_remove_evolver_prefix",
                  0.6878004328521014
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "test_remove_evolver_prefix",
                  0.7064782975665144
                ],
                [
                  "test1_quantity",
                  "test3_evolver_givenName_quantity",
                  0.8868383927579092
                ],
                [
                  "test2_givenName_quantity",
                  "test6_evolver_quantity",
                  0.8294242967454116
                ],
                [
                  "test4_givenName_evolver_quantity",
                  "test5_givenName_evolver_quantity",
                  0.9893010270838486
                ],
                [
                  "test2_givenName_quantity",
                  "test4_givenName_evolver_quantity",
                  0.911777115972701
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "test4_givenName_evolver_quantity",
                  0.934119206789983
                ],
                [
                  "test4_givenName_evolver_quantity",
                  "test_remove_evolver_prefix",
                  0.6860431462986525
                ],
                [
                  "test1_quantity",
                  "test2_givenName_quantity",
                  0.9003661402650394
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "test5_givenName_evolver_quantity",
                  0.9246906012857183
                ],
                [
                  "test3_evolver_givenName_quantity",
                  "test6_evolver_quantity",
                  0.838598088029512
                ],
                [
                  "test1_quantity",
                  "test6_evolver_quantity",
                  0.8219852943008901
                ],
                [
                  "test2_givenName_quantity",
                  "test3_evolver_givenName_quantity",
                  0.9555330859059092
                ],
                [
                  "test5_givenName_evolver_quantity",
                  "test6_evolver_quantity",
                  0.8011095705748499
                ],
                [
                  "test1_quantity",
                  "test5_givenName_evolver_quantity",
                  0.8100118409426942
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test4_givenName_evolver_quantity",
                "false"
              ],
              [
                "test2_givenName_quantity",
                "false"
              ],
              [
                "test1_quantity",
                "false"
              ],
              [
                "test_remove_evolver_prefix",
                "false"
              ],
              [
                "test5_givenName_evolver_quantity",
                "false"
              ],
              [
                "test6_evolver_quantity",
                "false"
              ],
              [
                "test3_evolver_givenName_quantity",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "Test_filterOnPos",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "[]"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "[]"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "[]"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "false"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "false"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "false"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "false"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "false"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "false"
              ],
              [
                "test_filterOnPos_empty_lists",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "false"
              ],
              [
                "test_filterOnPos_empty_lists",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                []
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                []
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                []
              ],
              [
                "test_filterOnPos_empty_lists",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "false"
              ],
              [
                "test_filterOnPos_empty_lists",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "false"
              ],
              [
                "test_filterOnPos_empty_lists",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "0"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "0"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "0"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "0"
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "0"
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "0"
                ],
                [
                  "test_filterOnPos_empty_lists",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "true"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "false"
              ],
              [
                "test_filterOnPos_empty_lists",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "false"
              ],
              [
                "test_filterOnPos_empty_lists",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "1"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "1"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "1"
              ],
              [
                "test_filterOnPos_empty_lists",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                [
                  "ret",
                  "item",
                  "dex",
                  "inList"
                ]
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                [
                  "ret",
                  "item",
                  "dex",
                  "inList"
                ]
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                [
                  "ret",
                  "item",
                  "dex",
                  "inList"
                ]
              ],
              [
                "test_filterOnPos_empty_lists",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                []
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                []
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                []
              ],
              [
                "test_filterOnPos_empty_lists",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5515937421890263,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "test_filterOnPos_item_in_wrong_position",
                  0.924149858730034
                ],
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  0.8415823259512969
                ],
                [
                  "test_filterOnPos_item_in_one_of_two_sublists",
                  "test_filterOnPos_empty_lists",
                  0.2544978620948458
                ],
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "test_filterOnPos_item_in_wrong_position",
                  0.7771239081558687
                ],
                [
                  "test_filterOnPos_item_in_two_sublists",
                  "test_filterOnPos_empty_lists",
                  0.22316444954674564
                ],
                [
                  "test_filterOnPos_item_in_wrong_position",
                  "test_filterOnPos_empty_lists",
                  0.2890440486553669
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_filterOnPos_item_in_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_one_of_two_sublists",
                "false"
              ],
              [
                "test_filterOnPos_item_in_wrong_position",
                "false"
              ],
              [
                "test_filterOnPos_empty_lists",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "Test_prefix_punt",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_prefix_punt_no_element",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_prefix_punt_an_element",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_prefix_punt_no_element",
                  "[]"
                ],
                [
                  "test_prefix_punt_an_element",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_prefix_punt_no_element",
                  "false"
                ],
                [
                  "test_prefix_punt_an_element",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_prefix_punt_no_element",
                  "false"
                ],
                [
                  "test_prefix_punt_an_element",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_prefix_punt_no_element",
                  "false"
                ],
                [
                  "test_prefix_punt_an_element",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_prefix_punt_no_element",
                  "false"
                ],
                [
                  "test_prefix_punt_an_element",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "false"
              ],
              [
                "test_prefix_punt_an_element",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "false"
              ],
              [
                "test_prefix_punt_an_element",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                []
              ],
              [
                "test_prefix_punt_an_element",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "false"
              ],
              [
                "test_prefix_punt_an_element",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "false"
              ],
              [
                "test_prefix_punt_an_element",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_prefix_punt_no_element",
                  "0"
                ],
                [
                  "test_prefix_punt_an_element",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_prefix_punt_no_element",
                  "0"
                ],
                [
                  "test_prefix_punt_an_element",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "false"
              ],
              [
                "test_prefix_punt_an_element",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "false"
              ],
              [
                "test_prefix_punt_an_element",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "1"
              ],
              [
                "test_prefix_punt_an_element",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                [
                  "data",
                  "prefix"
                ]
              ],
              [
                "test_prefix_punt_an_element",
                [
                  "data",
                  "prefix"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                []
              ],
              [
                "test_prefix_punt_an_element",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8703882797784892,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_prefix_punt_no_element",
                  "test_prefix_punt_an_element",
                  0.8703882797784892
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_prefix_punt_no_element",
                "false"
              ],
              [
                "test_prefix_punt_an_element",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "Test_Interpreter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_getDataLength",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_getData",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "[]"
                ],
                [
                  "test_values_as_list",
                  "[]"
                ],
                [
                  "test_getNames",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_getDataLength",
                  "[]"
                ],
                [
                  "test_getData",
                  "[]"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "[]"
                ],
                [
                  "test_values_as_list",
                  "[]"
                ],
                [
                  "test_getNames",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_getDataLength",
                  "false"
                ],
                [
                  "test_getData",
                  "false"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "false"
                ],
                [
                  "test_values_as_list",
                  "false"
                ],
                [
                  "test_getNames",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_getDataLength",
                  "false"
                ],
                [
                  "test_getData",
                  "false"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "false"
                ],
                [
                  "test_values_as_list",
                  "false"
                ],
                [
                  "test_getNames",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_getDataLength",
                  "false"
                ],
                [
                  "test_getData",
                  "false"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "false"
                ],
                [
                  "test_values_as_list",
                  "false"
                ],
                [
                  "test_getNames",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_getDataLength",
                  "false"
                ],
                [
                  "test_getData",
                  "false"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "false"
                ],
                [
                  "test_values_as_list",
                  "false"
                ],
                [
                  "test_getNames",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getDataLength",
                "false"
              ],
              [
                "test_getData",
                "false"
              ],
              [
                "test_mismatched_keys_and_dict",
                "true"
              ],
              [
                "test_values_as_list",
                "true"
              ],
              [
                "test_getNames",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_getDataLength",
                "false"
              ],
              [
                "test_getData",
                "false"
              ],
              [
                "test_mismatched_keys_and_dict",
                "false"
              ],
              [
                "test_values_as_list",
                "false"
              ],
              [
                "test_getNames",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_getDataLength",
                []
              ],
              [
                "test_getData",
                []
              ],
              [
                "test_mismatched_keys_and_dict",
                [
                  "self.interpreter"
                ]
              ],
              [
                "test_values_as_list",
                [
                  "self.interpreter"
                ]
              ],
              [
                "test_getNames",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getDataLength",
                "false"
              ],
              [
                "test_getData",
                "false"
              ],
              [
                "test_mismatched_keys_and_dict",
                "false"
              ],
              [
                "test_values_as_list",
                "false"
              ],
              [
                "test_getNames",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getDataLength",
                "true"
              ],
              [
                "test_getData",
                "false"
              ],
              [
                "test_mismatched_keys_and_dict",
                "false"
              ],
              [
                "test_values_as_list",
                "false"
              ],
              [
                "test_getNames",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_getDataLength",
                  "0"
                ],
                [
                  "test_getData",
                  "0"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "0"
                ],
                [
                  "test_values_as_list",
                  "0"
                ],
                [
                  "test_getNames",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_getDataLength",
                  "0"
                ],
                [
                  "test_getData",
                  "0"
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "0"
                ],
                [
                  "test_values_as_list",
                  "0"
                ],
                [
                  "test_getNames",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_getDataLength",
                "false"
              ],
              [
                "test_getData",
                "false"
              ],
              [
                "test_mismatched_keys_and_dict",
                "false"
              ],
              [
                "test_values_as_list",
                "false"
              ],
              [
                "test_getNames",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_getDataLength",
                "false"
              ],
              [
                "test_getData",
                "false"
              ],
              [
                "test_mismatched_keys_and_dict",
                "false"
              ],
              [
                "test_values_as_list",
                "false"
              ],
              [
                "test_getNames",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_getDataLength",
                "1"
              ],
              [
                "test_getData",
                "1"
              ],
              [
                "test_mismatched_keys_and_dict",
                "0"
              ],
              [
                "test_values_as_list",
                "0"
              ],
              [
                "test_getNames",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_getDataLength",
                [
                  "dataLength"
                ]
              ],
              [
                "test_getData",
                [
                  "data"
                ]
              ],
              [
                "test_mismatched_keys_and_dict",
                []
              ],
              [
                "test_values_as_list",
                []
              ],
              [
                "test_getNames",
                [
                  "keys"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_getDataLength",
                [
                  "self.interpreter"
                ]
              ],
              [
                "test_getData",
                [
                  "self.interpreter"
                ]
              ],
              [
                "test_mismatched_keys_and_dict",
                []
              ],
              [
                "test_values_as_list",
                []
              ],
              [
                "test_getNames",
                [
                  "self.interpreter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.309320621244847,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_getNames",
                  "test_values_as_list",
                  0.19134594929397594
                ],
                [
                  "test_getDataLength",
                  "test_mismatched_keys_and_dict",
                  0.1254363015010636
                ],
                [
                  "test_getDataLength",
                  "test_values_as_list",
                  0.29346959282671103
                ],
                [
                  "test_mismatched_keys_and_dict",
                  "test_values_as_list",
                  0.33744095299938565
                ],
                [
                  "test_getData",
                  "test_getDataLength",
                  0.32035580361387384
                ],
                [
                  "test_getNames",
                  "test_getDataLength",
                  0.2667325346846322
                ],
                [
                  "test_getData",
                  "test_mismatched_keys_and_dict",
                  0.23401414528251854
                ],
                [
                  "test_getData",
                  "test_values_as_list",
                  0.22305445405479843
                ],
                [
                  "test_getNames",
                  "test_getData",
                  0.8662214924100207
                ],
                [
                  "test_getNames",
                  "test_mismatched_keys_and_dict",
                  0.2351349857814901
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_getDataLength",
                "false"
              ],
              [
                "test_getData",
                "false"
              ],
              [
                "test_mismatched_keys_and_dict",
                "false"
              ],
              [
                "test_values_as_list",
                "false"
              ],
              [
                "test_getNames",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "Test_chomp",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_chomp_length_data_multiline",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_chomp_headers",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_chomp_data",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_chomp_absolute_path",
                  "[]"
                ],
                [
                  "test_chomp_length_data",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_chomp_with_parent",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_chomp_length_data_multiline",
                  "[]"
                ],
                [
                  "test_chomp_headers",
                  "[]"
                ],
                [
                  "test_chomp_data",
                  "[]"
                ],
                [
                  "test_chomp_absolute_path",
                  "[]"
                ],
                [
                  "test_chomp_length_data",
                  "[]"
                ],
                [
                  "test_chomp_with_parent",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_chomp_length_data_multiline",
                  "false"
                ],
                [
                  "test_chomp_headers",
                  "false"
                ],
                [
                  "test_chomp_data",
                  "false"
                ],
                [
                  "test_chomp_absolute_path",
                  "false"
                ],
                [
                  "test_chomp_length_data",
                  "false"
                ],
                [
                  "test_chomp_with_parent",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_chomp_length_data_multiline",
                  "false"
                ],
                [
                  "test_chomp_headers",
                  "false"
                ],
                [
                  "test_chomp_data",
                  "false"
                ],
                [
                  "test_chomp_absolute_path",
                  "false"
                ],
                [
                  "test_chomp_length_data",
                  "false"
                ],
                [
                  "test_chomp_with_parent",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_chomp_length_data_multiline",
                  "false"
                ],
                [
                  "test_chomp_headers",
                  "false"
                ],
                [
                  "test_chomp_data",
                  "false"
                ],
                [
                  "test_chomp_absolute_path",
                  "false"
                ],
                [
                  "test_chomp_length_data",
                  "false"
                ],
                [
                  "test_chomp_with_parent",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_chomp_length_data_multiline",
                  "false"
                ],
                [
                  "test_chomp_headers",
                  "false"
                ],
                [
                  "test_chomp_data",
                  "false"
                ],
                [
                  "test_chomp_absolute_path",
                  "false"
                ],
                [
                  "test_chomp_length_data",
                  "false"
                ],
                [
                  "test_chomp_with_parent",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "false"
              ],
              [
                "test_chomp_headers",
                "false"
              ],
              [
                "test_chomp_data",
                "false"
              ],
              [
                "test_chomp_absolute_path",
                "false"
              ],
              [
                "test_chomp_length_data",
                "false"
              ],
              [
                "test_chomp_with_parent",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "false"
              ],
              [
                "test_chomp_headers",
                "false"
              ],
              [
                "test_chomp_data",
                "false"
              ],
              [
                "test_chomp_absolute_path",
                "false"
              ],
              [
                "test_chomp_length_data",
                "false"
              ],
              [
                "test_chomp_with_parent",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                []
              ],
              [
                "test_chomp_headers",
                []
              ],
              [
                "test_chomp_data",
                []
              ],
              [
                "test_chomp_absolute_path",
                []
              ],
              [
                "test_chomp_length_data",
                []
              ],
              [
                "test_chomp_with_parent",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "false"
              ],
              [
                "test_chomp_headers",
                "false"
              ],
              [
                "test_chomp_data",
                "false"
              ],
              [
                "test_chomp_absolute_path",
                "false"
              ],
              [
                "test_chomp_length_data",
                "false"
              ],
              [
                "test_chomp_with_parent",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "false"
              ],
              [
                "test_chomp_headers",
                "false"
              ],
              [
                "test_chomp_data",
                "false"
              ],
              [
                "test_chomp_absolute_path",
                "false"
              ],
              [
                "test_chomp_length_data",
                "false"
              ],
              [
                "test_chomp_with_parent",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_chomp_length_data_multiline",
                  "0"
                ],
                [
                  "test_chomp_headers",
                  "0"
                ],
                [
                  "test_chomp_data",
                  "0"
                ],
                [
                  "test_chomp_absolute_path",
                  "0"
                ],
                [
                  "test_chomp_length_data",
                  "0"
                ],
                [
                  "test_chomp_with_parent",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_chomp_length_data_multiline",
                  "0"
                ],
                [
                  "test_chomp_headers",
                  "0"
                ],
                [
                  "test_chomp_data",
                  "0"
                ],
                [
                  "test_chomp_absolute_path",
                  "0"
                ],
                [
                  "test_chomp_length_data",
                  "0"
                ],
                [
                  "test_chomp_with_parent",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "false"
              ],
              [
                "test_chomp_headers",
                "false"
              ],
              [
                "test_chomp_data",
                "false"
              ],
              [
                "test_chomp_absolute_path",
                "false"
              ],
              [
                "test_chomp_length_data",
                "false"
              ],
              [
                "test_chomp_with_parent",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "false"
              ],
              [
                "test_chomp_headers",
                "false"
              ],
              [
                "test_chomp_data",
                "false"
              ],
              [
                "test_chomp_absolute_path",
                "false"
              ],
              [
                "test_chomp_length_data",
                "false"
              ],
              [
                "test_chomp_with_parent",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "1"
              ],
              [
                "test_chomp_headers",
                "1"
              ],
              [
                "test_chomp_data",
                "1"
              ],
              [
                "test_chomp_absolute_path",
                "0"
              ],
              [
                "test_chomp_length_data",
                "1"
              ],
              [
                "test_chomp_with_parent",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                [
                  "chomper",
                  "test_output"
                ]
              ],
              [
                "test_chomp_headers",
                [
                  "chomper",
                  "test_output"
                ]
              ],
              [
                "test_chomp_data",
                [
                  "chomper",
                  "test_output"
                ]
              ],
              [
                "test_chomp_absolute_path",
                []
              ],
              [
                "test_chomp_length_data",
                [
                  "chomper",
                  "test_output"
                ]
              ],
              [
                "test_chomp_with_parent",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                [
                  "self.temp_multiline"
                ]
              ],
              [
                "test_chomp_headers",
                [
                  "self.temp"
                ]
              ],
              [
                "test_chomp_data",
                [
                  "self.temp"
                ]
              ],
              [
                "test_chomp_absolute_path",
                []
              ],
              [
                "test_chomp_length_data",
                [
                  "self.temp"
                ]
              ],
              [
                "test_chomp_with_parent",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.29289142673995217,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_chomp_length_data",
                  "test_chomp_with_parent",
                  0.20261022461827696
                ],
                [
                  "test_chomp_length_data",
                  "test_chomp_absolute_path",
                  0.1936007731655916
                ],
                [
                  "test_chomp_length_data",
                  "test_chomp_length_data_multiline",
                  0.9051114573693303
                ],
                [
                  "test_chomp_length_data_multiline",
                  "test_chomp_absolute_path",
                  0.18148850216015694
                ],
                [
                  "test_chomp_data",
                  "test_chomp_length_data",
                  0.12470384118145304
                ],
                [
                  "test_chomp_data",
                  "test_chomp_length_data_multiline",
                  0.10673658872307572
                ],
                [
                  "test_chomp_data",
                  "test_chomp_with_parent",
                  0.1847733549756773
                ],
                [
                  "test_chomp_headers",
                  "test_chomp_data",
                  0.6656096383266518
                ],
                [
                  "test_chomp_headers",
                  "test_chomp_absolute_path",
                  0.18536949946633163
                ],
                [
                  "test_chomp_length_data_multiline",
                  "test_chomp_with_parent",
                  0.18993429409939658
                ],
                [
                  "test_chomp_headers",
                  "test_chomp_length_data",
                  0.2358333153182891
                ],
                [
                  "test_chomp_headers",
                  "test_chomp_length_data_multiline",
                  0.2100249019355564
                ],
                [
                  "test_chomp_headers",
                  "test_chomp_with_parent",
                  0.19399589841579265
                ],
                [
                  "test_chomp_absolute_path",
                  "test_chomp_with_parent",
                  0.6370220572706062
                ],
                [
                  "test_chomp_data",
                  "test_chomp_absolute_path",
                  0.1765570540730969
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_chomp_length_data_multiline",
                "false"
              ],
              [
                "test_chomp_headers",
                "false"
              ],
              [
                "test_chomp_data",
                "false"
              ],
              [
                "test_chomp_absolute_path",
                "false"
              ],
              [
                "test_chomp_length_data",
                "false"
              ],
              [
                "test_chomp_with_parent",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "Test_log",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_print_to_console",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_print_to_console",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_print_to_console",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_print_to_console",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_print_to_console",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_print_to_console",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_print_to_console",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_print_to_console",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                [
                  "capturedOutput"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_print_to_console",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "Test_write",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_write_outfile",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_write_log",
                  "[]"
                ],
                [
                  "test_write_cleanup",
                  "[]"
                ],
                [
                  "test_write_print_to_screen",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_write_outfile",
                  "[]"
                ],
                [
                  "test_write_log",
                  "[]"
                ],
                [
                  "test_write_cleanup",
                  "[]"
                ],
                [
                  "test_write_print_to_screen",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_write_outfile",
                  "false"
                ],
                [
                  "test_write_log",
                  "false"
                ],
                [
                  "test_write_cleanup",
                  "false"
                ],
                [
                  "test_write_print_to_screen",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_write_outfile",
                  "false"
                ],
                [
                  "test_write_log",
                  "false"
                ],
                [
                  "test_write_cleanup",
                  "false"
                ],
                [
                  "test_write_print_to_screen",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_write_outfile",
                  "false"
                ],
                [
                  "test_write_log",
                  "false"
                ],
                [
                  "test_write_cleanup",
                  "false"
                ],
                [
                  "test_write_print_to_screen",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_write_outfile",
                  "false"
                ],
                [
                  "test_write_log",
                  "false"
                ],
                [
                  "test_write_cleanup",
                  "false"
                ],
                [
                  "test_write_print_to_screen",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_write_outfile",
                "false"
              ],
              [
                "test_write_log",
                "true"
              ],
              [
                "test_write_cleanup",
                "true"
              ],
              [
                "test_write_print_to_screen",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_write_outfile",
                "false"
              ],
              [
                "test_write_log",
                "false"
              ],
              [
                "test_write_cleanup",
                "false"
              ],
              [
                "test_write_print_to_screen",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_write_outfile",
                []
              ],
              [
                "test_write_log",
                [
                  "self.interpreter"
                ]
              ],
              [
                "test_write_cleanup",
                [
                  "self.interpreter"
                ]
              ],
              [
                "test_write_print_to_screen",
                [
                  "self.interpreter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_write_outfile",
                "false"
              ],
              [
                "test_write_log",
                "false"
              ],
              [
                "test_write_cleanup",
                "false"
              ],
              [
                "test_write_print_to_screen",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_write_outfile",
                "false"
              ],
              [
                "test_write_log",
                "false"
              ],
              [
                "test_write_cleanup",
                "false"
              ],
              [
                "test_write_print_to_screen",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_write_outfile",
                  "0"
                ],
                [
                  "test_write_log",
                  "0"
                ],
                [
                  "test_write_cleanup",
                  "0"
                ],
                [
                  "test_write_print_to_screen",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_write_outfile",
                  "0"
                ],
                [
                  "test_write_log",
                  "0"
                ],
                [
                  "test_write_cleanup",
                  "0"
                ],
                [
                  "test_write_print_to_screen",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_write_outfile",
                "false"
              ],
              [
                "test_write_log",
                "false"
              ],
              [
                "test_write_cleanup",
                "false"
              ],
              [
                "test_write_print_to_screen",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_write_outfile",
                "false"
              ],
              [
                "test_write_log",
                "false"
              ],
              [
                "test_write_cleanup",
                "false"
              ],
              [
                "test_write_print_to_screen",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_write_outfile",
                "1"
              ],
              [
                "test_write_log",
                "0"
              ],
              [
                "test_write_cleanup",
                "0"
              ],
              [
                "test_write_print_to_screen",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_write_outfile",
                [
                  "outfile",
                  "content"
                ]
              ],
              [
                "test_write_log",
                []
              ],
              [
                "test_write_cleanup",
                []
              ],
              [
                "test_write_print_to_screen",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_write_outfile",
                [
                  "self.interpreter"
                ]
              ],
              [
                "test_write_log",
                []
              ],
              [
                "test_write_cleanup",
                []
              ],
              [
                "test_write_print_to_screen",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3811168436760049,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_write_print_to_screen",
                  "test_write_log",
                  0.6761234037828131
                ],
                [
                  "test_write_cleanup",
                  "test_write_outfile",
                  0.04725728113579318
                ],
                [
                  "test_write_print_to_screen",
                  "test_write_outfile",
                  0.039939692218817276
                ],
                [
                  "test_write_print_to_screen",
                  "test_write_cleanup",
                  0.6761234037828131
                ],
                [
                  "test_write_log",
                  "test_write_outfile",
                  0.04725728113579318
                ],
                [
                  "test_write_cleanup",
                  "test_write_log",
                  0.7999999999999998
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_write_outfile",
                "false"
              ],
              [
                "test_write_log",
                "false"
              ],
              [
                "test_write_cleanup",
                "false"
              ],
              [
                "test_write_print_to_screen",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "Test_resolve",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_resolve_two_keys",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_resolve_single_key",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_resolve_two_keys",
                  "[]"
                ],
                [
                  "test_resolve_single_key",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_resolve_two_keys",
                  "false"
                ],
                [
                  "test_resolve_single_key",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_resolve_two_keys",
                  "false"
                ],
                [
                  "test_resolve_single_key",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_resolve_two_keys",
                  "false"
                ],
                [
                  "test_resolve_single_key",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_resolve_two_keys",
                  "false"
                ],
                [
                  "test_resolve_single_key",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "false"
              ],
              [
                "test_resolve_single_key",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "false"
              ],
              [
                "test_resolve_single_key",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                []
              ],
              [
                "test_resolve_single_key",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "false"
              ],
              [
                "test_resolve_single_key",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "false"
              ],
              [
                "test_resolve_single_key",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_resolve_two_keys",
                  "0"
                ],
                [
                  "test_resolve_single_key",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_resolve_two_keys",
                  "0"
                ],
                [
                  "test_resolve_single_key",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "false"
              ],
              [
                "test_resolve_single_key",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "false"
              ],
              [
                "test_resolve_single_key",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "1"
              ],
              [
                "test_resolve_single_key",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                [
                  "out"
                ]
              ],
              [
                "test_resolve_single_key",
                [
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                []
              ],
              [
                "test_resolve_single_key",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.29606845410646954,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_resolve_single_key",
                  "test_resolve_two_keys",
                  0.29606845410646954
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_resolve_two_keys",
                "false"
              ],
              [
                "test_resolve_single_key",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "Test_split_densify",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_split_densify_default_delim",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_split_densify_tab_delim",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_split_densify_default_delim",
                  "[]"
                ],
                [
                  "test_split_densify_tab_delim",
                  "[]"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_split_densify_default_delim",
                  "false"
                ],
                [
                  "test_split_densify_tab_delim",
                  "false"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_split_densify_default_delim",
                  "false"
                ],
                [
                  "test_split_densify_tab_delim",
                  "false"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_split_densify_default_delim",
                  "false"
                ],
                [
                  "test_split_densify_tab_delim",
                  "false"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_split_densify_default_delim",
                  "false"
                ],
                [
                  "test_split_densify_tab_delim",
                  "false"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "false"
              ],
              [
                "test_split_densify_tab_delim",
                "false"
              ],
              [
                "test_split_densify_extra_whitespace",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "false"
              ],
              [
                "test_split_densify_tab_delim",
                "false"
              ],
              [
                "test_split_densify_extra_whitespace",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                []
              ],
              [
                "test_split_densify_tab_delim",
                []
              ],
              [
                "test_split_densify_extra_whitespace",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "false"
              ],
              [
                "test_split_densify_tab_delim",
                "false"
              ],
              [
                "test_split_densify_extra_whitespace",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "false"
              ],
              [
                "test_split_densify_tab_delim",
                "false"
              ],
              [
                "test_split_densify_extra_whitespace",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_split_densify_default_delim",
                  "0"
                ],
                [
                  "test_split_densify_tab_delim",
                  "0"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_split_densify_default_delim",
                  "0"
                ],
                [
                  "test_split_densify_tab_delim",
                  "0"
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "false"
              ],
              [
                "test_split_densify_tab_delim",
                "false"
              ],
              [
                "test_split_densify_extra_whitespace",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "false"
              ],
              [
                "test_split_densify_tab_delim",
                "false"
              ],
              [
                "test_split_densify_extra_whitespace",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "1"
              ],
              [
                "test_split_densify_tab_delim",
                "1"
              ],
              [
                "test_split_densify_extra_whitespace",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                [
                  "rets"
                ]
              ],
              [
                "test_split_densify_tab_delim",
                [
                  "rets"
                ]
              ],
              [
                "test_split_densify_extra_whitespace",
                [
                  "rets"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                []
              ],
              [
                "test_split_densify_tab_delim",
                []
              ],
              [
                "test_split_densify_extra_whitespace",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7843121760108046,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_split_densify_default_delim",
                  "test_split_densify_tab_delim",
                  0.7302507302510953
                ],
                [
                  "test_split_densify_extra_whitespace",
                  "test_split_densify_tab_delim",
                  0.722185380728474
                ],
                [
                  "test_split_densify_default_delim",
                  "test_split_densify_extra_whitespace",
                  0.9005004170528447
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_split_densify_default_delim",
                "false"
              ],
              [
                "test_split_densify_tab_delim",
                "false"
              ],
              [
                "test_split_densify_extra_whitespace",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_oommfdecode.py",
    "testCases": [
      {
        "name": "Test_oommfdecode_text",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unpackFile_headers_keys",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "[]"
                ],
                [
                  "test_unpackFile_text_headers",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unpackFile_headers_keys",
                  "[]"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "[]"
                ],
                [
                  "test_unpackFile_text_headers",
                  "[]"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unpackFile_headers_keys",
                  "false"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_text_headers",
                  "false"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unpackFile_headers_keys",
                  "false"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_text_headers",
                  "false"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unpackFile_headers_keys",
                  "false"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_text_headers",
                  "false"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unpackFile_headers_keys",
                  "false"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_text_headers",
                  "false"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "false"
              ],
              [
                "test_unpackFile_text_targetarray",
                "false"
              ],
              [
                "test_unpackFile_text_headers",
                "false"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "false"
              ],
              [
                "test_unpackFile_text_targetarray",
                "false"
              ],
              [
                "test_unpackFile_text_headers",
                "false"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                [
                  "self.test_files_folder",
                  "self.extraCaptures_test",
                  "self.vector_file_binary",
                  "self.targetarray_pickle"
                ]
              ],
              [
                "test_unpackFile_text_targetarray",
                [
                  "self.test_files_folder",
                  "self.extraCaptures_test",
                  "self.vector_file_binary",
                  "self.headers_test"
                ]
              ],
              [
                "test_unpackFile_text_headers",
                [
                  "self.test_files_folder",
                  "self.extraCaptures_test",
                  "self.vector_file_binary",
                  "self.targetarray_pickle"
                ]
              ],
              [
                "test_unpackFile_text_extracaptures",
                [
                  "self.test_files_folder",
                  "self.vector_file_binary",
                  "self.headers_test",
                  "self.targetarray_pickle"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "false"
              ],
              [
                "test_unpackFile_text_targetarray",
                "false"
              ],
              [
                "test_unpackFile_text_headers",
                "false"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "false"
              ],
              [
                "test_unpackFile_text_targetarray",
                "false"
              ],
              [
                "test_unpackFile_text_headers",
                "false"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unpackFile_headers_keys",
                  "0"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "0"
                ],
                [
                  "test_unpackFile_text_headers",
                  "0"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unpackFile_headers_keys",
                  "0"
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "0"
                ],
                [
                  "test_unpackFile_text_headers",
                  "0"
                ],
                [
                  "test_unpackFile_text_extracaptures",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "false"
              ],
              [
                "test_unpackFile_text_targetarray",
                "false"
              ],
              [
                "test_unpackFile_text_headers",
                "false"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "false"
              ],
              [
                "test_unpackFile_text_targetarray",
                "false"
              ],
              [
                "test_unpackFile_text_headers",
                "false"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "1"
              ],
              [
                "test_unpackFile_text_targetarray",
                "1"
              ],
              [
                "test_unpackFile_text_headers",
                "1"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ],
              [
                "test_unpackFile_text_targetarray",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ],
              [
                "test_unpackFile_text_headers",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ],
              [
                "test_unpackFile_text_extracaptures",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                [
                  "self.vector_file_text",
                  "self.headers_test"
                ]
              ],
              [
                "test_unpackFile_text_targetarray",
                [
                  "self.vector_file_text",
                  "self.targetarray_pickle"
                ]
              ],
              [
                "test_unpackFile_text_headers",
                [
                  "self.vector_file_text",
                  "self.headers_test"
                ]
              ],
              [
                "test_unpackFile_text_extracaptures",
                [
                  "self.vector_file_text",
                  "self.extraCaptures_test"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7215258956679568,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_unpackFile_text_headers",
                  "test_unpackFile_text_extracaptures",
                  0.8190283593479223
                ],
                [
                  "test_unpackFile_headers_keys",
                  "test_unpackFile_text_extracaptures",
                  0.7280252083092642
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "test_unpackFile_headers_keys",
                  0.6546536707079772
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "test_unpackFile_text_headers",
                  0.6982972487551756
                ],
                [
                  "test_unpackFile_text_targetarray",
                  "test_unpackFile_text_extracaptures",
                  0.6672461249826392
                ],
                [
                  "test_unpackFile_text_headers",
                  "test_unpackFile_headers_keys",
                  0.7619047619047619
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_headers_keys",
                "false"
              ],
              [
                "test_unpackFile_text_targetarray",
                "false"
              ],
              [
                "test_unpackFile_text_headers",
                "false"
              ],
              [
                "test_unpackFile_text_extracaptures",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "Test_oommfdecode_binary",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unpackFile_binary_targetarray",
                  "[]"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unpackFile_binary_targetarray",
                  "[]"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "[]"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unpackFile_binary_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "false"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unpackFile_binary_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "false"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unpackFile_binary_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "false"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unpackFile_binary_targetarray",
                  "false"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "false"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "false"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "false"
              ],
              [
                "test_unpackFile_binary_headers",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "false"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "false"
              ],
              [
                "test_unpackFile_binary_headers",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                [
                  "self.test_files_folder",
                  "self.extraCaptures_test",
                  "self.headers_test"
                ]
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                [
                  "self.test_files_folder",
                  "self.headers_test",
                  "self.targetarray_pickle"
                ]
              ],
              [
                "test_unpackFile_binary_headers",
                [
                  "self.test_files_folder",
                  "self.extraCaptures_test",
                  "self.targetarray_pickle"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "false"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "false"
              ],
              [
                "test_unpackFile_binary_headers",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "false"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "false"
              ],
              [
                "test_unpackFile_binary_headers",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unpackFile_binary_targetarray",
                  "0"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "0"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unpackFile_binary_targetarray",
                  "0"
                ],
                [
                  "test_unpackFile_binary_extraCaptures",
                  "0"
                ],
                [
                  "test_unpackFile_binary_headers",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "false"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "false"
              ],
              [
                "test_unpackFile_binary_headers",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "false"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "false"
              ],
              [
                "test_unpackFile_binary_headers",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "1"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "1"
              ],
              [
                "test_unpackFile_binary_headers",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ],
              [
                "test_unpackFile_binary_headers",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                [
                  "self.vector_file_binary",
                  "self.targetarray_pickle"
                ]
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                [
                  "self.vector_file_binary",
                  "self.extraCaptures_test"
                ]
              ],
              [
                "test_unpackFile_binary_headers",
                [
                  "self.vector_file_binary",
                  "self.headers_test"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7260723479985787,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_unpackFile_binary_targetarray",
                  "test_unpackFile_binary_extraCaptures",
                  0.6667948594698258
                ],
                [
                  "test_unpackFile_binary_headers",
                  "test_unpackFile_binary_extraCaptures",
                  0.8131249357707346
                ],
                [
                  "test_unpackFile_binary_targetarray",
                  "test_unpackFile_binary_headers",
                  0.6982972487551756
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_unpackFile_binary_targetarray",
                "false"
              ],
              [
                "test_unpackFile_binary_extraCaptures",
                "false"
              ],
              [
                "test_unpackFile_binary_headers",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "Test_pickleArray",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_pickle_array",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_pickle_array",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_pickle_array",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_pickle_array",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_pickle_array",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_pickle_array",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_pickle_array",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_pickle_array",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                [
                  "e"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                [
                  "self.extraCaptures",
                  "self.headers",
                  "self.array",
                  "self.filename"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_pickle_array",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "Test_matlabifyArray",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_matlabify_array",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_matlabify_array",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_matlabify_array",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_matlabify_array",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_matlabify_array",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_matlabify_array",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_matlabify_array",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_matlabify_array",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                [
                  "e"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                [
                  "self.extraCaptures",
                  "self.headers",
                  "self.array",
                  "self.filename"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_matlabify_array",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "Test_textDecode",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_textDecode",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_textDecode",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_textDecode",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_textDecode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_textDecode",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_textDecode",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_textDecode",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_textDecode",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                [
                  "self.extraCaptures",
                  "self.headers",
                  "self.outArray",
                  "self.output",
                  "self.test_array"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_textDecode",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "Test_binaryDecode",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_binaryDecode_little_4",
                  "[]"
                ],
                [
                  "test_binaryDecode_big_8",
                  "[]"
                ],
                [
                  "test_binaryDecode_little_8",
                  "[]"
                ],
                [
                  "test_binaryDecode_big_4",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_binaryDecode_little_4",
                  "[]"
                ],
                [
                  "test_binaryDecode_big_8",
                  "[]"
                ],
                [
                  "test_binaryDecode_little_8",
                  "[]"
                ],
                [
                  "test_binaryDecode_big_4",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_binaryDecode_little_4",
                  "false"
                ],
                [
                  "test_binaryDecode_big_8",
                  "false"
                ],
                [
                  "test_binaryDecode_little_8",
                  "false"
                ],
                [
                  "test_binaryDecode_big_4",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_binaryDecode_little_4",
                  "false"
                ],
                [
                  "test_binaryDecode_big_8",
                  "false"
                ],
                [
                  "test_binaryDecode_little_8",
                  "false"
                ],
                [
                  "test_binaryDecode_big_4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_binaryDecode_little_4",
                  "false"
                ],
                [
                  "test_binaryDecode_big_8",
                  "false"
                ],
                [
                  "test_binaryDecode_little_8",
                  "false"
                ],
                [
                  "test_binaryDecode_big_4",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_binaryDecode_little_4",
                  "false"
                ],
                [
                  "test_binaryDecode_big_8",
                  "false"
                ],
                [
                  "test_binaryDecode_little_8",
                  "false"
                ],
                [
                  "test_binaryDecode_big_4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "false"
              ],
              [
                "test_binaryDecode_big_8",
                "false"
              ],
              [
                "test_binaryDecode_little_8",
                "false"
              ],
              [
                "test_binaryDecode_big_4",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "false"
              ],
              [
                "test_binaryDecode_big_8",
                "false"
              ],
              [
                "test_binaryDecode_little_8",
                "false"
              ],
              [
                "test_binaryDecode_big_4",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_binaryDecode_little_4",
                [
                  "self.output_little_8",
                  "self.chunksize_8",
                  "self.output_big_8",
                  "self.output_big"
                ]
              ],
              [
                "test_binaryDecode_big_8",
                [
                  "self.chunksize_4",
                  "self.output_little_8",
                  "self.output_big_8",
                  "self.output_little",
                  "self.output_big"
                ]
              ],
              [
                "test_binaryDecode_little_8",
                [
                  "self.chunksize_4",
                  "self.output_big_8",
                  "self.output_little",
                  "self.output_big"
                ]
              ],
              [
                "test_binaryDecode_big_4",
                [
                  "self.output_little_8",
                  "self.chunksize_8",
                  "self.output_big_8",
                  "self.output_little"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "false"
              ],
              [
                "test_binaryDecode_big_8",
                "false"
              ],
              [
                "test_binaryDecode_little_8",
                "false"
              ],
              [
                "test_binaryDecode_big_4",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "false"
              ],
              [
                "test_binaryDecode_big_8",
                "false"
              ],
              [
                "test_binaryDecode_little_8",
                "false"
              ],
              [
                "test_binaryDecode_big_4",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_binaryDecode_little_4",
                  "0"
                ],
                [
                  "test_binaryDecode_big_8",
                  "0"
                ],
                [
                  "test_binaryDecode_little_8",
                  "0"
                ],
                [
                  "test_binaryDecode_big_4",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_binaryDecode_little_4",
                  "0"
                ],
                [
                  "test_binaryDecode_big_8",
                  "0"
                ],
                [
                  "test_binaryDecode_little_8",
                  "0"
                ],
                [
                  "test_binaryDecode_big_4",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "false"
              ],
              [
                "test_binaryDecode_big_8",
                "false"
              ],
              [
                "test_binaryDecode_little_8",
                "false"
              ],
              [
                "test_binaryDecode_big_4",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "false"
              ],
              [
                "test_binaryDecode_big_8",
                "false"
              ],
              [
                "test_binaryDecode_little_8",
                "false"
              ],
              [
                "test_binaryDecode_big_4",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "1"
              ],
              [
                "test_binaryDecode_big_8",
                "1"
              ],
              [
                "test_binaryDecode_little_8",
                "1"
              ],
              [
                "test_binaryDecode_big_4",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ],
              [
                "test_binaryDecode_big_8",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures",
                  "output_big_8"
                ]
              ],
              [
                "test_binaryDecode_little_8",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ],
              [
                "test_binaryDecode_big_4",
                [
                  "headers",
                  "targetarray",
                  "extraCaptures"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                [
                  "self.extraCaptures",
                  "self.chunksize_4",
                  "self.headers",
                  "self.output_little",
                  "self.outArray",
                  "self.test_array"
                ]
              ],
              [
                "test_binaryDecode_big_8",
                [
                  "self.extraCaptures",
                  "self.headers",
                  "self.chunksize_8",
                  "self.outArray",
                  "self.test_array"
                ]
              ],
              [
                "test_binaryDecode_little_8",
                [
                  "self.extraCaptures",
                  "self.headers",
                  "self.output_little_8",
                  "self.chunksize_8",
                  "self.outArray",
                  "self.test_array"
                ]
              ],
              [
                "test_binaryDecode_big_4",
                [
                  "self.extraCaptures",
                  "self.chunksize_4",
                  "self.headers",
                  "self.output_big",
                  "self.outArray",
                  "self.test_array"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7826024607330565,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_binaryDecode_big_4",
                  "test_binaryDecode_big_8",
                  0.7268315472319152
                ],
                [
                  "test_binaryDecode_little_4",
                  "test_binaryDecode_little_8",
                  0.9378934722869389
                ],
                [
                  "test_binaryDecode_little_8",
                  "test_binaryDecode_big_4",
                  0.8454805061418376
                ],
                [
                  "test_binaryDecode_little_4",
                  "test_binaryDecode_big_4",
                  0.8687219087128831
                ],
                [
                  "test_binaryDecode_little_4",
                  "test_binaryDecode_big_8",
                  0.6388813270317227
                ],
                [
                  "test_binaryDecode_little_8",
                  "test_binaryDecode_big_8",
                  0.6778060029930414
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_binaryDecode_little_4",
                "false"
              ],
              [
                "test_binaryDecode_big_8",
                "false"
              ],
              [
                "test_binaryDecode_little_8",
                "false"
              ],
              [
                "test_binaryDecode_big_4",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "Test_slowlyPainfullyMaximise",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "[]"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "[]"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "false"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "false"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "false"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "false"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "false"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "false"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                [
                  "self.test_files_folder"
                ]
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                [
                  "self.test_files_folder",
                  "self.vector_file_binary"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "false"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "false"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "0"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_slowlyPainfullyMaximize_multifile",
                  "0"
                ],
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "false"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "false"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "1"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                [
                  "max_mag"
                ]
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                [
                  "max_mag"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                [
                  "self.vector_file_text",
                  "self.vector_file_binary"
                ]
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                [
                  "self.vector_file_text"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8486684247915055,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_slowlyPainfullyMaximize_single_file",
                  "test_slowlyPainfullyMaximize_multifile",
                  0.8486684247915055
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_slowlyPainfullyMaximize_multifile",
                "false"
              ],
              [
                "test_slowlyPainfullyMaximize_single_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "Test_sortBySimTime",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_sortBySimTime_reverse_order",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_sortBySimTime_reverse_order",
                  "[]"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "[]"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "[]"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "[]"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "[]"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "[]"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "[]"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_sortBySimTime_reverse_order",
                  "false"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "false"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "false"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_sortBySimTime_reverse_order",
                  "false"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "false"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "false"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_sortBySimTime_reverse_order",
                  "false"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "false"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "false"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_sortBySimTime_reverse_order",
                  "false"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "false"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "false"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "false"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "false"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "false"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "false"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "false"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "false"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "false"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "false"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "false"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "false"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "false"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "false"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                []
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                []
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                []
              ],
              [
                "test_sortBySimTime_numpy_array",
                []
              ],
              [
                "test_sortBySimTime_extra_keys",
                []
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                []
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                []
              ],
              [
                "test_sortBySimTime_basic_operation",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "false"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "false"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "false"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "false"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "false"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "false"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "false"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "false"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "false"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "false"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_sortBySimTime_reverse_order",
                  "0"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "0"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "0"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "0"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "0"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "0"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "0"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_sortBySimTime_reverse_order",
                  "0"
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "0"
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "0"
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "0"
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "0"
                ],
                [
                  "test_sortBySimTime_two_numpy_arrays",
                  "0"
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "0"
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "false"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "false"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "false"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "false"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "false"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "false"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "false"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "false"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "false"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "false"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "2"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "2"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "2"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "2"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "2"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "2"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "2"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                [
                  "extra",
                  "arrays"
                ]
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                [
                  "extra",
                  "arrays"
                ]
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                [
                  "extra",
                  "arrays"
                ]
              ],
              [
                "test_sortBySimTime_numpy_array",
                [
                  "extra",
                  "arrays"
                ]
              ],
              [
                "test_sortBySimTime_extra_keys",
                [
                  "extra",
                  "arrays"
                ]
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                [
                  "extra",
                  "arrays"
                ]
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                [
                  "extra",
                  "arrays"
                ]
              ],
              [
                "test_sortBySimTime_basic_operation",
                [
                  "extra",
                  "arrays"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                []
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                []
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                []
              ],
              [
                "test_sortBySimTime_numpy_array",
                []
              ],
              [
                "test_sortBySimTime_extra_keys",
                []
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                []
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                []
              ],
              [
                "test_sortBySimTime_basic_operation",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.748275395923158,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_sortBySimTime_basic_operation",
                  "test_sortBySimTime_len_mif_source_not_one",
                  0.9173169233042093
                ],
                [
                  "test_sortBySimTime_reverse_order",
                  "test_sortBySimTime_extra_keys",
                  0.8395463943565371
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "test_sortBySimTime_two_numpy_arrays",
                  0.5633103653562531
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "test_sortBySimTime_len_mif_source_not_one",
                  0.9367466426804301
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "test_sortBySimTime_sim_time_minus_one",
                  0.9377697909413325
                ],
                [
                  "test_sortBySimTime_reverse_order",
                  "test_sortBySimTime_sim_time_minus_one",
                  0.918443638266957
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "test_sortBySimTime_extra_keys",
                  0.9065172284703741
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "test_sortBySimTime_reverse_order",
                  0.9914529914529914
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "test_sortBySimTime_sim_time_minus_one",
                  0.918443638266957
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "test_sortBySimTime_extra_keys",
                  0.8742968205427147
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "test_sortBySimTime_two_numpy_arrays",
                  0.5136944310627178
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "test_sortBySimTime_numpy_array",
                  0.4931980358930761
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "test_sortBySimTime_numpy_array",
                  0.5049078297662916
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "test_sortBySimTime_two_numpy_arrays",
                  0.4896599136547548
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "test_sortBySimTime_numpy_array",
                  0.562467235406653
                ],
                [
                  "test_sortBySimTime_reverse_order",
                  "test_sortBySimTime_len_mif_source_not_one",
                  0.9173169233042093
                ],
                [
                  "test_sortBySimTime_reverse_order",
                  "test_sortBySimTime_numpy_array",
                  0.5049078297662916
                ],
                [
                  "test_sortBySimTime_numpy_array",
                  "test_sortBySimTime_two_numpy_arrays",
                  0.9997777098545877
                ],
                [
                  "test_sortBySimTime_reverse_order",
                  "test_sortBySimTime_two_numpy_arrays",
                  0.505826330515398
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "test_sortBySimTime_no_extra_keys",
                  0.9720857903566654
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "test_sortBySimTime_sim_time_minus_one",
                  0.9721857451603688
                ],
                [
                  "test_sortBySimTime_len_mif_source_not_one",
                  "test_sortBySimTime_extra_keys",
                  0.8985962645694494
                ],
                [
                  "test_sortBySimTime_no_extra_keys",
                  "test_sortBySimTime_numpy_array",
                  0.5127250538429394
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "test_sortBySimTime_two_numpy_arrays",
                  0.505826330515398
                ],
                [
                  "test_sortBySimTime_sim_time_minus_one",
                  "test_sortBySimTime_two_numpy_arrays",
                  0.4940539193536042
                ],
                [
                  "test_sortBySimTime_extra_keys",
                  "test_sortBySimTime_numpy_array",
                  0.4890051244740582
                ],
                [
                  "test_sortBySimTime_reverse_order",
                  "test_sortBySimTime_no_extra_keys",
                  0.9720857903566654
                ],
                [
                  "test_sortBySimTime_basic_operation",
                  "test_sortBySimTime_extra_keys",
                  0.8395463943565371
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_sortBySimTime_reverse_order",
                "false"
              ],
              [
                "test_sortBySimTime_len_mif_source_not_one",
                "false"
              ],
              [
                "test_sortBySimTime_sim_time_minus_one",
                "false"
              ],
              [
                "test_sortBySimTime_numpy_array",
                "false"
              ],
              [
                "test_sortBySimTime_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_two_numpy_arrays",
                "false"
              ],
              [
                "test_sortBySimTime_no_extra_keys",
                "false"
              ],
              [
                "test_sortBySimTime_basic_operation",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_oommfconvert.py",
    "testCases": [
      {
        "name": "Test_getOOMMFPath",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_invalid_path",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_no_file_found",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_valid_path",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_invalid_path",
                  "[]"
                ],
                [
                  "test_no_file_found",
                  "[]"
                ],
                [
                  "test_valid_path",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_invalid_path",
                  "false"
                ],
                [
                  "test_no_file_found",
                  "false"
                ],
                [
                  "test_valid_path",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_invalid_path",
                  "false"
                ],
                [
                  "test_no_file_found",
                  "false"
                ],
                [
                  "test_valid_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_invalid_path",
                  "false"
                ],
                [
                  "test_no_file_found",
                  "false"
                ],
                [
                  "test_valid_path",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_invalid_path",
                  "false"
                ],
                [
                  "test_no_file_found",
                  "false"
                ],
                [
                  "test_valid_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                "false"
              ],
              [
                "test_no_file_found",
                "false"
              ],
              [
                "test_valid_path",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                "false"
              ],
              [
                "test_no_file_found",
                "false"
              ],
              [
                "test_valid_path",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                []
              ],
              [
                "test_no_file_found",
                []
              ],
              [
                "test_valid_path",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                "false"
              ],
              [
                "test_no_file_found",
                "false"
              ],
              [
                "test_valid_path",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                "false"
              ],
              [
                "test_no_file_found",
                "false"
              ],
              [
                "test_valid_path",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_invalid_path",
                  "0"
                ],
                [
                  "test_no_file_found",
                  "0"
                ],
                [
                  "test_valid_path",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_invalid_path",
                  "0"
                ],
                [
                  "test_no_file_found",
                  "0"
                ],
                [
                  "test_valid_path",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                "false"
              ],
              [
                "test_no_file_found",
                "false"
              ],
              [
                "test_valid_path",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                "false"
              ],
              [
                "test_no_file_found",
                "false"
              ],
              [
                "test_valid_path",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                "1"
              ],
              [
                "test_no_file_found",
                "1"
              ],
              [
                "test_valid_path",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_invalid_path",
                [
                  "path"
                ]
              ],
              [
                "test_no_file_found",
                [
                  "path"
                ]
              ],
              [
                "test_valid_path",
                [
                  "path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_invalid_path",
                [
                  "self.invalid_path"
                ]
              ],
              [
                "test_no_file_found",
                []
              ],
              [
                "test_valid_path",
                [
                  "self.tcl_path",
                  "self.valid_file"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6666666666666666,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_invalid_path",
                  "test_no_file_found",
                  0.7142857142857143
                ],
                [
                  "test_valid_path",
                  "test_no_file_found",
                  0.5714285714285714
                ],
                [
                  "test_valid_path",
                  "test_invalid_path",
                  0.7142857142857143
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_invalid_path",
                "true"
              ],
              [
                "test_no_file_found",
                "true"
              ],
              [
                "test_valid_path",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "Test_OOMMFConvert",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_doImages",
                  "[]"
                ],
                [
                  "test_resolveConfiguration",
                  "[]"
                ],
                [
                  "test_spliceConfig",
                  "[]"
                ],
                [
                  "test_doMovies",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_doImages",
                  "[]"
                ],
                [
                  "test_resolveConfiguration",
                  "[]"
                ],
                [
                  "test_spliceConfig",
                  "[]"
                ],
                [
                  "test_doMovies",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_doImages",
                  "false"
                ],
                [
                  "test_resolveConfiguration",
                  "false"
                ],
                [
                  "test_spliceConfig",
                  "false"
                ],
                [
                  "test_doMovies",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_doImages",
                  "false"
                ],
                [
                  "test_resolveConfiguration",
                  "false"
                ],
                [
                  "test_spliceConfig",
                  "false"
                ],
                [
                  "test_doMovies",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_doImages",
                  "false"
                ],
                [
                  "test_resolveConfiguration",
                  "false"
                ],
                [
                  "test_spliceConfig",
                  "false"
                ],
                [
                  "test_doMovies",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_doImages",
                  "false"
                ],
                [
                  "test_resolveConfiguration",
                  "false"
                ],
                [
                  "test_spliceConfig",
                  "false"
                ],
                [
                  "test_doMovies",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_doImages",
                "true"
              ],
              [
                "test_resolveConfiguration",
                "true"
              ],
              [
                "test_spliceConfig",
                "true"
              ],
              [
                "test_doMovies",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                "false"
              ],
              [
                "test_resolveConfiguration",
                "false"
              ],
              [
                "test_spliceConfig",
                "false"
              ],
              [
                "test_doMovies",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                []
              ],
              [
                "test_resolveConfiguration",
                []
              ],
              [
                "test_spliceConfig",
                []
              ],
              [
                "test_doMovies",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                "false"
              ],
              [
                "test_resolveConfiguration",
                "false"
              ],
              [
                "test_spliceConfig",
                "false"
              ],
              [
                "test_doMovies",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                "false"
              ],
              [
                "test_resolveConfiguration",
                "false"
              ],
              [
                "test_spliceConfig",
                "false"
              ],
              [
                "test_doMovies",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_doImages",
                  "0"
                ],
                [
                  "test_resolveConfiguration",
                  "0"
                ],
                [
                  "test_spliceConfig",
                  "0"
                ],
                [
                  "test_doMovies",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_doImages",
                  "0"
                ],
                [
                  "test_resolveConfiguration",
                  "0"
                ],
                [
                  "test_spliceConfig",
                  "0"
                ],
                [
                  "test_doMovies",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                "false"
              ],
              [
                "test_resolveConfiguration",
                "false"
              ],
              [
                "test_spliceConfig",
                "false"
              ],
              [
                "test_doMovies",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                "false"
              ],
              [
                "test_resolveConfiguration",
                "false"
              ],
              [
                "test_spliceConfig",
                "false"
              ],
              [
                "test_doMovies",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_doImages",
                "0"
              ],
              [
                "test_resolveConfiguration",
                "0"
              ],
              [
                "test_spliceConfig",
                "0"
              ],
              [
                "test_doMovies",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                []
              ],
              [
                "test_resolveConfiguration",
                []
              ],
              [
                "test_spliceConfig",
                []
              ],
              [
                "test_doMovies",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                []
              ],
              [
                "test_resolveConfiguration",
                []
              ],
              [
                "test_spliceConfig",
                []
              ],
              [
                "test_doMovies",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6333333333333332,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_doImages",
                  "test_doMovies",
                  0.7999999999999998
                ],
                [
                  "test_doImages",
                  "test_resolveConfiguration",
                  0.5999999999999999
                ],
                [
                  "test_resolveConfiguration",
                  "test_doMovies",
                  0.5999999999999999
                ],
                [
                  "test_spliceConfig",
                  "test_doMovies",
                  0.5999999999999999
                ],
                [
                  "test_resolveConfiguration",
                  "test_spliceConfig",
                  0.5999999999999999
                ],
                [
                  "test_doImages",
                  "test_spliceConfig",
                  0.5999999999999999
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_doImages",
                "false"
              ],
              [
                "test_resolveConfiguration",
                "false"
              ],
              [
                "test_spliceConfig",
                "false"
              ],
              [
                "test_doMovies",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "Test_replaceConfigLines",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_basic_operation",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_misc_datascale",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "[]"
                ],
                [
                  "test_basic_operation",
                  "[]"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "[]"
                ],
                [
                  "test_misc_datascale",
                  "[]"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "[]"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "[]"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "[]"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "false"
                ],
                [
                  "test_basic_operation",
                  "false"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "false"
                ],
                [
                  "test_misc_datascale",
                  "false"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "false"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "false"
                ],
                [
                  "test_basic_operation",
                  "false"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "false"
                ],
                [
                  "test_misc_datascale",
                  "false"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "false"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "false"
                ],
                [
                  "test_basic_operation",
                  "false"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "false"
                ],
                [
                  "test_misc_datascale",
                  "false"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "false"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "false"
                ],
                [
                  "test_basic_operation",
                  "false"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "false"
                ],
                [
                  "test_misc_datascale",
                  "false"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "false"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "false"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "false"
              ],
              [
                "test_basic_operation",
                "false"
              ],
              [
                "test_misc_datascale_with_comment",
                "false"
              ],
              [
                "test_misc_datascale",
                "false"
              ],
              [
                "test_misc_datascale_with_braces",
                "false"
              ],
              [
                "test_misc_datascale_misc_width",
                "false"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "false"
              ],
              [
                "test_misc_datascale_misc_height",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "false"
              ],
              [
                "test_basic_operation",
                "false"
              ],
              [
                "test_misc_datascale_with_comment",
                "false"
              ],
              [
                "test_misc_datascale",
                "false"
              ],
              [
                "test_misc_datascale_with_braces",
                "false"
              ],
              [
                "test_misc_datascale_misc_width",
                "false"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "false"
              ],
              [
                "test_misc_datascale_misc_height",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                []
              ],
              [
                "test_basic_operation",
                []
              ],
              [
                "test_misc_datascale_with_comment",
                []
              ],
              [
                "test_misc_datascale",
                []
              ],
              [
                "test_misc_datascale_with_braces",
                []
              ],
              [
                "test_misc_datascale_misc_width",
                []
              ],
              [
                "test_misc_datascale_clobber_zoom",
                []
              ],
              [
                "test_misc_datascale_misc_height",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "false"
              ],
              [
                "test_basic_operation",
                "false"
              ],
              [
                "test_misc_datascale_with_comment",
                "false"
              ],
              [
                "test_misc_datascale",
                "false"
              ],
              [
                "test_misc_datascale_with_braces",
                "false"
              ],
              [
                "test_misc_datascale_misc_width",
                "false"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "false"
              ],
              [
                "test_misc_datascale_misc_height",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "false"
              ],
              [
                "test_basic_operation",
                "false"
              ],
              [
                "test_misc_datascale_with_comment",
                "false"
              ],
              [
                "test_misc_datascale",
                "false"
              ],
              [
                "test_misc_datascale_with_braces",
                "false"
              ],
              [
                "test_misc_datascale_misc_width",
                "false"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "false"
              ],
              [
                "test_misc_datascale_misc_height",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "0"
                ],
                [
                  "test_basic_operation",
                  "0"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "0"
                ],
                [
                  "test_misc_datascale",
                  "0"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "0"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "0"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "0"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_misc_datascale_check_vectors_false",
                  "0"
                ],
                [
                  "test_basic_operation",
                  "0"
                ],
                [
                  "test_misc_datascale_with_comment",
                  "0"
                ],
                [
                  "test_misc_datascale",
                  "0"
                ],
                [
                  "test_misc_datascale_with_braces",
                  "0"
                ],
                [
                  "test_misc_datascale_misc_width",
                  "0"
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "0"
                ],
                [
                  "test_misc_datascale_misc_height",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "false"
              ],
              [
                "test_basic_operation",
                "false"
              ],
              [
                "test_misc_datascale_with_comment",
                "false"
              ],
              [
                "test_misc_datascale",
                "false"
              ],
              [
                "test_misc_datascale_with_braces",
                "false"
              ],
              [
                "test_misc_datascale_misc_width",
                "false"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "false"
              ],
              [
                "test_misc_datascale_misc_height",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "false"
              ],
              [
                "test_basic_operation",
                "false"
              ],
              [
                "test_misc_datascale_with_comment",
                "false"
              ],
              [
                "test_misc_datascale",
                "false"
              ],
              [
                "test_misc_datascale_with_braces",
                "false"
              ],
              [
                "test_misc_datascale_misc_width",
                "false"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "false"
              ],
              [
                "test_misc_datascale_misc_height",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "1"
              ],
              [
                "test_basic_operation",
                "1"
              ],
              [
                "test_misc_datascale_with_comment",
                "1"
              ],
              [
                "test_misc_datascale",
                "1"
              ],
              [
                "test_misc_datascale_with_braces",
                "1"
              ],
              [
                "test_misc_datascale_misc_width",
                "1"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "1"
              ],
              [
                "test_misc_datascale_misc_height",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                [
                  "expectedNewline",
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ],
              [
                "test_basic_operation",
                [
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ],
              [
                "test_misc_datascale_with_comment",
                [
                  "expectedNewline",
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ],
              [
                "test_misc_datascale",
                [
                  "expectedNewline",
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ],
              [
                "test_misc_datascale_with_braces",
                [
                  "expectedNewline",
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ],
              [
                "test_misc_datascale_misc_width",
                [
                  "expectedNewline",
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ],
              [
                "test_misc_datascale_clobber_zoom",
                [
                  "expectedNewline",
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ],
              [
                "test_misc_datascale_misc_height",
                [
                  "expectedNewline",
                  "newConfig",
                  "percentMagnitude",
                  "oldConfigLines",
                  "checkVectors",
                  "newMax"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                []
              ],
              [
                "test_basic_operation",
                []
              ],
              [
                "test_misc_datascale_with_comment",
                []
              ],
              [
                "test_misc_datascale",
                []
              ],
              [
                "test_misc_datascale_with_braces",
                []
              ],
              [
                "test_misc_datascale_misc_width",
                []
              ],
              [
                "test_misc_datascale_clobber_zoom",
                []
              ],
              [
                "test_misc_datascale_misc_height",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9319634425651467,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_basic_operation",
                  "test_misc_datascale_clobber_zoom",
                  0.8932765741777199
                ],
                [
                  "test_misc_datascale",
                  "test_misc_datascale_with_braces",
                  0.9173286442120083
                ],
                [
                  "test_misc_datascale",
                  "test_misc_datascale_check_vectors_false",
                  0.9690528763556886
                ],
                [
                  "test_misc_datascale_misc_height",
                  "test_misc_datascale_with_braces",
                  0.938615701630471
                ],
                [
                  "test_misc_datascale_check_vectors_false",
                  "test_misc_datascale_with_comment",
                  0.9241051583454718
                ],
                [
                  "test_basic_operation",
                  "test_misc_datascale_with_braces",
                  0.8601279415049693
                ],
                [
                  "test_misc_datascale",
                  "test_misc_datascale_clobber_zoom",
                  0.9554333937093654
                ],
                [
                  "test_misc_datascale_check_vectors_false",
                  "test_misc_datascale_misc_height",
                  0.9600409020221595
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "test_misc_datascale_with_braces",
                  0.9354912311177875
                ],
                [
                  "test_basic_operation",
                  "test_misc_datascale_check_vectors_false",
                  0.8981688689067167
                ],
                [
                  "test_misc_datascale_check_vectors_false",
                  "test_misc_datascale_misc_width",
                  0.9600409020221595
                ],
                [
                  "test_misc_datascale_check_vectors_false",
                  "test_misc_datascale_with_braces",
                  0.9241051583454718
                ],
                [
                  "test_misc_datascale",
                  "test_misc_datascale_misc_height",
                  0.9527999158096153
                ],
                [
                  "test_misc_datascale_with_comment",
                  "test_misc_datascale_with_braces",
                  0.9488636363636364
                ],
                [
                  "test_basic_operation",
                  "test_misc_datascale_misc_height",
                  0.884914986968517
                ],
                [
                  "test_misc_datascale_misc_width",
                  "test_misc_datascale_with_braces",
                  0.9445563073369929
                ],
                [
                  "test_misc_datascale",
                  "test_misc_datascale_misc_width",
                  0.9527999158096153
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "test_misc_datascale_misc_width",
                  0.9718298103482259
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "test_misc_datascale_with_comment",
                  0.9354912311177875
                ],
                [
                  "test_misc_datascale_misc_height",
                  "test_misc_datascale_misc_width",
                  0.9813664596273292
                ],
                [
                  "test_basic_operation",
                  "test_misc_datascale",
                  0.9062932866172634
                ],
                [
                  "test_basic_operation",
                  "test_misc_datascale_with_comment",
                  0.8601279415049693
                ],
                [
                  "test_basic_operation",
                  "test_misc_datascale_misc_width",
                  0.884914986968517
                ],
                [
                  "test_misc_datascale_clobber_zoom",
                  "test_misc_datascale_misc_height",
                  0.9718298103482259
                ],
                [
                  "test_misc_datascale",
                  "test_misc_datascale_with_comment",
                  0.9173286442120083
                ],
                [
                  "test_misc_datascale_misc_width",
                  "test_misc_datascale_with_comment",
                  0.9445563073369929
                ],
                [
                  "test_misc_datascale_check_vectors_false",
                  "test_misc_datascale_clobber_zoom",
                  0.9629000974739509
                ],
                [
                  "test_misc_datascale_misc_height",
                  "test_misc_datascale_with_comment",
                  0.938615701630471
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_misc_datascale_check_vectors_false",
                "false"
              ],
              [
                "test_basic_operation",
                "false"
              ],
              [
                "test_misc_datascale_with_comment",
                "false"
              ],
              [
                "test_misc_datascale",
                "false"
              ],
              [
                "test_misc_datascale_with_braces",
                "false"
              ],
              [
                "test_misc_datascale_misc_width",
                "false"
              ],
              [
                "test_misc_datascale_clobber_zoom",
                "false"
              ],
              [
                "test_misc_datascale_misc_height",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  }
]