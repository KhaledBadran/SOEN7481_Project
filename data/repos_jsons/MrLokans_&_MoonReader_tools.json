[
  {
    "name": "tests_\u0026_test_utils.py",
    "testCases": [
      {
        "name": "TestHelperMethods",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "[]"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "false"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "false"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "false"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "false"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "false"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "false"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                []
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "false"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "false"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "0"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "0"
                ],
                [
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "false"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "false"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "1"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                [
                  "l"
                ]
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                [
                  "l"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                []
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7983723279170815,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_one_or_list_returns_list_for_list_of_many_objects",
                  "test_one_or_list_returns_one_object_for_list_of_single_object",
                  0.7983723279170815
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_one_or_list_returns_list_for_list_of_many_objects",
                "false"
              ],
              [
                "test_one_or_list_returns_one_object_for_list_of_single_object",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestFileRoutines",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_correct_files_taken",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "[]"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "[]"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "[]"
                ],
                [
                  "test_correct_files_taken",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "false"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "false"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "false"
                ],
                [
                  "test_correct_files_taken",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "false"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "false"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "false"
                ],
                [
                  "test_correct_files_taken",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "false"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "false"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "false"
                ],
                [
                  "test_correct_files_taken",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "false"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "false"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "false"
                ],
                [
                  "test_correct_files_taken",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "false"
              ],
              [
                "test_full_pairs_taken_correctly",
                "false"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "false"
              ],
              [
                "test_correct_files_taken",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "false"
              ],
              [
                "test_full_pairs_taken_correctly",
                "false"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "false"
              ],
              [
                "test_correct_files_taken",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                []
              ],
              [
                "test_full_pairs_taken_correctly",
                []
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                []
              ],
              [
                "test_correct_files_taken",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "false"
              ],
              [
                "test_full_pairs_taken_correctly",
                "false"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "false"
              ],
              [
                "test_correct_files_taken",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "false"
              ],
              [
                "test_full_pairs_taken_correctly",
                "false"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "false"
              ],
              [
                "test_correct_files_taken",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "0"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "0"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "0"
                ],
                [
                  "test_correct_files_taken",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  "0"
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "0"
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "0"
                ],
                [
                  "test_correct_files_taken",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "false"
              ],
              [
                "test_full_pairs_taken_correctly",
                "false"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "false"
              ],
              [
                "test_correct_files_taken",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "false"
              ],
              [
                "test_full_pairs_taken_correctly",
                "false"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "false"
              ],
              [
                "test_correct_files_taken",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "1"
              ],
              [
                "test_full_pairs_taken_correctly",
                "1"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "1"
              ],
              [
                "test_correct_files_taken",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                [
                  "files",
                  "pairs"
                ]
              ],
              [
                "test_full_pairs_taken_correctly",
                [
                  "files",
                  "pairs"
                ]
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                [
                  "files",
                  "pairs"
                ]
              ],
              [
                "test_correct_files_taken",
                [
                  "dir_name",
                  "files"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                []
              ],
              [
                "test_full_pairs_taken_correctly",
                []
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                []
              ],
              [
                "test_correct_files_taken",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5035443305286792,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_correct_files_taken",
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  0.17928429140015903
                ],
                [
                  "test_correct_files_taken",
                  "test_full_pairs_taken_correctly",
                  0.13638618139749523
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  0.8520128672302583
                ],
                [
                  "test_full_pairs_taken_correctly",
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  0.8367983517440036
                ],
                [
                  "test_correct_files_taken",
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  0.17928429140015903
                ],
                [
                  "test_pairs_are_correctly_made_with_only_stat_file",
                  "test_pairs_are_correctly_made_with_only_notes_file",
                  0.8374999999999998
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_pairs_are_correctly_made_with_only_notes_file",
                "false"
              ],
              [
                "test_full_pairs_taken_correctly",
                "false"
              ],
              [
                "test_pairs_are_correctly_made_with_only_stat_file",
                "false"
              ],
              [
                "test_correct_files_taken",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestBookType",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "[]"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "[]"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "[]"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "[]"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "[]"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "[]"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "[]"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "false"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "false"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "false"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "false"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "false"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "false"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "false"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "false"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "false"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "false"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "false"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "false"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "false"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "false"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "false"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "false"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "false"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "false"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "false"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "false"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "false"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "false"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "false"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "false"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "false"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "false"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "false"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "false"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "false"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "false"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "false"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "false"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "false"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "false"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "false"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "false"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "false"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "false"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "false"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "false"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "false"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "false"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                []
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                []
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                []
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                []
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                []
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                []
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                []
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "false"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "false"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "false"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "false"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "false"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "false"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "false"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "false"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "false"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "false"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "false"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "false"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "false"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "false"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "0"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "0"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "0"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "0"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "0"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "0"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "0"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "0"
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "0"
                ],
                [
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  "0"
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "0"
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "0"
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "0"
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "0"
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "false"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "false"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "false"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "false"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "false"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "false"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "false"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "false"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "false"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "false"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "false"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "false"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "false"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "false"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "1"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "1"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "1"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "1"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "1"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "1"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "1"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                [
                  "simple_name"
                ]
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                [
                  "filename"
                ]
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                [
                  "filename"
                ]
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                [
                  "simple_name"
                ]
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                [
                  "book_type",
                  "simple_name"
                ]
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                [
                  "simple_name"
                ]
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                [
                  "simple_name"
                ]
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                [
                  "simple_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                []
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                []
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                []
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                []
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                []
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                []
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                []
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5592108768036402,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  0.46195657812238883
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "test_exception_raised_when_type_is_not_correct",
                  0.5487032611687345
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "test_incorrect_extension_parsing_raises_error",
                  0.5897678246195885
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  0.587605960347241
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "test_default_type_returned_when_parsing_generic_file",
                  0.5378528742004771
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  0.7487048859271456
                ],
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "test_exception_raised_when_type_is_not_correct",
                  0.509133174976598
                ],
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "test_exception_raised_when_parsing_noextname",
                  0.5345224838248487
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "test_incorrect_extension_parsing_raises_error",
                  0.4347826086956522
                ],
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "test_default_type_returned_when_parsing_generic_file",
                  0.5111012519999519
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "test_incorrect_extension_parsing_raises_error",
                  0.45501575519329013
                ],
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  0.47280542884465016
                ],
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "test_book_type_correctly_get_from_zip_ext",
                  0.7835467939002064
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "test_exception_raised_when_type_is_not_correct",
                  0.5243041203911969
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "test_exception_raised_when_parsing_noextname",
                  0.5014858873767987
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "test_book_type_correctly_get_from_zip_ext",
                  0.7735267838285932
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "test_default_type_returned_when_parsing_generic_file",
                  0.45818979495265694
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  0.401286176952564
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "test_incorrect_extension_parsing_raises_error",
                  0.5617544147048538
                ],
                [
                  "test_default_type_returned_when_parsing_generic_file",
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  0.42289003161103106
                ],
                [
                  "test_exception_raised_when_parsing_noextname",
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  0.6123724356957945
                ],
                [
                  "test_incorrect_extension_parsing_raises_error",
                  "test_incorrect_name_with_dot_in_path_raises_error",
                  0.7223151185146153
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "test_default_type_returned_when_parsing_generic_file",
                  0.5768179036829705
                ],
                [
                  "test_book_type_correctly_get_from_zip_ext",
                  "test_default_type_returned_when_parsing_generic_file",
                  0.5532833351724882
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "test_exception_raised_when_parsing_noextname",
                  0.51604684654214
                ],
                [
                  "test_book_type_correctly_parsed_from_simple_name",
                  "test_default_type_returned_when_parsing_generic_file",
                  0.5991712703227052
                ],
                [
                  "test_exception_raised_when_type_is_not_correct",
                  "test_exception_raised_when_parsing_noextname",
                  0.8255008255012383
                ],
                [
                  "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                  "test_incorrect_extension_parsing_raises_error",
                  0.4334607234315054
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_book_type_correctly_parsed_from_name_with_double_zip_ext",
                "false"
              ],
              [
                "test_incorrect_extension_parsing_raises_error",
                "false"
              ],
              [
                "test_incorrect_name_with_dot_in_path_raises_error",
                "false"
              ],
              [
                "test_exception_raised_when_parsing_noextname",
                "false"
              ],
              [
                "test_default_type_returned_when_parsing_generic_file",
                "false"
              ],
              [
                "test_book_type_correctly_get_from_zip_ext",
                "false"
              ],
              [
                "test_exception_raised_when_type_is_not_correct",
                "false"
              ],
              [
                "test_book_type_correctly_parsed_from_simple_name",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_parsers.py",
    "testCases": [
      {
        "name": "TestStatisticsParser",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_empty_fname_raises_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_incorrect_files",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_empty_fname_raises_error",
                  "[]"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "[]"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "[]"
                ],
                [
                  "test_incorrect_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_empty_fname_raises_error",
                  "false"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "false"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "false"
                ],
                [
                  "test_incorrect_files",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_empty_fname_raises_error",
                  "false"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "false"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "false"
                ],
                [
                  "test_incorrect_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_empty_fname_raises_error",
                  "false"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "false"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "false"
                ],
                [
                  "test_incorrect_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_empty_fname_raises_error",
                  "false"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "false"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "false"
                ],
                [
                  "test_incorrect_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "false"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "false"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "false"
              ],
              [
                "test_incorrect_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "false"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "false"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "false"
              ],
              [
                "test_incorrect_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_empty_fname_raises_error",
                [
                  "self.test_str"
                ]
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                [
                  "self.test_str"
                ]
              ],
              [
                "test_full_str_is_parsed_correctly",
                []
              ],
              [
                "test_incorrect_files",
                [
                  "self.test_str"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "false"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "true"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "false"
              ],
              [
                "test_incorrect_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "false"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "false"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "true"
              ],
              [
                "test_incorrect_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_empty_fname_raises_error",
                  "0"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "0"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "0"
                ],
                [
                  "test_incorrect_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_empty_fname_raises_error",
                  "0"
                ],
                [
                  "test_empty_stats_return_for_empty_file_p3",
                  "0"
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "0"
                ],
                [
                  "test_incorrect_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "false"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "false"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "false"
              ],
              [
                "test_incorrect_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "false"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "false"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "false"
              ],
              [
                "test_incorrect_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "1"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "1"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "3"
              ],
              [
                "test_incorrect_files",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_fname_raises_error",
                []
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                [
                  "s"
                ]
              ],
              [
                "test_full_str_is_parsed_correctly",
                [
                  "po"
                ]
              ],
              [
                "test_incorrect_files",
                [
                  "fname"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_empty_fname_raises_error",
                []
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                []
              ],
              [
                "test_full_str_is_parsed_correctly",
                [
                  "self.test_str"
                ]
              ],
              [
                "test_incorrect_files",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48559781742500324,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_full_str_is_parsed_correctly",
                  "test_incorrect_files",
                  0.41147559989891175
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "test_empty_fname_raises_error",
                  0.42433421239575275
                ],
                [
                  "test_full_str_is_parsed_correctly",
                  "test_empty_stats_return_for_empty_file_p3",
                  0.5162547924281742
                ],
                [
                  "test_empty_fname_raises_error",
                  "test_empty_stats_return_for_empty_file_p3",
                  0.4182141805046713
                ],
                [
                  "test_incorrect_files",
                  "test_empty_fname_raises_error",
                  0.5416666666666666
                ],
                [
                  "test_incorrect_files",
                  "test_empty_stats_return_for_empty_file_p3",
                  0.6016414526558429
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_fname_raises_error",
                "false"
              ],
              [
                "test_empty_stats_return_for_empty_file_p3",
                "false"
              ],
              [
                "test_full_str_is_parsed_correctly",
                "false"
              ],
              [
                "test_incorrect_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  }
]