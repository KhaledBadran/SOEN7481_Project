[
  {
    "name": "test_\u0026_unit_\u0026_test_save_df.py",
    "testCases": [
      {
        "name": "TestSave_df",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_save_df",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_save_df",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_save_df",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_save_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_save_df",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_save_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_save_df",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_save_df",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_save_df",
                [
                  "self.result_df",
                  "self.file_name",
                  "self.tmp_dir",
                  "self.test_df"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_save_df",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_perform_nmf.py",
    "testCases": [
      {
        "name": "TestPerform_nmf",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_perform_nmf",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_perform_nmf",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_perform_nmf",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_perform_nmf",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_perform_nmf",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_perform_nmf",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_perform_nmf",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_perform_nmf",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_perform_nmf",
                [
                  "rowdex",
                  "C",
                  "nrows",
                  "H_clusters",
                  "sets_R_equal",
                  "H0",
                  "H",
                  "H_b",
                  "k",
                  "run_parameters",
                  "H_b_clusters",
                  "W",
                  "X",
                  "ncols"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                [
                  "self.run_parameters"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_nmf",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_get_timestamp.py",
    "testCases": [
      {
        "name": "TestGet_timestamp",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_timestamp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_timestamp",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_timestamp",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_timestamp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_timestamp",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_timestamp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_timestamp",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_timestamp",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                [
                  "stamp_time",
                  "n_default_chars",
                  "tstr",
                  "tstr2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_timestamp",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_symmetrize_df.py",
    "testCases": [
      {
        "name": "TestSymmetrize_df",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_symmetrize_df",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_symmetrize_df_empty",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_symmetrize_df",
                  "[]"
                ],
                [
                  "test_symmetrize_df_empty",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_symmetrize_df",
                  "false"
                ],
                [
                  "test_symmetrize_df_empty",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_symmetrize_df",
                  "false"
                ],
                [
                  "test_symmetrize_df_empty",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_symmetrize_df",
                  "false"
                ],
                [
                  "test_symmetrize_df_empty",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_symmetrize_df",
                  "false"
                ],
                [
                  "test_symmetrize_df_empty",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                "false"
              ],
              [
                "test_symmetrize_df_empty",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                "false"
              ],
              [
                "test_symmetrize_df_empty",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_symmetrize_df",
                [
                  "self.network_none",
                  "self.network_empty",
                  "self.network_wrong_col"
                ]
              ],
              [
                "test_symmetrize_df_empty",
                [
                  "self.network_none",
                  "self.network",
                  "self.network_wrong_col"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                "false"
              ],
              [
                "test_symmetrize_df_empty",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                "false"
              ],
              [
                "test_symmetrize_df_empty",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_symmetrize_df",
                  "0"
                ],
                [
                  "test_symmetrize_df_empty",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_symmetrize_df",
                  "0"
                ],
                [
                  "test_symmetrize_df_empty",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                "false"
              ],
              [
                "test_symmetrize_df_empty",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                "false"
              ],
              [
                "test_symmetrize_df_empty",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                "1"
              ],
              [
                "test_symmetrize_df_empty",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                [
                  "ret",
                  "compare_ret"
                ]
              ],
              [
                "test_symmetrize_df_empty",
                [
                  "ret",
                  "compare_ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetrize_df",
                [
                  "self.network"
                ]
              ],
              [
                "test_symmetrize_df_empty",
                [
                  "self.network_empty"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4525062483125562,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_symmetrize_df",
                  "test_symmetrize_df_empty",
                  0.4525062483125562
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_symmetrize_df",
                "true"
              ],
              [
                "test_symmetrize_df_empty",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_get_network_df.py",
    "testCases": [
      {
        "name": "TestGet_network_df",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_run_file",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_run_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_run_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_run_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_run_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_run_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_run_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_run_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                [
                  "network_df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                [
                  "self.network_name",
                  "self.network_data",
                  "self.network_file",
                  "self.golden_output",
                  "self.config_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_perform_kmeans.py",
    "testCases": [
      {
        "name": "TestPerform_kmeans",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_perform_kmeans",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_perform_kmeans",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_perform_kmeans",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_perform_kmeans",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_perform_kmeans",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_perform_kmeans",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_perform_kmeans",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_perform_kmeans",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_perform_kmeans",
                [
                  "n_clusters",
                  "n_test_perm",
                  "CC",
                  "f_perm",
                  "cluster_p",
                  "n_samples",
                  "cluster_set",
                  "n_repeats",
                  "n_test_rows",
                  "I",
                  "label_set",
                  "M"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_kmeans",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_perform_net_nmf.py",
    "testCases": [
      {
        "name": "TestPerform_net_nmf",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_perform_net_nmf",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_perform_net_nmf",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_perform_net_nmf",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_perform_net_nmf",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_perform_net_nmf",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_perform_net_nmf",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_perform_net_nmf",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_perform_net_nmf",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_perform_net_nmf",
                [
                  "rowdex",
                  "C",
                  "lap_val",
                  "nrows",
                  "H_clusters",
                  "pct_nodes",
                  "sets_R_equal",
                  "H0",
                  "H",
                  "H_b",
                  "k",
                  "n_nodes",
                  "run_parameters",
                  "N",
                  "H_b_clusters",
                  "W",
                  "X",
                  "lap_dag",
                  "ncols"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                [
                  "self.run_parameters"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_perform_net_nmf",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_sample_a_matrix.py",
    "testCases": [
      {
        "name": "TestSample_a_matrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_sample_a_matrix",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_sample_a_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_sample_a_matrix",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_sample_a_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_sample_a_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_sample_a_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_sample_a_matrix",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_sample_a_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_sample_a_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_sample_a_matrix",
                [
                  "A",
                  "B",
                  "C",
                  "n_zero_rows",
                  "n_test_cols",
                  "perm_err_sum",
                  "n_zeros",
                  "epsilon_sum",
                  "B_col",
                  "P",
                  "n_test_rows",
                  "n_smpl_cols",
                  "pct_smpl",
                  "n_zero_err_sum"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_sample_a_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_update_network_df.py",
    "testCases": [
      {
        "name": "TestUpdate_network_df",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update_network_df",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update_network_df",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update_network_df",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update_network_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update_network_df",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update_network_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update_network_df",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update_network_df",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update_network_df",
                [
                  "self.network",
                  "self.node_id",
                  "self.nodes_list",
                  "self.network_result"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_update_network_df",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_get_run_parameters.py",
    "testCases": [
      {
        "name": "TestGet_run_parameters",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_run_file",
                  "[PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_run_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_run_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_run_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_run_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_run_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_run_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_run_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                [
                  "run_parameters"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                [
                  "self.f_context",
                  "self.run_file",
                  "self.golden_output",
                  "self.config_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_run_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_get_spreadsheet_df.py",
    "testCases": [
      {
        "name": "TestGet_spreadsheet_df",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_spreadsheet_df",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_spreadsheet_df",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_spreadsheet_df",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_spreadsheet_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_spreadsheet_df",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_spreadsheet_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_spreadsheet_df",
                [
                  "self.run_parameter_template"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_spreadsheet_df",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_spreadsheet_df",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                [
                  "data",
                  "spreadsheet",
                  "golden_output"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                [
                  "self.user_spreadsheet",
                  "self.config_dir",
                  "self.full_file_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_spreadsheet_df",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_update_linkage_matrix.py",
    "testCases": [
      {
        "name": "TestUpdate_linkage_matrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update_linkage_matrix",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update_linkage_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update_linkage_matrix",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update_linkage_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update_linkage_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update_linkage_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_update_linkage_matrix",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update_linkage_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update_linkage_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_update_linkage_matrix",
                [
                  "n_test_perm",
                  "CC",
                  "n_samples",
                  "c_c",
                  "cluster_set",
                  "I",
                  "s_dex",
                  "M",
                  "n_clusters",
                  "f_perm",
                  "cluster_p",
                  "n_repeats",
                  "n_test_rows",
                  "n_check"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_update_linkage_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_update_spreadsheet_df.py",
    "testCases": [
      {
        "name": "TestUpdate_spreadsheet_df",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update_spreadsheet_df",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update_spreadsheet_df",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update_spreadsheet_df",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update_spreadsheet_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update_spreadsheet_df",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update_spreadsheet_df",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update_spreadsheet_df",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update_spreadsheet_df",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update_spreadsheet_df",
                [
                  "self.spreadsheet_result",
                  "self.spreadsheet",
                  "self.gene_list"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_update_spreadsheet_df",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_create_node_names_dict.py",
    "testCases": [
      {
        "name": "TestCreate_node_names_dict",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create_node_names_dict_start_negative",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_node_names_dict",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create_node_names_dict_start_negative",
                  "[]"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "[]"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "[]"
                ],
                [
                  "test_create_node_names_dict",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create_node_names_dict_start_negative",
                  "false"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "false"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "false"
                ],
                [
                  "test_create_node_names_dict",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create_node_names_dict_start_negative",
                  "false"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "false"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "false"
                ],
                [
                  "test_create_node_names_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create_node_names_dict_start_negative",
                  "false"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "false"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "false"
                ],
                [
                  "test_create_node_names_dict",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create_node_names_dict_start_negative",
                  "false"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "false"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "false"
                ],
                [
                  "test_create_node_names_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "false"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "false"
              ],
              [
                "test_create_node_names_dict_empty",
                "false"
              ],
              [
                "test_create_node_names_dict",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "false"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "false"
              ],
              [
                "test_create_node_names_dict_empty",
                "false"
              ],
              [
                "test_create_node_names_dict",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                [
                  "self.node_names",
                  "self.node_names_empty",
                  "self.node_names_start_positive"
                ]
              ],
              [
                "test_create_node_names_dict_start_positive",
                [
                  "self.node_names",
                  "self.node_names_empty",
                  "self.node_names_start_negative"
                ]
              ],
              [
                "test_create_node_names_dict_empty",
                [
                  "self.node_names",
                  "self.node_names_start_positive",
                  "self.node_names_start_negative"
                ]
              ],
              [
                "test_create_node_names_dict",
                [
                  "self.node_names_empty",
                  "self.node_names_start_positive",
                  "self.node_names_start_negative"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "false"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "false"
              ],
              [
                "test_create_node_names_dict_empty",
                "false"
              ],
              [
                "test_create_node_names_dict",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "false"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "false"
              ],
              [
                "test_create_node_names_dict_empty",
                "false"
              ],
              [
                "test_create_node_names_dict",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create_node_names_dict_start_negative",
                  "0"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "0"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "0"
                ],
                [
                  "test_create_node_names_dict",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create_node_names_dict_start_negative",
                  "0"
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "0"
                ],
                [
                  "test_create_node_names_dict_empty",
                  "0"
                ],
                [
                  "test_create_node_names_dict",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "false"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "false"
              ],
              [
                "test_create_node_names_dict_empty",
                "false"
              ],
              [
                "test_create_node_names_dict",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "false"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "false"
              ],
              [
                "test_create_node_names_dict_empty",
                "false"
              ],
              [
                "test_create_node_names_dict",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "1"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "1"
              ],
              [
                "test_create_node_names_dict_empty",
                "1"
              ],
              [
                "test_create_node_names_dict",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                [
                  "ret"
                ]
              ],
              [
                "test_create_node_names_dict_start_positive",
                [
                  "ret"
                ]
              ],
              [
                "test_create_node_names_dict_empty",
                [
                  "ret"
                ]
              ],
              [
                "test_create_node_names_dict",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                [
                  "self.node_names_start_negative"
                ]
              ],
              [
                "test_create_node_names_dict_start_positive",
                [
                  "self.node_names_start_positive"
                ]
              ],
              [
                "test_create_node_names_dict_empty",
                [
                  "self.node_names_empty"
                ]
              ],
              [
                "test_create_node_names_dict",
                [
                  "self.node_names"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7363338100736921,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_create_node_names_dict",
                  "test_create_node_names_dict_empty",
                  0.6251954041004443
                ],
                [
                  "test_create_node_names_dict_empty",
                  "test_create_node_names_dict_start_positive",
                  0.7252377242938949
                ],
                [
                  "test_create_node_names_dict_empty",
                  "test_create_node_names_dict_start_negative",
                  0.7026171689305275
                ],
                [
                  "test_create_node_names_dict",
                  "test_create_node_names_dict_start_positive",
                  0.8134270340432018
                ],
                [
                  "test_create_node_names_dict",
                  "test_create_node_names_dict_start_negative",
                  0.6852659187775927
                ],
                [
                  "test_create_node_names_dict_start_positive",
                  "test_create_node_names_dict_start_negative",
                  0.8662596102964911
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_create_node_names_dict_start_negative",
                "false"
              ],
              [
                "test_create_node_names_dict_start_positive",
                "false"
              ],
              [
                "test_create_node_names_dict_empty",
                "false"
              ],
              [
                "test_create_node_names_dict",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_smooth_matrix_with_rwr.py",
    "testCases": [
      {
        "name": "TestSmooth_matrix_with_rwr",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_smooth_matrix_with_rwr",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_smooth_matrix_with_rwr",
                  "[]"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "[]"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_smooth_matrix_with_rwr",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_smooth_matrix_with_rwr",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_smooth_matrix_with_rwr",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_smooth_matrix_with_rwr",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "false"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                []
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                []
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "true"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "true"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_smooth_matrix_with_rwr",
                  "0"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "0"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_smooth_matrix_with_rwr",
                  "0"
                ],
                [
                  "test_smooth_matrix_with_rwr_single_vector",
                  "0"
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "2"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "2"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                [
                  "A",
                  "F_exact",
                  "F_calculated",
                  "EXPECTED_STEPS",
                  "T",
                  "F0",
                  "steps"
                ]
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                [
                  "A",
                  "F_exact",
                  "F_calculated",
                  "EXPECTED_STEPS",
                  "T",
                  "F0",
                  "steps"
                ]
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                [
                  "A",
                  "F_exact",
                  "F_calculated",
                  "EXPECTED_STEPS",
                  "T",
                  "F0",
                  "steps"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                [
                  "self.run_parameters"
                ]
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                [
                  "self.run_parameters"
                ]
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                [
                  "self.run_parameters"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9773120869991353,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_smooth_matrix_with_rwr",
                  "test_smooth_matrix_with_rwr_single_vector",
                  0.9660380792661375
                ],
                [
                  "test_smooth_matrix_with_rwr_non_sparse",
                  "test_smooth_matrix_with_rwr_single_vector",
                  0.9777291337505302
                ],
                [
                  "test_smooth_matrix_with_rwr",
                  "test_smooth_matrix_with_rwr_non_sparse",
                  0.9881690479807381
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_smooth_matrix_with_rwr",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_single_vector",
                "false"
              ],
              [
                "test_smooth_matrix_with_rwr_non_sparse",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_find_dropped_node_names.py",
    "testCases": [
      {
        "name": "TestFind_dropped_node_names",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_find_dropped_node_names",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_find_dropped_node_names",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_find_dropped_node_names",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_find_dropped_node_names",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_find_dropped_node_names",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_find_dropped_node_names",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_find_dropped_node_names",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_find_dropped_node_names",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                [
                  "self.droplist",
                  "self.spreadsheet_df",
                  "self.unique_gene_names"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_find_dropped_node_names",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_map_node_names_to_index.py",
    "testCases": [
      {
        "name": "TestMap_node_names_to_index",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_map_node_names_to_index",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_map_node_names_to_index",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_map_node_names_to_index",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_map_node_names_to_index",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_map_node_names_to_index",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_map_node_names_to_index",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_map_node_names_to_index",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_map_node_names_to_index",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                [
                  "ret",
                  "compare_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_map_node_names_to_index",
                [
                  "self.network",
                  "self.genes_map"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_map_node_names_to_index",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_update_indicator_matrix.py",
    "testCases": [
      {
        "name": "TestUpdate_indicator_matrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update_indicator_matrix",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update_indicator_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update_indicator_matrix",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update_indicator_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update_indicator_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update_indicator_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update_indicator_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update_indicator_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                [
                  "n_test_perm",
                  "A",
                  "f_perm",
                  "running_sum",
                  "n_repeats",
                  "n_test_rows"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_update_indicator_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_get_quantile_norm_matrix.py",
    "testCases": [
      {
        "name": "TestGet_quantile_norm_matrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_quantile_norm_matrix",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_quantile_norm_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_quantile_norm_matrix",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_quantile_norm_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_quantile_norm_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_quantile_norm_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_quantile_norm_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_quantile_norm_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                [
                  "a",
                  "qn1",
                  "aQN"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_quantile_norm_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_create_dir_AND_remove_dir.py",
    "testCases": [
      {
        "name": "TestCreate_dir_AND_remove_dir",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create_dir_AND_remove_dir",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create_dir_AND_remove_dir",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create_dir_AND_remove_dir",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create_dir_AND_remove_dir",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create_dir_AND_remove_dir",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create_dir_AND_remove_dir",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create_dir_AND_remove_dir",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create_dir_AND_remove_dir",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                [
                  "A",
                  "new_directory_name",
                  "time_stamp",
                  "A_back",
                  "dir_name",
                  "A_diff",
                  "dir_path",
                  "a_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                [
                  "self.run_parameters"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_create_dir_AND_remove_dir",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_append_run_parameters_dict.py",
    "testCases": [
      {
        "name": "TestAppend_run_parameters_dict",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_append_run_parameters_dict",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_append_run_parameters_dict",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_append_run_parameters_dict",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_append_run_parameters_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_append_run_parameters_dict",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_append_run_parameters_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_append_run_parameters_dict",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_append_run_parameters_dict",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                [
                  "run_parameters"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                [
                  "self.run_parameters"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_append_run_parameters_dict",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_extract_network_node_names.py",
    "testCases": [
      {
        "name": "TestExtract_network_node_names",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_extract_network_node_names_good",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_extract_network_node_names_good",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_extract_network_node_names_good",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_extract_network_node_names_good",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_extract_network_node_names_good",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_extract_network_node_names_good",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_extract_network_node_names_good",
                [
                  "self.network_df_two_col",
                  "self.network_df_emtpy"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_extract_network_node_names_good",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_extract_network_node_names_good",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                [
                  "nodelist_a",
                  "nodelist_b"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                [
                  "self.golden_output_col1",
                  "self.golden_output_col0",
                  "self.network_df_three_col"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_network_node_names_good",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_update_h_coordinate_matrix.py",
    "testCases": [
      {
        "name": "TestUpdate_h_coordinate_matrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update_h_coordinate_matrix",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update_h_coordinate_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update_h_coordinate_matrix",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update_h_coordinate_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update_h_coordinate_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update_h_coordinate_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update_h_coordinate_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update_h_coordinate_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                [
                  "dh",
                  "W",
                  "H",
                  "X",
                  "hwx",
                  "k",
                  "rows",
                  "cols"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_update_h_coordinate_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_create_timestamped_filename.py",
    "testCases": [
      {
        "name": "TestCreate_timestamped_filename",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create_timestamped_filename",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create_timestamped_filename",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create_timestamped_filename",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create_timestamped_filename",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create_timestamped_filename",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create_timestamped_filename",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create_timestamped_filename",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create_timestamped_filename",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                [
                  "tsfn",
                  "n_chars",
                  "name_extension",
                  "name_base",
                  "precision",
                  "n_digits"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_create_timestamped_filename",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_append_column_to_spreadsheet.py",
    "testCases": [
      {
        "name": "TestAppend_column_to_spreadsheet",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_append_column_to_spreadsheet",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_append_column_to_spreadsheet",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_append_column_to_spreadsheet",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_append_column_to_spreadsheet",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_append_column_to_spreadsheet",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_append_column_to_spreadsheet",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_append_column_to_spreadsheet",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_append_column_to_spreadsheet",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                [
                  "self.column",
                  "self.col_name",
                  "self.spreadsheet_result",
                  "self.spreadsheet"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_append_column_to_spreadsheet",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_convert_network_df_to_sparse.py",
    "testCases": [
      {
        "name": "TestConvert_network_df_to_sparse",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_convert_network_df_to_sparse",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_convert_network_df_to_sparse",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_convert_network_df_to_sparse",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_convert_network_df_to_sparse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_convert_network_df_to_sparse",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_convert_network_df_to_sparse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                [
                  "self.pg_network_df_empty"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_convert_network_df_to_sparse",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_convert_network_df_to_sparse",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                [
                  "ret",
                  "compare_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                [
                  "self.pg_network_df"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_network_df_to_sparse",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_create_df_with_sample_labels.py",
    "testCases": [
      {
        "name": "TestCreate_df_with_sample_labels",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create_df_with_sample_labels",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create_df_with_sample_labels",
                  "[]"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create_df_with_sample_labels",
                  "false"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create_df_with_sample_labels",
                  "false"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create_df_with_sample_labels",
                  "false"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create_df_with_sample_labels",
                  "false"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "false"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "false"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                [
                  "self.sample_names_empty",
                  "self.labels_empty"
                ]
              ],
              [
                "test_create_empty_df_with_sample_labels",
                [
                  "self.sample_names",
                  "self.labels"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "false"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "false"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create_df_with_sample_labels",
                  "0"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create_df_with_sample_labels",
                  "0"
                ],
                [
                  "test_create_empty_df_with_sample_labels",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "false"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "false"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "1"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                [
                  "ret",
                  "compare_result"
                ]
              ],
              [
                "test_create_empty_df_with_sample_labels",
                [
                  "ret",
                  "compare_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                [
                  "self.sample_names",
                  "self.labels"
                ]
              ],
              [
                "test_create_empty_df_with_sample_labels",
                [
                  "self.sample_names_empty",
                  "self.labels_empty"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7756717518813396,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_create_df_with_sample_labels",
                  "test_create_empty_df_with_sample_labels",
                  0.7756717518813396
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_create_df_with_sample_labels",
                "true"
              ],
              [
                "test_create_empty_df_with_sample_labels",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_find_unique_common_node_names.py",
    "testCases": [
      {
        "name": "TestNode_names",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_find_unique_node_names",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_find_common_node_names",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_find_unique_node_names",
                  "[]"
                ],
                [
                  "test_find_common_node_names",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_find_unique_node_names",
                  "false"
                ],
                [
                  "test_find_common_node_names",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_find_unique_node_names",
                  "false"
                ],
                [
                  "test_find_common_node_names",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_find_unique_node_names",
                  "false"
                ],
                [
                  "test_find_common_node_names",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_find_unique_node_names",
                  "false"
                ],
                [
                  "test_find_common_node_names",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                "false"
              ],
              [
                "test_find_common_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                "false"
              ],
              [
                "test_find_common_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                []
              ],
              [
                "test_find_common_node_names",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                "false"
              ],
              [
                "test_find_common_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                "false"
              ],
              [
                "test_find_common_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_find_unique_node_names",
                  "0"
                ],
                [
                  "test_find_common_node_names",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_find_unique_node_names",
                  "0"
                ],
                [
                  "test_find_common_node_names",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                "false"
              ],
              [
                "test_find_common_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                "false"
              ],
              [
                "test_find_common_node_names",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                "1"
              ],
              [
                "test_find_common_node_names",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                [
                  "ret"
                ]
              ],
              [
                "test_find_common_node_names",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_find_unique_node_names",
                [
                  "self.list_1",
                  "self.list_2"
                ]
              ],
              [
                "test_find_common_node_names",
                [
                  "self.list_1",
                  "self.list_2"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7411790642137418,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_find_unique_node_names",
                  "test_find_common_node_names",
                  0.7411790642137418
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_find_unique_node_names",
                "true"
              ],
              [
                "test_find_common_node_names",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_form_network_laplacian_matrix.py",
    "testCases": [
      {
        "name": "TestForm_network_laplacian_matrix",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_form_network_laplacian_matrix",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_form_network_laplacian_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_form_network_laplacian_matrix",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_form_network_laplacian_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_form_network_laplacian_matrix",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_form_network_laplacian_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_form_network_laplacian_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_form_network_laplacian_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                [
                  "A",
                  "THRESHOLD",
                  "L0",
                  "L1",
                  "Ld",
                  "L",
                  "Lk"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_form_network_laplacian_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_create_reverse_node_names_dict.py",
    "testCases": [
      {
        "name": "TestCreate_reverse_node_names_dict",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create_reverse_node_names_dict",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create_reverse_node_names_dict",
                  "[]"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create_reverse_node_names_dict",
                  "false"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create_reverse_node_names_dict",
                  "false"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create_reverse_node_names_dict",
                  "false"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create_reverse_node_names_dict",
                  "false"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "false"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "false"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                [
                  "self.dictionary_empty"
                ]
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                [
                  "self.dictionary"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "false"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "false"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create_reverse_node_names_dict",
                  "0"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create_reverse_node_names_dict",
                  "0"
                ],
                [
                  "test_create_reverse_node_names_dict_empty",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "false"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "false"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "1"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                [
                  "ret"
                ]
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                [
                  "self.dictionary"
                ]
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                [
                  "self.dictionary_empty"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5987792459378111,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_create_reverse_node_names_dict",
                  "test_create_reverse_node_names_dict_empty",
                  0.5987792459378111
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_create_reverse_node_names_dict",
                "false"
              ],
              [
                "test_create_reverse_node_names_dict_empty",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_extract_spreadsheet_gene_names.py",
    "testCases": [
      {
        "name": "TestExtract_spreadsheet_gene_names",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_extract_spreadsheet_gene_names",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                [
                  "self.spreadsheet",
                  "self.spreadsheet_empty"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_spreadsheet_gene_names",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_unit_\u0026_test_normalize_sparse_mat_by_diagonal.py",
    "testCases": [
      {
        "name": "TestNormalize_sparse_mat_by_diagonal",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_normalize_sparse_mat_by_diagonal",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                [
                  "B2",
                  "A",
                  "B",
                  "geo_mean"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_normalize_sparse_mat_by_diagonal",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]