[
  {
    "name": "FlowCytometryTools_\u0026_tests_\u0026_test_gates.py",
    "testCases": [
      {
        "name": "TestGates",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_interval_gate",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_interval_gate",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_interval_gate",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_interval_gate",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_interval_gate",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_interval_gate",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_interval_gate",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_interval_gate",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                [
                  "interval_gate",
                  "empty_df",
                  "test_df",
                  "test_cases",
                  "actual_output",
                  "gate",
                  "bool_series"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_interval_gate",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "FlowCytometryTools_\u0026_tests_\u0026_test_imports.py",
    "testCases": [
      {
        "name": "TestImports",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_imports",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_imports",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_imports",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_imports",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_imports",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_imports",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_imports",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_imports",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_imports",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_imports",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "FlowCytometryTools_\u0026_tests_\u0026_test_fcs_reader.py",
    "testCases": [
      {
        "name": "TestFCSParser",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_parse",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_parse",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_parse",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_parse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_parse",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_parse",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_parse",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_parse",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                [
                  "df",
                  "expected_columns",
                  "meta",
                  "expected_meta",
                  "expected_values",
                  "subset_of_data"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_parse",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "FlowCytometryTools_\u0026_tests_\u0026_test_transforms.py",
    "testCases": [
      {
        "name": "TestTransforms",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_x_for_spln_edge_cases",
                  "[]"
                ],
                [
                  "test_hlog_inv",
                  "[]"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "[]"
                ],
                [
                  "test_x_for_spln",
                  "[]"
                ],
                [
                  "test_tlog_inv",
                  "[]"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "[]"
                ],
                [
                  "test_tlog",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_hlog",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_x_for_spln_edge_cases",
                  "[]"
                ],
                [
                  "test_hlog_inv",
                  "[]"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "[]"
                ],
                [
                  "test_x_for_spln",
                  "[]"
                ],
                [
                  "test_tlog_inv",
                  "[]"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "[]"
                ],
                [
                  "test_tlog",
                  "[]"
                ],
                [
                  "test_hlog",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_x_for_spln_edge_cases",
                  "true"
                ],
                [
                  "test_hlog_inv",
                  "false"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "true"
                ],
                [
                  "test_x_for_spln",
                  "false"
                ],
                [
                  "test_tlog_inv",
                  "false"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "false"
                ],
                [
                  "test_tlog",
                  "false"
                ],
                [
                  "test_hlog",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_x_for_spln_edge_cases",
                  "false"
                ],
                [
                  "test_hlog_inv",
                  "false"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "false"
                ],
                [
                  "test_x_for_spln",
                  "false"
                ],
                [
                  "test_tlog_inv",
                  "false"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "false"
                ],
                [
                  "test_tlog",
                  "false"
                ],
                [
                  "test_hlog",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_x_for_spln_edge_cases",
                  "false"
                ],
                [
                  "test_hlog_inv",
                  "false"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "false"
                ],
                [
                  "test_x_for_spln",
                  "false"
                ],
                [
                  "test_tlog_inv",
                  "false"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "false"
                ],
                [
                  "test_tlog",
                  "false"
                ],
                [
                  "test_hlog",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_x_for_spln_edge_cases",
                  "false"
                ],
                [
                  "test_hlog_inv",
                  "false"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "false"
                ],
                [
                  "test_x_for_spln",
                  "false"
                ],
                [
                  "test_tlog_inv",
                  "false"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "false"
                ],
                [
                  "test_tlog",
                  "false"
                ],
                [
                  "test_hlog",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "false"
              ],
              [
                "test_hlog_inv",
                "false"
              ],
              [
                "test_transform_invocations_on_sample",
                "false"
              ],
              [
                "test_x_for_spln",
                "false"
              ],
              [
                "test_tlog_inv",
                "false"
              ],
              [
                "test_hlog_on_fc_measurement",
                "false"
              ],
              [
                "test_tlog",
                "false"
              ],
              [
                "test_hlog",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "false"
              ],
              [
                "test_hlog_inv",
                "false"
              ],
              [
                "test_transform_invocations_on_sample",
                "false"
              ],
              [
                "test_x_for_spln",
                "false"
              ],
              [
                "test_tlog_inv",
                "false"
              ],
              [
                "test_hlog_on_fc_measurement",
                "false"
              ],
              [
                "test_tlog",
                "false"
              ],
              [
                "test_hlog",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                [
                  "self.fc_plate",
                  "self.fc_measurement"
                ]
              ],
              [
                "test_hlog_inv",
                [
                  "self.fc_plate",
                  "self.fc_measurement"
                ]
              ],
              [
                "test_transform_invocations_on_sample",
                []
              ],
              [
                "test_x_for_spln",
                [
                  "self.fc_plate",
                  "self.fc_measurement"
                ]
              ],
              [
                "test_tlog_inv",
                [
                  "self.fc_plate",
                  "self.fc_measurement"
                ]
              ],
              [
                "test_hlog_on_fc_measurement",
                [
                  "self.fc_plate"
                ]
              ],
              [
                "test_tlog",
                [
                  "self.fc_plate",
                  "self.fc_measurement"
                ]
              ],
              [
                "test_hlog",
                [
                  "self.fc_plate",
                  "self.fc_measurement"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "false"
              ],
              [
                "test_hlog_inv",
                "false"
              ],
              [
                "test_transform_invocations_on_sample",
                "false"
              ],
              [
                "test_x_for_spln",
                "false"
              ],
              [
                "test_tlog_inv",
                "false"
              ],
              [
                "test_hlog_on_fc_measurement",
                "false"
              ],
              [
                "test_tlog",
                "false"
              ],
              [
                "test_hlog",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "false"
              ],
              [
                "test_hlog_inv",
                "false"
              ],
              [
                "test_transform_invocations_on_sample",
                "false"
              ],
              [
                "test_x_for_spln",
                "false"
              ],
              [
                "test_tlog_inv",
                "false"
              ],
              [
                "test_hlog_on_fc_measurement",
                "false"
              ],
              [
                "test_tlog",
                "false"
              ],
              [
                "test_hlog",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_x_for_spln_edge_cases",
                  "0"
                ],
                [
                  "test_hlog_inv",
                  "0"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "0"
                ],
                [
                  "test_x_for_spln",
                  "0"
                ],
                [
                  "test_tlog_inv",
                  "0"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "0"
                ],
                [
                  "test_tlog",
                  "0"
                ],
                [
                  "test_hlog",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_x_for_spln_edge_cases",
                  "0"
                ],
                [
                  "test_hlog_inv",
                  "0"
                ],
                [
                  "test_transform_invocations_on_sample",
                  "0"
                ],
                [
                  "test_x_for_spln",
                  "0"
                ],
                [
                  "test_tlog_inv",
                  "0"
                ],
                [
                  "test_hlog_on_fc_measurement",
                  "0"
                ],
                [
                  "test_tlog",
                  "0"
                ],
                [
                  "test_hlog",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "false"
              ],
              [
                "test_hlog_inv",
                "false"
              ],
              [
                "test_transform_invocations_on_sample",
                "false"
              ],
              [
                "test_x_for_spln",
                "false"
              ],
              [
                "test_tlog_inv",
                "false"
              ],
              [
                "test_hlog_on_fc_measurement",
                "false"
              ],
              [
                "test_tlog",
                "false"
              ],
              [
                "test_hlog",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "false"
              ],
              [
                "test_hlog_inv",
                "false"
              ],
              [
                "test_transform_invocations_on_sample",
                "false"
              ],
              [
                "test_x_for_spln",
                "false"
              ],
              [
                "test_tlog_inv",
                "false"
              ],
              [
                "test_hlog_on_fc_measurement",
                "false"
              ],
              [
                "test_tlog",
                "false"
              ],
              [
                "test_hlog",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "1"
              ],
              [
                "test_hlog_inv",
                "2"
              ],
              [
                "test_transform_invocations_on_sample",
                "0"
              ],
              [
                "test_x_for_spln",
                "6"
              ],
              [
                "test_tlog_inv",
                "1"
              ],
              [
                "test_hlog_on_fc_measurement",
                "1"
              ],
              [
                "test_tlog",
                "3"
              ],
              [
                "test_hlog",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                [
                  "output",
                  "test_cases"
                ]
              ],
              [
                "test_hlog_inv",
                [
                  "result",
                  "d",
                  "expected"
                ]
              ],
              [
                "test_transform_invocations_on_sample",
                [
                  "test_cases"
                ]
              ],
              [
                "test_x_for_spln",
                [
                  "result",
                  "expected",
                  "nx"
                ]
              ],
              [
                "test_tlog_inv",
                [
                  "result",
                  "th",
                  "expected"
                ]
              ],
              [
                "test_hlog_on_fc_measurement",
                [
                  "fc_measurement",
                  "data",
                  "correct_output"
                ]
              ],
              [
                "test_tlog",
                [
                  "result",
                  "r",
                  "th",
                  "d"
                ]
              ],
              [
                "test_hlog",
                [
                  "hlneg",
                  "tlpos_large",
                  "d",
                  "tlpos",
                  "i",
                  "hlpos",
                  "hlpos_large",
                  "transformation",
                  "hlpos10",
                  "result2",
                  "result1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                []
              ],
              [
                "test_hlog_inv",
                []
              ],
              [
                "test_transform_invocations_on_sample",
                [
                  "self.fc_plate",
                  "self.fc_measurement"
                ]
              ],
              [
                "test_x_for_spln",
                []
              ],
              [
                "test_tlog_inv",
                []
              ],
              [
                "test_hlog_on_fc_measurement",
                [
                  "self.fc_measurement"
                ]
              ],
              [
                "test_tlog",
                []
              ],
              [
                "test_hlog",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4191121656424231,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hlog_on_fc_measurement",
                  "test_transform_invocations_on_sample",
                  0.25155021757438906
                ],
                [
                  "test_hlog",
                  "test_hlog_inv",
                  0.6143414839787381
                ],
                [
                  "test_x_for_spln",
                  "test_hlog_inv",
                  0.4349759737212344
                ],
                [
                  "test_tlog_inv",
                  "test_hlog",
                  0.6080403791133918
                ],
                [
                  "test_hlog_inv",
                  "test_transform_invocations_on_sample",
                  0.09883693657685838
                ],
                [
                  "test_tlog",
                  "test_hlog_on_fc_measurement",
                  0.39872377049944024
                ],
                [
                  "test_tlog",
                  "test_x_for_spln_edge_cases",
                  0.5629734706635362
                ],
                [
                  "test_tlog",
                  "test_hlog",
                  0.6632333283791141
                ],
                [
                  "test_x_for_spln",
                  "test_transform_invocations_on_sample",
                  0.2526858674574928
                ],
                [
                  "test_x_for_spln_edge_cases",
                  "test_hlog",
                  0.4122800149032012
                ],
                [
                  "test_tlog",
                  "test_hlog_inv",
                  0.432822969376157
                ],
                [
                  "test_tlog",
                  "test_tlog_inv",
                  0.6311009012805349
                ],
                [
                  "test_tlog_inv",
                  "test_hlog_inv",
                  0.5361109642475096
                ],
                [
                  "test_x_for_spln_edge_cases",
                  "test_transform_invocations_on_sample",
                  0.3387057602485984
                ],
                [
                  "test_x_for_spln_edge_cases",
                  "test_hlog_on_fc_measurement",
                  0.7560422748756157
                ],
                [
                  "test_hlog",
                  "test_hlog_on_fc_measurement",
                  0.3159755998651556
                ],
                [
                  "test_x_for_spln_edge_cases",
                  "test_hlog_inv",
                  0.1146544254965324
                ],
                [
                  "test_x_for_spln",
                  "test_hlog_on_fc_measurement",
                  0.32799195631029626
                ],
                [
                  "test_tlog_inv",
                  "test_x_for_spln",
                  0.6391823369914418
                ],
                [
                  "test_x_for_spln",
                  "test_x_for_spln_edge_cases",
                  0.5108129947325599
                ],
                [
                  "test_tlog_inv",
                  "test_x_for_spln_edge_cases",
                  0.33843279384274155
                ],
                [
                  "test_tlog",
                  "test_x_for_spln",
                  0.6520755100680238
                ],
                [
                  "test_tlog_inv",
                  "test_hlog_on_fc_measurement",
                  0.2683281572999747
                ],
                [
                  "test_hlog",
                  "test_transform_invocations_on_sample",
                  0.27063606642891935
                ],
                [
                  "test_tlog",
                  "test_transform_invocations_on_sample",
                  0.3064365842246286
                ],
                [
                  "test_tlog_inv",
                  "test_transform_invocations_on_sample",
                  0.21660850899114392
                ],
                [
                  "test_x_for_spln",
                  "test_hlog",
                  0.6223587421632018
                ],
                [
                  "test_hlog_inv",
                  "test_hlog_on_fc_measurement",
                  0.159222648677416
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_x_for_spln_edge_cases",
                "false"
              ],
              [
                "test_hlog_inv",
                "false"
              ],
              [
                "test_transform_invocations_on_sample",
                "false"
              ],
              [
                "test_x_for_spln",
                "false"
              ],
              [
                "test_tlog_inv",
                "false"
              ],
              [
                "test_hlog_on_fc_measurement",
                "false"
              ],
              [
                "test_tlog",
                "false"
              ],
              [
                "test_hlog",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  }
]