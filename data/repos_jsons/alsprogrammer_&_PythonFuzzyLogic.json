[
  {
    "name": "tests_\u0026_defuzzify_test.py",
    "testCases": [
      {
        "name": "TestStepGenerator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_step_generator_many",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_step_generator_one",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_step_generator_many1",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_step_generator_many",
                  "[]"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "[]"
                ],
                [
                  "test_step_generator_one",
                  "[]"
                ],
                [
                  "test_step_generator_many1",
                  "[]"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "[]"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_step_generator_many",
                  "true"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_one",
                  "true"
                ],
                [
                  "test_step_generator_many1",
                  "true"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_step_generator_many",
                  "false"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_one",
                  "false"
                ],
                [
                  "test_step_generator_many1",
                  "false"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_step_generator_many",
                  "false"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_one",
                  "false"
                ],
                [
                  "test_step_generator_many1",
                  "false"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_step_generator_many",
                  "false"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_one",
                  "false"
                ],
                [
                  "test_step_generator_many1",
                  "false"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "false"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                "false"
              ],
              [
                "test_step_generator_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_one",
                "false"
              ],
              [
                "test_step_generator_many1",
                "false"
              ],
              [
                "test_step_gen_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_start_stop_exception",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                "false"
              ],
              [
                "test_step_generator_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_one",
                "false"
              ],
              [
                "test_step_generator_many1",
                "false"
              ],
              [
                "test_step_gen_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_start_stop_exception",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                []
              ],
              [
                "test_step_generator_nosteps_exception",
                []
              ],
              [
                "test_step_generator_one",
                []
              ],
              [
                "test_step_generator_many1",
                []
              ],
              [
                "test_step_gen_nosteps_exception",
                []
              ],
              [
                "test_step_generator_start_stop_exception",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                "false"
              ],
              [
                "test_step_generator_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_one",
                "false"
              ],
              [
                "test_step_generator_many1",
                "false"
              ],
              [
                "test_step_gen_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_start_stop_exception",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_step_generator_many",
                "true"
              ],
              [
                "test_step_generator_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_one",
                "true"
              ],
              [
                "test_step_generator_many1",
                "true"
              ],
              [
                "test_step_gen_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_start_stop_exception",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_step_generator_many",
                  "0"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "0"
                ],
                [
                  "test_step_generator_one",
                  "0"
                ],
                [
                  "test_step_generator_many1",
                  "0"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "0"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_step_generator_many",
                  "0"
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "0"
                ],
                [
                  "test_step_generator_one",
                  "0"
                ],
                [
                  "test_step_generator_many1",
                  "0"
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "0"
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                "false"
              ],
              [
                "test_step_generator_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_one",
                "false"
              ],
              [
                "test_step_generator_many1",
                "false"
              ],
              [
                "test_step_gen_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_start_stop_exception",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                "false"
              ],
              [
                "test_step_generator_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_one",
                "false"
              ],
              [
                "test_step_generator_many1",
                "false"
              ],
              [
                "test_step_gen_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_start_stop_exception",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                "1"
              ],
              [
                "test_step_generator_nosteps_exception",
                "2"
              ],
              [
                "test_step_generator_one",
                "1"
              ],
              [
                "test_step_generator_many1",
                "1"
              ],
              [
                "test_step_gen_nosteps_exception",
                "2"
              ],
              [
                "test_step_generator_start_stop_exception",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                [
                  "sum"
                ]
              ],
              [
                "test_step_generator_nosteps_exception",
                [
                  "sum"
                ]
              ],
              [
                "test_step_generator_one",
                [
                  "sum"
                ]
              ],
              [
                "test_step_generator_many1",
                [
                  "sum"
                ]
              ],
              [
                "test_step_gen_nosteps_exception",
                [
                  "sum"
                ]
              ],
              [
                "test_step_generator_start_stop_exception",
                [
                  "sum"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                []
              ],
              [
                "test_step_generator_nosteps_exception",
                []
              ],
              [
                "test_step_generator_one",
                []
              ],
              [
                "test_step_generator_many1",
                []
              ],
              [
                "test_step_gen_nosteps_exception",
                []
              ],
              [
                "test_step_generator_start_stop_exception",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8854706081367226,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_step_gen_nosteps_exception",
                  "test_step_generator_nosteps_exception",
                  0.9879518072289156
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "test_step_generator_many",
                  0.8238415256818212
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "test_step_generator_many1",
                  0.8058127442654063
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "test_step_generator_start_stop_exception",
                  0.9700772721497398
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "test_step_generator_one",
                  0.8365160106923107
                ],
                [
                  "test_step_gen_nosteps_exception",
                  "test_step_generator_one",
                  0.8238415256818212
                ],
                [
                  "test_step_generator_many",
                  "test_step_generator_many1",
                  0.9669086206574818
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "test_step_generator_many",
                  0.8365160106923107
                ],
                [
                  "test_step_generator_one",
                  "test_step_generator_many1",
                  0.9669086206574818
                ],
                [
                  "test_step_generator_one",
                  "test_step_generator_many",
                  0.9866666666666665
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "test_step_generator_many",
                  0.8315218406202999
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "test_step_generator_many1",
                  0.813517533272858
                ],
                [
                  "test_step_generator_nosteps_exception",
                  "test_step_generator_many1",
                  0.8184035683945533
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "test_step_generator_one",
                  0.8315218406202999
                ],
                [
                  "test_step_generator_start_stop_exception",
                  "test_step_generator_nosteps_exception",
                  0.9820535347688724
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_step_generator_many",
                "false"
              ],
              [
                "test_step_generator_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_one",
                "false"
              ],
              [
                "test_step_generator_many1",
                "false"
              ],
              [
                "test_step_gen_nosteps_exception",
                "false"
              ],
              [
                "test_step_generator_start_stop_exception",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "TestPrecGenerator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_prec_generator_nosteps_exception",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_prec_generator_many",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_prec_generator_one",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_prec_generator_nosteps_exception",
                  "[]"
                ],
                [
                  "test_prec_generator_many",
                  "[]"
                ],
                [
                  "test_prec_generator_one",
                  "[]"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_prec_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_prec_generator_many",
                  "true"
                ],
                [
                  "test_prec_generator_one",
                  "true"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_prec_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_prec_generator_many",
                  "false"
                ],
                [
                  "test_prec_generator_one",
                  "false"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_prec_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_prec_generator_many",
                  "false"
                ],
                [
                  "test_prec_generator_one",
                  "false"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_prec_generator_nosteps_exception",
                  "false"
                ],
                [
                  "test_prec_generator_many",
                  "false"
                ],
                [
                  "test_prec_generator_one",
                  "false"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "false"
              ],
              [
                "test_prec_generator_many",
                "false"
              ],
              [
                "test_prec_generator_one",
                "false"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "false"
              ],
              [
                "test_prec_generator_many",
                "false"
              ],
              [
                "test_prec_generator_one",
                "false"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                []
              ],
              [
                "test_prec_generator_many",
                []
              ],
              [
                "test_prec_generator_one",
                []
              ],
              [
                "test_prec_gen_nosteps_exception",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "false"
              ],
              [
                "test_prec_generator_many",
                "false"
              ],
              [
                "test_prec_generator_one",
                "false"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "false"
              ],
              [
                "test_prec_generator_many",
                "true"
              ],
              [
                "test_prec_generator_one",
                "true"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_prec_generator_nosteps_exception",
                  "0"
                ],
                [
                  "test_prec_generator_many",
                  "0"
                ],
                [
                  "test_prec_generator_one",
                  "0"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_prec_generator_nosteps_exception",
                  "0"
                ],
                [
                  "test_prec_generator_many",
                  "0"
                ],
                [
                  "test_prec_generator_one",
                  "0"
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "false"
              ],
              [
                "test_prec_generator_many",
                "false"
              ],
              [
                "test_prec_generator_one",
                "false"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "false"
              ],
              [
                "test_prec_generator_many",
                "false"
              ],
              [
                "test_prec_generator_one",
                "false"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "2"
              ],
              [
                "test_prec_generator_many",
                "1"
              ],
              [
                "test_prec_generator_one",
                "1"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                [
                  "sum"
                ]
              ],
              [
                "test_prec_generator_many",
                [
                  "sum"
                ]
              ],
              [
                "test_prec_generator_one",
                [
                  "sum"
                ]
              ],
              [
                "test_prec_gen_nosteps_exception",
                [
                  "sum"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                []
              ],
              [
                "test_prec_generator_many",
                []
              ],
              [
                "test_prec_generator_one",
                []
              ],
              [
                "test_prec_gen_nosteps_exception",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8825555911073076,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_prec_generator_nosteps_exception",
                  "test_prec_generator_one",
                  0.8365160106923107
                ],
                [
                  "test_prec_generator_nosteps_exception",
                  "test_prec_generator_many",
                  0.8365160106923107
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "test_prec_generator_many",
                  0.8238415256818212
                ],
                [
                  "test_prec_generator_one",
                  "test_prec_generator_many",
                  0.9866666666666665
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "test_prec_generator_one",
                  0.8238415256818212
                ],
                [
                  "test_prec_gen_nosteps_exception",
                  "test_prec_generator_nosteps_exception",
                  0.9879518072289156
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_prec_generator_nosteps_exception",
                "false"
              ],
              [
                "test_prec_generator_many",
                "false"
              ],
              [
                "test_prec_generator_one",
                "false"
              ],
              [
                "test_prec_gen_nosteps_exception",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestCOG",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_COG_one_out",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_COG_or_out",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_COG_one_out",
                  "[]"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "[]"
                ],
                [
                  "test_COG_or_out",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_COG_one_out",
                  "false"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "false"
                ],
                [
                  "test_COG_or_out",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_COG_one_out",
                  "false"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "false"
                ],
                [
                  "test_COG_or_out",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_COG_one_out",
                  "false"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "false"
                ],
                [
                  "test_COG_or_out",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_COG_one_out",
                  "false"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "false"
                ],
                [
                  "test_COG_or_out",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                "false"
              ],
              [
                "test_COG_two_rules_one_var",
                "false"
              ],
              [
                "test_COG_or_out",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                "false"
              ],
              [
                "test_COG_two_rules_one_var",
                "false"
              ],
              [
                "test_COG_or_out",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                []
              ],
              [
                "test_COG_two_rules_one_var",
                []
              ],
              [
                "test_COG_or_out",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                "false"
              ],
              [
                "test_COG_two_rules_one_var",
                "false"
              ],
              [
                "test_COG_or_out",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_COG_one_out",
                "true"
              ],
              [
                "test_COG_two_rules_one_var",
                "true"
              ],
              [
                "test_COG_or_out",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_COG_one_out",
                  "0"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "0"
                ],
                [
                  "test_COG_or_out",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_COG_one_out",
                  "0"
                ],
                [
                  "test_COG_two_rules_one_var",
                  "0"
                ],
                [
                  "test_COG_or_out",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                "false"
              ],
              [
                "test_COG_two_rules_one_var",
                "false"
              ],
              [
                "test_COG_or_out",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                "false"
              ],
              [
                "test_COG_two_rules_one_var",
                "false"
              ],
              [
                "test_COG_or_out",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                "2"
              ],
              [
                "test_COG_two_rules_one_var",
                "2"
              ],
              [
                "test_COG_or_out",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_COG_one_out",
                [
                  "res",
                  "in_fuzz_var",
                  "out_fuzz_var",
                  "in_fuzz_memb",
                  "out_fuzz_memb",
                  "fuzz_rule",
                  "in_fuzz_term"
                ]
              ],
              [
                "test_COG_two_rules_one_var",
                [
                  "in_fuzz_memb1",
                  "in_fuzz_memb2",
                  "in_fuzz_term2",
                  "out_fuzz_memb2",
                  "res",
                  "out_fuzz_memb1",
                  "in_fuzz_var",
                  "out_fuzz_var",
                  "fuzz_rule2",
                  "in_fuzz_term1",
                  "fuzz_rule1"
                ]
              ],
              [
                "test_COG_or_out",
                [
                  "out_fuzz_memb2",
                  "res",
                  "out_fuzz_memb1",
                  "in_fuzz_var",
                  "out_fuzz_var",
                  "in_fuzz_memb",
                  "fuzz_rule",
                  "in_fuzz_term"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                []
              ],
              [
                "test_COG_two_rules_one_var",
                []
              ],
              [
                "test_COG_or_out",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9809745424505124,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_COG_one_out",
                  "test_COG_or_out",
                  0.9862028968960465
                ],
                [
                  "test_COG_or_out",
                  "test_COG_two_rules_one_var",
                  0.9846687067673358
                ],
                [
                  "test_COG_one_out",
                  "test_COG_two_rules_one_var",
                  0.9720520236881554
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_COG_one_out",
                "false"
              ],
              [
                "test_COG_two_rules_one_var",
                "false"
              ],
              [
                "test_COG_or_out",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_variables_test.py",
    "testCases": [
      {
        "name": "FuzzTermTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_terms_combination",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_term_is_callable",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_and_term1",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_or_term1",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_and_term2",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_or_term2",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_terms_combination",
                  "[]"
                ],
                [
                  "test_term_is_callable",
                  "[]"
                ],
                [
                  "test_and_term1",
                  "[]"
                ],
                [
                  "test_or_term1",
                  "[]"
                ],
                [
                  "test_and_term2",
                  "[]"
                ],
                [
                  "test_or_term2",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_terms_combination",
                  "false"
                ],
                [
                  "test_term_is_callable",
                  "false"
                ],
                [
                  "test_and_term1",
                  "true"
                ],
                [
                  "test_or_term1",
                  "true"
                ],
                [
                  "test_and_term2",
                  "true"
                ],
                [
                  "test_or_term2",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_terms_combination",
                  "false"
                ],
                [
                  "test_term_is_callable",
                  "false"
                ],
                [
                  "test_and_term1",
                  "false"
                ],
                [
                  "test_or_term1",
                  "false"
                ],
                [
                  "test_and_term2",
                  "false"
                ],
                [
                  "test_or_term2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_terms_combination",
                  "false"
                ],
                [
                  "test_term_is_callable",
                  "true"
                ],
                [
                  "test_and_term1",
                  "false"
                ],
                [
                  "test_or_term1",
                  "false"
                ],
                [
                  "test_and_term2",
                  "false"
                ],
                [
                  "test_or_term2",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_terms_combination",
                  "false"
                ],
                [
                  "test_term_is_callable",
                  "false"
                ],
                [
                  "test_and_term1",
                  "false"
                ],
                [
                  "test_or_term1",
                  "false"
                ],
                [
                  "test_and_term2",
                  "false"
                ],
                [
                  "test_or_term2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                "false"
              ],
              [
                "test_term_is_callable",
                "false"
              ],
              [
                "test_and_term1",
                "false"
              ],
              [
                "test_or_term1",
                "false"
              ],
              [
                "test_and_term2",
                "false"
              ],
              [
                "test_or_term2",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                "false"
              ],
              [
                "test_term_is_callable",
                "false"
              ],
              [
                "test_and_term1",
                "false"
              ],
              [
                "test_or_term1",
                "false"
              ],
              [
                "test_and_term2",
                "false"
              ],
              [
                "test_or_term2",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                []
              ],
              [
                "test_term_is_callable",
                []
              ],
              [
                "test_and_term1",
                []
              ],
              [
                "test_or_term1",
                []
              ],
              [
                "test_and_term2",
                []
              ],
              [
                "test_or_term2",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                "false"
              ],
              [
                "test_term_is_callable",
                "false"
              ],
              [
                "test_and_term1",
                "false"
              ],
              [
                "test_or_term1",
                "false"
              ],
              [
                "test_and_term2",
                "false"
              ],
              [
                "test_or_term2",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_terms_combination",
                "false"
              ],
              [
                "test_term_is_callable",
                "true"
              ],
              [
                "test_and_term1",
                "true"
              ],
              [
                "test_or_term1",
                "false"
              ],
              [
                "test_and_term2",
                "false"
              ],
              [
                "test_or_term2",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_terms_combination",
                  "0"
                ],
                [
                  "test_term_is_callable",
                  "0"
                ],
                [
                  "test_and_term1",
                  "0"
                ],
                [
                  "test_or_term1",
                  "0"
                ],
                [
                  "test_and_term2",
                  "0"
                ],
                [
                  "test_or_term2",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_terms_combination",
                  "0"
                ],
                [
                  "test_term_is_callable",
                  "0"
                ],
                [
                  "test_and_term1",
                  "0"
                ],
                [
                  "test_or_term1",
                  "0"
                ],
                [
                  "test_and_term2",
                  "0"
                ],
                [
                  "test_or_term2",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                "false"
              ],
              [
                "test_term_is_callable",
                "false"
              ],
              [
                "test_and_term1",
                "false"
              ],
              [
                "test_or_term1",
                "false"
              ],
              [
                "test_and_term2",
                "false"
              ],
              [
                "test_or_term2",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                "false"
              ],
              [
                "test_term_is_callable",
                "false"
              ],
              [
                "test_and_term1",
                "false"
              ],
              [
                "test_or_term1",
                "false"
              ],
              [
                "test_and_term2",
                "false"
              ],
              [
                "test_or_term2",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                "1"
              ],
              [
                "test_term_is_callable",
                "3"
              ],
              [
                "test_and_term1",
                "1"
              ],
              [
                "test_or_term1",
                "1"
              ],
              [
                "test_and_term2",
                "1"
              ],
              [
                "test_or_term2",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                [
                  "limits2",
                  "limits1",
                  "fuzzy_var",
                  "trifunc2",
                  "fuzzy_term1",
                  "trifunc1",
                  "fuzzy_term2",
                  "fuzzy_term"
                ]
              ],
              [
                "test_term_is_callable",
                [
                  "fuzzy_var",
                  "trifunc",
                  "fuzzy_term",
                  "limits"
                ]
              ],
              [
                "test_and_term1",
                [
                  "limits2",
                  "limits1",
                  "fuzzy_var",
                  "trifunc2",
                  "fuzzy_term1",
                  "trifunc1",
                  "fuzzy_term2",
                  "fuzzy_term"
                ]
              ],
              [
                "test_or_term1",
                [
                  "limits2",
                  "limits1",
                  "fuzzy_var",
                  "trifunc2",
                  "fuzzy_term1",
                  "trifunc1",
                  "fuzzy_term2",
                  "fuzzy_term"
                ]
              ],
              [
                "test_and_term2",
                [
                  "limits2",
                  "limits1",
                  "fuzzy_var",
                  "trifunc2",
                  "fuzzy_term1",
                  "trifunc1",
                  "fuzzy_term2",
                  "fuzzy_term"
                ]
              ],
              [
                "test_or_term2",
                [
                  "limits2",
                  "limits1",
                  "fuzzy_var",
                  "trifunc2",
                  "fuzzy_term1",
                  "trifunc1",
                  "fuzzy_term2",
                  "fuzzy_term"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                []
              ],
              [
                "test_term_is_callable",
                []
              ],
              [
                "test_and_term1",
                []
              ],
              [
                "test_or_term1",
                []
              ],
              [
                "test_and_term2",
                []
              ],
              [
                "test_or_term2",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9199359379927823,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_terms_combination",
                  "test_and_term2",
                  0.9775661764767095
                ],
                [
                  "test_and_term2",
                  "test_or_term2",
                  0.9952229299363057
                ],
                [
                  "test_term_is_callable",
                  "test_or_term1",
                  0.7889234800665128
                ],
                [
                  "test_and_term2",
                  "test_or_term1",
                  0.9937436989878887
                ],
                [
                  "test_term_is_callable",
                  "test_terms_combination",
                  0.7649711824135456
                ],
                [
                  "test_and_term1",
                  "test_or_term1",
                  0.9922178732601412
                ],
                [
                  "test_terms_combination",
                  "test_or_term2",
                  0.9759120881916389
                ],
                [
                  "test_term_is_callable",
                  "test_and_term2",
                  0.7884922264339344
                ],
                [
                  "test_terms_combination",
                  "test_or_term1",
                  0.9747323185282744
                ],
                [
                  "test_and_term1",
                  "test_or_term2",
                  0.9920684911614548
                ],
                [
                  "test_term_is_callable",
                  "test_or_term2",
                  0.7884922264339344
                ],
                [
                  "test_term_is_callable",
                  "test_and_term1",
                  0.7934080658316618
                ],
                [
                  "test_terms_combination",
                  "test_and_term1",
                  0.9794142387552888
                ],
                [
                  "test_and_term1",
                  "test_and_term2",
                  0.9952431103331715
                ],
                [
                  "test_or_term1",
                  "test_or_term2",
                  0.9986309630812719
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_terms_combination",
                "false"
              ],
              [
                "test_term_is_callable",
                "false"
              ],
              [
                "test_and_term1",
                "false"
              ],
              [
                "test_or_term1",
                "false"
              ],
              [
                "test_and_term2",
                "false"
              ],
              [
                "test_or_term2",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "FuzzyVar",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_term_generation",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_term_generation",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_term_generation",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_term_generation",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_term_generation",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_term_generation",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_term_generation",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_term_generation",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                [
                  "limits2",
                  "limits1",
                  "fuzzy_var",
                  "trifunc2",
                  "trifunc1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_term_generation",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestFuzzyRule",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_rule_creation_one_anrecedent",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_rule_call",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_rule_creation_one_anrecedent",
                  "[]"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "[]"
                ],
                [
                  "test_rule_call",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_rule_creation_one_anrecedent",
                  "false"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "false"
                ],
                [
                  "test_rule_call",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_rule_creation_one_anrecedent",
                  "false"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "false"
                ],
                [
                  "test_rule_call",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_rule_creation_one_anrecedent",
                  "false"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "false"
                ],
                [
                  "test_rule_call",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_rule_creation_one_anrecedent",
                  "false"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "false"
                ],
                [
                  "test_rule_call",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "false"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "false"
              ],
              [
                "test_rule_call",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "false"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "false"
              ],
              [
                "test_rule_call",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                []
              ],
              [
                "test_rule_creation_two_anrecedents",
                []
              ],
              [
                "test_rule_call",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "false"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "false"
              ],
              [
                "test_rule_call",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "true"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "true"
              ],
              [
                "test_rule_call",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_rule_creation_one_anrecedent",
                  "0"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "0"
                ],
                [
                  "test_rule_call",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_rule_creation_one_anrecedent",
                  "0"
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "0"
                ],
                [
                  "test_rule_call",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "false"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "false"
              ],
              [
                "test_rule_call",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "false"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "false"
              ],
              [
                "test_rule_call",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "3"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "1"
              ],
              [
                "test_rule_call",
                "20"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                [
                  "output_fuzzy_var",
                  "input_fuzzy_var",
                  "input_membership_func",
                  "input_fuzzy_term",
                  "fuzzy_rule",
                  "output_membership_func"
                ]
              ],
              [
                "test_rule_creation_two_anrecedents",
                [
                  "input_fuzzy_term2",
                  "output_fuzzy_var",
                  "input_fuzzy_var",
                  "input_fuzzy_term1",
                  "input_membership_func1",
                  "fuzzy_rule",
                  "output_membership_func",
                  "input_membership_func2"
                ]
              ],
              [
                "test_rule_call",
                [
                  "output_fuzzy_var",
                  "input_fuzzy_var",
                  "input_membership_func",
                  "input_fuzzy_term",
                  "fuzzy_rule",
                  "output_membership_func"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                []
              ],
              [
                "test_rule_creation_two_anrecedents",
                []
              ],
              [
                "test_rule_call",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7923639349676163,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_rule_creation_one_anrecedent",
                  "test_rule_creation_two_anrecedents",
                  0.9556082019276556
                ],
                [
                  "test_rule_creation_two_anrecedents",
                  "test_rule_call",
                  0.6783753740256533
                ],
                [
                  "test_rule_creation_one_anrecedent",
                  "test_rule_call",
                  0.7431082289495399
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_rule_creation_one_anrecedent",
                "false"
              ],
              [
                "test_rule_creation_two_anrecedents",
                "false"
              ],
              [
                "test_rule_call",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_Implication_test.py",
    "testCases": [
      {
        "name": "MembershipFunctionsTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_larsen",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mamdani",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_larsen",
                  "[]"
                ],
                [
                  "test_mamdani",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_larsen",
                  "true"
                ],
                [
                  "test_mamdani",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_larsen",
                  "false"
                ],
                [
                  "test_mamdani",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_larsen",
                  "false"
                ],
                [
                  "test_mamdani",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_larsen",
                  "false"
                ],
                [
                  "test_mamdani",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "false"
              ],
              [
                "test_mamdani",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "false"
              ],
              [
                "test_mamdani",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                []
              ],
              [
                "test_mamdani",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "false"
              ],
              [
                "test_mamdani",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "false"
              ],
              [
                "test_mamdani",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_larsen",
                  "0"
                ],
                [
                  "test_mamdani",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_larsen",
                  "0"
                ],
                [
                  "test_mamdani",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "false"
              ],
              [
                "test_mamdani",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "false"
              ],
              [
                "test_mamdani",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "1"
              ],
              [
                "test_mamdani",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                [
                  "vals"
                ]
              ],
              [
                "test_mamdani",
                [
                  "vals"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                []
              ],
              [
                "test_mamdani",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9561089365214079,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_larsen",
                  "test_mamdani",
                  0.9561089365214079
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_larsen",
                "false"
              ],
              [
                "test_mamdani",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_membership_functions_test.py",
    "testCases": [
      {
        "name": "MembershipFunctionsTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_normal_trapecfunc",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_skewed_left_trifunc",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_skewed_right_trifunc",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_normal_trifunc",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_normal_trapecfunc",
                  "[]"
                ],
                [
                  "test_skewed_left_trifunc",
                  "[]"
                ],
                [
                  "test_skewed_right_trifunc",
                  "[]"
                ],
                [
                  "test_normal_trifunc",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_normal_trapecfunc",
                  "true"
                ],
                [
                  "test_skewed_left_trifunc",
                  "true"
                ],
                [
                  "test_skewed_right_trifunc",
                  "true"
                ],
                [
                  "test_normal_trifunc",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_normal_trapecfunc",
                  "false"
                ],
                [
                  "test_skewed_left_trifunc",
                  "false"
                ],
                [
                  "test_skewed_right_trifunc",
                  "false"
                ],
                [
                  "test_normal_trifunc",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_normal_trapecfunc",
                  "true"
                ],
                [
                  "test_skewed_left_trifunc",
                  "true"
                ],
                [
                  "test_skewed_right_trifunc",
                  "true"
                ],
                [
                  "test_normal_trifunc",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_normal_trapecfunc",
                  "false"
                ],
                [
                  "test_skewed_left_trifunc",
                  "false"
                ],
                [
                  "test_skewed_right_trifunc",
                  "false"
                ],
                [
                  "test_normal_trifunc",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                "false"
              ],
              [
                "test_skewed_left_trifunc",
                "false"
              ],
              [
                "test_skewed_right_trifunc",
                "false"
              ],
              [
                "test_normal_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                "false"
              ],
              [
                "test_skewed_left_trifunc",
                "false"
              ],
              [
                "test_skewed_right_trifunc",
                "false"
              ],
              [
                "test_normal_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                []
              ],
              [
                "test_skewed_left_trifunc",
                []
              ],
              [
                "test_skewed_right_trifunc",
                []
              ],
              [
                "test_normal_trifunc",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                "false"
              ],
              [
                "test_skewed_left_trifunc",
                "false"
              ],
              [
                "test_skewed_right_trifunc",
                "false"
              ],
              [
                "test_normal_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_normal_trapecfunc",
                "true"
              ],
              [
                "test_skewed_left_trifunc",
                "true"
              ],
              [
                "test_skewed_right_trifunc",
                "true"
              ],
              [
                "test_normal_trifunc",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_normal_trapecfunc",
                  "0"
                ],
                [
                  "test_skewed_left_trifunc",
                  "0"
                ],
                [
                  "test_skewed_right_trifunc",
                  "0"
                ],
                [
                  "test_normal_trifunc",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_normal_trapecfunc",
                  "0"
                ],
                [
                  "test_skewed_left_trifunc",
                  "0"
                ],
                [
                  "test_skewed_right_trifunc",
                  "0"
                ],
                [
                  "test_normal_trifunc",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                "false"
              ],
              [
                "test_skewed_left_trifunc",
                "false"
              ],
              [
                "test_skewed_right_trifunc",
                "false"
              ],
              [
                "test_normal_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                "false"
              ],
              [
                "test_skewed_left_trifunc",
                "false"
              ],
              [
                "test_skewed_right_trifunc",
                "false"
              ],
              [
                "test_normal_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                "5"
              ],
              [
                "test_skewed_left_trifunc",
                "4"
              ],
              [
                "test_skewed_right_trifunc",
                "3"
              ],
              [
                "test_normal_trifunc",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                [
                  "func",
                  "f",
                  "x1",
                  "step",
                  "limits"
                ]
              ],
              [
                "test_skewed_left_trifunc",
                [
                  "func",
                  "left",
                  "center",
                  "x1",
                  "step",
                  "right"
                ]
              ],
              [
                "test_skewed_right_trifunc",
                [
                  "func",
                  "left",
                  "center",
                  "x1",
                  "step",
                  "right"
                ]
              ],
              [
                "test_normal_trifunc",
                [
                  "func",
                  "x1",
                  "step",
                  "limits"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                []
              ],
              [
                "test_skewed_left_trifunc",
                []
              ],
              [
                "test_skewed_right_trifunc",
                []
              ],
              [
                "test_normal_trifunc",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9153078674581184,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_normal_trifunc",
                  "test_skewed_right_trifunc",
                  0.935968363232283
                ],
                [
                  "test_normal_trifunc",
                  "test_skewed_left_trifunc",
                  0.9478076649693498
                ],
                [
                  "test_skewed_left_trifunc",
                  "test_skewed_right_trifunc",
                  0.9884323319052025
                ],
                [
                  "test_normal_trapecfunc",
                  "test_skewed_right_trifunc",
                  0.8551676033358189
                ],
                [
                  "test_normal_trifunc",
                  "test_normal_trapecfunc",
                  0.9105634240678131
                ],
                [
                  "test_normal_trapecfunc",
                  "test_skewed_left_trifunc",
                  0.8539078172382427
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_normal_trapecfunc",
                "false"
              ],
              [
                "test_skewed_left_trifunc",
                "false"
              ],
              [
                "test_skewed_right_trifunc",
                "false"
              ],
              [
                "test_normal_trifunc",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "AndOrMulMembershipFunctionsTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_or_not_intersected_trifunc",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_and_intersected_trifunc",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_or_intersected_trifunc",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_or_not_intersected_trifunc",
                  "[]"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "[]"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "[]"
                ],
                [
                  "test_and_intersected_trifunc",
                  "[]"
                ],
                [
                  "test_or_intersected_trifunc",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_or_not_intersected_trifunc",
                  "true"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "true"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "true"
                ],
                [
                  "test_and_intersected_trifunc",
                  "true"
                ],
                [
                  "test_or_intersected_trifunc",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_or_not_intersected_trifunc",
                  "false"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "false"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "false"
                ],
                [
                  "test_and_intersected_trifunc",
                  "false"
                ],
                [
                  "test_or_intersected_trifunc",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_or_not_intersected_trifunc",
                  "false"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "false"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "false"
                ],
                [
                  "test_and_intersected_trifunc",
                  "false"
                ],
                [
                  "test_or_intersected_trifunc",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_or_not_intersected_trifunc",
                  "false"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "false"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "false"
                ],
                [
                  "test_and_intersected_trifunc",
                  "false"
                ],
                [
                  "test_or_intersected_trifunc",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "false"
              ],
              [
                "test_mul_intersected_trifunc",
                "false"
              ],
              [
                "test_and_not_intersected_trifunc",
                "false"
              ],
              [
                "test_and_intersected_trifunc",
                "false"
              ],
              [
                "test_or_intersected_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "false"
              ],
              [
                "test_mul_intersected_trifunc",
                "false"
              ],
              [
                "test_and_not_intersected_trifunc",
                "false"
              ],
              [
                "test_and_intersected_trifunc",
                "false"
              ],
              [
                "test_or_intersected_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                []
              ],
              [
                "test_mul_intersected_trifunc",
                []
              ],
              [
                "test_and_not_intersected_trifunc",
                []
              ],
              [
                "test_and_intersected_trifunc",
                []
              ],
              [
                "test_or_intersected_trifunc",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "false"
              ],
              [
                "test_mul_intersected_trifunc",
                "false"
              ],
              [
                "test_and_not_intersected_trifunc",
                "false"
              ],
              [
                "test_and_intersected_trifunc",
                "false"
              ],
              [
                "test_or_intersected_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "false"
              ],
              [
                "test_mul_intersected_trifunc",
                "false"
              ],
              [
                "test_and_not_intersected_trifunc",
                "true"
              ],
              [
                "test_and_intersected_trifunc",
                "false"
              ],
              [
                "test_or_intersected_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_or_not_intersected_trifunc",
                  "0"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "0"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "0"
                ],
                [
                  "test_and_intersected_trifunc",
                  "0"
                ],
                [
                  "test_or_intersected_trifunc",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_or_not_intersected_trifunc",
                  "0"
                ],
                [
                  "test_mul_intersected_trifunc",
                  "0"
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "0"
                ],
                [
                  "test_and_intersected_trifunc",
                  "0"
                ],
                [
                  "test_or_intersected_trifunc",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "false"
              ],
              [
                "test_mul_intersected_trifunc",
                "false"
              ],
              [
                "test_and_not_intersected_trifunc",
                "false"
              ],
              [
                "test_and_intersected_trifunc",
                "false"
              ],
              [
                "test_or_intersected_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "false"
              ],
              [
                "test_mul_intersected_trifunc",
                "false"
              ],
              [
                "test_and_not_intersected_trifunc",
                "false"
              ],
              [
                "test_and_intersected_trifunc",
                "false"
              ],
              [
                "test_or_intersected_trifunc",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "1"
              ],
              [
                "test_mul_intersected_trifunc",
                "1"
              ],
              [
                "test_and_not_intersected_trifunc",
                "1"
              ],
              [
                "test_and_intersected_trifunc",
                "1"
              ],
              [
                "test_or_intersected_trifunc",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                [
                  "f",
                  "left2",
                  "left1",
                  "f1",
                  "f2",
                  "func",
                  "right1",
                  "right2",
                  "func1",
                  "x1",
                  "center1",
                  "step",
                  "func2",
                  "center2"
                ]
              ],
              [
                "test_mul_intersected_trifunc",
                [
                  "f",
                  "left2",
                  "left1",
                  "f1",
                  "f2",
                  "func",
                  "right1",
                  "right2",
                  "func1",
                  "x1",
                  "center1",
                  "step",
                  "func2",
                  "center2"
                ]
              ],
              [
                "test_and_not_intersected_trifunc",
                [
                  "f",
                  "left2",
                  "left1",
                  "f1",
                  "f2",
                  "func",
                  "right1",
                  "right2",
                  "func1",
                  "x1",
                  "center1",
                  "step",
                  "func2",
                  "center2"
                ]
              ],
              [
                "test_and_intersected_trifunc",
                [
                  "f",
                  "left2",
                  "left1",
                  "f1",
                  "f2",
                  "func",
                  "right1",
                  "right2",
                  "func1",
                  "x1",
                  "center1",
                  "step",
                  "func2",
                  "center2"
                ]
              ],
              [
                "test_or_intersected_trifunc",
                [
                  "f",
                  "left2",
                  "left1",
                  "f1",
                  "f2",
                  "func",
                  "right1",
                  "right2",
                  "func1",
                  "x1",
                  "center1",
                  "step",
                  "func2",
                  "center2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                []
              ],
              [
                "test_mul_intersected_trifunc",
                []
              ],
              [
                "test_and_not_intersected_trifunc",
                []
              ],
              [
                "test_and_intersected_trifunc",
                []
              ],
              [
                "test_or_intersected_trifunc",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9976306459443158,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_and_intersected_trifunc",
                  "test_or_intersected_trifunc",
                  0.9987684729064038
                ],
                [
                  "test_or_intersected_trifunc",
                  "test_mul_intersected_trifunc",
                  0.9975916496848053
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "test_or_intersected_trifunc",
                  0.9963848855924446
                ],
                [
                  "test_or_intersected_trifunc",
                  "test_or_not_intersected_trifunc",
                  0.9997948086569145
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "test_mul_intersected_trifunc",
                  0.9964525029562475
                ],
                [
                  "test_or_not_intersected_trifunc",
                  "test_mul_intersected_trifunc",
                  0.9973869525143558
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "test_and_intersected_trifunc",
                  0.9971893949873518
                ],
                [
                  "test_and_not_intersected_trifunc",
                  "test_or_not_intersected_trifunc",
                  0.996582608197812
                ],
                [
                  "test_and_intersected_trifunc",
                  "test_or_not_intersected_trifunc",
                  0.9985635342620168
                ],
                [
                  "test_and_intersected_trifunc",
                  "test_mul_intersected_trifunc",
                  0.9975916496848053
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_or_not_intersected_trifunc",
                "false"
              ],
              [
                "test_mul_intersected_trifunc",
                "false"
              ],
              [
                "test_and_not_intersected_trifunc",
                "false"
              ],
              [
                "test_and_intersected_trifunc",
                "false"
              ],
              [
                "test_or_intersected_trifunc",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  }
]