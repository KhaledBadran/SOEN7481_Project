[
  {
    "name": "tests_\u0026_test_ppi.py",
    "testCases": [
      {
        "name": "TestPPI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wget_id",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_merge_information",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_retrieve_id",
                  "[]"
                ],
                [
                  "test_setup_nospecific",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_pubmed",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_protein",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_wget_actions",
                  "[]"
                ],
                [
                  "test_retrieve_actions",
                  "[]"
                ],
                [
                  "test_get_prefer_name",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wget_id",
                  "[]"
                ],
                [
                  "test_merge_information",
                  "[]"
                ],
                [
                  "test_retrieve_id",
                  "[]"
                ],
                [
                  "test_setup_nospecific",
                  "[]"
                ],
                [
                  "test_get_pubmed",
                  "[]"
                ],
                [
                  "test_detect_protein",
                  "[]"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "[]"
                ],
                [
                  "test_wget_actions",
                  "[]"
                ],
                [
                  "test_retrieve_actions",
                  "[]"
                ],
                [
                  "test_get_prefer_name",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wget_id",
                  "false"
                ],
                [
                  "test_merge_information",
                  "false"
                ],
                [
                  "test_retrieve_id",
                  "false"
                ],
                [
                  "test_setup_nospecific",
                  "false"
                ],
                [
                  "test_get_pubmed",
                  "false"
                ],
                [
                  "test_detect_protein",
                  "false"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "true"
                ],
                [
                  "test_wget_actions",
                  "false"
                ],
                [
                  "test_retrieve_actions",
                  "false"
                ],
                [
                  "test_get_prefer_name",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wget_id",
                  "false"
                ],
                [
                  "test_merge_information",
                  "false"
                ],
                [
                  "test_retrieve_id",
                  "false"
                ],
                [
                  "test_setup_nospecific",
                  "false"
                ],
                [
                  "test_get_pubmed",
                  "false"
                ],
                [
                  "test_detect_protein",
                  "false"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "false"
                ],
                [
                  "test_wget_actions",
                  "false"
                ],
                [
                  "test_retrieve_actions",
                  "false"
                ],
                [
                  "test_get_prefer_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wget_id",
                  "false"
                ],
                [
                  "test_merge_information",
                  "false"
                ],
                [
                  "test_retrieve_id",
                  "false"
                ],
                [
                  "test_setup_nospecific",
                  "false"
                ],
                [
                  "test_get_pubmed",
                  "false"
                ],
                [
                  "test_detect_protein",
                  "false"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "false"
                ],
                [
                  "test_wget_actions",
                  "false"
                ],
                [
                  "test_retrieve_actions",
                  "false"
                ],
                [
                  "test_get_prefer_name",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wget_id",
                  "false"
                ],
                [
                  "test_merge_information",
                  "false"
                ],
                [
                  "test_retrieve_id",
                  "false"
                ],
                [
                  "test_setup_nospecific",
                  "false"
                ],
                [
                  "test_get_pubmed",
                  "false"
                ],
                [
                  "test_detect_protein",
                  "false"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "false"
                ],
                [
                  "test_wget_actions",
                  "false"
                ],
                [
                  "test_retrieve_actions",
                  "false"
                ],
                [
                  "test_get_prefer_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                "false"
              ],
              [
                "test_merge_information",
                "false"
              ],
              [
                "test_retrieve_id",
                "false"
              ],
              [
                "test_setup_nospecific",
                "false"
              ],
              [
                "test_get_pubmed",
                "false"
              ],
              [
                "test_detect_protein",
                "false"
              ],
              [
                "test_setup_folder_and_read_file",
                "false"
              ],
              [
                "test_wget_actions",
                "false"
              ],
              [
                "test_retrieve_actions",
                "false"
              ],
              [
                "test_get_prefer_name",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                "false"
              ],
              [
                "test_merge_information",
                "false"
              ],
              [
                "test_retrieve_id",
                "false"
              ],
              [
                "test_setup_nospecific",
                "false"
              ],
              [
                "test_get_pubmed",
                "false"
              ],
              [
                "test_detect_protein",
                "false"
              ],
              [
                "test_setup_folder_and_read_file",
                "false"
              ],
              [
                "test_wget_actions",
                "false"
              ],
              [
                "test_retrieve_actions",
                "false"
              ],
              [
                "test_get_prefer_name",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_wget_id",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_merge_information",
                [
                  "self.mock",
                  "self.mock_args"
                ]
              ],
              [
                "test_retrieve_id",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_setup_nospecific",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_get_pubmed",
                []
              ],
              [
                "test_detect_protein",
                [
                  "self.mock"
                ]
              ],
              [
                "test_setup_folder_and_read_file",
                [
                  "self.mock"
                ]
              ],
              [
                "test_wget_actions",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_retrieve_actions",
                []
              ],
              [
                "test_get_prefer_name",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                "false"
              ],
              [
                "test_merge_information",
                "false"
              ],
              [
                "test_retrieve_id",
                "false"
              ],
              [
                "test_setup_nospecific",
                "false"
              ],
              [
                "test_get_pubmed",
                "false"
              ],
              [
                "test_detect_protein",
                "false"
              ],
              [
                "test_setup_folder_and_read_file",
                "false"
              ],
              [
                "test_wget_actions",
                "false"
              ],
              [
                "test_retrieve_actions",
                "false"
              ],
              [
                "test_get_prefer_name",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                "false"
              ],
              [
                "test_merge_information",
                "false"
              ],
              [
                "test_retrieve_id",
                "false"
              ],
              [
                "test_setup_nospecific",
                "false"
              ],
              [
                "test_get_pubmed",
                "false"
              ],
              [
                "test_detect_protein",
                "false"
              ],
              [
                "test_setup_folder_and_read_file",
                "false"
              ],
              [
                "test_wget_actions",
                "false"
              ],
              [
                "test_retrieve_actions",
                "false"
              ],
              [
                "test_get_prefer_name",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wget_id",
                  "0"
                ],
                [
                  "test_merge_information",
                  "0"
                ],
                [
                  "test_retrieve_id",
                  "0"
                ],
                [
                  "test_setup_nospecific",
                  "0"
                ],
                [
                  "test_get_pubmed",
                  "0"
                ],
                [
                  "test_detect_protein",
                  "0"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "0"
                ],
                [
                  "test_wget_actions",
                  "0"
                ],
                [
                  "test_retrieve_actions",
                  "0"
                ],
                [
                  "test_get_prefer_name",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wget_id",
                  "0"
                ],
                [
                  "test_merge_information",
                  "0"
                ],
                [
                  "test_retrieve_id",
                  "0"
                ],
                [
                  "test_setup_nospecific",
                  "0"
                ],
                [
                  "test_get_pubmed",
                  "0"
                ],
                [
                  "test_detect_protein",
                  "0"
                ],
                [
                  "test_setup_folder_and_read_file",
                  "0"
                ],
                [
                  "test_wget_actions",
                  "0"
                ],
                [
                  "test_retrieve_actions",
                  "0"
                ],
                [
                  "test_get_prefer_name",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                "false"
              ],
              [
                "test_merge_information",
                "false"
              ],
              [
                "test_retrieve_id",
                "false"
              ],
              [
                "test_setup_nospecific",
                "false"
              ],
              [
                "test_get_pubmed",
                "false"
              ],
              [
                "test_detect_protein",
                "false"
              ],
              [
                "test_setup_folder_and_read_file",
                "false"
              ],
              [
                "test_wget_actions",
                "false"
              ],
              [
                "test_retrieve_actions",
                "false"
              ],
              [
                "test_get_prefer_name",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                "false"
              ],
              [
                "test_merge_information",
                "false"
              ],
              [
                "test_retrieve_id",
                "false"
              ],
              [
                "test_setup_nospecific",
                "false"
              ],
              [
                "test_get_pubmed",
                "false"
              ],
              [
                "test_detect_protein",
                "false"
              ],
              [
                "test_setup_folder_and_read_file",
                "false"
              ],
              [
                "test_wget_actions",
                "false"
              ],
              [
                "test_retrieve_actions",
                "false"
              ],
              [
                "test_get_prefer_name",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_wget_id",
                "1"
              ],
              [
                "test_merge_information",
                "2"
              ],
              [
                "test_retrieve_id",
                "0"
              ],
              [
                "test_setup_nospecific",
                "3"
              ],
              [
                "test_get_pubmed",
                "2"
              ],
              [
                "test_detect_protein",
                "1"
              ],
              [
                "test_setup_folder_and_read_file",
                "3"
              ],
              [
                "test_wget_actions",
                "0"
              ],
              [
                "test_retrieve_actions",
                "0"
              ],
              [
                "test_get_prefer_name",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_wget_id",
                [
                  "strain",
                  "log",
                  "strain_id",
                  "files",
                  "detect",
                  "locus"
                ]
              ],
              [
                "test_merge_information",
                [
                  "first_output",
                  "best_folder",
                  "score",
                  "ptt",
                  "all_folder",
                  "out_best",
                  "filename",
                  "row_a",
                  "id_folder",
                  "file_type",
                  "out_all",
                  "id_file"
                ]
              ],
              [
                "test_retrieve_id",
                [
                  "genes",
                  "log",
                  "strain_id",
                  "files"
                ]
              ],
              [
                "test_setup_nospecific",
                [
                  "out_nobest",
                  "out_best",
                  "paths",
                  "strain_id",
                  "out_noall",
                  "files",
                  "out_all"
                ]
              ],
              [
                "test_get_pubmed",
                [
                  "out_nobest",
                  "first_output",
                  "out_best",
                  "data",
                  "log",
                  "strain_id",
                  "out_noall",
                  "mode",
                  "actor",
                  "args",
                  "score",
                  "ptt",
                  "paths",
                  "files",
                  "out_all",
                  "row",
                  "id_file",
                  "querys"
                ]
              ],
              [
                "test_detect_protein",
                [
                  "args",
                  "genes",
                  "strain_id"
                ]
              ],
              [
                "test_setup_folder_and_read_file",
                [
                  "args",
                  "genes",
                  "paths",
                  "strain_id",
                  "files"
                ]
              ],
              [
                "test_wget_actions",
                [
                  "log",
                  "strain_id",
                  "files",
                  "id_file"
                ]
              ],
              [
                "test_retrieve_actions",
                [
                  "args",
                  "log",
                  "paths",
                  "strain_id",
                  "files"
                ]
              ],
              [
                "test_get_prefer_name",
                [
                  "log",
                  "row_a",
                  "name",
                  "files"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                [
                  "self.mock",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_information",
                [
                  "self.example",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_retrieve_id",
                [
                  "self.mock",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_setup_nospecific",
                [
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_pubmed",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_protein",
                [
                  "self.mock_args",
                  "self.example",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_setup_folder_and_read_file",
                [
                  "self.mock_args",
                  "self.example",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_wget_actions",
                [
                  "self.mock",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_retrieve_actions",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.ppi",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_prefer_name",
                [
                  "self.ppi",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5010074061463519,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_wget_id",
                  "test_get_pubmed",
                  0.5381070741465498
                ],
                [
                  "test_merge_information",
                  "test_retrieve_actions",
                  0.5036961628615235
                ],
                [
                  "test_get_pubmed",
                  "test_merge_information",
                  0.8391752086873691
                ],
                [
                  "test_get_prefer_name",
                  "test_retrieve_actions",
                  0.47516730961360915
                ],
                [
                  "test_wget_id",
                  "test_get_prefer_name",
                  0.5196910044992893
                ],
                [
                  "test_get_prefer_name",
                  "test_get_pubmed",
                  0.5355993211105724
                ],
                [
                  "test_wget_id",
                  "test_retrieve_actions",
                  0.5928524077189858
                ],
                [
                  "test_get_pubmed",
                  "test_setup_nospecific",
                  0.6661613035939007
                ],
                [
                  "test_setup_nospecific",
                  "test_retrieve_actions",
                  0.5556588220623754
                ],
                [
                  "test_get_prefer_name",
                  "test_wget_actions",
                  0.4370188612670306
                ],
                [
                  "test_get_pubmed",
                  "test_setup_folder_and_read_file",
                  0.5820472969388517
                ],
                [
                  "test_setup_nospecific",
                  "test_wget_actions",
                  0.47364379651813365
                ],
                [
                  "test_wget_actions",
                  "test_retrieve_actions",
                  0.8479330626145204
                ],
                [
                  "test_detect_protein",
                  "test_setup_nospecific",
                  0.3442296760246102
                ],
                [
                  "test_wget_id",
                  "test_detect_protein",
                  0.3343119956699911
                ],
                [
                  "test_retrieve_id",
                  "test_setup_nospecific",
                  0.41297626540663496
                ],
                [
                  "test_merge_information",
                  "test_setup_folder_and_read_file",
                  0.5083424662852664
                ],
                [
                  "test_setup_folder_and_read_file",
                  "test_wget_actions",
                  0.5825658247004306
                ],
                [
                  "test_detect_protein",
                  "test_setup_folder_and_read_file",
                  0.6890478384409088
                ],
                [
                  "test_get_prefer_name",
                  "test_detect_protein",
                  0.2484430117317862
                ],
                [
                  "test_merge_information",
                  "test_wget_actions",
                  0.3699032673656134
                ],
                [
                  "test_detect_protein",
                  "test_wget_actions",
                  0.27550724076982097
                ],
                [
                  "test_setup_folder_and_read_file",
                  "test_retrieve_actions",
                  0.6845107417077233
                ],
                [
                  "test_get_prefer_name",
                  "test_merge_information",
                  0.4547333026093456
                ],
                [
                  "test_detect_protein",
                  "test_retrieve_actions",
                  0.3407316767453789
                ],
                [
                  "test_get_pubmed",
                  "test_retrieve_actions",
                  0.5997484741236436
                ],
                [
                  "test_wget_id",
                  "test_merge_information",
                  0.4066559338004382
                ],
                [
                  "test_get_prefer_name",
                  "test_setup_nospecific",
                  0.35828307548313026
                ],
                [
                  "test_retrieve_id",
                  "test_detect_protein",
                  0.29797826684880496
                ],
                [
                  "test_wget_id",
                  "test_setup_nospecific",
                  0.4512414969981544
                ],
                [
                  "test_get_pubmed",
                  "test_wget_actions",
                  0.4951026005677051
                ],
                [
                  "test_setup_nospecific",
                  "test_setup_folder_and_read_file",
                  0.5108101348839158
                ],
                [
                  "test_retrieve_id",
                  "test_setup_folder_and_read_file",
                  0.34199598859343117
                ],
                [
                  "test_get_prefer_name",
                  "test_setup_folder_and_read_file",
                  0.3258780842542986
                ],
                [
                  "test_retrieve_id",
                  "test_retrieve_actions",
                  0.5699074825848987
                ],
                [
                  "test_merge_information",
                  "test_setup_nospecific",
                  0.5924481679399174
                ],
                [
                  "test_retrieve_id",
                  "test_get_prefer_name",
                  0.49844478627922684
                ],
                [
                  "test_merge_information",
                  "test_detect_protein",
                  0.4465252890787052
                ],
                [
                  "test_wget_id",
                  "test_setup_folder_and_read_file",
                  0.37424631665383096
                ],
                [
                  "test_wget_id",
                  "test_retrieve_id",
                  0.8511224640549079
                ],
                [
                  "test_retrieve_id",
                  "test_wget_actions",
                  0.5870512379769165
                ],
                [
                  "test_get_pubmed",
                  "test_detect_protein",
                  0.537868311880675
                ],
                [
                  "test_wget_id",
                  "test_wget_actions",
                  0.6424103522486535
                ],
                [
                  "test_retrieve_id",
                  "test_get_pubmed",
                  0.4849653035097817
                ],
                [
                  "test_retrieve_id",
                  "test_merge_information",
                  0.3605945697345763
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_wget_id",
                "false"
              ],
              [
                "test_merge_information",
                "false"
              ],
              [
                "test_retrieve_id",
                "false"
              ],
              [
                "test_setup_nospecific",
                "false"
              ],
              [
                "test_get_pubmed",
                "false"
              ],
              [
                "test_detect_protein",
                "false"
              ],
              [
                "test_setup_folder_and_read_file",
                "false"
              ],
              [
                "test_wget_actions",
                "false"
              ],
              [
                "test_retrieve_actions",
                "false"
              ],
              [
                "test_get_prefer_name",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "tests_\u0026_test_snp.py",
    "testCases": [
      {
        "name": "TestSNPCalling",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_merge_bams",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_transcript_snp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_run_program",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_run_snp_calling",
                  "[]"
                ],
                [
                  "test_get_genome_name",
                  "[]"
                ],
                [
                  "test_modify_header",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_merge_bams",
                  "[]"
                ],
                [
                  "test_transcript_snp",
                  "[]"
                ],
                [
                  "test_run_program",
                  "[]"
                ],
                [
                  "test_run_snp_calling",
                  "[]"
                ],
                [
                  "test_get_genome_name",
                  "[]"
                ],
                [
                  "test_modify_header",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_merge_bams",
                  "false"
                ],
                [
                  "test_transcript_snp",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_run_snp_calling",
                  "false"
                ],
                [
                  "test_get_genome_name",
                  "false"
                ],
                [
                  "test_modify_header",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_merge_bams",
                  "false"
                ],
                [
                  "test_transcript_snp",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_run_snp_calling",
                  "false"
                ],
                [
                  "test_get_genome_name",
                  "false"
                ],
                [
                  "test_modify_header",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_merge_bams",
                  "false"
                ],
                [
                  "test_transcript_snp",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_run_snp_calling",
                  "false"
                ],
                [
                  "test_get_genome_name",
                  "false"
                ],
                [
                  "test_modify_header",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_merge_bams",
                  "false"
                ],
                [
                  "test_transcript_snp",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_run_snp_calling",
                  "false"
                ],
                [
                  "test_get_genome_name",
                  "false"
                ],
                [
                  "test_modify_header",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_bams",
                "false"
              ],
              [
                "test_transcript_snp",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_run_snp_calling",
                "false"
              ],
              [
                "test_get_genome_name",
                "false"
              ],
              [
                "test_modify_header",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_bams",
                "false"
              ],
              [
                "test_transcript_snp",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_run_snp_calling",
                "false"
              ],
              [
                "test_get_genome_name",
                "false"
              ],
              [
                "test_modify_header",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_bams",
                [
                  "self.fasta",
                  "self.snp_folder",
                  "self.example",
                  "self.table"
                ]
              ],
              [
                "test_transcript_snp",
                [
                  "self.fasta",
                  "self.mock",
                  "self.snp_folder"
                ]
              ],
              [
                "test_run_program",
                [
                  "self.fasta",
                  "self.snp_folder",
                  "self.example",
                  "self.table"
                ]
              ],
              [
                "test_run_snp_calling",
                [
                  "self.snp_folder",
                  "self.table"
                ]
              ],
              [
                "test_get_genome_name",
                [
                  "self.fasta",
                  "self.snp_folder",
                  "self.table"
                ]
              ],
              [
                "test_modify_header",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.snp_folder",
                  "self.example",
                  "self.table",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_bams",
                "false"
              ],
              [
                "test_transcript_snp",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_run_snp_calling",
                "false"
              ],
              [
                "test_get_genome_name",
                "false"
              ],
              [
                "test_modify_header",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_bams",
                "true"
              ],
              [
                "test_transcript_snp",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_run_snp_calling",
                "false"
              ],
              [
                "test_get_genome_name",
                "false"
              ],
              [
                "test_modify_header",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_merge_bams",
                  "0"
                ],
                [
                  "test_transcript_snp",
                  "0"
                ],
                [
                  "test_run_program",
                  "0"
                ],
                [
                  "test_run_snp_calling",
                  "0"
                ],
                [
                  "test_get_genome_name",
                  "0"
                ],
                [
                  "test_modify_header",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_merge_bams",
                  "0"
                ],
                [
                  "test_transcript_snp",
                  "0"
                ],
                [
                  "test_run_program",
                  "0"
                ],
                [
                  "test_run_snp_calling",
                  "0"
                ],
                [
                  "test_get_genome_name",
                  "0"
                ],
                [
                  "test_modify_header",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_bams",
                "false"
              ],
              [
                "test_transcript_snp",
                "true"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_run_snp_calling",
                "false"
              ],
              [
                "test_get_genome_name",
                "false"
              ],
              [
                "test_modify_header",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_bams",
                "false"
              ],
              [
                "test_transcript_snp",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_run_snp_calling",
                "false"
              ],
              [
                "test_get_genome_name",
                "false"
              ],
              [
                "test_modify_header",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_bams",
                "1"
              ],
              [
                "test_transcript_snp",
                "2"
              ],
              [
                "test_run_program",
                "1"
              ],
              [
                "test_run_snp_calling",
                "0"
              ],
              [
                "test_get_genome_name",
                "0"
              ],
              [
                "test_modify_header",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_bams",
                [
                  "args",
                  "log",
                  "bam_datas"
                ]
              ],
              [
                "test_transcript_snp",
                [
                  "args",
                  "depth_file",
                  "snp",
                  "datas",
                  "fasta",
                  "snp_folder",
                  "bam_datas"
                ]
              ],
              [
                "test_run_program",
                [
                  "args",
                  "log",
                  "bam_datas"
                ]
              ],
              [
                "test_run_snp_calling",
                [
                  "args",
                  "log"
                ]
              ],
              [
                "test_get_genome_name",
                [
                  "args",
                  "seq_names",
                  "bam_datas"
                ]
              ],
              [
                "test_modify_header",
                [
                  "datas"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_bams",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.snp",
                  "self.test_folder"
                ]
              ],
              [
                "test_transcript_snp",
                [
                  "self.mock_args",
                  "self.snp",
                  "self.example",
                  "self.table",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_program",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.snp",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_snp_calling",
                [
                  "self.fasta",
                  "self.mock",
                  "self.mock_args",
                  "self.snp",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_genome_name",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.snp",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_modify_header",
                [
                  "self.fasta",
                  "self.snp"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.43507680494095347,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_transcript_snp",
                  "test_merge_bams",
                  0.45425483673751443
                ],
                [
                  "test_run_program",
                  "test_get_genome_name",
                  0.6445238740518252
                ],
                [
                  "test_run_program",
                  "test_run_snp_calling",
                  0.5837099575454788
                ],
                [
                  "test_transcript_snp",
                  "test_run_snp_calling",
                  0.24153268641483813
                ],
                [
                  "test_merge_bams",
                  "test_modify_header",
                  0.19142250753641893
                ],
                [
                  "test_merge_bams",
                  "test_get_genome_name",
                  0.6272768279949918
                ],
                [
                  "test_get_genome_name",
                  "test_run_snp_calling",
                  0.531224410620124
                ],
                [
                  "test_run_program",
                  "test_modify_header",
                  0.18511594413390128
                ],
                [
                  "test_transcript_snp",
                  "test_run_program",
                  0.568140027310584
                ],
                [
                  "test_run_program",
                  "test_merge_bams",
                  0.7003694328778763
                ],
                [
                  "test_modify_header",
                  "test_run_snp_calling",
                  0.27802521129825886
                ],
                [
                  "test_modify_header",
                  "test_get_genome_name",
                  0.19342948582466574
                ],
                [
                  "test_merge_bams",
                  "test_run_snp_calling",
                  0.7433277704845259
                ],
                [
                  "test_transcript_snp",
                  "test_modify_header",
                  0.08681715332436336
                ],
                [
                  "test_transcript_snp",
                  "test_get_genome_name",
                  0.49698194795893486
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_bams",
                "false"
              ],
              [
                "test_transcript_snp",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_run_snp_calling",
                "false"
              ],
              [
                "test_get_genome_name",
                "false"
              ],
              [
                "test_modify_header",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_utr.py",
    "testCases": [
      {
        "name": "TestsTSSpredator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_run_utr_detection",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_compute_utr",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_run_utr_detection",
                  "[]"
                ],
                [
                  "test_compute_utr",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_compute_utr",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_compute_utr",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_compute_utr",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_compute_utr",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_compute_utr",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_compute_utr",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_run_utr_detection",
                [
                  "self.mock_parser"
                ]
              ],
              [
                "test_compute_utr",
                [
                  "self.mock_parser"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_compute_utr",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_compute_utr",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_run_utr_detection",
                  "0"
                ],
                [
                  "test_compute_utr",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_run_utr_detection",
                  "0"
                ],
                [
                  "test_compute_utr",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_compute_utr",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_compute_utr",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "2"
              ],
              [
                "test_compute_utr",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                [
                  "args",
                  "log",
                  "utr5_stat_path",
                  "utr5_path",
                  "utr3_stat_path",
                  "utr3_path"
                ]
              ],
              [
                "test_compute_utr",
                [
                  "args",
                  "log",
                  "term_path",
                  "utr5_stat_path",
                  "utr5_path",
                  "utr3_stat_path",
                  "utr3_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                [
                  "self.gffs",
                  "self.mock",
                  "self.tsss",
                  "self.mock_args",
                  "self.out",
                  "self.trans",
                  "self.example",
                  "self.utr",
                  "self.terms",
                  "self.test_folder"
                ]
              ],
              [
                "test_compute_utr",
                [
                  "self.gffs",
                  "self.mock",
                  "self.tsss",
                  "self.mock_args",
                  "self.out",
                  "self.trans",
                  "self.example",
                  "self.utr",
                  "self.terms",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9793627718178074,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compute_utr",
                  "test_run_utr_detection",
                  0.9793627718178074
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_compute_utr",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_meme.py",
    "testCases": [
      {
        "name": "TestMEME",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_split_fasta_by_strain",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_move_and_merge_fasta",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_split_fasta_by_strain",
                  "[]"
                ],
                [
                  "test_move_and_merge_fasta",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_split_fasta_by_strain",
                  "false"
                ],
                [
                  "test_move_and_merge_fasta",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_split_fasta_by_strain",
                  "false"
                ],
                [
                  "test_move_and_merge_fasta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_split_fasta_by_strain",
                  "false"
                ],
                [
                  "test_move_and_merge_fasta",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_split_fasta_by_strain",
                  "false"
                ],
                [
                  "test_move_and_merge_fasta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "false"
              ],
              [
                "test_move_and_merge_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "false"
              ],
              [
                "test_move_and_merge_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_split_fasta_by_strain",
                [
                  "self.mock_args",
                  "self.gff_folder",
                  "self.tss_folder",
                  "self.out_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_move_and_merge_fasta",
                [
                  "self.mock_args",
                  "self.gff_folder",
                  "self.fa_folder",
                  "self.tss_folder",
                  "self.out_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "false"
              ],
              [
                "test_move_and_merge_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "false"
              ],
              [
                "test_move_and_merge_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_split_fasta_by_strain",
                  "0"
                ],
                [
                  "test_move_and_merge_fasta",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_split_fasta_by_strain",
                  "0"
                ],
                [
                  "test_move_and_merge_fasta",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "false"
              ],
              [
                "test_move_and_merge_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "false"
              ],
              [
                "test_move_and_merge_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "2"
              ],
              [
                "test_move_and_merge_fasta",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                []
              ],
              [
                "test_move_and_merge_fasta",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                [
                  "self.fa_folder",
                  "self.meme"
                ]
              ],
              [
                "test_move_and_merge_fasta",
                [
                  "self.meme",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3094450025965416,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_move_and_merge_fasta",
                  "test_split_fasta_by_strain",
                  0.3094450025965416
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_split_fasta_by_strain",
                "false"
              ],
              [
                "test_move_and_merge_fasta",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ratt.py",
    "testCases": [
      {
        "name": "TestRATT",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_format_and_run",
                  "[]"
                ],
                [
                  "test_convert_to_gff",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_convert_embl",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_annotation_transfer",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_parser_embl_gbk",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_convert_to_pttrnt",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_format_and_run",
                  "[]"
                ],
                [
                  "test_convert_to_gff",
                  "[]"
                ],
                [
                  "test_convert_embl",
                  "[]"
                ],
                [
                  "test_annotation_transfer",
                  "[]"
                ],
                [
                  "test_parser_embl_gbk",
                  "[]"
                ],
                [
                  "test_convert_to_pttrnt",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_format_and_run",
                  "false"
                ],
                [
                  "test_convert_to_gff",
                  "false"
                ],
                [
                  "test_convert_embl",
                  "false"
                ],
                [
                  "test_annotation_transfer",
                  "false"
                ],
                [
                  "test_parser_embl_gbk",
                  "false"
                ],
                [
                  "test_convert_to_pttrnt",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_format_and_run",
                  "false"
                ],
                [
                  "test_convert_to_gff",
                  "false"
                ],
                [
                  "test_convert_embl",
                  "false"
                ],
                [
                  "test_annotation_transfer",
                  "false"
                ],
                [
                  "test_parser_embl_gbk",
                  "false"
                ],
                [
                  "test_convert_to_pttrnt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_format_and_run",
                  "false"
                ],
                [
                  "test_convert_to_gff",
                  "true"
                ],
                [
                  "test_convert_embl",
                  "false"
                ],
                [
                  "test_annotation_transfer",
                  "false"
                ],
                [
                  "test_parser_embl_gbk",
                  "false"
                ],
                [
                  "test_convert_to_pttrnt",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_format_and_run",
                  "false"
                ],
                [
                  "test_convert_to_gff",
                  "false"
                ],
                [
                  "test_convert_embl",
                  "false"
                ],
                [
                  "test_annotation_transfer",
                  "false"
                ],
                [
                  "test_parser_embl_gbk",
                  "false"
                ],
                [
                  "test_convert_to_pttrnt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                "false"
              ],
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_convert_embl",
                "false"
              ],
              [
                "test_annotation_transfer",
                "false"
              ],
              [
                "test_parser_embl_gbk",
                "false"
              ],
              [
                "test_convert_to_pttrnt",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                "false"
              ],
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_convert_embl",
                "false"
              ],
              [
                "test_annotation_transfer",
                "false"
              ],
              [
                "test_parser_embl_gbk",
                "false"
              ],
              [
                "test_convert_to_pttrnt",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_format_and_run",
                [
                  "self.gff_outfolder",
                  "self.output_path",
                  "self.ref_embls",
                  "self.ref_fastas",
                  "self.tar_fastas",
                  "self.ref_gbk",
                  "self.example"
                ]
              ],
              [
                "test_convert_to_gff",
                [
                  "self.ref_embls",
                  "self.ref_fastas",
                  "self.tar_fastas",
                  "self.ref_gbk"
                ]
              ],
              [
                "test_convert_embl",
                [
                  "self.gff_outfolder",
                  "self.output_path",
                  "self.ref_embls",
                  "self.ref_fastas",
                  "self.mock_args",
                  "self.tar_fastas",
                  "self.ref_gbk"
                ]
              ],
              [
                "test_annotation_transfer",
                [
                  "self.ref_gbk"
                ]
              ],
              [
                "test_parser_embl_gbk",
                [
                  "self.gff_outfolder",
                  "self.output_path",
                  "self.ref_embls",
                  "self.ref_fastas",
                  "self.mock_args",
                  "self.tar_fastas"
                ]
              ],
              [
                "test_convert_to_pttrnt",
                [
                  "self.gff_outfolder",
                  "self.output_path",
                  "self.ref_embls",
                  "self.ref_fastas",
                  "self.mock_args",
                  "self.ref_gbk"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                "false"
              ],
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_convert_embl",
                "false"
              ],
              [
                "test_annotation_transfer",
                "false"
              ],
              [
                "test_parser_embl_gbk",
                "false"
              ],
              [
                "test_convert_to_pttrnt",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                "false"
              ],
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_convert_embl",
                "false"
              ],
              [
                "test_annotation_transfer",
                "false"
              ],
              [
                "test_parser_embl_gbk",
                "false"
              ],
              [
                "test_convert_to_pttrnt",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_format_and_run",
                  "0"
                ],
                [
                  "test_convert_to_gff",
                  "0"
                ],
                [
                  "test_convert_embl",
                  "0"
                ],
                [
                  "test_annotation_transfer",
                  "0"
                ],
                [
                  "test_parser_embl_gbk",
                  "0"
                ],
                [
                  "test_convert_to_pttrnt",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_format_and_run",
                  "0"
                ],
                [
                  "test_convert_to_gff",
                  "0"
                ],
                [
                  "test_convert_embl",
                  "0"
                ],
                [
                  "test_annotation_transfer",
                  "0"
                ],
                [
                  "test_parser_embl_gbk",
                  "0"
                ],
                [
                  "test_convert_to_pttrnt",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                "false"
              ],
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_convert_embl",
                "false"
              ],
              [
                "test_annotation_transfer",
                "false"
              ],
              [
                "test_parser_embl_gbk",
                "false"
              ],
              [
                "test_convert_to_pttrnt",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                "false"
              ],
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_convert_embl",
                "false"
              ],
              [
                "test_annotation_transfer",
                "false"
              ],
              [
                "test_parser_embl_gbk",
                "false"
              ],
              [
                "test_convert_to_pttrnt",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_format_and_run",
                "0"
              ],
              [
                "test_convert_to_gff",
                "2"
              ],
              [
                "test_convert_embl",
                "2"
              ],
              [
                "test_annotation_transfer",
                "3"
              ],
              [
                "test_parser_embl_gbk",
                "2"
              ],
              [
                "test_convert_to_pttrnt",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                [
                  "args",
                  "log"
                ]
              ],
              [
                "test_convert_to_gff",
                [
                  "args",
                  "data",
                  "log",
                  "files",
                  "ratt_result"
                ]
              ],
              [
                "test_convert_embl",
                [
                  "log",
                  "out"
                ]
              ],
              [
                "test_annotation_transfer",
                [
                  "args",
                  "log"
                ]
              ],
              [
                "test_parser_embl_gbk",
                [
                  "data",
                  "files"
                ]
              ],
              [
                "test_convert_to_pttrnt",
                [
                  "data",
                  "log",
                  "files"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                [
                  "self.ratt",
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_to_gff",
                [
                  "self.gff_outfolder",
                  "self.ratt",
                  "self.output_path",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_embl",
                [
                  "self.ratt",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_annotation_transfer",
                [
                  "self.gff_outfolder",
                  "self.ratt",
                  "self.output_path",
                  "self.ref_fastas",
                  "self.ref_embls",
                  "self.tar_fastas",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_parser_embl_gbk",
                [
                  "self.ratt",
                  "self.ref_gbk",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_to_pttrnt",
                [
                  "self.ratt",
                  "self.tar_fastas",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.45151196398057597,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_convert_to_pttrnt",
                  "test_convert_to_gff",
                  0.5805075648958385
                ],
                [
                  "test_convert_to_gff",
                  "test_convert_embl",
                  0.42452948260633505
                ],
                [
                  "test_convert_to_pttrnt",
                  "test_parser_embl_gbk",
                  0.40427497654269384
                ],
                [
                  "test_parser_embl_gbk",
                  "test_convert_embl",
                  0.38434407077726773
                ],
                [
                  "test_convert_to_gff",
                  "test_parser_embl_gbk",
                  0.34714611677617735
                ],
                [
                  "test_convert_to_gff",
                  "test_annotation_transfer",
                  0.6384295663714438
                ],
                [
                  "test_convert_to_pttrnt",
                  "test_convert_embl",
                  0.5639743570142493
                ],
                [
                  "test_parser_embl_gbk",
                  "test_annotation_transfer",
                  0.385331099483462
                ],
                [
                  "test_format_and_run",
                  "test_annotation_transfer",
                  0.5970331351655825
                ],
                [
                  "test_convert_to_pttrnt",
                  "test_annotation_transfer",
                  0.4697357747100003
                ],
                [
                  "test_convert_embl",
                  "test_annotation_transfer",
                  0.4075906916748924
                ],
                [
                  "test_parser_embl_gbk",
                  "test_format_and_run",
                  0.3340874164920078
                ],
                [
                  "test_convert_to_pttrnt",
                  "test_format_and_run",
                  0.345645563728954
                ],
                [
                  "test_convert_to_gff",
                  "test_format_and_run",
                  0.5356715840055802
                ],
                [
                  "test_convert_embl",
                  "test_format_and_run",
                  0.35437805946415424
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_format_and_run",
                "false"
              ],
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_convert_embl",
                "false"
              ],
              [
                "test_annotation_transfer",
                "false"
              ],
              [
                "test_parser_embl_gbk",
                "false"
              ],
              [
                "test_convert_to_pttrnt",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_sorf.py",
    "testCases": [
      {
        "name": "TestsORFDetection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_run_sorf_detection",
                  "[]"
                ],
                [
                  "test_compare_tran_cds",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_start_stop_codon",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_run_sorf_detection",
                  "[]"
                ],
                [
                  "test_compare_tran_cds",
                  "[]"
                ],
                [
                  "test_start_stop_codon",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_run_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_start_stop_codon",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_run_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_start_stop_codon",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_run_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_start_stop_codon",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_run_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_start_stop_codon",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                "false"
              ],
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_start_stop_codon",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                "false"
              ],
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_start_stop_codon",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_run_sorf_detection",
                [
                  "self.frag",
                  "self.fastas",
                  "self.srnas",
                  "self.tex"
                ]
              ],
              [
                "test_compare_tran_cds",
                [
                  "self.tsss",
                  "self.frag",
                  "self.trans",
                  "self.gffs",
                  "self.fastas",
                  "self.srnas",
                  "self.tex"
                ]
              ],
              [
                "test_start_stop_codon",
                [
                  "self.tsss",
                  "self.frag",
                  "self.trans",
                  "self.gffs",
                  "self.fastas",
                  "self.srnas",
                  "self.tex"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                "false"
              ],
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_start_stop_codon",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                "false"
              ],
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_start_stop_codon",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_run_sorf_detection",
                  "0"
                ],
                [
                  "test_compare_tran_cds",
                  "0"
                ],
                [
                  "test_start_stop_codon",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_run_sorf_detection",
                  "0"
                ],
                [
                  "test_compare_tran_cds",
                  "0"
                ],
                [
                  "test_start_stop_codon",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                "false"
              ],
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_start_stop_codon",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                "false"
              ],
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_start_stop_codon",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_run_sorf_detection",
                "0"
              ],
              [
                "test_compare_tran_cds",
                "1"
              ],
              [
                "test_start_stop_codon",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                [
                  "args",
                  "table_path",
                  "log",
                  "gff_path"
                ]
              ],
              [
                "test_compare_tran_cds",
                [
                  "args",
                  "prefixs",
                  "log"
                ]
              ],
              [
                "test_start_stop_codon",
                [
                  "args",
                  "table_path",
                  "log",
                  "gff_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                [
                  "self.sorf",
                  "self.gffs",
                  "self.mock",
                  "self.tsss",
                  "self.mock_args",
                  "self.out",
                  "self.trans",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_tran_cds",
                [
                  "self.sorf",
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.test_folder"
                ]
              ],
              [
                "test_start_stop_codon",
                [
                  "self.sorf",
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5561470930984005,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compare_tran_cds",
                  "test_run_sorf_detection",
                  0.6865556757680834
                ],
                [
                  "test_start_stop_codon",
                  "test_run_sorf_detection",
                  0.6216071233787333
                ],
                [
                  "test_start_stop_codon",
                  "test_compare_tran_cds",
                  0.36027848014838476
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_run_sorf_detection",
                "false"
              ],
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_start_stop_codon",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_srna.py",
    "testCases": [
      {
        "name": "TestsRNADetection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_filter_srna",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_folder_exist",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_class_srna",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_plot_mountain",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_replot_sec",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_blast",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_seq_sec",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_formatdb",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_compute_2d_and_energy",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_run_program",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_check_necessary_file",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_filter_srna",
                  "[]"
                ],
                [
                  "test_check_folder_exist",
                  "[]"
                ],
                [
                  "test_class_srna",
                  "[]"
                ],
                [
                  "test_plot_mountain",
                  "[]"
                ],
                [
                  "test_replot_sec",
                  "[]"
                ],
                [
                  "test_blast",
                  "[]"
                ],
                [
                  "test_get_seq_sec",
                  "[]"
                ],
                [
                  "test_formatdb",
                  "[]"
                ],
                [
                  "test_compute_2d_and_energy",
                  "[]"
                ],
                [
                  "test_run_program",
                  "[]"
                ],
                [
                  "test_check_necessary_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_filter_srna",
                  "true"
                ],
                [
                  "test_check_folder_exist",
                  "false"
                ],
                [
                  "test_class_srna",
                  "false"
                ],
                [
                  "test_plot_mountain",
                  "false"
                ],
                [
                  "test_replot_sec",
                  "false"
                ],
                [
                  "test_blast",
                  "false"
                ],
                [
                  "test_get_seq_sec",
                  "false"
                ],
                [
                  "test_formatdb",
                  "false"
                ],
                [
                  "test_compute_2d_and_energy",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_check_necessary_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_filter_srna",
                  "false"
                ],
                [
                  "test_check_folder_exist",
                  "false"
                ],
                [
                  "test_class_srna",
                  "false"
                ],
                [
                  "test_plot_mountain",
                  "false"
                ],
                [
                  "test_replot_sec",
                  "false"
                ],
                [
                  "test_blast",
                  "false"
                ],
                [
                  "test_get_seq_sec",
                  "false"
                ],
                [
                  "test_formatdb",
                  "false"
                ],
                [
                  "test_compute_2d_and_energy",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_check_necessary_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_filter_srna",
                  "false"
                ],
                [
                  "test_check_folder_exist",
                  "false"
                ],
                [
                  "test_class_srna",
                  "false"
                ],
                [
                  "test_plot_mountain",
                  "false"
                ],
                [
                  "test_replot_sec",
                  "false"
                ],
                [
                  "test_blast",
                  "false"
                ],
                [
                  "test_get_seq_sec",
                  "false"
                ],
                [
                  "test_formatdb",
                  "false"
                ],
                [
                  "test_compute_2d_and_energy",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_check_necessary_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_filter_srna",
                  "false"
                ],
                [
                  "test_check_folder_exist",
                  "false"
                ],
                [
                  "test_class_srna",
                  "false"
                ],
                [
                  "test_plot_mountain",
                  "false"
                ],
                [
                  "test_replot_sec",
                  "false"
                ],
                [
                  "test_blast",
                  "false"
                ],
                [
                  "test_get_seq_sec",
                  "false"
                ],
                [
                  "test_formatdb",
                  "false"
                ],
                [
                  "test_compute_2d_and_energy",
                  "false"
                ],
                [
                  "test_run_program",
                  "false"
                ],
                [
                  "test_check_necessary_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                "false"
              ],
              [
                "test_check_folder_exist",
                "false"
              ],
              [
                "test_class_srna",
                "false"
              ],
              [
                "test_plot_mountain",
                "false"
              ],
              [
                "test_replot_sec",
                "false"
              ],
              [
                "test_blast",
                "false"
              ],
              [
                "test_get_seq_sec",
                "false"
              ],
              [
                "test_formatdb",
                "false"
              ],
              [
                "test_compute_2d_and_energy",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_check_necessary_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                "false"
              ],
              [
                "test_check_folder_exist",
                "false"
              ],
              [
                "test_class_srna",
                "false"
              ],
              [
                "test_plot_mountain",
                "false"
              ],
              [
                "test_replot_sec",
                "false"
              ],
              [
                "test_blast",
                "false"
              ],
              [
                "test_get_seq_sec",
                "false"
              ],
              [
                "test_formatdb",
                "false"
              ],
              [
                "test_compute_2d_and_energy",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_check_necessary_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_filter_srna",
                [
                  "self.tsss",
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.terms",
                  "self.gffs",
                  "self.tex"
                ]
              ],
              [
                "test_check_folder_exist",
                [
                  "self.tsss",
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.test_folder",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.tex"
                ]
              ],
              [
                "test_class_srna",
                [
                  "self.tsss",
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.sorf",
                  "self.gffs",
                  "self.fastas",
                  "self.tex"
                ]
              ],
              [
                "test_plot_mountain",
                [
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.gffs",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.tex"
                ]
              ],
              [
                "test_replot_sec",
                [
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.sorf",
                  "self.gffs",
                  "self.mock_args",
                  "self.tex"
                ]
              ],
              [
                "test_blast",
                [
                  "self.tsss",
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.terms",
                  "self.sorf",
                  "self.gffs",
                  "self.tex"
                ]
              ],
              [
                "test_get_seq_sec",
                [
                  "self.tsss",
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.sorf",
                  "self.gffs",
                  "self.mock_args",
                  "self.tex"
                ]
              ],
              [
                "test_formatdb",
                [
                  "self.tsss",
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.sorf",
                  "self.gffs",
                  "self.mock_args",
                  "self.fastas",
                  "self.tex"
                ]
              ],
              [
                "test_compute_2d_and_energy",
                [
                  "self.frag",
                  "self.pros",
                  "self.trans",
                  "self.terms",
                  "self.sorf",
                  "self.gffs",
                  "self.tex"
                ]
              ],
              [
                "test_run_program",
                [
                  "self.frag",
                  "self.terms",
                  "self.sorf",
                  "self.fastas",
                  "self.tex"
                ]
              ],
              [
                "test_check_necessary_file",
                [
                  "self.example",
                  "self.out"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                "false"
              ],
              [
                "test_check_folder_exist",
                "false"
              ],
              [
                "test_class_srna",
                "false"
              ],
              [
                "test_plot_mountain",
                "false"
              ],
              [
                "test_replot_sec",
                "false"
              ],
              [
                "test_blast",
                "false"
              ],
              [
                "test_get_seq_sec",
                "false"
              ],
              [
                "test_formatdb",
                "false"
              ],
              [
                "test_compute_2d_and_energy",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_check_necessary_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                "false"
              ],
              [
                "test_check_folder_exist",
                "false"
              ],
              [
                "test_class_srna",
                "false"
              ],
              [
                "test_plot_mountain",
                "false"
              ],
              [
                "test_replot_sec",
                "false"
              ],
              [
                "test_blast",
                "false"
              ],
              [
                "test_get_seq_sec",
                "false"
              ],
              [
                "test_formatdb",
                "false"
              ],
              [
                "test_compute_2d_and_energy",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_check_necessary_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_filter_srna",
                  "0"
                ],
                [
                  "test_check_folder_exist",
                  "0"
                ],
                [
                  "test_class_srna",
                  "0"
                ],
                [
                  "test_plot_mountain",
                  "0"
                ],
                [
                  "test_replot_sec",
                  "0"
                ],
                [
                  "test_blast",
                  "0"
                ],
                [
                  "test_get_seq_sec",
                  "0"
                ],
                [
                  "test_formatdb",
                  "0"
                ],
                [
                  "test_compute_2d_and_energy",
                  "0"
                ],
                [
                  "test_run_program",
                  "0"
                ],
                [
                  "test_check_necessary_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_filter_srna",
                  "0"
                ],
                [
                  "test_check_folder_exist",
                  "0"
                ],
                [
                  "test_class_srna",
                  "0"
                ],
                [
                  "test_plot_mountain",
                  "0"
                ],
                [
                  "test_replot_sec",
                  "0"
                ],
                [
                  "test_blast",
                  "0"
                ],
                [
                  "test_get_seq_sec",
                  "0"
                ],
                [
                  "test_formatdb",
                  "0"
                ],
                [
                  "test_compute_2d_and_energy",
                  "0"
                ],
                [
                  "test_run_program",
                  "0"
                ],
                [
                  "test_check_necessary_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                "false"
              ],
              [
                "test_check_folder_exist",
                "false"
              ],
              [
                "test_class_srna",
                "false"
              ],
              [
                "test_plot_mountain",
                "false"
              ],
              [
                "test_replot_sec",
                "false"
              ],
              [
                "test_blast",
                "false"
              ],
              [
                "test_get_seq_sec",
                "false"
              ],
              [
                "test_formatdb",
                "false"
              ],
              [
                "test_compute_2d_and_energy",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_check_necessary_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                "false"
              ],
              [
                "test_check_folder_exist",
                "false"
              ],
              [
                "test_class_srna",
                "false"
              ],
              [
                "test_plot_mountain",
                "false"
              ],
              [
                "test_replot_sec",
                "false"
              ],
              [
                "test_blast",
                "false"
              ],
              [
                "test_get_seq_sec",
                "false"
              ],
              [
                "test_formatdb",
                "false"
              ],
              [
                "test_compute_2d_and_energy",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_check_necessary_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_filter_srna",
                "1"
              ],
              [
                "test_check_folder_exist",
                "1"
              ],
              [
                "test_class_srna",
                "2"
              ],
              [
                "test_plot_mountain",
                "1"
              ],
              [
                "test_replot_sec",
                "2"
              ],
              [
                "test_blast",
                "1"
              ],
              [
                "test_get_seq_sec",
                "4"
              ],
              [
                "test_formatdb",
                "1"
              ],
              [
                "test_compute_2d_and_energy",
                "1"
              ],
              [
                "test_run_program",
                "1"
              ],
              [
                "test_check_necessary_file",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                [
                  "args",
                  "log",
                  "datas",
                  "sec_path",
                  "stat_out"
                ]
              ],
              [
                "test_check_folder_exist",
                [
                  "path_"
                ]
              ],
              [
                "test_class_srna",
                [
                  "args",
                  "table_out",
                  "log",
                  "gff_out",
                  "stat_out"
                ]
              ],
              [
                "test_plot_mountain",
                [
                  "log",
                  "tmp_paths",
                  "moun_path"
                ]
              ],
              [
                "test_replot_sec",
                [
                  "log",
                  "tmp_paths"
                ]
              ],
              [
                "test_blast",
                [
                  "args",
                  "log",
                  "datas"
                ]
              ],
              [
                "test_get_seq_sec",
                [
                  "log",
                  "datas"
                ]
              ],
              [
                "test_formatdb",
                [
                  "database",
                  "log"
                ]
              ],
              [
                "test_compute_2d_and_energy",
                [
                  "args",
                  "log",
                  "tmp_paths",
                  "datas",
                  "sec_path"
                ]
              ],
              [
                "test_run_program",
                [
                  "args",
                  "prefixs",
                  "log",
                  "fuzzy_tsss"
                ]
              ],
              [
                "test_check_necessary_file",
                [
                  "args",
                  "log"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                [
                  "self.sorf",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.srna",
                  "self.out",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_folder_exist",
                [
                  "self.sorf",
                  "self.srna"
                ]
              ],
              [
                "test_class_srna",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.srna",
                  "self.out",
                  "self.test_folder"
                ]
              ],
              [
                "test_plot_mountain",
                [
                  "self.sorf",
                  "self.mock",
                  "self.tsss",
                  "self.srna",
                  "self.test_folder"
                ]
              ],
              [
                "test_replot_sec",
                [
                  "self.mock",
                  "self.tsss",
                  "self.fastas",
                  "self.srna",
                  "self.out",
                  "self.test_folder"
                ]
              ],
              [
                "test_blast",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.srna",
                  "self.out",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_seq_sec",
                [
                  "self.mock",
                  "self.fastas",
                  "self.srna",
                  "self.out",
                  "self.test_folder"
                ]
              ],
              [
                "test_formatdb",
                [
                  "self.mock",
                  "self.srna",
                  "self.out",
                  "self.test_folder"
                ]
              ],
              [
                "test_compute_2d_and_energy",
                [
                  "self.mock",
                  "self.tsss",
                  "self.mock_args",
                  "self.fastas",
                  "self.srna",
                  "self.out",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_program",
                [
                  "self.gffs",
                  "self.mock",
                  "self.tsss",
                  "self.mock_args",
                  "self.srna",
                  "self.out",
                  "self.pros",
                  "self.trans",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_necessary_file",
                [
                  "self.tsss",
                  "self.pros",
                  "self.frag",
                  "self.trans",
                  "self.terms",
                  "self.test_folder",
                  "self.sorf",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.srna",
                  "self.tex"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5172961035869686,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_blast",
                  "test_class_srna",
                  0.5709395728760418
                ],
                [
                  "test_formatdb",
                  "test_replot_sec",
                  0.48615279266412337
                ],
                [
                  "test_replot_sec",
                  "test_compute_2d_and_energy",
                  0.5738287860105179
                ],
                [
                  "test_run_program",
                  "test_replot_sec",
                  0.4405555038534526
                ],
                [
                  "test_run_program",
                  "test_compute_2d_and_energy",
                  0.7552996928706778
                ],
                [
                  "test_check_necessary_file",
                  "test_compute_2d_and_energy",
                  0.7229312125876252
                ],
                [
                  "test_formatdb",
                  "test_class_srna",
                  0.41479413159943784
                ],
                [
                  "test_check_necessary_file",
                  "test_replot_sec",
                  0.38882695442332743
                ],
                [
                  "test_run_program",
                  "test_blast",
                  0.7665953265653417
                ],
                [
                  "test_formatdb",
                  "test_compute_2d_and_energy",
                  0.5931640328499577
                ],
                [
                  "test_replot_sec",
                  "test_blast",
                  0.43424088439993996
                ],
                [
                  "test_get_seq_sec",
                  "test_plot_mountain",
                  0.44093239073631574
                ],
                [
                  "test_formatdb",
                  "test_check_necessary_file",
                  0.5543196128553988
                ],
                [
                  "test_formatdb",
                  "test_blast",
                  0.5525652910116028
                ],
                [
                  "test_check_necessary_file",
                  "test_run_program",
                  0.82643476595826
                ],
                [
                  "test_formatdb",
                  "test_filter_srna",
                  0.6161189175335097
                ],
                [
                  "test_compute_2d_and_energy",
                  "test_class_srna",
                  0.5550902727315161
                ],
                [
                  "test_check_folder_exist",
                  "test_replot_sec",
                  0.2345289314982313
                ],
                [
                  "test_check_necessary_file",
                  "test_blast",
                  0.6698854206383804
                ],
                [
                  "test_replot_sec",
                  "test_class_srna",
                  0.3554567092814692
                ],
                [
                  "test_check_folder_exist",
                  "test_compute_2d_and_energy",
                  0.2975751735273309
                ],
                [
                  "test_plot_mountain",
                  "test_blast",
                  0.4588362535917872
                ],
                [
                  "test_formatdb",
                  "test_run_program",
                  0.5365704701917222
                ],
                [
                  "test_run_program",
                  "test_filter_srna",
                  0.8761132879219491
                ],
                [
                  "test_check_necessary_file",
                  "test_plot_mountain",
                  0.44446806437614045
                ],
                [
                  "test_check_folder_exist",
                  "test_plot_mountain",
                  0.2558831578595795
                ],
                [
                  "test_check_folder_exist",
                  "test_formatdb",
                  0.251259453814803
                ],
                [
                  "test_get_seq_sec",
                  "test_blast",
                  0.5012481703906064
                ],
                [
                  "test_check_folder_exist",
                  "test_filter_srna",
                  0.2857146377801333
                ],
                [
                  "test_get_seq_sec",
                  "test_class_srna",
                  0.38663533516319454
                ],
                [
                  "test_replot_sec",
                  "test_plot_mountain",
                  0.5901180354118042
                ],
                [
                  "test_formatdb",
                  "test_plot_mountain",
                  0.4886272748799578
                ],
                [
                  "test_run_program",
                  "test_plot_mountain",
                  0.47192933993550984
                ],
                [
                  "test_check_folder_exist",
                  "test_check_necessary_file",
                  0.3670971280560065
                ],
                [
                  "test_check_folder_exist",
                  "test_blast",
                  0.31946881358704693
                ],
                [
                  "test_get_seq_sec",
                  "test_replot_sec",
                  0.419385630668549
                ],
                [
                  "test_plot_mountain",
                  "test_class_srna",
                  0.3644980623887759
                ],
                [
                  "test_plot_mountain",
                  "test_filter_srna",
                  0.5061431337361367
                ],
                [
                  "test_check_folder_exist",
                  "test_run_program",
                  0.3397423762492809
                ],
                [
                  "test_get_seq_sec",
                  "test_compute_2d_and_energy",
                  0.52567518595763
                ],
                [
                  "test_compute_2d_and_energy",
                  "test_blast",
                  0.770750050326462
                ],
                [
                  "test_check_necessary_file",
                  "test_class_srna",
                  0.6363397122329908
                ],
                [
                  "test_class_srna",
                  "test_filter_srna",
                  0.6746996719111493
                ],
                [
                  "test_check_necessary_file",
                  "test_filter_srna",
                  0.782969085991483
                ],
                [
                  "test_check_folder_exist",
                  "test_class_srna",
                  0.2416512803886848
                ],
                [
                  "test_check_folder_exist",
                  "test_get_seq_sec",
                  0.27635883772400094
                ],
                [
                  "test_check_necessary_file",
                  "test_get_seq_sec",
                  0.41628196834194753
                ],
                [
                  "test_plot_mountain",
                  "test_compute_2d_and_energy",
                  0.5630076340933252
                ],
                [
                  "test_get_seq_sec",
                  "test_filter_srna",
                  0.5603234017836967
                ],
                [
                  "test_blast",
                  "test_filter_srna",
                  0.8705766435577719
                ],
                [
                  "test_compute_2d_and_energy",
                  "test_filter_srna",
                  0.8589359915176495
                ],
                [
                  "test_replot_sec",
                  "test_filter_srna",
                  0.4994944675050438
                ],
                [
                  "test_formatdb",
                  "test_get_seq_sec",
                  0.47626141498185304
                ],
                [
                  "test_run_program",
                  "test_get_seq_sec",
                  0.4898803327413653
                ],
                [
                  "test_run_program",
                  "test_class_srna",
                  0.6941050157527838
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_filter_srna",
                "false"
              ],
              [
                "test_check_folder_exist",
                "false"
              ],
              [
                "test_class_srna",
                "false"
              ],
              [
                "test_plot_mountain",
                "false"
              ],
              [
                "test_replot_sec",
                "false"
              ],
              [
                "test_blast",
                "false"
              ],
              [
                "test_get_seq_sec",
                "false"
              ],
              [
                "test_formatdb",
                "false"
              ],
              [
                "test_compute_2d_and_energy",
                "false"
              ],
              [
                "test_run_program",
                "false"
              ],
              [
                "test_check_necessary_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ribos.py",
    "testCases": [
      {
        "name": "TestRibos",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_merge_results",
                  "[]"
                ],
                [
                  "test_scan_extract_rfam",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_merge_results",
                  "[]"
                ],
                [
                  "test_scan_extract_rfam",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_merge_results",
                  "true"
                ],
                [
                  "test_scan_extract_rfam",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_merge_results",
                  "false"
                ],
                [
                  "test_scan_extract_rfam",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_merge_results",
                  "false"
                ],
                [
                  "test_scan_extract_rfam",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_merge_results",
                  "false"
                ],
                [
                  "test_scan_extract_rfam",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                "false"
              ],
              [
                "test_scan_extract_rfam",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                "false"
              ],
              [
                "test_scan_extract_rfam",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_results",
                [
                  "self.tsss",
                  "self.trans",
                  "self.out_gff",
                  "self.stat",
                  "self.database",
                  "self.seq_path",
                  "self.scan"
                ]
              ],
              [
                "test_scan_extract_rfam",
                [
                  "self.tables",
                  "self.out_gff",
                  "self.stat",
                  "self.database",
                  "self.scan"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                "false"
              ],
              [
                "test_scan_extract_rfam",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                "false"
              ],
              [
                "test_scan_extract_rfam",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_merge_results",
                  "0"
                ],
                [
                  "test_scan_extract_rfam",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_merge_results",
                  "0"
                ],
                [
                  "test_scan_extract_rfam",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                "false"
              ],
              [
                "test_scan_extract_rfam",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                "false"
              ],
              [
                "test_scan_extract_rfam",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_results",
                "0"
              ],
              [
                "test_scan_extract_rfam",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                [
                  "args",
                  "suffixs",
                  "rfam",
                  "log",
                  "tmp_files"
                ]
              ],
              [
                "test_scan_extract_rfam",
                [
                  "prefixs",
                  "args",
                  "suffixs",
                  "rfam",
                  "log",
                  "tmp_files"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.tables",
                  "self.fastas",
                  "self.ribo",
                  "self.example",
                  "self.out_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_scan_extract_rfam",
                [
                  "self.gffs",
                  "self.mock",
                  "self.tsss",
                  "self.mock_args",
                  "self.fastas",
                  "self.ribo",
                  "self.trans",
                  "self.example",
                  "self.seq_path",
                  "self.out_folder",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6672878094200773,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_scan_extract_rfam",
                  "test_merge_results",
                  0.6672878094200773
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_results",
                "false"
              ],
              [
                "test_scan_extract_rfam",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_goterm.py",
    "testCases": [
      {
        "name": "TestGetPolyT",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_merge_files",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_merge_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_merge_files",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_merge_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_merge_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_merge_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_files",
                [
                  "self.mock_args",
                  "self.trans"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_merge_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_merge_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                [
                  "gff_folder",
                  "data",
                  "log",
                  "out_file",
                  "test2_folder",
                  "test1_folder"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                [
                  "self.gffs",
                  "self.all_strain",
                  "self.go_folder",
                  "self.go",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_helper.py",
    "testCases": [
      {
        "name": "TestHelper",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_extract_gene",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_seq",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_correct_file",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sorf_gff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_remove_all_content",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_remove_tmp",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_extract_gene",
                  "[]"
                ],
                [
                  "test_get_seq",
                  "[]"
                ],
                [
                  "test_get_correct_file",
                  "[]"
                ],
                [
                  "test_sorf_gff",
                  "[]"
                ],
                [
                  "test_remove_all_content",
                  "[]"
                ],
                [
                  "test_remove_tmp",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_extract_gene",
                  "false"
                ],
                [
                  "test_get_seq",
                  "false"
                ],
                [
                  "test_get_correct_file",
                  "false"
                ],
                [
                  "test_sorf_gff",
                  "false"
                ],
                [
                  "test_remove_all_content",
                  "false"
                ],
                [
                  "test_remove_tmp",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_extract_gene",
                  "false"
                ],
                [
                  "test_get_seq",
                  "false"
                ],
                [
                  "test_get_correct_file",
                  "false"
                ],
                [
                  "test_sorf_gff",
                  "false"
                ],
                [
                  "test_remove_all_content",
                  "false"
                ],
                [
                  "test_remove_tmp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_extract_gene",
                  "false"
                ],
                [
                  "test_get_seq",
                  "false"
                ],
                [
                  "test_get_correct_file",
                  "false"
                ],
                [
                  "test_sorf_gff",
                  "false"
                ],
                [
                  "test_remove_all_content",
                  "false"
                ],
                [
                  "test_remove_tmp",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_extract_gene",
                  "false"
                ],
                [
                  "test_get_seq",
                  "false"
                ],
                [
                  "test_get_correct_file",
                  "false"
                ],
                [
                  "test_sorf_gff",
                  "false"
                ],
                [
                  "test_remove_all_content",
                  "false"
                ],
                [
                  "test_remove_tmp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "false"
              ],
              [
                "test_get_seq",
                "false"
              ],
              [
                "test_get_correct_file",
                "false"
              ],
              [
                "test_sorf_gff",
                "false"
              ],
              [
                "test_remove_all_content",
                "false"
              ],
              [
                "test_remove_tmp",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "false"
              ],
              [
                "test_get_seq",
                "false"
              ],
              [
                "test_get_correct_file",
                "false"
              ],
              [
                "test_sorf_gff",
                "false"
              ],
              [
                "test_remove_all_content",
                "false"
              ],
              [
                "test_remove_tmp",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_extract_gene",
                [
                  "self.seq_file",
                  "self.gff_out",
                  "self.gff_file",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_seq",
                [
                  "self.rev_seq",
                  "self.gff_out"
                ]
              ],
              [
                "test_get_correct_file",
                [
                  "self.rev_seq",
                  "self.seq_file",
                  "self.example",
                  "self.gff_out",
                  "self.gff_file"
                ]
              ],
              [
                "test_sorf_gff",
                [
                  "self.rev_seq",
                  "self.seq_file",
                  "self.example"
                ]
              ],
              [
                "test_remove_all_content",
                [
                  "self.rev_seq",
                  "self.seq_file",
                  "self.example",
                  "self.gff_out"
                ]
              ],
              [
                "test_remove_tmp",
                [
                  "self.rev_seq",
                  "self.seq_file",
                  "self.example",
                  "self.gff_out",
                  "self.gff_file"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "false"
              ],
              [
                "test_get_seq",
                "false"
              ],
              [
                "test_get_correct_file",
                "false"
              ],
              [
                "test_sorf_gff",
                "false"
              ],
              [
                "test_remove_all_content",
                "false"
              ],
              [
                "test_remove_tmp",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "false"
              ],
              [
                "test_get_seq",
                "false"
              ],
              [
                "test_get_correct_file",
                "false"
              ],
              [
                "test_sorf_gff",
                "false"
              ],
              [
                "test_remove_all_content",
                "false"
              ],
              [
                "test_remove_tmp",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_extract_gene",
                  "0"
                ],
                [
                  "test_get_seq",
                  "0"
                ],
                [
                  "test_get_correct_file",
                  "0"
                ],
                [
                  "test_sorf_gff",
                  "0"
                ],
                [
                  "test_remove_all_content",
                  "0"
                ],
                [
                  "test_remove_tmp",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_extract_gene",
                  "0"
                ],
                [
                  "test_get_seq",
                  "0"
                ],
                [
                  "test_get_correct_file",
                  "0"
                ],
                [
                  "test_sorf_gff",
                  "0"
                ],
                [
                  "test_remove_all_content",
                  "0"
                ],
                [
                  "test_remove_tmp",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "false"
              ],
              [
                "test_get_seq",
                "false"
              ],
              [
                "test_get_correct_file",
                "false"
              ],
              [
                "test_sorf_gff",
                "false"
              ],
              [
                "test_remove_all_content",
                "false"
              ],
              [
                "test_remove_tmp",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "false"
              ],
              [
                "test_get_seq",
                "false"
              ],
              [
                "test_get_correct_file",
                "false"
              ],
              [
                "test_sorf_gff",
                "false"
              ],
              [
                "test_remove_all_content",
                "false"
              ],
              [
                "test_remove_tmp",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "2"
              ],
              [
                "test_get_seq",
                "1"
              ],
              [
                "test_get_correct_file",
                "1"
              ],
              [
                "test_sorf_gff",
                "1"
              ],
              [
                "test_remove_all_content",
                "4"
              ],
              [
                "test_remove_tmp",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                [
                  "new_seq",
                  "seq"
                ]
              ],
              [
                "test_get_seq",
                [
                  "out_file",
                  "datas",
                  "gff_file",
                  "lines"
                ]
              ],
              [
                "test_get_correct_file",
                [
                  "wig_r_file",
                  "filename",
                  "wig_f_file",
                  "gff_file",
                  "libs"
                ]
              ],
              [
                "test_sorf_gff",
                [
                  "out_file",
                  "datas"
                ]
              ],
              [
                "test_remove_all_content",
                [
                  "tmp1",
                  "tmp2"
                ]
              ],
              [
                "test_remove_tmp",
                [
                  "tmp1",
                  "tmp2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                [
                  "self.helper",
                  "self.rev_seq",
                  "self.example"
                ]
              ],
              [
                "test_get_seq",
                [
                  "self.helper",
                  "self.seq_file",
                  "self.example",
                  "self.gff_file",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_correct_file",
                [
                  "self.helper",
                  "self.test_folder"
                ]
              ],
              [
                "test_sorf_gff",
                [
                  "self.helper",
                  "self.gff_file",
                  "self.gff_out",
                  "self.test_folder"
                ]
              ],
              [
                "test_remove_all_content",
                [
                  "self.helper",
                  "self.gff_file",
                  "self.test_folder"
                ]
              ],
              [
                "test_remove_tmp",
                [
                  "self.helper",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3708329259101303,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_remove_tmp",
                  "test_extract_gene",
                  0.30499714066520933
                ],
                [
                  "test_get_correct_file",
                  "test_sorf_gff",
                  0.4074013013969954
                ],
                [
                  "test_get_correct_file",
                  "test_get_seq",
                  0.49541117612880337
                ],
                [
                  "test_remove_all_content",
                  "test_remove_tmp",
                  0.7450140076264559
                ],
                [
                  "test_get_correct_file",
                  "test_extract_gene",
                  0.3027169415351123
                ],
                [
                  "test_extract_gene",
                  "test_get_seq",
                  0.21027754579799968
                ],
                [
                  "test_sorf_gff",
                  "test_get_seq",
                  0.6701662532667128
                ],
                [
                  "test_remove_all_content",
                  "test_sorf_gff",
                  0.2972864021326343
                ],
                [
                  "test_remove_tmp",
                  "test_sorf_gff",
                  0.30983866769659335
                ],
                [
                  "test_remove_tmp",
                  "test_get_seq",
                  0.32444284226152503
                ],
                [
                  "test_remove_all_content",
                  "test_get_correct_file",
                  0.3447292232916481
                ],
                [
                  "test_sorf_gff",
                  "test_extract_gene",
                  0.19687480773953944
                ],
                [
                  "test_remove_all_content",
                  "test_extract_gene",
                  0.24788415499810637
                ],
                [
                  "test_remove_all_content",
                  "test_get_seq",
                  0.31862360920956045
                ],
                [
                  "test_remove_tmp",
                  "test_get_correct_file",
                  0.3868298149050586
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_gene",
                "false"
              ],
              [
                "test_get_seq",
                "false"
              ],
              [
                "test_get_correct_file",
                "false"
              ],
              [
                "test_sorf_gff",
                "false"
              ],
              [
                "test_remove_all_content",
                "false"
              ],
              [
                "test_remove_tmp",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_operon.py",
    "testCases": [
      {
        "name": "TestOperonDetection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_stat",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_detect_operon",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_stat",
                  "[]"
                ],
                [
                  "test_detect_operon",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_stat",
                  "true"
                ],
                [
                  "test_detect_operon",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_detect_operon",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_detect_operon",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_detect_operon",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "false"
              ],
              [
                "test_detect_operon",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "false"
              ],
              [
                "test_detect_operon",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_stat",
                [
                  "self.tsss",
                  "self.trans",
                  "self.utr3s",
                  "self.utr5s",
                  "self.gffs",
                  "self.out_gff",
                  "self.mock_args"
                ]
              ],
              [
                "test_detect_operon",
                [
                  "self.utr3s",
                  "self.utr5s",
                  "self.stat"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "false"
              ],
              [
                "test_detect_operon",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "false"
              ],
              [
                "test_detect_operon",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_stat",
                  "0"
                ],
                [
                  "test_detect_operon",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_stat",
                  "0"
                ],
                [
                  "test_detect_operon",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "false"
              ],
              [
                "test_detect_operon",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "false"
              ],
              [
                "test_detect_operon",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "1"
              ],
              [
                "test_detect_operon",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                [
                  "table_file",
                  "log"
                ]
              ],
              [
                "test_detect_operon",
                [
                  "args",
                  "log"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                [
                  "self.operon",
                  "self.mock",
                  "self.stat",
                  "self.output",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_operon",
                [
                  "self.operon",
                  "self.gffs",
                  "self.mock",
                  "self.tsss",
                  "self.out_gff",
                  "self.mock_args",
                  "self.trans",
                  "self.test_folder",
                  "self.output"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48524747941547286,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_detect_operon",
                  "test_stat",
                  0.48524747941547286
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_stat",
                "false"
              ],
              [
                "test_detect_operon",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_screen.py",
    "testCases": [
      {
        "name": "TestScreen",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_import_libs",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_screenshot",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_import_libs",
                  "[]"
                ],
                [
                  "test_screenshot",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_import_libs",
                  "false"
                ],
                [
                  "test_screenshot",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_import_libs",
                  "false"
                ],
                [
                  "test_screenshot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_import_libs",
                  "false"
                ],
                [
                  "test_screenshot",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_import_libs",
                  "false"
                ],
                [
                  "test_screenshot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "false"
              ],
              [
                "test_screenshot",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "false"
              ],
              [
                "test_screenshot",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_import_libs",
                [
                  "self.fasta",
                  "self.frag_wig",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder",
                  "self.output"
                ]
              ],
              [
                "test_screenshot",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "false"
              ],
              [
                "test_screenshot",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "false"
              ],
              [
                "test_screenshot",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_import_libs",
                  "0"
                ],
                [
                  "test_screenshot",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_import_libs",
                  "0"
                ],
                [
                  "test_screenshot",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "false"
              ],
              [
                "test_screenshot",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "false"
              ],
              [
                "test_screenshot",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "1"
              ],
              [
                "test_screenshot",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                [
                  "lib_dict",
                  "texs"
                ]
              ],
              [
                "test_screenshot",
                [
                  "args",
                  "log",
                  "datas",
                  "side_gff"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                [
                  "self.tex_wig",
                  "self.screen"
                ]
              ],
              [
                "test_screenshot",
                [
                  "self.fasta",
                  "self.frag_wig",
                  "self.mock_args",
                  "self.tex_wig",
                  "self.example",
                  "self.test_folder",
                  "self.output",
                  "self.screen"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3346020133036999,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_screenshot",
                  "test_import_libs",
                  0.3346020133036999
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_import_libs",
                "false"
              ],
              [
                "test_screenshot",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_circRNA.py",
    "testCases": [
      {
        "name": "TestCircRNADetection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_combine_read_bam",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_convert_sam2bam",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_merge_bed",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_align",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_deal_zip_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_combine_read_bam",
                  "[]"
                ],
                [
                  "test_convert_sam2bam",
                  "[]"
                ],
                [
                  "test_merge_bed",
                  "[]"
                ],
                [
                  "test_align",
                  "[]"
                ],
                [
                  "test_deal_zip_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_combine_read_bam",
                  "false"
                ],
                [
                  "test_convert_sam2bam",
                  "false"
                ],
                [
                  "test_merge_bed",
                  "false"
                ],
                [
                  "test_align",
                  "false"
                ],
                [
                  "test_deal_zip_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_combine_read_bam",
                  "false"
                ],
                [
                  "test_convert_sam2bam",
                  "false"
                ],
                [
                  "test_merge_bed",
                  "false"
                ],
                [
                  "test_align",
                  "false"
                ],
                [
                  "test_deal_zip_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_combine_read_bam",
                  "false"
                ],
                [
                  "test_convert_sam2bam",
                  "false"
                ],
                [
                  "test_merge_bed",
                  "false"
                ],
                [
                  "test_align",
                  "false"
                ],
                [
                  "test_deal_zip_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_combine_read_bam",
                  "false"
                ],
                [
                  "test_convert_sam2bam",
                  "false"
                ],
                [
                  "test_merge_bed",
                  "false"
                ],
                [
                  "test_align",
                  "false"
                ],
                [
                  "test_deal_zip_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "false"
              ],
              [
                "test_convert_sam2bam",
                "false"
              ],
              [
                "test_merge_bed",
                "false"
              ],
              [
                "test_align",
                "false"
              ],
              [
                "test_deal_zip_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "false"
              ],
              [
                "test_convert_sam2bam",
                "false"
              ],
              [
                "test_merge_bed",
                "false"
              ],
              [
                "test_align",
                "false"
              ],
              [
                "test_deal_zip_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_combine_read_bam",
                [
                  "self.gff_folder",
                  "self.splice_folder",
                  "self.samtools",
                  "self.example",
                  "self.fasta_folder",
                  "self.test_folder",
                  "self.segemehl",
                  "self.mock_args",
                  "self.alignment_path",
                  "self.read_folder"
                ]
              ],
              [
                "test_convert_sam2bam",
                [
                  "self.gff_folder",
                  "self.splice_folder",
                  "self.out_folder",
                  "self.fasta_folder",
                  "self.segemehl",
                  "self.mock_args",
                  "self.alignment_path",
                  "self.read_folder"
                ]
              ],
              [
                "test_merge_bed",
                [
                  "self.gff_folder",
                  "self.samtools",
                  "self.test_folder",
                  "self.segemehl",
                  "self.mock_args",
                  "self.alignment_path",
                  "self.read_folder"
                ]
              ],
              [
                "test_align",
                [
                  "self.splice_folder",
                  "self.samtools",
                  "self.alignment_path"
                ]
              ],
              [
                "test_deal_zip_file",
                [
                  "self.gff_folder",
                  "self.splice_folder",
                  "self.samtools",
                  "self.out_folder",
                  "self.fasta_folder",
                  "self.segemehl",
                  "self.mock_args",
                  "self.alignment_path",
                  "self.read_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "false"
              ],
              [
                "test_convert_sam2bam",
                "false"
              ],
              [
                "test_merge_bed",
                "false"
              ],
              [
                "test_align",
                "false"
              ],
              [
                "test_deal_zip_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "false"
              ],
              [
                "test_convert_sam2bam",
                "false"
              ],
              [
                "test_merge_bed",
                "false"
              ],
              [
                "test_align",
                "false"
              ],
              [
                "test_deal_zip_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_combine_read_bam",
                  "0"
                ],
                [
                  "test_convert_sam2bam",
                  "0"
                ],
                [
                  "test_merge_bed",
                  "0"
                ],
                [
                  "test_align",
                  "0"
                ],
                [
                  "test_deal_zip_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_combine_read_bam",
                  "0"
                ],
                [
                  "test_convert_sam2bam",
                  "0"
                ],
                [
                  "test_merge_bed",
                  "0"
                ],
                [
                  "test_align",
                  "0"
                ],
                [
                  "test_deal_zip_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "false"
              ],
              [
                "test_convert_sam2bam",
                "false"
              ],
              [
                "test_merge_bed",
                "false"
              ],
              [
                "test_align",
                "false"
              ],
              [
                "test_deal_zip_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "false"
              ],
              [
                "test_convert_sam2bam",
                "false"
              ],
              [
                "test_merge_bed",
                "false"
              ],
              [
                "test_align",
                "false"
              ],
              [
                "test_deal_zip_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "1"
              ],
              [
                "test_convert_sam2bam",
                "5"
              ],
              [
                "test_merge_bed",
                "10"
              ],
              [
                "test_align",
                "2"
              ],
              [
                "test_deal_zip_file",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_combine_read_bam",
                [
                  "read_datas",
                  "bam_files",
                  "bam_datas"
                ]
              ],
              [
                "test_convert_sam2bam",
                [
                  "bam_files",
                  "log",
                  "sam2",
                  "remove_ones",
                  "sam1",
                  "align_files",
                  "convert_ones",
                  "bam"
                ]
              ],
              [
                "test_merge_bed",
                [
                  "tran2",
                  "prefixs",
                  "header3",
                  "tran1",
                  "header2",
                  "header1",
                  "fasta2",
                  "fasta1",
                  "splice2",
                  "splice3",
                  "splice1",
                  "tran3"
                ]
              ],
              [
                "test_align",
                [
                  "args",
                  "read_datas",
                  "prefixs",
                  "log",
                  "fasta2",
                  "fasta1",
                  "read2",
                  "read1",
                  "align_results"
                ]
              ],
              [
                "test_deal_zip_file",
                [
                  "out2",
                  "log",
                  "out1",
                  "reads"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                [
                  "self.circ",
                  "self.out_folder"
                ]
              ],
              [
                "test_convert_sam2bam",
                [
                  "self.circ",
                  "self.samtools",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_bed",
                [
                  "self.circ",
                  "self.splice_folder",
                  "self.example",
                  "self.out_folder",
                  "self.fasta_folder"
                ]
              ],
              [
                "test_align",
                [
                  "self.segemehl",
                  "self.circ",
                  "self.mock_args",
                  "self.gff_folder",
                  "self.example",
                  "self.out_folder",
                  "self.fasta_folder",
                  "self.read_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_deal_zip_file",
                [
                  "self.circ",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.379066463624046,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_deal_zip_file",
                  "test_combine_read_bam",
                  0.17604036995258704
                ],
                [
                  "test_align",
                  "test_combine_read_bam",
                  0.32322518259384686
                ],
                [
                  "test_convert_sam2bam",
                  "test_merge_bed",
                  0.41596053962371793
                ],
                [
                  "test_convert_sam2bam",
                  "test_combine_read_bam",
                  0.28571459557257434
                ],
                [
                  "test_align",
                  "test_convert_sam2bam",
                  0.5091259740707413
                ],
                [
                  "test_merge_bed",
                  "test_combine_read_bam",
                  0.1349406697047341
                ],
                [
                  "test_deal_zip_file",
                  "test_convert_sam2bam",
                  0.3597384670922507
                ],
                [
                  "test_deal_zip_file",
                  "test_merge_bed",
                  0.5016571393167055
                ],
                [
                  "test_deal_zip_file",
                  "test_align",
                  0.4970282847983351
                ],
                [
                  "test_align",
                  "test_merge_bed",
                  0.5872334135149669
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_combine_read_bam",
                "false"
              ],
              [
                "test_convert_sam2bam",
                "false"
              ],
              [
                "test_merge_bed",
                "false"
              ],
              [
                "test_align",
                "false"
              ],
              [
                "test_deal_zip_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_fill_gap.py",
    "testCases": [
      {
        "name": "TestFillGap",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_overlap",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_uni",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_longer_ta",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_overlap",
                  "[]"
                ],
                [
                  "test_uni",
                  "[]"
                ],
                [
                  "test_longer_ta",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_overlap",
                  "false"
                ],
                [
                  "test_uni",
                  "false"
                ],
                [
                  "test_longer_ta",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_overlap",
                  "false"
                ],
                [
                  "test_uni",
                  "false"
                ],
                [
                  "test_longer_ta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_overlap",
                  "false"
                ],
                [
                  "test_uni",
                  "false"
                ],
                [
                  "test_longer_ta",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_overlap",
                  "false"
                ],
                [
                  "test_uni",
                  "false"
                ],
                [
                  "test_longer_ta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "false"
              ],
              [
                "test_uni",
                "false"
              ],
              [
                "test_longer_ta",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "false"
              ],
              [
                "test_uni",
                "false"
              ],
              [
                "test_longer_ta",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_overlap",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_uni",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_longer_ta",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "false"
              ],
              [
                "test_uni",
                "false"
              ],
              [
                "test_longer_ta",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "false"
              ],
              [
                "test_uni",
                "false"
              ],
              [
                "test_longer_ta",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_overlap",
                  "0"
                ],
                [
                  "test_uni",
                  "0"
                ],
                [
                  "test_longer_ta",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_overlap",
                  "0"
                ],
                [
                  "test_uni",
                  "0"
                ],
                [
                  "test_longer_ta",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "false"
              ],
              [
                "test_uni",
                "false"
              ],
              [
                "test_longer_ta",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "false"
              ],
              [
                "test_uni",
                "false"
              ],
              [
                "test_longer_ta",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "1"
              ],
              [
                "test_uni",
                "1"
              ],
              [
                "test_longer_ta",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                [
                  "print_list",
                  "attributes_ref",
                  "refs",
                  "datas",
                  "attributes",
                  "out"
                ]
              ],
              [
                "test_uni",
                [
                  "attributes_ref",
                  "refs",
                  "datas",
                  "attributes",
                  "out"
                ]
              ],
              [
                "test_longer_ta",
                [
                  "attributes_ref",
                  "out_file",
                  "refs",
                  "datas",
                  "attributes",
                  "ta_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                [
                  "self.example"
                ]
              ],
              [
                "test_uni",
                [
                  "self.example"
                ]
              ],
              [
                "test_longer_ta",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6726307742133333,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_overlap",
                  "test_longer_ta",
                  0.5791803928233927
                ],
                [
                  "test_uni",
                  "test_longer_ta",
                  0.5835803609922535
                ],
                [
                  "test_uni",
                  "test_overlap",
                  0.8551315688243535
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_overlap",
                "false"
              ],
              [
                "test_uni",
                "false"
              ],
              [
                "test_longer_ta",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_optimize.py",
    "testCases": [
      {
        "name": "TestOptimizeTSS",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_optimize_tss",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_optimize_tss",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_optimize_tss",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_optimize_tss",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_optimize_tss",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_optimize_tss",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_optimize_tss",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_optimize_tss",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                [
                  "args",
                  "log"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                [
                  "self.gffs",
                  "self.wigs",
                  "self.mock_args",
                  "self.manuals",
                  "self.fastas",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_optimize_tss",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_plot_PPI.py",
    "testCases": [
      {
        "name": "TestPlotPPI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_score_compare",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_assign_score_below",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_plot_ppi",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_modify_label",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_plot",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_node",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_best",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_best_assign_attributes",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_create_node",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_score_compare",
                  "[]"
                ],
                [
                  "test_assign_score_below",
                  "[]"
                ],
                [
                  "test_plot_ppi",
                  "[]"
                ],
                [
                  "test_modify_label",
                  "[]"
                ],
                [
                  "test_plot",
                  "[]"
                ],
                [
                  "test_node",
                  "[]"
                ],
                [
                  "test_get_best",
                  "[]"
                ],
                [
                  "test_best_assign_attributes",
                  "[]"
                ],
                [
                  "test_create_node",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_score_compare",
                  "false"
                ],
                [
                  "test_assign_score_below",
                  "false"
                ],
                [
                  "test_plot_ppi",
                  "false"
                ],
                [
                  "test_modify_label",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_node",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_best_assign_attributes",
                  "false"
                ],
                [
                  "test_create_node",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_score_compare",
                  "false"
                ],
                [
                  "test_assign_score_below",
                  "false"
                ],
                [
                  "test_plot_ppi",
                  "false"
                ],
                [
                  "test_modify_label",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_node",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_best_assign_attributes",
                  "false"
                ],
                [
                  "test_create_node",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_score_compare",
                  "false"
                ],
                [
                  "test_assign_score_below",
                  "false"
                ],
                [
                  "test_plot_ppi",
                  "false"
                ],
                [
                  "test_modify_label",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_node",
                  "false"
                ],
                [
                  "test_get_best",
                  "true"
                ],
                [
                  "test_best_assign_attributes",
                  "false"
                ],
                [
                  "test_create_node",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_score_compare",
                  "false"
                ],
                [
                  "test_assign_score_below",
                  "false"
                ],
                [
                  "test_plot_ppi",
                  "false"
                ],
                [
                  "test_modify_label",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_node",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_best_assign_attributes",
                  "false"
                ],
                [
                  "test_create_node",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "false"
              ],
              [
                "test_assign_score_below",
                "false"
              ],
              [
                "test_plot_ppi",
                "false"
              ],
              [
                "test_modify_label",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_node",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_best_assign_attributes",
                "false"
              ],
              [
                "test_create_node",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "false"
              ],
              [
                "test_assign_score_below",
                "false"
              ],
              [
                "test_plot_ppi",
                "false"
              ],
              [
                "test_modify_label",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_node",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_best_assign_attributes",
                "false"
              ],
              [
                "test_create_node",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_score_compare",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_assign_score_below",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_plot_ppi",
                [
                  "self.mock"
                ]
              ],
              [
                "test_modify_label",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_plot",
                [
                  "self.example"
                ]
              ],
              [
                "test_node",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_best",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_best_assign_attributes",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_create_node",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "false"
              ],
              [
                "test_assign_score_below",
                "false"
              ],
              [
                "test_plot_ppi",
                "false"
              ],
              [
                "test_modify_label",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_node",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_best_assign_attributes",
                "false"
              ],
              [
                "test_create_node",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "false"
              ],
              [
                "test_assign_score_below",
                "false"
              ],
              [
                "test_plot_ppi",
                "false"
              ],
              [
                "test_modify_label",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_node",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_best_assign_attributes",
                "false"
              ],
              [
                "test_create_node",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_score_compare",
                  "0"
                ],
                [
                  "test_assign_score_below",
                  "0"
                ],
                [
                  "test_plot_ppi",
                  "0"
                ],
                [
                  "test_modify_label",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ],
                [
                  "test_node",
                  "0"
                ],
                [
                  "test_get_best",
                  "0"
                ],
                [
                  "test_best_assign_attributes",
                  "0"
                ],
                [
                  "test_create_node",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_score_compare",
                  "0"
                ],
                [
                  "test_assign_score_below",
                  "0"
                ],
                [
                  "test_plot_ppi",
                  "0"
                ],
                [
                  "test_modify_label",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ],
                [
                  "test_node",
                  "0"
                ],
                [
                  "test_get_best",
                  "0"
                ],
                [
                  "test_best_assign_attributes",
                  "0"
                ],
                [
                  "test_create_node",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "false"
              ],
              [
                "test_assign_score_below",
                "false"
              ],
              [
                "test_plot_ppi",
                "false"
              ],
              [
                "test_modify_label",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_node",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_best_assign_attributes",
                "false"
              ],
              [
                "test_create_node",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "false"
              ],
              [
                "test_assign_score_below",
                "false"
              ],
              [
                "test_plot_ppi",
                "false"
              ],
              [
                "test_modify_label",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_node",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_best_assign_attributes",
                "false"
              ],
              [
                "test_create_node",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "4"
              ],
              [
                "test_assign_score_below",
                "2"
              ],
              [
                "test_plot_ppi",
                "1"
              ],
              [
                "test_modify_label",
                "1"
              ],
              [
                "test_plot",
                "1"
              ],
              [
                "test_node",
                "4"
              ],
              [
                "test_get_best",
                "8"
              ],
              [
                "test_best_assign_attributes",
                "2"
              ],
              [
                "test_create_node",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                [
                  "score",
                  "scores",
                  "ppi"
                ]
              ],
              [
                "test_assign_score_below",
                [
                  "pre_ppi",
                  "scores",
                  "ppis"
                ]
              ],
              [
                "test_plot_ppi",
                [
                  "strain",
                  "ppi_file"
                ]
              ],
              [
                "test_modify_label",
                [
                  "new_labels",
                  "labels2"
                ]
              ],
              [
                "test_plot",
                [
                  "center",
                  "ppis"
                ]
              ],
              [
                "test_node",
                [
                  "item",
                  "nodes",
                  "center",
                  "labels2",
                  "labels1",
                  "colors"
                ]
              ],
              [
                "test_get_best",
                [
                  "pre_ppi",
                  "ppi",
                  "row"
                ]
              ],
              [
                "test_best_assign_attributes",
                [
                  "check_na",
                  "pre_ppi",
                  "ppi",
                  "first"
                ]
              ],
              [
                "test_create_node",
                [
                  "check_na",
                  "pre_ppi",
                  "nodes",
                  "scores",
                  "center",
                  "labels2",
                  "edges",
                  "labels1",
                  "ppis",
                  "colors"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_score_compare",
                []
              ],
              [
                "test_assign_score_below",
                []
              ],
              [
                "test_plot_ppi",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_modify_label",
                []
              ],
              [
                "test_plot",
                [
                  "self.mock",
                  "self.test_folder"
                ]
              ],
              [
                "test_node",
                []
              ],
              [
                "test_get_best",
                []
              ],
              [
                "test_best_assign_attributes",
                [
                  "self.mock"
                ]
              ],
              [
                "test_create_node",
                [
                  "self.mock"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5200329599370683,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_best",
                  "test_plot_ppi",
                  0.3399869515423117
                ],
                [
                  "test_score_compare",
                  "test_plot_ppi",
                  0.5479988483589521
                ],
                [
                  "test_best_assign_attributes",
                  "test_score_compare",
                  0.8449536312405783
                ],
                [
                  "test_plot",
                  "test_get_best",
                  0.33472591600209745
                ],
                [
                  "test_create_node",
                  "test_plot_ppi",
                  0.5652857916410022
                ],
                [
                  "test_node",
                  "test_plot",
                  0.4062804138033261
                ],
                [
                  "test_create_node",
                  "test_score_compare",
                  0.7605350091440874
                ],
                [
                  "test_assign_score_below",
                  "test_plot_ppi",
                  0.5102775530779895
                ],
                [
                  "test_best_assign_attributes",
                  "test_modify_label",
                  0.4745311135524759
                ],
                [
                  "test_modify_label",
                  "test_plot_ppi",
                  0.35598391850938726
                ],
                [
                  "test_create_node",
                  "test_get_best",
                  0.4109672366984041
                ],
                [
                  "test_score_compare",
                  "test_get_best",
                  0.4742132655720423
                ],
                [
                  "test_modify_label",
                  "test_get_best",
                  0.25973375716866703
                ],
                [
                  "test_assign_score_below",
                  "test_get_best",
                  0.600866670101042
                ],
                [
                  "test_plot",
                  "test_plot_ppi",
                  0.5477378405822371
                ],
                [
                  "test_node",
                  "test_best_assign_attributes",
                  0.37915786126715584
                ],
                [
                  "test_best_assign_attributes",
                  "test_plot_ppi",
                  0.5712911922773065
                ],
                [
                  "test_modify_label",
                  "test_plot",
                  0.366626279689321
                ],
                [
                  "test_node",
                  "test_plot_ppi",
                  0.26482044885142486
                ],
                [
                  "test_node",
                  "test_modify_label",
                  0.15547909447781452
                ],
                [
                  "test_score_compare",
                  "test_assign_score_below",
                  0.85063215328879
                ],
                [
                  "test_create_node",
                  "test_assign_score_below",
                  0.6756020236089292
                ],
                [
                  "test_node",
                  "test_get_best",
                  0.4207281239388879
                ],
                [
                  "test_best_assign_attributes",
                  "test_plot",
                  0.7344876232815886
                ],
                [
                  "test_best_assign_attributes",
                  "test_get_best",
                  0.5369319312175567
                ],
                [
                  "test_modify_label",
                  "test_assign_score_below",
                  0.38946667410967956
                ],
                [
                  "test_node",
                  "test_create_node",
                  0.378475218496229
                ],
                [
                  "test_node",
                  "test_score_compare",
                  0.37141681498075785
                ],
                [
                  "test_plot",
                  "test_assign_score_below",
                  0.5636549554580605
                ],
                [
                  "test_plot",
                  "test_score_compare",
                  0.6120243574774106
                ],
                [
                  "test_create_node",
                  "test_modify_label",
                  0.820887530344509
                ],
                [
                  "test_best_assign_attributes",
                  "test_create_node",
                  0.8096473591347324
                ],
                [
                  "test_create_node",
                  "test_plot",
                  0.7005068482642476
                ],
                [
                  "test_node",
                  "test_assign_score_below",
                  0.4367597462079018
                ],
                [
                  "test_modify_label",
                  "test_score_compare",
                  0.4624960036619361
                ],
                [
                  "test_best_assign_attributes",
                  "test_assign_score_below",
                  0.7860164007056202
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_score_compare",
                "false"
              ],
              [
                "test_assign_score_below",
                "false"
              ],
              [
                "test_plot_ppi",
                "false"
              ],
              [
                "test_modify_label",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_node",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_best_assign_attributes",
                "false"
              ],
              [
                "test_create_node",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "tests_\u0026_test_sublocal.py",
    "testCases": [
      {
        "name": "TestSubLocal",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_protein_seq",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_merge_and_stat",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_run_psortb",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_compare_cds_tran",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_protein_seq",
                  "[]"
                ],
                [
                  "test_merge_and_stat",
                  "[]"
                ],
                [
                  "test_run_psortb",
                  "[]"
                ],
                [
                  "test_compare_cds_tran",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_protein_seq",
                  "false"
                ],
                [
                  "test_merge_and_stat",
                  "false"
                ],
                [
                  "test_run_psortb",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_protein_seq",
                  "false"
                ],
                [
                  "test_merge_and_stat",
                  "false"
                ],
                [
                  "test_run_psortb",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_protein_seq",
                  "false"
                ],
                [
                  "test_merge_and_stat",
                  "false"
                ],
                [
                  "test_run_psortb",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_protein_seq",
                  "false"
                ],
                [
                  "test_merge_and_stat",
                  "false"
                ],
                [
                  "test_run_psortb",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "false"
              ],
              [
                "test_merge_and_stat",
                "false"
              ],
              [
                "test_run_psortb",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "false"
              ],
              [
                "test_merge_and_stat",
                "false"
              ],
              [
                "test_run_psortb",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_protein_seq",
                [
                  "self.mock",
                  "self.stat",
                  "self.out"
                ]
              ],
              [
                "test_merge_and_stat",
                [
                  "self.mock_args",
                  "self.fastas",
                  "self.trans",
                  "self.example"
                ]
              ],
              [
                "test_run_psortb",
                [
                  "self.gffs",
                  "self.stat",
                  "self.fastas",
                  "self.trans",
                  "self.example"
                ]
              ],
              [
                "test_compare_cds_tran",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.stat",
                  "self.fastas",
                  "self.out",
                  "self.trans"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "false"
              ],
              [
                "test_merge_and_stat",
                "false"
              ],
              [
                "test_run_psortb",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "false"
              ],
              [
                "test_merge_and_stat",
                "false"
              ],
              [
                "test_run_psortb",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_protein_seq",
                  "0"
                ],
                [
                  "test_merge_and_stat",
                  "0"
                ],
                [
                  "test_run_psortb",
                  "0"
                ],
                [
                  "test_compare_cds_tran",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_protein_seq",
                  "0"
                ],
                [
                  "test_merge_and_stat",
                  "0"
                ],
                [
                  "test_run_psortb",
                  "0"
                ],
                [
                  "test_compare_cds_tran",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "false"
              ],
              [
                "test_merge_and_stat",
                "false"
              ],
              [
                "test_run_psortb",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "false"
              ],
              [
                "test_merge_and_stat",
                "false"
              ],
              [
                "test_run_psortb",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "1"
              ],
              [
                "test_merge_and_stat",
                "2"
              ],
              [
                "test_run_psortb",
                "2"
              ],
              [
                "test_compare_cds_tran",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                [
                  "args",
                  "log",
                  "gff",
                  "prefix"
                ]
              ],
              [
                "test_merge_and_stat",
                [
                  "log"
                ]
              ],
              [
                "test_run_psortb",
                [
                  "args",
                  "log",
                  "tmp_result"
                ]
              ],
              [
                "test_compare_cds_tran",
                [
                  "tran_file",
                  "string",
                  "log",
                  "datas",
                  "gff_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                [
                  "self.gffs",
                  "self.mock_args",
                  "self.sub",
                  "self.fastas",
                  "self.trans",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_and_stat",
                [
                  "self.gffs",
                  "self.mock",
                  "self.stat",
                  "self.sub",
                  "self.out",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_psortb",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.sub",
                  "self.out",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_cds_tran",
                [
                  "self.sub",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4215433993429523,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_protein_seq",
                  "test_compare_cds_tran",
                  0.491499204857538
                ],
                [
                  "test_get_protein_seq",
                  "test_run_psortb",
                  0.5051535976225221
                ],
                [
                  "test_run_psortb",
                  "test_compare_cds_tran",
                  0.3872234771151537
                ],
                [
                  "test_merge_and_stat",
                  "test_compare_cds_tran",
                  0.35017513135947076
                ],
                [
                  "test_get_protein_seq",
                  "test_merge_and_stat",
                  0.42810753271195706
                ],
                [
                  "test_run_psortb",
                  "test_merge_and_stat",
                  0.36710145239107234
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_protein_seq",
                "false"
              ],
              [
                "test_merge_and_stat",
                "false"
              ],
              [
                "test_run_psortb",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_color_png.py",
    "testCases": [
      {
        "name": "TestColorPng",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_generate_color_png",
                  "[PyCallExpression: self.assertListEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_generate_color_png",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_generate_color_png",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_generate_color_png",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_generate_color_png",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_generate_color_png",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_generate_color_png",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_generate_color_png",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                [
                  "data",
                  "log"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                [
                  "self.mock",
                  "self.test_folder",
                  "self.color"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_generate_color_png",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_converter.py",
    "testCases": [
      {
        "name": "TestConverter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_convert_gff2rntptt",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_convert_embl2gff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_parser_embl_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_print_rntptt_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_multi_tss_class",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_convert_mastertable2gff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_srna2pttrnt",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_convert_circ2gff",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_multi_embl_pos",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_convert_gff2rntptt",
                  "[]"
                ],
                [
                  "test_convert_embl2gff",
                  "[]"
                ],
                [
                  "test_parser_embl_data",
                  "[]"
                ],
                [
                  "test_print_rntptt_file",
                  "[]"
                ],
                [
                  "test_multi_tss_class",
                  "[]"
                ],
                [
                  "test_convert_mastertable2gff",
                  "[]"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "[]"
                ],
                [
                  "test_srna2pttrnt",
                  "[]"
                ],
                [
                  "test_convert_circ2gff",
                  "[]"
                ],
                [
                  "test_multi_embl_pos",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_convert_embl2gff",
                  "true"
                ],
                [
                  "test_parser_embl_data",
                  "true"
                ],
                [
                  "test_print_rntptt_file",
                  "true"
                ],
                [
                  "test_multi_tss_class",
                  "true"
                ],
                [
                  "test_convert_mastertable2gff",
                  "false"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "false"
                ],
                [
                  "test_srna2pttrnt",
                  "false"
                ],
                [
                  "test_convert_circ2gff",
                  "true"
                ],
                [
                  "test_multi_embl_pos",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_convert_embl2gff",
                  "false"
                ],
                [
                  "test_parser_embl_data",
                  "false"
                ],
                [
                  "test_print_rntptt_file",
                  "false"
                ],
                [
                  "test_multi_tss_class",
                  "false"
                ],
                [
                  "test_convert_mastertable2gff",
                  "false"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "false"
                ],
                [
                  "test_srna2pttrnt",
                  "false"
                ],
                [
                  "test_convert_circ2gff",
                  "false"
                ],
                [
                  "test_multi_embl_pos",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_convert_embl2gff",
                  "false"
                ],
                [
                  "test_parser_embl_data",
                  "false"
                ],
                [
                  "test_print_rntptt_file",
                  "false"
                ],
                [
                  "test_multi_tss_class",
                  "false"
                ],
                [
                  "test_convert_mastertable2gff",
                  "false"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "false"
                ],
                [
                  "test_srna2pttrnt",
                  "false"
                ],
                [
                  "test_convert_circ2gff",
                  "true"
                ],
                [
                  "test_multi_embl_pos",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_convert_embl2gff",
                  "false"
                ],
                [
                  "test_parser_embl_data",
                  "false"
                ],
                [
                  "test_print_rntptt_file",
                  "false"
                ],
                [
                  "test_multi_tss_class",
                  "false"
                ],
                [
                  "test_convert_mastertable2gff",
                  "false"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "false"
                ],
                [
                  "test_srna2pttrnt",
                  "false"
                ],
                [
                  "test_convert_circ2gff",
                  "false"
                ],
                [
                  "test_multi_embl_pos",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_convert_embl2gff",
                "false"
              ],
              [
                "test_parser_embl_data",
                "false"
              ],
              [
                "test_print_rntptt_file",
                "false"
              ],
              [
                "test_multi_tss_class",
                "false"
              ],
              [
                "test_convert_mastertable2gff",
                "false"
              ],
              [
                "test_convert_transtermhp2gff",
                "false"
              ],
              [
                "test_srna2pttrnt",
                "false"
              ],
              [
                "test_convert_circ2gff",
                "false"
              ],
              [
                "test_multi_embl_pos",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_convert_embl2gff",
                "false"
              ],
              [
                "test_parser_embl_data",
                "false"
              ],
              [
                "test_print_rntptt_file",
                "false"
              ],
              [
                "test_multi_tss_class",
                "false"
              ],
              [
                "test_convert_mastertable2gff",
                "false"
              ],
              [
                "test_convert_transtermhp2gff",
                "false"
              ],
              [
                "test_srna2pttrnt",
                "false"
              ],
              [
                "test_convert_circ2gff",
                "false"
              ],
              [
                "test_multi_embl_pos",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_convert_gff2rntptt",
                [
                  "self.converter._read_file",
                  "self.embl_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.tss_file",
                  "self.mock_args",
                  "self.multi_embl",
                  "self.mastertable",
                  "self.circ_all"
                ]
              ],
              [
                "test_convert_embl2gff",
                [
                  "self.converter._read_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.tss_file",
                  "self.mock_args",
                  "self.multi_embl",
                  "self.mastertable",
                  "self.gff_file",
                  "self.circ_all"
                ]
              ],
              [
                "test_parser_embl_data",
                [
                  "self.converter._read_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.tss_file",
                  "self.mock_args",
                  "self.mastertable",
                  "self.gff_file",
                  "self.circ_all"
                ]
              ],
              [
                "test_print_rntptt_file",
                [
                  "self.converter._read_file",
                  "self.embl_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.test_folder",
                  "self.tss_file",
                  "self.mock_args",
                  "self.multi_embl",
                  "self.mastertable",
                  "self.gff_file",
                  "self.circ_all"
                ]
              ],
              [
                "test_multi_tss_class",
                [
                  "self.converter._read_file",
                  "self.embl_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.tss_file",
                  "self.mock_args",
                  "self.multi_embl",
                  "self.gff_file",
                  "self.circ_all"
                ]
              ],
              [
                "test_convert_mastertable2gff",
                [
                  "self.converter._read_file",
                  "self.embl_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.mock_args",
                  "self.multi_embl",
                  "self.gff_file",
                  "self.circ_all"
                ]
              ],
              [
                "test_convert_transtermhp2gff",
                [
                  "self.converter._read_file",
                  "self.embl_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.example",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.circ_best",
                  "self.tss_file",
                  "self.mock_args",
                  "self.multi_embl",
                  "self.mastertable",
                  "self.gff_file",
                  "self.circ_all"
                ]
              ],
              [
                "test_srna2pttrnt",
                [
                  "self.converter._read_file",
                  "self.embl_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.tss_file",
                  "self.mock_args",
                  "self.multi_embl",
                  "self.mastertable",
                  "self.circ_all"
                ]
              ],
              [
                "test_convert_circ2gff",
                [
                  "self.converter._read_file",
                  "self.embl_file",
                  "self.fasta_file",
                  "self.converter.gff3parser",
                  "self.embl_out",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.term_file",
                  "self.tss_file",
                  "self.multi_embl",
                  "self.mastertable",
                  "self.gff_file"
                ]
              ],
              [
                "test_multi_embl_pos",
                [
                  "self.converter._read_file",
                  "self.fasta_file",
                  "self.circ_file",
                  "self.converter.gff3parser",
                  "self.converter._print_rntptt_title",
                  "self.converter.tsspredator",
                  "self.srna_out",
                  "self.ptt_out",
                  "self.transterm",
                  "self.example",
                  "self.gff_out",
                  "self.rnt_out",
                  "self.term_file",
                  "self.circ_best",
                  "self.test_folder",
                  "self.tss_file",
                  "self.mock_args",
                  "self.mastertable",
                  "self.gff_file",
                  "self.circ_all"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_convert_embl2gff",
                "false"
              ],
              [
                "test_parser_embl_data",
                "false"
              ],
              [
                "test_print_rntptt_file",
                "false"
              ],
              [
                "test_multi_tss_class",
                "false"
              ],
              [
                "test_convert_mastertable2gff",
                "false"
              ],
              [
                "test_convert_transtermhp2gff",
                "false"
              ],
              [
                "test_srna2pttrnt",
                "false"
              ],
              [
                "test_convert_circ2gff",
                "false"
              ],
              [
                "test_multi_embl_pos",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_convert_embl2gff",
                "false"
              ],
              [
                "test_parser_embl_data",
                "false"
              ],
              [
                "test_print_rntptt_file",
                "false"
              ],
              [
                "test_multi_tss_class",
                "false"
              ],
              [
                "test_convert_mastertable2gff",
                "false"
              ],
              [
                "test_convert_transtermhp2gff",
                "false"
              ],
              [
                "test_srna2pttrnt",
                "false"
              ],
              [
                "test_convert_circ2gff",
                "false"
              ],
              [
                "test_multi_embl_pos",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_convert_gff2rntptt",
                  "0"
                ],
                [
                  "test_convert_embl2gff",
                  "0"
                ],
                [
                  "test_parser_embl_data",
                  "0"
                ],
                [
                  "test_print_rntptt_file",
                  "0"
                ],
                [
                  "test_multi_tss_class",
                  "0"
                ],
                [
                  "test_convert_mastertable2gff",
                  "0"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "0"
                ],
                [
                  "test_srna2pttrnt",
                  "0"
                ],
                [
                  "test_convert_circ2gff",
                  "0"
                ],
                [
                  "test_multi_embl_pos",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_convert_gff2rntptt",
                  "0"
                ],
                [
                  "test_convert_embl2gff",
                  "0"
                ],
                [
                  "test_parser_embl_data",
                  "0"
                ],
                [
                  "test_print_rntptt_file",
                  "0"
                ],
                [
                  "test_multi_tss_class",
                  "0"
                ],
                [
                  "test_convert_mastertable2gff",
                  "0"
                ],
                [
                  "test_convert_transtermhp2gff",
                  "0"
                ],
                [
                  "test_srna2pttrnt",
                  "0"
                ],
                [
                  "test_convert_circ2gff",
                  "0"
                ],
                [
                  "test_multi_embl_pos",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_convert_embl2gff",
                "false"
              ],
              [
                "test_parser_embl_data",
                "false"
              ],
              [
                "test_print_rntptt_file",
                "false"
              ],
              [
                "test_multi_tss_class",
                "false"
              ],
              [
                "test_convert_mastertable2gff",
                "false"
              ],
              [
                "test_convert_transtermhp2gff",
                "false"
              ],
              [
                "test_srna2pttrnt",
                "false"
              ],
              [
                "test_convert_circ2gff",
                "false"
              ],
              [
                "test_multi_embl_pos",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_convert_embl2gff",
                "false"
              ],
              [
                "test_parser_embl_data",
                "false"
              ],
              [
                "test_print_rntptt_file",
                "false"
              ],
              [
                "test_multi_tss_class",
                "false"
              ],
              [
                "test_convert_mastertable2gff",
                "false"
              ],
              [
                "test_convert_transtermhp2gff",
                "false"
              ],
              [
                "test_srna2pttrnt",
                "false"
              ],
              [
                "test_convert_circ2gff",
                "false"
              ],
              [
                "test_multi_embl_pos",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "3"
              ],
              [
                "test_convert_embl2gff",
                "1"
              ],
              [
                "test_parser_embl_data",
                "3"
              ],
              [
                "test_print_rntptt_file",
                "2"
              ],
              [
                "test_multi_tss_class",
                "1"
              ],
              [
                "test_convert_mastertable2gff",
                "1"
              ],
              [
                "test_convert_transtermhp2gff",
                "1"
              ],
              [
                "test_srna2pttrnt",
                "1"
              ],
              [
                "test_convert_circ2gff",
                "2"
              ],
              [
                "test_multi_embl_pos",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                [
                  "srna_input_file",
                  "rnt_file",
                  "ptt_file",
                  "gff_file",
                  "srna_output_file",
                  "fasta_file"
                ]
              ],
              [
                "test_convert_embl2gff",
                [
                  "embl_file",
                  "datas",
                  "gff_file"
                ]
              ],
              [
                "test_parser_embl_data",
                [
                  "embl_file",
                  "embl_out",
                  "datas",
                  "out",
                  "info"
                ]
              ],
              [
                "test_print_rntptt_file",
                [
                  "gff_dict",
                  "out_r",
                  "genes",
                  "rnas",
                  "out_p",
                  "cdss"
                ]
              ],
              [
                "test_multi_tss_class",
                [
                  "fh",
                  "tss_features",
                  "utrs",
                  "tss_index",
                  "master_file",
                  "nums"
                ]
              ],
              [
                "test_convert_mastertable2gff",
                [
                  "datas",
                  "master_file",
                  "out_gff"
                ]
              ],
              [
                "test_convert_transtermhp2gff",
                [
                  "transterm_file",
                  "datas",
                  "gff_file"
                ]
              ],
              [
                "test_srna2pttrnt",
                [
                  "srna_input_file",
                  "datas",
                  "srnas",
                  "srna_output_file"
                ]
              ],
              [
                "test_convert_circ2gff",
                [
                  "args",
                  "out_filter",
                  "datas",
                  "circ_file",
                  "f_datas",
                  "c_datas",
                  "out_all"
                ]
              ],
              [
                "test_multi_embl_pos",
                [
                  "embls",
                  "datas"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                [
                  "self.converter",
                  "self.fasta_file",
                  "self.gff_file",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_embl2gff",
                [
                  "self.converter",
                  "self.embl_file",
                  "self.gff_out",
                  "self.test_folder"
                ]
              ],
              [
                "test_parser_embl_data",
                [
                  "self.converter",
                  "self.multi_embl",
                  "self.embl_file",
                  "self.gff_out",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_rntptt_file",
                [
                  "self.converter.gff3parser",
                  "self.converter",
                  "self.example"
                ]
              ],
              [
                "test_multi_tss_class",
                [
                  "self.converter",
                  "self.converter.tsspredator",
                  "self.mastertable",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_mastertable2gff",
                [
                  "self.tss_file",
                  "self.converter",
                  "self.mastertable",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_transtermhp2gff",
                [
                  "self.converter",
                  "self.transterm",
                  "self.term_file",
                  "self.test_folder"
                ]
              ],
              [
                "test_srna2pttrnt",
                [
                  "self.srna_out",
                  "self.converter",
                  "self.gff_file",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_circ2gff",
                [
                  "self.converter",
                  "self.mock_args",
                  "self.circ_file",
                  "self.circ_all",
                  "self.circ_best",
                  "self.test_folder"
                ]
              ],
              [
                "test_multi_embl_pos",
                [
                  "self.converter",
                  "self.multi_embl",
                  "self.embl_out",
                  "self.embl_file"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.388288603713048,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_print_rntptt_file",
                  "test_convert_embl2gff",
                  0.23253717985393133
                ],
                [
                  "test_srna2pttrnt",
                  "test_convert_mastertable2gff",
                  0.41749980367754896
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_convert_circ2gff",
                  0.3334222781319634
                ],
                [
                  "test_multi_tss_class",
                  "test_convert_transtermhp2gff",
                  0.21358883786095506
                ],
                [
                  "test_multi_embl_pos",
                  "test_parser_embl_data",
                  0.6259807120445899
                ],
                [
                  "test_convert_mastertable2gff",
                  "test_convert_gff2rntptt",
                  0.5255957390447945
                ],
                [
                  "test_parser_embl_data",
                  "test_convert_transtermhp2gff",
                  0.3934955014703718
                ],
                [
                  "test_srna2pttrnt",
                  "test_convert_gff2rntptt",
                  0.7548941352033883
                ],
                [
                  "test_multi_embl_pos",
                  "test_convert_transtermhp2gff",
                  0.16064386578049977
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_convert_embl2gff",
                  0.6425498742299227
                ],
                [
                  "test_print_rntptt_file",
                  "test_multi_embl_pos",
                  0.2862168373326586
                ],
                [
                  "test_multi_embl_pos",
                  "test_multi_tss_class",
                  0.375009685292562
                ],
                [
                  "test_parser_embl_data",
                  "test_convert_mastertable2gff",
                  0.46613726585340065
                ],
                [
                  "test_convert_mastertable2gff",
                  "test_convert_transtermhp2gff",
                  0.5784074945196682
                ],
                [
                  "test_convert_mastertable2gff",
                  "test_convert_circ2gff",
                  0.4385769337025789
                ],
                [
                  "test_print_rntptt_file",
                  "test_convert_circ2gff",
                  0.4022156067402603
                ],
                [
                  "test_multi_embl_pos",
                  "test_convert_circ2gff",
                  0.4097180157852671
                ],
                [
                  "test_multi_tss_class",
                  "test_convert_embl2gff",
                  0.21955211107581543
                ],
                [
                  "test_convert_mastertable2gff",
                  "test_convert_embl2gff",
                  0.5330504646292207
                ],
                [
                  "test_parser_embl_data",
                  "test_multi_tss_class",
                  0.4231046102739658
                ],
                [
                  "test_srna2pttrnt",
                  "test_parser_embl_data",
                  0.3944842236092924
                ],
                [
                  "test_multi_embl_pos",
                  "test_convert_embl2gff",
                  0.38245382526876276
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_convert_transtermhp2gff",
                  0.6584894851860014
                ],
                [
                  "test_multi_tss_class",
                  "test_convert_circ2gff",
                  0.3797555540276807
                ],
                [
                  "test_parser_embl_data",
                  "test_convert_circ2gff",
                  0.5122542060195304
                ],
                [
                  "test_srna2pttrnt",
                  "test_convert_circ2gff",
                  0.38229518357407694
                ],
                [
                  "test_convert_transtermhp2gff",
                  "test_convert_circ2gff",
                  0.40108261742043505
                ],
                [
                  "test_print_rntptt_file",
                  "test_convert_transtermhp2gff",
                  0.23550208858837113
                ],
                [
                  "test_print_rntptt_file",
                  "test_multi_tss_class",
                  0.3084367529428921
                ],
                [
                  "test_parser_embl_data",
                  "test_convert_embl2gff",
                  0.6849842699108994
                ],
                [
                  "test_convert_embl2gff",
                  "test_convert_transtermhp2gff",
                  0.6391623440007327
                ],
                [
                  "test_print_rntptt_file",
                  "test_parser_embl_data",
                  0.4217911003016745
                ],
                [
                  "test_print_rntptt_file",
                  "test_convert_mastertable2gff",
                  0.317925392228937
                ],
                [
                  "test_multi_embl_pos",
                  "test_convert_mastertable2gff",
                  0.18164975363768868
                ],
                [
                  "test_parser_embl_data",
                  "test_convert_gff2rntptt",
                  0.4199995898443509
                ],
                [
                  "test_srna2pttrnt",
                  "test_convert_embl2gff",
                  0.4613532080181474
                ],
                [
                  "test_print_rntptt_file",
                  "test_convert_gff2rntptt",
                  0.18852333809091462
                ],
                [
                  "test_srna2pttrnt",
                  "test_multi_embl_pos",
                  0.17393131069573453
                ],
                [
                  "test_multi_tss_class",
                  "test_convert_mastertable2gff",
                  0.22293954636591617
                ],
                [
                  "test_srna2pttrnt",
                  "test_convert_transtermhp2gff",
                  0.477325384728213
                ],
                [
                  "test_multi_embl_pos",
                  "test_convert_gff2rntptt",
                  0.10716507159342491
                ],
                [
                  "test_print_rntptt_file",
                  "test_srna2pttrnt",
                  0.21855542777761677
                ],
                [
                  "test_srna2pttrnt",
                  "test_multi_tss_class",
                  0.2549740747018909
                ],
                [
                  "test_multi_tss_class",
                  "test_convert_gff2rntptt",
                  0.19399814562957582
                ],
                [
                  "test_convert_embl2gff",
                  "test_convert_circ2gff",
                  0.4217583204210376
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_convert_embl2gff",
                "false"
              ],
              [
                "test_parser_embl_data",
                "false"
              ],
              [
                "test_print_rntptt_file",
                "false"
              ],
              [
                "test_multi_tss_class",
                "false"
              ],
              [
                "test_convert_mastertable2gff",
                "false"
              ],
              [
                "test_convert_transtermhp2gff",
                "false"
              ],
              [
                "test_srna2pttrnt",
                "false"
              ],
              [
                "test_convert_circ2gff",
                "false"
              ],
              [
                "test_multi_embl_pos",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "tests_\u0026_test_get_input.py",
    "testCases": [
      {
        "name": "TestGetFile",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fasta",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_gbk",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_gff",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fasta",
                  "[]"
                ],
                [
                  "test_gbk",
                  "[]"
                ],
                [
                  "test_gff",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fasta",
                  "false"
                ],
                [
                  "test_gbk",
                  "false"
                ],
                [
                  "test_gff",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fasta",
                  "false"
                ],
                [
                  "test_gbk",
                  "false"
                ],
                [
                  "test_gff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fasta",
                  "false"
                ],
                [
                  "test_gbk",
                  "false"
                ],
                [
                  "test_gff",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fasta",
                  "false"
                ],
                [
                  "test_gbk",
                  "false"
                ],
                [
                  "test_gff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                "false"
              ],
              [
                "test_gbk",
                "false"
              ],
              [
                "test_gff",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                "false"
              ],
              [
                "test_gbk",
                "false"
              ],
              [
                "test_gff",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                []
              ],
              [
                "test_gbk",
                []
              ],
              [
                "test_gff",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                "false"
              ],
              [
                "test_gbk",
                "false"
              ],
              [
                "test_gff",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                "false"
              ],
              [
                "test_gbk",
                "false"
              ],
              [
                "test_gff",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fasta",
                  "0"
                ],
                [
                  "test_gbk",
                  "0"
                ],
                [
                  "test_gff",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fasta",
                  "0"
                ],
                [
                  "test_gbk",
                  "0"
                ],
                [
                  "test_gff",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                "false"
              ],
              [
                "test_gbk",
                "false"
              ],
              [
                "test_gff",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                "false"
              ],
              [
                "test_gbk",
                "false"
              ],
              [
                "test_gff",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                "1"
              ],
              [
                "test_gbk",
                "1"
              ],
              [
                "test_gff",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                [
                  "log",
                  "f_h"
                ]
              ],
              [
                "test_gbk",
                [
                  "g_h",
                  "log"
                ]
              ],
              [
                "test_gff",
                [
                  "g_h",
                  "log"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fasta",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_gbk",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_gff",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7729047023186727,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_gff",
                  "test_gbk",
                  0.8733048553667556
                ],
                [
                  "test_fasta",
                  "test_gbk",
                  0.709560194985489
                ],
                [
                  "test_fasta",
                  "test_gff",
                  0.7358490566037735
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_fasta",
                "true"
              ],
              [
                "test_gbk",
                "true"
              ],
              [
                "test_gff",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_get_polyT.py",
    "testCases": [
      {
        "name": "TestGetPolyT",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_parents",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_check_parent",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_candidates",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_anno",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_filter_term",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_check_sec",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_parents",
                  "[]"
                ],
                [
                  "test_check_parent",
                  "[]"
                ],
                [
                  "test_detect_candidates",
                  "[]"
                ],
                [
                  "test_compare_anno",
                  "[]"
                ],
                [
                  "test_filter_term",
                  "[]"
                ],
                [
                  "test_check_sec",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_parents",
                  "false"
                ],
                [
                  "test_check_parent",
                  "false"
                ],
                [
                  "test_detect_candidates",
                  "false"
                ],
                [
                  "test_compare_anno",
                  "false"
                ],
                [
                  "test_filter_term",
                  "false"
                ],
                [
                  "test_check_sec",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_parents",
                  "false"
                ],
                [
                  "test_check_parent",
                  "false"
                ],
                [
                  "test_detect_candidates",
                  "false"
                ],
                [
                  "test_compare_anno",
                  "false"
                ],
                [
                  "test_filter_term",
                  "false"
                ],
                [
                  "test_check_sec",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_parents",
                  "false"
                ],
                [
                  "test_check_parent",
                  "false"
                ],
                [
                  "test_detect_candidates",
                  "false"
                ],
                [
                  "test_compare_anno",
                  "false"
                ],
                [
                  "test_filter_term",
                  "false"
                ],
                [
                  "test_check_sec",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_parents",
                  "false"
                ],
                [
                  "test_check_parent",
                  "false"
                ],
                [
                  "test_detect_candidates",
                  "false"
                ],
                [
                  "test_compare_anno",
                  "false"
                ],
                [
                  "test_filter_term",
                  "false"
                ],
                [
                  "test_check_sec",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "false"
              ],
              [
                "test_check_parent",
                "false"
              ],
              [
                "test_detect_candidates",
                "false"
              ],
              [
                "test_compare_anno",
                "false"
              ],
              [
                "test_filter_term",
                "false"
              ],
              [
                "test_check_sec",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "false"
              ],
              [
                "test_check_parent",
                "false"
              ],
              [
                "test_detect_candidates",
                "false"
              ],
              [
                "test_compare_anno",
                "false"
              ],
              [
                "test_filter_term",
                "false"
              ],
              [
                "test_check_sec",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_parents",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_check_parent",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_candidates",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_anno",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_filter_term",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_sec",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "false"
              ],
              [
                "test_check_parent",
                "false"
              ],
              [
                "test_detect_candidates",
                "false"
              ],
              [
                "test_compare_anno",
                "false"
              ],
              [
                "test_filter_term",
                "false"
              ],
              [
                "test_check_sec",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "false"
              ],
              [
                "test_check_parent",
                "false"
              ],
              [
                "test_detect_candidates",
                "false"
              ],
              [
                "test_compare_anno",
                "false"
              ],
              [
                "test_filter_term",
                "false"
              ],
              [
                "test_check_sec",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_parents",
                  "0"
                ],
                [
                  "test_check_parent",
                  "0"
                ],
                [
                  "test_detect_candidates",
                  "0"
                ],
                [
                  "test_compare_anno",
                  "0"
                ],
                [
                  "test_filter_term",
                  "0"
                ],
                [
                  "test_check_sec",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_parents",
                  "0"
                ],
                [
                  "test_check_parent",
                  "0"
                ],
                [
                  "test_detect_candidates",
                  "0"
                ],
                [
                  "test_compare_anno",
                  "0"
                ],
                [
                  "test_filter_term",
                  "0"
                ],
                [
                  "test_check_sec",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "false"
              ],
              [
                "test_check_parent",
                "false"
              ],
              [
                "test_detect_candidates",
                "false"
              ],
              [
                "test_compare_anno",
                "false"
              ],
              [
                "test_filter_term",
                "false"
              ],
              [
                "test_check_sec",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "false"
              ],
              [
                "test_check_parent",
                "false"
              ],
              [
                "test_detect_candidates",
                "false"
              ],
              [
                "test_compare_anno",
                "false"
              ],
              [
                "test_filter_term",
                "false"
              ],
              [
                "test_check_sec",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "2"
              ],
              [
                "test_check_parent",
                "2"
              ],
              [
                "test_detect_candidates",
                "1"
              ],
              [
                "test_compare_anno",
                "2"
              ],
              [
                "test_filter_term",
                "2"
              ],
              [
                "test_check_sec",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                [
                  "args",
                  "terms"
                ]
              ],
              [
                "test_check_parent",
                [
                  "parent",
                  "term",
                  "detects"
                ]
              ],
              [
                "test_detect_candidates",
                [
                  "sec",
                  "args",
                  "refs",
                  "seq",
                  "cands"
                ]
              ],
              [
                "test_compare_anno",
                [
                  "terms",
                  "cands"
                ]
              ],
              [
                "test_filter_term",
                [
                  "terms",
                  "cands"
                ]
              ],
              [
                "test_check_sec",
                [
                  "sec",
                  "features",
                  "detect"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_parents",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_check_parent",
                [
                  "self.example"
                ]
              ],
              [
                "test_detect_candidates",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_compare_anno",
                [
                  "self.example"
                ]
              ],
              [
                "test_filter_term",
                []
              ],
              [
                "test_check_sec",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7678813415913895,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_filter_term",
                  "test_check_sec",
                  0.8723284235366042
                ],
                [
                  "test_detect_candidates",
                  "test_check_parent",
                  0.7891029522416398
                ],
                [
                  "test_detect_candidates",
                  "test_compare_anno",
                  0.724231378363979
                ],
                [
                  "test_check_parent",
                  "test_compare_anno",
                  0.7247633183472385
                ],
                [
                  "test_parents",
                  "test_compare_anno",
                  0.6726622701666891
                ],
                [
                  "test_filter_term",
                  "test_compare_anno",
                  0.8565276243934318
                ],
                [
                  "test_check_sec",
                  "test_parents",
                  0.6912375372387191
                ],
                [
                  "test_check_sec",
                  "test_detect_candidates",
                  0.836707207081303
                ],
                [
                  "test_check_sec",
                  "test_check_parent",
                  0.7589477861884035
                ],
                [
                  "test_check_sec",
                  "test_compare_anno",
                  0.7840452772972626
                ],
                [
                  "test_filter_term",
                  "test_parents",
                  0.7113324589887797
                ],
                [
                  "test_filter_term",
                  "test_check_parent",
                  0.758219721049874
                ],
                [
                  "test_detect_candidates",
                  "test_parents",
                  0.8269583972029237
                ],
                [
                  "test_check_parent",
                  "test_parents",
                  0.685322784520103
                ],
                [
                  "test_filter_term",
                  "test_detect_candidates",
                  0.8258329872538918
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_parents",
                "false"
              ],
              [
                "test_check_parent",
                "false"
              ],
              [
                "test_detect_candidates",
                "false"
              ],
              [
                "test_compare_anno",
                "false"
              ],
              [
                "test_filter_term",
                "false"
              ],
              [
                "test_check_sec",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_detect_utr.py",
    "testCases": [
      {
        "name": "TestDetectUTR",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_3utr",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_import_utr",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_ta",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_5utr",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_detect_3utr",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_near_cds",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_5utr_from_other",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compare_term",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_cds",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_3utr",
                  "[]"
                ],
                [
                  "test_import_utr",
                  "[]"
                ],
                [
                  "test_compare_ta",
                  "[]"
                ],
                [
                  "test_detect_5utr",
                  "[]"
                ],
                [
                  "test_detect_3utr",
                  "[]"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "[]"
                ],
                [
                  "test_get_near_cds",
                  "[]"
                ],
                [
                  "test_get_5utr_from_other",
                  "[]"
                ],
                [
                  "test_compare_term",
                  "[]"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "[]"
                ],
                [
                  "test_detect_cds",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_3utr",
                  "false"
                ],
                [
                  "test_import_utr",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_detect_5utr",
                  "false"
                ],
                [
                  "test_detect_3utr",
                  "false"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "false"
                ],
                [
                  "test_get_near_cds",
                  "false"
                ],
                [
                  "test_get_5utr_from_other",
                  "false"
                ],
                [
                  "test_compare_term",
                  "false"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "false"
                ],
                [
                  "test_detect_cds",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_3utr",
                  "false"
                ],
                [
                  "test_import_utr",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_detect_5utr",
                  "false"
                ],
                [
                  "test_detect_3utr",
                  "false"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "false"
                ],
                [
                  "test_get_near_cds",
                  "false"
                ],
                [
                  "test_get_5utr_from_other",
                  "false"
                ],
                [
                  "test_compare_term",
                  "false"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "false"
                ],
                [
                  "test_detect_cds",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_3utr",
                  "false"
                ],
                [
                  "test_import_utr",
                  "true"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_detect_5utr",
                  "false"
                ],
                [
                  "test_detect_3utr",
                  "false"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "false"
                ],
                [
                  "test_get_near_cds",
                  "false"
                ],
                [
                  "test_get_5utr_from_other",
                  "false"
                ],
                [
                  "test_compare_term",
                  "false"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "false"
                ],
                [
                  "test_detect_cds",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_3utr",
                  "false"
                ],
                [
                  "test_import_utr",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_detect_5utr",
                  "false"
                ],
                [
                  "test_detect_3utr",
                  "false"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "false"
                ],
                [
                  "test_get_near_cds",
                  "false"
                ],
                [
                  "test_get_5utr_from_other",
                  "false"
                ],
                [
                  "test_compare_term",
                  "false"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "false"
                ],
                [
                  "test_detect_cds",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3utr",
                "false"
              ],
              [
                "test_import_utr",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_detect_5utr",
                "false"
              ],
              [
                "test_detect_3utr",
                "false"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "false"
              ],
              [
                "test_get_near_cds",
                "false"
              ],
              [
                "test_get_5utr_from_other",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_check_associated_TSSpredator",
                "false"
              ],
              [
                "test_detect_cds",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3utr",
                "false"
              ],
              [
                "test_import_utr",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_detect_5utr",
                "false"
              ],
              [
                "test_detect_3utr",
                "false"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "false"
              ],
              [
                "test_get_near_cds",
                "false"
              ],
              [
                "test_get_5utr_from_other",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_check_associated_TSSpredator",
                "false"
              ],
              [
                "test_detect_cds",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_3utr",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_import_utr",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_5utr",
                []
              ],
              [
                "test_detect_3utr",
                []
              ],
              [
                "test_get_5utr_from_TSSpredator",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_near_cds",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_5utr_from_other",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_term",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_associated_TSSpredator",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_cds",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3utr",
                "false"
              ],
              [
                "test_import_utr",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_detect_5utr",
                "false"
              ],
              [
                "test_detect_3utr",
                "false"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "false"
              ],
              [
                "test_get_near_cds",
                "false"
              ],
              [
                "test_get_5utr_from_other",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_check_associated_TSSpredator",
                "false"
              ],
              [
                "test_detect_cds",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_3utr",
                "false"
              ],
              [
                "test_import_utr",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_detect_5utr",
                "false"
              ],
              [
                "test_detect_3utr",
                "false"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "true"
              ],
              [
                "test_get_near_cds",
                "true"
              ],
              [
                "test_get_5utr_from_other",
                "true"
              ],
              [
                "test_compare_term",
                "true"
              ],
              [
                "test_check_associated_TSSpredator",
                "true"
              ],
              [
                "test_detect_cds",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_3utr",
                  "0"
                ],
                [
                  "test_import_utr",
                  "0"
                ],
                [
                  "test_compare_ta",
                  "0"
                ],
                [
                  "test_detect_5utr",
                  "0"
                ],
                [
                  "test_detect_3utr",
                  "0"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "0"
                ],
                [
                  "test_get_near_cds",
                  "0"
                ],
                [
                  "test_get_5utr_from_other",
                  "0"
                ],
                [
                  "test_compare_term",
                  "0"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "0"
                ],
                [
                  "test_detect_cds",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_3utr",
                  "0"
                ],
                [
                  "test_import_utr",
                  "0"
                ],
                [
                  "test_compare_ta",
                  "0"
                ],
                [
                  "test_detect_5utr",
                  "0"
                ],
                [
                  "test_detect_3utr",
                  "0"
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "0"
                ],
                [
                  "test_get_near_cds",
                  "0"
                ],
                [
                  "test_get_5utr_from_other",
                  "0"
                ],
                [
                  "test_compare_term",
                  "0"
                ],
                [
                  "test_check_associated_TSSpredator",
                  "0"
                ],
                [
                  "test_detect_cds",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3utr",
                "false"
              ],
              [
                "test_import_utr",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_detect_5utr",
                "false"
              ],
              [
                "test_detect_3utr",
                "false"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "false"
              ],
              [
                "test_get_near_cds",
                "false"
              ],
              [
                "test_get_5utr_from_other",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_check_associated_TSSpredator",
                "false"
              ],
              [
                "test_detect_cds",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3utr",
                "false"
              ],
              [
                "test_import_utr",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_detect_5utr",
                "false"
              ],
              [
                "test_detect_3utr",
                "false"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "false"
              ],
              [
                "test_get_near_cds",
                "false"
              ],
              [
                "test_get_5utr_from_other",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_check_associated_TSSpredator",
                "false"
              ],
              [
                "test_detect_cds",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3utr",
                "1"
              ],
              [
                "test_import_utr",
                "6"
              ],
              [
                "test_compare_ta",
                "1"
              ],
              [
                "test_detect_5utr",
                "3"
              ],
              [
                "test_detect_3utr",
                "1"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "8"
              ],
              [
                "test_get_near_cds",
                "1"
              ],
              [
                "test_get_5utr_from_other",
                "8"
              ],
              [
                "test_compare_term",
                "1"
              ],
              [
                "test_check_associated_TSSpredator",
                "6"
              ],
              [
                "test_detect_cds",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_get_3utr",
                [
                  "args",
                  "cds",
                  "utr_ta",
                  "cds_dict",
                  "ta_dict",
                  "attributes",
                  "attributes_ta",
                  "utr_all",
                  "ta",
                  "attributes_cds",
                  "out",
                  "utr_strain"
                ]
              ],
              [
                "test_import_utr",
                [
                  "args",
                  "detect",
                  "utr_all",
                  "utr_strain"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "args",
                  "utr_tss",
                  "utr_all",
                  "num_utr",
                  "out",
                  "utr_strain"
                ]
              ],
              [
                "test_detect_5utr",
                [
                  "args",
                  "ref",
                  "out_file",
                  "datas",
                  "header"
                ]
              ],
              [
                "test_detect_3utr",
                [
                  "args",
                  "out_file",
                  "datas"
                ]
              ],
              [
                "test_get_5utr_from_TSSpredator",
                [
                  "utr_datas"
                ]
              ],
              [
                "test_get_near_cds",
                [
                  "near_cds",
                  "ta_dict",
                  "attributes",
                  "attributes_ta",
                  "ta"
                ]
              ],
              [
                "test_get_5utr_from_other",
                [
                  "utr_datas"
                ]
              ],
              [
                "test_compare_term",
                [
                  "ta_dict",
                  "term",
                  "attributes_ta",
                  "ta"
                ]
              ],
              [
                "test_check_associated_TSSpredator",
                [
                  "near_cds",
                  "cds_name",
                  "check_utr"
                ]
              ],
              [
                "test_detect_cds",
                [
                  "names",
                  "checks",
                  "near_cds",
                  "nears",
                  "cds_name",
                  "check_utr"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3utr",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_import_utr",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_detect_5utr",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_3utr",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_5utr_from_TSSpredator",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_near_cds",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_5utr_from_other",
                [
                  "self.example"
                ]
              ],
              [
                "test_compare_term",
                [
                  "self.example"
                ]
              ],
              [
                "test_check_associated_TSSpredator",
                [
                  "self.example"
                ]
              ],
              [
                "test_detect_cds",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5714901851153364,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_detect_cds",
                  "test_compare_term",
                  0.4753566645394783
                ],
                [
                  "test_get_5utr_from_other",
                  "test_compare_term",
                  0.42911180748930783
                ],
                [
                  "test_compare_ta",
                  "test_detect_5utr",
                  0.6668836175213961
                ],
                [
                  "test_import_utr",
                  "test_compare_ta",
                  0.6403729533481602
                ],
                [
                  "test_detect_cds",
                  "test_get_3utr",
                  0.5943422512704286
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_get_5utr_from_other",
                  0.5760831562389077
                ],
                [
                  "test_get_5utr_from_other",
                  "test_detect_5utr",
                  0.535466915881648
                ],
                [
                  "test_detect_cds",
                  "test_get_5utr_from_TSSpredator",
                  0.5525409919339028
                ],
                [
                  "test_import_utr",
                  "test_detect_cds",
                  0.4791116481660997
                ],
                [
                  "test_compare_ta",
                  "test_compare_term",
                  0.4295752363916363
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "test_detect_3utr",
                  0.5918424119732967
                ],
                [
                  "test_detect_5utr",
                  "test_get_3utr",
                  0.7346929334545089
                ],
                [
                  "test_detect_5utr",
                  "test_compare_term",
                  0.5487894021333986
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "test_get_5utr_from_other",
                  0.9552263173291038
                ],
                [
                  "test_get_5utr_from_other",
                  "test_detect_3utr",
                  0.5727131017946265
                ],
                [
                  "test_compare_ta",
                  "test_get_3utr",
                  0.6991733411650151
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_get_5utr_from_TSSpredator",
                  0.6104192052624987
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_detect_5utr",
                  0.464117530568871
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "test_get_3utr",
                  0.5327238412820586
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "test_detect_5utr",
                  0.5500176717314523
                ],
                [
                  "test_get_5utr_from_other",
                  "test_get_near_cds",
                  0.43532142711387917
                ],
                [
                  "test_compare_term",
                  "test_get_3utr",
                  0.8393794625847963
                ],
                [
                  "test_import_utr",
                  "test_get_5utr_from_other",
                  0.5437297971798742
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_detect_3utr",
                  0.5184325171072414
                ],
                [
                  "test_detect_cds",
                  "test_get_5utr_from_other",
                  0.5498357768445657
                ],
                [
                  "test_get_5utr_from_other",
                  "test_get_3utr",
                  0.5180131001672192
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "test_get_near_cds",
                  0.4290164738785504
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_get_near_cds",
                  0.5335250112854024
                ],
                [
                  "test_import_utr",
                  "test_compare_term",
                  0.4229461910929835
                ],
                [
                  "test_import_utr",
                  "test_get_3utr",
                  0.592241049931721
                ],
                [
                  "test_import_utr",
                  "test_get_5utr_from_TSSpredator",
                  0.5482205955515111
                ],
                [
                  "test_import_utr",
                  "test_detect_5utr",
                  0.5743741283772575
                ],
                [
                  "test_get_5utr_from_other",
                  "test_compare_ta",
                  0.49396652978852695
                ],
                [
                  "test_compare_term",
                  "test_get_near_cds",
                  0.8951213526806546
                ],
                [
                  "test_detect_cds",
                  "test_compare_ta",
                  0.49572850759942505
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_get_3utr",
                  0.5386784151976005
                ],
                [
                  "test_detect_5utr",
                  "test_get_near_cds",
                  0.552958738609989
                ],
                [
                  "test_detect_5utr",
                  "test_detect_3utr",
                  0.9068816439121261
                ],
                [
                  "test_import_utr",
                  "test_get_near_cds",
                  0.428239073788155
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_compare_term",
                  0.5108884411715009
                ],
                [
                  "test_detect_cds",
                  "test_get_near_cds",
                  0.5080619708278709
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "test_compare_term",
                  0.42398114167410145
                ],
                [
                  "test_compare_ta",
                  "test_detect_3utr",
                  0.6802014779702492
                ],
                [
                  "test_get_near_cds",
                  "test_detect_3utr",
                  0.5896511659645813
                ],
                [
                  "test_get_3utr",
                  "test_get_near_cds",
                  0.8528797880641372
                ],
                [
                  "test_check_associated_TSSpredator",
                  "test_compare_ta",
                  0.353987914152017
                ],
                [
                  "test_import_utr",
                  "test_detect_3utr",
                  0.5736887922388727
                ],
                [
                  "test_detect_cds",
                  "test_check_associated_TSSpredator",
                  0.5684366679326225
                ],
                [
                  "test_get_5utr_from_TSSpredator",
                  "test_compare_ta",
                  0.4922550847814075
                ],
                [
                  "test_get_3utr",
                  "test_detect_3utr",
                  0.7827114527980917
                ],
                [
                  "test_import_utr",
                  "test_check_associated_TSSpredator",
                  0.3763138345246423
                ],
                [
                  "test_detect_cds",
                  "test_detect_5utr",
                  0.5864239602416134
                ],
                [
                  "test_detect_cds",
                  "test_detect_3utr",
                  0.6210358419726119
                ],
                [
                  "test_compare_ta",
                  "test_get_near_cds",
                  0.4569681343117893
                ],
                [
                  "test_compare_term",
                  "test_detect_3utr",
                  0.5993037205501185
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_get_3utr",
                "false"
              ],
              [
                "test_import_utr",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_detect_5utr",
                "false"
              ],
              [
                "test_detect_3utr",
                "false"
              ],
              [
                "test_get_5utr_from_TSSpredator",
                "true"
              ],
              [
                "test_get_near_cds",
                "false"
              ],
              [
                "test_get_5utr_from_other",
                "true"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_check_associated_TSSpredator",
                "true"
              ],
              [
                "test_detect_cds",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "tests_\u0026_test_lib_reader.py",
    "testCases": [
      {
        "name": "TestLibReader",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_read_wig",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_read_libs",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_read_wig",
                  "[]"
                ],
                [
                  "test_read_libs",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_read_wig",
                  "true"
                ],
                [
                  "test_read_libs",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_read_libs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_read_libs",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_read_libs",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_read_libs",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_read_libs",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_read_wig",
                [
                  "self.wigs",
                  "self.libs_for_wig",
                  "self.example",
                  "self.wig_file",
                  "self.libs"
                ]
              ],
              [
                "test_read_libs",
                [
                  "self.wigs",
                  "self.libs_for_wig",
                  "self.example",
                  "self.wig_file"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_read_libs",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_read_libs",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_read_wig",
                  "0"
                ],
                [
                  "test_read_libs",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_read_wig",
                  "0"
                ],
                [
                  "test_read_libs",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_read_libs",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_read_libs",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "2"
              ],
              [
                "test_read_libs",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                [
                  "merge_wig",
                  "wigs"
                ]
              ],
              [
                "test_read_libs",
                [
                  "texs",
                  "libs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                [
                  "self.lib_reader",
                  "self.lib_dict",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_libs",
                [
                  "self.lib_reader",
                  "self.lib_dict",
                  "self.libs",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.29937234562958553,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_read_libs",
                  "test_read_wig",
                  0.29937234562958553
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_read_libs",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_merge_sRNA.py",
    "testCases": [
      {
        "name": "TestMergesRNA",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_coverage",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_modify_attributes",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_overlap",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_modify_overlap",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_merge_srna_gff",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_tss_pro",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_merge_srna",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compare_table",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_coverage",
                  "[]"
                ],
                [
                  "test_modify_attributes",
                  "[]"
                ],
                [
                  "test_detect_overlap",
                  "[]"
                ],
                [
                  "test_modify_overlap",
                  "[]"
                ],
                [
                  "test_merge_srna_gff",
                  "[]"
                ],
                [
                  "test_get_tss_pro",
                  "[]"
                ],
                [
                  "test_merge_srna",
                  "[]"
                ],
                [
                  "test_compare_table",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_modify_attributes",
                  "false"
                ],
                [
                  "test_detect_overlap",
                  "false"
                ],
                [
                  "test_modify_overlap",
                  "false"
                ],
                [
                  "test_merge_srna_gff",
                  "false"
                ],
                [
                  "test_get_tss_pro",
                  "false"
                ],
                [
                  "test_merge_srna",
                  "false"
                ],
                [
                  "test_compare_table",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_modify_attributes",
                  "false"
                ],
                [
                  "test_detect_overlap",
                  "false"
                ],
                [
                  "test_modify_overlap",
                  "false"
                ],
                [
                  "test_merge_srna_gff",
                  "false"
                ],
                [
                  "test_get_tss_pro",
                  "false"
                ],
                [
                  "test_merge_srna",
                  "false"
                ],
                [
                  "test_compare_table",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_modify_attributes",
                  "true"
                ],
                [
                  "test_detect_overlap",
                  "false"
                ],
                [
                  "test_modify_overlap",
                  "false"
                ],
                [
                  "test_merge_srna_gff",
                  "false"
                ],
                [
                  "test_get_tss_pro",
                  "false"
                ],
                [
                  "test_merge_srna",
                  "true"
                ],
                [
                  "test_compare_table",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_modify_attributes",
                  "false"
                ],
                [
                  "test_detect_overlap",
                  "false"
                ],
                [
                  "test_modify_overlap",
                  "false"
                ],
                [
                  "test_merge_srna_gff",
                  "false"
                ],
                [
                  "test_get_tss_pro",
                  "false"
                ],
                [
                  "test_merge_srna",
                  "false"
                ],
                [
                  "test_compare_table",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_modify_attributes",
                "false"
              ],
              [
                "test_detect_overlap",
                "false"
              ],
              [
                "test_modify_overlap",
                "false"
              ],
              [
                "test_merge_srna_gff",
                "false"
              ],
              [
                "test_get_tss_pro",
                "false"
              ],
              [
                "test_merge_srna",
                "false"
              ],
              [
                "test_compare_table",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_modify_attributes",
                "false"
              ],
              [
                "test_detect_overlap",
                "false"
              ],
              [
                "test_modify_overlap",
                "false"
              ],
              [
                "test_merge_srna_gff",
                "false"
              ],
              [
                "test_get_tss_pro",
                "false"
              ],
              [
                "test_merge_srna",
                "false"
              ],
              [
                "test_compare_table",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_coverage",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_modify_attributes",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_overlap",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_modify_overlap",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_srna_gff",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_get_tss_pro",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_srna",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_table",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_modify_attributes",
                "false"
              ],
              [
                "test_detect_overlap",
                "false"
              ],
              [
                "test_modify_overlap",
                "false"
              ],
              [
                "test_merge_srna_gff",
                "false"
              ],
              [
                "test_get_tss_pro",
                "false"
              ],
              [
                "test_merge_srna",
                "false"
              ],
              [
                "test_compare_table",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_modify_attributes",
                "false"
              ],
              [
                "test_detect_overlap",
                "false"
              ],
              [
                "test_modify_overlap",
                "true"
              ],
              [
                "test_merge_srna_gff",
                "false"
              ],
              [
                "test_get_tss_pro",
                "false"
              ],
              [
                "test_merge_srna",
                "true"
              ],
              [
                "test_compare_table",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_coverage",
                  "0"
                ],
                [
                  "test_modify_attributes",
                  "0"
                ],
                [
                  "test_detect_overlap",
                  "0"
                ],
                [
                  "test_modify_overlap",
                  "0"
                ],
                [
                  "test_merge_srna_gff",
                  "0"
                ],
                [
                  "test_get_tss_pro",
                  "0"
                ],
                [
                  "test_merge_srna",
                  "0"
                ],
                [
                  "test_compare_table",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_coverage",
                  "0"
                ],
                [
                  "test_modify_attributes",
                  "0"
                ],
                [
                  "test_detect_overlap",
                  "0"
                ],
                [
                  "test_modify_overlap",
                  "0"
                ],
                [
                  "test_merge_srna_gff",
                  "0"
                ],
                [
                  "test_get_tss_pro",
                  "0"
                ],
                [
                  "test_merge_srna",
                  "0"
                ],
                [
                  "test_compare_table",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_modify_attributes",
                "false"
              ],
              [
                "test_detect_overlap",
                "false"
              ],
              [
                "test_modify_overlap",
                "false"
              ],
              [
                "test_merge_srna_gff",
                "false"
              ],
              [
                "test_get_tss_pro",
                "false"
              ],
              [
                "test_merge_srna",
                "false"
              ],
              [
                "test_compare_table",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_modify_attributes",
                "false"
              ],
              [
                "test_detect_overlap",
                "false"
              ],
              [
                "test_modify_overlap",
                "false"
              ],
              [
                "test_merge_srna_gff",
                "false"
              ],
              [
                "test_get_tss_pro",
                "false"
              ],
              [
                "test_merge_srna",
                "false"
              ],
              [
                "test_compare_table",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_coverage",
                "1"
              ],
              [
                "test_modify_attributes",
                "4"
              ],
              [
                "test_detect_overlap",
                "2"
              ],
              [
                "test_modify_overlap",
                "5"
              ],
              [
                "test_merge_srna_gff",
                "2"
              ],
              [
                "test_get_tss_pro",
                "1"
              ],
              [
                "test_merge_srna",
                "9"
              ],
              [
                "test_compare_table",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_get_coverage",
                [
                  "srna_cover",
                  "wigs"
                ]
              ],
              [
                "test_modify_attributes",
                [
                  "pre",
                  "attributes_pre",
                  "tar1_dict",
                  "tar1",
                  "tar2",
                  "attributes_tar1",
                  "tar2_dict",
                  "pre_dict",
                  "attributes_tar2"
                ]
              ],
              [
                "test_detect_overlap",
                [
                  "pre",
                  "attributes_pre",
                  "overlap",
                  "tar1_dict",
                  "tar1",
                  "tar2",
                  "attributes_tar1",
                  "tar2_dict",
                  "pre_dict",
                  "attributes_tar2"
                ]
              ],
              [
                "test_modify_overlap",
                [
                  "pre",
                  "attributes_pre",
                  "tar",
                  "attributes_tar",
                  "tar_dict",
                  "pre_srna",
                  "pre_dict"
                ]
              ],
              [
                "test_merge_srna_gff",
                [
                  "out_file",
                  "datas",
                  "attributes",
                  "gffs"
                ]
              ],
              [
                "test_get_tss_pro",
                [
                  "attributes_srna",
                  "srna_dict",
                  "tss_pro",
                  "srna"
                ]
              ],
              [
                "test_merge_srna",
                [
                  "srnas"
                ]
              ],
              [
                "test_compare_table",
                [
                  "attributes_srna",
                  "srna_dict",
                  "srna",
                  "attributes_tss",
                  "wigs",
                  "cutoff_notex",
                  "replicates",
                  "out",
                  "args",
                  "tables",
                  "tss",
                  "cutoff_tex",
                  "texs",
                  "tss_dict",
                  "cutoff_frag"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_get_coverage",
                [
                  "self.example"
                ]
              ],
              [
                "test_modify_attributes",
                []
              ],
              [
                "test_detect_overlap",
                []
              ],
              [
                "test_modify_overlap",
                []
              ],
              [
                "test_merge_srna_gff",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_tss_pro",
                []
              ],
              [
                "test_merge_srna",
                [
                  "self.example"
                ]
              ],
              [
                "test_compare_table",
                [
                  "self.mock_args"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6516691003364985,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_detect_overlap",
                  "test_modify_overlap",
                  0.8780999307781064
                ],
                [
                  "test_merge_srna",
                  "test_merge_srna_gff",
                  0.4932913548446721
                ],
                [
                  "test_merge_srna",
                  "test_get_tss_pro",
                  0.5065716563947116
                ],
                [
                  "test_modify_attributes",
                  "test_merge_srna",
                  0.4887898016308277
                ],
                [
                  "test_modify_overlap",
                  "test_get_coverage",
                  0.5829087257927652
                ],
                [
                  "test_detect_overlap",
                  "test_get_coverage",
                  0.6271101996610777
                ],
                [
                  "test_detect_overlap",
                  "test_compare_table",
                  0.8336967994732456
                ],
                [
                  "test_modify_overlap",
                  "test_merge_srna",
                  0.6375739096472622
                ],
                [
                  "test_compare_table",
                  "test_get_coverage",
                  0.8440035471337952
                ],
                [
                  "test_detect_overlap",
                  "test_merge_srna",
                  0.48857183850189895
                ],
                [
                  "test_modify_attributes",
                  "test_merge_srna_gff",
                  0.4828727741119973
                ],
                [
                  "test_compare_table",
                  "test_get_tss_pro",
                  0.75257937315256
                ],
                [
                  "test_modify_overlap",
                  "test_merge_srna_gff",
                  0.5104784495017387
                ],
                [
                  "test_modify_overlap",
                  "test_compare_table",
                  0.7999822314225972
                ],
                [
                  "test_merge_srna_gff",
                  "test_compare_table",
                  0.5971620397222742
                ],
                [
                  "test_detect_overlap",
                  "test_merge_srna_gff",
                  0.5026557204423516
                ],
                [
                  "test_get_coverage",
                  "test_get_tss_pro",
                  0.5059694228804866
                ],
                [
                  "test_modify_attributes",
                  "test_compare_table",
                  0.7866337885506525
                ],
                [
                  "test_detect_overlap",
                  "test_get_tss_pro",
                  0.7803999768679919
                ],
                [
                  "test_merge_srna",
                  "test_get_coverage",
                  0.5242220370819805
                ],
                [
                  "test_modify_attributes",
                  "test_detect_overlap",
                  0.9509285362865133
                ],
                [
                  "test_merge_srna_gff",
                  "test_get_coverage",
                  0.5347574304456525
                ],
                [
                  "test_modify_overlap",
                  "test_get_tss_pro",
                  0.8399624166744083
                ],
                [
                  "test_modify_attributes",
                  "test_get_tss_pro",
                  0.7458656039613586
                ],
                [
                  "test_merge_srna",
                  "test_compare_table",
                  0.5783271826791412
                ],
                [
                  "test_modify_attributes",
                  "test_modify_overlap",
                  0.8647634265027947
                ],
                [
                  "test_modify_attributes",
                  "test_get_coverage",
                  0.5965890524568968
                ],
                [
                  "test_merge_srna_gff",
                  "test_get_tss_pro",
                  0.5119675828221997
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_modify_attributes",
                "false"
              ],
              [
                "test_detect_overlap",
                "false"
              ],
              [
                "test_modify_overlap",
                "false"
              ],
              [
                "test_merge_srna_gff",
                "false"
              ],
              [
                "test_get_tss_pro",
                "false"
              ],
              [
                "test_merge_srna",
                "false"
              ],
              [
                "test_compare_table",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_seq_editer.py",
    "testCases": [
      {
        "name": "TestSeqEditer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_modify_header",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_import_data",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_modify_seq",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_modify_header",
                  "[]"
                ],
                [
                  "test_import_data",
                  "[]"
                ],
                [
                  "test_modify_seq",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_modify_header",
                  "false"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_modify_seq",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_modify_header",
                  "false"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_modify_seq",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_modify_header",
                  "false"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_modify_seq",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_modify_header",
                  "false"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_modify_seq",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_modify_seq",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_modify_seq",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_modify_header",
                [
                  "self.fasta",
                  "self.example"
                ]
              ],
              [
                "test_import_data",
                [
                  "self.fasta"
                ]
              ],
              [
                "test_modify_seq",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_modify_seq",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_modify_seq",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_modify_header",
                  "0"
                ],
                [
                  "test_import_data",
                  "0"
                ],
                [
                  "test_modify_seq",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_modify_header",
                  "0"
                ],
                [
                  "test_import_data",
                  "0"
                ],
                [
                  "test_modify_seq",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_modify_seq",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_modify_seq",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "1"
              ],
              [
                "test_import_data",
                "1"
              ],
              [
                "test_modify_seq",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                [
                  "input_file",
                  "datas"
                ]
              ],
              [
                "test_import_data",
                [
                  "mod_table",
                  "datas"
                ]
              ],
              [
                "test_modify_seq",
                [
                  "mod_table",
                  "datas"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                [
                  "self.seq",
                  "self.test_folder"
                ]
              ],
              [
                "test_import_data",
                [
                  "self.seq",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_modify_seq",
                [
                  "self.fasta",
                  "self.seq",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3593024404140593,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_import_data",
                  "test_modify_header",
                  0.20508711985328645
                ],
                [
                  "test_import_data",
                  "test_modify_seq",
                  0.548219132908616
                ],
                [
                  "test_modify_seq",
                  "test_modify_header",
                  0.3246010684802756
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_modify_header",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_modify_seq",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_terminator.py",
    "testCases": [
      {
        "name": "TestTerminator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_convert_to_gff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_run_terminator",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_run_TransTermHP",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_merge_sRNA",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_move_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_convert_gff2rntptt",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_combine_annotation",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compute_stat",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_convert_to_gff",
                  "[]"
                ],
                [
                  "test_run_terminator",
                  "[]"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "[]"
                ],
                [
                  "test_run_TransTermHP",
                  "[]"
                ],
                [
                  "test_merge_sRNA",
                  "[]"
                ],
                [
                  "test_move_file",
                  "[]"
                ],
                [
                  "test_convert_gff2rntptt",
                  "[]"
                ],
                [
                  "test_combine_annotation",
                  "[]"
                ],
                [
                  "test_compute_stat",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_convert_to_gff",
                  "false"
                ],
                [
                  "test_run_terminator",
                  "false"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "false"
                ],
                [
                  "test_run_TransTermHP",
                  "false"
                ],
                [
                  "test_merge_sRNA",
                  "false"
                ],
                [
                  "test_move_file",
                  "true"
                ],
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_combine_annotation",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_convert_to_gff",
                  "false"
                ],
                [
                  "test_run_terminator",
                  "false"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "false"
                ],
                [
                  "test_run_TransTermHP",
                  "false"
                ],
                [
                  "test_merge_sRNA",
                  "false"
                ],
                [
                  "test_move_file",
                  "false"
                ],
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_combine_annotation",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_convert_to_gff",
                  "false"
                ],
                [
                  "test_run_terminator",
                  "false"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "false"
                ],
                [
                  "test_run_TransTermHP",
                  "false"
                ],
                [
                  "test_merge_sRNA",
                  "false"
                ],
                [
                  "test_move_file",
                  "false"
                ],
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_combine_annotation",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_convert_to_gff",
                  "false"
                ],
                [
                  "test_run_terminator",
                  "false"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "false"
                ],
                [
                  "test_run_TransTermHP",
                  "false"
                ],
                [
                  "test_merge_sRNA",
                  "false"
                ],
                [
                  "test_move_file",
                  "false"
                ],
                [
                  "test_convert_gff2rntptt",
                  "false"
                ],
                [
                  "test_combine_annotation",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_run_terminator",
                "false"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "false"
              ],
              [
                "test_run_TransTermHP",
                "false"
              ],
              [
                "test_merge_sRNA",
                "false"
              ],
              [
                "test_move_file",
                "false"
              ],
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_combine_annotation",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_run_terminator",
                "false"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "false"
              ],
              [
                "test_run_TransTermHP",
                "false"
              ],
              [
                "test_merge_sRNA",
                "false"
              ],
              [
                "test_move_file",
                "false"
              ],
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_combine_annotation",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_convert_to_gff",
                [
                  "self.mock",
                  "self.fastas",
                  "self.trans",
                  "self.srnas"
                ]
              ],
              [
                "test_run_terminator",
                []
              ],
              [
                "test_compute_intersection_forward_reverse",
                [
                  "self.gffs",
                  "self.example",
                  "self.srnas"
                ]
              ],
              [
                "test_run_TransTermHP",
                [
                  "self.mock_parser",
                  "self.trans",
                  "self.srnas"
                ]
              ],
              [
                "test_merge_sRNA",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.trans",
                  "self.test_folder"
                ]
              ],
              [
                "test_move_file",
                [
                  "self.mock",
                  "self.mock_parser",
                  "self.mock_args",
                  "self.fastas",
                  "self.trans",
                  "self.srnas",
                  "self.test_folder"
                ]
              ],
              [
                "test_convert_gff2rntptt",
                [
                  "self.mock",
                  "self.mock_parser",
                  "self.mock_args",
                  "self.out",
                  "self.trans"
                ]
              ],
              [
                "test_combine_annotation",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_parser",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.trans",
                  "self.srnas"
                ]
              ],
              [
                "test_compute_stat",
                [
                  "self.gffs",
                  "self.mock_parser",
                  "self.fastas",
                  "self.trans",
                  "self.srnas"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_run_terminator",
                "false"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "false"
              ],
              [
                "test_run_TransTermHP",
                "false"
              ],
              [
                "test_merge_sRNA",
                "false"
              ],
              [
                "test_move_file",
                "false"
              ],
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_combine_annotation",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_run_terminator",
                "false"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "false"
              ],
              [
                "test_run_TransTermHP",
                "false"
              ],
              [
                "test_merge_sRNA",
                "false"
              ],
              [
                "test_move_file",
                "false"
              ],
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_combine_annotation",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_convert_to_gff",
                  "0"
                ],
                [
                  "test_run_terminator",
                  "0"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "0"
                ],
                [
                  "test_run_TransTermHP",
                  "0"
                ],
                [
                  "test_merge_sRNA",
                  "0"
                ],
                [
                  "test_move_file",
                  "0"
                ],
                [
                  "test_convert_gff2rntptt",
                  "0"
                ],
                [
                  "test_combine_annotation",
                  "0"
                ],
                [
                  "test_compute_stat",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_convert_to_gff",
                  "0"
                ],
                [
                  "test_run_terminator",
                  "0"
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "0"
                ],
                [
                  "test_run_TransTermHP",
                  "0"
                ],
                [
                  "test_merge_sRNA",
                  "0"
                ],
                [
                  "test_move_file",
                  "0"
                ],
                [
                  "test_convert_gff2rntptt",
                  "0"
                ],
                [
                  "test_combine_annotation",
                  "0"
                ],
                [
                  "test_compute_stat",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_run_terminator",
                "false"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "false"
              ],
              [
                "test_run_TransTermHP",
                "false"
              ],
              [
                "test_merge_sRNA",
                "false"
              ],
              [
                "test_move_file",
                "false"
              ],
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_combine_annotation",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_run_terminator",
                "false"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "false"
              ],
              [
                "test_run_TransTermHP",
                "false"
              ],
              [
                "test_merge_sRNA",
                "false"
              ],
              [
                "test_move_file",
                "false"
              ],
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_combine_annotation",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "1"
              ],
              [
                "test_run_terminator",
                "6"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "2"
              ],
              [
                "test_run_TransTermHP",
                "1"
              ],
              [
                "test_merge_sRNA",
                "1"
              ],
              [
                "test_move_file",
                "2"
              ],
              [
                "test_convert_gff2rntptt",
                "2"
              ],
              [
                "test_combine_annotation",
                "1"
              ],
              [
                "test_compute_stat",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                [
                  "args",
                  "log",
                  "datas",
                  "hp_folder"
                ]
              ],
              [
                "test_run_terminator",
                [
                  "args",
                  "tex_wigs",
                  "log",
                  "frag_wigs"
                ]
              ],
              [
                "test_compute_intersection_forward_reverse",
                [
                  "args",
                  "log",
                  "term_outfolder",
                  "csv_outfolder"
                ]
              ],
              [
                "test_run_TransTermHP",
                [
                  "args",
                  "log"
                ]
              ],
              [
                "test_merge_sRNA",
                [
                  "merge"
                ]
              ],
              [
                "test_move_file",
                [
                  "term_outfolder",
                  "csv_outfolder"
                ]
              ],
              [
                "test_convert_gff2rntptt",
                [
                  "prefixs",
                  "log",
                  "file_types"
                ]
              ],
              [
                "test_combine_annotation",
                [
                  "result",
                  "test2",
                  "datas",
                  "files",
                  "test1",
                  "combine_file"
                ]
              ],
              [
                "test_compute_stat",
                [
                  "args",
                  "log",
                  "term_outfolder",
                  "csv_outfolder"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                [
                  "self.gffs",
                  "self.mock_parser",
                  "self.mock_args",
                  "self.out",
                  "self.example",
                  "self.term",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_terminator",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_parser",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.trans",
                  "self.example",
                  "self.term",
                  "self.srnas",
                  "self.test_folder"
                ]
              ],
              [
                "test_compute_intersection_forward_reverse",
                [
                  "self.mock_parser",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.trans",
                  "self.term",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_TransTermHP",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.example",
                  "self.term",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_sRNA",
                [
                  "self.gffs",
                  "self.mock_parser",
                  "self.example",
                  "self.term",
                  "self.srnas"
                ]
              ],
              [
                "test_move_file",
                [
                  "self.gffs",
                  "self.out",
                  "self.example",
                  "self.term"
                ]
              ],
              [
                "test_convert_gff2rntptt",
                [
                  "self.gffs",
                  "self.fastas",
                  "self.example",
                  "self.term",
                  "self.srnas",
                  "self.test_folder"
                ]
              ],
              [
                "test_combine_annotation",
                [
                  "self.example",
                  "self.term",
                  "self.test_folder"
                ]
              ],
              [
                "test_compute_stat",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.example",
                  "self.term",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.39630938422356826,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_move_file",
                  "test_compute_stat",
                  0.6341090133704901
                ],
                [
                  "test_merge_sRNA",
                  "test_compute_intersection_forward_reverse",
                  0.2505034500717203
                ],
                [
                  "test_convert_to_gff",
                  "test_merge_sRNA",
                  0.26867745009131705
                ],
                [
                  "test_merge_sRNA",
                  "test_compute_stat",
                  0.2200666248474033
                ],
                [
                  "test_move_file",
                  "test_compute_intersection_forward_reverse",
                  0.23522429421753424
                ],
                [
                  "test_compute_stat",
                  "test_run_terminator",
                  0.47250255581619144
                ],
                [
                  "test_combine_annotation",
                  "test_run_terminator",
                  0.5307800541830301
                ],
                [
                  "test_run_TransTermHP",
                  "test_convert_to_gff",
                  0.5611504152845287
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_compute_stat",
                  0.3152305707273615
                ],
                [
                  "test_run_TransTermHP",
                  "test_run_terminator",
                  0.7279764628631261
                ],
                [
                  "test_combine_annotation",
                  "test_move_file",
                  0.2132410587138044
                ],
                [
                  "test_combine_annotation",
                  "test_compute_intersection_forward_reverse",
                  0.4714924363704501
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_move_file",
                  0.2101050788156825
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_run_terminator",
                  0.36807234261935523
                ],
                [
                  "test_combine_annotation",
                  "test_merge_sRNA",
                  0.24829265088068406
                ],
                [
                  "test_move_file",
                  "test_run_terminator",
                  0.30347684781789913
                ],
                [
                  "test_run_TransTermHP",
                  "test_compute_stat",
                  0.48358074055722833
                ],
                [
                  "test_convert_to_gff",
                  "test_compute_intersection_forward_reverse",
                  0.6365376251833594
                ],
                [
                  "test_merge_sRNA",
                  "test_run_terminator",
                  0.3123038058588469
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_combine_annotation",
                  0.33767800519773034
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_run_TransTermHP",
                  0.3628781513582545
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_merge_sRNA",
                  0.43243243243243246
                ],
                [
                  "test_combine_annotation",
                  "test_run_TransTermHP",
                  0.45930966637819703
                ],
                [
                  "test_run_TransTermHP",
                  "test_move_file",
                  0.42538497969766276
                ],
                [
                  "test_merge_sRNA",
                  "test_move_file",
                  0.1600800600500438
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "test_compute_stat",
                  0.4195064394198295
                ],
                [
                  "test_combine_annotation",
                  "test_compute_stat",
                  0.2972466355562737
                ],
                [
                  "test_run_TransTermHP",
                  "test_compute_intersection_forward_reverse",
                  0.5605637447038259
                ],
                [
                  "test_convert_to_gff",
                  "test_move_file",
                  0.1989207983442869
                ],
                [
                  "test_combine_annotation",
                  "test_convert_to_gff",
                  0.4818108997217146
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_compute_intersection_forward_reverse",
                  0.27494281105432716
                ],
                [
                  "test_convert_gff2rntptt",
                  "test_convert_to_gff",
                  0.3761484301278439
                ],
                [
                  "test_convert_to_gff",
                  "test_compute_stat",
                  0.37368225836176167
                ],
                [
                  "test_convert_to_gff",
                  "test_run_terminator",
                  0.6209265275685685
                ],
                [
                  "test_compute_intersection_forward_reverse",
                  "test_run_terminator",
                  0.7703037975646805
                ],
                [
                  "test_run_TransTermHP",
                  "test_merge_sRNA",
                  0.2519987162210101
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_to_gff",
                "false"
              ],
              [
                "test_run_terminator",
                "false"
              ],
              [
                "test_compute_intersection_forward_reverse",
                "false"
              ],
              [
                "test_run_TransTermHP",
                "false"
              ],
              [
                "test_merge_sRNA",
                "false"
              ],
              [
                "test_move_file",
                "false"
              ],
              [
                "test_convert_gff2rntptt",
                "false"
              ],
              [
                "test_combine_annotation",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "tests_\u0026_test_transcript.py",
    "testCases": [
      {
        "name": "TestsTranscriptAssembly",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_post_modify",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_compare_cds",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_run_transcript_assembly",
                  "[]"
                ],
                [
                  "test_compare_tss",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compute",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_for_two_wigs",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_for_one_wig",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_post_modify",
                  "[]"
                ],
                [
                  "test_compare_cds",
                  "[]"
                ],
                [
                  "test_run_transcript_assembly",
                  "[]"
                ],
                [
                  "test_compare_tss",
                  "[]"
                ],
                [
                  "test_compute",
                  "[]"
                ],
                [
                  "test_for_two_wigs",
                  "[]"
                ],
                [
                  "test_for_one_wig",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_post_modify",
                  "false"
                ],
                [
                  "test_compare_cds",
                  "false"
                ],
                [
                  "test_run_transcript_assembly",
                  "false"
                ],
                [
                  "test_compare_tss",
                  "false"
                ],
                [
                  "test_compute",
                  "false"
                ],
                [
                  "test_for_two_wigs",
                  "false"
                ],
                [
                  "test_for_one_wig",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_post_modify",
                  "false"
                ],
                [
                  "test_compare_cds",
                  "false"
                ],
                [
                  "test_run_transcript_assembly",
                  "false"
                ],
                [
                  "test_compare_tss",
                  "false"
                ],
                [
                  "test_compute",
                  "false"
                ],
                [
                  "test_for_two_wigs",
                  "false"
                ],
                [
                  "test_for_one_wig",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_post_modify",
                  "false"
                ],
                [
                  "test_compare_cds",
                  "false"
                ],
                [
                  "test_run_transcript_assembly",
                  "false"
                ],
                [
                  "test_compare_tss",
                  "false"
                ],
                [
                  "test_compute",
                  "false"
                ],
                [
                  "test_for_two_wigs",
                  "false"
                ],
                [
                  "test_for_one_wig",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_post_modify",
                  "false"
                ],
                [
                  "test_compare_cds",
                  "false"
                ],
                [
                  "test_run_transcript_assembly",
                  "false"
                ],
                [
                  "test_compare_tss",
                  "false"
                ],
                [
                  "test_compute",
                  "false"
                ],
                [
                  "test_for_two_wigs",
                  "false"
                ],
                [
                  "test_for_one_wig",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                "false"
              ],
              [
                "test_compare_cds",
                "false"
              ],
              [
                "test_run_transcript_assembly",
                "false"
              ],
              [
                "test_compare_tss",
                "false"
              ],
              [
                "test_compute",
                "false"
              ],
              [
                "test_for_two_wigs",
                "false"
              ],
              [
                "test_for_one_wig",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                "false"
              ],
              [
                "test_compare_cds",
                "false"
              ],
              [
                "test_run_transcript_assembly",
                "false"
              ],
              [
                "test_compare_tss",
                "false"
              ],
              [
                "test_compute",
                "false"
              ],
              [
                "test_for_two_wigs",
                "false"
              ],
              [
                "test_for_one_wig",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_post_modify",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.frag",
                  "self.trans",
                  "self.terms",
                  "self.test_folder",
                  "self.out_table",
                  "self.out_gff",
                  "self.stat",
                  "self.tex"
                ]
              ],
              [
                "test_compare_cds",
                [
                  "self.tsss",
                  "self.frag",
                  "self.terms",
                  "self.out_table",
                  "self.stat",
                  "self.tex"
                ]
              ],
              [
                "test_run_transcript_assembly",
                [
                  "self.mock_parser",
                  "self.trans",
                  "self.out_table",
                  "self.out_gff",
                  "self.stat",
                  "self.tex"
                ]
              ],
              [
                "test_compare_tss",
                [
                  "self.tsss",
                  "self.frag",
                  "self.terms",
                  "self.out_table",
                  "self.stat",
                  "self.tex"
                ]
              ],
              [
                "test_compute",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.test_folder",
                  "self.out_table",
                  "self.gffs",
                  "self.out_gff",
                  "self.stat",
                  "self.tex"
                ]
              ],
              [
                "test_for_two_wigs",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.example",
                  "self.terms",
                  "self.out_table",
                  "self.stat",
                  "self.out"
                ]
              ],
              [
                "test_for_one_wig",
                [
                  "self.tsss",
                  "self.trans",
                  "self.terms",
                  "self.test_folder",
                  "self.out_table",
                  "self.stat",
                  "self.tex"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                "false"
              ],
              [
                "test_compare_cds",
                "false"
              ],
              [
                "test_run_transcript_assembly",
                "false"
              ],
              [
                "test_compare_tss",
                "false"
              ],
              [
                "test_compute",
                "false"
              ],
              [
                "test_for_two_wigs",
                "false"
              ],
              [
                "test_for_one_wig",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                "false"
              ],
              [
                "test_compare_cds",
                "false"
              ],
              [
                "test_run_transcript_assembly",
                "false"
              ],
              [
                "test_compare_tss",
                "false"
              ],
              [
                "test_compute",
                "false"
              ],
              [
                "test_for_two_wigs",
                "false"
              ],
              [
                "test_for_one_wig",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_post_modify",
                  "0"
                ],
                [
                  "test_compare_cds",
                  "0"
                ],
                [
                  "test_run_transcript_assembly",
                  "0"
                ],
                [
                  "test_compare_tss",
                  "0"
                ],
                [
                  "test_compute",
                  "0"
                ],
                [
                  "test_for_two_wigs",
                  "0"
                ],
                [
                  "test_for_one_wig",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_post_modify",
                  "0"
                ],
                [
                  "test_compare_cds",
                  "0"
                ],
                [
                  "test_run_transcript_assembly",
                  "0"
                ],
                [
                  "test_compare_tss",
                  "0"
                ],
                [
                  "test_compute",
                  "0"
                ],
                [
                  "test_for_two_wigs",
                  "0"
                ],
                [
                  "test_for_one_wig",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                "false"
              ],
              [
                "test_compare_cds",
                "false"
              ],
              [
                "test_run_transcript_assembly",
                "false"
              ],
              [
                "test_compare_tss",
                "false"
              ],
              [
                "test_compute",
                "false"
              ],
              [
                "test_for_two_wigs",
                "false"
              ],
              [
                "test_for_one_wig",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                "false"
              ],
              [
                "test_compare_cds",
                "false"
              ],
              [
                "test_run_transcript_assembly",
                "false"
              ],
              [
                "test_compare_tss",
                "false"
              ],
              [
                "test_compute",
                "false"
              ],
              [
                "test_for_two_wigs",
                "false"
              ],
              [
                "test_for_one_wig",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_post_modify",
                "1"
              ],
              [
                "test_compare_cds",
                "2"
              ],
              [
                "test_run_transcript_assembly",
                "0"
              ],
              [
                "test_compare_tss",
                "2"
              ],
              [
                "test_compute",
                "1"
              ],
              [
                "test_for_two_wigs",
                "1"
              ],
              [
                "test_for_one_wig",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                [
                  "args",
                  "pre_fill",
                  "pre_longer",
                  "gff_out"
                ]
              ],
              [
                "test_compare_cds",
                [
                  "args",
                  "log",
                  "datas",
                  "gff_out"
                ]
              ],
              [
                "test_run_transcript_assembly",
                [
                  "args",
                  "log",
                  "gff_out",
                  "pre_assembly"
                ]
              ],
              [
                "test_compare_tss",
                [
                  "args",
                  "log",
                  "datas",
                  "gff_out"
                ]
              ],
              [
                "test_compute",
                [
                  "args",
                  "strains",
                  "pre_assembly"
                ]
              ],
              [
                "test_for_two_wigs",
                [
                  "pre_combine",
                  "args",
                  "log"
                ]
              ],
              [
                "test_for_one_wig",
                [
                  "args",
                  "datas",
                  "strains",
                  "pre_assembly"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.example",
                  "self.tran"
                ]
              ],
              [
                "test_compare_cds",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_parser",
                  "self.out_gff",
                  "self.mock_args",
                  "self.out",
                  "self.trans",
                  "self.example",
                  "self.test_folder",
                  "self.tran"
                ]
              ],
              [
                "test_run_transcript_assembly",
                [
                  "self.gffs",
                  "self.mock",
                  "self.tsss",
                  "self.mock_args",
                  "self.out",
                  "self.frag",
                  "self.example",
                  "self.terms",
                  "self.test_folder",
                  "self.tran"
                ]
              ],
              [
                "test_compare_tss",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_parser",
                  "self.out_gff",
                  "self.mock_args",
                  "self.out",
                  "self.trans",
                  "self.example",
                  "self.test_folder",
                  "self.tran"
                ]
              ],
              [
                "test_compute",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.frag",
                  "self.tran"
                ]
              ],
              [
                "test_for_two_wigs",
                [
                  "self.gffs",
                  "self.mock",
                  "self.out_gff",
                  "self.mock_args",
                  "self.frag",
                  "self.tex",
                  "self.test_folder",
                  "self.tran"
                ]
              ],
              [
                "test_for_one_wig",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_parser",
                  "self.out_gff",
                  "self.mock_args",
                  "self.out",
                  "self.frag",
                  "self.example",
                  "self.tran"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6784044332164834,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_for_one_wig",
                  "test_compare_tss",
                  0.6707669222528211
                ],
                [
                  "test_post_modify",
                  "test_run_transcript_assembly",
                  0.8077809036108511
                ],
                [
                  "test_for_one_wig",
                  "test_compare_cds",
                  0.694836583430807
                ],
                [
                  "test_for_two_wigs",
                  "test_post_modify",
                  0.5643647060843668
                ],
                [
                  "test_compute",
                  "test_run_transcript_assembly",
                  0.6362993929095839
                ],
                [
                  "test_for_two_wigs",
                  "test_compare_cds",
                  0.5690634870637792
                ],
                [
                  "test_post_modify",
                  "test_compare_cds",
                  0.7404262767734512
                ],
                [
                  "test_compute",
                  "test_for_two_wigs",
                  0.6330496346179116
                ],
                [
                  "test_for_one_wig",
                  "test_run_transcript_assembly",
                  0.7479024487143558
                ],
                [
                  "test_compare_cds",
                  "test_compare_tss",
                  0.9028817193370802
                ],
                [
                  "test_for_one_wig",
                  "test_for_two_wigs",
                  0.7271744192757827
                ],
                [
                  "test_compute",
                  "test_compare_cds",
                  0.49853520812012214
                ],
                [
                  "test_compute",
                  "test_post_modify",
                  0.5719732469497224
                ],
                [
                  "test_compare_tss",
                  "test_run_transcript_assembly",
                  0.8140962286670577
                ],
                [
                  "test_for_two_wigs",
                  "test_compare_tss",
                  0.581451030301867
                ],
                [
                  "test_post_modify",
                  "test_compare_tss",
                  0.6965729297587887
                ],
                [
                  "test_compute",
                  "test_compare_tss",
                  0.46684314920529046
                ],
                [
                  "test_for_one_wig",
                  "test_post_modify",
                  0.6712611772417558
                ],
                [
                  "test_for_two_wigs",
                  "test_run_transcript_assembly",
                  0.667150639713202
                ],
                [
                  "test_compute",
                  "test_for_one_wig",
                  0.8084620889876205
                ],
                [
                  "test_compare_cds",
                  "test_run_transcript_assembly",
                  0.7756009045299338
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_post_modify",
                "false"
              ],
              [
                "test_compare_cds",
                "false"
              ],
              [
                "test_run_transcript_assembly",
                "false"
              ],
              [
                "test_compare_tss",
                "false"
              ],
              [
                "test_compute",
                "false"
              ],
              [
                "test_for_two_wigs",
                "false"
              ],
              [
                "test_for_one_wig",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_test_expresssion.py",
    "testCases": [
      {
        "name": "TestExpression",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_replicates",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_expression",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_replicates",
                  "[]"
                ],
                [
                  "test_expression",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_replicates",
                  "false"
                ],
                [
                  "test_expression",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_replicates",
                  "false"
                ],
                [
                  "test_expression",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_replicates",
                  "false"
                ],
                [
                  "test_expression",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_replicates",
                  "false"
                ],
                [
                  "test_expression",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "false"
              ],
              [
                "test_expression",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "false"
              ],
              [
                "test_expression",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_replicates",
                [
                  "self.tex_path",
                  "self.mock",
                  "self.test_folder",
                  "self.frag_path"
                ]
              ],
              [
                "test_expression",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "false"
              ],
              [
                "test_expression",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "false"
              ],
              [
                "test_expression",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_replicates",
                  "0"
                ],
                [
                  "test_expression",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_replicates",
                  "0"
                ],
                [
                  "test_expression",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "false"
              ],
              [
                "test_expression",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "false"
              ],
              [
                "test_expression",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "1"
              ],
              [
                "test_expression",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                [
                  "replicates"
                ]
              ],
              [
                "test_expression",
                [
                  "tex_libs",
                  "frag_libs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                [
                  "self.express"
                ]
              ],
              [
                "test_expression",
                [
                  "self.tex_path",
                  "self.mock",
                  "self.express",
                  "self.frag_path",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.25327763445930646,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_replicates",
                  "test_expression",
                  0.25327763445930646
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_replicates",
                "false"
              ],
              [
                "test_expression",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_extract_RBS.py",
    "testCases": [
      {
        "name": "TestExtractRBS",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_extract_seq",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_site",
                  "[PyCallExpression: self.assertListEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_extract_seq",
                  "[]"
                ],
                [
                  "test_detect_site",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_extract_seq",
                  "false"
                ],
                [
                  "test_detect_site",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_extract_seq",
                  "false"
                ],
                [
                  "test_detect_site",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_extract_seq",
                  "false"
                ],
                [
                  "test_detect_site",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_extract_seq",
                  "false"
                ],
                [
                  "test_detect_site",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "false"
              ],
              [
                "test_detect_site",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "false"
              ],
              [
                "test_detect_site",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_extract_seq",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_site",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "false"
              ],
              [
                "test_detect_site",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "false"
              ],
              [
                "test_detect_site",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_extract_seq",
                  "0"
                ],
                [
                  "test_detect_site",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_extract_seq",
                  "0"
                ],
                [
                  "test_detect_site",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "false"
              ],
              [
                "test_detect_site",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "false"
              ],
              [
                "test_detect_site",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "2"
              ],
              [
                "test_detect_site",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                [
                  "inters"
                ]
              ],
              [
                "test_detect_site",
                [
                  "args",
                  "inters",
                  "ribos"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                [
                  "self.example"
                ]
              ],
              [
                "test_detect_site",
                [
                  "self.mock_args"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.47123260503979625,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_detect_site",
                  "test_extract_seq",
                  0.47123260503979625
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_extract_seq",
                "false"
              ],
              [
                "test_detect_site",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_multiparser.py",
    "testCases": [
      {
        "name": "TestMultiparser",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_parser_gff",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_combine_wig",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_parser_fasta",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_combine_fasta",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_parser_wig",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_combine_gff",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_parser_gff",
                  "[]"
                ],
                [
                  "test_combine_wig",
                  "[]"
                ],
                [
                  "test_parser_fasta",
                  "[]"
                ],
                [
                  "test_combine_fasta",
                  "[]"
                ],
                [
                  "test_parser_wig",
                  "[]"
                ],
                [
                  "test_combine_gff",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_parser_gff",
                  "false"
                ],
                [
                  "test_combine_wig",
                  "true"
                ],
                [
                  "test_parser_fasta",
                  "false"
                ],
                [
                  "test_combine_fasta",
                  "false"
                ],
                [
                  "test_parser_wig",
                  "false"
                ],
                [
                  "test_combine_gff",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_parser_gff",
                  "false"
                ],
                [
                  "test_combine_wig",
                  "false"
                ],
                [
                  "test_parser_fasta",
                  "false"
                ],
                [
                  "test_combine_fasta",
                  "false"
                ],
                [
                  "test_parser_wig",
                  "false"
                ],
                [
                  "test_combine_gff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_parser_gff",
                  "false"
                ],
                [
                  "test_combine_wig",
                  "false"
                ],
                [
                  "test_parser_fasta",
                  "false"
                ],
                [
                  "test_combine_fasta",
                  "false"
                ],
                [
                  "test_parser_wig",
                  "false"
                ],
                [
                  "test_combine_gff",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_parser_gff",
                  "false"
                ],
                [
                  "test_combine_wig",
                  "false"
                ],
                [
                  "test_parser_fasta",
                  "false"
                ],
                [
                  "test_combine_fasta",
                  "false"
                ],
                [
                  "test_parser_wig",
                  "false"
                ],
                [
                  "test_combine_gff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "false"
              ],
              [
                "test_combine_wig",
                "false"
              ],
              [
                "test_parser_fasta",
                "false"
              ],
              [
                "test_combine_fasta",
                "false"
              ],
              [
                "test_parser_wig",
                "false"
              ],
              [
                "test_combine_gff",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "false"
              ],
              [
                "test_combine_wig",
                "false"
              ],
              [
                "test_parser_fasta",
                "false"
              ],
              [
                "test_combine_fasta",
                "false"
              ],
              [
                "test_parser_wig",
                "false"
              ],
              [
                "test_combine_gff",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_parser_gff",
                [
                  "self.tar_folder"
                ]
              ],
              [
                "test_combine_wig",
                []
              ],
              [
                "test_parser_fasta",
                [
                  "self.tar_folder"
                ]
              ],
              [
                "test_combine_fasta",
                []
              ],
              [
                "test_parser_wig",
                [
                  "self.tar_folder"
                ]
              ],
              [
                "test_combine_gff",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "false"
              ],
              [
                "test_combine_wig",
                "false"
              ],
              [
                "test_parser_fasta",
                "false"
              ],
              [
                "test_combine_fasta",
                "false"
              ],
              [
                "test_parser_wig",
                "false"
              ],
              [
                "test_combine_gff",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "false"
              ],
              [
                "test_combine_wig",
                "false"
              ],
              [
                "test_parser_fasta",
                "false"
              ],
              [
                "test_combine_fasta",
                "false"
              ],
              [
                "test_parser_wig",
                "false"
              ],
              [
                "test_combine_gff",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_parser_gff",
                  "0"
                ],
                [
                  "test_combine_wig",
                  "0"
                ],
                [
                  "test_parser_fasta",
                  "0"
                ],
                [
                  "test_combine_fasta",
                  "0"
                ],
                [
                  "test_parser_wig",
                  "0"
                ],
                [
                  "test_combine_gff",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_parser_gff",
                  "0"
                ],
                [
                  "test_combine_wig",
                  "0"
                ],
                [
                  "test_parser_fasta",
                  "0"
                ],
                [
                  "test_combine_fasta",
                  "0"
                ],
                [
                  "test_parser_wig",
                  "0"
                ],
                [
                  "test_combine_gff",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "false"
              ],
              [
                "test_combine_wig",
                "false"
              ],
              [
                "test_parser_fasta",
                "false"
              ],
              [
                "test_combine_fasta",
                "false"
              ],
              [
                "test_parser_wig",
                "false"
              ],
              [
                "test_combine_gff",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "false"
              ],
              [
                "test_combine_wig",
                "false"
              ],
              [
                "test_parser_fasta",
                "false"
              ],
              [
                "test_combine_fasta",
                "false"
              ],
              [
                "test_parser_wig",
                "false"
              ],
              [
                "test_combine_gff",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "8"
              ],
              [
                "test_combine_wig",
                "2"
              ],
              [
                "test_parser_fasta",
                "4"
              ],
              [
                "test_combine_fasta",
                "1"
              ],
              [
                "test_parser_wig",
                "8"
              ],
              [
                "test_combine_gff",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_parser_gff",
                [
                  "gff_file",
                  "tss_file"
                ]
              ],
              [
                "test_combine_wig",
                [
                  "sub_wig3",
                  "tmp_ref",
                  "sub_wig2",
                  "example_wigs",
                  "sub_wig4",
                  "sub_wig1",
                  "tmp_tar",
                  "sub_fasta1",
                  "wig_files",
                  "libs",
                  "sub_fasta2"
                ]
              ],
              [
                "test_parser_fasta",
                [
                  "fasta_file"
                ]
              ],
              [
                "test_combine_fasta",
                [
                  "tmp_ref",
                  "tmp_tar",
                  "sub_fasta1",
                  "sub_gff2",
                  "sub_fasta2",
                  "sub_gff1"
                ]
              ],
              [
                "test_parser_wig",
                [
                  "wig_r_file",
                  "wig_f_file"
                ]
              ],
              [
                "test_combine_gff",
                [
                  "tmp_ref",
                  "tmp_tar",
                  "sub_fasta1",
                  "sub_gff2",
                  "sub_fasta2",
                  "sub_gff1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                [
                  "self.example",
                  "self.multiparser",
                  "self.ref_folder"
                ]
              ],
              [
                "test_combine_wig",
                [
                  "self.tar_folder",
                  "self.example",
                  "self.multiparser",
                  "self.ref_folder"
                ]
              ],
              [
                "test_parser_fasta",
                [
                  "self.example",
                  "self.multiparser",
                  "self.ref_folder"
                ]
              ],
              [
                "test_combine_fasta",
                [
                  "self.tar_folder",
                  "self.example",
                  "self.multiparser",
                  "self.ref_folder"
                ]
              ],
              [
                "test_parser_wig",
                [
                  "self.example",
                  "self.multiparser",
                  "self.ref_folder"
                ]
              ],
              [
                "test_combine_gff",
                [
                  "self.tar_folder",
                  "self.example",
                  "self.multiparser",
                  "self.ref_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48231088505049086,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_combine_fasta",
                  "test_parser_fasta",
                  0.2834870761630837
                ],
                [
                  "test_combine_wig",
                  "test_parser_wig",
                  0.45885408015317974
                ],
                [
                  "test_combine_wig",
                  "test_parser_fasta",
                  0.18143756461739213
                ],
                [
                  "test_parser_gff",
                  "test_parser_wig",
                  0.7493411805227426
                ],
                [
                  "test_combine_fasta",
                  "test_combine_wig",
                  0.667980089603476
                ],
                [
                  "test_combine_fasta",
                  "test_parser_gff",
                  0.36123364228938754
                ],
                [
                  "test_parser_fasta",
                  "test_parser_wig",
                  0.5890524529311509
                ],
                [
                  "test_combine_gff",
                  "test_parser_gff",
                  0.36298474415063636
                ],
                [
                  "test_combine_fasta",
                  "test_combine_gff",
                  0.9874486591321145
                ],
                [
                  "test_combine_gff",
                  "test_parser_wig",
                  0.2831894548081971
                ],
                [
                  "test_combine_wig",
                  "test_parser_gff",
                  0.3647984936927505
                ],
                [
                  "test_combine_fasta",
                  "test_parser_wig",
                  0.2835846949932894
                ],
                [
                  "test_combine_wig",
                  "test_combine_gff",
                  0.6703269890347437
                ],
                [
                  "test_parser_fasta",
                  "test_parser_gff",
                  0.707852181633042
                ],
                [
                  "test_combine_gff",
                  "test_parser_fasta",
                  0.2830919720321763
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_gff",
                "false"
              ],
              [
                "test_combine_wig",
                "false"
              ],
              [
                "test_parser_fasta",
                "false"
              ],
              [
                "test_combine_fasta",
                "false"
              ],
              [
                "test_parser_wig",
                "false"
              ],
              [
                "test_combine_gff",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_srna_target.py",
    "testCases": [
      {
        "name": "TestsRNATargetPrediction",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_rnaup",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sort_srna_fasta",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_get_continue",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_gen_seq",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_read_fasta",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_rna_plex",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_specific_seq",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_rnaup",
                  "[]"
                ],
                [
                  "test_sort_srna_fasta",
                  "[]"
                ],
                [
                  "test_get_continue",
                  "[]"
                ],
                [
                  "test_gen_seq",
                  "[]"
                ],
                [
                  "test_read_fasta",
                  "[]"
                ],
                [
                  "test_rna_plex",
                  "[]"
                ],
                [
                  "test_get_specific_seq",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_rnaup",
                  "false"
                ],
                [
                  "test_sort_srna_fasta",
                  "false"
                ],
                [
                  "test_get_continue",
                  "false"
                ],
                [
                  "test_gen_seq",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_rna_plex",
                  "false"
                ],
                [
                  "test_get_specific_seq",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_rnaup",
                  "false"
                ],
                [
                  "test_sort_srna_fasta",
                  "false"
                ],
                [
                  "test_get_continue",
                  "false"
                ],
                [
                  "test_gen_seq",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_rna_plex",
                  "false"
                ],
                [
                  "test_get_specific_seq",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_rnaup",
                  "false"
                ],
                [
                  "test_sort_srna_fasta",
                  "false"
                ],
                [
                  "test_get_continue",
                  "false"
                ],
                [
                  "test_gen_seq",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_rna_plex",
                  "false"
                ],
                [
                  "test_get_specific_seq",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_rnaup",
                  "false"
                ],
                [
                  "test_sort_srna_fasta",
                  "false"
                ],
                [
                  "test_get_continue",
                  "false"
                ],
                [
                  "test_gen_seq",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_rna_plex",
                  "false"
                ],
                [
                  "test_get_specific_seq",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "false"
              ],
              [
                "test_sort_srna_fasta",
                "false"
              ],
              [
                "test_get_continue",
                "false"
              ],
              [
                "test_gen_seq",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_rna_plex",
                "false"
              ],
              [
                "test_get_specific_seq",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "false"
              ],
              [
                "test_sort_srna_fasta",
                "false"
              ],
              [
                "test_get_continue",
                "false"
              ],
              [
                "test_gen_seq",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_rna_plex",
                "false"
              ],
              [
                "test_get_specific_seq",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_rnaup",
                [
                  "self.seq",
                  "self.example",
                  "self.rnaup",
                  "self.merge",
                  "self.rnaplex"
                ]
              ],
              [
                "test_sort_srna_fasta",
                [
                  "self.seq",
                  "self.example",
                  "self.rnaup",
                  "self.merge",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.rnaplex",
                  "self.out",
                  "self.srnas"
                ]
              ],
              [
                "test_get_continue",
                [
                  "self.seq",
                  "self.rnaup",
                  "self.merge",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.rnaplex",
                  "self.out",
                  "self.srnas"
                ]
              ],
              [
                "test_gen_seq",
                [
                  "self.seq",
                  "self.test_folder",
                  "self.rnaup",
                  "self.merge",
                  "self.mock",
                  "self.rnaplex"
                ]
              ],
              [
                "test_read_fasta",
                [
                  "self.seq",
                  "self.example",
                  "self.test_folder",
                  "self.rnaup",
                  "self.merge",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.rnaplex",
                  "self.out",
                  "self.srnas"
                ]
              ],
              [
                "test_rna_plex",
                [
                  "self.seq",
                  "self.rnaup",
                  "self.merge",
                  "self.gffs",
                  "self.fastas",
                  "self.rnaplex",
                  "self.out",
                  "self.srnas"
                ]
              ],
              [
                "test_get_specific_seq",
                [
                  "self.seq",
                  "self.rnaup",
                  "self.merge",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.rnaplex",
                  "self.out",
                  "self.srnas"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "false"
              ],
              [
                "test_sort_srna_fasta",
                "false"
              ],
              [
                "test_get_continue",
                "false"
              ],
              [
                "test_gen_seq",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_rna_plex",
                "false"
              ],
              [
                "test_get_specific_seq",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "false"
              ],
              [
                "test_sort_srna_fasta",
                "false"
              ],
              [
                "test_get_continue",
                "false"
              ],
              [
                "test_gen_seq",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_rna_plex",
                "false"
              ],
              [
                "test_get_specific_seq",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_rnaup",
                  "0"
                ],
                [
                  "test_sort_srna_fasta",
                  "0"
                ],
                [
                  "test_get_continue",
                  "0"
                ],
                [
                  "test_gen_seq",
                  "0"
                ],
                [
                  "test_read_fasta",
                  "0"
                ],
                [
                  "test_rna_plex",
                  "0"
                ],
                [
                  "test_get_specific_seq",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_rnaup",
                  "0"
                ],
                [
                  "test_sort_srna_fasta",
                  "0"
                ],
                [
                  "test_get_continue",
                  "0"
                ],
                [
                  "test_gen_seq",
                  "0"
                ],
                [
                  "test_read_fasta",
                  "0"
                ],
                [
                  "test_rna_plex",
                  "0"
                ],
                [
                  "test_get_specific_seq",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "false"
              ],
              [
                "test_sort_srna_fasta",
                "false"
              ],
              [
                "test_get_continue",
                "false"
              ],
              [
                "test_gen_seq",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_rna_plex",
                "false"
              ],
              [
                "test_get_specific_seq",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "false"
              ],
              [
                "test_sort_srna_fasta",
                "false"
              ],
              [
                "test_get_continue",
                "false"
              ],
              [
                "test_gen_seq",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_rna_plex",
                "false"
              ],
              [
                "test_get_specific_seq",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "1"
              ],
              [
                "test_sort_srna_fasta",
                "1"
              ],
              [
                "test_get_continue",
                "1"
              ],
              [
                "test_gen_seq",
                "2"
              ],
              [
                "test_read_fasta",
                "1"
              ],
              [
                "test_rna_plex",
                "1"
              ],
              [
                "test_get_specific_seq",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                [
                  "args",
                  "log",
                  "datas"
                ]
              ],
              [
                "test_sort_srna_fasta",
                [
                  "datas",
                  "fasta"
                ]
              ],
              [
                "test_get_continue",
                [
                  "out_rnaup",
                  "srnas"
                ]
              ],
              [
                "test_gen_seq",
                [
                  "args",
                  "srna_seq",
                  "datas",
                  "tar_seq"
                ]
              ],
              [
                "test_read_fasta",
                [
                  "fasta",
                  "seq"
                ]
              ],
              [
                "test_rna_plex",
                [
                  "args",
                  "log",
                  "datas"
                ]
              ],
              [
                "test_get_specific_seq",
                [
                  "seq_file",
                  "datas",
                  "srna_out",
                  "srna_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.star",
                  "self.out",
                  "self.srnas",
                  "self.test_folder"
                ]
              ],
              [
                "test_sort_srna_fasta",
                [
                  "self.fastas",
                  "self.star",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_continue",
                [
                  "self.star",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_gen_seq",
                [
                  "self.gffs",
                  "self.mock_args",
                  "self.fastas",
                  "self.star",
                  "self.out",
                  "self.example",
                  "self.srnas"
                ]
              ],
              [
                "test_read_fasta",
                [
                  "self.fastas",
                  "self.star"
                ]
              ],
              [
                "test_rna_plex",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.star",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_specific_seq",
                [
                  "self.star",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3900643112880198,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_gen_seq",
                  "test_get_continue",
                  0.29422298377099043
                ],
                [
                  "test_sort_srna_fasta",
                  "test_get_specific_seq",
                  0.35555906726738895
                ],
                [
                  "test_get_specific_seq",
                  "test_gen_seq",
                  0.4368751080023615
                ],
                [
                  "test_rna_plex",
                  "test_get_continue",
                  0.27854300726557785
                ],
                [
                  "test_sort_srna_fasta",
                  "test_read_fasta",
                  0.38794291597509756
                ],
                [
                  "test_read_fasta",
                  "test_get_specific_seq",
                  0.2896669048499031
                ],
                [
                  "test_read_fasta",
                  "test_rna_plex",
                  0.27263762711732326
                ],
                [
                  "test_gen_seq",
                  "test_rnaup",
                  0.6417105183837412
                ],
                [
                  "test_get_continue",
                  "test_rnaup",
                  0.4112808171203963
                ],
                [
                  "test_get_specific_seq",
                  "test_get_continue",
                  0.4891249433971656
                ],
                [
                  "test_read_fasta",
                  "test_get_continue",
                  0.32163376045133846
                ],
                [
                  "test_gen_seq",
                  "test_rna_plex",
                  0.7148188604931669
                ],
                [
                  "test_sort_srna_fasta",
                  "test_gen_seq",
                  0.2753387351881337
                ],
                [
                  "test_get_specific_seq",
                  "test_rna_plex",
                  0.2939752713698741
                ],
                [
                  "test_read_fasta",
                  "test_rnaup",
                  0.36165932053632666
                ],
                [
                  "test_read_fasta",
                  "test_gen_seq",
                  0.3154401489382559
                ],
                [
                  "test_sort_srna_fasta",
                  "test_rnaup",
                  0.3635981740928194
                ],
                [
                  "test_get_specific_seq",
                  "test_rnaup",
                  0.44195935495729255
                ],
                [
                  "test_sort_srna_fasta",
                  "test_rna_plex",
                  0.22047927592204922
                ],
                [
                  "test_sort_srna_fasta",
                  "test_get_continue",
                  0.3509312031717982
                ],
                [
                  "test_rna_plex",
                  "test_rnaup",
                  0.6739525387774161
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_rnaup",
                "false"
              ],
              [
                "test_sort_srna_fasta",
                "false"
              ],
              [
                "test_get_continue",
                "false"
              ],
              [
                "test_gen_seq",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_rna_plex",
                "false"
              ],
              [
                "test_get_specific_seq",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_test_tsspredator.py",
    "testCases": [
      {
        "name": "TestsTSSpredator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_convert_gff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_merge_manual",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_low_expression",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_stat_tss",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_validate",
                  "[]"
                ],
                [
                  "test_compare_ta",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_import_lib",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_gen_config",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_merge_wigs",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_orphan",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_print_lib",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_deal_with_overlap",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_set_gen_config",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_convert_gff",
                  "[]"
                ],
                [
                  "test_merge_manual",
                  "[]"
                ],
                [
                  "test_low_expression",
                  "[]"
                ],
                [
                  "test_stat_tss",
                  "[]"
                ],
                [
                  "test_validate",
                  "[]"
                ],
                [
                  "test_compare_ta",
                  "[]"
                ],
                [
                  "test_import_lib",
                  "[]"
                ],
                [
                  "test_gen_config",
                  "[]"
                ],
                [
                  "test_merge_wigs",
                  "[]"
                ],
                [
                  "test_check_orphan",
                  "[]"
                ],
                [
                  "test_print_lib",
                  "[]"
                ],
                [
                  "test_deal_with_overlap",
                  "[]"
                ],
                [
                  "test_set_gen_config",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_convert_gff",
                  "false"
                ],
                [
                  "test_merge_manual",
                  "false"
                ],
                [
                  "test_low_expression",
                  "false"
                ],
                [
                  "test_stat_tss",
                  "false"
                ],
                [
                  "test_validate",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_import_lib",
                  "false"
                ],
                [
                  "test_gen_config",
                  "false"
                ],
                [
                  "test_merge_wigs",
                  "false"
                ],
                [
                  "test_check_orphan",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_deal_with_overlap",
                  "false"
                ],
                [
                  "test_set_gen_config",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_convert_gff",
                  "false"
                ],
                [
                  "test_merge_manual",
                  "false"
                ],
                [
                  "test_low_expression",
                  "false"
                ],
                [
                  "test_stat_tss",
                  "false"
                ],
                [
                  "test_validate",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_import_lib",
                  "false"
                ],
                [
                  "test_gen_config",
                  "false"
                ],
                [
                  "test_merge_wigs",
                  "false"
                ],
                [
                  "test_check_orphan",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_deal_with_overlap",
                  "false"
                ],
                [
                  "test_set_gen_config",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_convert_gff",
                  "false"
                ],
                [
                  "test_merge_manual",
                  "false"
                ],
                [
                  "test_low_expression",
                  "false"
                ],
                [
                  "test_stat_tss",
                  "false"
                ],
                [
                  "test_validate",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_import_lib",
                  "false"
                ],
                [
                  "test_gen_config",
                  "false"
                ],
                [
                  "test_merge_wigs",
                  "false"
                ],
                [
                  "test_check_orphan",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_deal_with_overlap",
                  "false"
                ],
                [
                  "test_set_gen_config",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_convert_gff",
                  "false"
                ],
                [
                  "test_merge_manual",
                  "false"
                ],
                [
                  "test_low_expression",
                  "false"
                ],
                [
                  "test_stat_tss",
                  "false"
                ],
                [
                  "test_validate",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_import_lib",
                  "false"
                ],
                [
                  "test_gen_config",
                  "false"
                ],
                [
                  "test_merge_wigs",
                  "false"
                ],
                [
                  "test_check_orphan",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_deal_with_overlap",
                  "false"
                ],
                [
                  "test_set_gen_config",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                "false"
              ],
              [
                "test_merge_manual",
                "false"
              ],
              [
                "test_low_expression",
                "false"
              ],
              [
                "test_stat_tss",
                "false"
              ],
              [
                "test_validate",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_merge_wigs",
                "false"
              ],
              [
                "test_check_orphan",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_deal_with_overlap",
                "false"
              ],
              [
                "test_set_gen_config",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                "false"
              ],
              [
                "test_merge_manual",
                "false"
              ],
              [
                "test_low_expression",
                "false"
              ],
              [
                "test_stat_tss",
                "false"
              ],
              [
                "test_validate",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_merge_wigs",
                "false"
              ],
              [
                "test_check_orphan",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_deal_with_overlap",
                "false"
              ],
              [
                "test_set_gen_config",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_convert_gff",
                [
                  "self.mock_parser",
                  "self.wigs",
                  "self.tsss",
                  "self.trans",
                  "self.gffs",
                  "self.mock",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_merge_manual",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.test_folder",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_low_expression",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.test_folder",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_stat_tss",
                [
                  "self.mock_parser",
                  "self.wigs",
                  "self.tsss",
                  "self.trans",
                  "self.example",
                  "self.gffs",
                  "self.mock_args",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_validate",
                [
                  "self.mock_parser",
                  "self.wigs",
                  "self.tsss",
                  "self.trans",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "self.wigs",
                  "self.tsss",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_import_lib",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.example",
                  "self.test_folder",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.manual"
                ]
              ],
              [
                "test_gen_config",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.mock",
                  "self.manual"
                ]
              ],
              [
                "test_merge_wigs",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.example",
                  "self.test_folder",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.manual"
                ]
              ],
              [
                "test_check_orphan",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.example",
                  "self.test_folder",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_print_lib",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.example",
                  "self.test_folder",
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.manual"
                ]
              ],
              [
                "test_deal_with_overlap",
                [
                  "self.mock_parser",
                  "self.wigs",
                  "self.tsss",
                  "self.trans",
                  "self.gffs",
                  "self.fastas",
                  "self.manual"
                ]
              ],
              [
                "test_set_gen_config",
                [
                  "self.mock_parser",
                  "self.tsss",
                  "self.trans",
                  "self.mock",
                  "self.manual"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                "false"
              ],
              [
                "test_merge_manual",
                "false"
              ],
              [
                "test_low_expression",
                "false"
              ],
              [
                "test_stat_tss",
                "false"
              ],
              [
                "test_validate",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_merge_wigs",
                "false"
              ],
              [
                "test_check_orphan",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_deal_with_overlap",
                "false"
              ],
              [
                "test_set_gen_config",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                "false"
              ],
              [
                "test_merge_manual",
                "false"
              ],
              [
                "test_low_expression",
                "false"
              ],
              [
                "test_stat_tss",
                "false"
              ],
              [
                "test_validate",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_merge_wigs",
                "false"
              ],
              [
                "test_check_orphan",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_deal_with_overlap",
                "false"
              ],
              [
                "test_set_gen_config",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_convert_gff",
                  "0"
                ],
                [
                  "test_merge_manual",
                  "0"
                ],
                [
                  "test_low_expression",
                  "0"
                ],
                [
                  "test_stat_tss",
                  "0"
                ],
                [
                  "test_validate",
                  "0"
                ],
                [
                  "test_compare_ta",
                  "0"
                ],
                [
                  "test_import_lib",
                  "0"
                ],
                [
                  "test_gen_config",
                  "0"
                ],
                [
                  "test_merge_wigs",
                  "0"
                ],
                [
                  "test_check_orphan",
                  "0"
                ],
                [
                  "test_print_lib",
                  "0"
                ],
                [
                  "test_deal_with_overlap",
                  "0"
                ],
                [
                  "test_set_gen_config",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_convert_gff",
                  "0"
                ],
                [
                  "test_merge_manual",
                  "0"
                ],
                [
                  "test_low_expression",
                  "0"
                ],
                [
                  "test_stat_tss",
                  "0"
                ],
                [
                  "test_validate",
                  "0"
                ],
                [
                  "test_compare_ta",
                  "0"
                ],
                [
                  "test_import_lib",
                  "0"
                ],
                [
                  "test_gen_config",
                  "0"
                ],
                [
                  "test_merge_wigs",
                  "0"
                ],
                [
                  "test_check_orphan",
                  "0"
                ],
                [
                  "test_print_lib",
                  "0"
                ],
                [
                  "test_deal_with_overlap",
                  "0"
                ],
                [
                  "test_set_gen_config",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                "false"
              ],
              [
                "test_merge_manual",
                "false"
              ],
              [
                "test_low_expression",
                "false"
              ],
              [
                "test_stat_tss",
                "false"
              ],
              [
                "test_validate",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_merge_wigs",
                "false"
              ],
              [
                "test_check_orphan",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_deal_with_overlap",
                "false"
              ],
              [
                "test_set_gen_config",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                "false"
              ],
              [
                "test_merge_manual",
                "false"
              ],
              [
                "test_low_expression",
                "false"
              ],
              [
                "test_stat_tss",
                "false"
              ],
              [
                "test_validate",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_merge_wigs",
                "false"
              ],
              [
                "test_check_orphan",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_deal_with_overlap",
                "false"
              ],
              [
                "test_set_gen_config",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_convert_gff",
                "1"
              ],
              [
                "test_merge_manual",
                "2"
              ],
              [
                "test_low_expression",
                "1"
              ],
              [
                "test_stat_tss",
                "2"
              ],
              [
                "test_validate",
                "0"
              ],
              [
                "test_compare_ta",
                "2"
              ],
              [
                "test_import_lib",
                "1"
              ],
              [
                "test_gen_config",
                "1"
              ],
              [
                "test_merge_wigs",
                "2"
              ],
              [
                "test_check_orphan",
                "1"
              ],
              [
                "test_print_lib",
                "1"
              ],
              [
                "test_deal_with_overlap",
                "1"
              ],
              [
                "test_set_gen_config",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                [
                  "args",
                  "log",
                  "datas"
                ]
              ],
              [
                "test_merge_manual",
                [
                  "args"
                ]
              ],
              [
                "test_low_expression",
                [
                  "args",
                  "datas",
                  "libs"
                ]
              ],
              [
                "test_stat_tss",
                [
                  "log"
                ]
              ],
              [
                "test_validate",
                [
                  "args",
                  "log"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "args",
                  "log",
                  "ta_path"
                ]
              ],
              [
                "test_import_lib",
                [
                  "libs",
                  "out"
                ]
              ],
              [
                "test_gen_config",
                [
                  "args",
                  "log",
                  "datas",
                  "libs",
                  "config_file"
                ]
              ],
              [
                "test_merge_wigs",
                [
                  "datas",
                  "libs"
                ]
              ],
              [
                "test_check_orphan",
                [
                  "args",
                  "libs"
                ]
              ],
              [
                "test_print_lib",
                [
                  "lib_list",
                  "out"
                ]
              ],
              [
                "test_deal_with_overlap",
                [
                  "args"
                ]
              ],
              [
                "test_set_gen_config",
                [
                  "args",
                  "log",
                  "datas",
                  "libs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                [
                  "self.mock_args",
                  "self.out",
                  "self.tss",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_manual",
                [
                  "self.gffs",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.out",
                  "self.tss",
                  "self.example"
                ]
              ],
              [
                "test_low_expression",
                [
                  "self.gffs",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.out",
                  "self.tss",
                  "self.example"
                ]
              ],
              [
                "test_stat_tss",
                [
                  "self.mock",
                  "self.out",
                  "self.tss",
                  "self.test_folder"
                ]
              ],
              [
                "test_validate",
                [
                  "self.gffs",
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.tss",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "self.gffs",
                  "self.mock_parser",
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.trans",
                  "self.tss",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_import_lib",
                [
                  "self.wigs",
                  "self.tss"
                ]
              ],
              [
                "test_gen_config",
                [
                  "self.gffs",
                  "self.wigs",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.tss",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge_wigs",
                [
                  "self.wigs",
                  "self.tss"
                ]
              ],
              [
                "test_check_orphan",
                [
                  "self.gffs",
                  "self.wigs",
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.tss"
                ]
              ],
              [
                "test_print_lib",
                [
                  "self.wigs",
                  "self.tss"
                ]
              ],
              [
                "test_deal_with_overlap",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.out",
                  "self.tss",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_set_gen_config",
                [
                  "self.gffs",
                  "self.wigs",
                  "self.mock_args",
                  "self.fastas",
                  "self.out",
                  "self.tss",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5322455443492622,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_print_lib",
                  "test_convert_gff",
                  0.22669040409110577
                ],
                [
                  "test_set_gen_config",
                  "test_convert_gff",
                  0.3477950175739459
                ],
                [
                  "test_merge_manual",
                  "test_stat_tss",
                  0.406299600146696
                ],
                [
                  "test_convert_gff",
                  "test_merge_manual",
                  0.49148974411422647
                ],
                [
                  "test_merge_manual",
                  "test_validate",
                  0.7401080545267136
                ],
                [
                  "test_validate",
                  "test_compare_ta",
                  0.7018552077178972
                ],
                [
                  "test_gen_config",
                  "test_merge_manual",
                  0.716970607683569
                ],
                [
                  "test_gen_config",
                  "test_low_expression",
                  0.7500388089322757
                ],
                [
                  "test_print_lib",
                  "test_stat_tss",
                  0.1721590893695281
                ],
                [
                  "test_check_orphan",
                  "test_validate",
                  0.41836633136523244
                ],
                [
                  "test_import_lib",
                  "test_compare_ta",
                  0.39141299718701866
                ],
                [
                  "test_deal_with_overlap",
                  "test_validate",
                  0.6453692983522145
                ],
                [
                  "test_import_lib",
                  "test_merge_wigs",
                  0.73093293828594
                ],
                [
                  "test_print_lib",
                  "test_low_expression",
                  0.6681962490102591
                ],
                [
                  "test_gen_config",
                  "test_convert_gff",
                  0.40708593772733714
                ],
                [
                  "test_convert_gff",
                  "test_low_expression",
                  0.3217536977228643
                ],
                [
                  "test_import_lib",
                  "test_deal_with_overlap",
                  0.507285841410105
                ],
                [
                  "test_set_gen_config",
                  "test_check_orphan",
                  0.7315991516140625
                ],
                [
                  "test_gen_config",
                  "test_deal_with_overlap",
                  0.648355920116687
                ],
                [
                  "test_print_lib",
                  "test_validate",
                  0.4052983687544814
                ],
                [
                  "test_merge_wigs",
                  "test_merge_manual",
                  0.4200412794412906
                ],
                [
                  "test_import_lib",
                  "test_merge_manual",
                  0.5067007763994608
                ],
                [
                  "test_merge_wigs",
                  "test_stat_tss",
                  0.09035079029052512
                ],
                [
                  "test_print_lib",
                  "test_gen_config",
                  0.7138903675643201
                ],
                [
                  "test_deal_with_overlap",
                  "test_compare_ta",
                  0.6431225057304784
                ],
                [
                  "test_merge_wigs",
                  "test_deal_with_overlap",
                  0.5047346092365017
                ],
                [
                  "test_set_gen_config",
                  "test_low_expression",
                  0.7463351308728241
                ],
                [
                  "test_check_orphan",
                  "test_deal_with_overlap",
                  0.6108106010450065
                ],
                [
                  "test_stat_tss",
                  "test_validate",
                  0.4259996093776999
                ],
                [
                  "test_check_orphan",
                  "test_merge_manual",
                  0.5621714460666127
                ],
                [
                  "test_convert_gff",
                  "test_check_orphan",
                  0.2638464225057094
                ],
                [
                  "test_deal_with_overlap",
                  "test_stat_tss",
                  0.2921694673611184
                ],
                [
                  "test_merge_wigs",
                  "test_compare_ta",
                  0.37418562365807284
                ],
                [
                  "test_check_orphan",
                  "test_stat_tss",
                  0.15900366990384027
                ],
                [
                  "test_check_orphan",
                  "test_compare_ta",
                  0.5043080024392871
                ],
                [
                  "test_print_lib",
                  "test_check_orphan",
                  0.6663390129152319
                ],
                [
                  "test_merge_manual",
                  "test_deal_with_overlap",
                  0.6865467967541538
                ],
                [
                  "test_convert_gff",
                  "test_validate",
                  0.5284100048558238
                ],
                [
                  "test_import_lib",
                  "test_convert_gff",
                  0.20478144017249666
                ],
                [
                  "test_check_orphan",
                  "test_low_expression",
                  0.9136825927766477
                ],
                [
                  "test_merge_manual",
                  "test_compare_ta",
                  0.7099014818692196
                ],
                [
                  "test_print_lib",
                  "test_merge_wigs",
                  0.6053033444084481
                ],
                [
                  "test_print_lib",
                  "test_set_gen_config",
                  0.709465955042326
                ],
                [
                  "test_import_lib",
                  "test_low_expression",
                  0.7644984382311124
                ],
                [
                  "test_merge_wigs",
                  "test_check_orphan",
                  0.9046158149479715
                ],
                [
                  "test_stat_tss",
                  "test_compare_ta",
                  0.48795003647426655
                ],
                [
                  "test_print_lib",
                  "test_compare_ta",
                  0.4456688116249245
                ],
                [
                  "test_low_expression",
                  "test_deal_with_overlap",
                  0.6601573292724646
                ],
                [
                  "test_set_gen_config",
                  "test_validate",
                  0.5450206819411342
                ],
                [
                  "test_import_lib",
                  "test_stat_tss",
                  0.10045577199069174
                ],
                [
                  "test_low_expression",
                  "test_merge_manual",
                  0.6181018606506518
                ],
                [
                  "test_import_lib",
                  "test_check_orphan",
                  0.7823731908007827
                ],
                [
                  "test_merge_wigs",
                  "test_low_expression",
                  0.8726053976480928
                ],
                [
                  "test_merge_wigs",
                  "test_validate",
                  0.25753937681885636
                ],
                [
                  "test_gen_config",
                  "test_stat_tss",
                  0.256108652845292
                ],
                [
                  "test_set_gen_config",
                  "test_deal_with_overlap",
                  0.6009068518151446
                ],
                [
                  "test_gen_config",
                  "test_check_orphan",
                  0.7193365075340995
                ],
                [
                  "test_convert_gff",
                  "test_merge_wigs",
                  0.16953134197666445
                ],
                [
                  "test_gen_config",
                  "test_compare_ta",
                  0.6100422635588734
                ],
                [
                  "test_convert_gff",
                  "test_compare_ta",
                  0.45342706916985126
                ],
                [
                  "test_convert_gff",
                  "test_stat_tss",
                  0.3880380317406577
                ],
                [
                  "test_low_expression",
                  "test_stat_tss",
                  0.21548620387092565
                ],
                [
                  "test_low_expression",
                  "test_compare_ta",
                  0.529938365234138
                ],
                [
                  "test_gen_config",
                  "test_merge_wigs",
                  0.6034188522618816
                ],
                [
                  "test_print_lib",
                  "test_merge_manual",
                  0.5154075623233788
                ],
                [
                  "test_set_gen_config",
                  "test_merge_manual",
                  0.6580657450645213
                ],
                [
                  "test_convert_gff",
                  "test_deal_with_overlap",
                  0.39448453043548076
                ],
                [
                  "test_print_lib",
                  "test_deal_with_overlap",
                  0.5147622896159231
                ],
                [
                  "test_import_lib",
                  "test_gen_config",
                  0.7828610485603136
                ],
                [
                  "test_import_lib",
                  "test_set_gen_config",
                  0.8891032756923772
                ],
                [
                  "test_gen_config",
                  "test_validate",
                  0.6413553430373512
                ],
                [
                  "test_set_gen_config",
                  "test_merge_wigs",
                  0.628204845197443
                ],
                [
                  "test_import_lib",
                  "test_validate",
                  0.34263265715044583
                ],
                [
                  "test_print_lib",
                  "test_import_lib",
                  0.7622335307821562
                ],
                [
                  "test_low_expression",
                  "test_validate",
                  0.47458469014483995
                ],
                [
                  "test_gen_config",
                  "test_set_gen_config",
                  0.9319145525189148
                ],
                [
                  "test_set_gen_config",
                  "test_stat_tss",
                  0.1956809357075917
                ],
                [
                  "test_set_gen_config",
                  "test_compare_ta",
                  0.5274764062139807
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_convert_gff",
                "false"
              ],
              [
                "test_merge_manual",
                "false"
              ],
              [
                "test_low_expression",
                "false"
              ],
              [
                "test_stat_tss",
                "false"
              ],
              [
                "test_validate",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_merge_wigs",
                "false"
              ],
              [
                "test_check_orphan",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_deal_with_overlap",
                "false"
              ],
              [
                "test_set_gen_config",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 13
      }
    ]
  },
  {
    "name": "tests_\u0026_test_check_orphan.py",
    "testCases": [
      {
        "name": "TestCheckOrphan",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_is_primary",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_detect_coverage",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_is_antisense",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_fix_attributes",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_primary_locus_tag",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_is_internal",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_read_wig",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_del_repeat",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fix_primary_type",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_is_primary",
                  "[]"
                ],
                [
                  "test_detect_coverage",
                  "[]"
                ],
                [
                  "test_is_antisense",
                  "[]"
                ],
                [
                  "test_fix_attributes",
                  "[]"
                ],
                [
                  "test_get_primary_locus_tag",
                  "[]"
                ],
                [
                  "test_is_internal",
                  "[]"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "[]"
                ],
                [
                  "test_read_wig",
                  "[]"
                ],
                [
                  "test_del_repeat",
                  "[]"
                ],
                [
                  "test_fix_primary_type",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_is_primary",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_is_antisense",
                  "false"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_is_internal",
                  "false"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "true"
                ],
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "true"
                ],
                [
                  "test_fix_primary_type",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_is_primary",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_is_antisense",
                  "false"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_is_internal",
                  "false"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "false"
                ],
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "false"
                ],
                [
                  "test_fix_primary_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_is_primary",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_is_antisense",
                  "true"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_is_internal",
                  "false"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "false"
                ],
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "false"
                ],
                [
                  "test_fix_primary_type",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_is_primary",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_is_antisense",
                  "false"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_is_internal",
                  "false"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "false"
                ],
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "false"
                ],
                [
                  "test_fix_primary_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_is_antisense",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_is_internal",
                "false"
              ],
              [
                "test_compare_cds_check_orphan",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_is_antisense",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_is_internal",
                "false"
              ],
              [
                "test_compare_cds_check_orphan",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_is_primary",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_coverage",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_is_antisense",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_fix_attributes",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_primary_locus_tag",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_is_internal",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_cds_check_orphan",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_wig",
                [
                  "self.example"
                ]
              ],
              [
                "test_del_repeat",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_fix_primary_type",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_is_antisense",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_is_internal",
                "false"
              ],
              [
                "test_compare_cds_check_orphan",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_is_primary",
                "false"
              ],
              [
                "test_detect_coverage",
                "true"
              ],
              [
                "test_is_antisense",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_is_internal",
                "false"
              ],
              [
                "test_compare_cds_check_orphan",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_is_primary",
                  "0"
                ],
                [
                  "test_detect_coverage",
                  "0"
                ],
                [
                  "test_is_antisense",
                  "0"
                ],
                [
                  "test_fix_attributes",
                  "0"
                ],
                [
                  "test_get_primary_locus_tag",
                  "0"
                ],
                [
                  "test_is_internal",
                  "0"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "0"
                ],
                [
                  "test_read_wig",
                  "0"
                ],
                [
                  "test_del_repeat",
                  "0"
                ],
                [
                  "test_fix_primary_type",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_is_primary",
                  "0"
                ],
                [
                  "test_detect_coverage",
                  "0"
                ],
                [
                  "test_is_antisense",
                  "0"
                ],
                [
                  "test_fix_attributes",
                  "0"
                ],
                [
                  "test_get_primary_locus_tag",
                  "0"
                ],
                [
                  "test_is_internal",
                  "0"
                ],
                [
                  "test_compare_cds_check_orphan",
                  "0"
                ],
                [
                  "test_read_wig",
                  "0"
                ],
                [
                  "test_del_repeat",
                  "0"
                ],
                [
                  "test_fix_primary_type",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_is_antisense",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_is_internal",
                "false"
              ],
              [
                "test_compare_cds_check_orphan",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_is_antisense",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_is_internal",
                "false"
              ],
              [
                "test_compare_cds_check_orphan",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                "3"
              ],
              [
                "test_detect_coverage",
                "2"
              ],
              [
                "test_is_antisense",
                "4"
              ],
              [
                "test_fix_attributes",
                "1"
              ],
              [
                "test_get_primary_locus_tag",
                "1"
              ],
              [
                "test_is_internal",
                "2"
              ],
              [
                "test_compare_cds_check_orphan",
                "1"
              ],
              [
                "test_read_wig",
                "1"
              ],
              [
                "test_del_repeat",
                "1"
              ],
              [
                "test_fix_primary_type",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                [
                  "cds_end",
                  "cds_start",
                  "tss_pos"
                ]
              ],
              [
                "test_detect_coverage",
                [
                  "ref",
                  "ref_diff",
                  "attributes_ref",
                  "attributes_tss",
                  "tss",
                  "tss_diff"
                ]
              ],
              [
                "test_is_antisense",
                [
                  "cds_end",
                  "cds_start",
                  "tss_pos"
                ]
              ],
              [
                "test_fix_attributes",
                [
                  "tss_entry",
                  "tss"
                ]
              ],
              [
                "test_get_primary_locus_tag",
                [
                  "tss",
                  "tsss"
                ]
              ],
              [
                "test_is_internal",
                [
                  "cds_end",
                  "cds_start",
                  "tss_pos"
                ]
              ],
              [
                "test_compare_cds_check_orphan",
                [
                  "gff_dict",
                  "attributes_tss",
                  "attributes_gff",
                  "out_tss",
                  "tsss",
                  "tss_dict",
                  "cdss"
                ]
              ],
              [
                "test_read_wig",
                [
                  "wig_file",
                  "wig_fh",
                  "wigs"
                ]
              ],
              [
                "test_del_repeat",
                [
                  "utrs",
                  "tsss",
                  "attributes",
                  "tss_dict"
                ]
              ],
              [
                "test_fix_primary_type",
                [
                  "new_tsss",
                  "utrs",
                  "tsss",
                  "attributes",
                  "tss_dict"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_is_primary",
                []
              ],
              [
                "test_detect_coverage",
                [
                  "self.example"
                ]
              ],
              [
                "test_is_antisense",
                []
              ],
              [
                "test_fix_attributes",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_primary_locus_tag",
                [
                  "self.example"
                ]
              ],
              [
                "test_is_internal",
                []
              ],
              [
                "test_compare_cds_check_orphan",
                []
              ],
              [
                "test_read_wig",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_del_repeat",
                []
              ],
              [
                "test_fix_primary_type",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5240425617829501,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_fix_attributes",
                  "test_read_wig",
                  0.28705308331974955
                ],
                [
                  "test_fix_primary_type",
                  "test_compare_cds_check_orphan",
                  0.8842539898667683
                ],
                [
                  "test_is_primary",
                  "test_del_repeat",
                  0.3664587323812165
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_read_wig",
                  0.4652326745204398
                ],
                [
                  "test_is_primary",
                  "test_get_primary_locus_tag",
                  0.4239113759983975
                ],
                [
                  "test_fix_attributes",
                  "test_compare_cds_check_orphan",
                  0.4316728662015186
                ],
                [
                  "test_is_internal",
                  "test_fix_primary_type",
                  0.4089689027389639
                ],
                [
                  "test_is_primary",
                  "test_detect_coverage",
                  0.412482363750086
                ],
                [
                  "test_is_internal",
                  "test_compare_cds_check_orphan",
                  0.43775415104780774
                ],
                [
                  "test_detect_coverage",
                  "test_compare_cds_check_orphan",
                  0.8111945815984348
                ],
                [
                  "test_is_internal",
                  "test_del_repeat",
                  0.41498207770548345
                ],
                [
                  "test_is_antisense",
                  "test_detect_coverage",
                  0.4265847444572372
                ],
                [
                  "test_detect_coverage",
                  "test_del_repeat",
                  0.850024766897595
                ],
                [
                  "test_is_primary",
                  "test_fix_primary_type",
                  0.36106191161815004
                ],
                [
                  "test_is_antisense",
                  "test_read_wig",
                  0.43678257097602474
                ],
                [
                  "test_is_primary",
                  "test_fix_attributes",
                  0.49208875682174347
                ],
                [
                  "test_is_antisense",
                  "test_get_primary_locus_tag",
                  0.43454299485676334
                ],
                [
                  "test_detect_coverage",
                  "test_fix_primary_type",
                  0.8435514155307026
                ],
                [
                  "test_is_primary",
                  "test_is_antisense",
                  0.9430489794155296
                ],
                [
                  "test_del_repeat",
                  "test_get_primary_locus_tag",
                  0.39581168007070383
                ],
                [
                  "test_is_primary",
                  "test_compare_cds_check_orphan",
                  0.3906945531446447
                ],
                [
                  "test_del_repeat",
                  "test_compare_cds_check_orphan",
                  0.8959685696878459
                ],
                [
                  "test_fix_attributes",
                  "test_get_primary_locus_tag",
                  0.4303642813177534
                ],
                [
                  "test_is_internal",
                  "test_fix_attributes",
                  0.5134961659630969
                ],
                [
                  "test_detect_coverage",
                  "test_fix_attributes",
                  0.5046319468654119
                ],
                [
                  "test_del_repeat",
                  "test_read_wig",
                  0.42178551599707315
                ],
                [
                  "test_is_internal",
                  "test_is_antisense",
                  0.9481891507535738
                ],
                [
                  "test_fix_attributes",
                  "test_fix_primary_type",
                  0.47522771931170976
                ],
                [
                  "test_is_primary",
                  "test_read_wig",
                  0.4264634824590517
                ],
                [
                  "test_read_wig",
                  "test_compare_cds_check_orphan",
                  0.44473747866891794
                ],
                [
                  "test_is_primary",
                  "test_is_internal",
                  0.9418284806910902
                ],
                [
                  "test_is_internal",
                  "test_read_wig",
                  0.48347415729725185
                ],
                [
                  "test_is_antisense",
                  "test_del_repeat",
                  0.37944942835926815
                ],
                [
                  "test_detect_coverage",
                  "test_read_wig",
                  0.4234838238650812
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_fix_primary_type",
                  0.4035129818546643
                ],
                [
                  "test_del_repeat",
                  "test_fix_primary_type",
                  0.9903380007189164
                ],
                [
                  "test_is_internal",
                  "test_get_primary_locus_tag",
                  0.4698092386498171
                ],
                [
                  "test_detect_coverage",
                  "test_get_primary_locus_tag",
                  0.3680210730840262
                ],
                [
                  "test_is_antisense",
                  "test_compare_cds_check_orphan",
                  0.40120954585074065
                ],
                [
                  "test_is_antisense",
                  "test_fix_attributes",
                  0.5102957198177107
                ],
                [
                  "test_is_internal",
                  "test_detect_coverage",
                  0.4542225888983602
                ],
                [
                  "test_del_repeat",
                  "test_fix_attributes",
                  0.4658959568705668
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_compare_cds_check_orphan",
                  0.5243316197498098
                ],
                [
                  "test_fix_primary_type",
                  "test_read_wig",
                  0.41315002429210584
                ],
                [
                  "test_is_antisense",
                  "test_fix_primary_type",
                  0.373871156290949
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_is_primary",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_is_antisense",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_is_internal",
                "false"
              ],
              [
                "test_compare_cds_check_orphan",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "tests_\u0026_test_merge_manual.py",
    "testCases": [
      {
        "name": "TestGensRNAOutput",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_diff_strand_tss_gene",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_coverage",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fix_attributes",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_intersection",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_primary_locus_tag",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_check_overlap",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_same_strand_tss_gene",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_tss_gene",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_del_repeat",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_import_to_tss",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_fix_primary_type",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_remove_primary",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_diff_strand_tss_gene",
                  "[]"
                ],
                [
                  "test_detect_coverage",
                  "[]"
                ],
                [
                  "test_fix_attributes",
                  "[]"
                ],
                [
                  "test_intersection",
                  "[]"
                ],
                [
                  "test_get_primary_locus_tag",
                  "[]"
                ],
                [
                  "test_check_overlap",
                  "[]"
                ],
                [
                  "test_same_strand_tss_gene",
                  "[]"
                ],
                [
                  "test_compare_tss_gene",
                  "[]"
                ],
                [
                  "test_del_repeat",
                  "[]"
                ],
                [
                  "test_import_to_tss",
                  "[]"
                ],
                [
                  "test_fix_primary_type",
                  "[]"
                ],
                [
                  "test_remove_primary",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_diff_strand_tss_gene",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_intersection",
                  "true"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_same_strand_tss_gene",
                  "false"
                ],
                [
                  "test_compare_tss_gene",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "true"
                ],
                [
                  "test_import_to_tss",
                  "false"
                ],
                [
                  "test_fix_primary_type",
                  "true"
                ],
                [
                  "test_remove_primary",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_diff_strand_tss_gene",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_intersection",
                  "false"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_same_strand_tss_gene",
                  "false"
                ],
                [
                  "test_compare_tss_gene",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "false"
                ],
                [
                  "test_import_to_tss",
                  "false"
                ],
                [
                  "test_fix_primary_type",
                  "false"
                ],
                [
                  "test_remove_primary",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_diff_strand_tss_gene",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_intersection",
                  "false"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_same_strand_tss_gene",
                  "false"
                ],
                [
                  "test_compare_tss_gene",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "false"
                ],
                [
                  "test_import_to_tss",
                  "false"
                ],
                [
                  "test_fix_primary_type",
                  "false"
                ],
                [
                  "test_remove_primary",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_diff_strand_tss_gene",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ],
                [
                  "test_fix_attributes",
                  "false"
                ],
                [
                  "test_intersection",
                  "false"
                ],
                [
                  "test_get_primary_locus_tag",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_same_strand_tss_gene",
                  "false"
                ],
                [
                  "test_compare_tss_gene",
                  "false"
                ],
                [
                  "test_del_repeat",
                  "false"
                ],
                [
                  "test_import_to_tss",
                  "false"
                ],
                [
                  "test_fix_primary_type",
                  "false"
                ],
                [
                  "test_remove_primary",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_same_strand_tss_gene",
                "false"
              ],
              [
                "test_compare_tss_gene",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_import_to_tss",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ],
              [
                "test_remove_primary",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_same_strand_tss_gene",
                "false"
              ],
              [
                "test_compare_tss_gene",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_import_to_tss",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ],
              [
                "test_remove_primary",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_coverage",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_fix_attributes",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_intersection",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_primary_locus_tag",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_check_overlap",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_same_strand_tss_gene",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_tss_gene",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_del_repeat",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_import_to_tss",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_fix_primary_type",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_remove_primary",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_same_strand_tss_gene",
                "false"
              ],
              [
                "test_compare_tss_gene",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_import_to_tss",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ],
              [
                "test_remove_primary",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "false"
              ],
              [
                "test_detect_coverage",
                "true"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_intersection",
                "true"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_same_strand_tss_gene",
                "false"
              ],
              [
                "test_compare_tss_gene",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_import_to_tss",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ],
              [
                "test_remove_primary",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_diff_strand_tss_gene",
                  "0"
                ],
                [
                  "test_detect_coverage",
                  "0"
                ],
                [
                  "test_fix_attributes",
                  "0"
                ],
                [
                  "test_intersection",
                  "0"
                ],
                [
                  "test_get_primary_locus_tag",
                  "0"
                ],
                [
                  "test_check_overlap",
                  "0"
                ],
                [
                  "test_same_strand_tss_gene",
                  "0"
                ],
                [
                  "test_compare_tss_gene",
                  "0"
                ],
                [
                  "test_del_repeat",
                  "0"
                ],
                [
                  "test_import_to_tss",
                  "0"
                ],
                [
                  "test_fix_primary_type",
                  "0"
                ],
                [
                  "test_remove_primary",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_diff_strand_tss_gene",
                  "0"
                ],
                [
                  "test_detect_coverage",
                  "0"
                ],
                [
                  "test_fix_attributes",
                  "0"
                ],
                [
                  "test_intersection",
                  "0"
                ],
                [
                  "test_get_primary_locus_tag",
                  "0"
                ],
                [
                  "test_check_overlap",
                  "0"
                ],
                [
                  "test_same_strand_tss_gene",
                  "0"
                ],
                [
                  "test_compare_tss_gene",
                  "0"
                ],
                [
                  "test_del_repeat",
                  "0"
                ],
                [
                  "test_import_to_tss",
                  "0"
                ],
                [
                  "test_fix_primary_type",
                  "0"
                ],
                [
                  "test_remove_primary",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_same_strand_tss_gene",
                "false"
              ],
              [
                "test_compare_tss_gene",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_import_to_tss",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ],
              [
                "test_remove_primary",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_same_strand_tss_gene",
                "false"
              ],
              [
                "test_compare_tss_gene",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_import_to_tss",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ],
              [
                "test_remove_primary",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "2"
              ],
              [
                "test_detect_coverage",
                "2"
              ],
              [
                "test_fix_attributes",
                "1"
              ],
              [
                "test_intersection",
                "2"
              ],
              [
                "test_get_primary_locus_tag",
                "1"
              ],
              [
                "test_check_overlap",
                "2"
              ],
              [
                "test_same_strand_tss_gene",
                "2"
              ],
              [
                "test_compare_tss_gene",
                "2"
              ],
              [
                "test_del_repeat",
                "2"
              ],
              [
                "test_import_to_tss",
                "2"
              ],
              [
                "test_fix_primary_type",
                "2"
              ],
              [
                "test_remove_primary",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                [
                  "output",
                  "tss_entry",
                  "gene_ends",
                  "gff_dict",
                  "checks",
                  "attributes_tss",
                  "tss",
                  "gene",
                  "attributes_gff",
                  "anti_ends",
                  "tss_dict"
                ]
              ],
              [
                "test_detect_coverage",
                [
                  "ref_dict",
                  "ref",
                  "attributes_ref",
                  "attributes_tss",
                  "ref_cover",
                  "tss",
                  "tss_cover",
                  "wigs",
                  "tss_dict"
                ]
              ],
              [
                "test_fix_attributes",
                [
                  "tss_entry",
                  "attributes_tss",
                  "tss",
                  "tss_dict"
                ]
              ],
              [
                "test_intersection",
                [
                  "num_strain",
                  "tsss",
                  "overlap_num",
                  "nums"
                ]
              ],
              [
                "test_get_primary_locus_tag",
                [
                  "out"
                ]
              ],
              [
                "test_check_overlap",
                [
                  "attributes_tss_p",
                  "attributes_tss_m",
                  "attributes_tss_pre",
                  "tss_pre",
                  "tsss",
                  "overlap_num",
                  "output",
                  "tss_p_dict",
                  "num_strain",
                  "tss_m_dict",
                  "tss_pre_dict",
                  "tss_m",
                  "tss_p",
                  "nums"
                ]
              ],
              [
                "test_same_strand_tss_gene",
                [
                  "output",
                  "tss_entry",
                  "gene_ends",
                  "gff_dict",
                  "checks",
                  "attributes_tss",
                  "tss",
                  "gene",
                  "attributes_gff",
                  "anti_ends",
                  "tss_dict"
                ]
              ],
              [
                "test_compare_tss_gene",
                [
                  "output",
                  "attributes_tss",
                  "tss",
                  "tss_dict"
                ]
              ],
              [
                "test_del_repeat",
                [
                  "attributes_tss",
                  "tsss",
                  "tss_dict"
                ]
              ],
              [
                "test_import_to_tss",
                [
                  "output",
                  "tss_entry",
                  "attributes_tss",
                  "tss",
                  "tss_type",
                  "cds_pos",
                  "locus_tag",
                  "tss_dict"
                ]
              ],
              [
                "test_fix_primary_type",
                [
                  "attributes_tss",
                  "wigs",
                  "tsss",
                  "tss_dict"
                ]
              ],
              [
                "test_remove_primary",
                [
                  "tss_output",
                  "tss_entry",
                  "attributes_tss",
                  "tss",
                  "tss_dict"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                []
              ],
              [
                "test_detect_coverage",
                []
              ],
              [
                "test_fix_attributes",
                []
              ],
              [
                "test_intersection",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_primary_locus_tag",
                [
                  "self.example"
                ]
              ],
              [
                "test_check_overlap",
                [
                  "self.example"
                ]
              ],
              [
                "test_same_strand_tss_gene",
                []
              ],
              [
                "test_compare_tss_gene",
                [
                  "self.example"
                ]
              ],
              [
                "test_del_repeat",
                []
              ],
              [
                "test_import_to_tss",
                []
              ],
              [
                "test_fix_primary_type",
                []
              ],
              [
                "test_remove_primary",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7813380408201439,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_import_to_tss",
                  "test_diff_strand_tss_gene",
                  0.9539641007674888
                ],
                [
                  "test_detect_coverage",
                  "test_fix_primary_type",
                  0.9403717208983874
                ],
                [
                  "test_detect_coverage",
                  "test_del_repeat",
                  0.8902722906036111
                ],
                [
                  "test_fix_attributes",
                  "test_import_to_tss",
                  0.8265632406208211
                ],
                [
                  "test_detect_coverage",
                  "test_check_overlap",
                  0.8835290989533207
                ],
                [
                  "test_fix_primary_type",
                  "test_compare_tss_gene",
                  0.8075103132685636
                ],
                [
                  "test_del_repeat",
                  "test_intersection",
                  0.4951570471542274
                ],
                [
                  "test_remove_primary",
                  "test_compare_tss_gene",
                  0.9475568816357439
                ],
                [
                  "test_diff_strand_tss_gene",
                  "test_check_overlap",
                  0.9229222431023073
                ],
                [
                  "test_del_repeat",
                  "test_same_strand_tss_gene",
                  0.859014069029623
                ],
                [
                  "test_same_strand_tss_gene",
                  "test_intersection",
                  0.6603258633981128
                ],
                [
                  "test_del_repeat",
                  "test_import_to_tss",
                  0.8521443811412416
                ],
                [
                  "test_fix_primary_type",
                  "test_diff_strand_tss_gene",
                  0.8779785853178991
                ],
                [
                  "test_same_strand_tss_gene",
                  "test_check_overlap",
                  0.9240903149187092
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_diff_strand_tss_gene",
                  0.5358693273852689
                ],
                [
                  "test_remove_primary",
                  "test_diff_strand_tss_gene",
                  0.9439529424148347
                ],
                [
                  "test_detect_coverage",
                  "test_compare_tss_gene",
                  0.8332584766397169
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_fix_attributes",
                  0.5026235881656086
                ],
                [
                  "test_fix_attributes",
                  "test_intersection",
                  0.469023814470054
                ],
                [
                  "test_fix_attributes",
                  "test_check_overlap",
                  0.8664247632593489
                ],
                [
                  "test_fix_attributes",
                  "test_fix_primary_type",
                  0.8031659436519566
                ],
                [
                  "test_compare_tss_gene",
                  "test_intersection",
                  0.5820136518712639
                ],
                [
                  "test_fix_attributes",
                  "test_del_repeat",
                  0.8852256816456414
                ],
                [
                  "test_import_to_tss",
                  "test_intersection",
                  0.6486329645578806
                ],
                [
                  "test_fix_attributes",
                  "test_remove_primary",
                  0.8423501754176932
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_import_to_tss",
                  0.56638254981983
                ],
                [
                  "test_diff_strand_tss_gene",
                  "test_intersection",
                  0.6508637621462067
                ],
                [
                  "test_del_repeat",
                  "test_diff_strand_tss_gene",
                  0.8662725132244575
                ],
                [
                  "test_import_to_tss",
                  "test_compare_tss_gene",
                  0.9287984950666891
                ],
                [
                  "test_del_repeat",
                  "test_check_overlap",
                  0.8551193790077732
                ],
                [
                  "test_same_strand_tss_gene",
                  "test_diff_strand_tss_gene",
                  0.991840938249856
                ],
                [
                  "test_detect_coverage",
                  "test_intersection",
                  0.620046058536071
                ],
                [
                  "test_fix_attributes",
                  "test_diff_strand_tss_gene",
                  0.865559575307709
                ],
                [
                  "test_del_repeat",
                  "test_compare_tss_gene",
                  0.8074332694161646
                ],
                [
                  "test_fix_attributes",
                  "test_same_strand_tss_gene",
                  0.8462776965901672
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_detect_coverage",
                  0.5169305048774002
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_remove_primary",
                  0.5195164138275135
                ],
                [
                  "test_compare_tss_gene",
                  "test_check_overlap",
                  0.898548319860969
                ],
                [
                  "test_fix_primary_type",
                  "test_import_to_tss",
                  0.877019881527608
                ],
                [
                  "test_remove_primary",
                  "test_intersection",
                  0.6069915139042881
                ],
                [
                  "test_fix_attributes",
                  "test_compare_tss_gene",
                  0.8431974860349647
                ],
                [
                  "test_remove_primary",
                  "test_same_strand_tss_gene",
                  0.9537871847659932
                ],
                [
                  "test_import_to_tss",
                  "test_check_overlap",
                  0.8964970459290237
                ],
                [
                  "test_fix_primary_type",
                  "test_same_strand_tss_gene",
                  0.8806008763417071
                ],
                [
                  "test_remove_primary",
                  "test_import_to_tss",
                  0.9682082017657152
                ],
                [
                  "test_same_strand_tss_gene",
                  "test_compare_tss_gene",
                  0.9300014827207056
                ],
                [
                  "test_del_repeat",
                  "test_remove_primary",
                  0.8386301534690397
                ],
                [
                  "test_import_to_tss",
                  "test_same_strand_tss_gene",
                  0.9659585029814807
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_fix_primary_type",
                  0.5315724983020319
                ],
                [
                  "test_del_repeat",
                  "test_fix_primary_type",
                  0.9258447816137538
                ],
                [
                  "test_fix_primary_type",
                  "test_remove_primary",
                  0.845273992826471
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_same_strand_tss_gene",
                  0.5316815539586025
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_compare_tss_gene",
                  0.5202659817144719
                ],
                [
                  "test_detect_coverage",
                  "test_import_to_tss",
                  0.8705938320196769
                ],
                [
                  "test_remove_primary",
                  "test_check_overlap",
                  0.895466113584465
                ],
                [
                  "test_diff_strand_tss_gene",
                  "test_compare_tss_gene",
                  0.9346638493825262
                ],
                [
                  "test_detect_coverage",
                  "test_diff_strand_tss_gene",
                  0.8921870035250887
                ],
                [
                  "test_detect_coverage",
                  "test_fix_attributes",
                  0.8712380685303384
                ],
                [
                  "test_detect_coverage",
                  "test_same_strand_tss_gene",
                  0.8859111449359072
                ],
                [
                  "test_fix_primary_type",
                  "test_intersection",
                  0.6222751432813134
                ],
                [
                  "test_fix_primary_type",
                  "test_check_overlap",
                  0.8634116866319097
                ],
                [
                  "test_detect_coverage",
                  "test_remove_primary",
                  0.8557632104857633
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_del_repeat",
                  0.531455266382994
                ],
                [
                  "test_check_overlap",
                  "test_intersection",
                  0.677660178469634
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_intersection",
                  0.381036748144357
                ],
                [
                  "test_get_primary_locus_tag",
                  "test_check_overlap",
                  0.48358635467953537
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_diff_strand_tss_gene",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ],
              [
                "test_fix_attributes",
                "false"
              ],
              [
                "test_intersection",
                "false"
              ],
              [
                "test_get_primary_locus_tag",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_same_strand_tss_gene",
                "false"
              ],
              [
                "test_compare_tss_gene",
                "false"
              ],
              [
                "test_del_repeat",
                "false"
              ],
              [
                "test_import_to_tss",
                "false"
              ],
              [
                "test_fix_primary_type",
                "false"
              ],
              [
                "test_remove_primary",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 12
      }
    ]
  },
  {
    "name": "tests_\u0026_test_detect_operon.py",
    "testCases": [
      {
        "name": "TestDetectOperon",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_detect_features",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_term_feature",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_operon",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sub_operon",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_tss_feature",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_detect_features",
                  "[]"
                ],
                [
                  "test_get_term_feature",
                  "[]"
                ],
                [
                  "test_operon",
                  "[]"
                ],
                [
                  "test_sub_operon",
                  "[]"
                ],
                [
                  "test_get_tss_feature",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_detect_features",
                  "true"
                ],
                [
                  "test_get_term_feature",
                  "true"
                ],
                [
                  "test_operon",
                  "false"
                ],
                [
                  "test_sub_operon",
                  "true"
                ],
                [
                  "test_get_tss_feature",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_detect_features",
                  "false"
                ],
                [
                  "test_get_term_feature",
                  "false"
                ],
                [
                  "test_operon",
                  "false"
                ],
                [
                  "test_sub_operon",
                  "false"
                ],
                [
                  "test_get_tss_feature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_detect_features",
                  "false"
                ],
                [
                  "test_get_term_feature",
                  "false"
                ],
                [
                  "test_operon",
                  "false"
                ],
                [
                  "test_sub_operon",
                  "false"
                ],
                [
                  "test_get_tss_feature",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_detect_features",
                  "false"
                ],
                [
                  "test_get_term_feature",
                  "false"
                ],
                [
                  "test_operon",
                  "false"
                ],
                [
                  "test_sub_operon",
                  "false"
                ],
                [
                  "test_get_tss_feature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "false"
              ],
              [
                "test_get_term_feature",
                "false"
              ],
              [
                "test_operon",
                "false"
              ],
              [
                "test_sub_operon",
                "false"
              ],
              [
                "test_get_tss_feature",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "false"
              ],
              [
                "test_get_term_feature",
                "false"
              ],
              [
                "test_operon",
                "false"
              ],
              [
                "test_sub_operon",
                "false"
              ],
              [
                "test_get_tss_feature",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_detect_features",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_term_feature",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_operon",
                []
              ],
              [
                "test_sub_operon",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_tss_feature",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "false"
              ],
              [
                "test_get_term_feature",
                "false"
              ],
              [
                "test_operon",
                "false"
              ],
              [
                "test_sub_operon",
                "false"
              ],
              [
                "test_get_tss_feature",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "false"
              ],
              [
                "test_get_term_feature",
                "false"
              ],
              [
                "test_operon",
                "false"
              ],
              [
                "test_sub_operon",
                "false"
              ],
              [
                "test_get_tss_feature",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_detect_features",
                  "0"
                ],
                [
                  "test_get_term_feature",
                  "0"
                ],
                [
                  "test_operon",
                  "0"
                ],
                [
                  "test_sub_operon",
                  "0"
                ],
                [
                  "test_get_tss_feature",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_detect_features",
                  "0"
                ],
                [
                  "test_get_term_feature",
                  "0"
                ],
                [
                  "test_operon",
                  "0"
                ],
                [
                  "test_sub_operon",
                  "0"
                ],
                [
                  "test_get_tss_feature",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "false"
              ],
              [
                "test_get_term_feature",
                "false"
              ],
              [
                "test_operon",
                "false"
              ],
              [
                "test_sub_operon",
                "false"
              ],
              [
                "test_get_tss_feature",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "false"
              ],
              [
                "test_get_term_feature",
                "false"
              ],
              [
                "test_operon",
                "false"
              ],
              [
                "test_sub_operon",
                "false"
              ],
              [
                "test_get_tss_feature",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "2"
              ],
              [
                "test_get_term_feature",
                "3"
              ],
              [
                "test_operon",
                "1"
              ],
              [
                "test_sub_operon",
                "2"
              ],
              [
                "test_get_tss_feature",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                [
                  "features",
                  "datas",
                  "detects"
                ]
              ],
              [
                "test_get_term_feature",
                [
                  "features",
                  "datas",
                  "jumps",
                  "starts",
                  "jump",
                  "strands"
                ]
              ],
              [
                "test_operon",
                [
                  "out_file",
                  "out_g",
                  "datas"
                ]
              ],
              [
                "test_sub_operon",
                [
                  "operons",
                  "gff_dict",
                  "attributes_tss",
                  "genes",
                  "attributes_gff",
                  "tsss",
                  "tss_dict"
                ]
              ],
              [
                "test_get_tss_feature",
                [
                  "features",
                  "datas",
                  "starts",
                  "strands"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_detect_features",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_term_feature",
                [
                  "self.example"
                ]
              ],
              [
                "test_operon",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_sub_operon",
                []
              ],
              [
                "test_get_tss_feature",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5839430733463671,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_sub_operon",
                  "test_operon",
                  0.42676237828702224
                ],
                [
                  "test_get_term_feature",
                  "test_operon",
                  0.49793529744291126
                ],
                [
                  "test_get_term_feature",
                  "test_get_tss_feature",
                  0.8085579639708036
                ],
                [
                  "test_get_term_feature",
                  "test_sub_operon",
                  0.5625928301331568
                ],
                [
                  "test_get_term_feature",
                  "test_detect_features",
                  0.7717986854127116
                ],
                [
                  "test_get_tss_feature",
                  "test_sub_operon",
                  0.5919361618194025
                ],
                [
                  "test_detect_features",
                  "test_sub_operon",
                  0.4979628991965569
                ],
                [
                  "test_get_tss_feature",
                  "test_detect_features",
                  0.7302827220465613
                ],
                [
                  "test_get_tss_feature",
                  "test_operon",
                  0.4832188416932592
                ],
                [
                  "test_detect_features",
                  "test_operon",
                  0.4683829534612862
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_detect_features",
                "false"
              ],
              [
                "test_get_term_feature",
                "false"
              ],
              [
                "test_operon",
                "false"
              ],
              [
                "test_sub_operon",
                "false"
              ],
              [
                "test_get_tss_feature",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_gene_ontology.py",
    "testCases": [
      {
        "name": "TestGeneOntology",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compare_go_slim",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_import_obo",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_compare_cds_tran",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_retrieve_uniprot",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_map2goslim",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compare_go_slim",
                  "[]"
                ],
                [
                  "test_import_obo",
                  "[]"
                ],
                [
                  "test_compare_cds_tran",
                  "[]"
                ],
                [
                  "test_retrieve_uniprot",
                  "[]"
                ],
                [
                  "test_map2goslim",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compare_go_slim",
                  "false"
                ],
                [
                  "test_import_obo",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ],
                [
                  "test_retrieve_uniprot",
                  "false"
                ],
                [
                  "test_map2goslim",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compare_go_slim",
                  "false"
                ],
                [
                  "test_import_obo",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ],
                [
                  "test_retrieve_uniprot",
                  "false"
                ],
                [
                  "test_map2goslim",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compare_go_slim",
                  "false"
                ],
                [
                  "test_import_obo",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ],
                [
                  "test_retrieve_uniprot",
                  "false"
                ],
                [
                  "test_map2goslim",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compare_go_slim",
                  "false"
                ],
                [
                  "test_import_obo",
                  "false"
                ],
                [
                  "test_compare_cds_tran",
                  "false"
                ],
                [
                  "test_retrieve_uniprot",
                  "false"
                ],
                [
                  "test_map2goslim",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                "false"
              ],
              [
                "test_import_obo",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ],
              [
                "test_retrieve_uniprot",
                "false"
              ],
              [
                "test_map2goslim",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                "false"
              ],
              [
                "test_import_obo",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ],
              [
                "test_retrieve_uniprot",
                "false"
              ],
              [
                "test_map2goslim",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_go_slim",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_import_obo",
                []
              ],
              [
                "test_compare_cds_tran",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_retrieve_uniprot",
                []
              ],
              [
                "test_map2goslim",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                "false"
              ],
              [
                "test_import_obo",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ],
              [
                "test_retrieve_uniprot",
                "false"
              ],
              [
                "test_map2goslim",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_go_slim",
                "false"
              ],
              [
                "test_import_obo",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "true"
              ],
              [
                "test_retrieve_uniprot",
                "false"
              ],
              [
                "test_map2goslim",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compare_go_slim",
                  "0"
                ],
                [
                  "test_import_obo",
                  "0"
                ],
                [
                  "test_compare_cds_tran",
                  "0"
                ],
                [
                  "test_retrieve_uniprot",
                  "0"
                ],
                [
                  "test_map2goslim",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compare_go_slim",
                  "0"
                ],
                [
                  "test_import_obo",
                  "0"
                ],
                [
                  "test_compare_cds_tran",
                  "0"
                ],
                [
                  "test_retrieve_uniprot",
                  "0"
                ],
                [
                  "test_map2goslim",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                "false"
              ],
              [
                "test_import_obo",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ],
              [
                "test_retrieve_uniprot",
                "false"
              ],
              [
                "test_map2goslim",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                "false"
              ],
              [
                "test_import_obo",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ],
              [
                "test_retrieve_uniprot",
                "false"
              ],
              [
                "test_map2goslim",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                "2"
              ],
              [
                "test_import_obo",
                "1"
              ],
              [
                "test_compare_cds_tran",
                "2"
              ],
              [
                "test_retrieve_uniprot",
                "1"
              ],
              [
                "test_map2goslim",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                [
                  "classes",
                  "total_nums",
                  "gos"
                ]
              ],
              [
                "test_import_obo",
                [
                  "obos",
                  "obo_file"
                ]
              ],
              [
                "test_compare_cds_tran",
                [
                  "news",
                  "gffs",
                  "trans"
                ]
              ],
              [
                "test_retrieve_uniprot",
                [
                  "tran_file",
                  "out_file",
                  "datas",
                  "database_file",
                  "gff_file"
                ]
              ],
              [
                "test_map2goslim",
                [
                  "term_file",
                  "datas",
                  "stat_file",
                  "slim_file",
                  "go_table"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                [
                  "self.example"
                ]
              ],
              [
                "test_import_obo",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_cds_tran",
                [
                  "self.example"
                ]
              ],
              [
                "test_retrieve_uniprot",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_map2goslim",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3255436200469999,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_retrieve_uniprot",
                  "test_compare_cds_tran",
                  0.3331706920290262
                ],
                [
                  "test_retrieve_uniprot",
                  "test_import_obo",
                  0.5147645854147432
                ],
                [
                  "test_retrieve_uniprot",
                  "test_compare_go_slim",
                  0.12525215903827186
                ],
                [
                  "test_compare_cds_tran",
                  "test_compare_go_slim",
                  0.24428892053117168
                ],
                [
                  "test_import_obo",
                  "test_map2goslim",
                  0.5270676661258255
                ],
                [
                  "test_compare_cds_tran",
                  "test_map2goslim",
                  0.2921532737340716
                ],
                [
                  "test_import_obo",
                  "test_compare_go_slim",
                  0.0642758498000807
                ],
                [
                  "test_compare_cds_tran",
                  "test_import_obo",
                  0.2817180849095055
                ],
                [
                  "test_retrieve_uniprot",
                  "test_map2goslim",
                  0.7212524521818074
                ],
                [
                  "test_compare_go_slim",
                  "test_map2goslim",
                  0.1514925167054949
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_go_slim",
                "false"
              ],
              [
                "test_import_obo",
                "false"
              ],
              [
                "test_compare_cds_tran",
                "false"
              ],
              [
                "test_retrieve_uniprot",
                "false"
              ],
              [
                "test_map2goslim",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_get_inter_seq.py",
    "testCases": [
      {
        "name": "TestGetInterSeq",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_merge_inter",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_inter",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_confliction",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_overlap_inters",
                  "[PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_merge_inter",
                  "[]"
                ],
                [
                  "test_get_inter",
                  "[]"
                ],
                [
                  "test_detect_confliction",
                  "[]"
                ],
                [
                  "test_get_overlap_inters",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_merge_inter",
                  "true"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_detect_confliction",
                  "false"
                ],
                [
                  "test_get_overlap_inters",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_merge_inter",
                  "false"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_detect_confliction",
                  "false"
                ],
                [
                  "test_get_overlap_inters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_merge_inter",
                  "false"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_detect_confliction",
                  "false"
                ],
                [
                  "test_get_overlap_inters",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_merge_inter",
                  "false"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_detect_confliction",
                  "false"
                ],
                [
                  "test_get_overlap_inters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_detect_confliction",
                "false"
              ],
              [
                "test_get_overlap_inters",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_detect_confliction",
                "false"
              ],
              [
                "test_get_overlap_inters",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_inter",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_inter",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_confliction",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_overlap_inters",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_detect_confliction",
                "false"
              ],
              [
                "test_get_overlap_inters",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_detect_confliction",
                "false"
              ],
              [
                "test_get_overlap_inters",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_merge_inter",
                  "0"
                ],
                [
                  "test_get_inter",
                  "0"
                ],
                [
                  "test_detect_confliction",
                  "0"
                ],
                [
                  "test_get_overlap_inters",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_merge_inter",
                  "0"
                ],
                [
                  "test_get_inter",
                  "0"
                ],
                [
                  "test_detect_confliction",
                  "0"
                ],
                [
                  "test_get_overlap_inters",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_detect_confliction",
                "false"
              ],
              [
                "test_get_overlap_inters",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_detect_confliction",
                "false"
              ],
              [
                "test_get_overlap_inters",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "1"
              ],
              [
                "test_get_inter",
                "1"
              ],
              [
                "test_detect_confliction",
                "2"
              ],
              [
                "test_get_overlap_inters",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                [
                  "merges"
                ]
              ],
              [
                "test_get_inter",
                [
                  "inters"
                ]
              ],
              [
                "test_detect_confliction",
                [
                  "inter",
                  "merges"
                ]
              ],
              [
                "test_get_overlap_inters",
                [
                  "inter1",
                  "inter2",
                  "merges"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_merge_inter",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_inter",
                [
                  "self.example"
                ]
              ],
              [
                "test_detect_confliction",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_overlap_inters",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5211944420539576,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_inter",
                  "test_detect_confliction",
                  0.8825773880304512
                ],
                [
                  "test_get_inter",
                  "test_get_overlap_inters",
                  0.8954489693979155
                ],
                [
                  "test_get_overlap_inters",
                  "test_merge_inter",
                  0.1199804061840983
                ],
                [
                  "test_merge_inter",
                  "test_detect_confliction",
                  0.10039518745690372
                ],
                [
                  "test_get_overlap_inters",
                  "test_detect_confliction",
                  0.9703677134838798
                ],
                [
                  "test_get_inter",
                  "test_merge_inter",
                  0.15839698777049718
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_merge_inter",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_detect_confliction",
                "false"
              ],
              [
                "test_get_overlap_inters",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_plot_mountain.py",
    "testCases": [
      {
        "name": "TestPlotMountain",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_plot_mountain_plot",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_plot_mountain_plot",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_plot_mountain_plot",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_plot_mountain_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_plot_mountain_plot",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_plot_mountain_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_plot_mountain_plot",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_plot_mountain_plot",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_mountain_plot",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_plot_TSS_venn.py",
    "testCases": [
      {
        "name": "TestPlotTSSVenn",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_check_tss_class",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_import_types",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_read_gff",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_plot",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_check_tss_class",
                  "[]"
                ],
                [
                  "test_import_types",
                  "[]"
                ],
                [
                  "test_read_gff",
                  "[]"
                ],
                [
                  "test_plot",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_check_tss_class",
                  "false"
                ],
                [
                  "test_import_types",
                  "false"
                ],
                [
                  "test_read_gff",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_check_tss_class",
                  "false"
                ],
                [
                  "test_import_types",
                  "false"
                ],
                [
                  "test_read_gff",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_check_tss_class",
                  "false"
                ],
                [
                  "test_import_types",
                  "false"
                ],
                [
                  "test_read_gff",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_check_tss_class",
                  "false"
                ],
                [
                  "test_import_types",
                  "false"
                ],
                [
                  "test_read_gff",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                "false"
              ],
              [
                "test_import_types",
                "false"
              ],
              [
                "test_read_gff",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                "false"
              ],
              [
                "test_import_types",
                "false"
              ],
              [
                "test_read_gff",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_check_tss_class",
                [
                  "self.mock",
                  "self.test_folder"
                ]
              ],
              [
                "test_import_types",
                [
                  "self.mock",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_gff",
                [
                  "self.mock"
                ]
              ],
              [
                "test_plot",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                "false"
              ],
              [
                "test_import_types",
                "false"
              ],
              [
                "test_read_gff",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_check_tss_class",
                "false"
              ],
              [
                "test_import_types",
                "false"
              ],
              [
                "test_read_gff",
                "true"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_check_tss_class",
                  "0"
                ],
                [
                  "test_import_types",
                  "0"
                ],
                [
                  "test_read_gff",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_check_tss_class",
                  "0"
                ],
                [
                  "test_import_types",
                  "0"
                ],
                [
                  "test_read_gff",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                "false"
              ],
              [
                "test_import_types",
                "false"
              ],
              [
                "test_read_gff",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                "false"
              ],
              [
                "test_import_types",
                "false"
              ],
              [
                "test_read_gff",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                "2"
              ],
              [
                "test_import_types",
                "2"
              ],
              [
                "test_read_gff",
                "3"
              ],
              [
                "test_plot",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                [
                  "strain",
                  "tss_type",
                  "total_types"
                ]
              ],
              [
                "test_import_types",
                [
                  "types",
                  "total_types",
                  "tsss"
                ]
              ],
              [
                "test_read_gff",
                [
                  "tsss",
                  "tss_num",
                  "tss_file"
                ]
              ],
              [
                "test_plot",
                [
                  "types",
                  "total_types",
                  "tss_num"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_check_tss_class",
                [
                  "self.example"
                ]
              ],
              [
                "test_import_types",
                [
                  "self.example"
                ]
              ],
              [
                "test_read_gff",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_plot",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5396697525749105,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_check_tss_class",
                  "test_plot",
                  0.5647790117101654
                ],
                [
                  "test_import_types",
                  "test_plot",
                  0.863696860870551
                ],
                [
                  "test_import_types",
                  "test_read_gff",
                  0.4416942325792755
                ],
                [
                  "test_check_tss_class",
                  "test_read_gff",
                  0.4125143236626951
                ],
                [
                  "test_read_gff",
                  "test_plot",
                  0.48658396283990407
                ],
                [
                  "test_check_tss_class",
                  "test_import_types",
                  0.4687501237868721
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_check_tss_class",
                "false"
              ],
              [
                "test_import_types",
                "false"
              ],
              [
                "test_read_gff",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_stat_sublocal.py",
    "testCases": [
      {
        "name": "TestStatSubLocal",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_read_table",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_print_file_and_plot",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_plot",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_read_table",
                  "[]"
                ],
                [
                  "test_print_file_and_plot",
                  "[]"
                ],
                [
                  "test_plot",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_read_table",
                  "false"
                ],
                [
                  "test_print_file_and_plot",
                  "true"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_read_table",
                  "false"
                ],
                [
                  "test_print_file_and_plot",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_read_table",
                  "false"
                ],
                [
                  "test_print_file_and_plot",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_read_table",
                  "false"
                ],
                [
                  "test_print_file_and_plot",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "false"
              ],
              [
                "test_print_file_and_plot",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "false"
              ],
              [
                "test_print_file_and_plot",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_read_table",
                []
              ],
              [
                "test_print_file_and_plot",
                [
                  "self.example"
                ]
              ],
              [
                "test_plot",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "false"
              ],
              [
                "test_print_file_and_plot",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "false"
              ],
              [
                "test_print_file_and_plot",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_read_table",
                  "0"
                ],
                [
                  "test_print_file_and_plot",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_read_table",
                  "0"
                ],
                [
                  "test_print_file_and_plot",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "false"
              ],
              [
                "test_print_file_and_plot",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "false"
              ],
              [
                "test_print_file_and_plot",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "3"
              ],
              [
                "test_print_file_and_plot",
                "4"
              ],
              [
                "test_plot",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                [
                  "psortb_file",
                  "subs",
                  "unknown_nums",
                  "total_nums"
                ]
              ],
              [
                "test_print_file_and_plot",
                [
                  "sub",
                  "datas",
                  "unknown_nums",
                  "total_nums",
                  "out_stat"
                ]
              ],
              [
                "test_plot",
                [
                  "subs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_file_and_plot",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_plot",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7162395573825665,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_print_file_and_plot",
                  "test_plot",
                  0.6830684271467752
                ],
                [
                  "test_read_table",
                  "test_print_file_and_plot",
                  0.7818670811496361
                ],
                [
                  "test_read_table",
                  "test_plot",
                  0.6837831638512882
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_read_table",
                "false"
              ],
              [
                "test_print_file_and_plot",
                "false"
              ],
              [
                "test_plot",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_gen_table_tran.py",
    "testCases": [
      {
        "name": "TestGenTableTran",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_print_coverage",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_coverage",
                  "[PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_print_coverage",
                  "[]"
                ],
                [
                  "test_detect_coverage",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_print_coverage",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_print_coverage",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_print_coverage",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_print_coverage",
                  "false"
                ],
                [
                  "test_detect_coverage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_print_coverage",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_coverage",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_print_coverage",
                  "0"
                ],
                [
                  "test_detect_coverage",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_print_coverage",
                  "0"
                ],
                [
                  "test_detect_coverage",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "3"
              ],
              [
                "test_detect_coverage",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                [
                  "out_gff",
                  "out"
                ]
              ],
              [
                "test_detect_coverage",
                [
                  "infos"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                [
                  "self.example"
                ]
              ],
              [
                "test_detect_coverage",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.40697674418604657,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_detect_coverage",
                  "test_print_coverage",
                  0.40697674418604657
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_print_coverage",
                "false"
              ],
              [
                "test_detect_coverage",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_sORF_detection.py",
    "testCases": [
      {
        "name": "TestsORFDetection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compute_candidate_best",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_import_overlap",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_cutoff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_best",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_check_tss",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_median_score",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_print_table",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_coverage_and_output",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sorf_detection",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_compare_sorf_tss",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_set_median",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_sorf_srna",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_mean_score",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_utr_type",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_read_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_coverage",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_merge",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_inter_coverage",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_validate_tss",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_validate_srna",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_assign_utr_cutoff",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_start_stop",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_print_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_rbs_site",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_get_attribute",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_inter_type",
                  "[PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compute_candidate_best",
                  "[]"
                ],
                [
                  "test_import_overlap",
                  "[]"
                ],
                [
                  "test_get_cutoff",
                  "[]"
                ],
                [
                  "test_get_best",
                  "[]"
                ],
                [
                  "test_check_tss",
                  "[]"
                ],
                [
                  "test_median_score",
                  "[]"
                ],
                [
                  "test_print_table",
                  "[]"
                ],
                [
                  "test_coverage_and_output",
                  "[]"
                ],
                [
                  "test_sorf_detection",
                  "[]"
                ],
                [
                  "test_compare_sorf_tss",
                  "[]"
                ],
                [
                  "test_set_median",
                  "[]"
                ],
                [
                  "test_compare_sorf_srna",
                  "[]"
                ],
                [
                  "test_mean_score",
                  "[]"
                ],
                [
                  "test_detect_utr_type",
                  "[]"
                ],
                [
                  "test_read_data",
                  "[]"
                ],
                [
                  "test_get_coverage",
                  "[]"
                ],
                [
                  "test_merge",
                  "[]"
                ],
                [
                  "test_get_inter_coverage",
                  "[]"
                ],
                [
                  "test_validate_tss",
                  "[]"
                ],
                [
                  "test_validate_srna",
                  "[]"
                ],
                [
                  "test_assign_utr_cutoff",
                  "[]"
                ],
                [
                  "test_detect_start_stop",
                  "[]"
                ],
                [
                  "test_print_file",
                  "[]"
                ],
                [
                  "test_detect_rbs_site",
                  "[]"
                ],
                [
                  "test_get_attribute",
                  "[]"
                ],
                [
                  "test_detect_inter_type",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compute_candidate_best",
                  "false"
                ],
                [
                  "test_import_overlap",
                  "false"
                ],
                [
                  "test_get_cutoff",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_check_tss",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_print_table",
                  "false"
                ],
                [
                  "test_coverage_and_output",
                  "false"
                ],
                [
                  "test_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_sorf_tss",
                  "false"
                ],
                [
                  "test_set_median",
                  "false"
                ],
                [
                  "test_compare_sorf_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_detect_utr_type",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_merge",
                  "false"
                ],
                [
                  "test_get_inter_coverage",
                  "false"
                ],
                [
                  "test_validate_tss",
                  "false"
                ],
                [
                  "test_validate_srna",
                  "false"
                ],
                [
                  "test_assign_utr_cutoff",
                  "false"
                ],
                [
                  "test_detect_start_stop",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_rbs_site",
                  "false"
                ],
                [
                  "test_get_attribute",
                  "false"
                ],
                [
                  "test_detect_inter_type",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compute_candidate_best",
                  "false"
                ],
                [
                  "test_import_overlap",
                  "false"
                ],
                [
                  "test_get_cutoff",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_check_tss",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_print_table",
                  "false"
                ],
                [
                  "test_coverage_and_output",
                  "false"
                ],
                [
                  "test_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_sorf_tss",
                  "false"
                ],
                [
                  "test_set_median",
                  "false"
                ],
                [
                  "test_compare_sorf_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_detect_utr_type",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_merge",
                  "false"
                ],
                [
                  "test_get_inter_coverage",
                  "false"
                ],
                [
                  "test_validate_tss",
                  "false"
                ],
                [
                  "test_validate_srna",
                  "false"
                ],
                [
                  "test_assign_utr_cutoff",
                  "false"
                ],
                [
                  "test_detect_start_stop",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_rbs_site",
                  "false"
                ],
                [
                  "test_get_attribute",
                  "false"
                ],
                [
                  "test_detect_inter_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compute_candidate_best",
                  "false"
                ],
                [
                  "test_import_overlap",
                  "false"
                ],
                [
                  "test_get_cutoff",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_check_tss",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_print_table",
                  "false"
                ],
                [
                  "test_coverage_and_output",
                  "false"
                ],
                [
                  "test_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_sorf_tss",
                  "false"
                ],
                [
                  "test_set_median",
                  "false"
                ],
                [
                  "test_compare_sorf_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_detect_utr_type",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_merge",
                  "false"
                ],
                [
                  "test_get_inter_coverage",
                  "false"
                ],
                [
                  "test_validate_tss",
                  "false"
                ],
                [
                  "test_validate_srna",
                  "false"
                ],
                [
                  "test_assign_utr_cutoff",
                  "false"
                ],
                [
                  "test_detect_start_stop",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_rbs_site",
                  "false"
                ],
                [
                  "test_get_attribute",
                  "false"
                ],
                [
                  "test_detect_inter_type",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compute_candidate_best",
                  "false"
                ],
                [
                  "test_import_overlap",
                  "false"
                ],
                [
                  "test_get_cutoff",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_check_tss",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_print_table",
                  "false"
                ],
                [
                  "test_coverage_and_output",
                  "false"
                ],
                [
                  "test_sorf_detection",
                  "false"
                ],
                [
                  "test_compare_sorf_tss",
                  "false"
                ],
                [
                  "test_set_median",
                  "false"
                ],
                [
                  "test_compare_sorf_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_detect_utr_type",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_merge",
                  "false"
                ],
                [
                  "test_get_inter_coverage",
                  "false"
                ],
                [
                  "test_validate_tss",
                  "false"
                ],
                [
                  "test_validate_srna",
                  "false"
                ],
                [
                  "test_assign_utr_cutoff",
                  "false"
                ],
                [
                  "test_detect_start_stop",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_rbs_site",
                  "false"
                ],
                [
                  "test_get_attribute",
                  "false"
                ],
                [
                  "test_detect_inter_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                "false"
              ],
              [
                "test_import_overlap",
                "false"
              ],
              [
                "test_get_cutoff",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_check_tss",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_coverage_and_output",
                "false"
              ],
              [
                "test_sorf_detection",
                "false"
              ],
              [
                "test_compare_sorf_tss",
                "false"
              ],
              [
                "test_set_median",
                "false"
              ],
              [
                "test_compare_sorf_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_detect_utr_type",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_merge",
                "false"
              ],
              [
                "test_get_inter_coverage",
                "false"
              ],
              [
                "test_validate_tss",
                "false"
              ],
              [
                "test_validate_srna",
                "false"
              ],
              [
                "test_assign_utr_cutoff",
                "false"
              ],
              [
                "test_detect_start_stop",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_rbs_site",
                "false"
              ],
              [
                "test_get_attribute",
                "false"
              ],
              [
                "test_detect_inter_type",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                "false"
              ],
              [
                "test_import_overlap",
                "false"
              ],
              [
                "test_get_cutoff",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_check_tss",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_coverage_and_output",
                "false"
              ],
              [
                "test_sorf_detection",
                "false"
              ],
              [
                "test_compare_sorf_tss",
                "false"
              ],
              [
                "test_set_median",
                "false"
              ],
              [
                "test_compare_sorf_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_detect_utr_type",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_merge",
                "false"
              ],
              [
                "test_get_inter_coverage",
                "false"
              ],
              [
                "test_validate_tss",
                "false"
              ],
              [
                "test_validate_srna",
                "false"
              ],
              [
                "test_assign_utr_cutoff",
                "false"
              ],
              [
                "test_detect_start_stop",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_rbs_site",
                "false"
              ],
              [
                "test_get_attribute",
                "false"
              ],
              [
                "test_detect_inter_type",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_compute_candidate_best",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_import_overlap",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_cutoff",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_best",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_tss",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_median_score",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_table",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_coverage_and_output",
                [
                  "self.fasta",
                  "self.wigs",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_sorf_detection",
                [
                  "self.wigs",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_sorf_tss",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_set_median",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_sorf_srna",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_mean_score",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_utr_type",
                [
                  "self.fasta",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_data",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.gff"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_merge",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_inter_coverage",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_validate_tss",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_validate_srna",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_assign_utr_cutoff",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_start_stop",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_file",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_rbs_site",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_attribute",
                [
                  "self.fasta",
                  "self.mock",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_inter_type",
                [
                  "self.fasta",
                  "self.wigs",
                  "self.mock_args",
                  "self.example",
                  "self.gff",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                "false"
              ],
              [
                "test_import_overlap",
                "false"
              ],
              [
                "test_get_cutoff",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_check_tss",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_coverage_and_output",
                "false"
              ],
              [
                "test_sorf_detection",
                "false"
              ],
              [
                "test_compare_sorf_tss",
                "false"
              ],
              [
                "test_set_median",
                "false"
              ],
              [
                "test_compare_sorf_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_detect_utr_type",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_merge",
                "false"
              ],
              [
                "test_get_inter_coverage",
                "false"
              ],
              [
                "test_validate_tss",
                "false"
              ],
              [
                "test_validate_srna",
                "false"
              ],
              [
                "test_assign_utr_cutoff",
                "false"
              ],
              [
                "test_detect_start_stop",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_rbs_site",
                "false"
              ],
              [
                "test_get_attribute",
                "false"
              ],
              [
                "test_detect_inter_type",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_compute_candidate_best",
                "false"
              ],
              [
                "test_import_overlap",
                "false"
              ],
              [
                "test_get_cutoff",
                "true"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_check_tss",
                "false"
              ],
              [
                "test_median_score",
                "true"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_coverage_and_output",
                "false"
              ],
              [
                "test_sorf_detection",
                "false"
              ],
              [
                "test_compare_sorf_tss",
                "false"
              ],
              [
                "test_set_median",
                "false"
              ],
              [
                "test_compare_sorf_srna",
                "false"
              ],
              [
                "test_mean_score",
                "true"
              ],
              [
                "test_detect_utr_type",
                "false"
              ],
              [
                "test_read_data",
                "true"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_merge",
                "false"
              ],
              [
                "test_get_inter_coverage",
                "false"
              ],
              [
                "test_validate_tss",
                "false"
              ],
              [
                "test_validate_srna",
                "false"
              ],
              [
                "test_assign_utr_cutoff",
                "true"
              ],
              [
                "test_detect_start_stop",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_rbs_site",
                "false"
              ],
              [
                "test_get_attribute",
                "false"
              ],
              [
                "test_detect_inter_type",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compute_candidate_best",
                  "0"
                ],
                [
                  "test_import_overlap",
                  "0"
                ],
                [
                  "test_get_cutoff",
                  "0"
                ],
                [
                  "test_get_best",
                  "0"
                ],
                [
                  "test_check_tss",
                  "0"
                ],
                [
                  "test_median_score",
                  "0"
                ],
                [
                  "test_print_table",
                  "0"
                ],
                [
                  "test_coverage_and_output",
                  "0"
                ],
                [
                  "test_sorf_detection",
                  "0"
                ],
                [
                  "test_compare_sorf_tss",
                  "0"
                ],
                [
                  "test_set_median",
                  "0"
                ],
                [
                  "test_compare_sorf_srna",
                  "0"
                ],
                [
                  "test_mean_score",
                  "0"
                ],
                [
                  "test_detect_utr_type",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ],
                [
                  "test_merge",
                  "0"
                ],
                [
                  "test_get_inter_coverage",
                  "0"
                ],
                [
                  "test_validate_tss",
                  "0"
                ],
                [
                  "test_validate_srna",
                  "0"
                ],
                [
                  "test_assign_utr_cutoff",
                  "0"
                ],
                [
                  "test_detect_start_stop",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_detect_rbs_site",
                  "0"
                ],
                [
                  "test_get_attribute",
                  "0"
                ],
                [
                  "test_detect_inter_type",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compute_candidate_best",
                  "0"
                ],
                [
                  "test_import_overlap",
                  "0"
                ],
                [
                  "test_get_cutoff",
                  "0"
                ],
                [
                  "test_get_best",
                  "0"
                ],
                [
                  "test_check_tss",
                  "0"
                ],
                [
                  "test_median_score",
                  "0"
                ],
                [
                  "test_print_table",
                  "0"
                ],
                [
                  "test_coverage_and_output",
                  "0"
                ],
                [
                  "test_sorf_detection",
                  "0"
                ],
                [
                  "test_compare_sorf_tss",
                  "0"
                ],
                [
                  "test_set_median",
                  "0"
                ],
                [
                  "test_compare_sorf_srna",
                  "0"
                ],
                [
                  "test_mean_score",
                  "0"
                ],
                [
                  "test_detect_utr_type",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ],
                [
                  "test_merge",
                  "0"
                ],
                [
                  "test_get_inter_coverage",
                  "0"
                ],
                [
                  "test_validate_tss",
                  "0"
                ],
                [
                  "test_validate_srna",
                  "0"
                ],
                [
                  "test_assign_utr_cutoff",
                  "0"
                ],
                [
                  "test_detect_start_stop",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_detect_rbs_site",
                  "0"
                ],
                [
                  "test_get_attribute",
                  "0"
                ],
                [
                  "test_detect_inter_type",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                "false"
              ],
              [
                "test_import_overlap",
                "false"
              ],
              [
                "test_get_cutoff",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_check_tss",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_coverage_and_output",
                "false"
              ],
              [
                "test_sorf_detection",
                "false"
              ],
              [
                "test_compare_sorf_tss",
                "false"
              ],
              [
                "test_set_median",
                "false"
              ],
              [
                "test_compare_sorf_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_detect_utr_type",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_merge",
                "false"
              ],
              [
                "test_get_inter_coverage",
                "false"
              ],
              [
                "test_validate_tss",
                "false"
              ],
              [
                "test_validate_srna",
                "false"
              ],
              [
                "test_assign_utr_cutoff",
                "false"
              ],
              [
                "test_detect_start_stop",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_rbs_site",
                "false"
              ],
              [
                "test_get_attribute",
                "false"
              ],
              [
                "test_detect_inter_type",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                "false"
              ],
              [
                "test_import_overlap",
                "false"
              ],
              [
                "test_get_cutoff",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_check_tss",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_coverage_and_output",
                "false"
              ],
              [
                "test_sorf_detection",
                "false"
              ],
              [
                "test_compare_sorf_tss",
                "false"
              ],
              [
                "test_set_median",
                "false"
              ],
              [
                "test_compare_sorf_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_detect_utr_type",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_merge",
                "false"
              ],
              [
                "test_get_inter_coverage",
                "false"
              ],
              [
                "test_validate_tss",
                "false"
              ],
              [
                "test_validate_srna",
                "false"
              ],
              [
                "test_assign_utr_cutoff",
                "false"
              ],
              [
                "test_detect_start_stop",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_rbs_site",
                "false"
              ],
              [
                "test_get_attribute",
                "false"
              ],
              [
                "test_detect_inter_type",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                "1"
              ],
              [
                "test_import_overlap",
                "1"
              ],
              [
                "test_get_cutoff",
                "1"
              ],
              [
                "test_get_best",
                "1"
              ],
              [
                "test_check_tss",
                "1"
              ],
              [
                "test_median_score",
                "1"
              ],
              [
                "test_print_table",
                "1"
              ],
              [
                "test_coverage_and_output",
                "2"
              ],
              [
                "test_sorf_detection",
                "4"
              ],
              [
                "test_compare_sorf_tss",
                "2"
              ],
              [
                "test_set_median",
                "1"
              ],
              [
                "test_compare_sorf_srna",
                "1"
              ],
              [
                "test_mean_score",
                "1"
              ],
              [
                "test_detect_utr_type",
                "1"
              ],
              [
                "test_read_data",
                "2"
              ],
              [
                "test_get_coverage",
                "1"
              ],
              [
                "test_merge",
                "1"
              ],
              [
                "test_get_inter_coverage",
                "1"
              ],
              [
                "test_validate_tss",
                "1"
              ],
              [
                "test_validate_srna",
                "1"
              ],
              [
                "test_assign_utr_cutoff",
                "1"
              ],
              [
                "test_detect_start_stop",
                "2"
              ],
              [
                "test_print_file",
                "2"
              ],
              [
                "test_detect_rbs_site",
                "1"
              ],
              [
                "test_get_attribute",
                "1"
              ],
              [
                "test_detect_inter_type",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                [
                  "sorfs"
                ]
              ],
              [
                "test_import_overlap",
                [
                  "final",
                  "sorf1",
                  "sorf2"
                ]
              ],
              [
                "test_get_cutoff",
                [
                  "sorf",
                  "medians",
                  "cutoff",
                  "coverages"
                ]
              ],
              [
                "test_get_best",
                [
                  "args",
                  "data",
                  "sorfs"
                ]
              ],
              [
                "test_check_tss",
                [
                  "checks",
                  "sorf"
                ]
              ],
              [
                "test_median_score",
                [
                  "num"
                ]
              ],
              [
                "test_print_table",
                [
                  "out_t",
                  "args",
                  "sorf",
                  "sorf_datas"
                ]
              ],
              [
                "test_coverage_and_output",
                [
                  "out_t",
                  "args",
                  "out_g",
                  "wigs",
                  "sorfs",
                  "seq"
                ]
              ],
              [
                "test_sorf_detection",
                [
                  "args",
                  "inter_gff",
                  "tss_file",
                  "srna_gff",
                  "fasta"
                ]
              ],
              [
                "test_compare_sorf_tss",
                [
                  "args",
                  "sorfs_best",
                  "sorfs_all",
                  "sorfs"
                ]
              ],
              [
                "test_set_median",
                [
                  "mediandict",
                  "coverages",
                  "covers"
                ]
              ],
              [
                "test_compare_sorf_srna",
                [
                  "sorfs"
                ]
              ],
              [
                "test_mean_score",
                [
                  "num"
                ]
              ],
              [
                "test_detect_utr_type",
                [
                  "med_inters",
                  "attributes_tas",
                  "tas",
                  "ta_dict"
                ]
              ],
              [
                "test_read_data",
                [
                  "inters",
                  "inter",
                  "tsss",
                  "srnas",
                  "fasta",
                  "seq"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "cutoffs",
                  "sorf",
                  "medianlist",
                  "coverages",
                  "covers"
                ]
              ],
              [
                "test_merge",
                [
                  "finals",
                  "sorfs",
                  "seq"
                ]
              ],
              [
                "test_get_inter_coverage",
                [
                  "inters",
                  "inter_covers"
                ]
              ],
              [
                "test_validate_tss",
                [
                  "sorf",
                  "datas"
                ]
              ],
              [
                "test_validate_srna",
                [
                  "sorf",
                  "srnas"
                ]
              ],
              [
                "test_assign_utr_cutoff",
                [
                  "medians",
                  "cutoff",
                  "coverages"
                ]
              ],
              [
                "test_detect_start_stop",
                [
                  "args",
                  "sorf",
                  "seq"
                ]
              ],
              [
                "test_print_file",
                [
                  "out_t",
                  "args",
                  "out_g",
                  "sorf",
                  "sorf_datas"
                ]
              ],
              [
                "test_detect_rbs_site",
                [
                  "args",
                  "detect"
                ]
              ],
              [
                "test_get_attribute",
                [
                  "string",
                  "sorf"
                ]
              ],
              [
                "test_detect_inter_type",
                [
                  "attributes_inter",
                  "data",
                  "inters",
                  "wigs",
                  "inter_dict"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_compute_candidate_best",
                []
              ],
              [
                "test_import_overlap",
                []
              ],
              [
                "test_get_cutoff",
                []
              ],
              [
                "test_get_best",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_check_tss",
                [
                  "self.example"
                ]
              ],
              [
                "test_median_score",
                []
              ],
              [
                "test_print_table",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_coverage_and_output",
                [
                  "self.mock",
                  "self.mock_args"
                ]
              ],
              [
                "test_sorf_detection",
                [
                  "self.fasta",
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.gff"
                ]
              ],
              [
                "test_compare_sorf_tss",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_set_median",
                []
              ],
              [
                "test_compare_sorf_srna",
                [
                  "self.example"
                ]
              ],
              [
                "test_mean_score",
                []
              ],
              [
                "test_detect_utr_type",
                [
                  "self.mock"
                ]
              ],
              [
                "test_read_data",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "self.example"
                ]
              ],
              [
                "test_merge",
                []
              ],
              [
                "test_get_inter_coverage",
                []
              ],
              [
                "test_validate_tss",
                []
              ],
              [
                "test_validate_srna",
                []
              ],
              [
                "test_assign_utr_cutoff",
                []
              ],
              [
                "test_detect_start_stop",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_print_file",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_detect_rbs_site",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_get_attribute",
                []
              ],
              [
                "test_detect_inter_type",
                [
                  "self.mock"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6147940600963574,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_detect_rbs_site",
                  "test_get_cutoff",
                  0.6425397803551931
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_detect_inter_type",
                  0.4026566191448695
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_mean_score",
                  0.7401480444148053
                ],
                [
                  "test_read_data",
                  "test_sorf_detection",
                  0.5481759201904327
                ],
                [
                  "test_import_overlap",
                  "test_set_median",
                  0.692373894163265
                ],
                [
                  "test_detect_utr_type",
                  "test_get_best",
                  0.3593807571388526
                ],
                [
                  "test_get_coverage",
                  "test_detect_start_stop",
                  0.6075482512438447
                ],
                [
                  "test_check_tss",
                  "test_get_cutoff",
                  0.8279065025528359
                ],
                [
                  "test_detect_start_stop",
                  "test_get_best",
                  0.7180904017527027
                ],
                [
                  "test_get_cutoff",
                  "test_coverage_and_output",
                  0.8028918269190646
                ],
                [
                  "test_compare_sorf_srna",
                  "test_get_inter_coverage",
                  0.29172629280367085
                ],
                [
                  "test_get_cutoff",
                  "test_median_score",
                  0.7832690207805378
                ],
                [
                  "test_compare_sorf_tss",
                  "test_get_best",
                  0.8820620003776416
                ],
                [
                  "test_get_attribute",
                  "test_detect_inter_type",
                  0.4330309259490398
                ],
                [
                  "test_coverage_and_output",
                  "test_compute_candidate_best",
                  0.7762081917604641
                ],
                [
                  "test_get_cutoff",
                  "test_print_file",
                  0.8053671238933541
                ],
                [
                  "test_get_attribute",
                  "test_mean_score",
                  0.5781865001385679
                ],
                [
                  "test_detect_start_stop",
                  "test_validate_srna",
                  0.574959874521514
                ],
                [
                  "test_compare_sorf_tss",
                  "test_merge",
                  0.840820472065422
                ],
                [
                  "test_get_inter_coverage",
                  "test_validate_srna",
                  0.3309445398312708
                ],
                [
                  "test_mean_score",
                  "test_compute_candidate_best",
                  0.6821910402406466
                ],
                [
                  "test_merge",
                  "test_set_median",
                  0.6861024520769539
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_get_attribute",
                  0.621581560508061
                ],
                [
                  "test_mean_score",
                  "test_detect_inter_type",
                  0.28038178538954933
                ],
                [
                  "test_compare_sorf_tss",
                  "test_print_table",
                  0.7305335131107735
                ],
                [
                  "test_compare_sorf_srna",
                  "test_median_score",
                  0.622748224873799
                ],
                [
                  "test_get_coverage",
                  "test_get_cutoff",
                  0.9143753917051671
                ],
                [
                  "test_read_data",
                  "test_import_overlap",
                  0.4084253462527115
                ],
                [
                  "test_detect_rbs_site",
                  "test_detect_start_stop",
                  0.8014078484836047
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_compute_candidate_best",
                  0.6513126321486328
                ],
                [
                  "test_get_cutoff",
                  "test_get_inter_coverage",
                  0.40793375208320115
                ],
                [
                  "test_print_table",
                  "test_validate_srna",
                  0.7803755029846895
                ],
                [
                  "test_check_tss",
                  "test_detect_utr_type",
                  0.3979112128771108
                ],
                [
                  "test_median_score",
                  "test_detect_inter_type",
                  0.2889260474058461
                ],
                [
                  "test_validate_srna",
                  "test_get_best",
                  0.8132253043613008
                ],
                [
                  "test_print_file",
                  "test_set_median",
                  0.7035877244264009
                ],
                [
                  "test_get_inter_coverage",
                  "test_get_best",
                  0.40422281262327103
                ],
                [
                  "test_merge",
                  "test_detect_inter_type",
                  0.4056463221566853
                ],
                [
                  "test_detect_start_stop",
                  "test_import_overlap",
                  0.6133334298250915
                ],
                [
                  "test_check_tss",
                  "test_get_attribute",
                  0.7188646240339
                ],
                [
                  "test_merge",
                  "test_get_inter_coverage",
                  0.33855394715090364
                ],
                [
                  "test_get_inter_coverage",
                  "test_validate_tss",
                  0.3361402191633709
                ],
                [
                  "test_get_coverage",
                  "test_print_table",
                  0.7738401091030565
                ],
                [
                  "test_merge",
                  "test_mean_score",
                  0.6764312255702375
                ],
                [
                  "test_print_file",
                  "test_mean_score",
                  0.7362527877523961
                ],
                [
                  "test_read_data",
                  "test_print_file",
                  0.46282835519772864
                ],
                [
                  "test_read_data",
                  "test_median_score",
                  0.43360592830077793
                ],
                [
                  "test_read_data",
                  "test_coverage_and_output",
                  0.5336456829020584
                ],
                [
                  "test_validate_srna",
                  "test_sorf_detection",
                  0.42767227004326175
                ],
                [
                  "test_import_overlap",
                  "test_coverage_and_output",
                  0.7637544009448468
                ],
                [
                  "test_check_tss",
                  "test_mean_score",
                  0.6815427624565666
                ],
                [
                  "test_print_table",
                  "test_sorf_detection",
                  0.5288930591793444
                ],
                [
                  "test_validate_tss",
                  "test_validate_srna",
                  0.9097676923362322
                ],
                [
                  "test_compare_sorf_tss",
                  "test_import_overlap",
                  0.8384600764333692
                ],
                [
                  "test_detect_start_stop",
                  "test_validate_tss",
                  0.5708631922741773
                ],
                [
                  "test_get_attribute",
                  "test_compute_candidate_best",
                  0.6936325868218458
                ],
                [
                  "test_detect_rbs_site",
                  "test_get_attribute",
                  0.4860558591953936
                ],
                [
                  "test_median_score",
                  "test_compute_candidate_best",
                  0.7033603052941965
                ],
                [
                  "test_read_data",
                  "test_get_best",
                  0.4880764501218394
                ],
                [
                  "test_compare_sorf_tss",
                  "test_validate_srna",
                  0.6829836350667277
                ],
                [
                  "test_get_coverage",
                  "test_get_best",
                  0.7938566201357354
                ],
                [
                  "test_compare_sorf_srna",
                  "test_coverage_and_output",
                  0.5947605276673781
                ],
                [
                  "test_mean_score",
                  "test_set_median",
                  0.7378529674466715
                ],
                [
                  "test_compare_sorf_srna",
                  "test_print_file",
                  0.6457978441763553
                ],
                [
                  "test_print_file",
                  "test_median_score",
                  0.7515172163036036
                ],
                [
                  "test_detect_rbs_site",
                  "test_detect_utr_type",
                  0.441872135636508
                ],
                [
                  "test_compare_sorf_tss",
                  "test_validate_tss",
                  0.6992558180428692
                ],
                [
                  "test_import_overlap",
                  "test_compute_candidate_best",
                  0.8838931555449667
                ],
                [
                  "test_import_overlap",
                  "test_assign_utr_cutoff",
                  0.6774489640666169
                ],
                [
                  "test_detect_rbs_site",
                  "test_mean_score",
                  0.5826375333425758
                ],
                [
                  "test_merge",
                  "test_median_score",
                  0.7044916248961449
                ],
                [
                  "test_detect_rbs_site",
                  "test_compare_sorf_tss",
                  0.6375723157146741
                ],
                [
                  "test_detect_start_stop",
                  "test_print_table",
                  0.6427897049387487
                ],
                [
                  "test_import_overlap",
                  "test_print_file",
                  0.7998392835736622
                ],
                [
                  "test_validate_srna",
                  "test_coverage_and_output",
                  0.7329554521166463
                ],
                [
                  "test_validate_tss",
                  "test_sorf_detection",
                  0.4294503203360368
                ],
                [
                  "test_get_coverage",
                  "test_detect_utr_type",
                  0.3932790019212388
                ],
                [
                  "test_median_score",
                  "test_coverage_and_output",
                  0.695621994728589
                ],
                [
                  "test_merge",
                  "test_get_attribute",
                  0.7481753103556205
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_detect_utr_type",
                  0.4287464628562721
                ],
                [
                  "test_get_attribute",
                  "test_median_score",
                  0.5968737173968243
                ],
                [
                  "test_import_overlap",
                  "test_sorf_detection",
                  0.3909196579201869
                ],
                [
                  "test_compare_sorf_srna",
                  "test_get_attribute",
                  0.6286137576177978
                ],
                [
                  "test_get_attribute",
                  "test_coverage_and_output",
                  0.7063287851792072
                ],
                [
                  "test_set_median",
                  "test_compute_candidate_best",
                  0.6720394935328207
                ],
                [
                  "test_read_data",
                  "test_validate_tss",
                  0.40691928539184663
                ],
                [
                  "test_detect_rbs_site",
                  "test_get_best",
                  0.6787033684741957
                ],
                [
                  "test_get_attribute",
                  "test_print_file",
                  0.7627803104019497
                ],
                [
                  "test_get_best",
                  "test_detect_inter_type",
                  0.3634582114479277
                ],
                [
                  "test_detect_start_stop",
                  "test_get_cutoff",
                  0.6306772013997568
                ],
                [
                  "test_detect_start_stop",
                  "test_print_file",
                  0.6342507409411983
                ],
                [
                  "test_detect_start_stop",
                  "test_coverage_and_output",
                  0.717204622118059
                ],
                [
                  "test_merge",
                  "test_sorf_detection",
                  0.4005734353701334
                ],
                [
                  "test_detect_rbs_site",
                  "test_validate_srna",
                  0.562975319680657
                ],
                [
                  "test_check_tss",
                  "test_merge",
                  0.8171449801412293
                ],
                [
                  "test_compare_sorf_tss",
                  "test_sorf_detection",
                  0.4771939258207105
                ],
                [
                  "test_get_coverage",
                  "test_validate_srna",
                  0.6888194891664332
                ],
                [
                  "test_print_table",
                  "test_get_inter_coverage",
                  0.37986107866838675
                ],
                [
                  "test_detect_utr_type",
                  "test_coverage_and_output",
                  0.4443847166867289
                ],
                [
                  "test_get_coverage",
                  "test_get_attribute",
                  0.6962222578236001
                ],
                [
                  "test_print_table",
                  "test_median_score",
                  0.739126924418724
                ],
                [
                  "test_get_cutoff",
                  "test_detect_inter_type",
                  0.44497253767408645
                ],
                [
                  "test_print_file",
                  "test_coverage_and_output",
                  0.8879136432048476
                ],
                [
                  "test_compare_sorf_srna",
                  "test_validate_srna",
                  0.7076956577388533
                ],
                [
                  "test_detect_rbs_site",
                  "test_validate_tss",
                  0.5647543477813912
                ],
                [
                  "test_validate_tss",
                  "test_coverage_and_output",
                  0.7374392893031635
                ],
                [
                  "test_check_tss",
                  "test_detect_inter_type",
                  0.3652684665168606
                ],
                [
                  "test_median_score",
                  "test_sorf_detection",
                  0.3905503888446701
                ],
                [
                  "test_print_table",
                  "test_set_median",
                  0.6881091615435014
                ],
                [
                  "test_detect_start_stop",
                  "test_median_score",
                  0.5460730720875678
                ],
                [
                  "test_compare_sorf_srna",
                  "test_import_overlap",
                  0.8281181308700233
                ],
                [
                  "test_detect_inter_type",
                  "test_sorf_detection",
                  0.596764347861372
                ],
                [
                  "test_get_inter_coverage",
                  "test_sorf_detection",
                  0.4806319963565446
                ],
                [
                  "test_compare_sorf_srna",
                  "test_compute_candidate_best",
                  0.8131165934181444
                ],
                [
                  "test_get_inter_coverage",
                  "test_detect_utr_type",
                  0.34188983781648996
                ],
                [
                  "test_get_cutoff",
                  "test_set_median",
                  0.7964816800139422
                ],
                [
                  "test_read_data",
                  "test_validate_srna",
                  0.3824191468965899
                ],
                [
                  "test_compare_sorf_srna",
                  "test_sorf_detection",
                  0.31443032836816404
                ],
                [
                  "test_detect_inter_type",
                  "test_compute_candidate_best",
                  0.3085454918044024
                ],
                [
                  "test_print_table",
                  "test_validate_tss",
                  0.8067181922749306
                ],
                [
                  "test_check_tss",
                  "test_assign_utr_cutoff",
                  0.653678959146267
                ],
                [
                  "test_print_file",
                  "test_get_inter_coverage",
                  0.38643554698767474
                ],
                [
                  "test_compare_sorf_tss",
                  "test_get_attribute",
                  0.6268230802459908
                ],
                [
                  "test_detect_rbs_site",
                  "test_import_overlap",
                  0.56258258730719
                ],
                [
                  "test_detect_rbs_site",
                  "test_check_tss",
                  0.5986931478545777
                ],
                [
                  "test_import_overlap",
                  "test_detect_utr_type",
                  0.3793843107221814
                ],
                [
                  "test_detect_rbs_site",
                  "test_compute_candidate_best",
                  0.5603494626487412
                ],
                [
                  "test_get_coverage",
                  "test_validate_tss",
                  0.7026235304218011
                ],
                [
                  "test_compare_sorf_tss",
                  "test_compare_sorf_srna",
                  0.8632113414172327
                ],
                [
                  "test_compare_sorf_tss",
                  "test_detect_utr_type",
                  0.3398186774982246
                ],
                [
                  "test_print_file",
                  "test_detect_inter_type",
                  0.3668443024881826
                ],
                [
                  "test_read_data",
                  "test_compare_sorf_srna",
                  0.33793125168323446
                ],
                [
                  "test_detect_rbs_site",
                  "test_read_data",
                  0.5260808046122625
                ],
                [
                  "test_check_tss",
                  "test_print_table",
                  0.7677786166128665
                ],
                [
                  "test_detect_rbs_site",
                  "test_sorf_detection",
                  0.6689545921060852
                ],
                [
                  "test_read_data",
                  "test_check_tss",
                  0.4301079953040476
                ],
                [
                  "test_detect_start_stop",
                  "test_detect_inter_type",
                  0.46318550962495647
                ],
                [
                  "test_set_median",
                  "test_sorf_detection",
                  0.48654054287318355
                ],
                [
                  "test_check_tss",
                  "test_print_file",
                  0.7523845255099311
                ],
                [
                  "test_detect_start_stop",
                  "test_set_median",
                  0.5906415932819451
                ],
                [
                  "test_import_overlap",
                  "test_get_attribute",
                  0.7771463971855922
                ],
                [
                  "test_get_attribute",
                  "test_get_inter_coverage",
                  0.33096525947692146
                ],
                [
                  "test_detect_start_stop",
                  "test_merge",
                  0.6386897592122911
                ],
                [
                  "test_detect_start_stop",
                  "test_get_inter_coverage",
                  0.39601139515423545
                ],
                [
                  "test_merge",
                  "test_validate_tss",
                  0.8305142987797796
                ],
                [
                  "test_merge",
                  "test_compute_candidate_best",
                  0.8884897330895363
                ],
                [
                  "test_get_coverage",
                  "test_import_overlap",
                  0.803172439742919
                ],
                [
                  "test_get_coverage",
                  "test_check_tss",
                  0.7770544120729473
                ],
                [
                  "test_get_coverage",
                  "test_compute_candidate_best",
                  0.7498822883144285
                ],
                [
                  "test_mean_score",
                  "test_coverage_and_output",
                  0.6643680696392786
                ],
                [
                  "test_get_attribute",
                  "test_set_median",
                  0.5905892386385387
                ],
                [
                  "test_merge",
                  "test_validate_srna",
                  0.8122976833243257
                ],
                [
                  "test_print_table",
                  "test_get_best",
                  0.8099630934155259
                ],
                [
                  "test_check_tss",
                  "test_coverage_and_output",
                  0.7509336528878947
                ],
                [
                  "test_get_coverage",
                  "test_sorf_detection",
                  0.4873622415705045
                ],
                [
                  "test_compute_candidate_best",
                  "test_sorf_detection",
                  0.37957251519551394
                ],
                [
                  "test_import_overlap",
                  "test_merge",
                  0.9534143728786928
                ],
                [
                  "test_import_overlap",
                  "test_validate_tss",
                  0.8616526302124693
                ],
                [
                  "test_get_coverage",
                  "test_print_file",
                  0.7746981735993884
                ],
                [
                  "test_get_coverage",
                  "test_median_score",
                  0.7710048887281087
                ],
                [
                  "test_import_overlap",
                  "test_print_table",
                  0.8270108942103597
                ],
                [
                  "test_validate_srna",
                  "test_detect_inter_type",
                  0.3791943348182858
                ],
                [
                  "test_coverage_and_output",
                  "test_sorf_detection",
                  0.6566234047527546
                ],
                [
                  "test_get_coverage",
                  "test_coverage_and_output",
                  0.7871456665741484
                ],
                [
                  "test_print_file",
                  "test_get_best",
                  0.8161672604494314
                ],
                [
                  "test_get_coverage",
                  "test_get_inter_coverage",
                  0.40420133140563275
                ],
                [
                  "test_detect_inter_type",
                  "test_set_median",
                  0.4114026455337116
                ],
                [
                  "test_detect_rbs_site",
                  "test_coverage_and_output",
                  0.7794472639553446
                ],
                [
                  "test_get_inter_coverage",
                  "test_detect_inter_type",
                  0.5206789388644879
                ],
                [
                  "test_get_coverage",
                  "test_read_data",
                  0.4587296486141225
                ],
                [
                  "test_detect_rbs_site",
                  "test_print_file",
                  0.6723946904111878
                ],
                [
                  "test_merge",
                  "test_get_best",
                  0.8706699074298305
                ],
                [
                  "test_print_table",
                  "test_mean_score",
                  0.7291039960491383
                ],
                [
                  "test_compare_sorf_tss",
                  "test_set_median",
                  0.6868777988021173
                ],
                [
                  "test_print_table",
                  "test_compute_candidate_best",
                  0.7534335682591989
                ],
                [
                  "test_get_inter_coverage",
                  "test_mean_score",
                  0.33627562815792594
                ],
                [
                  "test_get_coverage",
                  "test_detect_rbs_site",
                  0.6302942059601976
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_validate_srna",
                  0.589412991650449
                ],
                [
                  "test_check_tss",
                  "test_median_score",
                  0.7171006969812427
                ],
                [
                  "test_get_attribute",
                  "test_validate_srna",
                  0.7423777639290378
                ],
                [
                  "test_validate_srna",
                  "test_compute_candidate_best",
                  0.8037488848755253
                ],
                [
                  "test_get_best",
                  "test_coverage_and_output",
                  0.8727619543039392
                ],
                [
                  "test_read_data",
                  "test_get_attribute",
                  0.35772737939508903
                ],
                [
                  "test_import_overlap",
                  "test_get_best",
                  0.8683849367135514
                ],
                [
                  "test_read_data",
                  "test_get_cutoff",
                  0.4713831433554362
                ],
                [
                  "test_read_data",
                  "test_assign_utr_cutoff",
                  0.4604092555161308
                ],
                [
                  "test_print_file",
                  "test_print_table",
                  0.9483199319583582
                ],
                [
                  "test_print_file",
                  "test_validate_tss",
                  0.7535422461566372
                ],
                [
                  "test_check_tss",
                  "test_sorf_detection",
                  0.4253801596560012
                ],
                [
                  "test_detect_rbs_site",
                  "test_compare_sorf_srna",
                  0.46710598826951805
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_get_best",
                  0.6960936437845474
                ],
                [
                  "test_detect_rbs_site",
                  "test_get_inter_coverage",
                  0.4203731277590032
                ],
                [
                  "test_detect_start_stop",
                  "test_mean_score",
                  0.5290564580501083
                ],
                [
                  "test_detect_utr_type",
                  "test_detect_inter_type",
                  0.7593314173593037
                ],
                [
                  "test_mean_score",
                  "test_sorf_detection",
                  0.3791967082978191
                ],
                [
                  "test_merge",
                  "test_print_table",
                  0.7800713917639928
                ],
                [
                  "test_detect_utr_type",
                  "test_set_median",
                  0.38760854559127644
                ],
                [
                  "test_compare_sorf_srna",
                  "test_detect_utr_type",
                  0.3175264481385601
                ],
                [
                  "test_detect_start_stop",
                  "test_compare_sorf_tss",
                  0.75083745885322
                ],
                [
                  "test_read_data",
                  "test_mean_score",
                  0.4227402530709188
                ],
                [
                  "test_read_data",
                  "test_compute_candidate_best",
                  0.41801928752167017
                ],
                [
                  "test_compare_sorf_tss",
                  "test_detect_inter_type",
                  0.36022881797219947
                ],
                [
                  "test_get_coverage",
                  "test_compare_sorf_srna",
                  0.6643675043159173
                ],
                [
                  "test_get_attribute",
                  "test_get_best",
                  0.7011001883202289
                ],
                [
                  "test_validate_tss",
                  "test_set_median",
                  0.598195924566089
                ],
                [
                  "test_median_score",
                  "test_get_best",
                  0.7314457574518605
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_sorf_detection",
                  0.48534351074843535
                ],
                [
                  "test_compare_sorf_tss",
                  "test_assign_utr_cutoff",
                  0.6423577224086273
                ],
                [
                  "test_get_attribute",
                  "test_print_table",
                  0.7712574711144465
                ],
                [
                  "test_detect_start_stop",
                  "test_compute_candidate_best",
                  0.6420044202048244
                ],
                [
                  "test_import_overlap",
                  "test_validate_srna",
                  0.8379886294974294
                ],
                [
                  "test_get_best",
                  "test_set_median",
                  0.720203415420109
                ],
                [
                  "test_compare_sorf_srna",
                  "test_get_best",
                  0.7569169080497326
                ],
                [
                  "test_get_attribute",
                  "test_validate_tss",
                  0.7589290750821096
                ],
                [
                  "test_detect_start_stop",
                  "test_assign_utr_cutoff",
                  0.5553287518900286
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_validate_tss",
                  0.6144208903745602
                ],
                [
                  "test_get_cutoff",
                  "test_print_table",
                  0.8285320297880991
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_print_table",
                  0.6971270753381698
                ],
                [
                  "test_get_cutoff",
                  "test_get_attribute",
                  0.7772243496238131
                ],
                [
                  "test_compare_sorf_tss",
                  "test_compute_candidate_best",
                  0.8749000638098625
                ],
                [
                  "test_detect_start_stop",
                  "test_read_data",
                  0.5033670414105182
                ],
                [
                  "test_merge",
                  "test_detect_utr_type",
                  0.3915692204483337
                ],
                [
                  "test_get_inter_coverage",
                  "test_compute_candidate_best",
                  0.3425021055522029
                ],
                [
                  "test_check_tss",
                  "test_get_inter_coverage",
                  0.37155086211801275
                ],
                [
                  "test_read_data",
                  "test_compare_sorf_tss",
                  0.46222462917091706
                ],
                [
                  "test_read_data",
                  "test_detect_utr_type",
                  0.33557802760701216
                ],
                [
                  "test_validate_tss",
                  "test_detect_inter_type",
                  0.39541811444604746
                ],
                [
                  "test_compare_sorf_srna",
                  "test_print_table",
                  0.6679725771574929
                ],
                [
                  "test_validate_tss",
                  "test_compute_candidate_best",
                  0.7779911339334564
                ],
                [
                  "test_get_cutoff",
                  "test_mean_score",
                  0.7607153547676804
                ],
                [
                  "test_compare_sorf_tss",
                  "test_print_file",
                  0.7424919552152298
                ],
                [
                  "test_get_cutoff",
                  "test_detect_utr_type",
                  0.4682300434634558
                ],
                [
                  "test_median_score",
                  "test_validate_srna",
                  0.6062271326461409
                ],
                [
                  "test_compare_sorf_srna",
                  "test_validate_tss",
                  0.6813032288940922
                ],
                [
                  "test_compare_sorf_tss",
                  "test_coverage_and_output",
                  0.7574687405995834
                ],
                [
                  "test_check_tss",
                  "test_set_median",
                  0.6546006601673252
                ],
                [
                  "test_check_tss",
                  "test_compare_sorf_srna",
                  0.7523841248624464
                ],
                [
                  "test_print_table",
                  "test_detect_inter_type",
                  0.41445491409439633
                ],
                [
                  "test_detect_utr_type",
                  "test_mean_score",
                  0.3061862178478973
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_coverage_and_output",
                  0.7080280273925758
                ],
                [
                  "test_get_cutoff",
                  "test_get_best",
                  0.8069556000560602
                ],
                [
                  "test_detect_rbs_site",
                  "test_median_score",
                  0.5957742323907845
                ],
                [
                  "test_print_file",
                  "test_detect_utr_type",
                  0.38233799884503344
                ],
                [
                  "test_get_coverage",
                  "test_compare_sorf_tss",
                  0.7432424757145526
                ],
                [
                  "test_median_score",
                  "test_validate_tss",
                  0.6231632338885582
                ],
                [
                  "test_detect_utr_type",
                  "test_median_score",
                  0.3230291412348993
                ],
                [
                  "test_get_inter_coverage",
                  "test_coverage_and_output",
                  0.43799818008260205
                ],
                [
                  "test_check_tss",
                  "test_get_best",
                  0.7744814961430487
                ],
                [
                  "test_get_inter_coverage",
                  "test_median_score",
                  0.3462455178915885
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_get_inter_coverage",
                  0.354971125812678
                ],
                [
                  "test_get_coverage",
                  "test_mean_score",
                  0.7554807620506718
                ],
                [
                  "test_read_data",
                  "test_print_table",
                  0.4426877489057796
                ],
                [
                  "test_read_data",
                  "test_merge",
                  0.42314779221219395
                ],
                [
                  "test_compare_sorf_srna",
                  "test_assign_utr_cutoff",
                  0.5523326998110484
                ],
                [
                  "test_compare_sorf_srna",
                  "test_mean_score",
                  0.6111111111111112
                ],
                [
                  "test_print_table",
                  "test_detect_utr_type",
                  0.42502643131958445
                ],
                [
                  "test_compare_sorf_tss",
                  "test_get_cutoff",
                  0.7576824482604179
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_median_score",
                  0.7571202226483269
                ],
                [
                  "test_merge",
                  "test_get_cutoff",
                  0.8156010919517322
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_print_file",
                  0.6994178757135083
                ],
                [
                  "test_compare_sorf_srna",
                  "test_detect_inter_type",
                  0.3347193406976015
                ],
                [
                  "test_get_cutoff",
                  "test_validate_srna",
                  0.7622674014978854
                ],
                [
                  "test_get_coverage",
                  "test_detect_inter_type",
                  0.3711668499589835
                ],
                [
                  "test_read_data",
                  "test_set_median",
                  0.47450598010554634
                ],
                [
                  "test_detect_rbs_site",
                  "test_set_median",
                  0.6100312271698476
                ],
                [
                  "test_print_table",
                  "test_coverage_and_output",
                  0.8326452944071604
                ],
                [
                  "test_detect_rbs_site",
                  "test_merge",
                  0.5667782260897598
                ],
                [
                  "test_detect_start_stop",
                  "test_detect_utr_type",
                  0.46130952380952384
                ],
                [
                  "test_detect_rbs_site",
                  "test_detect_inter_type",
                  0.4181338996126113
                ],
                [
                  "test_check_tss",
                  "test_compare_sorf_tss",
                  0.7667078666264164
                ],
                [
                  "test_detect_rbs_site",
                  "test_print_table",
                  0.6522605908214425
                ],
                [
                  "test_coverage_and_output",
                  "test_set_median",
                  0.717536623281477
                ],
                [
                  "test_get_attribute",
                  "test_sorf_detection",
                  0.40478659671023004
                ],
                [
                  "test_mean_score",
                  "test_get_best",
                  0.7068697958862126
                ],
                [
                  "test_import_overlap",
                  "test_detect_inter_type",
                  0.3836664309218743
                ],
                [
                  "test_detect_start_stop",
                  "test_sorf_detection",
                  0.6793570462919815
                ],
                [
                  "test_get_coverage",
                  "test_set_median",
                  0.8047060264949014
                ],
                [
                  "test_get_attribute",
                  "test_detect_utr_type",
                  0.4264014327112209
                ],
                [
                  "test_get_cutoff",
                  "test_compute_candidate_best",
                  0.7671797644058297
                ],
                [
                  "test_detect_rbs_site",
                  "test_assign_utr_cutoff",
                  0.5886712912536246
                ],
                [
                  "test_import_overlap",
                  "test_median_score",
                  0.7390081693904349
                ],
                [
                  "test_validate_srna",
                  "test_set_median",
                  0.5777315922376915
                ],
                [
                  "test_import_overlap",
                  "test_mean_score",
                  0.7151524996987096
                ],
                [
                  "test_compare_sorf_tss",
                  "test_get_inter_coverage",
                  0.37512711738034726
                ],
                [
                  "test_merge",
                  "test_assign_utr_cutoff",
                  0.6562348601216792
                ],
                [
                  "test_compare_sorf_srna",
                  "test_get_cutoff",
                  0.7100009977831684
                ],
                [
                  "test_get_coverage",
                  "test_merge",
                  0.7717677541645486
                ],
                [
                  "test_get_best",
                  "test_sorf_detection",
                  0.5210218429077005
                ],
                [
                  "test_import_overlap",
                  "test_get_inter_coverage",
                  0.33146529443846834
                ],
                [
                  "test_compare_sorf_tss",
                  "test_mean_score",
                  0.6799991383409221
                ],
                [
                  "test_get_cutoff",
                  "test_validate_tss",
                  0.7834517335541081
                ],
                [
                  "test_median_score",
                  "test_mean_score",
                  0.9608115469481467
                ],
                [
                  "test_coverage_and_output",
                  "test_detect_inter_type",
                  0.43308534500465556
                ],
                [
                  "test_check_tss",
                  "test_compute_candidate_best",
                  0.7571788679411755
                ],
                [
                  "test_detect_start_stop",
                  "test_get_attribute",
                  0.49239213063081455
                ],
                [
                  "test_detect_start_stop",
                  "test_check_tss",
                  0.5953709125003387
                ],
                [
                  "test_check_tss",
                  "test_import_overlap",
                  0.8604912238727754
                ],
                [
                  "test_check_tss",
                  "test_validate_tss",
                  0.7964779230746888
                ],
                [
                  "test_check_tss",
                  "test_validate_srna",
                  0.7784844901399388
                ],
                [
                  "test_detect_utr_type",
                  "test_validate_tss",
                  0.41912513110934563
                ],
                [
                  "test_detect_utr_type",
                  "test_validate_srna",
                  0.41264676387709787
                ],
                [
                  "test_compare_sorf_tss",
                  "test_median_score",
                  0.7025365476341163
                ],
                [
                  "test_merge",
                  "test_coverage_and_output",
                  0.7571345897485618
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_get_cutoff",
                  0.8661013775896367
                ],
                [
                  "test_print_file",
                  "test_validate_srna",
                  0.7318352424459276
                ],
                [
                  "test_merge",
                  "test_print_file",
                  0.7618934748315265
                ],
                [
                  "test_print_file",
                  "test_compute_candidate_best",
                  0.757521104413625
                ],
                [
                  "test_detect_utr_type",
                  "test_sorf_detection",
                  0.5463002989956236
                ],
                [
                  "test_mean_score",
                  "test_validate_srna",
                  0.5775851517197846
                ],
                [
                  "test_get_coverage",
                  "test_assign_utr_cutoff",
                  0.8000585029013159
                ],
                [
                  "test_median_score",
                  "test_set_median",
                  0.7612698421553628
                ],
                [
                  "test_detect_start_stop",
                  "test_compare_sorf_srna",
                  0.6253326988851234
                ],
                [
                  "test_import_overlap",
                  "test_get_cutoff",
                  0.856952598024363
                ],
                [
                  "test_print_file",
                  "test_sorf_detection",
                  0.5139916463909291
                ],
                [
                  "test_detect_utr_type",
                  "test_compute_candidate_best",
                  0.2974921890808271
                ],
                [
                  "test_get_inter_coverage",
                  "test_set_median",
                  0.43093883648407466
                ],
                [
                  "test_validate_tss",
                  "test_get_best",
                  0.7949207522514483
                ],
                [
                  "test_read_data",
                  "test_get_inter_coverage",
                  0.4167515790011016
                ],
                [
                  "test_compare_sorf_srna",
                  "test_merge",
                  0.8094048852977203
                ],
                [
                  "test_compare_sorf_srna",
                  "test_set_median",
                  0.5682593115302796
                ],
                [
                  "test_get_cutoff",
                  "test_sorf_detection",
                  0.5211732203425132
                ],
                [
                  "test_read_data",
                  "test_detect_inter_type",
                  0.3601801351125985
                ],
                [
                  "test_assign_utr_cutoff",
                  "test_set_median",
                  0.7374217583399629
                ],
                [
                  "test_mean_score",
                  "test_validate_tss",
                  0.5946893190608983
                ],
                [
                  "test_get_best",
                  "test_compute_candidate_best",
                  0.9491480860798257
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_candidate_best",
                "false"
              ],
              [
                "test_import_overlap",
                "false"
              ],
              [
                "test_get_cutoff",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_check_tss",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_coverage_and_output",
                "false"
              ],
              [
                "test_sorf_detection",
                "false"
              ],
              [
                "test_compare_sorf_tss",
                "false"
              ],
              [
                "test_set_median",
                "false"
              ],
              [
                "test_compare_sorf_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_detect_utr_type",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_merge",
                "false"
              ],
              [
                "test_get_inter_coverage",
                "false"
              ],
              [
                "test_validate_tss",
                "false"
              ],
              [
                "test_validate_srna",
                "false"
              ],
              [
                "test_assign_utr_cutoff",
                "false"
              ],
              [
                "test_detect_start_stop",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_rbs_site",
                "false"
              ],
              [
                "test_get_attribute",
                "false"
              ],
              [
                "test_detect_inter_type",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 26
      }
    ]
  },
  {
    "name": "tests_\u0026_test_transcript_SNP.py",
    "testCases": [
      {
        "name": "TestTranscripSNP",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_import_data",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_snp_detect",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_stat",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_gen_ref",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_gen_new_fasta",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_plot_bar",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_check_overlap",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_read_fasta",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_change",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_print_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_overlap_position",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_import_data",
                  "[]"
                ],
                [
                  "test_snp_detect",
                  "[]"
                ],
                [
                  "test_stat",
                  "[]"
                ],
                [
                  "test_gen_ref",
                  "[]"
                ],
                [
                  "test_gen_new_fasta",
                  "[]"
                ],
                [
                  "test_plot_bar",
                  "[]"
                ],
                [
                  "test_check_overlap",
                  "[]"
                ],
                [
                  "test_read_fasta",
                  "[]"
                ],
                [
                  "test_change",
                  "[]"
                ],
                [
                  "test_print_file",
                  "[]"
                ],
                [
                  "test_overlap_position",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_snp_detect",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_gen_ref",
                  "false"
                ],
                [
                  "test_gen_new_fasta",
                  "false"
                ],
                [
                  "test_plot_bar",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_change",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_overlap_position",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_snp_detect",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_gen_ref",
                  "false"
                ],
                [
                  "test_gen_new_fasta",
                  "false"
                ],
                [
                  "test_plot_bar",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_change",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_overlap_position",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_snp_detect",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_gen_ref",
                  "false"
                ],
                [
                  "test_gen_new_fasta",
                  "false"
                ],
                [
                  "test_plot_bar",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_change",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_overlap_position",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_snp_detect",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_gen_ref",
                  "false"
                ],
                [
                  "test_gen_new_fasta",
                  "false"
                ],
                [
                  "test_plot_bar",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_read_fasta",
                  "false"
                ],
                [
                  "test_change",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_overlap_position",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "false"
              ],
              [
                "test_snp_detect",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_gen_ref",
                "false"
              ],
              [
                "test_gen_new_fasta",
                "false"
              ],
              [
                "test_plot_bar",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_change",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_overlap_position",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "false"
              ],
              [
                "test_snp_detect",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_gen_ref",
                "false"
              ],
              [
                "test_gen_new_fasta",
                "false"
              ],
              [
                "test_plot_bar",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_change",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_overlap_position",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_import_data",
                []
              ],
              [
                "test_snp_detect",
                []
              ],
              [
                "test_stat",
                []
              ],
              [
                "test_gen_ref",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_gen_new_fasta",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_plot_bar",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_check_overlap",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_fasta",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_change",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_file",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_overlap_position",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "false"
              ],
              [
                "test_snp_detect",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_gen_ref",
                "false"
              ],
              [
                "test_gen_new_fasta",
                "false"
              ],
              [
                "test_plot_bar",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_change",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_overlap_position",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "false"
              ],
              [
                "test_snp_detect",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_gen_ref",
                "false"
              ],
              [
                "test_gen_new_fasta",
                "false"
              ],
              [
                "test_plot_bar",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_change",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_overlap_position",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_import_data",
                  "0"
                ],
                [
                  "test_snp_detect",
                  "0"
                ],
                [
                  "test_stat",
                  "0"
                ],
                [
                  "test_gen_ref",
                  "0"
                ],
                [
                  "test_gen_new_fasta",
                  "0"
                ],
                [
                  "test_plot_bar",
                  "0"
                ],
                [
                  "test_check_overlap",
                  "0"
                ],
                [
                  "test_read_fasta",
                  "0"
                ],
                [
                  "test_change",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_overlap_position",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_import_data",
                  "0"
                ],
                [
                  "test_snp_detect",
                  "0"
                ],
                [
                  "test_stat",
                  "0"
                ],
                [
                  "test_gen_ref",
                  "0"
                ],
                [
                  "test_gen_new_fasta",
                  "0"
                ],
                [
                  "test_plot_bar",
                  "0"
                ],
                [
                  "test_check_overlap",
                  "0"
                ],
                [
                  "test_read_fasta",
                  "0"
                ],
                [
                  "test_change",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_overlap_position",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "false"
              ],
              [
                "test_snp_detect",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_gen_ref",
                "false"
              ],
              [
                "test_gen_new_fasta",
                "false"
              ],
              [
                "test_plot_bar",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_change",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_overlap_position",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "false"
              ],
              [
                "test_snp_detect",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_gen_ref",
                "false"
              ],
              [
                "test_gen_new_fasta",
                "false"
              ],
              [
                "test_plot_bar",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_change",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_overlap_position",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "2"
              ],
              [
                "test_snp_detect",
                "7"
              ],
              [
                "test_stat",
                "1"
              ],
              [
                "test_gen_ref",
                "2"
              ],
              [
                "test_gen_new_fasta",
                "4"
              ],
              [
                "test_plot_bar",
                "1"
              ],
              [
                "test_check_overlap",
                "2"
              ],
              [
                "test_read_fasta",
                "1"
              ],
              [
                "test_change",
                "1"
              ],
              [
                "test_print_file",
                "3"
              ],
              [
                "test_overlap_position",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                [
                  "args",
                  "depth_file",
                  "max_quals",
                  "raw_snps",
                  "snp_file",
                  "snps",
                  "dess"
                ]
              ],
              [
                "test_snp_detect",
                [
                  "args",
                  "depth_file",
                  "out_seq",
                  "snp_file",
                  "stat_file",
                  "fasta_file",
                  "out_snp"
                ]
              ],
              [
                "test_stat",
                [
                  "args",
                  "max_quals",
                  "datas",
                  "stat_file",
                  "trans_snps"
                ]
              ],
              [
                "test_gen_ref",
                [
                  "refs",
                  "snps"
                ]
              ],
              [
                "test_gen_new_fasta",
                [
                  "seqs",
                  "out_seq",
                  "out_ref",
                  "nooverlap",
                  "conflicts"
                ]
              ],
              [
                "test_plot_bar",
                []
              ],
              [
                "test_check_overlap",
                [
                  "overlaps",
                  "snps"
                ]
              ],
              [
                "test_read_fasta",
                [
                  "seqs",
                  "fasta_file"
                ]
              ],
              [
                "test_change",
                [
                  "snp",
                  "seq"
                ]
              ],
              [
                "test_print_file",
                [
                  "mod_seq_init",
                  "out_seq",
                  "refs",
                  "values",
                  "out_ref",
                  "conflicts",
                  "mod_seqs"
                ]
              ],
              [
                "test_overlap_position",
                [
                  "nooverlap",
                  "qual_snps",
                  "conflicts"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_import_data",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_snp_detect",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_stat",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_gen_ref",
                []
              ],
              [
                "test_gen_new_fasta",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_plot_bar",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_check_overlap",
                []
              ],
              [
                "test_read_fasta",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_change",
                []
              ],
              [
                "test_print_file",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_overlap_position",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6500833689525224,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_check_overlap",
                  "test_overlap_position",
                  0.16092806768923631
                ],
                [
                  "test_import_data",
                  "test_plot_bar",
                  0.7502369618935817
                ],
                [
                  "test_stat",
                  "test_gen_new_fasta",
                  0.8808189245534178
                ],
                [
                  "test_plot_bar",
                  "test_gen_ref",
                  0.6207671945437601
                ],
                [
                  "test_read_fasta",
                  "test_print_file",
                  0.5006278271297189
                ],
                [
                  "test_check_overlap",
                  "test_gen_new_fasta",
                  0.24145864538821596
                ],
                [
                  "test_overlap_position",
                  "test_change",
                  0.9237773401651956
                ],
                [
                  "test_overlap_position",
                  "test_read_fasta",
                  0.39405945424842975
                ],
                [
                  "test_overlap_position",
                  "test_plot_bar",
                  0.6223215582210166
                ],
                [
                  "test_import_data",
                  "test_change",
                  0.8731002252324741
                ],
                [
                  "test_stat",
                  "test_plot_bar",
                  0.7617890459502581
                ],
                [
                  "test_import_data",
                  "test_gen_new_fasta",
                  0.9072233807645018
                ],
                [
                  "test_read_fasta",
                  "test_snp_detect",
                  0.5517638192120218
                ],
                [
                  "test_check_overlap",
                  "test_snp_detect",
                  0.3951828143372273
                ],
                [
                  "test_import_data",
                  "test_snp_detect",
                  0.7222629603874235
                ],
                [
                  "test_check_overlap",
                  "test_change",
                  0.22613350843332272
                ],
                [
                  "test_import_data",
                  "test_read_fasta",
                  0.5243843340586695
                ],
                [
                  "test_read_fasta",
                  "test_gen_new_fasta",
                  0.47787025869127675
                ],
                [
                  "test_check_overlap",
                  "test_stat",
                  0.31952478845632515
                ],
                [
                  "test_stat",
                  "test_print_file",
                  0.8890716833912743
                ],
                [
                  "test_plot_bar",
                  "test_read_fasta",
                  0.39567093861171393
                ],
                [
                  "test_import_data",
                  "test_overlap_position",
                  0.8764280537705788
                ],
                [
                  "test_overlap_position",
                  "test_gen_new_fasta",
                  0.9221924560026654
                ],
                [
                  "test_gen_ref",
                  "test_print_file",
                  0.89647948539843
                ],
                [
                  "test_check_overlap",
                  "test_gen_ref",
                  0.18892150280776668
                ],
                [
                  "test_gen_ref",
                  "test_gen_new_fasta",
                  0.8928274487117855
                ],
                [
                  "test_gen_ref",
                  "test_change",
                  0.9285364266755527
                ],
                [
                  "test_import_data",
                  "test_gen_ref",
                  0.8667023776092945
                ],
                [
                  "test_overlap_position",
                  "test_print_file",
                  0.9106017473719503
                ],
                [
                  "test_stat",
                  "test_change",
                  0.8337690462825182
                ],
                [
                  "test_check_overlap",
                  "test_read_fasta",
                  0.2858696731368026
                ],
                [
                  "test_print_file",
                  "test_snp_detect",
                  0.6979898067027771
                ],
                [
                  "test_change",
                  "test_snp_detect",
                  0.4997978190182539
                ],
                [
                  "test_overlap_position",
                  "test_stat",
                  0.8326554462212807
                ],
                [
                  "test_import_data",
                  "test_stat",
                  0.9312105601539676
                ],
                [
                  "test_plot_bar",
                  "test_snp_detect",
                  0.8155256543038714
                ],
                [
                  "test_change",
                  "test_gen_new_fasta",
                  0.8628236257852764
                ],
                [
                  "test_print_file",
                  "test_gen_new_fasta",
                  0.9785018174943875
                ],
                [
                  "test_read_fasta",
                  "test_change",
                  0.41936185055644687
                ],
                [
                  "test_gen_new_fasta",
                  "test_snp_detect",
                  0.6946658744424863
                ],
                [
                  "test_stat",
                  "test_gen_ref",
                  0.8339604094937899
                ],
                [
                  "test_stat",
                  "test_read_fasta",
                  0.5455747955762564
                ],
                [
                  "test_plot_bar",
                  "test_change",
                  0.6370460758082596
                ],
                [
                  "test_gen_ref",
                  "test_snp_detect",
                  0.4948801171618337
                ],
                [
                  "test_overlap_position",
                  "test_snp_detect",
                  0.4702760596364815
                ],
                [
                  "test_overlap_position",
                  "test_gen_ref",
                  0.9491327041019185
                ],
                [
                  "test_import_data",
                  "test_print_file",
                  0.9195597731895431
                ],
                [
                  "test_check_overlap",
                  "test_print_file",
                  0.2486509080304509
                ],
                [
                  "test_import_data",
                  "test_check_overlap",
                  0.29201838305614103
                ],
                [
                  "test_change",
                  "test_print_file",
                  0.8815302330241144
                ],
                [
                  "test_plot_bar",
                  "test_gen_new_fasta",
                  0.7682384085452676
                ],
                [
                  "test_stat",
                  "test_snp_detect",
                  0.7598180629738197
                ],
                [
                  "test_read_fasta",
                  "test_gen_ref",
                  0.4016628631845503
                ],
                [
                  "test_check_overlap",
                  "test_plot_bar",
                  0.3098009981853811
                ],
                [
                  "test_plot_bar",
                  "test_print_file",
                  0.7686010966157706
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_import_data",
                "false"
              ],
              [
                "test_snp_detect",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_gen_ref",
                "false"
              ],
              [
                "test_gen_new_fasta",
                "false"
              ],
              [
                "test_plot_bar",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_read_fasta",
                "false"
              ],
              [
                "test_change",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_overlap_position",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "tests_\u0026_test_sORF_intergenic.py",
    "testCases": [
      {
        "name": "TestsORFIntergenic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compare_tran_cds",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_get_intergenic",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_type",
                  "[PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compare_tran_cds",
                  "[]"
                ],
                [
                  "test_get_intergenic",
                  "[]"
                ],
                [
                  "test_get_type",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_get_intergenic",
                  "false"
                ],
                [
                  "test_get_type",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_get_intergenic",
                  "false"
                ],
                [
                  "test_get_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_get_intergenic",
                  "false"
                ],
                [
                  "test_get_type",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compare_tran_cds",
                  "false"
                ],
                [
                  "test_get_intergenic",
                  "false"
                ],
                [
                  "test_get_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_get_intergenic",
                "false"
              ],
              [
                "test_get_type",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_get_intergenic",
                "false"
              ],
              [
                "test_get_type",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_tran_cds",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_intergenic",
                []
              ],
              [
                "test_get_type",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_get_intergenic",
                "false"
              ],
              [
                "test_get_type",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_get_intergenic",
                "false"
              ],
              [
                "test_get_type",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compare_tran_cds",
                  "0"
                ],
                [
                  "test_get_intergenic",
                  "0"
                ],
                [
                  "test_get_type",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compare_tran_cds",
                  "0"
                ],
                [
                  "test_get_intergenic",
                  "0"
                ],
                [
                  "test_get_type",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_get_intergenic",
                "false"
              ],
              [
                "test_get_type",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_get_intergenic",
                "false"
              ],
              [
                "test_get_type",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "1"
              ],
              [
                "test_get_intergenic",
                "1"
              ],
              [
                "test_get_type",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                [
                  "inters"
                ]
              ],
              [
                "test_get_intergenic",
                [
                  "tran_file",
                  "out_file",
                  "datas",
                  "gff_file"
                ]
              ],
              [
                "test_get_type",
                [
                  "inter"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_intergenic",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_type",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.442660483598043,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_type",
                  "test_get_intergenic",
                  0.330747271346267
                ],
                [
                  "test_get_type",
                  "test_compare_tran_cds",
                  0.6839357130643159
                ],
                [
                  "test_compare_tran_cds",
                  "test_get_intergenic",
                  0.3132984663835461
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_tran_cds",
                "false"
              ],
              [
                "test_get_intergenic",
                "false"
              ],
              [
                "test_get_type",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_sRNA_intergenic.py",
    "testCases": [
      {
        "name": "TestsRNAIntergenic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_attribute_string",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_coverage_pos",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_exchange_to_pro",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_proper_tss",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compare_ta_cds",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_best",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_include_tss",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_srna_condition",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_pro",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_wig_pos",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_print_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_read_tss",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_read_data",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compare_ta_tss",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_intergenic_srna",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_differential_cover",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_longer",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_tss_type",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_attribute_string",
                  "[]"
                ],
                [
                  "test_check_coverage_pos",
                  "[]"
                ],
                [
                  "test_exchange_to_pro",
                  "[]"
                ],
                [
                  "test_get_proper_tss",
                  "[]"
                ],
                [
                  "test_compare_ta_cds",
                  "[]"
                ],
                [
                  "test_get_best",
                  "[]"
                ],
                [
                  "test_detect_include_tss",
                  "[]"
                ],
                [
                  "test_check_srna_condition",
                  "[]"
                ],
                [
                  "test_check_pro",
                  "[]"
                ],
                [
                  "test_detect_wig_pos",
                  "[]"
                ],
                [
                  "test_print_file",
                  "[]"
                ],
                [
                  "test_read_tss",
                  "[]"
                ],
                [
                  "test_read_data",
                  "[]"
                ],
                [
                  "test_compare_ta_tss",
                  "[]"
                ],
                [
                  "test_intergenic_srna",
                  "[]"
                ],
                [
                  "test_get_differential_cover",
                  "[]"
                ],
                [
                  "test_detect_longer",
                  "[]"
                ],
                [
                  "test_get_tss_type",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_attribute_string",
                  "false"
                ],
                [
                  "test_check_coverage_pos",
                  "false"
                ],
                [
                  "test_exchange_to_pro",
                  "false"
                ],
                [
                  "test_get_proper_tss",
                  "false"
                ],
                [
                  "test_compare_ta_cds",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_detect_include_tss",
                  "false"
                ],
                [
                  "test_check_srna_condition",
                  "false"
                ],
                [
                  "test_check_pro",
                  "false"
                ],
                [
                  "test_detect_wig_pos",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_read_tss",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_compare_ta_tss",
                  "false"
                ],
                [
                  "test_intergenic_srna",
                  "false"
                ],
                [
                  "test_get_differential_cover",
                  "false"
                ],
                [
                  "test_detect_longer",
                  "false"
                ],
                [
                  "test_get_tss_type",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_attribute_string",
                  "false"
                ],
                [
                  "test_check_coverage_pos",
                  "false"
                ],
                [
                  "test_exchange_to_pro",
                  "false"
                ],
                [
                  "test_get_proper_tss",
                  "false"
                ],
                [
                  "test_compare_ta_cds",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_detect_include_tss",
                  "false"
                ],
                [
                  "test_check_srna_condition",
                  "false"
                ],
                [
                  "test_check_pro",
                  "false"
                ],
                [
                  "test_detect_wig_pos",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_read_tss",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_compare_ta_tss",
                  "false"
                ],
                [
                  "test_intergenic_srna",
                  "false"
                ],
                [
                  "test_get_differential_cover",
                  "false"
                ],
                [
                  "test_detect_longer",
                  "false"
                ],
                [
                  "test_get_tss_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_attribute_string",
                  "false"
                ],
                [
                  "test_check_coverage_pos",
                  "false"
                ],
                [
                  "test_exchange_to_pro",
                  "false"
                ],
                [
                  "test_get_proper_tss",
                  "false"
                ],
                [
                  "test_compare_ta_cds",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_detect_include_tss",
                  "false"
                ],
                [
                  "test_check_srna_condition",
                  "false"
                ],
                [
                  "test_check_pro",
                  "false"
                ],
                [
                  "test_detect_wig_pos",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_read_tss",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_compare_ta_tss",
                  "false"
                ],
                [
                  "test_intergenic_srna",
                  "false"
                ],
                [
                  "test_get_differential_cover",
                  "false"
                ],
                [
                  "test_detect_longer",
                  "false"
                ],
                [
                  "test_get_tss_type",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_attribute_string",
                  "false"
                ],
                [
                  "test_check_coverage_pos",
                  "false"
                ],
                [
                  "test_exchange_to_pro",
                  "false"
                ],
                [
                  "test_get_proper_tss",
                  "false"
                ],
                [
                  "test_compare_ta_cds",
                  "false"
                ],
                [
                  "test_get_best",
                  "false"
                ],
                [
                  "test_detect_include_tss",
                  "false"
                ],
                [
                  "test_check_srna_condition",
                  "false"
                ],
                [
                  "test_check_pro",
                  "false"
                ],
                [
                  "test_detect_wig_pos",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_read_tss",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_compare_ta_tss",
                  "false"
                ],
                [
                  "test_intergenic_srna",
                  "false"
                ],
                [
                  "test_get_differential_cover",
                  "false"
                ],
                [
                  "test_detect_longer",
                  "false"
                ],
                [
                  "test_get_tss_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                "false"
              ],
              [
                "test_check_coverage_pos",
                "false"
              ],
              [
                "test_exchange_to_pro",
                "false"
              ],
              [
                "test_get_proper_tss",
                "false"
              ],
              [
                "test_compare_ta_cds",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_detect_include_tss",
                "false"
              ],
              [
                "test_check_srna_condition",
                "false"
              ],
              [
                "test_check_pro",
                "false"
              ],
              [
                "test_detect_wig_pos",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_read_tss",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_compare_ta_tss",
                "false"
              ],
              [
                "test_intergenic_srna",
                "false"
              ],
              [
                "test_get_differential_cover",
                "false"
              ],
              [
                "test_detect_longer",
                "false"
              ],
              [
                "test_get_tss_type",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                "false"
              ],
              [
                "test_check_coverage_pos",
                "false"
              ],
              [
                "test_exchange_to_pro",
                "false"
              ],
              [
                "test_get_proper_tss",
                "false"
              ],
              [
                "test_compare_ta_cds",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_detect_include_tss",
                "false"
              ],
              [
                "test_check_srna_condition",
                "false"
              ],
              [
                "test_check_pro",
                "false"
              ],
              [
                "test_detect_wig_pos",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_read_tss",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_compare_ta_tss",
                "false"
              ],
              [
                "test_intergenic_srna",
                "false"
              ],
              [
                "test_get_differential_cover",
                "false"
              ],
              [
                "test_detect_longer",
                "false"
              ],
              [
                "test_get_tss_type",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_attribute_string",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.wig_folder",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_coverage_pos",
                [
                  "self.mock_args",
                  "self.wig_folder",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_exchange_to_pro",
                [
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_proper_tss",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.wig_folder"
                ]
              ],
              [
                "test_compare_ta_cds",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_best",
                [
                  "self.mock",
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_include_tss",
                [
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_srna_condition",
                [
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_pro",
                [
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_wig_pos",
                [
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_file",
                [
                  "self.mock",
                  "self.wig_folder",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_tss",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.wig_folder"
                ]
              ],
              [
                "test_read_data",
                [
                  "self.mock",
                  "self.wig_folder"
                ]
              ],
              [
                "test_compare_ta_tss",
                [
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_intergenic_srna",
                []
              ],
              [
                "test_get_differential_cover",
                [
                  "self.mock",
                  "self.wig_folder",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_longer",
                [
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_tss_type",
                [
                  "self.mock_args",
                  "self.wig_folder",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                "false"
              ],
              [
                "test_check_coverage_pos",
                "false"
              ],
              [
                "test_exchange_to_pro",
                "false"
              ],
              [
                "test_get_proper_tss",
                "false"
              ],
              [
                "test_compare_ta_cds",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_detect_include_tss",
                "false"
              ],
              [
                "test_check_srna_condition",
                "false"
              ],
              [
                "test_check_pro",
                "false"
              ],
              [
                "test_detect_wig_pos",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_read_tss",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_compare_ta_tss",
                "false"
              ],
              [
                "test_intergenic_srna",
                "false"
              ],
              [
                "test_get_differential_cover",
                "false"
              ],
              [
                "test_detect_longer",
                "false"
              ],
              [
                "test_get_tss_type",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_attribute_string",
                "false"
              ],
              [
                "test_check_coverage_pos",
                "false"
              ],
              [
                "test_exchange_to_pro",
                "false"
              ],
              [
                "test_get_proper_tss",
                "true"
              ],
              [
                "test_compare_ta_cds",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_detect_include_tss",
                "false"
              ],
              [
                "test_check_srna_condition",
                "false"
              ],
              [
                "test_check_pro",
                "true"
              ],
              [
                "test_detect_wig_pos",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_read_tss",
                "true"
              ],
              [
                "test_read_data",
                "true"
              ],
              [
                "test_compare_ta_tss",
                "false"
              ],
              [
                "test_intergenic_srna",
                "false"
              ],
              [
                "test_get_differential_cover",
                "false"
              ],
              [
                "test_detect_longer",
                "false"
              ],
              [
                "test_get_tss_type",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_attribute_string",
                  "0"
                ],
                [
                  "test_check_coverage_pos",
                  "0"
                ],
                [
                  "test_exchange_to_pro",
                  "0"
                ],
                [
                  "test_get_proper_tss",
                  "0"
                ],
                [
                  "test_compare_ta_cds",
                  "0"
                ],
                [
                  "test_get_best",
                  "0"
                ],
                [
                  "test_detect_include_tss",
                  "0"
                ],
                [
                  "test_check_srna_condition",
                  "0"
                ],
                [
                  "test_check_pro",
                  "0"
                ],
                [
                  "test_detect_wig_pos",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_read_tss",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_compare_ta_tss",
                  "0"
                ],
                [
                  "test_intergenic_srna",
                  "0"
                ],
                [
                  "test_get_differential_cover",
                  "0"
                ],
                [
                  "test_detect_longer",
                  "0"
                ],
                [
                  "test_get_tss_type",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_attribute_string",
                  "0"
                ],
                [
                  "test_check_coverage_pos",
                  "0"
                ],
                [
                  "test_exchange_to_pro",
                  "0"
                ],
                [
                  "test_get_proper_tss",
                  "0"
                ],
                [
                  "test_compare_ta_cds",
                  "0"
                ],
                [
                  "test_get_best",
                  "0"
                ],
                [
                  "test_detect_include_tss",
                  "0"
                ],
                [
                  "test_check_srna_condition",
                  "0"
                ],
                [
                  "test_check_pro",
                  "0"
                ],
                [
                  "test_detect_wig_pos",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_read_tss",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_compare_ta_tss",
                  "0"
                ],
                [
                  "test_intergenic_srna",
                  "0"
                ],
                [
                  "test_get_differential_cover",
                  "0"
                ],
                [
                  "test_detect_longer",
                  "0"
                ],
                [
                  "test_get_tss_type",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                "false"
              ],
              [
                "test_check_coverage_pos",
                "false"
              ],
              [
                "test_exchange_to_pro",
                "false"
              ],
              [
                "test_get_proper_tss",
                "false"
              ],
              [
                "test_compare_ta_cds",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_detect_include_tss",
                "false"
              ],
              [
                "test_check_srna_condition",
                "false"
              ],
              [
                "test_check_pro",
                "false"
              ],
              [
                "test_detect_wig_pos",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_read_tss",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_compare_ta_tss",
                "false"
              ],
              [
                "test_intergenic_srna",
                "false"
              ],
              [
                "test_get_differential_cover",
                "false"
              ],
              [
                "test_detect_longer",
                "false"
              ],
              [
                "test_get_tss_type",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                "false"
              ],
              [
                "test_check_coverage_pos",
                "false"
              ],
              [
                "test_exchange_to_pro",
                "false"
              ],
              [
                "test_get_proper_tss",
                "false"
              ],
              [
                "test_compare_ta_cds",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_detect_include_tss",
                "false"
              ],
              [
                "test_check_srna_condition",
                "false"
              ],
              [
                "test_check_pro",
                "false"
              ],
              [
                "test_detect_wig_pos",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_read_tss",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_compare_ta_tss",
                "false"
              ],
              [
                "test_intergenic_srna",
                "false"
              ],
              [
                "test_get_differential_cover",
                "false"
              ],
              [
                "test_detect_longer",
                "false"
              ],
              [
                "test_get_tss_type",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                "1"
              ],
              [
                "test_check_coverage_pos",
                "2"
              ],
              [
                "test_exchange_to_pro",
                "3"
              ],
              [
                "test_get_proper_tss",
                "1"
              ],
              [
                "test_compare_ta_cds",
                "1"
              ],
              [
                "test_get_best",
                "1"
              ],
              [
                "test_detect_include_tss",
                "2"
              ],
              [
                "test_check_srna_condition",
                "2"
              ],
              [
                "test_check_pro",
                "3"
              ],
              [
                "test_detect_wig_pos",
                "2"
              ],
              [
                "test_print_file",
                "2"
              ],
              [
                "test_read_tss",
                "1"
              ],
              [
                "test_read_data",
                "4"
              ],
              [
                "test_compare_ta_tss",
                "2"
              ],
              [
                "test_intergenic_srna",
                "2"
              ],
              [
                "test_get_differential_cover",
                "2"
              ],
              [
                "test_detect_longer",
                "2"
              ],
              [
                "test_get_tss_type",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                [
                  "data",
                  "srna_datas"
                ]
              ],
              [
                "test_check_coverage_pos",
                [
                  "cover",
                  "cover_sets",
                  "checks",
                  "detect",
                  "tmps",
                  "poss"
                ]
              ],
              [
                "test_exchange_to_pro",
                [
                  "output",
                  "args",
                  "tas",
                  "out_table",
                  "detect",
                  "srna_datas",
                  "pro",
                  "nums"
                ]
              ],
              [
                "test_get_proper_tss",
                [
                  "coverage",
                  "tsss",
                  "num_tss",
                  "tss_file"
                ]
              ],
              [
                "test_compare_ta_cds",
                [
                  "tas",
                  "detects",
                  "gffs"
                ]
              ],
              [
                "test_get_best",
                [
                  "args",
                  "datas"
                ]
              ],
              [
                "test_detect_include_tss",
                [
                  "output",
                  "coverage",
                  "args",
                  "tas",
                  "out_table",
                  "detects",
                  "nums"
                ]
              ],
              [
                "test_check_srna_condition",
                [
                  "output",
                  "coverage",
                  "args",
                  "notex",
                  "tas",
                  "out_table",
                  "detects",
                  "nums"
                ]
              ],
              [
                "test_check_pro",
                [
                  "args",
                  "tas",
                  "pro_pos",
                  "texs",
                  "new_srna_datas",
                  "srna_datas",
                  "detect_pro"
                ]
              ],
              [
                "test_detect_wig_pos",
                [
                  "output",
                  "args",
                  "tas",
                  "out_table",
                  "nums"
                ]
              ],
              [
                "test_print_file",
                [
                  "output",
                  "args",
                  "string",
                  "out_table",
                  "srna_datas",
                  "nums"
                ]
              ],
              [
                "test_read_tss",
                [
                  "tsss",
                  "num_tss",
                  "tss_file"
                ]
              ],
              [
                "test_read_data",
                [
                  "pro_file",
                  "args",
                  "pros",
                  "tran_file",
                  "genes",
                  "tas",
                  "gff_file",
                  "nums",
                  "cdss",
                  "ncs"
                ]
              ],
              [
                "test_compare_ta_tss",
                [
                  "output",
                  "args",
                  "tas",
                  "out_table",
                  "tsss",
                  "detects",
                  "nums"
                ]
              ],
              [
                "test_intergenic_srna",
                [
                  "pro_file",
                  "coverage",
                  "args",
                  "wig_r_file",
                  "tran_file",
                  "wig_f_file",
                  "gff_file",
                  "tss_file",
                  "output_file",
                  "output_table"
                ]
              ],
              [
                "test_get_differential_cover",
                [
                  "cover",
                  "args",
                  "cover_sets",
                  "checks",
                  "num",
                  "poss"
                ]
              ],
              [
                "test_detect_longer",
                [
                  "output",
                  "coverage",
                  "args",
                  "tas",
                  "out_table",
                  "detects",
                  "nums"
                ]
              ],
              [
                "test_get_tss_type",
                [
                  "coverage",
                  "cover"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_get_attribute_string",
                []
              ],
              [
                "test_check_coverage_pos",
                [
                  "self.mock"
                ]
              ],
              [
                "test_exchange_to_pro",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_get_proper_tss",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_ta_cds",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_best",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_detect_include_tss",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_check_srna_condition",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_check_pro",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_detect_wig_pos",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_print_file",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_read_tss",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_data",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_ta_tss",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_intergenic_srna",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.wig_folder",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_differential_cover",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_detect_longer",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_get_tss_type",
                [
                  "self.mock",
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6870311805278665,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_read_data",
                  "test_print_file",
                  0.5310710210013955
                ],
                [
                  "test_compare_ta_cds",
                  "test_get_tss_type",
                  0.391693119134541
                ],
                [
                  "test_read_tss",
                  "test_compare_ta_cds",
                  0.2954684201426394
                ],
                [
                  "test_print_file",
                  "test_detect_longer",
                  0.8200832334278826
                ],
                [
                  "test_read_tss",
                  "test_get_best",
                  0.2849852233715056
                ],
                [
                  "test_read_data",
                  "test_intergenic_srna",
                  0.7913736856588689
                ],
                [
                  "test_check_coverage_pos",
                  "test_get_proper_tss",
                  0.7649886438635125
                ],
                [
                  "test_compare_ta_cds",
                  "test_intergenic_srna",
                  0.42693637387341304
                ],
                [
                  "test_get_best",
                  "test_exchange_to_pro",
                  0.9024725791700204
                ],
                [
                  "test_get_best",
                  "test_detect_wig_pos",
                  0.840194096889629
                ],
                [
                  "test_get_differential_cover",
                  "test_detect_longer",
                  0.844618951652711
                ],
                [
                  "test_print_file",
                  "test_check_coverage_pos",
                  0.8101182299327265
                ],
                [
                  "test_exchange_to_pro",
                  "test_detect_longer",
                  0.9175909595377023
                ],
                [
                  "test_get_best",
                  "test_check_srna_condition",
                  0.8370389785570361
                ],
                [
                  "test_compare_ta_cds",
                  "test_detect_wig_pos",
                  0.5134942101473738
                ],
                [
                  "test_get_attribute_string",
                  "test_get_proper_tss",
                  0.6235566391982599
                ],
                [
                  "test_compare_ta_tss",
                  "test_get_attribute_string",
                  0.6752460434918053
                ],
                [
                  "test_read_data",
                  "test_check_pro",
                  0.6264931131335083
                ],
                [
                  "test_detect_include_tss",
                  "test_check_srna_condition",
                  0.9824311777185313
                ],
                [
                  "test_check_coverage_pos",
                  "test_get_best",
                  0.8596946238964467
                ],
                [
                  "test_read_data",
                  "test_compare_ta_tss",
                  0.6153034518609238
                ],
                [
                  "test_compare_ta_cds",
                  "test_check_pro",
                  0.5233011534233454
                ],
                [
                  "test_get_best",
                  "test_get_tss_type",
                  0.8162256611799668
                ],
                [
                  "test_print_file",
                  "test_intergenic_srna",
                  0.47079151991713536
                ],
                [
                  "test_read_data",
                  "test_get_tss_type",
                  0.5294705891509761
                ],
                [
                  "test_compare_ta_tss",
                  "test_get_proper_tss",
                  0.7133131061750493
                ],
                [
                  "test_print_file",
                  "test_get_best",
                  0.8076791943088707
                ],
                [
                  "test_read_data",
                  "test_detect_longer",
                  0.6215272142712421
                ],
                [
                  "test_detect_include_tss",
                  "test_exchange_to_pro",
                  0.9059030788118997
                ],
                [
                  "test_print_file",
                  "test_check_pro",
                  0.8228516111002001
                ],
                [
                  "test_read_data",
                  "test_check_coverage_pos",
                  0.5417583836552791
                ],
                [
                  "test_read_data",
                  "test_exchange_to_pro",
                  0.6211868189643531
                ],
                [
                  "test_check_coverage_pos",
                  "test_get_attribute_string",
                  0.6979762263885845
                ],
                [
                  "test_read_tss",
                  "test_detect_longer",
                  0.37392190817044463
                ],
                [
                  "test_read_data",
                  "test_read_tss",
                  0.6348655681306281
                ],
                [
                  "test_read_data",
                  "test_detect_include_tss",
                  0.6158779927992386
                ],
                [
                  "test_get_best",
                  "test_intergenic_srna",
                  0.45500109912698133
                ],
                [
                  "test_compare_ta_cds",
                  "test_detect_longer",
                  0.5473425903713292
                ],
                [
                  "test_get_differential_cover",
                  "test_get_tss_type",
                  0.814081276769414
                ],
                [
                  "test_get_differential_cover",
                  "test_intergenic_srna",
                  0.48581988011036087
                ],
                [
                  "test_detect_longer",
                  "test_get_proper_tss",
                  0.7078771575436417
                ],
                [
                  "test_read_tss",
                  "test_check_coverage_pos",
                  0.2555578497396351
                ],
                [
                  "test_print_file",
                  "test_get_tss_type",
                  0.7603928295515775
                ],
                [
                  "test_detect_include_tss",
                  "test_get_best",
                  0.8123731399764154
                ],
                [
                  "test_get_attribute_string",
                  "test_check_pro",
                  0.7114636240381996
                ],
                [
                  "test_check_pro",
                  "test_detect_longer",
                  0.9092899134451609
                ],
                [
                  "test_get_best",
                  "test_detect_longer",
                  0.813718225238728
                ],
                [
                  "test_compare_ta_tss",
                  "test_get_differential_cover",
                  0.8477934761432872
                ],
                [
                  "test_detect_wig_pos",
                  "test_check_srna_condition",
                  0.9510343017244887
                ],
                [
                  "test_compare_ta_tss",
                  "test_get_tss_type",
                  0.7648993643347636
                ],
                [
                  "test_get_differential_cover",
                  "test_check_pro",
                  0.8678132736602908
                ],
                [
                  "test_get_attribute_string",
                  "test_intergenic_srna",
                  0.3130189500855712
                ],
                [
                  "test_read_tss",
                  "test_get_attribute_string",
                  0.25531389540169014
                ],
                [
                  "test_compare_ta_tss",
                  "test_detect_longer",
                  0.9793253479658185
                ],
                [
                  "test_detect_include_tss",
                  "test_get_attribute_string",
                  0.6557496651953776
                ],
                [
                  "test_check_coverage_pos",
                  "test_exchange_to_pro",
                  0.8829238376468721
                ],
                [
                  "test_check_coverage_pos",
                  "test_check_srna_condition",
                  0.825145842448011
                ],
                [
                  "test_compare_ta_tss",
                  "test_print_file",
                  0.8386694223804456
                ],
                [
                  "test_exchange_to_pro",
                  "test_check_srna_condition",
                  0.9387941225715206
                ],
                [
                  "test_exchange_to_pro",
                  "test_detect_wig_pos",
                  0.935430435968271
                ],
                [
                  "test_compare_ta_tss",
                  "test_intergenic_srna",
                  0.6577682635697264
                ],
                [
                  "test_compare_ta_cds",
                  "test_print_file",
                  0.39007802340780273
                ],
                [
                  "test_get_attribute_string",
                  "test_detect_longer",
                  0.6608275025555193
                ],
                [
                  "test_detect_longer",
                  "test_check_srna_condition",
                  0.990289550870472
                ],
                [
                  "test_exchange_to_pro",
                  "test_get_proper_tss",
                  0.7530131650751419
                ],
                [
                  "test_read_tss",
                  "test_detect_include_tss",
                  0.3604779935082473
                ],
                [
                  "test_compare_ta_tss",
                  "test_check_pro",
                  0.9101638066867758
                ],
                [
                  "test_detect_wig_pos",
                  "test_get_proper_tss",
                  0.7111168510592638
                ],
                [
                  "test_compare_ta_tss",
                  "test_check_coverage_pos",
                  0.7986919628145773
                ],
                [
                  "test_check_coverage_pos",
                  "test_get_tss_type",
                  0.8380469593027852
                ],
                [
                  "test_get_proper_tss",
                  "test_check_srna_condition",
                  0.7312445424701352
                ],
                [
                  "test_get_tss_type",
                  "test_detect_longer",
                  0.7700727281653246
                ],
                [
                  "test_get_attribute_string",
                  "test_detect_wig_pos",
                  0.7455777916396407
                ],
                [
                  "test_compare_ta_cds",
                  "test_get_attribute_string",
                  0.3188935899216566
                ],
                [
                  "test_get_differential_cover",
                  "test_check_srna_condition",
                  0.8562838118166309
                ],
                [
                  "test_check_coverage_pos",
                  "test_detect_wig_pos",
                  0.808273477586644
                ],
                [
                  "test_detect_include_tss",
                  "test_check_pro",
                  0.8949274141176928
                ],
                [
                  "test_read_tss",
                  "test_check_srna_condition",
                  0.3497784223974534
                ],
                [
                  "test_detect_include_tss",
                  "test_check_coverage_pos",
                  0.7864150993148615
                ],
                [
                  "test_read_data",
                  "test_get_attribute_string",
                  0.42463014413501166
                ],
                [
                  "test_get_attribute_string",
                  "test_get_tss_type",
                  0.7076923076923077
                ],
                [
                  "test_read_data",
                  "test_get_proper_tss",
                  0.6695623173424836
                ],
                [
                  "test_read_tss",
                  "test_detect_wig_pos",
                  0.3561268014363686
                ],
                [
                  "test_check_pro",
                  "test_exchange_to_pro",
                  0.9668632882645766
                ],
                [
                  "test_compare_ta_cds",
                  "test_get_proper_tss",
                  0.36849017228704456
                ],
                [
                  "test_check_coverage_pos",
                  "test_intergenic_srna",
                  0.4445788665061843
                ],
                [
                  "test_get_differential_cover",
                  "test_exchange_to_pro",
                  0.8902400494711554
                ],
                [
                  "test_get_best",
                  "test_get_attribute_string",
                  0.7235646146917267
                ],
                [
                  "test_read_tss",
                  "test_get_tss_type",
                  0.32137413407205756
                ],
                [
                  "test_check_coverage_pos",
                  "test_check_pro",
                  0.8390113974938713
                ],
                [
                  "test_detect_include_tss",
                  "test_intergenic_srna",
                  0.6793036372542228
                ],
                [
                  "test_get_tss_type",
                  "test_intergenic_srna",
                  0.4240589828597453
                ],
                [
                  "test_check_pro",
                  "test_intergenic_srna",
                  0.5869569100850406
                ],
                [
                  "test_compare_ta_cds",
                  "test_get_differential_cover",
                  0.4527635409532918
                ],
                [
                  "test_get_differential_cover",
                  "test_detect_wig_pos",
                  0.8516407445723431
                ],
                [
                  "test_print_file",
                  "test_get_attribute_string",
                  0.7670410728700613
                ],
                [
                  "test_read_data",
                  "test_get_best",
                  0.563734375176007
                ],
                [
                  "test_read_tss",
                  "test_compare_ta_tss",
                  0.3582714764230386
                ],
                [
                  "test_read_tss",
                  "test_print_file",
                  0.304662018899833
                ],
                [
                  "test_check_pro",
                  "test_get_tss_type",
                  0.7921993481385201
                ],
                [
                  "test_detect_include_tss",
                  "test_detect_longer",
                  0.9875576924952761
                ],
                [
                  "test_read_tss",
                  "test_exchange_to_pro",
                  0.32387058833661186
                ],
                [
                  "test_get_differential_cover",
                  "test_get_proper_tss",
                  0.7085967410092424
                ],
                [
                  "test_print_file",
                  "test_detect_wig_pos",
                  0.9043936932724445
                ],
                [
                  "test_get_tss_type",
                  "test_detect_wig_pos",
                  0.7763521094934345
                ],
                [
                  "test_compare_ta_tss",
                  "test_exchange_to_pro",
                  0.9244279789683559
                ],
                [
                  "test_detect_include_tss",
                  "test_get_differential_cover",
                  0.8404267482054056
                ],
                [
                  "test_get_proper_tss",
                  "test_intergenic_srna",
                  0.5443693835239205
                ],
                [
                  "test_get_differential_cover",
                  "test_get_attribute_string",
                  0.71213091126745
                ],
                [
                  "test_read_tss",
                  "test_check_pro",
                  0.3358029900069784
                ],
                [
                  "test_detect_include_tss",
                  "test_detect_wig_pos",
                  0.9325737050154727
                ],
                [
                  "test_compare_ta_tss",
                  "test_get_best",
                  0.831475463856818
                ],
                [
                  "test_check_coverage_pos",
                  "test_detect_longer",
                  0.7872171025553063
                ],
                [
                  "test_get_best",
                  "test_check_pro",
                  0.8659206025008476
                ],
                [
                  "test_exchange_to_pro",
                  "test_get_tss_type",
                  0.82387819190661
                ],
                [
                  "test_exchange_to_pro",
                  "test_intergenic_srna",
                  0.5686330214010727
                ],
                [
                  "test_print_file",
                  "test_get_differential_cover",
                  0.7864396956906379
                ],
                [
                  "test_compare_ta_cds",
                  "test_check_srna_condition",
                  0.5310963445879352
                ],
                [
                  "test_detect_include_tss",
                  "test_get_tss_type",
                  0.7677846282368551
                ],
                [
                  "test_read_data",
                  "test_compare_ta_cds",
                  0.4121535960744857
                ],
                [
                  "test_read_tss",
                  "test_intergenic_srna",
                  0.5546263376312071
                ],
                [
                  "test_print_file",
                  "test_exchange_to_pro",
                  0.8743352908407206
                ],
                [
                  "test_print_file",
                  "test_detect_include_tss",
                  0.814771706657436
                ],
                [
                  "test_detect_wig_pos",
                  "test_detect_longer",
                  0.9466100367732393
                ],
                [
                  "test_compare_ta_tss",
                  "test_detect_wig_pos",
                  0.9499582838333915
                ],
                [
                  "test_read_tss",
                  "test_get_proper_tss",
                  0.6408908441438455
                ],
                [
                  "test_detect_include_tss",
                  "test_get_proper_tss",
                  0.7129369746336435
                ],
                [
                  "test_read_data",
                  "test_check_srna_condition",
                  0.6240506004111341
                ],
                [
                  "test_detect_longer",
                  "test_intergenic_srna",
                  0.6927209417491653
                ],
                [
                  "test_compare_ta_tss",
                  "test_check_srna_condition",
                  0.9792141567030893
                ],
                [
                  "test_compare_ta_cds",
                  "test_detect_include_tss",
                  0.5432003025141593
                ],
                [
                  "test_check_pro",
                  "test_get_proper_tss",
                  0.7151565691281535
                ],
                [
                  "test_read_data",
                  "test_detect_wig_pos",
                  0.6010879930165482
                ],
                [
                  "test_get_differential_cover",
                  "test_get_best",
                  0.8715817411223118
                ],
                [
                  "test_print_file",
                  "test_check_srna_condition",
                  0.8429754489479471
                ],
                [
                  "test_check_pro",
                  "test_check_srna_condition",
                  0.9267602546891989
                ],
                [
                  "test_get_tss_type",
                  "test_check_srna_condition",
                  0.7942840834953868
                ],
                [
                  "test_compare_ta_cds",
                  "test_check_coverage_pos",
                  0.3874818013930501
                ],
                [
                  "test_read_data",
                  "test_get_differential_cover",
                  0.5757916975141585
                ],
                [
                  "test_compare_ta_cds",
                  "test_get_best",
                  0.42102066856787984
                ],
                [
                  "test_get_differential_cover",
                  "test_check_coverage_pos",
                  0.8686664726020983
                ],
                [
                  "test_get_best",
                  "test_get_proper_tss",
                  0.742095798100577
                ],
                [
                  "test_get_attribute_string",
                  "test_check_srna_condition",
                  0.6809375980668559
                ],
                [
                  "test_read_tss",
                  "test_get_differential_cover",
                  0.30991519941758183
                ],
                [
                  "test_get_attribute_string",
                  "test_exchange_to_pro",
                  0.7341412245252328
                ],
                [
                  "test_get_tss_type",
                  "test_get_proper_tss",
                  0.7807214877032222
                ],
                [
                  "test_print_file",
                  "test_get_proper_tss",
                  0.706260558884863
                ],
                [
                  "test_check_srna_condition",
                  "test_intergenic_srna",
                  0.671152126477581
                ],
                [
                  "test_compare_ta_cds",
                  "test_exchange_to_pro",
                  0.49657183688554823
                ],
                [
                  "test_check_pro",
                  "test_detect_wig_pos",
                  0.9148901792089078
                ],
                [
                  "test_detect_wig_pos",
                  "test_intergenic_srna",
                  0.6117838588222757
                ],
                [
                  "test_compare_ta_cds",
                  "test_compare_ta_tss",
                  0.5744872937009886
                ],
                [
                  "test_compare_ta_tss",
                  "test_detect_include_tss",
                  0.9845505837462735
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_attribute_string",
                "false"
              ],
              [
                "test_check_coverage_pos",
                "false"
              ],
              [
                "test_exchange_to_pro",
                "false"
              ],
              [
                "test_get_proper_tss",
                "false"
              ],
              [
                "test_compare_ta_cds",
                "false"
              ],
              [
                "test_get_best",
                "false"
              ],
              [
                "test_detect_include_tss",
                "false"
              ],
              [
                "test_check_srna_condition",
                "false"
              ],
              [
                "test_check_pro",
                "false"
              ],
              [
                "test_detect_wig_pos",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_read_tss",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_compare_ta_tss",
                "false"
              ],
              [
                "test_intergenic_srna",
                "false"
              ],
              [
                "test_get_differential_cover",
                "false"
              ],
              [
                "test_detect_longer",
                "false"
              ],
              [
                "test_get_tss_type",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 18
      }
    ]
  },
  {
    "name": "tests_\u0026_test_get_target_fasta.py",
    "testCases": [
      {
        "name": "TestTargetFasta",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_target_fasta",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_target_fasta",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_target_fasta",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_target_fasta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_target_fasta",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_target_fasta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_target_fasta",
                [
                  "self.target_fasta.multiparser",
                  "self.target_fasta.seq_editer",
                  "self.target_fasta.helper",
                  "self.ref_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_target_fasta",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_target_fasta",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                [
                  "log"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                [
                  "self.root_folder",
                  "self.target_fasta",
                  "self.example",
                  "self.tar_folder",
                  "self.fasta_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_target_fasta",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_potential_target.py",
    "testCases": [
      {
        "name": "TestPotentialTarget",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_deal_cds_reverse",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_deal_cds_forward",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_potential_target",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_read_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_deal_cds_reverse",
                  "[]"
                ],
                [
                  "test_deal_cds_forward",
                  "[]"
                ],
                [
                  "test_potential_target",
                  "[]"
                ],
                [
                  "test_read_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_deal_cds_reverse",
                  "false"
                ],
                [
                  "test_deal_cds_forward",
                  "false"
                ],
                [
                  "test_potential_target",
                  "false"
                ],
                [
                  "test_read_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_deal_cds_reverse",
                  "false"
                ],
                [
                  "test_deal_cds_forward",
                  "false"
                ],
                [
                  "test_potential_target",
                  "false"
                ],
                [
                  "test_read_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_deal_cds_reverse",
                  "false"
                ],
                [
                  "test_deal_cds_forward",
                  "false"
                ],
                [
                  "test_potential_target",
                  "false"
                ],
                [
                  "test_read_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_deal_cds_reverse",
                  "false"
                ],
                [
                  "test_deal_cds_forward",
                  "false"
                ],
                [
                  "test_potential_target",
                  "false"
                ],
                [
                  "test_read_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                "false"
              ],
              [
                "test_deal_cds_forward",
                "false"
              ],
              [
                "test_potential_target",
                "false"
              ],
              [
                "test_read_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                "false"
              ],
              [
                "test_deal_cds_forward",
                "false"
              ],
              [
                "test_potential_target",
                "false"
              ],
              [
                "test_read_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_deal_cds_reverse",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_deal_cds_forward",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_potential_target",
                []
              ],
              [
                "test_read_file",
                [
                  "self.mock_args"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                "false"
              ],
              [
                "test_deal_cds_forward",
                "false"
              ],
              [
                "test_potential_target",
                "false"
              ],
              [
                "test_read_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_deal_cds_reverse",
                "false"
              ],
              [
                "test_deal_cds_forward",
                "false"
              ],
              [
                "test_potential_target",
                "false"
              ],
              [
                "test_read_file",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_deal_cds_reverse",
                  "0"
                ],
                [
                  "test_deal_cds_forward",
                  "0"
                ],
                [
                  "test_potential_target",
                  "0"
                ],
                [
                  "test_read_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_deal_cds_reverse",
                  "0"
                ],
                [
                  "test_deal_cds_forward",
                  "0"
                ],
                [
                  "test_potential_target",
                  "0"
                ],
                [
                  "test_read_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                "false"
              ],
              [
                "test_deal_cds_forward",
                "false"
              ],
              [
                "test_potential_target",
                "false"
              ],
              [
                "test_read_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                "false"
              ],
              [
                "test_deal_cds_forward",
                "false"
              ],
              [
                "test_potential_target",
                "false"
              ],
              [
                "test_read_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                "1"
              ],
              [
                "test_deal_cds_forward",
                "1"
              ],
              [
                "test_potential_target",
                "1"
              ],
              [
                "test_read_file",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                [
                  "data"
                ]
              ],
              [
                "test_deal_cds_forward",
                [
                  "data"
                ]
              ],
              [
                "test_potential_target",
                [
                  "args",
                  "data",
                  "seq_file",
                  "gff_file"
                ]
              ],
              [
                "test_read_file",
                [
                  "cdss_r",
                  "genes",
                  "seq_file",
                  "gff_file",
                  "fasta",
                  "cdss_f"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_deal_cds_forward",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_potential_target",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_file",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5141830399566643,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_deal_cds_forward",
                  "test_deal_cds_reverse",
                  0.9117647058823529
                ],
                [
                  "test_deal_cds_forward",
                  "test_potential_target",
                  0.4714045207910317
                ],
                [
                  "test_read_file",
                  "test_deal_cds_forward",
                  0.35302699803452425
                ],
                [
                  "test_read_file",
                  "test_potential_target",
                  0.5244704962065208
                ],
                [
                  "test_read_file",
                  "test_deal_cds_reverse",
                  0.35302699803452425
                ],
                [
                  "test_deal_cds_reverse",
                  "test_potential_target",
                  0.4714045207910317
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_deal_cds_reverse",
                "false"
              ],
              [
                "test_deal_cds_forward",
                "false"
              ],
              [
                "test_potential_target",
                "false"
              ],
              [
                "test_read_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_sRNA_utr_derived.py",
    "testCases": [
      {
        "name": "TestsRNAUTR",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_utr_coverage",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_median_score",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_set_cover_and_point",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_check_pos",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_mean_score",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_cover_5utr",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_srna",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_coverage",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_print_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_3utr_pro",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_set_cutoff",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_get_utr_cutoff",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_run_utr_detection",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_get_terminal",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_check_import_srna_covers",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_read_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_twopro",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_import_data",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_normal",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_get_inter",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_class_utr",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_utr_coverage",
                  "[]"
                ],
                [
                  "test_median_score",
                  "[]"
                ],
                [
                  "test_set_cover_and_point",
                  "[]"
                ],
                [
                  "test_check_pos",
                  "[]"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "[]"
                ],
                [
                  "test_mean_score",
                  "[]"
                ],
                [
                  "test_get_cover_5utr",
                  "[]"
                ],
                [
                  "test_detect_srna",
                  "[]"
                ],
                [
                  "test_get_coverage",
                  "[]"
                ],
                [
                  "test_print_file",
                  "[]"
                ],
                [
                  "test_detect_3utr_pro",
                  "[]"
                ],
                [
                  "test_set_cutoff",
                  "[]"
                ],
                [
                  "test_get_utr_cutoff",
                  "[]"
                ],
                [
                  "test_run_utr_detection",
                  "[]"
                ],
                [
                  "test_get_terminal",
                  "[]"
                ],
                [
                  "test_check_import_srna_covers",
                  "[]"
                ],
                [
                  "test_read_data",
                  "[]"
                ],
                [
                  "test_detect_twopro",
                  "[]"
                ],
                [
                  "test_import_data",
                  "[]"
                ],
                [
                  "test_detect_normal",
                  "[]"
                ],
                [
                  "test_get_inter",
                  "[]"
                ],
                [
                  "test_class_utr",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_utr_coverage",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_set_cover_and_point",
                  "false"
                ],
                [
                  "test_check_pos",
                  "false"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_get_cover_5utr",
                  "false"
                ],
                [
                  "test_detect_srna",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_3utr_pro",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "false"
                ],
                [
                  "test_get_utr_cutoff",
                  "false"
                ],
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_get_terminal",
                  "false"
                ],
                [
                  "test_check_import_srna_covers",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_detect_twopro",
                  "true"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_detect_normal",
                  "false"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_class_utr",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_utr_coverage",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_set_cover_and_point",
                  "false"
                ],
                [
                  "test_check_pos",
                  "false"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_get_cover_5utr",
                  "false"
                ],
                [
                  "test_detect_srna",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_3utr_pro",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "false"
                ],
                [
                  "test_get_utr_cutoff",
                  "false"
                ],
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_get_terminal",
                  "false"
                ],
                [
                  "test_check_import_srna_covers",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_detect_twopro",
                  "false"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_detect_normal",
                  "false"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_class_utr",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_utr_coverage",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_set_cover_and_point",
                  "false"
                ],
                [
                  "test_check_pos",
                  "false"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_get_cover_5utr",
                  "false"
                ],
                [
                  "test_detect_srna",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_3utr_pro",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "false"
                ],
                [
                  "test_get_utr_cutoff",
                  "false"
                ],
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_get_terminal",
                  "false"
                ],
                [
                  "test_check_import_srna_covers",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_detect_twopro",
                  "false"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_detect_normal",
                  "false"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_class_utr",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_utr_coverage",
                  "false"
                ],
                [
                  "test_median_score",
                  "false"
                ],
                [
                  "test_set_cover_and_point",
                  "false"
                ],
                [
                  "test_check_pos",
                  "false"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "false"
                ],
                [
                  "test_mean_score",
                  "false"
                ],
                [
                  "test_get_cover_5utr",
                  "false"
                ],
                [
                  "test_detect_srna",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ],
                [
                  "test_print_file",
                  "false"
                ],
                [
                  "test_detect_3utr_pro",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "false"
                ],
                [
                  "test_get_utr_cutoff",
                  "false"
                ],
                [
                  "test_run_utr_detection",
                  "false"
                ],
                [
                  "test_get_terminal",
                  "false"
                ],
                [
                  "test_check_import_srna_covers",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_detect_twopro",
                  "false"
                ],
                [
                  "test_import_data",
                  "false"
                ],
                [
                  "test_detect_normal",
                  "false"
                ],
                [
                  "test_get_inter",
                  "false"
                ],
                [
                  "test_class_utr",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_set_cover_and_point",
                "false"
              ],
              [
                "test_check_pos",
                "false"
              ],
              [
                "test_detect_cover_utr_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_get_cover_5utr",
                "false"
              ],
              [
                "test_detect_srna",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_3utr_pro",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ],
              [
                "test_get_utr_cutoff",
                "false"
              ],
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_get_terminal",
                "false"
              ],
              [
                "test_check_import_srna_covers",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_detect_twopro",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_detect_normal",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_class_utr",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_set_cover_and_point",
                "false"
              ],
              [
                "test_check_pos",
                "false"
              ],
              [
                "test_detect_cover_utr_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_get_cover_5utr",
                "false"
              ],
              [
                "test_detect_srna",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_3utr_pro",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ],
              [
                "test_get_utr_cutoff",
                "false"
              ],
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_get_terminal",
                "false"
              ],
              [
                "test_check_import_srna_covers",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_detect_twopro",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_detect_normal",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_class_utr",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_utr_coverage",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_median_score",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_set_cover_and_point",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_pos",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_cover_utr_srna",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_mean_score",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_cover_5utr",
                [
                  "self.mock",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_srna",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_print_file",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_3utr_pro",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_set_cutoff",
                [
                  "self.mock",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_utr_cutoff",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_utr_detection",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_terminal",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_import_srna_covers",
                [
                  "self.mock",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_data",
                [
                  "self.mock"
                ]
              ],
              [
                "test_detect_twopro",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_import_data",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_normal",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_inter",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_class_utr",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_set_cover_and_point",
                "false"
              ],
              [
                "test_check_pos",
                "false"
              ],
              [
                "test_detect_cover_utr_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_get_cover_5utr",
                "false"
              ],
              [
                "test_detect_srna",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_3utr_pro",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ],
              [
                "test_get_utr_cutoff",
                "false"
              ],
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_get_terminal",
                "false"
              ],
              [
                "test_check_import_srna_covers",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_detect_twopro",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_detect_normal",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_class_utr",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_utr_coverage",
                "false"
              ],
              [
                "test_median_score",
                "true"
              ],
              [
                "test_set_cover_and_point",
                "false"
              ],
              [
                "test_check_pos",
                "false"
              ],
              [
                "test_detect_cover_utr_srna",
                "false"
              ],
              [
                "test_mean_score",
                "true"
              ],
              [
                "test_get_cover_5utr",
                "true"
              ],
              [
                "test_detect_srna",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_3utr_pro",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ],
              [
                "test_get_utr_cutoff",
                "false"
              ],
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_get_terminal",
                "false"
              ],
              [
                "test_check_import_srna_covers",
                "false"
              ],
              [
                "test_read_data",
                "true"
              ],
              [
                "test_detect_twopro",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_detect_normal",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_class_utr",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_utr_coverage",
                  "0"
                ],
                [
                  "test_median_score",
                  "0"
                ],
                [
                  "test_set_cover_and_point",
                  "0"
                ],
                [
                  "test_check_pos",
                  "0"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "0"
                ],
                [
                  "test_mean_score",
                  "0"
                ],
                [
                  "test_get_cover_5utr",
                  "0"
                ],
                [
                  "test_detect_srna",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_detect_3utr_pro",
                  "0"
                ],
                [
                  "test_set_cutoff",
                  "0"
                ],
                [
                  "test_get_utr_cutoff",
                  "0"
                ],
                [
                  "test_run_utr_detection",
                  "0"
                ],
                [
                  "test_get_terminal",
                  "0"
                ],
                [
                  "test_check_import_srna_covers",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_detect_twopro",
                  "0"
                ],
                [
                  "test_import_data",
                  "0"
                ],
                [
                  "test_detect_normal",
                  "0"
                ],
                [
                  "test_get_inter",
                  "0"
                ],
                [
                  "test_class_utr",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_utr_coverage",
                  "0"
                ],
                [
                  "test_median_score",
                  "0"
                ],
                [
                  "test_set_cover_and_point",
                  "0"
                ],
                [
                  "test_check_pos",
                  "0"
                ],
                [
                  "test_detect_cover_utr_srna",
                  "0"
                ],
                [
                  "test_mean_score",
                  "0"
                ],
                [
                  "test_get_cover_5utr",
                  "0"
                ],
                [
                  "test_detect_srna",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ],
                [
                  "test_print_file",
                  "0"
                ],
                [
                  "test_detect_3utr_pro",
                  "0"
                ],
                [
                  "test_set_cutoff",
                  "0"
                ],
                [
                  "test_get_utr_cutoff",
                  "0"
                ],
                [
                  "test_run_utr_detection",
                  "0"
                ],
                [
                  "test_get_terminal",
                  "0"
                ],
                [
                  "test_check_import_srna_covers",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_detect_twopro",
                  "0"
                ],
                [
                  "test_import_data",
                  "0"
                ],
                [
                  "test_detect_normal",
                  "0"
                ],
                [
                  "test_get_inter",
                  "0"
                ],
                [
                  "test_class_utr",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_set_cover_and_point",
                "false"
              ],
              [
                "test_check_pos",
                "false"
              ],
              [
                "test_detect_cover_utr_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_get_cover_5utr",
                "false"
              ],
              [
                "test_detect_srna",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_3utr_pro",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ],
              [
                "test_get_utr_cutoff",
                "false"
              ],
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_get_terminal",
                "false"
              ],
              [
                "test_check_import_srna_covers",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_detect_twopro",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_detect_normal",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_class_utr",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_set_cover_and_point",
                "false"
              ],
              [
                "test_check_pos",
                "false"
              ],
              [
                "test_detect_cover_utr_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_get_cover_5utr",
                "false"
              ],
              [
                "test_detect_srna",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_3utr_pro",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ],
              [
                "test_get_utr_cutoff",
                "false"
              ],
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_get_terminal",
                "false"
              ],
              [
                "test_check_import_srna_covers",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_detect_twopro",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_detect_normal",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_class_utr",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                "1"
              ],
              [
                "test_median_score",
                "1"
              ],
              [
                "test_set_cover_and_point",
                "2"
              ],
              [
                "test_check_pos",
                "1"
              ],
              [
                "test_detect_cover_utr_srna",
                "3"
              ],
              [
                "test_mean_score",
                "1"
              ],
              [
                "test_get_cover_5utr",
                "10"
              ],
              [
                "test_detect_srna",
                "2"
              ],
              [
                "test_get_coverage",
                "2"
              ],
              [
                "test_print_file",
                "2"
              ],
              [
                "test_detect_3utr_pro",
                "2"
              ],
              [
                "test_set_cutoff",
                "2"
              ],
              [
                "test_get_utr_cutoff",
                "1"
              ],
              [
                "test_run_utr_detection",
                "2"
              ],
              [
                "test_get_terminal",
                "1"
              ],
              [
                "test_check_import_srna_covers",
                "4"
              ],
              [
                "test_read_data",
                "5"
              ],
              [
                "test_detect_twopro",
                "2"
              ],
              [
                "test_import_data",
                "1"
              ],
              [
                "test_detect_normal",
                "3"
              ],
              [
                "test_get_inter",
                "1"
              ],
              [
                "test_class_utr",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                [
                  "utrs",
                  "covers"
                ]
              ],
              [
                "test_median_score",
                [
                  "median",
                  "lst"
                ]
              ],
              [
                "test_set_cover_and_point",
                [
                  "cover_results",
                  "pos",
                  "covers"
                ]
              ],
              [
                "test_check_pos",
                [
                  "cover",
                  "checks",
                  "check_point"
                ]
              ],
              [
                "test_detect_cover_utr_srna",
                [
                  "args",
                  "cover_results",
                  "pos",
                  "datas"
                ]
              ],
              [
                "test_mean_score",
                [
                  "mean",
                  "lst"
                ]
              ],
              [
                "test_get_cover_5utr",
                [
                  "args",
                  "cover",
                  "cover_sets",
                  "datas",
                  "go_out"
                ]
              ],
              [
                "test_detect_srna",
                [
                  "args",
                  "median",
                  "gffs",
                  "ncs"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "args",
                  "srna_covers",
                  "utr_covers",
                  "pos"
                ]
              ],
              [
                "test_print_file",
                [
                  "args",
                  "srna",
                  "srna_datas"
                ]
              ],
              [
                "test_detect_3utr_pro",
                [
                  "args",
                  "pos"
                ]
              ],
              [
                "test_set_cutoff",
                [
                  "args",
                  "mediandict",
                  "covers"
                ]
              ],
              [
                "test_get_utr_cutoff",
                [
                  "mediandict",
                  "avgs"
                ]
              ],
              [
                "test_run_utr_detection",
                [
                  "args"
                ]
              ],
              [
                "test_get_terminal",
                [
                  "inters",
                  "seq"
                ]
              ],
              [
                "test_check_import_srna_covers",
                [
                  "args",
                  "cover",
                  "cover_results",
                  "pos",
                  "datas"
                ]
              ],
              [
                "test_read_data",
                [
                  "args",
                  "pros",
                  "tas",
                  "tsss",
                  "seq",
                  "cdss"
                ]
              ],
              [
                "test_detect_twopro",
                [
                  "args",
                  "pros",
                  "pro_dict",
                  "pos",
                  "attributes_pro"
                ]
              ],
              [
                "test_import_data",
                [
                  "pos",
                  "datas"
                ]
              ],
              [
                "test_detect_normal",
                [
                  "args",
                  "pos",
                  "diff"
                ]
              ],
              [
                "test_get_inter",
                [
                  "inters"
                ]
              ],
              [
                "test_class_utr",
                [
                  "args"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_get_utr_coverage",
                []
              ],
              [
                "test_median_score",
                []
              ],
              [
                "test_set_cover_and_point",
                [
                  "self.example"
                ]
              ],
              [
                "test_check_pos",
                []
              ],
              [
                "test_detect_cover_utr_srna",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_mean_score",
                []
              ],
              [
                "test_get_cover_5utr",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_detect_srna",
                [
                  "self.mock",
                  "self.mock_args"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_print_file",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_detect_3utr_pro",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_set_cutoff",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_get_utr_cutoff",
                []
              ],
              [
                "test_run_utr_detection",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_get_terminal",
                [
                  "self.example"
                ]
              ],
              [
                "test_check_import_srna_covers",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_read_data",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_twopro",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_import_data",
                []
              ],
              [
                "test_detect_normal",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_get_inter",
                [
                  "self.example"
                ]
              ],
              [
                "test_class_utr",
                [
                  "self.mock",
                  "self.mock_args",
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.751057912764111,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_coverage",
                  "test_print_file",
                  0.8881991919298174
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_run_utr_detection",
                  0.8887533462728471
                ],
                [
                  "test_check_pos",
                  "test_class_utr",
                  0.7086668094713424
                ],
                [
                  "test_detect_twopro",
                  "test_median_score",
                  0.8194876383782999
                ],
                [
                  "test_read_data",
                  "test_detect_twopro",
                  0.39116110852361197
                ],
                [
                  "test_class_utr",
                  "test_mean_score",
                  0.785883040587729
                ],
                [
                  "test_check_import_srna_covers",
                  "test_detect_normal",
                  0.8658633559215212
                ],
                [
                  "test_import_data",
                  "test_get_coverage",
                  0.7329732513876528
                ],
                [
                  "test_get_coverage",
                  "test_get_utr_coverage",
                  0.7621359770525954
                ],
                [
                  "test_import_data",
                  "test_detect_srna",
                  0.7348768223120364
                ],
                [
                  "test_detect_3utr_pro",
                  "test_detect_srna",
                  0.9084429636577482
                ],
                [
                  "test_get_coverage",
                  "test_set_cutoff",
                  0.7601752666772083
                ],
                [
                  "test_get_inter",
                  "test_detect_twopro",
                  0.713265951543479
                ],
                [
                  "test_set_cover_and_point",
                  "test_detect_twopro",
                  0.8513388212955229
                ],
                [
                  "test_detect_twopro",
                  "test_print_file",
                  0.9170034012362765
                ],
                [
                  "test_median_score",
                  "test_detect_srna",
                  0.7886825218191439
                ],
                [
                  "test_get_utr_cutoff",
                  "test_class_utr",
                  0.7384501747828088
                ],
                [
                  "test_get_coverage",
                  "test_mean_score",
                  0.7758194493212971
                ],
                [
                  "test_get_terminal",
                  "test_detect_twopro",
                  0.6960810332083771
                ],
                [
                  "test_get_terminal",
                  "test_run_utr_detection",
                  0.681708219566272
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_detect_twopro",
                  0.9054432652859634
                ],
                [
                  "test_get_cover_5utr",
                  "test_detect_cover_utr_srna",
                  0.9041012956880012
                ],
                [
                  "test_detect_normal",
                  "test_detect_3utr_pro",
                  0.9872312647853144
                ],
                [
                  "test_read_data",
                  "test_set_cover_and_point",
                  0.2772637986927478
                ],
                [
                  "test_get_coverage",
                  "test_median_score",
                  0.7855963153998485
                ],
                [
                  "test_run_utr_detection",
                  "test_class_utr",
                  0.9678063543400722
                ],
                [
                  "test_detect_twopro",
                  "test_detect_srna",
                  0.8959307971868038
                ],
                [
                  "test_get_terminal",
                  "test_set_cover_and_point",
                  0.6293493132090188
                ],
                [
                  "test_set_cover_and_point",
                  "test_class_utr",
                  0.8330590321913847
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_detect_normal",
                  0.9149046639302746
                ],
                [
                  "test_get_utr_cutoff",
                  "test_detect_twopro",
                  0.7787531078667584
                ],
                [
                  "test_detect_normal",
                  "test_print_file",
                  0.9256653989283962
                ],
                [
                  "test_import_data",
                  "test_detect_cover_utr_srna",
                  0.7892013893612985
                ],
                [
                  "test_import_data",
                  "test_get_cover_5utr",
                  0.7087762305844978
                ],
                [
                  "test_import_data",
                  "test_class_utr",
                  0.8085125497487997
                ],
                [
                  "test_class_utr",
                  "test_print_file",
                  0.8928470688121556
                ],
                [
                  "test_get_cover_5utr",
                  "test_detect_srna",
                  0.8251076838567333
                ],
                [
                  "test_check_pos",
                  "test_detect_srna",
                  0.7435313291172696
                ],
                [
                  "test_class_utr",
                  "test_median_score",
                  0.7936656971498429
                ],
                [
                  "test_get_cover_5utr",
                  "test_get_coverage",
                  0.8554059245387725
                ],
                [
                  "test_check_pos",
                  "test_get_coverage",
                  0.7610942772119159
                ],
                [
                  "test_get_coverage",
                  "test_detect_3utr_pro",
                  0.8906984922113457
                ],
                [
                  "test_check_import_srna_covers",
                  "test_detect_twopro",
                  0.8602795343658131
                ],
                [
                  "test_class_utr",
                  "test_get_utr_coverage",
                  0.9206813764095035
                ],
                [
                  "test_run_utr_detection",
                  "test_detect_srna",
                  0.9018179834369878
                ],
                [
                  "test_set_cutoff",
                  "test_median_score",
                  0.7321657397951591
                ],
                [
                  "test_detect_srna",
                  "test_print_file",
                  0.9545887323869562
                ],
                [
                  "test_import_data",
                  "test_detect_3utr_pro",
                  0.82704923312366
                ],
                [
                  "test_check_pos",
                  "test_detect_3utr_pro",
                  0.7615477122790951
                ],
                [
                  "test_get_cover_5utr",
                  "test_get_utr_cutoff",
                  0.7401017590732546
                ],
                [
                  "test_check_pos",
                  "test_detect_cover_utr_srna",
                  0.8228073510978762
                ],
                [
                  "test_detect_normal",
                  "test_detect_srna",
                  0.9027402378715931
                ],
                [
                  "test_detect_twopro",
                  "test_mean_score",
                  0.8091398577335557
                ],
                [
                  "test_get_utr_coverage",
                  "test_median_score",
                  0.7246712296812761
                ],
                [
                  "test_class_utr",
                  "test_set_cutoff",
                  0.7641466374875436
                ],
                [
                  "test_get_terminal",
                  "test_detect_normal",
                  0.6874175760811716
                ],
                [
                  "test_read_data",
                  "test_detect_cover_utr_srna",
                  0.3615643601451625
                ],
                [
                  "test_class_utr",
                  "test_detect_srna",
                  0.8689450309279865
                ],
                [
                  "test_get_utr_cutoff",
                  "test_detect_srna",
                  0.7396671129748361
                ],
                [
                  "test_import_data",
                  "test_mean_score",
                  0.7162870791336713
                ],
                [
                  "test_run_utr_detection",
                  "test_get_utr_coverage",
                  0.8961333418502178
                ],
                [
                  "test_get_terminal",
                  "test_class_utr",
                  0.6412143715323534
                ],
                [
                  "test_check_import_srna_covers",
                  "test_print_file",
                  0.8744851963043051
                ],
                [
                  "test_set_cover_and_point",
                  "test_detect_normal",
                  0.8693074460131895
                ],
                [
                  "test_get_cover_5utr",
                  "test_set_cutoff",
                  0.7717239408355807
                ],
                [
                  "test_get_cover_5utr",
                  "test_median_score",
                  0.7933750620796989
                ],
                [
                  "test_import_data",
                  "test_set_cover_and_point",
                  0.776889983948123
                ],
                [
                  "test_get_cover_5utr",
                  "test_get_utr_coverage",
                  0.7062196391084693
                ],
                [
                  "test_check_pos",
                  "test_run_utr_detection",
                  0.7346086517404893
                ],
                [
                  "test_get_coverage",
                  "test_detect_normal",
                  0.8856668498152832
                ],
                [
                  "test_import_data",
                  "test_get_terminal",
                  0.6318915947552093
                ],
                [
                  "test_run_utr_detection",
                  "test_set_cutoff",
                  0.7782450259365643
                ],
                [
                  "test_read_data",
                  "test_check_import_srna_covers",
                  0.3901769147205246
                ],
                [
                  "test_import_data",
                  "test_print_file",
                  0.7827167059411507
                ],
                [
                  "test_get_inter",
                  "test_detect_normal",
                  0.7086264832204909
                ],
                [
                  "test_detect_3utr_pro",
                  "test_print_file",
                  0.9238608910088845
                ],
                [
                  "test_get_cover_5utr",
                  "test_mean_score",
                  0.7659288723854145
                ],
                [
                  "test_read_data",
                  "test_class_utr",
                  0.33949142405596106
                ],
                [
                  "test_detect_normal",
                  "test_mean_score",
                  0.8189903652962925
                ],
                [
                  "test_set_cover_and_point",
                  "test_detect_srna",
                  0.7727772193915056
                ],
                [
                  "test_set_cover_and_point",
                  "test_check_import_srna_covers",
                  0.8589968454032632
                ],
                [
                  "test_get_utr_coverage",
                  "test_print_file",
                  0.8084362763957097
                ],
                [
                  "test_detect_3utr_pro",
                  "test_class_utr",
                  0.9730489549211424
                ],
                [
                  "test_check_pos",
                  "test_detect_twopro",
                  0.7648277955897047
                ],
                [
                  "test_detect_normal",
                  "test_get_utr_coverage",
                  0.8854804595129533
                ],
                [
                  "test_get_terminal",
                  "test_check_import_srna_covers",
                  0.643972685823763
                ],
                [
                  "test_detect_normal",
                  "test_set_cutoff",
                  0.7917681675157571
                ],
                [
                  "test_import_data",
                  "test_check_import_srna_covers",
                  0.7739899448240022
                ],
                [
                  "test_get_cover_5utr",
                  "test_run_utr_detection",
                  0.8119101530396718
                ],
                [
                  "test_get_utr_coverage",
                  "test_detect_srna",
                  0.785912823600334
                ],
                [
                  "test_get_inter",
                  "test_check_pos",
                  0.6082807521644501
                ],
                [
                  "test_check_import_srna_covers",
                  "test_detect_3utr_pro",
                  0.8523310458634268
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_median_score",
                  0.8529146180424977
                ],
                [
                  "test_check_pos",
                  "test_get_utr_coverage",
                  0.6290471349582228
                ],
                [
                  "test_import_data",
                  "test_get_utr_cutoff",
                  0.6812866877669125
                ],
                [
                  "test_get_inter",
                  "test_get_utr_coverage",
                  0.6267511942419625
                ],
                [
                  "test_get_terminal",
                  "test_print_file",
                  0.6643097660887337
                ],
                [
                  "test_check_import_srna_covers",
                  "test_class_utr",
                  0.8086507420391441
                ],
                [
                  "test_check_pos",
                  "test_set_cutoff",
                  0.6854723706446888
                ],
                [
                  "test_read_data",
                  "test_get_terminal",
                  0.37325445134507956
                ],
                [
                  "test_get_inter",
                  "test_set_cutoff",
                  0.589476704061731
                ],
                [
                  "test_get_coverage",
                  "test_detect_srna",
                  0.8785822478098365
                ],
                [
                  "test_read_data",
                  "test_get_inter",
                  0.31990495664579766
                ],
                [
                  "test_get_utr_cutoff",
                  "test_print_file",
                  0.7773334588216164
                ],
                [
                  "test_import_data",
                  "test_read_data",
                  0.3198099800366694
                ],
                [
                  "test_detect_normal",
                  "test_median_score",
                  0.8287976918502762
                ],
                [
                  "test_check_import_srna_covers",
                  "test_get_cover_5utr",
                  0.8926901208954306
                ],
                [
                  "test_detect_twopro",
                  "test_run_utr_detection",
                  0.9464259951669336
                ],
                [
                  "test_check_pos",
                  "test_median_score",
                  0.7389426636894133
                ],
                [
                  "test_detect_twopro",
                  "test_set_cutoff",
                  0.7928080889486214
                ],
                [
                  "test_import_data",
                  "test_get_inter",
                  0.6465741506925919
                ],
                [
                  "test_get_inter",
                  "test_median_score",
                  0.6736866530005075
                ],
                [
                  "test_detect_twopro",
                  "test_get_utr_coverage",
                  0.8376683471984717
                ],
                [
                  "test_set_cover_and_point",
                  "test_get_utr_cutoff",
                  0.7896519065753097
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_get_utr_coverage",
                  0.7812563260756675
                ],
                [
                  "test_get_terminal",
                  "test_get_inter",
                  0.8210580498327414
                ],
                [
                  "test_get_utr_coverage",
                  "test_mean_score",
                  0.7220999061865985
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_set_cutoff",
                  0.7985916192378923
                ],
                [
                  "test_get_coverage",
                  "test_get_utr_cutoff",
                  0.7754382112626627
                ],
                [
                  "test_get_inter",
                  "test_run_utr_detection",
                  0.7188572925437855
                ],
                [
                  "test_set_cover_and_point",
                  "test_print_file",
                  0.874652808323596
                ],
                [
                  "test_run_utr_detection",
                  "test_median_score",
                  0.8206933984854117
                ],
                [
                  "test_read_data",
                  "test_get_utr_cutoff",
                  0.32848437766640576
                ],
                [
                  "test_set_cover_and_point",
                  "test_set_cutoff",
                  0.7269722066681501
                ],
                [
                  "test_get_inter",
                  "test_get_cover_5utr",
                  0.6722890036903509
                ],
                [
                  "test_mean_score",
                  "test_detect_srna",
                  0.772938476901868
                ],
                [
                  "test_set_cover_and_point",
                  "test_get_utr_coverage",
                  0.7594123096840615
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_get_coverage",
                  0.9096565828165811
                ],
                [
                  "test_detect_normal",
                  "test_run_utr_detection",
                  0.9765175305397586
                ],
                [
                  "test_get_cover_5utr",
                  "test_detect_normal",
                  0.8304270724390364
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_detect_srna",
                  0.8630957884686613
                ],
                [
                  "test_get_inter",
                  "test_detect_3utr_pro",
                  0.7060987881136028
                ],
                [
                  "test_read_data",
                  "test_get_cover_5utr",
                  0.4580052111034654
                ],
                [
                  "test_get_coverage",
                  "test_detect_twopro",
                  0.8813236918676344
                ],
                [
                  "test_set_cover_and_point",
                  "test_mean_score",
                  0.882330742199579
                ],
                [
                  "test_import_data",
                  "test_run_utr_detection",
                  0.8108877110933762
                ],
                [
                  "test_get_terminal",
                  "test_get_utr_cutoff",
                  0.6237611283397497
                ],
                [
                  "test_set_cover_and_point",
                  "test_check_pos",
                  0.7520635088079826
                ],
                [
                  "test_check_import_srna_covers",
                  "test_detect_cover_utr_srna",
                  0.9402188589672481
                ],
                [
                  "test_get_terminal",
                  "test_detect_srna",
                  0.6608716798956324
                ],
                [
                  "test_get_terminal",
                  "test_get_coverage",
                  0.6447720254094254
                ],
                [
                  "test_read_data",
                  "test_print_file",
                  0.3898700649639099
                ],
                [
                  "test_get_inter",
                  "test_get_utr_cutoff",
                  0.6312409771176487
                ],
                [
                  "test_set_cover_and_point",
                  "test_median_score",
                  0.884311507917367
                ],
                [
                  "test_get_inter",
                  "test_print_file",
                  0.6886325007216578
                ],
                [
                  "test_set_cover_and_point",
                  "test_detect_3utr_pro",
                  0.8504805235884656
                ],
                [
                  "test_get_coverage",
                  "test_run_utr_detection",
                  0.8747659241334059
                ],
                [
                  "test_read_data",
                  "test_detect_srna",
                  0.45137787202872987
                ],
                [
                  "test_read_data",
                  "test_get_coverage",
                  0.42477858597569834
                ],
                [
                  "test_get_inter",
                  "test_mean_score",
                  0.6686478498357317
                ],
                [
                  "test_get_utr_cutoff",
                  "test_detect_normal",
                  0.7708572312563291
                ],
                [
                  "test_detect_3utr_pro",
                  "test_detect_twopro",
                  0.9589073820207332
                ],
                [
                  "test_get_terminal",
                  "test_mean_score",
                  0.63790537161276
                ],
                [
                  "test_check_import_srna_covers",
                  "test_get_coverage",
                  0.877812943472728
                ],
                [
                  "test_read_data",
                  "test_detect_3utr_pro",
                  0.3898121123665028
                ],
                [
                  "test_mean_score",
                  "test_median_score",
                  0.9138115486202573
                ],
                [
                  "test_check_import_srna_covers",
                  "test_detect_srna",
                  0.8248793709829343
                ],
                [
                  "test_check_import_srna_covers",
                  "test_get_utr_cutoff",
                  0.7425282823862206
                ],
                [
                  "test_import_data",
                  "test_detect_normal",
                  0.8399038015160367
                ],
                [
                  "test_get_inter",
                  "test_get_coverage",
                  0.6464423159785162
                ],
                [
                  "test_get_inter",
                  "test_detect_srna",
                  0.6561791987277897
                ],
                [
                  "test_check_pos",
                  "test_detect_normal",
                  0.7661500409813302
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_mean_score",
                  0.8395873297551693
                ],
                [
                  "test_get_utr_cutoff",
                  "test_detect_3utr_pro",
                  0.7785216273667306
                ],
                [
                  "test_get_inter",
                  "test_detect_cover_utr_srna",
                  0.6844338021069523
                ],
                [
                  "test_set_cover_and_point",
                  "test_get_cover_5utr",
                  0.8135953495369177
                ],
                [
                  "test_detect_normal",
                  "test_detect_twopro",
                  0.9593837021678405
                ],
                [
                  "test_get_cover_5utr",
                  "test_detect_twopro",
                  0.8340961367222935
                ],
                [
                  "test_run_utr_detection",
                  "test_mean_score",
                  0.8152773496237643
                ],
                [
                  "test_read_data",
                  "test_mean_score",
                  0.3751542892474251
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_detect_3utr_pro",
                  0.9062529415315059
                ],
                [
                  "test_get_terminal",
                  "test_get_cover_5utr",
                  0.6387351620733345
                ],
                [
                  "test_get_terminal",
                  "test_detect_3utr_pro",
                  0.6804411839610167
                ],
                [
                  "test_check_pos",
                  "test_mean_score",
                  0.7159814856022976
                ],
                [
                  "test_get_coverage",
                  "test_class_utr",
                  0.8245214244959094
                ],
                [
                  "test_get_utr_cutoff",
                  "test_mean_score",
                  0.7878787878787878
                ],
                [
                  "test_check_pos",
                  "test_get_cover_5utr",
                  0.7924052158248737
                ],
                [
                  "test_check_import_srna_covers",
                  "test_set_cutoff",
                  0.7677717432145482
                ],
                [
                  "test_run_utr_detection",
                  "test_print_file",
                  0.9150747327179694
                ],
                [
                  "test_get_inter",
                  "test_check_import_srna_covers",
                  0.6504880596395932
                ],
                [
                  "test_detect_3utr_pro",
                  "test_mean_score",
                  0.8086764090883144
                ],
                [
                  "test_set_cutoff",
                  "test_mean_score",
                  0.7158251249383386
                ],
                [
                  "test_import_data",
                  "test_get_utr_coverage",
                  0.7621650316309388
                ],
                [
                  "test_read_data",
                  "test_detect_normal",
                  0.3811855546214811
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_class_utr",
                  0.8623935014055836
                ],
                [
                  "test_detect_3utr_pro",
                  "test_get_utr_coverage",
                  0.8926830589837718
                ],
                [
                  "test_get_utr_cutoff",
                  "test_run_utr_detection",
                  0.7835132970410202
                ],
                [
                  "test_detect_normal",
                  "test_class_utr",
                  0.9686962509899915
                ],
                [
                  "test_check_import_srna_covers",
                  "test_get_utr_coverage",
                  0.7282900368643911
                ],
                [
                  "test_get_utr_coverage",
                  "test_set_cutoff",
                  0.7568366865067024
                ],
                [
                  "test_get_cover_5utr",
                  "test_print_file",
                  0.8557281598956883
                ],
                [
                  "test_get_terminal",
                  "test_detect_cover_utr_srna",
                  0.651344745385042
                ],
                [
                  "test_detect_3utr_pro",
                  "test_set_cutoff",
                  0.7896032479689707
                ],
                [
                  "test_set_cover_and_point",
                  "test_detect_cover_utr_srna",
                  0.9191349240926583
                ],
                [
                  "test_detect_twopro",
                  "test_class_utr",
                  0.9293174651969791
                ],
                [
                  "test_get_inter",
                  "test_class_utr",
                  0.6773303530793587
                ],
                [
                  "test_check_import_srna_covers",
                  "test_median_score",
                  0.7976994323867919
                ],
                [
                  "test_check_pos",
                  "test_get_utr_cutoff",
                  0.6547210376363256
                ],
                [
                  "test_set_cutoff",
                  "test_print_file",
                  0.7922260020866387
                ],
                [
                  "test_set_cover_and_point",
                  "test_get_coverage",
                  0.8112462207159141
                ],
                [
                  "test_check_import_srna_covers",
                  "test_check_pos",
                  0.7898887697027865
                ],
                [
                  "test_import_data",
                  "test_detect_twopro",
                  0.8129763774373162
                ],
                [
                  "test_set_cover_and_point",
                  "test_run_utr_detection",
                  0.8483862530651007
                ],
                [
                  "test_check_import_srna_covers",
                  "test_mean_score",
                  0.7851105494764697
                ],
                [
                  "test_get_terminal",
                  "test_get_utr_coverage",
                  0.5850179393017044
                ],
                [
                  "test_get_inter",
                  "test_set_cover_and_point",
                  0.6827292307801965
                ],
                [
                  "test_get_cover_5utr",
                  "test_detect_3utr_pro",
                  0.8308407213439322
                ],
                [
                  "test_median_score",
                  "test_print_file",
                  0.8434378045667631
                ],
                [
                  "test_get_utr_cutoff",
                  "test_median_score",
                  0.7845856730577966
                ],
                [
                  "test_get_terminal",
                  "test_check_pos",
                  0.5838522756902752
                ],
                [
                  "test_read_data",
                  "test_check_pos",
                  0.3861903317969811
                ],
                [
                  "test_get_cover_5utr",
                  "test_class_utr",
                  0.7767847968682927
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_get_utr_cutoff",
                  0.7993426478330207
                ],
                [
                  "test_check_pos",
                  "test_print_file",
                  0.7804281469398772
                ],
                [
                  "test_mean_score",
                  "test_print_file",
                  0.8313149490175621
                ],
                [
                  "test_check_import_srna_covers",
                  "test_run_utr_detection",
                  0.835796315342504
                ],
                [
                  "test_read_data",
                  "test_get_utr_coverage",
                  0.2955954852251009
                ],
                [
                  "test_detect_cover_utr_srna",
                  "test_print_file",
                  0.9219143820499535
                ],
                [
                  "test_get_terminal",
                  "test_median_score",
                  0.6397960560438697
                ],
                [
                  "test_get_utr_cutoff",
                  "test_get_utr_coverage",
                  0.7279611067238273
                ],
                [
                  "test_read_data",
                  "test_set_cutoff",
                  0.3454632569453009
                ],
                [
                  "test_detect_3utr_pro",
                  "test_run_utr_detection",
                  0.979130043504068
                ],
                [
                  "test_get_utr_cutoff",
                  "test_set_cutoff",
                  0.7521301312749242
                ],
                [
                  "test_read_data",
                  "test_run_utr_detection",
                  0.38910249062170393
                ],
                [
                  "test_import_data",
                  "test_set_cutoff",
                  0.6448333473511079
                ],
                [
                  "test_import_data",
                  "test_median_score",
                  0.7200065455438031
                ],
                [
                  "test_import_data",
                  "test_check_pos",
                  0.696417806248397
                ],
                [
                  "test_get_terminal",
                  "test_set_cutoff",
                  0.5665947291522477
                ],
                [
                  "test_read_data",
                  "test_median_score",
                  0.3969498465595722
                ],
                [
                  "test_detect_3utr_pro",
                  "test_median_score",
                  0.8186281480150139
                ],
                [
                  "test_set_cutoff",
                  "test_detect_srna",
                  0.7690271600604428
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_utr_coverage",
                "false"
              ],
              [
                "test_median_score",
                "false"
              ],
              [
                "test_set_cover_and_point",
                "false"
              ],
              [
                "test_check_pos",
                "false"
              ],
              [
                "test_detect_cover_utr_srna",
                "false"
              ],
              [
                "test_mean_score",
                "false"
              ],
              [
                "test_get_cover_5utr",
                "false"
              ],
              [
                "test_detect_srna",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ],
              [
                "test_print_file",
                "false"
              ],
              [
                "test_detect_3utr_pro",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ],
              [
                "test_get_utr_cutoff",
                "false"
              ],
              [
                "test_run_utr_detection",
                "false"
              ],
              [
                "test_get_terminal",
                "false"
              ],
              [
                "test_check_import_srna_covers",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_detect_twopro",
                "false"
              ],
              [
                "test_import_data",
                "false"
              ],
              [
                "test_detect_normal",
                "false"
              ],
              [
                "test_get_inter",
                "false"
              ],
              [
                "test_class_utr",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 22
      }
    ]
  },
  {
    "name": "tests_\u0026_test_stat_TSSpredater.py",
    "testCases": [
      {
        "name": "TestStatTSSpredator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_stat_tsspredator",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_plot",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_stat",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_stat_tsspredator",
                  "[]"
                ],
                [
                  "test_plot",
                  "[]"
                ],
                [
                  "test_stat",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_stat_tsspredator",
                  "true"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_stat",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_stat_tsspredator",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_stat_tsspredator",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_stat_tsspredator",
                  "false"
                ],
                [
                  "test_plot",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_stat",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_stat",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_stat_tsspredator",
                []
              ],
              [
                "test_plot",
                [
                  "self.example"
                ]
              ],
              [
                "test_stat",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_stat",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_stat",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_stat_tsspredator",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ],
                [
                  "test_stat",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_stat_tsspredator",
                  "0"
                ],
                [
                  "test_plot",
                  "0"
                ],
                [
                  "test_stat",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_stat",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_stat",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "3"
              ],
              [
                "test_plot",
                "1"
              ],
              [
                "test_stat",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                [
                  "lib_file",
                  "datas",
                  "line",
                  "stat_file",
                  "detect",
                  "tss_file"
                ]
              ],
              [
                "test_plot",
                []
              ],
              [
                "test_stat",
                [
                  "detect",
                  "out_stat",
                  "out_lib"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_plot",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_stat",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4815809045950374,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_stat",
                  "test_plot",
                  0.3623530526268692
                ],
                [
                  "test_plot",
                  "test_stat_tsspredator",
                  0.3566803558322553
                ],
                [
                  "test_stat",
                  "test_stat_tsspredator",
                  0.7257093053259875
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_stat_tsspredator",
                "false"
              ],
              [
                "test_plot",
                "false"
              ],
              [
                "test_stat",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_compare_sRNA_sORF.py",
    "testCases": [
      {
        "name": "TestComparesRNAsORF",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_srna_sorf_comparison",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_srna_sorf_comparison",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_srna_sorf_comparison",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_srna_sorf_comparison",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_srna_sorf_comparison",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_srna_sorf_comparison",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_srna_sorf_comparison",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_srna_sorf_comparison",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                [
                  "sRNA_file",
                  "sRNA_out",
                  "attribute_sorfs",
                  "refs",
                  "attribute_refs",
                  "sORF_out",
                  "srnas",
                  "sorfs",
                  "sORF_file",
                  "attribute_srnas"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_srna_sorf_comparison",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_stat_TA_comparison.py",
    "testCases": [
      {
        "name": "TestStatTaComparison",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_read_tag_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_assign_parent",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_print_tas_stat",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_stat_ta_tss",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_tag_region",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_ta_gff",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_del_attributes",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_read_tas_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_assign_tss",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_stat_ta_gff",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compare_tran_tss",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_print_tag_stat",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_detect_tas_region",
                  "[PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_read_tag_file",
                  "[]"
                ],
                [
                  "test_assign_parent",
                  "[]"
                ],
                [
                  "test_print_tas_stat",
                  "[]"
                ],
                [
                  "test_stat_ta_tss",
                  "[]"
                ],
                [
                  "test_detect_tag_region",
                  "[]"
                ],
                [
                  "test_compare_ta_gff",
                  "[]"
                ],
                [
                  "test_del_attributes",
                  "[]"
                ],
                [
                  "test_read_tas_file",
                  "[]"
                ],
                [
                  "test_assign_tss",
                  "[]"
                ],
                [
                  "test_stat_ta_gff",
                  "[]"
                ],
                [
                  "test_compare_tran_tss",
                  "[]"
                ],
                [
                  "test_print_tag_stat",
                  "[]"
                ],
                [
                  "test_detect_tas_region",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_read_tag_file",
                  "false"
                ],
                [
                  "test_assign_parent",
                  "false"
                ],
                [
                  "test_print_tas_stat",
                  "false"
                ],
                [
                  "test_stat_ta_tss",
                  "true"
                ],
                [
                  "test_detect_tag_region",
                  "false"
                ],
                [
                  "test_compare_ta_gff",
                  "false"
                ],
                [
                  "test_del_attributes",
                  "false"
                ],
                [
                  "test_read_tas_file",
                  "false"
                ],
                [
                  "test_assign_tss",
                  "false"
                ],
                [
                  "test_stat_ta_gff",
                  "true"
                ],
                [
                  "test_compare_tran_tss",
                  "false"
                ],
                [
                  "test_print_tag_stat",
                  "false"
                ],
                [
                  "test_detect_tas_region",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_read_tag_file",
                  "false"
                ],
                [
                  "test_assign_parent",
                  "false"
                ],
                [
                  "test_print_tas_stat",
                  "false"
                ],
                [
                  "test_stat_ta_tss",
                  "false"
                ],
                [
                  "test_detect_tag_region",
                  "false"
                ],
                [
                  "test_compare_ta_gff",
                  "false"
                ],
                [
                  "test_del_attributes",
                  "false"
                ],
                [
                  "test_read_tas_file",
                  "false"
                ],
                [
                  "test_assign_tss",
                  "false"
                ],
                [
                  "test_stat_ta_gff",
                  "false"
                ],
                [
                  "test_compare_tran_tss",
                  "false"
                ],
                [
                  "test_print_tag_stat",
                  "false"
                ],
                [
                  "test_detect_tas_region",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_read_tag_file",
                  "false"
                ],
                [
                  "test_assign_parent",
                  "false"
                ],
                [
                  "test_print_tas_stat",
                  "false"
                ],
                [
                  "test_stat_ta_tss",
                  "false"
                ],
                [
                  "test_detect_tag_region",
                  "false"
                ],
                [
                  "test_compare_ta_gff",
                  "false"
                ],
                [
                  "test_del_attributes",
                  "false"
                ],
                [
                  "test_read_tas_file",
                  "false"
                ],
                [
                  "test_assign_tss",
                  "false"
                ],
                [
                  "test_stat_ta_gff",
                  "false"
                ],
                [
                  "test_compare_tran_tss",
                  "false"
                ],
                [
                  "test_print_tag_stat",
                  "false"
                ],
                [
                  "test_detect_tas_region",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_read_tag_file",
                  "false"
                ],
                [
                  "test_assign_parent",
                  "false"
                ],
                [
                  "test_print_tas_stat",
                  "false"
                ],
                [
                  "test_stat_ta_tss",
                  "false"
                ],
                [
                  "test_detect_tag_region",
                  "false"
                ],
                [
                  "test_compare_ta_gff",
                  "false"
                ],
                [
                  "test_del_attributes",
                  "false"
                ],
                [
                  "test_read_tas_file",
                  "false"
                ],
                [
                  "test_assign_tss",
                  "false"
                ],
                [
                  "test_stat_ta_gff",
                  "false"
                ],
                [
                  "test_compare_tran_tss",
                  "false"
                ],
                [
                  "test_print_tag_stat",
                  "false"
                ],
                [
                  "test_detect_tas_region",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                "false"
              ],
              [
                "test_assign_parent",
                "false"
              ],
              [
                "test_print_tas_stat",
                "false"
              ],
              [
                "test_stat_ta_tss",
                "false"
              ],
              [
                "test_detect_tag_region",
                "false"
              ],
              [
                "test_compare_ta_gff",
                "false"
              ],
              [
                "test_del_attributes",
                "false"
              ],
              [
                "test_read_tas_file",
                "false"
              ],
              [
                "test_assign_tss",
                "false"
              ],
              [
                "test_stat_ta_gff",
                "false"
              ],
              [
                "test_compare_tran_tss",
                "false"
              ],
              [
                "test_print_tag_stat",
                "false"
              ],
              [
                "test_detect_tas_region",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                "false"
              ],
              [
                "test_assign_parent",
                "false"
              ],
              [
                "test_print_tas_stat",
                "false"
              ],
              [
                "test_stat_ta_tss",
                "false"
              ],
              [
                "test_detect_tag_region",
                "false"
              ],
              [
                "test_compare_ta_gff",
                "false"
              ],
              [
                "test_del_attributes",
                "false"
              ],
              [
                "test_read_tas_file",
                "false"
              ],
              [
                "test_assign_tss",
                "false"
              ],
              [
                "test_stat_ta_gff",
                "false"
              ],
              [
                "test_compare_tran_tss",
                "false"
              ],
              [
                "test_print_tag_stat",
                "false"
              ],
              [
                "test_detect_tas_region",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_read_tag_file",
                []
              ],
              [
                "test_assign_parent",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_print_tas_stat",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_stat_ta_tss",
                []
              ],
              [
                "test_detect_tag_region",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_ta_gff",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_del_attributes",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_read_tas_file",
                []
              ],
              [
                "test_assign_tss",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_stat_ta_gff",
                []
              ],
              [
                "test_compare_tran_tss",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_print_tag_stat",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_tas_region",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                "false"
              ],
              [
                "test_assign_parent",
                "false"
              ],
              [
                "test_print_tas_stat",
                "false"
              ],
              [
                "test_stat_ta_tss",
                "false"
              ],
              [
                "test_detect_tag_region",
                "false"
              ],
              [
                "test_compare_ta_gff",
                "false"
              ],
              [
                "test_del_attributes",
                "false"
              ],
              [
                "test_read_tas_file",
                "false"
              ],
              [
                "test_assign_tss",
                "false"
              ],
              [
                "test_stat_ta_gff",
                "false"
              ],
              [
                "test_compare_tran_tss",
                "false"
              ],
              [
                "test_print_tag_stat",
                "false"
              ],
              [
                "test_detect_tas_region",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_read_tag_file",
                "true"
              ],
              [
                "test_assign_parent",
                "false"
              ],
              [
                "test_print_tas_stat",
                "false"
              ],
              [
                "test_stat_ta_tss",
                "false"
              ],
              [
                "test_detect_tag_region",
                "false"
              ],
              [
                "test_compare_ta_gff",
                "false"
              ],
              [
                "test_del_attributes",
                "false"
              ],
              [
                "test_read_tas_file",
                "true"
              ],
              [
                "test_assign_tss",
                "false"
              ],
              [
                "test_stat_ta_gff",
                "false"
              ],
              [
                "test_compare_tran_tss",
                "false"
              ],
              [
                "test_print_tag_stat",
                "false"
              ],
              [
                "test_detect_tas_region",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_read_tag_file",
                  "0"
                ],
                [
                  "test_assign_parent",
                  "0"
                ],
                [
                  "test_print_tas_stat",
                  "0"
                ],
                [
                  "test_stat_ta_tss",
                  "0"
                ],
                [
                  "test_detect_tag_region",
                  "0"
                ],
                [
                  "test_compare_ta_gff",
                  "0"
                ],
                [
                  "test_del_attributes",
                  "0"
                ],
                [
                  "test_read_tas_file",
                  "0"
                ],
                [
                  "test_assign_tss",
                  "0"
                ],
                [
                  "test_stat_ta_gff",
                  "0"
                ],
                [
                  "test_compare_tran_tss",
                  "0"
                ],
                [
                  "test_print_tag_stat",
                  "0"
                ],
                [
                  "test_detect_tas_region",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_read_tag_file",
                  "0"
                ],
                [
                  "test_assign_parent",
                  "0"
                ],
                [
                  "test_print_tas_stat",
                  "0"
                ],
                [
                  "test_stat_ta_tss",
                  "0"
                ],
                [
                  "test_detect_tag_region",
                  "0"
                ],
                [
                  "test_compare_ta_gff",
                  "0"
                ],
                [
                  "test_del_attributes",
                  "0"
                ],
                [
                  "test_read_tas_file",
                  "0"
                ],
                [
                  "test_assign_tss",
                  "0"
                ],
                [
                  "test_stat_ta_gff",
                  "0"
                ],
                [
                  "test_compare_tran_tss",
                  "0"
                ],
                [
                  "test_print_tag_stat",
                  "0"
                ],
                [
                  "test_detect_tas_region",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                "false"
              ],
              [
                "test_assign_parent",
                "false"
              ],
              [
                "test_print_tas_stat",
                "false"
              ],
              [
                "test_stat_ta_tss",
                "false"
              ],
              [
                "test_detect_tag_region",
                "false"
              ],
              [
                "test_compare_ta_gff",
                "false"
              ],
              [
                "test_del_attributes",
                "false"
              ],
              [
                "test_read_tas_file",
                "false"
              ],
              [
                "test_assign_tss",
                "false"
              ],
              [
                "test_stat_ta_gff",
                "false"
              ],
              [
                "test_compare_tran_tss",
                "false"
              ],
              [
                "test_print_tag_stat",
                "false"
              ],
              [
                "test_detect_tas_region",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                "false"
              ],
              [
                "test_assign_parent",
                "false"
              ],
              [
                "test_print_tas_stat",
                "false"
              ],
              [
                "test_stat_ta_tss",
                "false"
              ],
              [
                "test_detect_tag_region",
                "false"
              ],
              [
                "test_compare_ta_gff",
                "false"
              ],
              [
                "test_del_attributes",
                "false"
              ],
              [
                "test_read_tas_file",
                "false"
              ],
              [
                "test_assign_tss",
                "false"
              ],
              [
                "test_stat_ta_gff",
                "false"
              ],
              [
                "test_compare_tran_tss",
                "false"
              ],
              [
                "test_print_tag_stat",
                "false"
              ],
              [
                "test_detect_tas_region",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                "3"
              ],
              [
                "test_assign_parent",
                "2"
              ],
              [
                "test_print_tas_stat",
                "1"
              ],
              [
                "test_stat_ta_tss",
                "5"
              ],
              [
                "test_detect_tag_region",
                "1"
              ],
              [
                "test_compare_ta_gff",
                "2"
              ],
              [
                "test_del_attributes",
                "1"
              ],
              [
                "test_read_tas_file",
                "4"
              ],
              [
                "test_assign_tss",
                "2"
              ],
              [
                "test_stat_ta_gff",
                "6"
              ],
              [
                "test_compare_tran_tss",
                "1"
              ],
              [
                "test_print_tag_stat",
                "1"
              ],
              [
                "test_detect_tas_region",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                [
                  "stats",
                  "tas",
                  "gff_file",
                  "gffs",
                  "region",
                  "ta_file"
                ]
              ],
              [
                "test_assign_parent",
                [
                  "gffs",
                  "trans"
                ]
              ],
              [
                "test_print_tas_stat",
                [
                  "stat",
                  "out"
                ]
              ],
              [
                "test_stat_ta_tss",
                [
                  "out_ta_file",
                  "datas",
                  "stat_file",
                  "attributes",
                  "tss_file",
                  "ta_file",
                  "out_tss_file"
                ]
              ],
              [
                "test_detect_tag_region",
                [
                  "out_t",
                  "stats",
                  "out_g",
                  "gffs",
                  "trans"
                ]
              ],
              [
                "test_compare_ta_gff",
                [
                  "tran_type",
                  "stats",
                  "check",
                  "gffs",
                  "trans"
                ]
              ],
              [
                "test_del_attributes",
                [
                  "string"
                ]
              ],
              [
                "test_read_tas_file",
                [
                  "tsss_uni",
                  "tas",
                  "tsss",
                  "tss_file",
                  "ta_file",
                  "tas_uni"
                ]
              ],
              [
                "test_assign_tss",
                [
                  "tsss",
                  "trans"
                ]
              ],
              [
                "test_stat_ta_gff",
                [
                  "out_ta_file",
                  "out_gff_file",
                  "datas",
                  "stat_file",
                  "gff_file",
                  "attributes",
                  "ta_file"
                ]
              ],
              [
                "test_compare_tran_tss",
                [
                  "stat",
                  "tas",
                  "tsss",
                  "out"
                ]
              ],
              [
                "test_print_tag_stat",
                [
                  "stats",
                  "out"
                ]
              ],
              [
                "test_detect_tas_region",
                [
                  "stat",
                  "out_tss",
                  "tsss",
                  "out",
                  "trans"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_assign_parent",
                [
                  "self.example"
                ]
              ],
              [
                "test_print_tas_stat",
                [
                  "self.example"
                ]
              ],
              [
                "test_stat_ta_tss",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_tag_region",
                [
                  "self.example"
                ]
              ],
              [
                "test_compare_ta_gff",
                [
                  "self.example"
                ]
              ],
              [
                "test_del_attributes",
                [
                  "self.example"
                ]
              ],
              [
                "test_read_tas_file",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_assign_tss",
                [
                  "self.example"
                ]
              ],
              [
                "test_stat_ta_gff",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_tran_tss",
                [
                  "self.example"
                ]
              ],
              [
                "test_print_tag_stat",
                [
                  "self.example"
                ]
              ],
              [
                "test_detect_tas_region",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5019787756306828,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_print_tas_stat",
                  "test_compare_ta_gff",
                  0.7265004686191533
                ],
                [
                  "test_del_attributes",
                  "test_assign_parent",
                  0.7074404279644863
                ],
                [
                  "test_compare_tran_tss",
                  "test_compare_ta_gff",
                  0.8163982828463067
                ],
                [
                  "test_read_tag_file",
                  "test_assign_parent",
                  0.4709380868055908
                ],
                [
                  "test_assign_parent",
                  "test_stat_ta_gff",
                  0.13996696529719763
                ],
                [
                  "test_del_attributes",
                  "test_compare_tran_tss",
                  0.3635119493241879
                ],
                [
                  "test_compare_tran_tss",
                  "test_detect_tag_region",
                  0.8132462608891092
                ],
                [
                  "test_del_attributes",
                  "test_print_tas_stat",
                  0.32162488816300516
                ],
                [
                  "test_print_tas_stat",
                  "test_stat_ta_gff",
                  0.27409261843092536
                ],
                [
                  "test_del_attributes",
                  "test_read_tag_file",
                  0.23378595005975902
                ],
                [
                  "test_compare_tran_tss",
                  "test_stat_ta_tss",
                  0.27335508455926494
                ],
                [
                  "test_compare_ta_gff",
                  "test_stat_ta_gff",
                  0.13625139581230242
                ],
                [
                  "test_read_tas_file",
                  "test_stat_ta_gff",
                  0.5238504340057246
                ],
                [
                  "test_stat_ta_tss",
                  "test_assign_parent",
                  0.14937326810762402
                ],
                [
                  "test_assign_tss",
                  "test_print_tag_stat",
                  0.5784553841973344
                ],
                [
                  "test_print_tas_stat",
                  "test_stat_ta_tss",
                  0.3543305730531749
                ],
                [
                  "test_read_tas_file",
                  "test_assign_parent",
                  0.27843090273244964
                ],
                [
                  "test_detect_tas_region",
                  "test_read_tag_file",
                  0.6725033053932965
                ],
                [
                  "test_compare_tran_tss",
                  "test_stat_ta_gff",
                  0.1895563766465879
                ],
                [
                  "test_stat_ta_tss",
                  "test_print_tag_stat",
                  0.21547866876210992
                ],
                [
                  "test_read_tas_file",
                  "test_compare_ta_gff",
                  0.3359981354642017
                ],
                [
                  "test_read_tas_file",
                  "test_detect_tag_region",
                  0.3249619207559864
                ],
                [
                  "test_read_tas_file",
                  "test_print_tas_stat",
                  0.48914231753241383
                ],
                [
                  "test_compare_ta_gff",
                  "test_print_tag_stat",
                  0.8848256435172064
                ],
                [
                  "test_detect_tas_region",
                  "test_stat_ta_gff",
                  0.3012480117837467
                ],
                [
                  "test_detect_tag_region",
                  "test_compare_ta_gff",
                  0.9677733038782937
                ],
                [
                  "test_del_attributes",
                  "test_print_tag_stat",
                  0.24895735967347327
                ],
                [
                  "test_assign_tss",
                  "test_stat_ta_gff",
                  0.1283314819687958
                ],
                [
                  "test_read_tag_file",
                  "test_print_tag_stat",
                  0.8293889431927572
                ],
                [
                  "test_detect_tas_region",
                  "test_stat_ta_tss",
                  0.39495935134267596
                ],
                [
                  "test_read_tas_file",
                  "test_detect_tas_region",
                  0.4845089645305522
                ],
                [
                  "test_print_tas_stat",
                  "test_print_tag_stat",
                  0.7717377283333695
                ],
                [
                  "test_read_tas_file",
                  "test_compare_tran_tss",
                  0.39670360083006584
                ],
                [
                  "test_compare_tran_tss",
                  "test_assign_parent",
                  0.5910602335889583
                ],
                [
                  "test_detect_tas_region",
                  "test_print_tas_stat",
                  0.8663313441634259
                ],
                [
                  "test_detect_tas_region",
                  "test_compare_tran_tss",
                  0.8979840685178225
                ],
                [
                  "test_detect_tas_region",
                  "test_print_tag_stat",
                  0.7172123147783909
                ],
                [
                  "test_detect_tag_region",
                  "test_stat_ta_gff",
                  0.14930398170392148
                ],
                [
                  "test_del_attributes",
                  "test_stat_ta_gff",
                  0.11326582813830392
                ],
                [
                  "test_assign_tss",
                  "test_compare_ta_gff",
                  0.6294455409430305
                ],
                [
                  "test_del_attributes",
                  "test_compare_ta_gff",
                  0.24328357870675896
                ],
                [
                  "test_stat_ta_tss",
                  "test_stat_ta_gff",
                  0.8915872888385749
                ],
                [
                  "test_read_tas_file",
                  "test_stat_ta_tss",
                  0.6093438220111687
                ],
                [
                  "test_detect_tas_region",
                  "test_compare_ta_gff",
                  0.699962189447684
                ],
                [
                  "test_stat_ta_tss",
                  "test_read_tag_file",
                  0.3798029397641868
                ],
                [
                  "test_print_tas_stat",
                  "test_compare_tran_tss",
                  0.8919676248378463
                ],
                [
                  "test_stat_ta_tss",
                  "test_compare_ta_gff",
                  0.16743951339729543
                ],
                [
                  "test_read_tas_file",
                  "test_print_tag_stat",
                  0.33393076075663397
                ],
                [
                  "test_read_tas_file",
                  "test_assign_tss",
                  0.3226613151982125
                ],
                [
                  "test_assign_tss",
                  "test_assign_parent",
                  0.9079689089188423
                ],
                [
                  "test_read_tas_file",
                  "test_del_attributes",
                  0.18916010217834134
                ],
                [
                  "test_assign_tss",
                  "test_read_tag_file",
                  0.5783602761371137
                ],
                [
                  "test_detect_tas_region",
                  "test_del_attributes",
                  0.3375448514050147
                ],
                [
                  "test_stat_ta_tss",
                  "test_detect_tag_region",
                  0.18347985278053255
                ],
                [
                  "test_assign_tss",
                  "test_print_tas_stat",
                  0.5999965527444463
                ],
                [
                  "test_assign_tss",
                  "test_compare_tran_tss",
                  0.6852107014240845
                ],
                [
                  "test_compare_tran_tss",
                  "test_read_tag_file",
                  0.7400688818351467
                ],
                [
                  "test_print_tas_stat",
                  "test_read_tag_file",
                  0.6952696274555067
                ],
                [
                  "test_read_tag_file",
                  "test_detect_tag_region",
                  0.8899982292366816
                ],
                [
                  "test_assign_parent",
                  "test_print_tag_stat",
                  0.46735732597597346
                ],
                [
                  "test_read_tag_file",
                  "test_compare_ta_gff",
                  0.8831813116582645
                ],
                [
                  "test_detect_tag_region",
                  "test_print_tag_stat",
                  0.8997416417618087
                ],
                [
                  "test_del_attributes",
                  "test_stat_ta_tss",
                  0.13123866179308688
                ],
                [
                  "test_assign_tss",
                  "test_stat_ta_tss",
                  0.1587546064049371
                ],
                [
                  "test_assign_tss",
                  "test_detect_tag_region",
                  0.625787969822659
                ],
                [
                  "test_detect_tas_region",
                  "test_detect_tag_region",
                  0.7498798928089566
                ],
                [
                  "test_read_tas_file",
                  "test_read_tag_file",
                  0.5822691603153342
                ],
                [
                  "test_detect_tag_region",
                  "test_assign_parent",
                  0.5013596929192875
                ],
                [
                  "test_del_attributes",
                  "test_assign_tss",
                  0.619435073124592
                ],
                [
                  "test_print_tas_stat",
                  "test_detect_tag_region",
                  0.7348593465975659
                ],
                [
                  "test_print_tas_stat",
                  "test_assign_parent",
                  0.5145857982633071
                ],
                [
                  "test_read_tag_file",
                  "test_stat_ta_gff",
                  0.35847244821987656
                ],
                [
                  "test_del_attributes",
                  "test_detect_tag_region",
                  0.23859999854750488
                ],
                [
                  "test_compare_tran_tss",
                  "test_print_tag_stat",
                  0.7665516336100395
                ],
                [
                  "test_print_tag_stat",
                  "test_stat_ta_gff",
                  0.17899550843207843
                ],
                [
                  "test_detect_tas_region",
                  "test_assign_tss",
                  0.6042691188015116
                ],
                [
                  "test_compare_ta_gff",
                  "test_assign_parent",
                  0.5099546198440125
                ],
                [
                  "test_detect_tas_region",
                  "test_assign_parent",
                  0.5197823069114039
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_read_tag_file",
                "false"
              ],
              [
                "test_assign_parent",
                "false"
              ],
              [
                "test_print_tas_stat",
                "false"
              ],
              [
                "test_stat_ta_tss",
                "false"
              ],
              [
                "test_detect_tag_region",
                "false"
              ],
              [
                "test_compare_ta_gff",
                "false"
              ],
              [
                "test_del_attributes",
                "false"
              ],
              [
                "test_read_tas_file",
                "false"
              ],
              [
                "test_assign_tss",
                "false"
              ],
              [
                "test_stat_ta_gff",
                "false"
              ],
              [
                "test_compare_tran_tss",
                "false"
              ],
              [
                "test_print_tag_stat",
                "false"
              ],
              [
                "test_detect_tas_region",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 13
      }
    ]
  },
  {
    "name": "tests_\u0026_test_plot_coverage_table.py",
    "testCases": [
      {
        "name": "TestPlotCoverageTable",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_plot_table",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_plot_table",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_plot_table",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_plot_table",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_plot_table",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_plot_table",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_plot_table",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_plot_table",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                [
                  "plots"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                [
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_table",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_detect_coverage_term.py",
    "testCases": [
      {
        "name": "TestCoverageTerminator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compare_replicates",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_coverage2term",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_term",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_transtermhp",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_print_table",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_print2file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_first_term",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_ta",
                  "[PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_get_coverage",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compare_replicates",
                  "[]"
                ],
                [
                  "test_coverage2term",
                  "[]"
                ],
                [
                  "test_compare_term",
                  "[]"
                ],
                [
                  "test_compare_transtermhp",
                  "[]"
                ],
                [
                  "test_print_table",
                  "[]"
                ],
                [
                  "test_print2file",
                  "[]"
                ],
                [
                  "test_first_term",
                  "[]"
                ],
                [
                  "test_compare_ta",
                  "[]"
                ],
                [
                  "test_get_coverage",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compare_replicates",
                  "true"
                ],
                [
                  "test_coverage2term",
                  "false"
                ],
                [
                  "test_compare_term",
                  "false"
                ],
                [
                  "test_compare_transtermhp",
                  "true"
                ],
                [
                  "test_print_table",
                  "false"
                ],
                [
                  "test_print2file",
                  "false"
                ],
                [
                  "test_first_term",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "true"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compare_replicates",
                  "false"
                ],
                [
                  "test_coverage2term",
                  "false"
                ],
                [
                  "test_compare_term",
                  "false"
                ],
                [
                  "test_compare_transtermhp",
                  "false"
                ],
                [
                  "test_print_table",
                  "false"
                ],
                [
                  "test_print2file",
                  "false"
                ],
                [
                  "test_first_term",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compare_replicates",
                  "true"
                ],
                [
                  "test_coverage2term",
                  "false"
                ],
                [
                  "test_compare_term",
                  "true"
                ],
                [
                  "test_compare_transtermhp",
                  "false"
                ],
                [
                  "test_print_table",
                  "true"
                ],
                [
                  "test_print2file",
                  "false"
                ],
                [
                  "test_first_term",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compare_replicates",
                  "false"
                ],
                [
                  "test_coverage2term",
                  "false"
                ],
                [
                  "test_compare_term",
                  "false"
                ],
                [
                  "test_compare_transtermhp",
                  "false"
                ],
                [
                  "test_print_table",
                  "false"
                ],
                [
                  "test_print2file",
                  "false"
                ],
                [
                  "test_first_term",
                  "false"
                ],
                [
                  "test_compare_ta",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                "false"
              ],
              [
                "test_coverage2term",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_compare_transtermhp",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_print2file",
                "false"
              ],
              [
                "test_first_term",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                "false"
              ],
              [
                "test_coverage2term",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_compare_transtermhp",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_print2file",
                "false"
              ],
              [
                "test_first_term",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_replicates",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_coverage2term",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_term",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_transtermhp",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_table",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_print2file",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_first_term",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                "false"
              ],
              [
                "test_coverage2term",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_compare_transtermhp",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_print2file",
                "false"
              ],
              [
                "test_first_term",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_replicates",
                "true"
              ],
              [
                "test_coverage2term",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_compare_transtermhp",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_print2file",
                "false"
              ],
              [
                "test_first_term",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_get_coverage",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compare_replicates",
                  "0"
                ],
                [
                  "test_coverage2term",
                  "0"
                ],
                [
                  "test_compare_term",
                  "0"
                ],
                [
                  "test_compare_transtermhp",
                  "0"
                ],
                [
                  "test_print_table",
                  "0"
                ],
                [
                  "test_print2file",
                  "0"
                ],
                [
                  "test_first_term",
                  "0"
                ],
                [
                  "test_compare_ta",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compare_replicates",
                  "0"
                ],
                [
                  "test_coverage2term",
                  "0"
                ],
                [
                  "test_compare_term",
                  "0"
                ],
                [
                  "test_compare_transtermhp",
                  "0"
                ],
                [
                  "test_print_table",
                  "0"
                ],
                [
                  "test_print2file",
                  "0"
                ],
                [
                  "test_first_term",
                  "0"
                ],
                [
                  "test_compare_ta",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                "false"
              ],
              [
                "test_coverage2term",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_compare_transtermhp",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_print2file",
                "false"
              ],
              [
                "test_first_term",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                "false"
              ],
              [
                "test_coverage2term",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_compare_transtermhp",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_print2file",
                "false"
              ],
              [
                "test_first_term",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                "8"
              ],
              [
                "test_coverage2term",
                "1"
              ],
              [
                "test_compare_term",
                "7"
              ],
              [
                "test_compare_transtermhp",
                "2"
              ],
              [
                "test_print_table",
                "4"
              ],
              [
                "test_print2file",
                "2"
              ],
              [
                "test_first_term",
                "4"
              ],
              [
                "test_compare_ta",
                "1"
              ],
              [
                "test_get_coverage",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                [
                  "args",
                  "diff_cover",
                  "detect_num",
                  "term_covers",
                  "term_datas",
                  "texs",
                  "diff",
                  "ref_datas",
                  "cond"
                ]
              ],
              [
                "test_coverage2term",
                [
                  "args",
                  "hl_covers",
                  "hl_poss",
                  "term_covers",
                  "term",
                  "covers"
                ]
              ],
              [
                "test_compare_term",
                [
                  "terms",
                  "term"
                ]
              ],
              [
                "test_compare_transtermhp",
                [
                  "terms",
                  "methods",
                  "hps",
                  "poss"
                ]
              ],
              [
                "test_print_table",
                [
                  "args",
                  "out_t",
                  "term"
                ]
              ],
              [
                "test_print2file",
                [
                  "out_t",
                  "args",
                  "term",
                  "out"
                ]
              ],
              [
                "test_first_term",
                [
                  "detect_terms",
                  "detect",
                  "term"
                ]
              ],
              [
                "test_compare_ta",
                [
                  "express",
                  "trans"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "args",
                  "diff_cover",
                  "wigs",
                  "term_datas",
                  "term",
                  "texs",
                  "diff",
                  "detect_nums"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_replicates",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_coverage2term",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_compare_term",
                []
              ],
              [
                "test_compare_transtermhp",
                [
                  "self.example"
                ]
              ],
              [
                "test_print_table",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_print2file",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_first_term",
                []
              ],
              [
                "test_compare_ta",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "self.mock_args"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5853749689870377,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compare_transtermhp",
                  "test_print_table",
                  0.5221460815888466
                ],
                [
                  "test_coverage2term",
                  "test_get_coverage",
                  0.9094781484705169
                ],
                [
                  "test_get_coverage",
                  "test_compare_term",
                  0.6873652579771649
                ],
                [
                  "test_compare_transtermhp",
                  "test_first_term",
                  0.4172594653133671
                ],
                [
                  "test_first_term",
                  "test_print_table",
                  0.3506876488336735
                ],
                [
                  "test_coverage2term",
                  "test_first_term",
                  0.4238970932007773
                ],
                [
                  "test_coverage2term",
                  "test_print_table",
                  0.8314699903199947
                ],
                [
                  "test_compare_replicates",
                  "test_print2file",
                  0.8351108069625248
                ],
                [
                  "test_compare_ta",
                  "test_print2file",
                  0.3307592922378892
                ],
                [
                  "test_compare_transtermhp",
                  "test_print2file",
                  0.5498739211374217
                ],
                [
                  "test_compare_ta",
                  "test_compare_transtermhp",
                  0.44263520637871306
                ],
                [
                  "test_compare_ta",
                  "test_first_term",
                  0.2689170581811257
                ],
                [
                  "test_compare_ta",
                  "test_coverage2term",
                  0.30808244366192983
                ],
                [
                  "test_coverage2term",
                  "test_print2file",
                  0.8604847322522539
                ],
                [
                  "test_get_coverage",
                  "test_first_term",
                  0.4626759110627283
                ],
                [
                  "test_compare_ta",
                  "test_get_coverage",
                  0.28702435214351457
                ],
                [
                  "test_compare_replicates",
                  "test_print_table",
                  0.8156602079488318
                ],
                [
                  "test_compare_transtermhp",
                  "test_compare_replicates",
                  0.5874118945279513
                ],
                [
                  "test_coverage2term",
                  "test_compare_term",
                  0.7113559796727261
                ],
                [
                  "test_compare_term",
                  "test_print_table",
                  0.6118516053579199
                ],
                [
                  "test_compare_replicates",
                  "test_compare_term",
                  0.6902207813311505
                ],
                [
                  "test_compare_transtermhp",
                  "test_coverage2term",
                  0.6059689464058203
                ],
                [
                  "test_get_coverage",
                  "test_print2file",
                  0.8426338061024767
                ],
                [
                  "test_compare_ta",
                  "test_compare_term",
                  0.347055602998554
                ],
                [
                  "test_compare_transtermhp",
                  "test_compare_term",
                  0.5775801868823457
                ],
                [
                  "test_compare_replicates",
                  "test_first_term",
                  0.44169181665959006
                ],
                [
                  "test_compare_term",
                  "test_print2file",
                  0.6512610792313756
                ],
                [
                  "test_first_term",
                  "test_print2file",
                  0.38120063929150466
                ],
                [
                  "test_compare_replicates",
                  "test_coverage2term",
                  0.8819619597196038
                ],
                [
                  "test_compare_ta",
                  "test_compare_replicates",
                  0.34674650546298375
                ],
                [
                  "test_compare_replicates",
                  "test_get_coverage",
                  0.932151113903436
                ],
                [
                  "test_print_table",
                  "test_print2file",
                  0.9416935904921765
                ],
                [
                  "test_compare_transtermhp",
                  "test_get_coverage",
                  0.615776624323975
                ],
                [
                  "test_get_coverage",
                  "test_print_table",
                  0.8307977333835949
                ],
                [
                  "test_compare_ta",
                  "test_print_table",
                  0.26871820607216357
                ],
                [
                  "test_compare_term",
                  "test_first_term",
                  0.503893194042737
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_replicates",
                "false"
              ],
              [
                "test_coverage2term",
                "false"
              ],
              [
                "test_compare_term",
                "false"
              ],
              [
                "test_compare_transtermhp",
                "false"
              ],
              [
                "test_print_table",
                "false"
              ],
              [
                "test_print2file",
                "false"
              ],
              [
                "test_first_term",
                "false"
              ],
              [
                "test_compare_ta",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "tests_\u0026_test_optimize_TSSpredator.py",
    "testCases": [
      {
        "name": "TestOptimizeTSSpredator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_run_tss_and_stat",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_initiate",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_gen_config",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_extend_data",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_run_small_change_part",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_print_lib",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_scoring_function",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_run_random_part",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_plus_process",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_reload_data",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_optimization_process",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_small_change",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_optimization",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_minus_process",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_read_predict_manual_gff",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_check_overlap",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_load_stat_csv",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_gen_large_random",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_import_lib",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_comparison",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_compare_manual_predict",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_compute_stat",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_run_large_change_part",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_run_tss_and_stat",
                  "[]"
                ],
                [
                  "test_initiate",
                  "[]"
                ],
                [
                  "test_gen_config",
                  "[]"
                ],
                [
                  "test_extend_data",
                  "[]"
                ],
                [
                  "test_run_small_change_part",
                  "[]"
                ],
                [
                  "test_print_lib",
                  "[]"
                ],
                [
                  "test_scoring_function",
                  "[]"
                ],
                [
                  "test_run_random_part",
                  "[]"
                ],
                [
                  "test_plus_process",
                  "[]"
                ],
                [
                  "test_reload_data",
                  "[]"
                ],
                [
                  "test_optimization_process",
                  "[]"
                ],
                [
                  "test_small_change",
                  "[]"
                ],
                [
                  "test_optimization",
                  "[]"
                ],
                [
                  "test_minus_process",
                  "[]"
                ],
                [
                  "test_read_predict_manual_gff",
                  "[]"
                ],
                [
                  "test_check_overlap",
                  "[]"
                ],
                [
                  "test_load_stat_csv",
                  "[]"
                ],
                [
                  "test_gen_large_random",
                  "[]"
                ],
                [
                  "test_import_lib",
                  "[]"
                ],
                [
                  "test_comparison",
                  "[]"
                ],
                [
                  "test_compare_manual_predict",
                  "[]"
                ],
                [
                  "test_compute_stat",
                  "[]"
                ],
                [
                  "test_run_large_change_part",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_run_tss_and_stat",
                  "true"
                ],
                [
                  "test_initiate",
                  "false"
                ],
                [
                  "test_gen_config",
                  "true"
                ],
                [
                  "test_extend_data",
                  "false"
                ],
                [
                  "test_run_small_change_part",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_scoring_function",
                  "false"
                ],
                [
                  "test_run_random_part",
                  "false"
                ],
                [
                  "test_plus_process",
                  "false"
                ],
                [
                  "test_reload_data",
                  "false"
                ],
                [
                  "test_optimization_process",
                  "true"
                ],
                [
                  "test_small_change",
                  "false"
                ],
                [
                  "test_optimization",
                  "true"
                ],
                [
                  "test_minus_process",
                  "false"
                ],
                [
                  "test_read_predict_manual_gff",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_load_stat_csv",
                  "false"
                ],
                [
                  "test_gen_large_random",
                  "false"
                ],
                [
                  "test_import_lib",
                  "true"
                ],
                [
                  "test_comparison",
                  "true"
                ],
                [
                  "test_compare_manual_predict",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ],
                [
                  "test_run_large_change_part",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_run_tss_and_stat",
                  "false"
                ],
                [
                  "test_initiate",
                  "false"
                ],
                [
                  "test_gen_config",
                  "false"
                ],
                [
                  "test_extend_data",
                  "false"
                ],
                [
                  "test_run_small_change_part",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_scoring_function",
                  "false"
                ],
                [
                  "test_run_random_part",
                  "false"
                ],
                [
                  "test_plus_process",
                  "false"
                ],
                [
                  "test_reload_data",
                  "false"
                ],
                [
                  "test_optimization_process",
                  "false"
                ],
                [
                  "test_small_change",
                  "false"
                ],
                [
                  "test_optimization",
                  "false"
                ],
                [
                  "test_minus_process",
                  "false"
                ],
                [
                  "test_read_predict_manual_gff",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_load_stat_csv",
                  "false"
                ],
                [
                  "test_gen_large_random",
                  "false"
                ],
                [
                  "test_import_lib",
                  "false"
                ],
                [
                  "test_comparison",
                  "false"
                ],
                [
                  "test_compare_manual_predict",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ],
                [
                  "test_run_large_change_part",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_run_tss_and_stat",
                  "false"
                ],
                [
                  "test_initiate",
                  "false"
                ],
                [
                  "test_gen_config",
                  "false"
                ],
                [
                  "test_extend_data",
                  "false"
                ],
                [
                  "test_run_small_change_part",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_scoring_function",
                  "false"
                ],
                [
                  "test_run_random_part",
                  "false"
                ],
                [
                  "test_plus_process",
                  "false"
                ],
                [
                  "test_reload_data",
                  "false"
                ],
                [
                  "test_optimization_process",
                  "false"
                ],
                [
                  "test_small_change",
                  "false"
                ],
                [
                  "test_optimization",
                  "false"
                ],
                [
                  "test_minus_process",
                  "false"
                ],
                [
                  "test_read_predict_manual_gff",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_load_stat_csv",
                  "false"
                ],
                [
                  "test_gen_large_random",
                  "false"
                ],
                [
                  "test_import_lib",
                  "false"
                ],
                [
                  "test_comparison",
                  "false"
                ],
                [
                  "test_compare_manual_predict",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ],
                [
                  "test_run_large_change_part",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_run_tss_and_stat",
                  "false"
                ],
                [
                  "test_initiate",
                  "false"
                ],
                [
                  "test_gen_config",
                  "false"
                ],
                [
                  "test_extend_data",
                  "false"
                ],
                [
                  "test_run_small_change_part",
                  "false"
                ],
                [
                  "test_print_lib",
                  "false"
                ],
                [
                  "test_scoring_function",
                  "false"
                ],
                [
                  "test_run_random_part",
                  "false"
                ],
                [
                  "test_plus_process",
                  "false"
                ],
                [
                  "test_reload_data",
                  "false"
                ],
                [
                  "test_optimization_process",
                  "false"
                ],
                [
                  "test_small_change",
                  "false"
                ],
                [
                  "test_optimization",
                  "false"
                ],
                [
                  "test_minus_process",
                  "false"
                ],
                [
                  "test_read_predict_manual_gff",
                  "false"
                ],
                [
                  "test_check_overlap",
                  "false"
                ],
                [
                  "test_load_stat_csv",
                  "false"
                ],
                [
                  "test_gen_large_random",
                  "false"
                ],
                [
                  "test_import_lib",
                  "false"
                ],
                [
                  "test_comparison",
                  "false"
                ],
                [
                  "test_compare_manual_predict",
                  "false"
                ],
                [
                  "test_compute_stat",
                  "false"
                ],
                [
                  "test_run_large_change_part",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_tss_and_stat",
                "false"
              ],
              [
                "test_initiate",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_extend_data",
                "false"
              ],
              [
                "test_run_small_change_part",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_scoring_function",
                "false"
              ],
              [
                "test_run_random_part",
                "false"
              ],
              [
                "test_plus_process",
                "false"
              ],
              [
                "test_reload_data",
                "false"
              ],
              [
                "test_optimization_process",
                "false"
              ],
              [
                "test_small_change",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ],
              [
                "test_minus_process",
                "false"
              ],
              [
                "test_read_predict_manual_gff",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_load_stat_csv",
                "false"
              ],
              [
                "test_gen_large_random",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_comparison",
                "false"
              ],
              [
                "test_compare_manual_predict",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ],
              [
                "test_run_large_change_part",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_run_tss_and_stat",
                "false"
              ],
              [
                "test_initiate",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_extend_data",
                "false"
              ],
              [
                "test_run_small_change_part",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_scoring_function",
                "false"
              ],
              [
                "test_run_random_part",
                "false"
              ],
              [
                "test_plus_process",
                "false"
              ],
              [
                "test_reload_data",
                "false"
              ],
              [
                "test_optimization_process",
                "false"
              ],
              [
                "test_small_change",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ],
              [
                "test_minus_process",
                "false"
              ],
              [
                "test_read_predict_manual_gff",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_load_stat_csv",
                "false"
              ],
              [
                "test_gen_large_random",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_comparison",
                "false"
              ],
              [
                "test_compare_manual_predict",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ],
              [
                "test_run_large_change_part",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_run_tss_and_stat",
                []
              ],
              [
                "test_initiate",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_gen_config",
                []
              ],
              [
                "test_extend_data",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_run_small_change_part",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_lib",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_scoring_function",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_random_part",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_plus_process",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_reload_data",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_optimization_process",
                []
              ],
              [
                "test_small_change",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_optimization",
                []
              ],
              [
                "test_minus_process",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_predict_manual_gff",
                []
              ],
              [
                "test_check_overlap",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_load_stat_csv",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_gen_large_random",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ],
              [
                "test_import_lib",
                []
              ],
              [
                "test_comparison",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_compare_manual_predict",
                []
              ],
              [
                "test_compute_stat",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_run_large_change_part",
                [
                  "self.mock_args",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_tss_and_stat",
                "false"
              ],
              [
                "test_initiate",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_extend_data",
                "false"
              ],
              [
                "test_run_small_change_part",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_scoring_function",
                "false"
              ],
              [
                "test_run_random_part",
                "false"
              ],
              [
                "test_plus_process",
                "false"
              ],
              [
                "test_reload_data",
                "false"
              ],
              [
                "test_optimization_process",
                "false"
              ],
              [
                "test_small_change",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ],
              [
                "test_minus_process",
                "false"
              ],
              [
                "test_read_predict_manual_gff",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_load_stat_csv",
                "false"
              ],
              [
                "test_gen_large_random",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_comparison",
                "false"
              ],
              [
                "test_compare_manual_predict",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ],
              [
                "test_run_large_change_part",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_run_tss_and_stat",
                "false"
              ],
              [
                "test_initiate",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_extend_data",
                "false"
              ],
              [
                "test_run_small_change_part",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_scoring_function",
                "false"
              ],
              [
                "test_run_random_part",
                "false"
              ],
              [
                "test_plus_process",
                "true"
              ],
              [
                "test_reload_data",
                "false"
              ],
              [
                "test_optimization_process",
                "false"
              ],
              [
                "test_small_change",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ],
              [
                "test_minus_process",
                "true"
              ],
              [
                "test_read_predict_manual_gff",
                "true"
              ],
              [
                "test_check_overlap",
                "true"
              ],
              [
                "test_load_stat_csv",
                "true"
              ],
              [
                "test_gen_large_random",
                "false"
              ],
              [
                "test_import_lib",
                "true"
              ],
              [
                "test_comparison",
                "false"
              ],
              [
                "test_compare_manual_predict",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ],
              [
                "test_run_large_change_part",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_run_tss_and_stat",
                  "0"
                ],
                [
                  "test_initiate",
                  "0"
                ],
                [
                  "test_gen_config",
                  "0"
                ],
                [
                  "test_extend_data",
                  "0"
                ],
                [
                  "test_run_small_change_part",
                  "0"
                ],
                [
                  "test_print_lib",
                  "0"
                ],
                [
                  "test_scoring_function",
                  "0"
                ],
                [
                  "test_run_random_part",
                  "0"
                ],
                [
                  "test_plus_process",
                  "0"
                ],
                [
                  "test_reload_data",
                  "0"
                ],
                [
                  "test_optimization_process",
                  "0"
                ],
                [
                  "test_small_change",
                  "0"
                ],
                [
                  "test_optimization",
                  "0"
                ],
                [
                  "test_minus_process",
                  "0"
                ],
                [
                  "test_read_predict_manual_gff",
                  "0"
                ],
                [
                  "test_check_overlap",
                  "0"
                ],
                [
                  "test_load_stat_csv",
                  "0"
                ],
                [
                  "test_gen_large_random",
                  "0"
                ],
                [
                  "test_import_lib",
                  "0"
                ],
                [
                  "test_comparison",
                  "0"
                ],
                [
                  "test_compare_manual_predict",
                  "0"
                ],
                [
                  "test_compute_stat",
                  "0"
                ],
                [
                  "test_run_large_change_part",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_run_tss_and_stat",
                  "0"
                ],
                [
                  "test_initiate",
                  "0"
                ],
                [
                  "test_gen_config",
                  "0"
                ],
                [
                  "test_extend_data",
                  "0"
                ],
                [
                  "test_run_small_change_part",
                  "0"
                ],
                [
                  "test_print_lib",
                  "0"
                ],
                [
                  "test_scoring_function",
                  "0"
                ],
                [
                  "test_run_random_part",
                  "0"
                ],
                [
                  "test_plus_process",
                  "0"
                ],
                [
                  "test_reload_data",
                  "0"
                ],
                [
                  "test_optimization_process",
                  "0"
                ],
                [
                  "test_small_change",
                  "0"
                ],
                [
                  "test_optimization",
                  "0"
                ],
                [
                  "test_minus_process",
                  "0"
                ],
                [
                  "test_read_predict_manual_gff",
                  "0"
                ],
                [
                  "test_check_overlap",
                  "0"
                ],
                [
                  "test_load_stat_csv",
                  "0"
                ],
                [
                  "test_gen_large_random",
                  "0"
                ],
                [
                  "test_import_lib",
                  "0"
                ],
                [
                  "test_comparison",
                  "0"
                ],
                [
                  "test_compare_manual_predict",
                  "0"
                ],
                [
                  "test_compute_stat",
                  "0"
                ],
                [
                  "test_run_large_change_part",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_run_tss_and_stat",
                "false"
              ],
              [
                "test_initiate",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_extend_data",
                "false"
              ],
              [
                "test_run_small_change_part",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_scoring_function",
                "false"
              ],
              [
                "test_run_random_part",
                "false"
              ],
              [
                "test_plus_process",
                "false"
              ],
              [
                "test_reload_data",
                "false"
              ],
              [
                "test_optimization_process",
                "false"
              ],
              [
                "test_small_change",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ],
              [
                "test_minus_process",
                "false"
              ],
              [
                "test_read_predict_manual_gff",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_load_stat_csv",
                "false"
              ],
              [
                "test_gen_large_random",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_comparison",
                "false"
              ],
              [
                "test_compare_manual_predict",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ],
              [
                "test_run_large_change_part",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_tss_and_stat",
                "false"
              ],
              [
                "test_initiate",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_extend_data",
                "false"
              ],
              [
                "test_run_small_change_part",
                "false"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_scoring_function",
                "false"
              ],
              [
                "test_run_random_part",
                "false"
              ],
              [
                "test_plus_process",
                "false"
              ],
              [
                "test_reload_data",
                "false"
              ],
              [
                "test_optimization_process",
                "false"
              ],
              [
                "test_small_change",
                "false"
              ],
              [
                "test_optimization",
                "false"
              ],
              [
                "test_minus_process",
                "false"
              ],
              [
                "test_read_predict_manual_gff",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_load_stat_csv",
                "false"
              ],
              [
                "test_gen_large_random",
                "false"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_comparison",
                "false"
              ],
              [
                "test_compare_manual_predict",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ],
              [
                "test_run_large_change_part",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run_tss_and_stat",
                "1"
              ],
              [
                "test_initiate",
                "4"
              ],
              [
                "test_gen_config",
                "2"
              ],
              [
                "test_extend_data",
                "1"
              ],
              [
                "test_run_small_change_part",
                "1"
              ],
              [
                "test_print_lib",
                "1"
              ],
              [
                "test_scoring_function",
                "2"
              ],
              [
                "test_run_random_part",
                "1"
              ],
              [
                "test_plus_process",
                "1"
              ],
              [
                "test_reload_data",
                "2"
              ],
              [
                "test_optimization_process",
                "1"
              ],
              [
                "test_small_change",
                "2"
              ],
              [
                "test_optimization",
                "1"
              ],
              [
                "test_minus_process",
                "1"
              ],
              [
                "test_read_predict_manual_gff",
                "2"
              ],
              [
                "test_check_overlap",
                "2"
              ],
              [
                "test_load_stat_csv",
                "3"
              ],
              [
                "test_gen_large_random",
                "2"
              ],
              [
                "test_import_lib",
                "1"
              ],
              [
                "test_comparison",
                "1"
              ],
              [
                "test_compare_manual_predict",
                "1"
              ],
              [
                "test_compute_stat",
                "2"
              ],
              [
                "test_run_large_change_part",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_run_tss_and_stat",
                [
                  "log",
                  "seeds",
                  "gff",
                  "output_prefix",
                  "datas",
                  "run_tss",
                  "set_config",
                  "best_para",
                  "stat_out",
                  "current_para",
                  "fasta",
                  "args",
                  "features",
                  "wig",
                  "list_num"
                ]
              ],
              [
                "test_initiate",
                [
                  "args",
                  "indexs",
                  "best_para",
                  "current_para",
                  "max_num"
                ]
              ],
              [
                "test_gen_config",
                [
                  "args",
                  "filename",
                  "wig",
                  "data",
                  "gff",
                  "fasta"
                ]
              ],
              [
                "test_extend_data",
                [
                  "best_para",
                  "current_para"
                ]
              ],
              [
                "test_run_small_change_part",
                [
                  "features",
                  "para",
                  "seeds",
                  "best_para",
                  "current_para",
                  "list_num"
                ]
              ],
              [
                "test_print_lib",
                [
                  "libs",
                  "out"
                ]
              ],
              [
                "test_scoring_function",
                [
                  "best",
                  "stat_value"
                ]
              ],
              [
                "test_run_random_part",
                [
                  "para",
                  "current_para",
                  "list_num"
                ]
              ],
              [
                "test_plus_process",
                [
                  "para",
                  "best_para",
                  "actions",
                  "list_num"
                ]
              ],
              [
                "test_reload_data",
                [
                  "log",
                  "datas",
                  "stat_file",
                  "best_para",
                  "list_num"
                ]
              ],
              [
                "test_optimization_process",
                [
                  "args",
                  "wig_folder",
                  "log",
                  "output_prefix",
                  "best_ref_para",
                  "indexs",
                  "best_para",
                  "stat_out",
                  "current_para",
                  "list_num"
                ]
              ],
              [
                "test_small_change",
                [
                  "para",
                  "best_para",
                  "list_num"
                ]
              ],
              [
                "test_optimization",
                [
                  "args",
                  "wig_folder",
                  "log",
                  "gff",
                  "output_prefix",
                  "fasta"
                ]
              ],
              [
                "test_minus_process",
                [
                  "para",
                  "best_para",
                  "actions",
                  "list_num"
                ]
              ],
              [
                "test_read_predict_manual_gff",
                [
                  "args",
                  "gff",
                  "num",
                  "gffs"
                ]
              ],
              [
                "test_check_overlap",
                [
                  "datas",
                  "nums"
                ]
              ],
              [
                "test_load_stat_csv",
                [
                  "datas",
                  "stat_file",
                  "best_para",
                  "list_num"
                ]
              ],
              [
                "test_gen_large_random",
                [
                  "para",
                  "index_large",
                  "best_para",
                  "list_num"
                ]
              ],
              [
                "test_import_lib",
                [
                  "args",
                  "lib_dict",
                  "wig_folder",
                  "lib_num",
                  "out"
                ]
              ],
              [
                "test_comparison",
                [
                  "args",
                  "nums"
                ]
              ],
              [
                "test_compare_manual_predict",
                [
                  "args",
                  "para_list",
                  "predict",
                  "manual",
                  "out"
                ]
              ],
              [
                "test_compute_stat",
                [
                  "datas",
                  "best",
                  "best_para",
                  "list_num"
                ]
              ],
              [
                "test_run_large_change_part",
                [
                  "features",
                  "para",
                  "seeds",
                  "best_para",
                  "current_para",
                  "list_num"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_run_tss_and_stat",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_initiate",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_gen_config",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_extend_data",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_small_change_part",
                [
                  "self.example"
                ]
              ],
              [
                "test_print_lib",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_scoring_function",
                [
                  "self.example"
                ]
              ],
              [
                "test_run_random_part",
                [
                  "self.example"
                ]
              ],
              [
                "test_plus_process",
                [
                  "self.example"
                ]
              ],
              [
                "test_reload_data",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_optimization_process",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_small_change",
                [
                  "self.example"
                ]
              ],
              [
                "test_optimization",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_minus_process",
                [
                  "self.example"
                ]
              ],
              [
                "test_read_predict_manual_gff",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_check_overlap",
                [
                  "self.example"
                ]
              ],
              [
                "test_load_stat_csv",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_gen_large_random",
                [
                  "self.example"
                ]
              ],
              [
                "test_import_lib",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_comparison",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_compare_manual_predict",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_compute_stat",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_run_large_change_part",
                [
                  "self.example"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5949241163260858,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_initiate",
                  "test_gen_large_random",
                  0.6306684109515883
                ],
                [
                  "test_extend_data",
                  "test_run_tss_and_stat",
                  0.38595725130392355
                ],
                [
                  "test_load_stat_csv",
                  "test_run_large_change_part",
                  0.2575610981849658
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_optimization_process",
                  0.6333490084265723
                ],
                [
                  "test_small_change",
                  "test_gen_config",
                  0.45386674792897297
                ],
                [
                  "test_compare_manual_predict",
                  "test_gen_config",
                  0.6876320462622334
                ],
                [
                  "test_scoring_function",
                  "test_run_tss_and_stat",
                  0.7915068865146373
                ],
                [
                  "test_run_small_change_part",
                  "test_plus_process",
                  0.5337605126836237
                ],
                [
                  "test_minus_process",
                  "test_gen_config",
                  0.5903100908139294
                ],
                [
                  "test_initiate",
                  "test_optimization",
                  0.7221390768470183
                ],
                [
                  "test_run_random_part",
                  "test_optimization_process",
                  0.33762609538744015
                ],
                [
                  "test_gen_config",
                  "test_comparison",
                  0.6922935180190628
                ],
                [
                  "test_reload_data",
                  "test_gen_config",
                  0.4908533865098859
                ],
                [
                  "test_run_large_change_part",
                  "test_check_overlap",
                  0.26144349280800105
                ],
                [
                  "test_scoring_function",
                  "test_compute_stat",
                  0.8910066803617912
                ],
                [
                  "test_extend_data",
                  "test_compute_stat",
                  0.3914551500051896
                ],
                [
                  "test_run_small_change_part",
                  "test_small_change",
                  0.554700196225229
                ],
                [
                  "test_plus_process",
                  "test_print_lib",
                  0.6086270034005168
                ],
                [
                  "test_run_large_change_part",
                  "test_run_small_change_part",
                  0.9138735334633753
                ],
                [
                  "test_load_stat_csv",
                  "test_run_tss_and_stat",
                  0.8181624409134243
                ],
                [
                  "test_run_large_change_part",
                  "test_compute_stat",
                  0.31514913624101193
                ],
                [
                  "test_initiate",
                  "test_small_change",
                  0.6491559515570985
                ],
                [
                  "test_extend_data",
                  "test_run_small_change_part",
                  0.6497221227363149
                ],
                [
                  "test_check_overlap",
                  "test_optimization",
                  0.6287254310700214
                ],
                [
                  "test_scoring_function",
                  "test_reload_data",
                  0.8051043234576585
                ],
                [
                  "test_small_change",
                  "test_optimization_process",
                  0.6077496057337232
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_gen_config",
                  0.6911765413460593
                ],
                [
                  "test_compare_manual_predict",
                  "test_optimization_process",
                  0.884049657595424
                ],
                [
                  "test_scoring_function",
                  "test_run_small_change_part",
                  0.23144735718792403
                ],
                [
                  "test_gen_large_random",
                  "test_run_tss_and_stat",
                  0.6455301570596601
                ],
                [
                  "test_reload_data",
                  "test_gen_large_random",
                  0.5808560069306347
                ],
                [
                  "test_run_large_change_part",
                  "test_small_change",
                  0.5549503804954368
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_load_stat_csv",
                  0.44411739409784406
                ],
                [
                  "test_run_random_part",
                  "test_print_lib",
                  0.3338851918174154
                ],
                [
                  "test_load_stat_csv",
                  "test_compare_manual_predict",
                  0.7443078549232387
                ],
                [
                  "test_initiate",
                  "test_minus_process",
                  0.737901706933114
                ],
                [
                  "test_run_small_change_part",
                  "test_compute_stat",
                  0.3282832194428736
                ],
                [
                  "test_compute_stat",
                  "test_comparison",
                  0.7528483505707861
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_import_lib",
                  0.5997217879137295
                ],
                [
                  "test_scoring_function",
                  "test_run_large_change_part",
                  0.2227181972372917
                ],
                [
                  "test_run_random_part",
                  "test_compare_manual_predict",
                  0.3143473067309657
                ],
                [
                  "test_run_small_change_part",
                  "test_minus_process",
                  0.5337605126836237
                ],
                [
                  "test_compute_stat",
                  "test_gen_config",
                  0.512560069152987
                ],
                [
                  "test_reload_data",
                  "test_comparison",
                  0.6827496530623524
                ],
                [
                  "test_gen_config",
                  "test_optimization",
                  0.8845372633992373
                ],
                [
                  "test_gen_large_random",
                  "test_import_lib",
                  0.5595219866604755
                ],
                [
                  "test_extend_data",
                  "test_run_large_change_part",
                  0.6500151643761426
                ],
                [
                  "test_minus_process",
                  "test_optimization",
                  0.7012919015772486
                ],
                [
                  "test_compute_stat",
                  "test_optimization",
                  0.6494618739799422
                ],
                [
                  "test_initiate",
                  "test_scoring_function",
                  0.8460289210052381
                ],
                [
                  "test_plus_process",
                  "test_compare_manual_predict",
                  0.7624834024553111
                ],
                [
                  "test_run_small_change_part",
                  "test_check_overlap",
                  0.2508726030021272
                ],
                [
                  "test_compute_stat",
                  "test_import_lib",
                  0.5990268455871585
                ],
                [
                  "test_reload_data",
                  "test_optimization_process",
                  0.764794830210377
                ],
                [
                  "test_print_lib",
                  "test_optimization",
                  0.7141966328035614
                ],
                [
                  "test_small_change",
                  "test_plus_process",
                  0.8467803948114511
                ],
                [
                  "test_gen_large_random",
                  "test_run_small_change_part",
                  0.46414151982703544
                ],
                [
                  "test_scoring_function",
                  "test_minus_process",
                  0.6945372265949069
                ],
                [
                  "test_plus_process",
                  "test_run_tss_and_stat",
                  0.7932717348749254
                ],
                [
                  "test_run_tss_and_stat",
                  "test_check_overlap",
                  0.6932347740866895
                ],
                [
                  "test_compute_stat",
                  "test_print_lib",
                  0.6491631237586061
                ],
                [
                  "test_compare_manual_predict",
                  "test_print_lib",
                  0.7075476056002785
                ],
                [
                  "test_gen_large_random",
                  "test_compute_stat",
                  0.6203360008307607
                ],
                [
                  "test_small_change",
                  "test_print_lib",
                  0.4919473499491091
                ],
                [
                  "test_reload_data",
                  "test_extend_data",
                  0.35945886820824297
                ],
                [
                  "test_initiate",
                  "test_check_overlap",
                  0.7448379336094358
                ],
                [
                  "test_minus_process",
                  "test_import_lib",
                  0.5875643529845789
                ],
                [
                  "test_scoring_function",
                  "test_small_change",
                  0.6502560887623551
                ],
                [
                  "test_extend_data",
                  "test_small_change",
                  0.4997560380435394
                ],
                [
                  "test_extend_data",
                  "test_minus_process",
                  0.510946126311545
                ],
                [
                  "test_run_random_part",
                  "test_minus_process",
                  0.5249415273012282
                ],
                [
                  "test_reload_data",
                  "test_check_overlap",
                  0.6381393457111536
                ],
                [
                  "test_reload_data",
                  "test_minus_process",
                  0.7560777362858178
                ],
                [
                  "test_extend_data",
                  "test_optimization",
                  0.3417825872558804
                ],
                [
                  "test_scoring_function",
                  "test_optimization",
                  0.6309839050184081
                ],
                [
                  "test_optimization_process",
                  "test_optimization",
                  0.8836986238831903
                ],
                [
                  "test_load_stat_csv",
                  "test_import_lib",
                  0.5584382140774575
                ],
                [
                  "test_compute_stat",
                  "test_optimization_process",
                  0.7999377577912713
                ],
                [
                  "test_comparison",
                  "test_check_overlap",
                  0.8030254411508849
                ],
                [
                  "test_load_stat_csv",
                  "test_run_small_change_part",
                  0.26747530781932055
                ],
                [
                  "test_run_large_change_part",
                  "test_minus_process",
                  0.5089699438937881
                ],
                [
                  "test_comparison",
                  "test_import_lib",
                  0.786926920203982
                ],
                [
                  "test_reload_data",
                  "test_import_lib",
                  0.5526962093757597
                ],
                [
                  "test_initiate",
                  "test_compute_stat",
                  0.9003775099122217
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_gen_large_random",
                  0.48241815132442173
                ],
                [
                  "test_load_stat_csv",
                  "test_print_lib",
                  0.5934165654015021
                ],
                [
                  "test_minus_process",
                  "test_comparison",
                  0.6958828640248562
                ],
                [
                  "test_reload_data",
                  "test_run_small_change_part",
                  0.2898326433794432
                ],
                [
                  "test_minus_process",
                  "test_optimization_process",
                  0.74798167766232
                ],
                [
                  "test_initiate",
                  "test_run_random_part",
                  0.28740961118414327
                ],
                [
                  "test_initiate",
                  "test_read_predict_manual_gff",
                  0.5312540972590432
                ],
                [
                  "test_reload_data",
                  "test_optimization",
                  0.6308699751740597
                ],
                [
                  "test_scoring_function",
                  "test_extend_data",
                  0.27927058382571796
                ],
                [
                  "test_run_small_change_part",
                  "test_optimization_process",
                  0.3158343375883887
                ],
                [
                  "test_gen_large_random",
                  "test_small_change",
                  0.6646803743153546
                ],
                [
                  "test_load_stat_csv",
                  "test_optimization_process",
                  0.7606315456407664
                ],
                [
                  "test_run_large_change_part",
                  "test_plus_process",
                  0.5089699438937881
                ],
                [
                  "test_run_large_change_part",
                  "test_gen_config",
                  0.4454493993666421
                ],
                [
                  "test_run_small_change_part",
                  "test_optimization",
                  0.408466871053208
                ],
                [
                  "test_extend_data",
                  "test_check_overlap",
                  0.2825289656088067
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_print_lib",
                  0.5660380844802229
                ],
                [
                  "test_plus_process",
                  "test_import_lib",
                  0.5875643529845789
                ],
                [
                  "test_scoring_function",
                  "test_check_overlap",
                  0.6960115361312843
                ],
                [
                  "test_run_random_part",
                  "test_plus_process",
                  0.5249415273012282
                ],
                [
                  "test_initiate",
                  "test_plus_process",
                  0.737901706933114
                ],
                [
                  "test_gen_large_random",
                  "test_compare_manual_predict",
                  0.6231234454607115
                ],
                [
                  "test_load_stat_csv",
                  "test_reload_data",
                  0.9797346656100953
                ],
                [
                  "test_run_small_change_part",
                  "test_comparison",
                  0.31811592864062443
                ],
                [
                  "test_load_stat_csv",
                  "test_comparison",
                  0.6861855015941327
                ],
                [
                  "test_plus_process",
                  "test_optimization_process",
                  0.74798167766232
                ],
                [
                  "test_reload_data",
                  "test_compare_manual_predict",
                  0.7445338868456004
                ],
                [
                  "test_gen_config",
                  "test_print_lib",
                  0.6309283814326867
                ],
                [
                  "test_extend_data",
                  "test_compare_manual_predict",
                  0.28856843522521164
                ],
                [
                  "test_run_small_change_part",
                  "test_run_tss_and_stat",
                  0.4518343848105945
                ],
                [
                  "test_reload_data",
                  "test_small_change",
                  0.7579603795765806
                ],
                [
                  "test_scoring_function",
                  "test_compare_manual_predict",
                  0.7289893778778299
                ],
                [
                  "test_gen_large_random",
                  "test_minus_process",
                  0.6872179556141693
                ],
                [
                  "test_run_random_part",
                  "test_gen_config",
                  0.4265167106155982
                ],
                [
                  "test_load_stat_csv",
                  "test_gen_large_random",
                  0.5810051327533297
                ],
                [
                  "test_initiate",
                  "test_gen_config",
                  0.5549025056262948
                ],
                [
                  "test_gen_large_random",
                  "test_check_overlap",
                  0.554321862524587
                ],
                [
                  "test_plus_process",
                  "test_comparison",
                  0.6958828640248562
                ],
                [
                  "test_minus_process",
                  "test_print_lib",
                  0.6086270034005168
                ],
                [
                  "test_run_small_change_part",
                  "test_import_lib",
                  0.19451403927706307
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_compute_stat",
                  0.4586892665511657
                ],
                [
                  "test_reload_data",
                  "test_run_large_change_part",
                  0.27528167607754517
                ],
                [
                  "test_run_random_part",
                  "test_compute_stat",
                  0.3510901367004239
                ],
                [
                  "test_load_stat_csv",
                  "test_gen_config",
                  0.46945304814860367
                ],
                [
                  "test_print_lib",
                  "test_optimization_process",
                  0.7645356709885782
                ],
                [
                  "test_run_large_change_part",
                  "test_optimization_process",
                  0.2994481100765622
                ],
                [
                  "test_run_small_change_part",
                  "test_print_lib",
                  0.2959845225798768
                ],
                [
                  "test_run_tss_and_stat",
                  "test_gen_config",
                  0.7938237788262367
                ],
                [
                  "test_run_random_part",
                  "test_run_small_change_part",
                  0.7224437244300853
                ],
                [
                  "test_plus_process",
                  "test_minus_process",
                  0.9814814814814815
                ],
                [
                  "test_run_large_change_part",
                  "test_import_lib",
                  0.18243915955032036
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_run_small_change_part",
                  0.3350770243938134
                ],
                [
                  "test_plus_process",
                  "test_optimization",
                  0.7012919015772486
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_reload_data",
                  0.4314912298764275
                ],
                [
                  "test_run_large_change_part",
                  "test_print_lib",
                  0.2843816344145624
                ],
                [
                  "test_small_change",
                  "test_run_tss_and_stat",
                  0.697137002317335
                ],
                [
                  "test_run_tss_and_stat",
                  "test_optimization",
                  0.8989971563083348
                ],
                [
                  "test_reload_data",
                  "test_run_tss_and_stat",
                  0.8358061762267365
                ],
                [
                  "test_comparison",
                  "test_optimization",
                  0.8007260842549415
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_run_random_part",
                  0.3457820374040623
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_plus_process",
                  0.5846845821518305
                ],
                [
                  "test_scoring_function",
                  "test_import_lib",
                  0.6275566477602339
                ],
                [
                  "test_reload_data",
                  "test_compute_stat",
                  0.9250602620566553
                ],
                [
                  "test_initiate",
                  "test_extend_data",
                  0.30730256628199226
                ],
                [
                  "test_small_change",
                  "test_compute_stat",
                  0.764493467454173
                ],
                [
                  "test_load_stat_csv",
                  "test_optimization",
                  0.6092742092947979
                ],
                [
                  "test_extend_data",
                  "test_gen_large_random",
                  0.46381240951435543
                ],
                [
                  "test_compare_manual_predict",
                  "test_compute_stat",
                  0.7585443857852611
                ],
                [
                  "test_extend_data",
                  "test_import_lib",
                  0.23929792367492475
                ],
                [
                  "test_gen_config",
                  "test_optimization_process",
                  0.7272361476130076
                ],
                [
                  "test_scoring_function",
                  "test_gen_large_random",
                  0.5655546025421945
                ],
                [
                  "test_plus_process",
                  "test_check_overlap",
                  0.6286137576177978
                ],
                [
                  "test_run_random_part",
                  "test_small_change",
                  0.5602794333886091
                ],
                [
                  "test_extend_data",
                  "test_optimization_process",
                  0.34215629270538145
                ],
                [
                  "test_print_lib",
                  "test_import_lib",
                  0.7053931332208603
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_run_large_change_part",
                  0.32351981665785934
                ],
                [
                  "test_gen_large_random",
                  "test_comparison",
                  0.6350852961085883
                ],
                [
                  "test_run_small_change_part",
                  "test_compare_manual_predict",
                  0.2923711291279353
                ],
                [
                  "test_run_random_part",
                  "test_check_overlap",
                  0.3260064312812172
                ],
                [
                  "test_scoring_function",
                  "test_optimization_process",
                  0.7783126608542204
                ],
                [
                  "test_check_overlap",
                  "test_import_lib",
                  0.6642572473934162
                ],
                [
                  "test_extend_data",
                  "test_gen_config",
                  0.38946196384733744
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_comparison",
                  0.6590082689751418
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_run_tss_and_stat",
                  0.6409181918414171
                ],
                [
                  "test_gen_large_random",
                  "test_optimization",
                  0.6000159844418127
                ],
                [
                  "test_initiate",
                  "test_compare_manual_predict",
                  0.8115837500562504
                ],
                [
                  "test_scoring_function",
                  "test_gen_config",
                  0.48647738955096215
                ],
                [
                  "test_gen_large_random",
                  "test_plus_process",
                  0.6872179556141693
                ],
                [
                  "test_gen_large_random",
                  "test_gen_config",
                  0.5254824838146557
                ],
                [
                  "test_scoring_function",
                  "test_load_stat_csv",
                  0.8177440465586221
                ],
                [
                  "test_compute_stat",
                  "test_run_tss_and_stat",
                  0.85751986224001
                ],
                [
                  "test_minus_process",
                  "test_run_tss_and_stat",
                  0.7932717348749254
                ],
                [
                  "test_load_stat_csv",
                  "test_small_change",
                  0.7560864148142504
                ],
                [
                  "test_run_large_change_part",
                  "test_compare_manual_predict",
                  0.27730269999245083
                ],
                [
                  "test_gen_config",
                  "test_import_lib",
                  0.6604220929909221
                ],
                [
                  "test_comparison",
                  "test_optimization_process",
                  0.8734838884514514
                ],
                [
                  "test_scoring_function",
                  "test_comparison",
                  0.7698512161427533
                ],
                [
                  "test_compute_stat",
                  "test_check_overlap",
                  0.709564364417507
                ],
                [
                  "test_initiate",
                  "test_run_small_change_part",
                  0.23971793037317843
                ],
                [
                  "test_load_stat_csv",
                  "test_plus_process",
                  0.7535282237253077
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_optimization",
                  0.7086805796639766
                ],
                [
                  "test_reload_data",
                  "test_run_random_part",
                  0.3218080553872966
                ],
                [
                  "test_extend_data",
                  "test_comparison",
                  0.31878835653166915
                ],
                [
                  "test_run_tss_and_stat",
                  "test_print_lib",
                  0.7330307496779742
                ],
                [
                  "test_run_random_part",
                  "test_gen_large_random",
                  0.47958315233127197
                ],
                [
                  "test_run_small_change_part",
                  "test_gen_config",
                  0.4657098422667966
                ],
                [
                  "test_minus_process",
                  "test_check_overlap",
                  0.6286137576177978
                ],
                [
                  "test_run_large_change_part",
                  "test_optimization",
                  0.38490064205319235
                ],
                [
                  "test_initiate",
                  "test_import_lib",
                  0.7397691787907075
                ],
                [
                  "test_compare_manual_predict",
                  "test_check_overlap",
                  0.6571093320117412
                ],
                [
                  "test_initiate",
                  "test_optimization_process",
                  0.8925126364407738
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_compare_manual_predict",
                  0.6742424242424242
                ],
                [
                  "test_run_tss_and_stat",
                  "test_import_lib",
                  0.729673365509636
                ],
                [
                  "test_extend_data",
                  "test_plus_process",
                  0.510946126311545
                ],
                [
                  "test_run_random_part",
                  "test_optimization",
                  0.3865990666772983
                ],
                [
                  "test_run_large_change_part",
                  "test_gen_large_random",
                  0.5089056517725216
                ],
                [
                  "test_load_stat_csv",
                  "test_extend_data",
                  0.33134935123941744
                ],
                [
                  "test_load_stat_csv",
                  "test_run_random_part",
                  0.3071356347554708
                ],
                [
                  "test_small_change",
                  "test_import_lib",
                  0.42079820544664037
                ],
                [
                  "test_initiate",
                  "test_print_lib",
                  0.7266126099938696
                ],
                [
                  "test_scoring_function",
                  "test_plus_process",
                  0.6945372265949069
                ],
                [
                  "test_scoring_function",
                  "test_run_random_part",
                  0.2588625802676359
                ],
                [
                  "test_comparison",
                  "test_print_lib",
                  0.7742002944340537
                ],
                [
                  "test_load_stat_csv",
                  "test_minus_process",
                  0.7535282237253077
                ],
                [
                  "test_small_change",
                  "test_check_overlap",
                  0.5427204202399745
                ],
                [
                  "test_compare_manual_predict",
                  "test_comparison",
                  0.7937112170360985
                ],
                [
                  "test_small_change",
                  "test_comparison",
                  0.5598833697790121
                ],
                [
                  "test_extend_data",
                  "test_print_lib",
                  0.3170731707317073
                ],
                [
                  "test_compare_manual_predict",
                  "test_import_lib",
                  0.7793132718282746
                ],
                [
                  "test_small_change",
                  "test_minus_process",
                  0.8467803948114511
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_extend_data",
                  0.29966722119541206
                ],
                [
                  "test_scoring_function",
                  "test_print_lib",
                  0.6524776367564501
                ],
                [
                  "test_gen_large_random",
                  "test_optimization_process",
                  0.6599325378375475
                ],
                [
                  "test_initiate",
                  "test_reload_data",
                  0.8691590100009168
                ],
                [
                  "test_import_lib",
                  "test_optimization",
                  0.790873208165475
                ],
                [
                  "test_reload_data",
                  "test_print_lib",
                  0.5918676192049518
                ],
                [
                  "test_plus_process",
                  "test_compute_stat",
                  0.7798526301484988
                ],
                [
                  "test_reload_data",
                  "test_plus_process",
                  0.7560777362858178
                ],
                [
                  "test_extend_data",
                  "test_run_random_part",
                  0.5065844289643544
                ],
                [
                  "test_load_stat_csv",
                  "test_check_overlap",
                  0.6707240349955643
                ],
                [
                  "test_load_stat_csv",
                  "test_compute_stat",
                  0.9250174911479296
                ],
                [
                  "test_run_random_part",
                  "test_run_large_change_part",
                  0.7543055016374919
                ],
                [
                  "test_minus_process",
                  "test_compare_manual_predict",
                  0.7624834024553111
                ],
                [
                  "test_initiate",
                  "test_load_stat_csv",
                  0.8725590205871132
                ],
                [
                  "test_compare_manual_predict",
                  "test_optimization",
                  0.8422001091658852
                ],
                [
                  "test_check_overlap",
                  "test_optimization_process",
                  0.7314807852364684
                ],
                [
                  "test_small_change",
                  "test_optimization",
                  0.5471190920976587
                ],
                [
                  "test_initiate",
                  "test_run_large_change_part",
                  0.22802609751859484
                ],
                [
                  "test_run_large_change_part",
                  "test_run_tss_and_stat",
                  0.4205874047386665
                ],
                [
                  "test_run_random_part",
                  "test_run_tss_and_stat",
                  0.4269205609193583
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_small_change",
                  0.47970161180012344
                ],
                [
                  "test_small_change",
                  "test_compare_manual_predict",
                  0.6502621848846118
                ],
                [
                  "test_initiate",
                  "test_run_tss_and_stat",
                  0.8699374795623719
                ],
                [
                  "test_compare_manual_predict",
                  "test_run_tss_and_stat",
                  0.8624216160156493
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_scoring_function",
                  0.4748250939901554
                ],
                [
                  "test_gen_large_random",
                  "test_print_lib",
                  0.5521576303742327
                ],
                [
                  "test_run_random_part",
                  "test_import_lib",
                  0.22591857648663244
                ],
                [
                  "test_plus_process",
                  "test_gen_config",
                  0.5903100908139294
                ],
                [
                  "test_gen_config",
                  "test_check_overlap",
                  0.5413686860856325
                ],
                [
                  "test_run_random_part",
                  "test_comparison",
                  0.3611575592573076
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_check_overlap",
                  0.5892556509887896
                ],
                [
                  "test_minus_process",
                  "test_compute_stat",
                  0.7798526301484988
                ],
                [
                  "test_run_tss_and_stat",
                  "test_optimization_process",
                  0.9103841293243413
                ],
                [
                  "test_read_predict_manual_gff",
                  "test_minus_process",
                  0.5846845821518305
                ],
                [
                  "test_check_overlap",
                  "test_print_lib",
                  0.6749303067321493
                ],
                [
                  "test_initiate",
                  "test_comparison",
                  0.8558616445130187
                ],
                [
                  "test_import_lib",
                  "test_optimization_process",
                  0.9239519784741947
                ],
                [
                  "test_run_tss_and_stat",
                  "test_comparison",
                  0.8368204148336732
                ],
                [
                  "test_run_large_change_part",
                  "test_comparison",
                  0.30848237035494364
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_run_tss_and_stat",
                "false"
              ],
              [
                "test_initiate",
                "false"
              ],
              [
                "test_gen_config",
                "false"
              ],
              [
                "test_extend_data",
                "false"
              ],
              [
                "test_run_small_change_part",
                "true"
              ],
              [
                "test_print_lib",
                "false"
              ],
              [
                "test_scoring_function",
                "false"
              ],
              [
                "test_run_random_part",
                "true"
              ],
              [
                "test_plus_process",
                "false"
              ],
              [
                "test_reload_data",
                "false"
              ],
              [
                "test_optimization_process",
                "false"
              ],
              [
                "test_small_change",
                "true"
              ],
              [
                "test_optimization",
                "false"
              ],
              [
                "test_minus_process",
                "false"
              ],
              [
                "test_read_predict_manual_gff",
                "false"
              ],
              [
                "test_check_overlap",
                "false"
              ],
              [
                "test_load_stat_csv",
                "false"
              ],
              [
                "test_gen_large_random",
                "true"
              ],
              [
                "test_import_lib",
                "false"
              ],
              [
                "test_comparison",
                "false"
              ],
              [
                "test_compare_manual_predict",
                "false"
              ],
              [
                "test_compute_stat",
                "false"
              ],
              [
                "test_run_large_change_part",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 23
      }
    ]
  },
  {
    "name": "tests_\u0026_test_transcript_detection.py",
    "testCases": [
      {
        "name": "TestTranscriptAssembly",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fill_gap_and_print",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_read_wig",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_transfer_to_tran",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_check_tex_conds",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_hight_toler",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_print_transctipt",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_assembly",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_elongation",
                  "[PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fill_gap_and_print",
                  "[]"
                ],
                [
                  "test_read_wig",
                  "[]"
                ],
                [
                  "test_transfer_to_tran",
                  "[]"
                ],
                [
                  "test_check_tex_conds",
                  "[]"
                ],
                [
                  "test_detect_hight_toler",
                  "[]"
                ],
                [
                  "test_print_transctipt",
                  "[]"
                ],
                [
                  "test_assembly",
                  "[]"
                ],
                [
                  "test_elongation",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fill_gap_and_print",
                  "false"
                ],
                [
                  "test_read_wig",
                  "true"
                ],
                [
                  "test_transfer_to_tran",
                  "false"
                ],
                [
                  "test_check_tex_conds",
                  "false"
                ],
                [
                  "test_detect_hight_toler",
                  "false"
                ],
                [
                  "test_print_transctipt",
                  "false"
                ],
                [
                  "test_assembly",
                  "false"
                ],
                [
                  "test_elongation",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fill_gap_and_print",
                  "false"
                ],
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_transfer_to_tran",
                  "false"
                ],
                [
                  "test_check_tex_conds",
                  "false"
                ],
                [
                  "test_detect_hight_toler",
                  "false"
                ],
                [
                  "test_print_transctipt",
                  "false"
                ],
                [
                  "test_assembly",
                  "false"
                ],
                [
                  "test_elongation",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fill_gap_and_print",
                  "false"
                ],
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_transfer_to_tran",
                  "false"
                ],
                [
                  "test_check_tex_conds",
                  "false"
                ],
                [
                  "test_detect_hight_toler",
                  "false"
                ],
                [
                  "test_print_transctipt",
                  "false"
                ],
                [
                  "test_assembly",
                  "false"
                ],
                [
                  "test_elongation",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fill_gap_and_print",
                  "false"
                ],
                [
                  "test_read_wig",
                  "false"
                ],
                [
                  "test_transfer_to_tran",
                  "false"
                ],
                [
                  "test_check_tex_conds",
                  "false"
                ],
                [
                  "test_detect_hight_toler",
                  "false"
                ],
                [
                  "test_print_transctipt",
                  "false"
                ],
                [
                  "test_assembly",
                  "false"
                ],
                [
                  "test_elongation",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_transfer_to_tran",
                "false"
              ],
              [
                "test_check_tex_conds",
                "false"
              ],
              [
                "test_detect_hight_toler",
                "false"
              ],
              [
                "test_print_transctipt",
                "false"
              ],
              [
                "test_assembly",
                "false"
              ],
              [
                "test_elongation",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_transfer_to_tran",
                "false"
              ],
              [
                "test_check_tex_conds",
                "false"
              ],
              [
                "test_detect_hight_toler",
                "false"
              ],
              [
                "test_print_transctipt",
                "false"
              ],
              [
                "test_assembly",
                "false"
              ],
              [
                "test_elongation",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_fill_gap_and_print",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_read_wig",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_transfer_to_tran",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_check_tex_conds",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_hight_toler",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_print_transctipt",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_assembly",
                []
              ],
              [
                "test_elongation",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_transfer_to_tran",
                "false"
              ],
              [
                "test_check_tex_conds",
                "false"
              ],
              [
                "test_detect_hight_toler",
                "false"
              ],
              [
                "test_print_transctipt",
                "false"
              ],
              [
                "test_assembly",
                "false"
              ],
              [
                "test_elongation",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_transfer_to_tran",
                "false"
              ],
              [
                "test_check_tex_conds",
                "false"
              ],
              [
                "test_detect_hight_toler",
                "false"
              ],
              [
                "test_print_transctipt",
                "false"
              ],
              [
                "test_assembly",
                "false"
              ],
              [
                "test_elongation",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fill_gap_and_print",
                  "0"
                ],
                [
                  "test_read_wig",
                  "0"
                ],
                [
                  "test_transfer_to_tran",
                  "0"
                ],
                [
                  "test_check_tex_conds",
                  "0"
                ],
                [
                  "test_detect_hight_toler",
                  "0"
                ],
                [
                  "test_print_transctipt",
                  "0"
                ],
                [
                  "test_assembly",
                  "0"
                ],
                [
                  "test_elongation",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fill_gap_and_print",
                  "0"
                ],
                [
                  "test_read_wig",
                  "0"
                ],
                [
                  "test_transfer_to_tran",
                  "0"
                ],
                [
                  "test_check_tex_conds",
                  "0"
                ],
                [
                  "test_detect_hight_toler",
                  "0"
                ],
                [
                  "test_print_transctipt",
                  "0"
                ],
                [
                  "test_assembly",
                  "0"
                ],
                [
                  "test_elongation",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_transfer_to_tran",
                "false"
              ],
              [
                "test_check_tex_conds",
                "false"
              ],
              [
                "test_detect_hight_toler",
                "false"
              ],
              [
                "test_print_transctipt",
                "false"
              ],
              [
                "test_assembly",
                "false"
              ],
              [
                "test_elongation",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_transfer_to_tran",
                "false"
              ],
              [
                "test_check_tex_conds",
                "false"
              ],
              [
                "test_detect_hight_toler",
                "false"
              ],
              [
                "test_print_transctipt",
                "false"
              ],
              [
                "test_assembly",
                "false"
              ],
              [
                "test_elongation",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "1"
              ],
              [
                "test_read_wig",
                "1"
              ],
              [
                "test_transfer_to_tran",
                "2"
              ],
              [
                "test_check_tex_conds",
                "1"
              ],
              [
                "test_detect_hight_toler",
                "1"
              ],
              [
                "test_print_transctipt",
                "1"
              ],
              [
                "test_assembly",
                "1"
              ],
              [
                "test_elongation",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                [
                  "args",
                  "finals",
                  "tolers",
                  "trans"
                ]
              ],
              [
                "test_read_wig",
                [
                  "filename",
                  "wigs",
                  "libs"
                ]
              ],
              [
                "test_transfer_to_tran",
                [
                  "args",
                  "reps",
                  "tolers",
                  "tmp_texs",
                  "libs",
                  "trans"
                ]
              ],
              [
                "test_check_tex_conds",
                [
                  "conds",
                  "check_tex",
                  "texs",
                  "libs",
                  "tracks"
                ]
              ],
              [
                "test_detect_hight_toler",
                [
                  "cover",
                  "tmp_covers",
                  "tracks",
                  "height"
                ]
              ],
              [
                "test_print_transctipt",
                [
                  "tas",
                  "out"
                ]
              ],
              [
                "test_assembly",
                [
                  "args",
                  "wig_r_file",
                  "reps",
                  "input_lib",
                  "out_file",
                  "datas",
                  "wig_f_file",
                  "wig_f2_file",
                  "wig_r2_file"
                ]
              ],
              [
                "test_elongation",
                [
                  "args",
                  "reps",
                  "tolers",
                  "tmp_texs",
                  "libs",
                  "covers",
                  "trans"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_fill_gap_and_print",
                [
                  "self.mock_args"
                ]
              ],
              [
                "test_read_wig",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_transfer_to_tran",
                [
                  "self.mock_args",
                  "self.example"
                ]
              ],
              [
                "test_check_tex_conds",
                []
              ],
              [
                "test_detect_hight_toler",
                []
              ],
              [
                "test_print_transctipt",
                []
              ],
              [
                "test_assembly",
                [
                  "self.mock_args",
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_elongation",
                [
                  "self.mock_args"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5993890937272462,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_check_tex_conds",
                  "test_elongation",
                  0.5554327891598917
                ],
                [
                  "test_read_wig",
                  "test_check_tex_conds",
                  0.5772945914548717
                ],
                [
                  "test_elongation",
                  "test_print_transctipt",
                  0.7254791963440494
                ],
                [
                  "test_print_transctipt",
                  "test_assembly",
                  0.4998189662206872
                ],
                [
                  "test_detect_hight_toler",
                  "test_assembly",
                  0.661300628497641
                ],
                [
                  "test_fill_gap_and_print",
                  "test_assembly",
                  0.5428135823031413
                ],
                [
                  "test_read_wig",
                  "test_print_transctipt",
                  0.388536971793916
                ],
                [
                  "test_detect_hight_toler",
                  "test_fill_gap_and_print",
                  0.7052413640497343
                ],
                [
                  "test_elongation",
                  "test_transfer_to_tran",
                  0.9208227544764515
                ],
                [
                  "test_read_wig",
                  "test_elongation",
                  0.4547199745688769
                ],
                [
                  "test_check_tex_conds",
                  "test_transfer_to_tran",
                  0.55354382755634
                ],
                [
                  "test_elongation",
                  "test_assembly",
                  0.5654538448583049
                ],
                [
                  "test_check_tex_conds",
                  "test_print_transctipt",
                  0.4339760672725162
                ],
                [
                  "test_read_wig",
                  "test_transfer_to_tran",
                  0.485771265068573
                ],
                [
                  "test_transfer_to_tran",
                  "test_fill_gap_and_print",
                  0.9216150947671797
                ],
                [
                  "test_check_tex_conds",
                  "test_fill_gap_and_print",
                  0.42838428255292044
                ],
                [
                  "test_read_wig",
                  "test_fill_gap_and_print",
                  0.3726664943751648
                ],
                [
                  "test_detect_hight_toler",
                  "test_elongation",
                  0.7420949839138595
                ],
                [
                  "test_elongation",
                  "test_fill_gap_and_print",
                  0.9171246588212301
                ],
                [
                  "test_detect_hight_toler",
                  "test_check_tex_conds",
                  0.5078694318721778
                ],
                [
                  "test_transfer_to_tran",
                  "test_assembly",
                  0.5995382765668412
                ],
                [
                  "test_fill_gap_and_print",
                  "test_print_transctipt",
                  0.7065445630514552
                ],
                [
                  "test_detect_hight_toler",
                  "test_print_transctipt",
                  0.6161050564298628
                ],
                [
                  "test_read_wig",
                  "test_assembly",
                  0.5515187677965047
                ],
                [
                  "test_check_tex_conds",
                  "test_assembly",
                  0.435104561966676
                ],
                [
                  "test_transfer_to_tran",
                  "test_print_transctipt",
                  0.6880625066744793
                ],
                [
                  "test_read_wig",
                  "test_detect_hight_toler",
                  0.487594734005309
                ],
                [
                  "test_detect_hight_toler",
                  "test_transfer_to_tran",
                  0.7384653879442423
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_fill_gap_and_print",
                "false"
              ],
              [
                "test_read_wig",
                "false"
              ],
              [
                "test_transfer_to_tran",
                "false"
              ],
              [
                "test_check_tex_conds",
                "false"
              ],
              [
                "test_detect_hight_toler",
                "false"
              ],
              [
                "test_print_transctipt",
                "false"
              ],
              [
                "test_assembly",
                "false"
              ],
              [
                "test_elongation",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_filter_low_expression.py",
    "testCases": [
      {
        "name": "TestLowExpress",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_change_best",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_stat",
                  "[PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_coverage",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_change_best",
                  "[]"
                ],
                [
                  "test_stat",
                  "[]"
                ],
                [
                  "test_get_coverage",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_change_best",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_change_best",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_change_best",
                  "true"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_change_best",
                  "false"
                ],
                [
                  "test_stat",
                  "false"
                ],
                [
                  "test_get_coverage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_change_best",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_stat",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_change_best",
                "false"
              ],
              [
                "test_stat",
                "true"
              ],
              [
                "test_get_coverage",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_change_best",
                  "0"
                ],
                [
                  "test_stat",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_change_best",
                  "0"
                ],
                [
                  "test_stat",
                  "0"
                ],
                [
                  "test_get_coverage",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                "4"
              ],
              [
                "test_stat",
                "2"
              ],
              [
                "test_get_coverage",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                [
                  "change",
                  "best",
                  "stats2",
                  "stats1"
                ]
              ],
              [
                "test_stat",
                [
                  "stats",
                  "num"
                ]
              ],
              [
                "test_get_coverage",
                [
                  "coverage",
                  "tar",
                  "attributes_tar",
                  "tar_dist",
                  "wigs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_change_best",
                []
              ],
              [
                "test_stat",
                [
                  "self.example"
                ]
              ],
              [
                "test_get_coverage",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7647294239877055,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_coverage",
                  "test_stat",
                  0.7625924432309031
                ],
                [
                  "test_get_coverage",
                  "test_change_best",
                  0.7111446577145012
                ],
                [
                  "test_stat",
                  "test_change_best",
                  0.8204511710177124
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_change_best",
                "false"
              ],
              [
                "test_stat",
                "false"
              ],
              [
                "test_get_coverage",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_gene_express_analysis.py",
    "testCases": [
      {
        "name": "TestGeneExpress",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compare_wigs",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_gene_expression",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_detect_express",
                  "[PyCallExpression: self.assertDictEqual]"
                ],
                [
                  "test_set_cutoff",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compare_wigs",
                  "[]"
                ],
                [
                  "test_gene_expression",
                  "[]"
                ],
                [
                  "test_detect_express",
                  "[]"
                ],
                [
                  "test_set_cutoff",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compare_wigs",
                  "false"
                ],
                [
                  "test_gene_expression",
                  "true"
                ],
                [
                  "test_detect_express",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compare_wigs",
                  "false"
                ],
                [
                  "test_gene_expression",
                  "false"
                ],
                [
                  "test_detect_express",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compare_wigs",
                  "false"
                ],
                [
                  "test_gene_expression",
                  "false"
                ],
                [
                  "test_detect_express",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compare_wigs",
                  "false"
                ],
                [
                  "test_gene_expression",
                  "false"
                ],
                [
                  "test_detect_express",
                  "false"
                ],
                [
                  "test_set_cutoff",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                "false"
              ],
              [
                "test_gene_expression",
                "false"
              ],
              [
                "test_detect_express",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                "false"
              ],
              [
                "test_gene_expression",
                "false"
              ],
              [
                "test_detect_express",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_wigs",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_gene_expression",
                []
              ],
              [
                "test_detect_express",
                [
                  "self.test_folder"
                ]
              ],
              [
                "test_set_cutoff",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                "false"
              ],
              [
                "test_gene_expression",
                "false"
              ],
              [
                "test_detect_express",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_wigs",
                "false"
              ],
              [
                "test_gene_expression",
                "false"
              ],
              [
                "test_detect_express",
                "false"
              ],
              [
                "test_set_cutoff",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compare_wigs",
                  "0"
                ],
                [
                  "test_gene_expression",
                  "0"
                ],
                [
                  "test_detect_express",
                  "0"
                ],
                [
                  "test_set_cutoff",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compare_wigs",
                  "0"
                ],
                [
                  "test_gene_expression",
                  "0"
                ],
                [
                  "test_detect_express",
                  "0"
                ],
                [
                  "test_set_cutoff",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                "false"
              ],
              [
                "test_gene_expression",
                "false"
              ],
              [
                "test_detect_express",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                "false"
              ],
              [
                "test_gene_expression",
                "false"
              ],
              [
                "test_detect_express",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                "1"
              ],
              [
                "test_gene_expression",
                "1"
              ],
              [
                "test_detect_express",
                "1"
              ],
              [
                "test_set_cutoff",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                [
                  "outs",
                  "gff_dict",
                  "stats",
                  "gff",
                  "attributes_gff",
                  "texs",
                  "replicates",
                  "plots"
                ]
              ],
              [
                "test_gene_expression",
                [
                  "gff_folder",
                  "refs",
                  "datas",
                  "out_gff_folder",
                  "replicates",
                  "stat_folder",
                  "dicts"
                ]
              ],
              [
                "test_detect_express",
                [
                  "gff_dict",
                  "gff",
                  "attributes_gff",
                  "texs",
                  "detects",
                  "plots"
                ]
              ],
              [
                "test_set_cutoff",
                [
                  "gff_dict",
                  "gff",
                  "attributes_gff",
                  "detects",
                  "diff",
                  "cutoff_percent"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_wigs",
                [
                  "self.example"
                ]
              ],
              [
                "test_gene_expression",
                [
                  "self.example",
                  "self.test_folder"
                ]
              ],
              [
                "test_detect_express",
                [
                  "self.example"
                ]
              ],
              [
                "test_set_cutoff",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6612786908108726,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compare_wigs",
                  "test_gene_expression",
                  0.5330279177874457
                ],
                [
                  "test_detect_express",
                  "test_compare_wigs",
                  0.9107276840670697
                ],
                [
                  "test_detect_express",
                  "test_gene_expression",
                  0.5405143270117065
                ],
                [
                  "test_set_cutoff",
                  "test_compare_wigs",
                  0.6958452281354818
                ],
                [
                  "test_set_cutoff",
                  "test_gene_expression",
                  0.49973230777913663
                ],
                [
                  "test_set_cutoff",
                  "test_detect_express",
                  0.7878246800843951
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_wigs",
                "false"
              ],
              [
                "test_gene_expression",
                "false"
              ],
              [
                "test_detect_express",
                "false"
              ],
              [
                "test_set_cutoff",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  }
]