[
  {
    "name": "test_sample.py",
    "testCases": [
      {
        "name": "TestFileReading",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_load_default_pipeline",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_png_file_reading",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_graph_load",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_load_image",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_pbtxt_load",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_version",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_load_from_file_pipeline",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_write_pipeline",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_load_default_pipeline",
                  "[]"
                ],
                [
                  "test_png_file_reading",
                  "[]"
                ],
                [
                  "test_graph_load",
                  "[]"
                ],
                [
                  "test_load_image",
                  "[]"
                ],
                [
                  "test_pbtxt_load",
                  "[]"
                ],
                [
                  "test_version",
                  "[]"
                ],
                [
                  "test_load_from_file_pipeline",
                  "[]"
                ],
                [
                  "test_write_pipeline",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_load_default_pipeline",
                  "false"
                ],
                [
                  "test_png_file_reading",
                  "false"
                ],
                [
                  "test_graph_load",
                  "false"
                ],
                [
                  "test_load_image",
                  "false"
                ],
                [
                  "test_pbtxt_load",
                  "false"
                ],
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_load_from_file_pipeline",
                  "false"
                ],
                [
                  "test_write_pipeline",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_load_default_pipeline",
                  "false"
                ],
                [
                  "test_png_file_reading",
                  "false"
                ],
                [
                  "test_graph_load",
                  "false"
                ],
                [
                  "test_load_image",
                  "false"
                ],
                [
                  "test_pbtxt_load",
                  "false"
                ],
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_load_from_file_pipeline",
                  "false"
                ],
                [
                  "test_write_pipeline",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_load_default_pipeline",
                  "false"
                ],
                [
                  "test_png_file_reading",
                  "false"
                ],
                [
                  "test_graph_load",
                  "false"
                ],
                [
                  "test_load_image",
                  "false"
                ],
                [
                  "test_pbtxt_load",
                  "false"
                ],
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_load_from_file_pipeline",
                  "false"
                ],
                [
                  "test_write_pipeline",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_load_default_pipeline",
                  "false"
                ],
                [
                  "test_png_file_reading",
                  "false"
                ],
                [
                  "test_graph_load",
                  "false"
                ],
                [
                  "test_load_image",
                  "false"
                ],
                [
                  "test_pbtxt_load",
                  "false"
                ],
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_load_from_file_pipeline",
                  "false"
                ],
                [
                  "test_write_pipeline",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_default_pipeline",
                "false"
              ],
              [
                "test_png_file_reading",
                "false"
              ],
              [
                "test_graph_load",
                "false"
              ],
              [
                "test_load_image",
                "false"
              ],
              [
                "test_pbtxt_load",
                "false"
              ],
              [
                "test_version",
                "false"
              ],
              [
                "test_load_from_file_pipeline",
                "false"
              ],
              [
                "test_write_pipeline",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_load_default_pipeline",
                "false"
              ],
              [
                "test_png_file_reading",
                "false"
              ],
              [
                "test_graph_load",
                "false"
              ],
              [
                "test_load_image",
                "false"
              ],
              [
                "test_pbtxt_load",
                "false"
              ],
              [
                "test_version",
                "false"
              ],
              [
                "test_load_from_file_pipeline",
                "false"
              ],
              [
                "test_write_pipeline",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_load_default_pipeline",
                [
                  "self.label",
                  "self.network_dir",
                  "self.graph"
                ]
              ],
              [
                "test_png_file_reading",
                [
                  "self.label",
                  "self.network_dir",
                  "self.graph"
                ]
              ],
              [
                "test_graph_load",
                [
                  "self.label",
                  "self.network_dir"
                ]
              ],
              [
                "test_load_image",
                [
                  "self.label",
                  "self.network_dir",
                  "self.graph"
                ]
              ],
              [
                "test_pbtxt_load",
                [
                  "self.network_dir",
                  "self.graph"
                ]
              ],
              [
                "test_version",
                [
                  "self.label",
                  "self.network_dir",
                  "self.graph"
                ]
              ],
              [
                "test_load_from_file_pipeline",
                [
                  "self.label",
                  "self.network_dir",
                  "self.graph"
                ]
              ],
              [
                "test_write_pipeline",
                [
                  "self.label",
                  "self.network_dir",
                  "self.PL",
                  "self.graph"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_default_pipeline",
                "false"
              ],
              [
                "test_png_file_reading",
                "false"
              ],
              [
                "test_graph_load",
                "false"
              ],
              [
                "test_load_image",
                "false"
              ],
              [
                "test_pbtxt_load",
                "false"
              ],
              [
                "test_version",
                "false"
              ],
              [
                "test_load_from_file_pipeline",
                "false"
              ],
              [
                "test_write_pipeline",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_load_default_pipeline",
                "false"
              ],
              [
                "test_png_file_reading",
                "true"
              ],
              [
                "test_graph_load",
                "false"
              ],
              [
                "test_load_image",
                "false"
              ],
              [
                "test_pbtxt_load",
                "false"
              ],
              [
                "test_version",
                "false"
              ],
              [
                "test_load_from_file_pipeline",
                "false"
              ],
              [
                "test_write_pipeline",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_load_default_pipeline",
                  "0"
                ],
                [
                  "test_png_file_reading",
                  "0"
                ],
                [
                  "test_graph_load",
                  "0"
                ],
                [
                  "test_load_image",
                  "0"
                ],
                [
                  "test_pbtxt_load",
                  "0"
                ],
                [
                  "test_version",
                  "0"
                ],
                [
                  "test_load_from_file_pipeline",
                  "0"
                ],
                [
                  "test_write_pipeline",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_load_default_pipeline",
                  "0"
                ],
                [
                  "test_png_file_reading",
                  "0"
                ],
                [
                  "test_graph_load",
                  "0"
                ],
                [
                  "test_load_image",
                  "0"
                ],
                [
                  "test_pbtxt_load",
                  "0"
                ],
                [
                  "test_version",
                  "0"
                ],
                [
                  "test_load_from_file_pipeline",
                  "0"
                ],
                [
                  "test_write_pipeline",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_load_default_pipeline",
                "false"
              ],
              [
                "test_png_file_reading",
                "false"
              ],
              [
                "test_graph_load",
                "false"
              ],
              [
                "test_load_image",
                "false"
              ],
              [
                "test_pbtxt_load",
                "false"
              ],
              [
                "test_version",
                "false"
              ],
              [
                "test_load_from_file_pipeline",
                "false"
              ],
              [
                "test_write_pipeline",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_default_pipeline",
                "false"
              ],
              [
                "test_png_file_reading",
                "false"
              ],
              [
                "test_graph_load",
                "false"
              ],
              [
                "test_load_image",
                "false"
              ],
              [
                "test_pbtxt_load",
                "false"
              ],
              [
                "test_version",
                "false"
              ],
              [
                "test_load_from_file_pipeline",
                "false"
              ],
              [
                "test_write_pipeline",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_default_pipeline",
                "5"
              ],
              [
                "test_png_file_reading",
                "4"
              ],
              [
                "test_graph_load",
                "1"
              ],
              [
                "test_load_image",
                "3"
              ],
              [
                "test_pbtxt_load",
                "1"
              ],
              [
                "test_version",
                "1"
              ],
              [
                "test_load_from_file_pipeline",
                "5"
              ],
              [
                "test_write_pipeline",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_load_default_pipeline",
                [
                  "PipelineSettings"
                ]
              ],
              [
                "test_png_file_reading",
                [
                  "png_file"
                ]
              ],
              [
                "test_graph_load",
                []
              ],
              [
                "test_load_image",
                []
              ],
              [
                "test_pbtxt_load",
                []
              ],
              [
                "test_version",
                []
              ],
              [
                "test_load_from_file_pipeline",
                [
                  "PipelineSettings"
                ]
              ],
              [
                "test_write_pipeline",
                [
                  "write_file",
                  "write_contents",
                  "sample_contents",
                  "PipelineSettings",
                  "sample_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_load_default_pipeline",
                [
                  "self.PL"
                ]
              ],
              [
                "test_png_file_reading",
                [
                  "self.PL"
                ]
              ],
              [
                "test_graph_load",
                [
                  "self.PL",
                  "self.graph"
                ]
              ],
              [
                "test_load_image",
                [
                  "self.PL"
                ]
              ],
              [
                "test_pbtxt_load",
                [
                  "self.label",
                  "self.PL"
                ]
              ],
              [
                "test_version",
                [
                  "self.PL"
                ]
              ],
              [
                "test_load_from_file_pipeline",
                [
                  "self.PL"
                ]
              ],
              [
                "test_write_pipeline",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3763962315125715,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_graph_load",
                  "test_load_image",
                  0.19733425949096461
                ],
                [
                  "test_load_image",
                  "test_load_from_file_pipeline",
                  0.48251448775772193
                ],
                [
                  "test_version",
                  "test_load_image",
                  0.6663834005962342
                ],
                [
                  "test_graph_load",
                  "test_pbtxt_load",
                  0.5833333333333334
                ],
                [
                  "test_graph_load",
                  "test_load_from_file_pipeline",
                  0.5027933178237151
                ],
                [
                  "test_version",
                  "test_load_default_pipeline",
                  0.2705266658912978
                ],
                [
                  "test_png_file_reading",
                  "test_write_pipeline",
                  0.16772606538118057
                ],
                [
                  "test_version",
                  "test_write_pipeline",
                  0.29120697691874514
                ],
                [
                  "test_load_image",
                  "test_png_file_reading",
                  0.2778095985525606
                ],
                [
                  "test_graph_load",
                  "test_png_file_reading",
                  0.4032795663087216
                ],
                [
                  "test_load_default_pipeline",
                  "test_png_file_reading",
                  0.5674257682151657
                ],
                [
                  "test_version",
                  "test_load_from_file_pipeline",
                  0.3191534511615645
                ],
                [
                  "test_graph_load",
                  "test_load_default_pipeline",
                  0.5327335463874421
                ],
                [
                  "test_load_default_pipeline",
                  "test_write_pipeline",
                  0.2565508553441155
                ],
                [
                  "test_version",
                  "test_pbtxt_load",
                  0.20100756305184242
                ],
                [
                  "test_graph_load",
                  "test_write_pipeline",
                  0.07624928516630233
                ],
                [
                  "test_pbtxt_load",
                  "test_png_file_reading",
                  0.4032795663087216
                ],
                [
                  "test_load_from_file_pipeline",
                  "test_png_file_reading",
                  0.5588199626086396
                ],
                [
                  "test_pbtxt_load",
                  "test_load_image",
                  0.19733425949096461
                ],
                [
                  "test_pbtxt_load",
                  "test_write_pipeline",
                  0.07624928516630233
                ],
                [
                  "test_version",
                  "test_png_file_reading",
                  0.26529461297122914
                ],
                [
                  "test_load_from_file_pipeline",
                  "test_load_default_pipeline",
                  0.9705101563263431
                ],
                [
                  "test_load_image",
                  "test_write_pipeline",
                  0.31898783997016245
                ],
                [
                  "test_pbtxt_load",
                  "test_load_default_pipeline",
                  0.5046949386828399
                ],
                [
                  "test_load_image",
                  "test_load_default_pipeline",
                  0.43157227530653597
                ],
                [
                  "test_pbtxt_load",
                  "test_load_from_file_pipeline",
                  0.4763305116224669
                ],
                [
                  "test_version",
                  "test_graph_load",
                  0.20100756305184242
                ],
                [
                  "test_load_from_file_pipeline",
                  "test_write_pipeline",
                  0.33898536946504687
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_load_default_pipeline",
                "false"
              ],
              [
                "test_png_file_reading",
                "false"
              ],
              [
                "test_graph_load",
                "false"
              ],
              [
                "test_load_image",
                "true"
              ],
              [
                "test_pbtxt_load",
                "false"
              ],
              [
                "test_version",
                "false"
              ],
              [
                "test_load_from_file_pipeline",
                "false"
              ],
              [
                "test_write_pipeline",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      },
      {
        "name": "TestDetection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_infer_network",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_infer_network",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_infer_network",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_infer_network",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_infer_network",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_infer_network",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_infer_network",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_infer_network",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_infer_network",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                [
                  "expected_bounding_boxes"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_infer_network",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_infer_network",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestFilteration",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_basic_filteration",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_basic_filteration",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_basic_filteration",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_basic_filteration",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_basic_filteration",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_basic_filteration",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_basic_filteration",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_basic_filteration",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_basic_filteration",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                [
                  "expected_bounding_boxes"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_basic_filteration",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_basic_filteration",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestLabelling",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_name_map_fail",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_camera_map",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_name_map",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_pot_labels",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_camera_map_fail",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_name_map_fail",
                  "[]"
                ],
                [
                  "test_camera_map",
                  "[]"
                ],
                [
                  "test_name_map",
                  "[]"
                ],
                [
                  "test_get_pot_labels",
                  "[]"
                ],
                [
                  "test_camera_map_fail",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_name_map_fail",
                  "false"
                ],
                [
                  "test_camera_map",
                  "true"
                ],
                [
                  "test_name_map",
                  "false"
                ],
                [
                  "test_get_pot_labels",
                  "false"
                ],
                [
                  "test_camera_map_fail",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_name_map_fail",
                  "false"
                ],
                [
                  "test_camera_map",
                  "false"
                ],
                [
                  "test_name_map",
                  "false"
                ],
                [
                  "test_get_pot_labels",
                  "false"
                ],
                [
                  "test_camera_map_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_name_map_fail",
                  "false"
                ],
                [
                  "test_camera_map",
                  "false"
                ],
                [
                  "test_name_map",
                  "false"
                ],
                [
                  "test_get_pot_labels",
                  "false"
                ],
                [
                  "test_camera_map_fail",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_name_map_fail",
                  "false"
                ],
                [
                  "test_camera_map",
                  "false"
                ],
                [
                  "test_name_map",
                  "false"
                ],
                [
                  "test_get_pot_labels",
                  "false"
                ],
                [
                  "test_camera_map_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                "false"
              ],
              [
                "test_camera_map",
                "false"
              ],
              [
                "test_name_map",
                "false"
              ],
              [
                "test_get_pot_labels",
                "false"
              ],
              [
                "test_camera_map_fail",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_name_map_fail",
                "true"
              ],
              [
                "test_camera_map",
                "false"
              ],
              [
                "test_name_map",
                "false"
              ],
              [
                "test_get_pot_labels",
                "false"
              ],
              [
                "test_camera_map_fail",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                []
              ],
              [
                "test_camera_map",
                []
              ],
              [
                "test_name_map",
                []
              ],
              [
                "test_get_pot_labels",
                []
              ],
              [
                "test_camera_map_fail",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                "false"
              ],
              [
                "test_camera_map",
                "false"
              ],
              [
                "test_name_map",
                "false"
              ],
              [
                "test_get_pot_labels",
                "false"
              ],
              [
                "test_camera_map_fail",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_name_map_fail",
                "false"
              ],
              [
                "test_camera_map",
                "false"
              ],
              [
                "test_name_map",
                "true"
              ],
              [
                "test_get_pot_labels",
                "false"
              ],
              [
                "test_camera_map_fail",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_name_map_fail",
                  "0"
                ],
                [
                  "test_camera_map",
                  "0"
                ],
                [
                  "test_name_map",
                  "0"
                ],
                [
                  "test_get_pot_labels",
                  "0"
                ],
                [
                  "test_camera_map_fail",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_name_map_fail",
                  "0"
                ],
                [
                  "test_camera_map",
                  "0"
                ],
                [
                  "test_name_map",
                  "0"
                ],
                [
                  "test_get_pot_labels",
                  "0"
                ],
                [
                  "test_camera_map_fail",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                "false"
              ],
              [
                "test_camera_map",
                "false"
              ],
              [
                "test_name_map",
                "false"
              ],
              [
                "test_get_pot_labels",
                "false"
              ],
              [
                "test_camera_map_fail",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                "false"
              ],
              [
                "test_camera_map",
                "false"
              ],
              [
                "test_name_map",
                "false"
              ],
              [
                "test_get_pot_labels",
                "false"
              ],
              [
                "test_camera_map_fail",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                "1"
              ],
              [
                "test_camera_map",
                "5"
              ],
              [
                "test_name_map",
                "8"
              ],
              [
                "test_get_pot_labels",
                "4"
              ],
              [
                "test_camera_map_fail",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                [
                  "filename"
                ]
              ],
              [
                "test_camera_map",
                [
                  "filename",
                  "cam_name"
                ]
              ],
              [
                "test_name_map",
                [
                  "filename"
                ]
              ],
              [
                "test_get_pot_labels",
                [
                  "W_result",
                  "EW",
                  "NS",
                  "S_result",
                  "N_result",
                  "E_result"
                ]
              ],
              [
                "test_camera_map_fail",
                [
                  "filename"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_name_map_fail",
                [
                  "self.PL"
                ]
              ],
              [
                "test_camera_map",
                [
                  "self.PL"
                ]
              ],
              [
                "test_name_map",
                [
                  "self.PL"
                ]
              ],
              [
                "test_get_pot_labels",
                [
                  "self.PL"
                ]
              ],
              [
                "test_camera_map_fail",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.28385894686306534,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_camera_map_fail",
                  "test_name_map",
                  0.21518834171247192
                ],
                [
                  "test_name_map_fail",
                  "test_get_pot_labels",
                  0.12300366257644171
                ],
                [
                  "test_name_map_fail",
                  "test_camera_map_fail",
                  0.7380952380952381
                ],
                [
                  "test_camera_map",
                  "test_get_pot_labels",
                  0.07413890404166805
                ],
                [
                  "test_camera_map_fail",
                  "test_get_pot_labels",
                  0.12300366257644171
                ],
                [
                  "test_name_map",
                  "test_get_pot_labels",
                  0.18643350331523298
                ],
                [
                  "test_name_map_fail",
                  "test_name_map",
                  0.2619684159977919
                ],
                [
                  "test_name_map_fail",
                  "test_camera_map",
                  0.40182491311640833
                ],
                [
                  "test_name_map",
                  "test_camera_map",
                  0.32566494261743845
                ],
                [
                  "test_camera_map_fail",
                  "test_camera_map",
                  0.3892678845815206
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_name_map_fail",
                "false"
              ],
              [
                "test_camera_map",
                "true"
              ],
              [
                "test_name_map",
                "false"
              ],
              [
                "test_get_pot_labels",
                "false"
              ],
              [
                "test_camera_map_fail",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestThresholding",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_change_lab_settings",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_change_hsv_settings",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_change_lab_settings",
                  "[]"
                ],
                [
                  "test_change_hsv_settings",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_change_lab_settings",
                  "false"
                ],
                [
                  "test_change_hsv_settings",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_change_lab_settings",
                  "false"
                ],
                [
                  "test_change_hsv_settings",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_change_lab_settings",
                  "false"
                ],
                [
                  "test_change_hsv_settings",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_change_lab_settings",
                  "false"
                ],
                [
                  "test_change_hsv_settings",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "false"
              ],
              [
                "test_change_hsv_settings",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "false"
              ],
              [
                "test_change_hsv_settings",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                []
              ],
              [
                "test_change_hsv_settings",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "false"
              ],
              [
                "test_change_hsv_settings",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "false"
              ],
              [
                "test_change_hsv_settings",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_change_lab_settings",
                  "0"
                ],
                [
                  "test_change_hsv_settings",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_change_lab_settings",
                  "0"
                ],
                [
                  "test_change_hsv_settings",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "false"
              ],
              [
                "test_change_hsv_settings",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "false"
              ],
              [
                "test_change_hsv_settings",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "12"
              ],
              [
                "test_change_hsv_settings",
                "12"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_change_lab_settings",
                [
                  "oa2",
                  "L1",
                  "L2",
                  "b1",
                  "a1",
                  "b2",
                  "a2",
                  "nL1",
                  "oL2",
                  "oL1",
                  "nL2",
                  "nb1",
                  "oa1",
                  "ob2",
                  "na2",
                  "ob1",
                  "na1",
                  "nb2"
                ]
              ],
              [
                "test_change_hsv_settings",
                [
                  "ohue2",
                  "ohue1",
                  "val2",
                  "val1",
                  "hue1",
                  "osat2",
                  "osat1",
                  "hue2",
                  "oval1",
                  "oval2",
                  "nhue2",
                  "nhue1",
                  "nsat2",
                  "sat2",
                  "nsat1",
                  "nval2",
                  "nval1",
                  "sat1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                [
                  "self.PL"
                ]
              ],
              [
                "test_change_hsv_settings",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8388774588063193,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_change_hsv_settings",
                  "test_change_lab_settings",
                  0.8388774588063193
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_change_lab_settings",
                "false"
              ],
              [
                "test_change_hsv_settings",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestColorCorrection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_max_color_correct",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_min_color_correct",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_imadjust",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_min_max_color_correct",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_max_color_correct",
                  "[]"
                ],
                [
                  "test_min_color_correct",
                  "[]"
                ],
                [
                  "test_imadjust",
                  "[]"
                ],
                [
                  "test_min_max_color_correct",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_max_color_correct",
                  "false"
                ],
                [
                  "test_min_color_correct",
                  "false"
                ],
                [
                  "test_imadjust",
                  "false"
                ],
                [
                  "test_min_max_color_correct",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_max_color_correct",
                  "false"
                ],
                [
                  "test_min_color_correct",
                  "false"
                ],
                [
                  "test_imadjust",
                  "false"
                ],
                [
                  "test_min_max_color_correct",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_max_color_correct",
                  "false"
                ],
                [
                  "test_min_color_correct",
                  "false"
                ],
                [
                  "test_imadjust",
                  "true"
                ],
                [
                  "test_min_max_color_correct",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_max_color_correct",
                  "false"
                ],
                [
                  "test_min_color_correct",
                  "false"
                ],
                [
                  "test_imadjust",
                  "false"
                ],
                [
                  "test_min_max_color_correct",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                "false"
              ],
              [
                "test_min_color_correct",
                "false"
              ],
              [
                "test_imadjust",
                "false"
              ],
              [
                "test_min_max_color_correct",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                "false"
              ],
              [
                "test_min_color_correct",
                "false"
              ],
              [
                "test_imadjust",
                "false"
              ],
              [
                "test_min_max_color_correct",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                []
              ],
              [
                "test_min_color_correct",
                []
              ],
              [
                "test_imadjust",
                []
              ],
              [
                "test_min_max_color_correct",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                "false"
              ],
              [
                "test_min_color_correct",
                "false"
              ],
              [
                "test_imadjust",
                "false"
              ],
              [
                "test_min_max_color_correct",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_max_color_correct",
                "false"
              ],
              [
                "test_min_color_correct",
                "false"
              ],
              [
                "test_imadjust",
                "true"
              ],
              [
                "test_min_max_color_correct",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_max_color_correct",
                  "0"
                ],
                [
                  "test_min_color_correct",
                  "0"
                ],
                [
                  "test_imadjust",
                  "0"
                ],
                [
                  "test_min_max_color_correct",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_max_color_correct",
                  "0"
                ],
                [
                  "test_min_color_correct",
                  "0"
                ],
                [
                  "test_imadjust",
                  "0"
                ],
                [
                  "test_min_max_color_correct",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                "false"
              ],
              [
                "test_min_color_correct",
                "false"
              ],
              [
                "test_imadjust",
                "false"
              ],
              [
                "test_min_max_color_correct",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                "false"
              ],
              [
                "test_min_color_correct",
                "false"
              ],
              [
                "test_imadjust",
                "false"
              ],
              [
                "test_min_max_color_correct",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                "2"
              ],
              [
                "test_min_color_correct",
                "2"
              ],
              [
                "test_imadjust",
                "4"
              ],
              [
                "test_min_max_color_correct",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                [
                  "highest"
                ]
              ],
              [
                "test_min_color_correct",
                [
                  "lowest"
                ]
              ],
              [
                "test_imadjust",
                [
                  "t",
                  "corrected"
                ]
              ],
              [
                "test_min_max_color_correct",
                [
                  "highest",
                  "lowest"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_max_color_correct",
                [
                  "self.PL"
                ]
              ],
              [
                "test_min_color_correct",
                [
                  "self.PL"
                ]
              ],
              [
                "test_imadjust",
                [
                  "self.PL"
                ]
              ],
              [
                "test_min_max_color_correct",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7244463044900057,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_imadjust",
                  "test_min_color_correct",
                  0.5425735506604602
                ],
                [
                  "test_max_color_correct",
                  "test_min_max_color_correct",
                  0.9377774206436698
                ],
                [
                  "test_imadjust",
                  "test_max_color_correct",
                  0.5425735506604602
                ],
                [
                  "test_min_color_correct",
                  "test_max_color_correct",
                  0.8106508875739645
                ],
                [
                  "test_min_color_correct",
                  "test_min_max_color_correct",
                  0.9377774206436698
                ],
                [
                  "test_imadjust",
                  "test_min_max_color_correct",
                  0.5753249967578101
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_max_color_correct",
                "true"
              ],
              [
                "test_min_color_correct",
                "true"
              ],
              [
                "test_imadjust",
                "false"
              ],
              [
                "test_min_max_color_correct",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestMasking",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_mask",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_mask",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_mask",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_mask",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_mask",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_mask",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_mask",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_mask",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_mask",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestBoundingBoxDrawing",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_draw_bounding_box",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_draw_bounding_box",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_draw_bounding_box",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_draw_bounding_box",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_draw_bounding_box",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_draw_bounding_box",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_draw_bounding_box",
                  "1"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_draw_bounding_box",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_draw_bounding_box",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestOutputs",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_circular_hsv_figure",
                  "[]"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "[]"
                ],
                [
                  "test_circular_hsv_figure",
                  "[]"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "false"
                ],
                [
                  "test_circular_hsv_figure",
                  "false"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "false"
                ],
                [
                  "test_circular_hsv_figure",
                  "false"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "false"
                ],
                [
                  "test_circular_hsv_figure",
                  "false"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "false"
                ],
                [
                  "test_circular_hsv_figure",
                  "false"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "false"
              ],
              [
                "test_circular_hsv_figure",
                "false"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "false"
              ],
              [
                "test_circular_hsv_figure",
                "false"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                []
              ],
              [
                "test_circular_hsv_figure",
                []
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "false"
              ],
              [
                "test_circular_hsv_figure",
                "false"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "false"
              ],
              [
                "test_circular_hsv_figure",
                "false"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "1"
                ],
                [
                  "test_circular_hsv_figure",
                  "0"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "0"
                ],
                [
                  "test_circular_hsv_figure",
                  "0"
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "false"
              ],
              [
                "test_circular_hsv_figure",
                "false"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "false"
              ],
              [
                "test_circular_hsv_figure",
                "false"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "1"
              ],
              [
                "test_circular_hsv_figure",
                "0"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                [
                  "_file"
                ]
              ],
              [
                "test_circular_hsv_figure",
                [
                  "_file"
                ]
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                [
                  "_file",
                  "dataline",
                  "True_results",
                  "header",
                  "results"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                [
                  "self.PL"
                ]
              ],
              [
                "test_circular_hsv_figure",
                [
                  "self.PL"
                ]
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7212332112632174,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_crop_and_label_pots_1_image_greenness",
                  "test_circular_hsv_figure",
                  0.9452063230405785
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "test_circular_hsv_figure",
                  0.6027270720944283
                ],
                [
                  "test_crop_and_label_pots_1_image_size_thresholding",
                  "test_crop_and_label_pots_1_image_greenness",
                  0.6157662386546454
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_crop_and_label_pots_1_image_greenness",
                "false"
              ],
              [
                "test_circular_hsv_figure",
                "false"
              ],
              [
                "test_crop_and_label_pots_1_image_size_thresholding",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestsPipelineRunner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_defaults",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_pipeline_preparation",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_open_pipeline",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pipeline_test",
                  "[]"
                ],
                [
                  "test_open_pipeline_planner",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_defaults",
                  "[]"
                ],
                [
                  "test_pipeline_preparation",
                  "[]"
                ],
                [
                  "test_open_pipeline",
                  "[]"
                ],
                [
                  "test_pipeline_test",
                  "[]"
                ],
                [
                  "test_open_pipeline_planner",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_defaults",
                  "false"
                ],
                [
                  "test_pipeline_preparation",
                  "false"
                ],
                [
                  "test_open_pipeline",
                  "false"
                ],
                [
                  "test_pipeline_test",
                  "false"
                ],
                [
                  "test_open_pipeline_planner",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_defaults",
                  "false"
                ],
                [
                  "test_pipeline_preparation",
                  "false"
                ],
                [
                  "test_open_pipeline",
                  "false"
                ],
                [
                  "test_pipeline_test",
                  "false"
                ],
                [
                  "test_open_pipeline_planner",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_defaults",
                  "false"
                ],
                [
                  "test_pipeline_preparation",
                  "false"
                ],
                [
                  "test_open_pipeline",
                  "false"
                ],
                [
                  "test_pipeline_test",
                  "false"
                ],
                [
                  "test_open_pipeline_planner",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_defaults",
                  "false"
                ],
                [
                  "test_pipeline_preparation",
                  "false"
                ],
                [
                  "test_open_pipeline",
                  "false"
                ],
                [
                  "test_pipeline_test",
                  "false"
                ],
                [
                  "test_open_pipeline_planner",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ],
              [
                "test_pipeline_preparation",
                "false"
              ],
              [
                "test_open_pipeline",
                "false"
              ],
              [
                "test_pipeline_test",
                "false"
              ],
              [
                "test_open_pipeline_planner",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ],
              [
                "test_pipeline_preparation",
                "false"
              ],
              [
                "test_open_pipeline",
                "false"
              ],
              [
                "test_pipeline_test",
                "false"
              ],
              [
                "test_open_pipeline_planner",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_defaults",
                [
                  "self.mainwindow.windowicon"
                ]
              ],
              [
                "test_pipeline_preparation",
                [
                  "self.mainwindow.windowicon"
                ]
              ],
              [
                "test_open_pipeline",
                [
                  "self.mainwindow.windowicon"
                ]
              ],
              [
                "test_pipeline_test",
                [
                  "self.mainwindow.windowicon"
                ]
              ],
              [
                "test_open_pipeline_planner",
                [
                  "self.mainwindow.windowicon"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ],
              [
                "test_pipeline_preparation",
                "false"
              ],
              [
                "test_open_pipeline",
                "false"
              ],
              [
                "test_pipeline_test",
                "false"
              ],
              [
                "test_open_pipeline_planner",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ],
              [
                "test_pipeline_preparation",
                "false"
              ],
              [
                "test_open_pipeline",
                "false"
              ],
              [
                "test_pipeline_test",
                "false"
              ],
              [
                "test_open_pipeline_planner",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_defaults",
                  "1"
                ],
                [
                  "test_pipeline_preparation",
                  "0"
                ],
                [
                  "test_open_pipeline",
                  "0"
                ],
                [
                  "test_pipeline_test",
                  "0"
                ],
                [
                  "test_open_pipeline_planner",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_defaults",
                  "0"
                ],
                [
                  "test_pipeline_preparation",
                  "0"
                ],
                [
                  "test_open_pipeline",
                  "0"
                ],
                [
                  "test_pipeline_test",
                  "0"
                ],
                [
                  "test_open_pipeline_planner",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ],
              [
                "test_pipeline_preparation",
                "false"
              ],
              [
                "test_open_pipeline",
                "false"
              ],
              [
                "test_pipeline_test",
                "false"
              ],
              [
                "test_open_pipeline_planner",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ],
              [
                "test_pipeline_preparation",
                "false"
              ],
              [
                "test_open_pipeline",
                "false"
              ],
              [
                "test_pipeline_test",
                "false"
              ],
              [
                "test_open_pipeline_planner",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_defaults",
                "1"
              ],
              [
                "test_pipeline_preparation",
                "14"
              ],
              [
                "test_open_pipeline",
                "2"
              ],
              [
                "test_pipeline_test",
                "0"
              ],
              [
                "test_open_pipeline_planner",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                []
              ],
              [
                "test_pipeline_preparation",
                []
              ],
              [
                "test_open_pipeline",
                []
              ],
              [
                "test_pipeline_test",
                []
              ],
              [
                "test_open_pipeline_planner",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                [
                  "self.mainwindow"
                ]
              ],
              [
                "test_pipeline_preparation",
                [
                  "self.mainwindow"
                ]
              ],
              [
                "test_open_pipeline",
                [
                  "self.mainwindow"
                ]
              ],
              [
                "test_pipeline_test",
                [
                  "self.mainwindow"
                ]
              ],
              [
                "test_open_pipeline_planner",
                [
                  "self.mainwindow"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2217651322840588,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_pipeline_preparation",
                  "test_open_pipeline_planner",
                  0.041344911529736156
                ],
                [
                  "test_pipeline_preparation",
                  "test_pipeline_test",
                  0.5020747682745755
                ],
                [
                  "test_pipeline_test",
                  "test_open_pipeline_planner",
                  0.08689494506075625
                ],
                [
                  "test_defaults",
                  "test_pipeline_test",
                  0.1356646894938404
                ],
                [
                  "test_open_pipeline",
                  "test_pipeline_preparation",
                  0.33101874976866896
                ],
                [
                  "test_open_pipeline",
                  "test_open_pipeline_planner",
                  0.20965696734438366
                ],
                [
                  "test_defaults",
                  "test_open_pipeline",
                  0.2182178902359924
                ],
                [
                  "test_defaults",
                  "test_open_pipeline_planner",
                  0.16012815380508716
                ],
                [
                  "test_open_pipeline",
                  "test_pipeline_test",
                  0.1776267739252011
                ],
                [
                  "test_defaults",
                  "test_pipeline_preparation",
                  0.3550234734023466
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ],
              [
                "test_pipeline_preparation",
                "false"
              ],
              [
                "test_open_pipeline",
                "false"
              ],
              [
                "test_pipeline_test",
                "false"
              ],
              [
                "test_open_pipeline_planner",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestsPipelinePlanner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_defaults",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_defaults",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_defaults",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_defaults",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_defaults",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_defaults",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_defaults",
                  "1"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_defaults",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                [
                  "self.mainwindow"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_defaults",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestsUnet",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "tests_no_augmentations",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pascal_voc_ap",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_dim_sizes",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_load_unet",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_unet_predict_and_output",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_unet_prepare_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_segmentation_measures",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_unet_creation_parameters",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_join_unet_data",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "tests_no_augmentations",
                  "[]"
                ],
                [
                  "test_pascal_voc_ap",
                  "[]"
                ],
                [
                  "test_dim_sizes",
                  "[]"
                ],
                [
                  "test_load_unet",
                  "[]"
                ],
                [
                  "test_unet_predict_and_output",
                  "[]"
                ],
                [
                  "test_unet_prepare_data",
                  "[]"
                ],
                [
                  "test_segmentation_measures",
                  "[]"
                ],
                [
                  "test_unet_creation_parameters",
                  "[]"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "[]"
                ],
                [
                  "test_join_unet_data",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "tests_no_augmentations",
                  "false"
                ],
                [
                  "test_pascal_voc_ap",
                  "false"
                ],
                [
                  "test_dim_sizes",
                  "true"
                ],
                [
                  "test_load_unet",
                  "false"
                ],
                [
                  "test_unet_predict_and_output",
                  "true"
                ],
                [
                  "test_unet_prepare_data",
                  "true"
                ],
                [
                  "test_segmentation_measures",
                  "false"
                ],
                [
                  "test_unet_creation_parameters",
                  "false"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "false"
                ],
                [
                  "test_join_unet_data",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "tests_no_augmentations",
                  "false"
                ],
                [
                  "test_pascal_voc_ap",
                  "false"
                ],
                [
                  "test_dim_sizes",
                  "false"
                ],
                [
                  "test_load_unet",
                  "false"
                ],
                [
                  "test_unet_predict_and_output",
                  "false"
                ],
                [
                  "test_unet_prepare_data",
                  "false"
                ],
                [
                  "test_segmentation_measures",
                  "false"
                ],
                [
                  "test_unet_creation_parameters",
                  "false"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "false"
                ],
                [
                  "test_join_unet_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "tests_no_augmentations",
                  "false"
                ],
                [
                  "test_pascal_voc_ap",
                  "false"
                ],
                [
                  "test_dim_sizes",
                  "false"
                ],
                [
                  "test_load_unet",
                  "false"
                ],
                [
                  "test_unet_predict_and_output",
                  "false"
                ],
                [
                  "test_unet_prepare_data",
                  "false"
                ],
                [
                  "test_segmentation_measures",
                  "false"
                ],
                [
                  "test_unet_creation_parameters",
                  "false"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "false"
                ],
                [
                  "test_join_unet_data",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "tests_no_augmentations",
                  "false"
                ],
                [
                  "test_pascal_voc_ap",
                  "false"
                ],
                [
                  "test_dim_sizes",
                  "false"
                ],
                [
                  "test_load_unet",
                  "false"
                ],
                [
                  "test_unet_predict_and_output",
                  "false"
                ],
                [
                  "test_unet_prepare_data",
                  "false"
                ],
                [
                  "test_segmentation_measures",
                  "false"
                ],
                [
                  "test_unet_creation_parameters",
                  "false"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "false"
                ],
                [
                  "test_join_unet_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                "false"
              ],
              [
                "test_pascal_voc_ap",
                "false"
              ],
              [
                "test_dim_sizes",
                "false"
              ],
              [
                "test_load_unet",
                "false"
              ],
              [
                "test_unet_predict_and_output",
                "false"
              ],
              [
                "test_unet_prepare_data",
                "false"
              ],
              [
                "test_segmentation_measures",
                "false"
              ],
              [
                "test_unet_creation_parameters",
                "false"
              ],
              [
                "test_load_train_data_and_augmentations",
                "false"
              ],
              [
                "test_join_unet_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                "false"
              ],
              [
                "test_pascal_voc_ap",
                "false"
              ],
              [
                "test_dim_sizes",
                "false"
              ],
              [
                "test_load_unet",
                "false"
              ],
              [
                "test_unet_predict_and_output",
                "false"
              ],
              [
                "test_unet_prepare_data",
                "false"
              ],
              [
                "test_segmentation_measures",
                "false"
              ],
              [
                "test_unet_creation_parameters",
                "false"
              ],
              [
                "test_load_train_data_and_augmentations",
                "false"
              ],
              [
                "test_join_unet_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                []
              ],
              [
                "test_pascal_voc_ap",
                []
              ],
              [
                "test_dim_sizes",
                []
              ],
              [
                "test_load_unet",
                []
              ],
              [
                "test_unet_predict_and_output",
                []
              ],
              [
                "test_unet_prepare_data",
                []
              ],
              [
                "test_segmentation_measures",
                []
              ],
              [
                "test_unet_creation_parameters",
                []
              ],
              [
                "test_load_train_data_and_augmentations",
                []
              ],
              [
                "test_join_unet_data",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                "false"
              ],
              [
                "test_pascal_voc_ap",
                "false"
              ],
              [
                "test_dim_sizes",
                "false"
              ],
              [
                "test_load_unet",
                "false"
              ],
              [
                "test_unet_predict_and_output",
                "false"
              ],
              [
                "test_unet_prepare_data",
                "false"
              ],
              [
                "test_segmentation_measures",
                "false"
              ],
              [
                "test_unet_creation_parameters",
                "false"
              ],
              [
                "test_load_train_data_and_augmentations",
                "false"
              ],
              [
                "test_join_unet_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "tests_no_augmentations",
                "true"
              ],
              [
                "test_pascal_voc_ap",
                "false"
              ],
              [
                "test_dim_sizes",
                "false"
              ],
              [
                "test_load_unet",
                "false"
              ],
              [
                "test_unet_predict_and_output",
                "false"
              ],
              [
                "test_unet_prepare_data",
                "true"
              ],
              [
                "test_segmentation_measures",
                "false"
              ],
              [
                "test_unet_creation_parameters",
                "false"
              ],
              [
                "test_load_train_data_and_augmentations",
                "true"
              ],
              [
                "test_join_unet_data",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "tests_no_augmentations",
                  "0"
                ],
                [
                  "test_pascal_voc_ap",
                  "0"
                ],
                [
                  "test_dim_sizes",
                  "0"
                ],
                [
                  "test_load_unet",
                  "0"
                ],
                [
                  "test_unet_predict_and_output",
                  "0"
                ],
                [
                  "test_unet_prepare_data",
                  "0"
                ],
                [
                  "test_segmentation_measures",
                  "0"
                ],
                [
                  "test_unet_creation_parameters",
                  "0"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "0"
                ],
                [
                  "test_join_unet_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "tests_no_augmentations",
                  "0"
                ],
                [
                  "test_pascal_voc_ap",
                  "0"
                ],
                [
                  "test_dim_sizes",
                  "0"
                ],
                [
                  "test_load_unet",
                  "0"
                ],
                [
                  "test_unet_predict_and_output",
                  "0"
                ],
                [
                  "test_unet_prepare_data",
                  "0"
                ],
                [
                  "test_segmentation_measures",
                  "0"
                ],
                [
                  "test_unet_creation_parameters",
                  "0"
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "0"
                ],
                [
                  "test_join_unet_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                "false"
              ],
              [
                "test_pascal_voc_ap",
                "false"
              ],
              [
                "test_dim_sizes",
                "false"
              ],
              [
                "test_load_unet",
                "false"
              ],
              [
                "test_unet_predict_and_output",
                "false"
              ],
              [
                "test_unet_prepare_data",
                "false"
              ],
              [
                "test_segmentation_measures",
                "false"
              ],
              [
                "test_unet_creation_parameters",
                "false"
              ],
              [
                "test_load_train_data_and_augmentations",
                "false"
              ],
              [
                "test_join_unet_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                "false"
              ],
              [
                "test_pascal_voc_ap",
                "false"
              ],
              [
                "test_dim_sizes",
                "false"
              ],
              [
                "test_load_unet",
                "false"
              ],
              [
                "test_unet_predict_and_output",
                "false"
              ],
              [
                "test_unet_prepare_data",
                "false"
              ],
              [
                "test_segmentation_measures",
                "false"
              ],
              [
                "test_unet_creation_parameters",
                "false"
              ],
              [
                "test_load_train_data_and_augmentations",
                "false"
              ],
              [
                "test_join_unet_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "tests_no_augmentations",
                "2"
              ],
              [
                "test_pascal_voc_ap",
                "3"
              ],
              [
                "test_dim_sizes",
                "1"
              ],
              [
                "test_load_unet",
                "2"
              ],
              [
                "test_unet_predict_and_output",
                "1"
              ],
              [
                "test_unet_prepare_data",
                "10"
              ],
              [
                "test_segmentation_measures",
                "5"
              ],
              [
                "test_unet_creation_parameters",
                "1"
              ],
              [
                "test_load_train_data_and_augmentations",
                "2"
              ],
              [
                "test_join_unet_data",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "tests_no_augmentations",
                [
                  "labeldata",
                  "augment_label",
                  "filenames",
                  "traindata",
                  "augment_train"
                ]
              ],
              [
                "test_pascal_voc_ap",
                [
                  "recalls",
                  "true_all_AP",
                  "ious",
                  "true_all_50IOU",
                  "precisions",
                  "true_all_60IOU"
                ]
              ],
              [
                "test_dim_sizes",
                [
                  "good_resolutions",
                  "Unet_model"
                ]
              ],
              [
                "test_load_unet",
                []
              ],
              [
                "test_unet_predict_and_output",
                [
                  "_file",
                  "filename_labels",
                  "dataline",
                  "True_results",
                  "header",
                  "imagedata",
                  "crops",
                  "results",
                  "predicted_masks"
                ]
              ],
              [
                "test_unet_prepare_data",
                [
                  "filename_labels",
                  "imagedata",
                  "crops",
                  "True_labels"
                ]
              ],
              [
                "test_segmentation_measures",
                [
                  "truth_array",
                  "true_precision",
                  "FN",
                  "TN",
                  "FP",
                  "true_recall",
                  "TP",
                  "prediction_array",
                  "true_pixel_accuracy",
                  "true_dice_coefficient",
                  "true_iou"
                ]
              ],
              [
                "test_unet_creation_parameters",
                [
                  "number_of_params",
                  "Unet_model",
                  "model",
                  "expected_number_of_params"
                ]
              ],
              [
                "test_load_train_data_and_augmentations",
                [
                  "labeldata",
                  "augment_label",
                  "filenames",
                  "traindata",
                  "augment_train"
                ]
              ],
              [
                "test_join_unet_data",
                [
                  "testdata",
                  "testfilenames",
                  "filenames",
                  "traindata",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                [
                  "self.PL"
                ]
              ],
              [
                "test_pascal_voc_ap",
                [
                  "self.PL"
                ]
              ],
              [
                "test_dim_sizes",
                [
                  "self.PL"
                ]
              ],
              [
                "test_load_unet",
                [
                  "self.PL"
                ]
              ],
              [
                "test_unet_predict_and_output",
                [
                  "self.PL"
                ]
              ],
              [
                "test_unet_prepare_data",
                [
                  "self.PL"
                ]
              ],
              [
                "test_segmentation_measures",
                [
                  "self.PL"
                ]
              ],
              [
                "test_unet_creation_parameters",
                [
                  "self.PL"
                ]
              ],
              [
                "test_load_train_data_and_augmentations",
                [
                  "self.PL"
                ]
              ],
              [
                "test_join_unet_data",
                [
                  "self.PL"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.31466607992462653,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_unet_predict_and_output",
                  "tests_no_augmentations",
                  0.3173496971627174
                ],
                [
                  "test_segmentation_measures",
                  "test_join_unet_data",
                  0.4040359485507324
                ],
                [
                  "test_unet_creation_parameters",
                  "test_pascal_voc_ap",
                  0.23739158222227277
                ],
                [
                  "test_unet_prepare_data",
                  "test_dim_sizes",
                  0.5917332597568774
                ],
                [
                  "test_unet_prepare_data",
                  "test_pascal_voc_ap",
                  0.40045289310825
                ],
                [
                  "test_load_unet",
                  "test_unet_predict_and_output",
                  0.10118446692792217
                ],
                [
                  "test_unet_prepare_data",
                  "test_segmentation_measures",
                  0.2891599888382919
                ],
                [
                  "test_unet_predict_and_output",
                  "test_unet_creation_parameters",
                  0.35437870148864975
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "tests_no_augmentations",
                  0.807390673248162
                ],
                [
                  "tests_no_augmentations",
                  "test_segmentation_measures",
                  0.3940389245870832
                ],
                [
                  "test_unet_predict_and_output",
                  "test_join_unet_data",
                  0.37193326652542863
                ],
                [
                  "test_dim_sizes",
                  "test_join_unet_data",
                  0.44537202092185446
                ],
                [
                  "test_unet_predict_and_output",
                  "test_dim_sizes",
                  0.296420146754322
                ],
                [
                  "test_dim_sizes",
                  "test_segmentation_measures",
                  0.7528075290665346
                ],
                [
                  "tests_no_augmentations",
                  "test_pascal_voc_ap",
                  0.27577234506502507
                ],
                [
                  "test_pascal_voc_ap",
                  "test_join_unet_data",
                  0.2454040639637422
                ],
                [
                  "test_unet_prepare_data",
                  "test_join_unet_data",
                  0.29742650755410927
                ],
                [
                  "test_load_unet",
                  "test_segmentation_measures",
                  0.06458604833701315
                ],
                [
                  "test_unet_predict_and_output",
                  "test_load_train_data_and_augmentations",
                  0.2367757491130227
                ],
                [
                  "test_unet_creation_parameters",
                  "test_dim_sizes",
                  0.4315618433527339
                ],
                [
                  "test_load_unet",
                  "test_pascal_voc_ap",
                  0.019005417394592206
                ],
                [
                  "test_dim_sizes",
                  "test_pascal_voc_ap",
                  0.5574158681297462
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "test_join_unet_data",
                  0.4912339811438
                ],
                [
                  "test_load_unet",
                  "tests_no_augmentations",
                  0.20701966780270628
                ],
                [
                  "test_dim_sizes",
                  "tests_no_augmentations",
                  0.4685134481749442
                ],
                [
                  "test_unet_predict_and_output",
                  "test_pascal_voc_ap",
                  0.19470911906621532
                ],
                [
                  "test_load_unet",
                  "test_dim_sizes",
                  0.04656656301892605
                ],
                [
                  "test_unet_creation_parameters",
                  "test_load_train_data_and_augmentations",
                  0.19228665013374346
                ],
                [
                  "test_unet_prepare_data",
                  "tests_no_augmentations",
                  0.3988604329122994
                ],
                [
                  "test_load_unet",
                  "test_unet_prepare_data",
                  0.12256227316540179
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "test_segmentation_measures",
                  0.3373059145301599
                ],
                [
                  "test_unet_prepare_data",
                  "test_load_train_data_and_augmentations",
                  0.13833915210797776
                ],
                [
                  "test_load_train_data_and_augmentations",
                  "test_pascal_voc_ap",
                  0.10939992100279021
                ],
                [
                  "test_load_unet",
                  "test_unet_creation_parameters",
                  0.09978072334820828
                ],
                [
                  "test_load_unet",
                  "test_join_unet_data",
                  0.1850453700009003
                ],
                [
                  "test_segmentation_measures",
                  "test_pascal_voc_ap",
                  0.4037309118146631
                ],
                [
                  "test_unet_prepare_data",
                  "test_unet_predict_and_output",
                  0.3489009390889816
                ],
                [
                  "test_unet_creation_parameters",
                  "test_join_unet_data",
                  0.3418470469817281
                ],
                [
                  "tests_no_augmentations",
                  "test_join_unet_data",
                  0.5089495550599169
                ],
                [
                  "test_unet_creation_parameters",
                  "tests_no_augmentations",
                  0.3222425263302931
                ],
                [
                  "test_unet_predict_and_output",
                  "test_segmentation_measures",
                  0.2273063241641734
                ],
                [
                  "test_dim_sizes",
                  "test_load_train_data_and_augmentations",
                  0.23075500814244032
                ],
                [
                  "test_unet_prepare_data",
                  "test_unet_creation_parameters",
                  0.4067971739639823
                ],
                [
                  "test_unet_creation_parameters",
                  "test_segmentation_measures",
                  0.23131758161756819
                ],
                [
                  "test_load_unet",
                  "test_load_train_data_and_augmentations",
                  0.25490637096729085
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "tests_no_augmentations",
                "false"
              ],
              [
                "test_pascal_voc_ap",
                "false"
              ],
              [
                "test_dim_sizes",
                "false"
              ],
              [
                "test_load_unet",
                "false"
              ],
              [
                "test_unet_predict_and_output",
                "false"
              ],
              [
                "test_unet_prepare_data",
                "false"
              ],
              [
                "test_segmentation_measures",
                "false"
              ],
              [
                "test_unet_creation_parameters",
                "false"
              ],
              [
                "test_load_train_data_and_augmentations",
                "false"
              ],
              [
                "test_join_unet_data",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  }
]