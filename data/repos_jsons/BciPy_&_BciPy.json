[
  {
    "name": "bcipy_\u0026_helpers_\u0026_tests_\u0026_test_load.py",
    "testCases": [
      {
        "name": "TestLoad",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_load_classifier",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_load_classifier",
                  "[]"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "[]"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_load_classifier",
                  "false"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "false"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_load_classifier",
                  "false"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "false"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_load_classifier",
                  "false"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "false"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_load_classifier",
                  "false"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "false"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "false"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "false"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "false"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "false"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_load_classifier",
                []
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                [
                  "self.parameters",
                  "self.temp_dir"
                ]
              ],
              [
                "test_load_json_parameters_returns_dict",
                [
                  "self.temp_dir"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "false"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "false"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "false"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "false"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_load_classifier",
                  "0"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "0"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_load_classifier",
                  "0"
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "0"
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "false"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "false"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "false"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "false"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "1"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "1"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                [
                  "pickle_file",
                  "unpickled_parameters"
                ]
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                []
              ],
              [
                "test_load_json_parameters_returns_dict",
                [
                  "parameters"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_load_classifier",
                [
                  "self.parameters",
                  "self.temp_dir"
                ]
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                []
              ],
              [
                "test_load_json_parameters_returns_dict",
                [
                  "self.parameters"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.551735165086286,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_load_json_parameters_returns_dict",
                  "test_load_classifier",
                  0.5283215984040461
                ],
                [
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  "test_load_classifier",
                  0.42699324622671997
                ],
                [
                  "test_load_json_parameters_returns_dict",
                  "test_load_json_parameters_throws_error_on_wrong_path",
                  0.6998906506280917
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_load_classifier",
                "false"
              ],
              [
                "test_load_json_parameters_throws_error_on_wrong_path",
                "false"
              ],
              [
                "test_load_json_parameters_returns_dict",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "bcipy_\u0026_helpers_\u0026_tests_\u0026_test_task.py",
    "testCases": [
      {
        "name": "TestAlphabet",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_alphabet_images",
                  "[PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_alphabet_text",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_alphabet_images",
                  "[]"
                ],
                [
                  "test_alphabet_text",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_alphabet_images",
                  "false"
                ],
                [
                  "test_alphabet_text",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_alphabet_images",
                  "false"
                ],
                [
                  "test_alphabet_text",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_alphabet_images",
                  "false"
                ],
                [
                  "test_alphabet_text",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_alphabet_images",
                  "false"
                ],
                [
                  "test_alphabet_text",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "false"
              ],
              [
                "test_alphabet_text",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "false"
              ],
              [
                "test_alphabet_text",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                []
              ],
              [
                "test_alphabet_text",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "false"
              ],
              [
                "test_alphabet_text",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "false"
              ],
              [
                "test_alphabet_text",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_alphabet_images",
                  "0"
                ],
                [
                  "test_alphabet_text",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_alphabet_images",
                  "0"
                ],
                [
                  "test_alphabet_text",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "false"
              ],
              [
                "test_alphabet_text",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "false"
              ],
              [
                "test_alphabet_text",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "1"
              ],
              [
                "test_alphabet_text",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                [
                  "alp",
                  "parameters_used",
                  "parameters"
                ]
              ],
              [
                "test_alphabet_text",
                [
                  "alp",
                  "parameters_used",
                  "parameters"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                []
              ],
              [
                "test_alphabet_text",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.98636524418663,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_alphabet_text",
                  "test_alphabet_images",
                  0.98636524418663
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_alphabet_images",
                "false"
              ],
              [
                "test_alphabet_text",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestTrialReshaper",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_trial_reshaper_calibration",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_trial_reshaper_calibration",
                  "[]"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_trial_reshaper_calibration",
                  "false"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_trial_reshaper_calibration",
                  "false"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_trial_reshaper_calibration",
                  "false"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_trial_reshaper_calibration",
                  "false"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "false"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "false"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                []
              ],
              [
                "test_trial_reshaper_copy_phrase",
                [
                  "self.channel_number",
                  "self.timing_info",
                  "self.target_info",
                  "self.channel_map",
                  "self.eeg"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "false"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "true"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_trial_reshaper_calibration",
                  "0"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_trial_reshaper_calibration",
                  "0"
                ],
                [
                  "test_trial_reshaper_copy_phrase",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "false"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "false"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "4"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                [
                  "reshaped_trials",
                  "num_of_seq",
                  "labels",
                  "trials_per_sequence"
                ]
              ],
              [
                "test_trial_reshaper_copy_phrase",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                [
                  "self.channel_number",
                  "self.timing_info",
                  "self.target_info",
                  "self.channel_map",
                  "self.eeg"
                ]
              ],
              [
                "test_trial_reshaper_copy_phrase",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.24999999999999997,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_trial_reshaper_calibration",
                  "test_trial_reshaper_copy_phrase",
                  0.24999999999999997
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_trial_reshaper_calibration",
                "true"
              ],
              [
                "test_trial_reshaper_copy_phrase",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestCalculateStimulationFreq",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "[]"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "false"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "false"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "false"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "false"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "false"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "false"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                []
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "false"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "false"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "0"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "0"
                ],
                [
                  "test_calculate_stimulate_frequency_handles_zero",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "false"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "false"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "1"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                [
                  "stimulation_frequency",
                  "flash_time",
                  "expected"
                ]
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                [
                  "flash_time"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                []
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7559289460184544,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_calculate_stimulate_frequency_returns_number_less_one",
                  "test_calculate_stimulate_frequency_handles_zero",
                  0.7559289460184544
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_calculate_stimulate_frequency_returns_number_less_one",
                "false"
              ],
              [
                "test_calculate_stimulate_frequency_handles_zero",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestFloatVal",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_float_val_as_str",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_float_val_as_int",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_float_val_as_str",
                  "[]"
                ],
                [
                  "test_float_val_as_int",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_float_val_as_str",
                  "false"
                ],
                [
                  "test_float_val_as_int",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_float_val_as_str",
                  "false"
                ],
                [
                  "test_float_val_as_int",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_float_val_as_str",
                  "false"
                ],
                [
                  "test_float_val_as_int",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_float_val_as_str",
                  "false"
                ],
                [
                  "test_float_val_as_int",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "false"
              ],
              [
                "test_float_val_as_int",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "false"
              ],
              [
                "test_float_val_as_int",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                []
              ],
              [
                "test_float_val_as_int",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "false"
              ],
              [
                "test_float_val_as_int",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "false"
              ],
              [
                "test_float_val_as_int",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_float_val_as_str",
                  "0"
                ],
                [
                  "test_float_val_as_int",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_float_val_as_str",
                  "0"
                ],
                [
                  "test_float_val_as_int",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "false"
              ],
              [
                "test_float_val_as_int",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "false"
              ],
              [
                "test_float_val_as_int",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "1"
              ],
              [
                "test_float_val_as_int",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                [
                  "result",
                  "col",
                  "expected"
                ]
              ],
              [
                "test_float_val_as_int",
                [
                  "result",
                  "col",
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                []
              ],
              [
                "test_float_val_as_int",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9208185110322616,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_float_val_as_str",
                  "test_float_val_as_int",
                  0.9208185110322616
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_float_val_as_str",
                "false"
              ],
              [
                "test_float_val_as_int",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestTargetGeneration",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_target_number_less_than_alp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_remainder",
                  "[PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual]"
                ],
                [
                  "test_target_greater_than_alp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_target_number_less_than_alp",
                  "[]"
                ],
                [
                  "test_remainder",
                  "[]"
                ],
                [
                  "test_target_greater_than_alp",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_target_number_less_than_alp",
                  "false"
                ],
                [
                  "test_remainder",
                  "true"
                ],
                [
                  "test_target_greater_than_alp",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_target_number_less_than_alp",
                  "false"
                ],
                [
                  "test_remainder",
                  "false"
                ],
                [
                  "test_target_greater_than_alp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_target_number_less_than_alp",
                  "false"
                ],
                [
                  "test_remainder",
                  "false"
                ],
                [
                  "test_target_greater_than_alp",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_target_number_less_than_alp",
                  "false"
                ],
                [
                  "test_remainder",
                  "false"
                ],
                [
                  "test_target_greater_than_alp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "false"
              ],
              [
                "test_remainder",
                "false"
              ],
              [
                "test_target_greater_than_alp",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "false"
              ],
              [
                "test_remainder",
                "false"
              ],
              [
                "test_target_greater_than_alp",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                []
              ],
              [
                "test_remainder",
                []
              ],
              [
                "test_target_greater_than_alp",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "false"
              ],
              [
                "test_remainder",
                "false"
              ],
              [
                "test_target_greater_than_alp",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "true"
              ],
              [
                "test_remainder",
                "true"
              ],
              [
                "test_target_greater_than_alp",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_target_number_less_than_alp",
                  "0"
                ],
                [
                  "test_remainder",
                  "0"
                ],
                [
                  "test_target_greater_than_alp",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_target_number_less_than_alp",
                  "0"
                ],
                [
                  "test_remainder",
                  "0"
                ],
                [
                  "test_target_greater_than_alp",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "false"
              ],
              [
                "test_remainder",
                "false"
              ],
              [
                "test_target_greater_than_alp",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "false"
              ],
              [
                "test_remainder",
                "false"
              ],
              [
                "test_target_greater_than_alp",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "2"
              ],
              [
                "test_remainder",
                "2"
              ],
              [
                "test_target_greater_than_alp",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                [
                  "alp",
                  "targets"
                ]
              ],
              [
                "test_remainder",
                [
                  "alp",
                  "counts",
                  "targets"
                ]
              ],
              [
                "test_target_greater_than_alp",
                [
                  "alp",
                  "counts",
                  "targets"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                []
              ],
              [
                "test_remainder",
                []
              ],
              [
                "test_target_greater_than_alp",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8235261871797283,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_target_number_less_than_alp",
                  "test_target_greater_than_alp",
                  0.8287958529231264
                ],
                [
                  "test_target_greater_than_alp",
                  "test_remainder",
                  0.8914274267391918
                ],
                [
                  "test_target_number_less_than_alp",
                  "test_remainder",
                  0.7503552818768664
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_target_number_less_than_alp",
                "false"
              ],
              [
                "test_remainder",
                "false"
              ],
              [
                "test_target_greater_than_alp",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "bcipy_\u0026_display_\u0026_tests_\u0026_test_display.py",
    "testCases": [
      {
        "name": "TestInitializeDisplayWindow",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                [
                  "self.parameters"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_init_display_window_returns_psychopy_window",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                [
                  "self.display_window",
                  "self.window"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_init_display_window_returns_psychopy_window",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "bcipy_\u0026_helpers_\u0026_tests_\u0026_test_stimuli.py",
    "testCases": [
      {
        "name": "TestStimuliGeneration",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_soundfiles_generator",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_random_sequence_gen",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_best_selection",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_play_sound_returns_timing",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_best_case_sequence_gen",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_soundfiles_generator",
                  "[]"
                ],
                [
                  "test_random_sequence_gen",
                  "[]"
                ],
                [
                  "test_best_selection",
                  "[]"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "[]"
                ],
                [
                  "test_play_sound_returns_timing",
                  "[]"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "[]"
                ],
                [
                  "test_best_case_sequence_gen",
                  "[]"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "[]"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_soundfiles_generator",
                  "true"
                ],
                [
                  "test_random_sequence_gen",
                  "true"
                ],
                [
                  "test_best_selection",
                  "false"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "false"
                ],
                [
                  "test_play_sound_returns_timing",
                  "false"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen",
                  "true"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_soundfiles_generator",
                  "false"
                ],
                [
                  "test_random_sequence_gen",
                  "false"
                ],
                [
                  "test_best_selection",
                  "false"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "false"
                ],
                [
                  "test_play_sound_returns_timing",
                  "false"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen",
                  "false"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_soundfiles_generator",
                  "true"
                ],
                [
                  "test_random_sequence_gen",
                  "false"
                ],
                [
                  "test_best_selection",
                  "false"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "false"
                ],
                [
                  "test_play_sound_returns_timing",
                  "false"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen",
                  "false"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_soundfiles_generator",
                  "false"
                ],
                [
                  "test_random_sequence_gen",
                  "false"
                ],
                [
                  "test_best_selection",
                  "false"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "false"
                ],
                [
                  "test_play_sound_returns_timing",
                  "false"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen",
                  "false"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "false"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                "false"
              ],
              [
                "test_random_sequence_gen",
                "false"
              ],
              [
                "test_best_selection",
                "false"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "false"
              ],
              [
                "test_play_sound_returns_timing",
                "false"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "false"
              ],
              [
                "test_best_case_sequence_gen",
                "false"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "false"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                "false"
              ],
              [
                "test_random_sequence_gen",
                "false"
              ],
              [
                "test_best_selection",
                "false"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "false"
              ],
              [
                "test_play_sound_returns_timing",
                "false"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "false"
              ],
              [
                "test_best_case_sequence_gen",
                "false"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "false"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                []
              ],
              [
                "test_random_sequence_gen",
                []
              ],
              [
                "test_best_selection",
                []
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                []
              ],
              [
                "test_play_sound_returns_timing",
                []
              ],
              [
                "test_soundfiles_generator_path_arg",
                []
              ],
              [
                "test_best_case_sequence_gen",
                []
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                []
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                "false"
              ],
              [
                "test_random_sequence_gen",
                "false"
              ],
              [
                "test_best_selection",
                "false"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "false"
              ],
              [
                "test_play_sound_returns_timing",
                "false"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "false"
              ],
              [
                "test_best_case_sequence_gen",
                "false"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "false"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_soundfiles_generator",
                "false"
              ],
              [
                "test_random_sequence_gen",
                "false"
              ],
              [
                "test_best_selection",
                "false"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "false"
              ],
              [
                "test_play_sound_returns_timing",
                "false"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "false"
              ],
              [
                "test_best_case_sequence_gen",
                "true"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "false"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_soundfiles_generator",
                  "0"
                ],
                [
                  "test_random_sequence_gen",
                  "0"
                ],
                [
                  "test_best_selection",
                  "0"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "0"
                ],
                [
                  "test_play_sound_returns_timing",
                  "0"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "0"
                ],
                [
                  "test_best_case_sequence_gen",
                  "0"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "0"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_soundfiles_generator",
                  "0"
                ],
                [
                  "test_random_sequence_gen",
                  "0"
                ],
                [
                  "test_best_selection",
                  "0"
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "0"
                ],
                [
                  "test_play_sound_returns_timing",
                  "0"
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "0"
                ],
                [
                  "test_best_case_sequence_gen",
                  "0"
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "0"
                ],
                [
                  "test_best_case_sequence_gen_with_seq_constants",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                "false"
              ],
              [
                "test_random_sequence_gen",
                "false"
              ],
              [
                "test_best_selection",
                "false"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "false"
              ],
              [
                "test_play_sound_returns_timing",
                "false"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "false"
              ],
              [
                "test_best_case_sequence_gen",
                "false"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "false"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                "false"
              ],
              [
                "test_random_sequence_gen",
                "false"
              ],
              [
                "test_best_selection",
                "false"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "false"
              ],
              [
                "test_play_sound_returns_timing",
                "false"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "false"
              ],
              [
                "test_best_case_sequence_gen",
                "false"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "false"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                "6"
              ],
              [
                "test_random_sequence_gen",
                "6"
              ],
              [
                "test_best_selection",
                "7"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "1"
              ],
              [
                "test_play_sound_returns_timing",
                "1"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "1"
              ],
              [
                "test_best_case_sequence_gen",
                "8"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "1"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                [
                  "gen",
                  "directory",
                  "soundfile_paths"
                ]
              ],
              [
                "test_random_sequence_gen",
                [
                  "seqs",
                  "seq_colors",
                  "seq_timings",
                  "stim_length",
                  "seq_strings",
                  "alp",
                  "choices",
                  "stim_number"
                ]
              ],
              [
                "test_best_selection",
                []
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                [
                  "test_trigger_name",
                  "experiment_clock",
                  "sound_file_path",
                  "test_trigger_time"
                ]
              ],
              [
                "test_play_sound_returns_timing",
                [
                  "timing",
                  "sound_file_path"
                ]
              ],
              [
                "test_soundfiles_generator_path_arg",
                [
                  "gen",
                  "directory",
                  "soundfile_paths"
                ]
              ],
              [
                "test_best_case_sequence_gen",
                [
                  "times",
                  "first_seq",
                  "alp",
                  "expected",
                  "n",
                  "samples",
                  "colors"
                ]
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                [
                  "sound_file_path"
                ]
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                [
                  "times",
                  "first_seq",
                  "alp",
                  "expected",
                  "n",
                  "samples",
                  "colors"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_soundfiles_generator",
                []
              ],
              [
                "test_random_sequence_gen",
                []
              ],
              [
                "test_best_selection",
                []
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                []
              ],
              [
                "test_play_sound_returns_timing",
                []
              ],
              [
                "test_soundfiles_generator_path_arg",
                []
              ],
              [
                "test_best_case_sequence_gen",
                []
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                []
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2976814976323079,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "test_best_case_sequence_gen",
                  0.05931040664466268
                ],
                [
                  "test_random_sequence_gen",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.35665947664147635
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "test_random_sequence_gen",
                  0.3807248441918897
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "test_random_sequence_gen",
                  0.14819912044083025
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "test_soundfiles_generator",
                  0.10787190384263788
                ],
                [
                  "test_soundfiles_generator",
                  "test_soundfiles_generator_path_arg",
                  0.7626629054550487
                ],
                [
                  "test_soundfiles_generator",
                  "test_best_selection",
                  0.11232297304692902
                ],
                [
                  "test_random_sequence_gen",
                  "test_best_case_sequence_gen",
                  0.3877617173218401
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "test_best_selection",
                  0.04304152064823278
                ],
                [
                  "test_soundfiles_generator",
                  "test_random_sequence_gen",
                  0.2800133680594291
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "test_best_selection",
                  0.1676487500111981
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.22349922098762026
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "test_best_selection",
                  0.04369400518471993
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_best_case_sequence_gen",
                  0.1789318798358831
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "test_soundfiles_generator_path_arg",
                  0.18482077679741288
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_play_sound_sound_callback_evokes_with_timing",
                  0.7881526259453397
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.061438235964552404
                ],
                [
                  "test_soundfiles_generator",
                  "test_best_case_sequence_gen",
                  0.3029588182651437
                ],
                [
                  "test_random_sequence_gen",
                  "test_best_selection",
                  0.2221103460062882
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "test_soundfiles_generator_path_arg",
                  0.15760174545117922
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "test_play_sound_sound_callback_evokes_with_timing",
                  0.6479135567876567
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_random_sequence_gen",
                  0.14187475282955164
                ],
                [
                  "test_soundfiles_generator",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.2469654854884214
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "test_best_case_sequence_gen",
                  0.2202536024588008
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.14456817242441364
                ],
                [
                  "test_play_sound_sound_callback_evokes_with_timing",
                  "test_soundfiles_generator",
                  0.1403310227608789
                ],
                [
                  "test_soundfiles_generator_path_arg",
                  "test_best_case_sequence_gen",
                  0.18938098888296054
                ],
                [
                  "test_best_selection",
                  "test_best_case_sequence_gen",
                  0.7404634454097441
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_soundfiles_generator_path_arg",
                  0.14573052122977734
                ],
                [
                  "test_best_case_sequence_gen",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.9555041122252345
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_best_selection",
                  0.15089002476046717
                ],
                [
                  "test_best_selection",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.8000665070107651
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_best_case_sequence_gen_with_seq_constants",
                  0.18048384988267252
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  0.8363864283046873
                ],
                [
                  "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                  "test_random_sequence_gen",
                  0.0939341006434129
                ],
                [
                  "test_play_sound_returns_timing",
                  "test_soundfiles_generator",
                  0.1123627029213237
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_soundfiles_generator",
                "true"
              ],
              [
                "test_random_sequence_gen",
                "false"
              ],
              [
                "test_best_selection",
                "false"
              ],
              [
                "test_play_sound_sound_callback_evokes_with_timing",
                "false"
              ],
              [
                "test_play_sound_returns_timing",
                "false"
              ],
              [
                "test_soundfiles_generator_path_arg",
                "false"
              ],
              [
                "test_best_case_sequence_gen",
                "true"
              ],
              [
                "test_play_sound_raises_exception_if_soundfile_cannot_read_file",
                "false"
              ],
              [
                "test_best_case_sequence_gen_with_seq_constants",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "bcipy_\u0026_helpers_\u0026_tests_\u0026_test_triggers.py",
    "testCases": [
      {
        "name": "TestTriggers",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_triggers_for_calibration",
                  "[]"
                ],
                [
                  "test_extract_from_calibration",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_copy_phrase_labeller",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_writing_trigger_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_triggers_for_calibration",
                  "[]"
                ],
                [
                  "test_extract_from_calibration",
                  "[]"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "[]"
                ],
                [
                  "test_copy_phrase_labeller",
                  "[]"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "[]"
                ],
                [
                  "test_writing_trigger_file",
                  "[]"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_triggers_for_calibration",
                  "false"
                ],
                [
                  "test_extract_from_calibration",
                  "true"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller",
                  "false"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "true"
                ],
                [
                  "test_writing_trigger_file",
                  "true"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_triggers_for_calibration",
                  "false"
                ],
                [
                  "test_extract_from_calibration",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller",
                  "false"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "false"
                ],
                [
                  "test_writing_trigger_file",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_triggers_for_calibration",
                  "false"
                ],
                [
                  "test_extract_from_calibration",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "true"
                ],
                [
                  "test_copy_phrase_labeller",
                  "true"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "false"
                ],
                [
                  "test_writing_trigger_file",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_triggers_for_calibration",
                  "false"
                ],
                [
                  "test_extract_from_calibration",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller",
                  "false"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "false"
                ],
                [
                  "test_writing_trigger_file",
                  "false"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                "false"
              ],
              [
                "test_extract_from_calibration",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "false"
              ],
              [
                "test_copy_phrase_labeller",
                "false"
              ],
              [
                "test_extract_from_copy_phrase",
                "false"
              ],
              [
                "test_writing_trigger_file",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                "false"
              ],
              [
                "test_extract_from_calibration",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "false"
              ],
              [
                "test_copy_phrase_labeller",
                "false"
              ],
              [
                "test_extract_from_copy_phrase",
                "false"
              ],
              [
                "test_writing_trigger_file",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                []
              ],
              [
                "test_extract_from_calibration",
                []
              ],
              [
                "test_copy_phrase_labeller_correction",
                []
              ],
              [
                "test_copy_phrase_labeller",
                []
              ],
              [
                "test_extract_from_copy_phrase",
                []
              ],
              [
                "test_writing_trigger_file",
                []
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                "false"
              ],
              [
                "test_extract_from_calibration",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "false"
              ],
              [
                "test_copy_phrase_labeller",
                "false"
              ],
              [
                "test_extract_from_copy_phrase",
                "false"
              ],
              [
                "test_writing_trigger_file",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                "false"
              ],
              [
                "test_extract_from_calibration",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "false"
              ],
              [
                "test_copy_phrase_labeller",
                "false"
              ],
              [
                "test_extract_from_copy_phrase",
                "false"
              ],
              [
                "test_writing_trigger_file",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_triggers_for_calibration",
                  "0"
                ],
                [
                  "test_extract_from_calibration",
                  "0"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "0"
                ],
                [
                  "test_copy_phrase_labeller",
                  "0"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "0"
                ],
                [
                  "test_writing_trigger_file",
                  "0"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_triggers_for_calibration",
                  "0"
                ],
                [
                  "test_extract_from_calibration",
                  "0"
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "0"
                ],
                [
                  "test_copy_phrase_labeller",
                  "0"
                ],
                [
                  "test_extract_from_copy_phrase",
                  "0"
                ],
                [
                  "test_writing_trigger_file",
                  "0"
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                "false"
              ],
              [
                "test_extract_from_calibration",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "false"
              ],
              [
                "test_copy_phrase_labeller",
                "false"
              ],
              [
                "test_extract_from_copy_phrase",
                "false"
              ],
              [
                "test_writing_trigger_file",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                "false"
              ],
              [
                "test_extract_from_calibration",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "false"
              ],
              [
                "test_copy_phrase_labeller",
                "false"
              ],
              [
                "test_extract_from_copy_phrase",
                "false"
              ],
              [
                "test_writing_trigger_file",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_triggers_for_calibration",
                "0"
              ],
              [
                "test_extract_from_calibration",
                "4"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "17"
              ],
              [
                "test_copy_phrase_labeller",
                "11"
              ],
              [
                "test_extract_from_copy_phrase",
                "4"
              ],
              [
                "test_writing_trigger_file",
                "3"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "22"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_triggers_for_calibration",
                []
              ],
              [
                "test_extract_from_calibration",
                [
                  "extracted_targetness",
                  "targetness",
                  "trigger_times",
                  "trigger_seq",
                  "expected_trg",
                  "stamp",
                  "extracted_val",
                  "extracted",
                  "content"
                ]
              ],
              [
                "test_copy_phrase_labeller_correction",
                [
                  "typed",
                  "copy_phrase",
                  "labeller"
                ]
              ],
              [
                "test_copy_phrase_labeller",
                [
                  "typed",
                  "copy_phrase",
                  "labeller"
                ]
              ],
              [
                "test_extract_from_copy_phrase",
                [
                  "extracted_targetness",
                  "phrase",
                  "start_index",
                  "targetness",
                  "trigger_times",
                  "trigger_seq",
                  "expected_trg",
                  "copy_text",
                  "stamp",
                  "extracted_val",
                  "extracted",
                  "content"
                ]
              ],
              [
                "test_writing_trigger_file",
                [
                  "output",
                  "written_contents",
                  "targetness",
                  "trigger_times",
                  "trigger_seq",
                  "written_targetness",
                  "expected_trg",
                  "lines",
                  "raw_data",
                  "written_val",
                  "written_stamp"
                ]
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                [
                  "typed",
                  "copy_phrase",
                  "labeller"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                []
              ],
              [
                "test_extract_from_calibration",
                []
              ],
              [
                "test_copy_phrase_labeller_correction",
                []
              ],
              [
                "test_copy_phrase_labeller",
                []
              ],
              [
                "test_extract_from_copy_phrase",
                []
              ],
              [
                "test_writing_trigger_file",
                []
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3318448833519535,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_triggers_for_calibration",
                  "test_extract_from_copy_phrase",
                  0.05456800796984004
                ],
                [
                  "test_triggers_for_calibration",
                  "test_copy_phrase_labeller_correction",
                  0.033058980245364314
                ],
                [
                  "test_triggers_for_calibration",
                  "test_copy_phrase_labeller_correction_double_letters",
                  0.025090330983166053
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "test_extract_from_calibration",
                  0.13986127186802216
                ],
                [
                  "test_extract_from_calibration",
                  "test_writing_trigger_file",
                  0.9242510243693313
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "test_copy_phrase_labeller_correction_double_letters",
                  0.9169688661141243
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "test_extract_from_copy_phrase",
                  0.13828206748658828
                ],
                [
                  "test_copy_phrase_labeller",
                  "test_copy_phrase_labeller_correction_double_letters",
                  0.8838311782404573
                ],
                [
                  "test_copy_phrase_labeller",
                  "test_copy_phrase_labeller_correction",
                  0.9755018929455503
                ],
                [
                  "test_copy_phrase_labeller",
                  "test_extract_from_copy_phrase",
                  0.13482440924554065
                ],
                [
                  "test_copy_phrase_labeller",
                  "test_extract_from_calibration",
                  0.12388211923591232
                ],
                [
                  "test_copy_phrase_labeller_correction_double_letters",
                  "test_writing_trigger_file",
                  0.12227576039136466
                ],
                [
                  "test_triggers_for_calibration",
                  "test_copy_phrase_labeller",
                  0.04706208053350117
                ],
                [
                  "test_triggers_for_calibration",
                  "test_writing_trigger_file",
                  0.10074256490246405
                ],
                [
                  "test_copy_phrase_labeller",
                  "test_writing_trigger_file",
                  0.11556564587566129
                ],
                [
                  "test_extract_from_copy_phrase",
                  "test_writing_trigger_file",
                  0.8747612175710284
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "test_writing_trigger_file",
                  0.10366014616018687
                ],
                [
                  "test_extract_from_copy_phrase",
                  "test_extract_from_calibration",
                  0.9301398550882944
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "test_extract_from_copy_phrase",
                  0.11635559398899668
                ],
                [
                  "test_triggers_for_calibration",
                  "test_extract_from_calibration",
                  0.09032446046618911
                ],
                [
                  "test_copy_phrase_labeller_correction",
                  "test_extract_from_calibration",
                  0.11773507670944032
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_triggers_for_calibration",
                "false"
              ],
              [
                "test_extract_from_calibration",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction",
                "false"
              ],
              [
                "test_copy_phrase_labeller",
                "false"
              ],
              [
                "test_extract_from_copy_phrase",
                "false"
              ],
              [
                "test_writing_trigger_file",
                "false"
              ],
              [
                "test_copy_phrase_labeller_correction_double_letters",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "bcipy_\u0026_tasks_\u0026_tests_\u0026_test_main_frame.py",
    "testCases": [
      {
        "name": "TestDecisionMaker",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update_with_letter",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_form_display_state",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_reset_history",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decide_without_commit",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_evidence_fusion_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_prepare_stimuli",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_schedule_sequence",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertLess]"
                ],
                [
                  "test_decide_state_update",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decide_with_commit",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_update_with_backspace",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertLess]"
                ],
                [
                  "test_reset",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_save_history",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decision_maker_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_do_epoch",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update_with_letter",
                  "[]"
                ],
                [
                  "test_form_display_state",
                  "[]"
                ],
                [
                  "test_reset_history",
                  "[]"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "[]"
                ],
                [
                  "test_decide_without_commit",
                  "[]"
                ],
                [
                  "test_evidence_fusion_init",
                  "[]"
                ],
                [
                  "test_prepare_stimuli",
                  "[]"
                ],
                [
                  "test_schedule_sequence",
                  "[]"
                ],
                [
                  "test_decide_state_update",
                  "[]"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "[]"
                ],
                [
                  "test_decide_with_commit",
                  "[]"
                ],
                [
                  "test_update_with_backspace",
                  "[]"
                ],
                [
                  "test_reset",
                  "[]"
                ],
                [
                  "test_save_history",
                  "[]"
                ],
                [
                  "test_decision_maker_init",
                  "[]"
                ],
                [
                  "test_do_epoch",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update_with_letter",
                  "false"
                ],
                [
                  "test_form_display_state",
                  "false"
                ],
                [
                  "test_reset_history",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "false"
                ],
                [
                  "test_decide_without_commit",
                  "false"
                ],
                [
                  "test_evidence_fusion_init",
                  "false"
                ],
                [
                  "test_prepare_stimuli",
                  "true"
                ],
                [
                  "test_schedule_sequence",
                  "false"
                ],
                [
                  "test_decide_state_update",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "false"
                ],
                [
                  "test_decide_with_commit",
                  "false"
                ],
                [
                  "test_update_with_backspace",
                  "false"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_save_history",
                  "false"
                ],
                [
                  "test_decision_maker_init",
                  "false"
                ],
                [
                  "test_do_epoch",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update_with_letter",
                  "false"
                ],
                [
                  "test_form_display_state",
                  "false"
                ],
                [
                  "test_reset_history",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "false"
                ],
                [
                  "test_decide_without_commit",
                  "false"
                ],
                [
                  "test_evidence_fusion_init",
                  "false"
                ],
                [
                  "test_prepare_stimuli",
                  "false"
                ],
                [
                  "test_schedule_sequence",
                  "false"
                ],
                [
                  "test_decide_state_update",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "false"
                ],
                [
                  "test_decide_with_commit",
                  "false"
                ],
                [
                  "test_update_with_backspace",
                  "false"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_save_history",
                  "false"
                ],
                [
                  "test_decision_maker_init",
                  "false"
                ],
                [
                  "test_do_epoch",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update_with_letter",
                  "false"
                ],
                [
                  "test_form_display_state",
                  "false"
                ],
                [
                  "test_reset_history",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "false"
                ],
                [
                  "test_decide_without_commit",
                  "false"
                ],
                [
                  "test_evidence_fusion_init",
                  "false"
                ],
                [
                  "test_prepare_stimuli",
                  "false"
                ],
                [
                  "test_schedule_sequence",
                  "false"
                ],
                [
                  "test_decide_state_update",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "false"
                ],
                [
                  "test_decide_with_commit",
                  "false"
                ],
                [
                  "test_update_with_backspace",
                  "false"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_save_history",
                  "false"
                ],
                [
                  "test_decision_maker_init",
                  "false"
                ],
                [
                  "test_do_epoch",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update_with_letter",
                  "false"
                ],
                [
                  "test_form_display_state",
                  "false"
                ],
                [
                  "test_reset_history",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "false"
                ],
                [
                  "test_decide_without_commit",
                  "false"
                ],
                [
                  "test_evidence_fusion_init",
                  "false"
                ],
                [
                  "test_prepare_stimuli",
                  "false"
                ],
                [
                  "test_schedule_sequence",
                  "false"
                ],
                [
                  "test_decide_state_update",
                  "false"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "false"
                ],
                [
                  "test_decide_with_commit",
                  "false"
                ],
                [
                  "test_update_with_backspace",
                  "false"
                ],
                [
                  "test_reset",
                  "false"
                ],
                [
                  "test_save_history",
                  "false"
                ],
                [
                  "test_decision_maker_init",
                  "false"
                ],
                [
                  "test_do_epoch",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                "false"
              ],
              [
                "test_form_display_state",
                "false"
              ],
              [
                "test_reset_history",
                "false"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "false"
              ],
              [
                "test_decide_without_commit",
                "false"
              ],
              [
                "test_evidence_fusion_init",
                "false"
              ],
              [
                "test_prepare_stimuli",
                "false"
              ],
              [
                "test_schedule_sequence",
                "false"
              ],
              [
                "test_decide_state_update",
                "false"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "false"
              ],
              [
                "test_decide_with_commit",
                "false"
              ],
              [
                "test_update_with_backspace",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_save_history",
                "false"
              ],
              [
                "test_decision_maker_init",
                "false"
              ],
              [
                "test_do_epoch",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                "false"
              ],
              [
                "test_form_display_state",
                "false"
              ],
              [
                "test_reset_history",
                "false"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "false"
              ],
              [
                "test_decide_without_commit",
                "false"
              ],
              [
                "test_evidence_fusion_init",
                "false"
              ],
              [
                "test_prepare_stimuli",
                "false"
              ],
              [
                "test_schedule_sequence",
                "false"
              ],
              [
                "test_decide_state_update",
                "false"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "false"
              ],
              [
                "test_decide_with_commit",
                "false"
              ],
              [
                "test_update_with_backspace",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_save_history",
                "false"
              ],
              [
                "test_decision_maker_init",
                "false"
              ],
              [
                "test_do_epoch",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_update_with_letter",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_form_display_state",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_reset_history",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_decide_without_commit",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_evidence_fusion_init",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_prepare_stimuli",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_schedule_sequence",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_decide_state_update",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_decide_with_commit",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_update_with_backspace",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_reset",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_save_history",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_decision_maker_init",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_do_epoch",
                [
                  "self.evidence_fusion"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                "false"
              ],
              [
                "test_form_display_state",
                "false"
              ],
              [
                "test_reset_history",
                "false"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "false"
              ],
              [
                "test_decide_without_commit",
                "false"
              ],
              [
                "test_evidence_fusion_init",
                "false"
              ],
              [
                "test_prepare_stimuli",
                "false"
              ],
              [
                "test_schedule_sequence",
                "false"
              ],
              [
                "test_decide_state_update",
                "false"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "false"
              ],
              [
                "test_decide_with_commit",
                "false"
              ],
              [
                "test_update_with_backspace",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_save_history",
                "false"
              ],
              [
                "test_decision_maker_init",
                "false"
              ],
              [
                "test_do_epoch",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_update_with_letter",
                "false"
              ],
              [
                "test_form_display_state",
                "false"
              ],
              [
                "test_reset_history",
                "false"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "false"
              ],
              [
                "test_decide_without_commit",
                "true"
              ],
              [
                "test_evidence_fusion_init",
                "false"
              ],
              [
                "test_prepare_stimuli",
                "true"
              ],
              [
                "test_schedule_sequence",
                "false"
              ],
              [
                "test_decide_state_update",
                "false"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "false"
              ],
              [
                "test_decide_with_commit",
                "false"
              ],
              [
                "test_update_with_backspace",
                "false"
              ],
              [
                "test_reset",
                "true"
              ],
              [
                "test_save_history",
                "true"
              ],
              [
                "test_decision_maker_init",
                "true"
              ],
              [
                "test_do_epoch",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update_with_letter",
                  "0"
                ],
                [
                  "test_form_display_state",
                  "0"
                ],
                [
                  "test_reset_history",
                  "0"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "0"
                ],
                [
                  "test_decide_without_commit",
                  "0"
                ],
                [
                  "test_evidence_fusion_init",
                  "0"
                ],
                [
                  "test_prepare_stimuli",
                  "0"
                ],
                [
                  "test_schedule_sequence",
                  "0"
                ],
                [
                  "test_decide_state_update",
                  "0"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "0"
                ],
                [
                  "test_decide_with_commit",
                  "0"
                ],
                [
                  "test_update_with_backspace",
                  "0"
                ],
                [
                  "test_reset",
                  "0"
                ],
                [
                  "test_save_history",
                  "0"
                ],
                [
                  "test_decision_maker_init",
                  "0"
                ],
                [
                  "test_do_epoch",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update_with_letter",
                  "0"
                ],
                [
                  "test_form_display_state",
                  "0"
                ],
                [
                  "test_reset_history",
                  "0"
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "0"
                ],
                [
                  "test_decide_without_commit",
                  "0"
                ],
                [
                  "test_evidence_fusion_init",
                  "0"
                ],
                [
                  "test_prepare_stimuli",
                  "0"
                ],
                [
                  "test_schedule_sequence",
                  "0"
                ],
                [
                  "test_decide_state_update",
                  "0"
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "0"
                ],
                [
                  "test_decide_with_commit",
                  "0"
                ],
                [
                  "test_update_with_backspace",
                  "0"
                ],
                [
                  "test_reset",
                  "0"
                ],
                [
                  "test_save_history",
                  "0"
                ],
                [
                  "test_decision_maker_init",
                  "0"
                ],
                [
                  "test_do_epoch",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                "false"
              ],
              [
                "test_form_display_state",
                "false"
              ],
              [
                "test_reset_history",
                "false"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "false"
              ],
              [
                "test_decide_without_commit",
                "false"
              ],
              [
                "test_evidence_fusion_init",
                "false"
              ],
              [
                "test_prepare_stimuli",
                "false"
              ],
              [
                "test_schedule_sequence",
                "false"
              ],
              [
                "test_decide_state_update",
                "false"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "false"
              ],
              [
                "test_decide_with_commit",
                "false"
              ],
              [
                "test_update_with_backspace",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_save_history",
                "false"
              ],
              [
                "test_decision_maker_init",
                "false"
              ],
              [
                "test_do_epoch",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                "false"
              ],
              [
                "test_form_display_state",
                "false"
              ],
              [
                "test_reset_history",
                "false"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "false"
              ],
              [
                "test_decide_without_commit",
                "false"
              ],
              [
                "test_evidence_fusion_init",
                "false"
              ],
              [
                "test_prepare_stimuli",
                "false"
              ],
              [
                "test_schedule_sequence",
                "false"
              ],
              [
                "test_decide_state_update",
                "false"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "false"
              ],
              [
                "test_decide_with_commit",
                "false"
              ],
              [
                "test_update_with_backspace",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_save_history",
                "false"
              ],
              [
                "test_decision_maker_init",
                "false"
              ],
              [
                "test_do_epoch",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                "2"
              ],
              [
                "test_form_display_state",
                "1"
              ],
              [
                "test_reset_history",
                "3"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "4"
              ],
              [
                "test_decide_without_commit",
                "3"
              ],
              [
                "test_evidence_fusion_init",
                "3"
              ],
              [
                "test_prepare_stimuli",
                "3"
              ],
              [
                "test_schedule_sequence",
                "3"
              ],
              [
                "test_decide_state_update",
                "1"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "4"
              ],
              [
                "test_decide_with_commit",
                "2"
              ],
              [
                "test_update_with_backspace",
                "3"
              ],
              [
                "test_reset",
                "4"
              ],
              [
                "test_save_history",
                "1"
              ],
              [
                "test_decision_maker_init",
                "4"
              ],
              [
                "test_do_epoch",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                [
                  "old_displayed_state",
                  "old_state",
                  "new_state"
                ]
              ],
              [
                "test_form_display_state",
                []
              ],
              [
                "test_reset_history",
                []
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                [
                  "dict_evidence"
                ]
              ],
              [
                "test_decide_without_commit",
                [
                  "decision",
                  "probability_distribution",
                  "chosen_stimuli"
                ]
              ],
              [
                "test_evidence_fusion_init",
                []
              ],
              [
                "test_prepare_stimuli",
                [
                  "stimuli",
                  "probability_distribution"
                ]
              ],
              [
                "test_schedule_sequence",
                [
                  "old_counter",
                  "stimuli",
                  "probability_distribution"
                ]
              ],
              [
                "test_decide_state_update",
                [
                  "decision",
                  "expected",
                  "probability_distribution"
                ]
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                [
                  "dict_evidence"
                ]
              ],
              [
                "test_decide_with_commit",
                [
                  "decision",
                  "probability_distribution",
                  "chosen_stimuli"
                ]
              ],
              [
                "test_update_with_backspace",
                [
                  "old_displayed_state",
                  "old_state",
                  "new_state"
                ]
              ],
              [
                "test_reset",
                []
              ],
              [
                "test_save_history",
                [
                  "history"
                ]
              ],
              [
                "test_decision_maker_init",
                []
              ],
              [
                "test_do_epoch",
                [
                  "decision",
                  "probability_distribution",
                  "chosen_stimuli"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update_with_letter",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_form_display_state",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_reset_history",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_decide_without_commit",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_evidence_fusion_init",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_prepare_stimuli",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_schedule_sequence",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_decide_state_update",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_decide_with_commit",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_update_with_backspace",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_reset",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_save_history",
                [
                  "self.evidence_fusion"
                ]
              ],
              [
                "test_decision_maker_init",
                [
                  "self.decision_maker"
                ]
              ],
              [
                "test_do_epoch",
                [
                  "self.decision_maker"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3187558097588507,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_decide_without_commit",
                  "test_schedule_sequence",
                  0.6144921112471834
                ],
                [
                  "test_update_with_backspace",
                  "test_prepare_stimuli",
                  0.2787317254264769
                ],
                [
                  "test_reset_history",
                  "test_save_history",
                  0.30477572710378376
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_prepare_stimuli",
                  0.18653447786032867
                ],
                [
                  "test_decide_with_commit",
                  "test_schedule_sequence",
                  0.6241776837246882
                ],
                [
                  "test_update_with_backspace",
                  "test_form_display_state",
                  0.4918224404976853
                ],
                [
                  "test_reset",
                  "test_schedule_sequence",
                  0.4064483272427709
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_decide_without_commit",
                  0.14917354742965408
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_update_with_letter",
                  0.15210115047844064
                ],
                [
                  "test_save_history",
                  "test_decision_maker_init",
                  0.237185951650094
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_form_display_state",
                  0.1139331787969125
                ],
                [
                  "test_reset_history",
                  "test_update_and_fuse_with_inf_evidence",
                  0.7589810601307225
                ],
                [
                  "test_evidence_fusion_init",
                  "test_save_history",
                  0.19418390934515434
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_do_epoch",
                  0.10806572394631667
                ],
                [
                  "test_update_with_backspace",
                  "test_decide_state_update",
                  0.4030274838871208
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_decide_state_update",
                  0.12827975757122262
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_update_with_backspace",
                  0.1648229105057022
                ],
                [
                  "test_decision_maker_init",
                  "test_do_epoch",
                  0.3763571675795851
                ],
                [
                  "test_reset_history",
                  "test_schedule_sequence",
                  0.2165526165180832
                ],
                [
                  "test_update_with_letter",
                  "test_schedule_sequence",
                  0.39301886656572116
                ],
                [
                  "test_decision_maker_init",
                  "test_update_with_backspace",
                  0.3308938113157993
                ],
                [
                  "test_update_with_backspace",
                  "test_do_epoch",
                  0.29362329357046346
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_decide_with_commit",
                  0.16772557387550693
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_reset",
                  0.20830127958541944
                ],
                [
                  "test_reset",
                  "test_form_display_state",
                  0.37888611415569196
                ],
                [
                  "test_save_history",
                  "test_update_with_backspace",
                  0.21808971525269538
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_decide_state_update",
                  0.12541813906034938
                ],
                [
                  "test_reset",
                  "test_prepare_stimuli",
                  0.26585253448755747
                ],
                [
                  "test_evidence_fusion_init",
                  "test_decision_maker_init",
                  0.2737143036942437
                ],
                [
                  "test_decide_with_commit",
                  "test_update_with_letter",
                  0.37310207148514885
                ],
                [
                  "test_decide_with_commit",
                  "test_form_display_state",
                  0.3967876966218537
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_schedule_sequence",
                  0.21604773626799997
                ],
                [
                  "test_decide_without_commit",
                  "test_reset",
                  0.472455591261534
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_decide_without_commit",
                  0.145845837799237
                ],
                [
                  "test_decide_without_commit",
                  "test_decide_with_commit",
                  0.7566878686831479
                ],
                [
                  "test_decide_state_update",
                  "test_prepare_stimuli",
                  0.3698055992510531
                ],
                [
                  "test_schedule_sequence",
                  "test_prepare_stimuli",
                  0.5620067224866035
                ],
                [
                  "test_evidence_fusion_init",
                  "test_update_and_fuse_with_inf_evidence",
                  0.7737199324927926
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_do_epoch",
                  0.1105314189275418
                ],
                [
                  "test_evidence_fusion_init",
                  "test_decide_without_commit",
                  0.15877683720748895
                ],
                [
                  "test_save_history",
                  "test_decide_without_commit",
                  0.20965696734438366
                ],
                [
                  "test_update_with_letter",
                  "test_reset",
                  0.325166238571545
                ],
                [
                  "test_update_with_letter",
                  "test_decide_state_update",
                  0.4682759690322819
                ],
                [
                  "test_decision_maker_init",
                  "test_decide_without_commit",
                  0.3809496046451783
                ],
                [
                  "test_reset_history",
                  "test_decision_maker_init",
                  0.25171895661120103
                ],
                [
                  "test_decide_without_commit",
                  "test_decide_state_update",
                  0.4677675811188185
                ],
                [
                  "test_save_history",
                  "test_reset",
                  0.24268133584853777
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_schedule_sequence",
                  0.19432996367036567
                ],
                [
                  "test_save_history",
                  "test_decide_with_commit",
                  0.26519741765271837
                ],
                [
                  "test_save_history",
                  "test_decide_state_update",
                  0.21843026779500382
                ],
                [
                  "test_update_with_letter",
                  "test_do_epoch",
                  0.2671233006170871
                ],
                [
                  "test_evidence_fusion_init",
                  "test_reset_history",
                  0.9232476577353844
                ],
                [
                  "test_decide_without_commit",
                  "test_update_with_backspace",
                  0.32197336600836535
                ],
                [
                  "test_decide_state_update",
                  "test_schedule_sequence",
                  0.4545186402092358
                ],
                [
                  "test_evidence_fusion_init",
                  "test_do_epoch",
                  0.1176470588235294
                ],
                [
                  "test_decide_with_commit",
                  "test_update_with_backspace",
                  0.3968249121528604
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_decision_maker_init",
                  0.20358441268526462
                ],
                [
                  "test_update_with_letter",
                  "test_update_with_backspace",
                  0.9166929725127875
                ],
                [
                  "test_reset_history",
                  "test_decide_without_commit",
                  0.1557522394953495
                ],
                [
                  "test_reset_history",
                  "test_update_with_letter",
                  0.13101738586130005
                ],
                [
                  "test_reset_history",
                  "test_form_display_state",
                  0.13878402750067523
                ],
                [
                  "test_save_history",
                  "test_prepare_stimuli",
                  0.29493690609444523
                ],
                [
                  "test_decide_without_commit",
                  "test_do_epoch",
                  0.7541899767355724
                ],
                [
                  "test_do_epoch",
                  "test_decide_state_update",
                  0.39385954511189747
                ],
                [
                  "test_update_with_letter",
                  "test_form_display_state",
                  0.5131418286798028
                ],
                [
                  "test_form_display_state",
                  "test_decide_state_update",
                  0.2923064111077339
                ],
                [
                  "test_reset_history",
                  "test_do_epoch",
                  0.11540595721692305
                ],
                [
                  "test_evidence_fusion_init",
                  "test_update_with_letter",
                  0.13356165030854356
                ],
                [
                  "test_evidence_fusion_init",
                  "test_form_display_state",
                  0.14147911460452758
                ],
                [
                  "test_reset",
                  "test_do_epoch",
                  0.45509102730910317
                ],
                [
                  "test_update_with_letter",
                  "test_prepare_stimuli",
                  0.251480054266272
                ],
                [
                  "test_decide_with_commit",
                  "test_do_epoch",
                  0.6192522824792349
                ],
                [
                  "test_save_history",
                  "test_do_epoch",
                  0.2330206912141852
                ],
                [
                  "test_reset_history",
                  "test_prepare_stimuli",
                  0.18590805705512317
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_save_history",
                  0.19026059766179762
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_update_and_fuse_with_inf_evidence",
                  0.9325680982740896
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_save_history",
                  0.19460170216420797
                ],
                [
                  "test_save_history",
                  "test_update_with_letter",
                  0.1923944280975527
                ],
                [
                  "test_save_history",
                  "test_form_display_state",
                  0.16012815380508716
                ],
                [
                  "test_evidence_fusion_init",
                  "test_update_with_backspace",
                  0.17128025458277035
                ],
                [
                  "test_evidence_fusion_init",
                  "test_decide_state_update",
                  0.12603505443580718
                ],
                [
                  "test_decision_maker_init",
                  "test_decide_state_update",
                  0.15119650007894753
                ],
                [
                  "test_decide_with_commit",
                  "test_prepare_stimuli",
                  0.4737431548518937
                ],
                [
                  "test_reset_history",
                  "test_update_and_fuse_with_float_evidence",
                  0.6949356999615296
                ],
                [
                  "test_decide_without_commit",
                  "test_prepare_stimuli",
                  0.4476052583356451
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_decision_maker_init",
                  0.19904292512015165
                ],
                [
                  "test_decision_maker_init",
                  "test_update_with_letter",
                  0.27542929224869367
                ],
                [
                  "test_update_with_backspace",
                  "test_schedule_sequence",
                  0.4304430937395176
                ],
                [
                  "test_decision_maker_init",
                  "test_form_display_state",
                  0.2821382463434393
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_prepare_stimuli",
                  0.18237333408466455
                ],
                [
                  "test_save_history",
                  "test_schedule_sequence",
                  0.24595305477488855
                ],
                [
                  "test_decide_with_commit",
                  "test_reset",
                  0.3286878675669582
                ],
                [
                  "test_decide_with_commit",
                  "test_decide_state_update",
                  0.4841054089929949
                ],
                [
                  "test_decide_without_commit",
                  "test_update_with_letter",
                  0.29496308640500796
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_decide_with_commit",
                  0.16398401233815754
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_reset",
                  0.20365456985672922
                ],
                [
                  "test_decide_without_commit",
                  "test_form_display_state",
                  0.3546040716334876
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_form_display_state",
                  0.11139159858487586
                ],
                [
                  "test_evidence_fusion_init",
                  "test_reset",
                  0.26255251575525185
                ],
                [
                  "test_decision_maker_init",
                  "test_decide_with_commit",
                  0.2774387886541703
                ],
                [
                  "test_decision_maker_init",
                  "test_reset",
                  0.8399149299495984
                ],
                [
                  "test_evidence_fusion_init",
                  "test_decide_with_commit",
                  0.15062893357603013
                ],
                [
                  "test_decision_maker_init",
                  "test_prepare_stimuli",
                  0.2125901874702133
                ],
                [
                  "test_evidence_fusion_init",
                  "test_prepare_stimuli",
                  0.1895182592959327
                ],
                [
                  "test_do_epoch",
                  "test_schedule_sequence",
                  0.5380974161250304
                ],
                [
                  "test_form_display_state",
                  "test_schedule_sequence",
                  0.355550077492859
                ],
                [
                  "test_update_and_fuse_with_float_evidence",
                  "test_update_with_letter",
                  0.14870813293635052
                ],
                [
                  "test_reset_history",
                  "test_decide_state_update",
                  0.12363416685043632
                ],
                [
                  "test_reset_history",
                  "test_update_with_backspace",
                  0.1680174747261045
                ],
                [
                  "test_reset_history",
                  "test_decide_with_commit",
                  0.14775954824320167
                ],
                [
                  "test_reset_history",
                  "test_reset",
                  0.27472112789737807
                ],
                [
                  "test_form_display_state",
                  "test_prepare_stimuli",
                  0.29302642539762247
                ],
                [
                  "test_do_epoch",
                  "test_prepare_stimuli",
                  0.3790365185918654
                ],
                [
                  "test_update_and_fuse_with_inf_evidence",
                  "test_update_with_backspace",
                  0.18390939585495514
                ],
                [
                  "test_evidence_fusion_init",
                  "test_update_and_fuse_with_float_evidence",
                  0.7084308569814093
                ],
                [
                  "test_reset",
                  "test_decide_state_update",
                  0.18282678390047888
                ],
                [
                  "test_evidence_fusion_init",
                  "test_schedule_sequence",
                  0.22075791430770475
                ],
                [
                  "test_form_display_state",
                  "test_do_epoch",
                  0.28295822920905517
                ],
                [
                  "test_decision_maker_init",
                  "test_schedule_sequence",
                  0.3009428260533275
                ],
                [
                  "test_update_with_backspace",
                  "test_reset",
                  0.3822455247892041
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_update_with_letter",
                "false"
              ],
              [
                "test_form_display_state",
                "false"
              ],
              [
                "test_reset_history",
                "false"
              ],
              [
                "test_update_and_fuse_with_inf_evidence",
                "false"
              ],
              [
                "test_decide_without_commit",
                "false"
              ],
              [
                "test_evidence_fusion_init",
                "false"
              ],
              [
                "test_prepare_stimuli",
                "false"
              ],
              [
                "test_schedule_sequence",
                "false"
              ],
              [
                "test_decide_state_update",
                "false"
              ],
              [
                "test_update_and_fuse_with_float_evidence",
                "false"
              ],
              [
                "test_decide_with_commit",
                "true"
              ],
              [
                "test_update_with_backspace",
                "false"
              ],
              [
                "test_reset",
                "false"
              ],
              [
                "test_save_history",
                "false"
              ],
              [
                "test_decision_maker_init",
                "false"
              ],
              [
                "test_do_epoch",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 16
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_test_buffer.py",
    "testCases": [
      {
        "name": "TestBuffer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_query_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_buffer",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "[]"
                ],
                [
                  "test_query_before_flush",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "[]"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "[]"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "[]"
                ],
                [
                  "test_latest",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_len",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_query_data",
                  "[]"
                ],
                [
                  "test_buffer",
                  "[]"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "[]"
                ],
                [
                  "test_query_before_flush",
                  "[]"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "[]"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "[]"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "[]"
                ],
                [
                  "test_latest",
                  "[]"
                ],
                [
                  "test_len",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_query_data",
                  "true"
                ],
                [
                  "test_buffer",
                  "true"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "true"
                ],
                [
                  "test_query_before_flush",
                  "true"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "true"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "true"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "true"
                ],
                [
                  "test_latest",
                  "true"
                ],
                [
                  "test_len",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_query_data",
                  "false"
                ],
                [
                  "test_buffer",
                  "true"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "false"
                ],
                [
                  "test_query_before_flush",
                  "true"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "false"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "false"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "false"
                ],
                [
                  "test_latest",
                  "true"
                ],
                [
                  "test_len",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_query_data",
                  "false"
                ],
                [
                  "test_buffer",
                  "false"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "false"
                ],
                [
                  "test_query_before_flush",
                  "false"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "false"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "false"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "false"
                ],
                [
                  "test_latest",
                  "false"
                ],
                [
                  "test_len",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_query_data",
                  "false"
                ],
                [
                  "test_buffer",
                  "false"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "false"
                ],
                [
                  "test_query_before_flush",
                  "false"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "false"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "false"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "false"
                ],
                [
                  "test_latest",
                  "false"
                ],
                [
                  "test_len",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                "false"
              ],
              [
                "test_buffer",
                "false"
              ],
              [
                "test_query_with_invalid_order_field",
                "false"
              ],
              [
                "test_query_before_flush",
                "false"
              ],
              [
                "test_query_with_invalid_filter_op",
                "false"
              ],
              [
                "test_query_with_invalid_filter_field",
                "false"
              ],
              [
                "test_query_with_invalid_order_direction",
                "false"
              ],
              [
                "test_latest",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                "false"
              ],
              [
                "test_buffer",
                "false"
              ],
              [
                "test_query_with_invalid_order_field",
                "false"
              ],
              [
                "test_query_before_flush",
                "false"
              ],
              [
                "test_query_with_invalid_filter_op",
                "false"
              ],
              [
                "test_query_with_invalid_filter_field",
                "false"
              ],
              [
                "test_query_with_invalid_order_direction",
                "false"
              ],
              [
                "test_latest",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                []
              ],
              [
                "test_buffer",
                []
              ],
              [
                "test_query_with_invalid_order_field",
                []
              ],
              [
                "test_query_before_flush",
                []
              ],
              [
                "test_query_with_invalid_filter_op",
                []
              ],
              [
                "test_query_with_invalid_filter_field",
                []
              ],
              [
                "test_query_with_invalid_order_direction",
                []
              ],
              [
                "test_latest",
                []
              ],
              [
                "test_len",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                "false"
              ],
              [
                "test_buffer",
                "false"
              ],
              [
                "test_query_with_invalid_order_field",
                "false"
              ],
              [
                "test_query_before_flush",
                "false"
              ],
              [
                "test_query_with_invalid_filter_op",
                "false"
              ],
              [
                "test_query_with_invalid_filter_field",
                "false"
              ],
              [
                "test_query_with_invalid_order_direction",
                "false"
              ],
              [
                "test_latest",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_query_data",
                "true"
              ],
              [
                "test_buffer",
                "true"
              ],
              [
                "test_query_with_invalid_order_field",
                "false"
              ],
              [
                "test_query_before_flush",
                "false"
              ],
              [
                "test_query_with_invalid_filter_op",
                "false"
              ],
              [
                "test_query_with_invalid_filter_field",
                "false"
              ],
              [
                "test_query_with_invalid_order_direction",
                "false"
              ],
              [
                "test_latest",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_query_data",
                  "0"
                ],
                [
                  "test_buffer",
                  "0"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "0"
                ],
                [
                  "test_query_before_flush",
                  "0"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "0"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "0"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "0"
                ],
                [
                  "test_latest",
                  "0"
                ],
                [
                  "test_len",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_query_data",
                  "0"
                ],
                [
                  "test_buffer",
                  "0"
                ],
                [
                  "test_query_with_invalid_order_field",
                  "0"
                ],
                [
                  "test_query_before_flush",
                  "0"
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "0"
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "0"
                ],
                [
                  "test_query_with_invalid_order_direction",
                  "0"
                ],
                [
                  "test_latest",
                  "0"
                ],
                [
                  "test_len",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                "false"
              ],
              [
                "test_buffer",
                "false"
              ],
              [
                "test_query_with_invalid_order_field",
                "false"
              ],
              [
                "test_query_before_flush",
                "false"
              ],
              [
                "test_query_with_invalid_filter_op",
                "false"
              ],
              [
                "test_query_with_invalid_filter_field",
                "false"
              ],
              [
                "test_query_with_invalid_order_direction",
                "false"
              ],
              [
                "test_latest",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                "false"
              ],
              [
                "test_buffer",
                "false"
              ],
              [
                "test_query_with_invalid_order_field",
                "false"
              ],
              [
                "test_query_before_flush",
                "false"
              ],
              [
                "test_query_with_invalid_filter_op",
                "false"
              ],
              [
                "test_query_with_invalid_filter_field",
                "false"
              ],
              [
                "test_query_with_invalid_order_direction",
                "false"
              ],
              [
                "test_latest",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_query_data",
                "3"
              ],
              [
                "test_buffer",
                "7"
              ],
              [
                "test_query_with_invalid_order_field",
                "0"
              ],
              [
                "test_query_before_flush",
                "2"
              ],
              [
                "test_query_with_invalid_filter_op",
                "0"
              ],
              [
                "test_query_with_invalid_filter_field",
                "0"
              ],
              [
                "test_query_with_invalid_order_direction",
                "0"
              ],
              [
                "test_latest",
                "1"
              ],
              [
                "test_len",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_query_data",
                [
                  "buf",
                  "channel_count",
                  "channels",
                  "rows",
                  "trg_index",
                  "n_records",
                  "timestamp"
                ]
              ],
              [
                "test_buffer",
                [
                  "start_time",
                  "buf",
                  "channel_count",
                  "channels",
                  "end_time",
                  "starttime",
                  "timevalues",
                  "rows",
                  "n_records",
                  "append_timer",
                  "timestamp"
                ]
              ],
              [
                "test_query_with_invalid_order_field",
                [
                  "buf",
                  "channel_count",
                  "channels",
                  "trg_index",
                  "n_records",
                  "timestamp"
                ]
              ],
              [
                "test_query_before_flush",
                [
                  "buf",
                  "channel_count",
                  "channels",
                  "rows",
                  "n_records",
                  "timestamp"
                ]
              ],
              [
                "test_query_with_invalid_filter_op",
                [
                  "buf",
                  "channel_count",
                  "channels",
                  "n_records",
                  "timestamp"
                ]
              ],
              [
                "test_query_with_invalid_filter_field",
                [
                  "buf",
                  "channel_count",
                  "channels",
                  "n_records",
                  "timestamp"
                ]
              ],
              [
                "test_query_with_invalid_order_direction",
                [
                  "buf",
                  "channel_count",
                  "channels",
                  "trg_index",
                  "n_records",
                  "timestamp"
                ]
              ],
              [
                "test_latest",
                [
                  "buf",
                  "channel_count",
                  "latest_n",
                  "channels",
                  "rows",
                  "n_records",
                  "latest",
                  "timestamp"
                ]
              ],
              [
                "test_len",
                [
                  "buf",
                  "channel_count",
                  "channels",
                  "n_records"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                []
              ],
              [
                "test_buffer",
                []
              ],
              [
                "test_query_with_invalid_order_field",
                []
              ],
              [
                "test_query_before_flush",
                []
              ],
              [
                "test_query_with_invalid_filter_op",
                []
              ],
              [
                "test_query_with_invalid_filter_field",
                []
              ],
              [
                "test_query_with_invalid_order_direction",
                []
              ],
              [
                "test_latest",
                []
              ],
              [
                "test_len",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7945686143011752,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_query_before_flush",
                  "test_query_with_invalid_filter_op",
                  0.7142857142857143
                ],
                [
                  "test_query_with_invalid_order_field",
                  "test_query_with_invalid_order_direction",
                  0.9884615384615387
                ],
                [
                  "test_latest",
                  "test_query_with_invalid_order_field",
                  0.7923076923076925
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "test_query_with_invalid_filter_op",
                  0.9274260335029675
                ],
                [
                  "test_buffer",
                  "test_len",
                  0.7737910703446204
                ],
                [
                  "test_query_data",
                  "test_query_with_invalid_order_field",
                  0.8633344741802217
                ],
                [
                  "test_query_data",
                  "test_query_with_invalid_order_direction",
                  0.8633344741802217
                ],
                [
                  "test_latest",
                  "test_query_data",
                  0.7602057827252464
                ],
                [
                  "test_latest",
                  "test_len",
                  0.8674069258636827
                ],
                [
                  "test_buffer",
                  "test_query_with_invalid_filter_field",
                  0.6452349378327246
                ],
                [
                  "test_len",
                  "test_query_with_invalid_filter_op",
                  0.7718442110126076
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "test_query_with_invalid_order_field",
                  0.9043165715270629
                ],
                [
                  "test_len",
                  "test_query_before_flush",
                  0.839286909062253
                ],
                [
                  "test_len",
                  "test_query_with_invalid_order_direction",
                  0.7770520377528825
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "test_query_with_invalid_order_direction",
                  0.8715764066863604
                ],
                [
                  "test_query_before_flush",
                  "test_query_with_invalid_order_direction",
                  0.7224963084687116
                ],
                [
                  "test_query_before_flush",
                  "test_query_with_invalid_filter_field",
                  0.6955695251272256
                ],
                [
                  "test_query_with_invalid_filter_field",
                  "test_query_with_invalid_order_field",
                  0.8825396319276982
                ],
                [
                  "test_len",
                  "test_query_data",
                  0.7475843802233292
                ],
                [
                  "test_query_before_flush",
                  "test_query_with_invalid_order_field",
                  0.7224963084687116
                ],
                [
                  "test_query_data",
                  "test_query_with_invalid_filter_op",
                  0.7954323138011032
                ],
                [
                  "test_len",
                  "test_query_with_invalid_filter_field",
                  0.7297279959774103
                ],
                [
                  "test_buffer",
                  "test_latest",
                  0.7814188279120133
                ],
                [
                  "test_buffer",
                  "test_query_data",
                  0.8631243809644702
                ],
                [
                  "test_query_with_invalid_filter_op",
                  "test_query_with_invalid_order_direction",
                  0.9043165715270629
                ],
                [
                  "test_buffer",
                  "test_query_with_invalid_order_direction",
                  0.795889546947421
                ],
                [
                  "test_buffer",
                  "test_query_with_invalid_filter_op",
                  0.7252257448218319
                ],
                [
                  "test_buffer",
                  "test_query_before_flush",
                  0.7715167498104595
                ],
                [
                  "test_buffer",
                  "test_query_with_invalid_order_field",
                  0.795889546947421
                ],
                [
                  "test_len",
                  "test_query_with_invalid_order_field",
                  0.7770520377528825
                ],
                [
                  "test_query_before_flush",
                  "test_query_data",
                  0.7184549931106738
                ],
                [
                  "test_query_data",
                  "test_query_with_invalid_filter_field",
                  0.7265060833639218
                ],
                [
                  "test_latest",
                  "test_query_with_invalid_filter_field",
                  0.7180912533076302
                ],
                [
                  "test_latest",
                  "test_query_before_flush",
                  0.8229759275272742
                ],
                [
                  "test_latest",
                  "test_query_with_invalid_filter_op",
                  0.7559895148215658
                ],
                [
                  "test_latest",
                  "test_query_with_invalid_order_direction",
                  0.7923076923076925
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_query_data",
                "false"
              ],
              [
                "test_buffer",
                "false"
              ],
              [
                "test_query_with_invalid_order_field",
                "false"
              ],
              [
                "test_query_before_flush",
                "false"
              ],
              [
                "test_query_with_invalid_filter_op",
                "false"
              ],
              [
                "test_query_with_invalid_filter_field",
                "false"
              ],
              [
                "test_query_with_invalid_order_direction",
                "false"
              ],
              [
                "test_latest",
                "false"
              ],
              [
                "test_len",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_test_client.py",
    "testCases": [
      {
        "name": "TestDataAcquisitionClient",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_missing_offset",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_count_clock_get_time",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_data_for_clock",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_offset",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_zero_offset",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_daq_with_no_buffer",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_clock",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_missing_offset",
                  "[]"
                ],
                [
                  "test_count_clock_get_time",
                  "[]"
                ],
                [
                  "test_get_data_for_clock",
                  "[]"
                ],
                [
                  "test_get_data",
                  "[]"
                ],
                [
                  "test_offset",
                  "[]"
                ],
                [
                  "test_zero_offset",
                  "[]"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "[]"
                ],
                [
                  "test_daq_with_no_buffer",
                  "[]"
                ],
                [
                  "test_clock",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_missing_offset",
                  "false"
                ],
                [
                  "test_count_clock_get_time",
                  "false"
                ],
                [
                  "test_get_data_for_clock",
                  "true"
                ],
                [
                  "test_get_data",
                  "true"
                ],
                [
                  "test_offset",
                  "false"
                ],
                [
                  "test_zero_offset",
                  "false"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "false"
                ],
                [
                  "test_daq_with_no_buffer",
                  "false"
                ],
                [
                  "test_clock",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_missing_offset",
                  "true"
                ],
                [
                  "test_count_clock_get_time",
                  "false"
                ],
                [
                  "test_get_data_for_clock",
                  "true"
                ],
                [
                  "test_get_data",
                  "false"
                ],
                [
                  "test_offset",
                  "true"
                ],
                [
                  "test_zero_offset",
                  "true"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "false"
                ],
                [
                  "test_daq_with_no_buffer",
                  "false"
                ],
                [
                  "test_clock",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_missing_offset",
                  "false"
                ],
                [
                  "test_count_clock_get_time",
                  "false"
                ],
                [
                  "test_get_data_for_clock",
                  "true"
                ],
                [
                  "test_get_data",
                  "false"
                ],
                [
                  "test_offset",
                  "false"
                ],
                [
                  "test_zero_offset",
                  "false"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "false"
                ],
                [
                  "test_daq_with_no_buffer",
                  "false"
                ],
                [
                  "test_clock",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_missing_offset",
                  "false"
                ],
                [
                  "test_count_clock_get_time",
                  "false"
                ],
                [
                  "test_get_data_for_clock",
                  "false"
                ],
                [
                  "test_get_data",
                  "false"
                ],
                [
                  "test_offset",
                  "false"
                ],
                [
                  "test_zero_offset",
                  "false"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "false"
                ],
                [
                  "test_daq_with_no_buffer",
                  "false"
                ],
                [
                  "test_clock",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_missing_offset",
                "false"
              ],
              [
                "test_count_clock_get_time",
                "false"
              ],
              [
                "test_get_data_for_clock",
                "false"
              ],
              [
                "test_get_data",
                "false"
              ],
              [
                "test_offset",
                "false"
              ],
              [
                "test_zero_offset",
                "false"
              ],
              [
                "test_acquisition_null_device_exception",
                "false"
              ],
              [
                "test_daq_with_no_buffer",
                "false"
              ],
              [
                "test_clock",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_missing_offset",
                "false"
              ],
              [
                "test_count_clock_get_time",
                "false"
              ],
              [
                "test_get_data_for_clock",
                "false"
              ],
              [
                "test_get_data",
                "false"
              ],
              [
                "test_offset",
                "false"
              ],
              [
                "test_zero_offset",
                "false"
              ],
              [
                "test_acquisition_null_device_exception",
                "false"
              ],
              [
                "test_daq_with_no_buffer",
                "false"
              ],
              [
                "test_clock",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_missing_offset",
                []
              ],
              [
                "test_count_clock_get_time",
                []
              ],
              [
                "test_get_data_for_clock",
                []
              ],
              [
                "test_get_data",
                []
              ],
              [
                "test_offset",
                []
              ],
              [
                "test_zero_offset",
                []
              ],
              [
                "test_acquisition_null_device_exception",
                []
              ],
              [
                "test_daq_with_no_buffer",
                []
              ],
              [
                "test_clock",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_missing_offset",
                "false"
              ],
              [
                "test_count_clock_get_time",
                "false"
              ],
              [
                "test_get_data_for_clock",
                "false"
              ],
              [
                "test_get_data",
                "false"
              ],
              [
                "test_offset",
                "false"
              ],
              [
                "test_zero_offset",
                "false"
              ],
              [
                "test_acquisition_null_device_exception",
                "false"
              ],
              [
                "test_daq_with_no_buffer",
                "false"
              ],
              [
                "test_clock",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_missing_offset",
                "false"
              ],
              [
                "test_count_clock_get_time",
                "false"
              ],
              [
                "test_get_data_for_clock",
                "true"
              ],
              [
                "test_get_data",
                "false"
              ],
              [
                "test_offset",
                "false"
              ],
              [
                "test_zero_offset",
                "true"
              ],
              [
                "test_acquisition_null_device_exception",
                "false"
              ],
              [
                "test_daq_with_no_buffer",
                "true"
              ],
              [
                "test_clock",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_missing_offset",
                  "0"
                ],
                [
                  "test_count_clock_get_time",
                  "0"
                ],
                [
                  "test_get_data_for_clock",
                  "0"
                ],
                [
                  "test_get_data",
                  "0"
                ],
                [
                  "test_offset",
                  "0"
                ],
                [
                  "test_zero_offset",
                  "0"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "0"
                ],
                [
                  "test_daq_with_no_buffer",
                  "0"
                ],
                [
                  "test_clock",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_missing_offset",
                  "0"
                ],
                [
                  "test_count_clock_get_time",
                  "0"
                ],
                [
                  "test_get_data_for_clock",
                  "0"
                ],
                [
                  "test_get_data",
                  "0"
                ],
                [
                  "test_offset",
                  "0"
                ],
                [
                  "test_zero_offset",
                  "0"
                ],
                [
                  "test_acquisition_null_device_exception",
                  "0"
                ],
                [
                  "test_daq_with_no_buffer",
                  "0"
                ],
                [
                  "test_clock",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_missing_offset",
                "false"
              ],
              [
                "test_count_clock_get_time",
                "false"
              ],
              [
                "test_get_data_for_clock",
                "false"
              ],
              [
                "test_get_data",
                "false"
              ],
              [
                "test_offset",
                "false"
              ],
              [
                "test_zero_offset",
                "false"
              ],
              [
                "test_acquisition_null_device_exception",
                "false"
              ],
              [
                "test_daq_with_no_buffer",
                "false"
              ],
              [
                "test_clock",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_missing_offset",
                "true"
              ],
              [
                "test_count_clock_get_time",
                "false"
              ],
              [
                "test_get_data_for_clock",
                "true"
              ],
              [
                "test_get_data",
                "true"
              ],
              [
                "test_offset",
                "true"
              ],
              [
                "test_zero_offset",
                "true"
              ],
              [
                "test_acquisition_null_device_exception",
                "false"
              ],
              [
                "test_daq_with_no_buffer",
                "true"
              ],
              [
                "test_clock",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_missing_offset",
                "2"
              ],
              [
                "test_count_clock_get_time",
                "1"
              ],
              [
                "test_get_data_for_clock",
                "9"
              ],
              [
                "test_get_data",
                "2"
              ],
              [
                "test_offset",
                "2"
              ],
              [
                "test_zero_offset",
                "2"
              ],
              [
                "test_acquisition_null_device_exception",
                "1"
              ],
              [
                "test_daq_with_no_buffer",
                "3"
              ],
              [
                "test_clock",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_missing_offset",
                [
                  "sample_hz",
                  "channels",
                  "data",
                  "daq",
                  "num_records",
                  "n_channels",
                  "device"
                ]
              ],
              [
                "test_count_clock_get_time",
                [
                  "result",
                  "old_counter",
                  "clock"
                ]
              ],
              [
                "test_get_data_for_clock",
                [
                  "sample_hz",
                  "channels",
                  "data",
                  "daq",
                  "num_records",
                  "n_channels",
                  "mock_data_index",
                  "data_slice",
                  "start_offset",
                  "device",
                  "trigger_at"
                ]
              ],
              [
                "test_get_data",
                [
                  "data",
                  "daq",
                  "device"
                ]
              ],
              [
                "test_offset",
                [
                  "sample_hz",
                  "channels",
                  "data",
                  "daq",
                  "num_records",
                  "n_channels",
                  "device",
                  "trigger_at"
                ]
              ],
              [
                "test_zero_offset",
                [
                  "sample_hz",
                  "channels",
                  "data",
                  "daq",
                  "num_records",
                  "n_channels",
                  "device",
                  "trigger_at"
                ]
              ],
              [
                "test_acquisition_null_device_exception",
                [
                  "daq"
                ]
              ],
              [
                "test_daq_with_no_buffer",
                [
                  "data",
                  "offset",
                  "daq",
                  "data_length",
                  "buf_temp",
                  "device"
                ]
              ],
              [
                "test_clock",
                [
                  "data",
                  "daq",
                  "clock"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_missing_offset",
                []
              ],
              [
                "test_count_clock_get_time",
                []
              ],
              [
                "test_get_data_for_clock",
                []
              ],
              [
                "test_get_data",
                []
              ],
              [
                "test_offset",
                []
              ],
              [
                "test_zero_offset",
                []
              ],
              [
                "test_acquisition_null_device_exception",
                []
              ],
              [
                "test_daq_with_no_buffer",
                []
              ],
              [
                "test_clock",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6182558326063506,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_acquisition_null_device_exception",
                  "test_clock",
                  0.42004800823013905
                ],
                [
                  "test_acquisition_null_device_exception",
                  "test_get_data_for_clock",
                  0.42164733121167425
                ],
                [
                  "test_get_data",
                  "test_clock",
                  0.7043825613020388
                ],
                [
                  "test_acquisition_null_device_exception",
                  "test_missing_offset",
                  0.44232586846469135
                ],
                [
                  "test_daq_with_no_buffer",
                  "test_get_data_for_clock",
                  0.7157886237147892
                ],
                [
                  "test_get_data",
                  "test_missing_offset",
                  0.6571617674405231
                ],
                [
                  "test_clock",
                  "test_missing_offset",
                  0.728025208309264
                ],
                [
                  "test_offset",
                  "test_get_data_for_clock",
                  0.8362304835390469
                ],
                [
                  "test_count_clock_get_time",
                  "test_clock",
                  0.4839386351777002
                ],
                [
                  "test_get_data",
                  "test_offset",
                  0.6569169183558355
                ],
                [
                  "test_count_clock_get_time",
                  "test_missing_offset",
                  0.4225556380241969
                ],
                [
                  "test_clock",
                  "test_offset",
                  0.7665602810854092
                ],
                [
                  "test_missing_offset",
                  "test_get_data_for_clock",
                  0.7981914646292461
                ],
                [
                  "test_daq_with_no_buffer",
                  "test_offset",
                  0.7112100069525424
                ],
                [
                  "test_offset",
                  "test_zero_offset",
                  0.9404078503843954
                ],
                [
                  "test_missing_offset",
                  "test_zero_offset",
                  0.8797488177026358
                ],
                [
                  "test_get_data",
                  "test_count_clock_get_time",
                  0.33819385712830446
                ],
                [
                  "test_acquisition_null_device_exception",
                  "test_offset",
                  0.4472299299812352
                ],
                [
                  "test_acquisition_null_device_exception",
                  "test_zero_offset",
                  0.46128464092581983
                ],
                [
                  "test_daq_with_no_buffer",
                  "test_count_clock_get_time",
                  0.3810387941055741
                ],
                [
                  "test_clock",
                  "test_zero_offset",
                  0.754299435725018
                ],
                [
                  "test_get_data",
                  "test_zero_offset",
                  0.6627906976744186
                ],
                [
                  "test_zero_offset",
                  "test_get_data_for_clock",
                  0.8622908504622112
                ],
                [
                  "test_acquisition_null_device_exception",
                  "test_count_clock_get_time",
                  0.28839363756580005
                ],
                [
                  "test_daq_with_no_buffer",
                  "test_zero_offset",
                  0.702869590740566
                ],
                [
                  "test_count_clock_get_time",
                  "test_get_data_for_clock",
                  0.4104013757109067
                ],
                [
                  "test_daq_with_no_buffer",
                  "test_get_data",
                  0.7429732610831208
                ],
                [
                  "test_offset",
                  "test_missing_offset",
                  0.8688100585711449
                ],
                [
                  "test_count_clock_get_time",
                  "test_zero_offset",
                  0.4431505714095024
                ],
                [
                  "test_acquisition_null_device_exception",
                  "test_daq_with_no_buffer",
                  0.5089241902460763
                ],
                [
                  "test_count_clock_get_time",
                  "test_offset",
                  0.4294191941679746
                ],
                [
                  "test_daq_with_no_buffer",
                  "test_missing_offset",
                  0.7013052726575434
                ],
                [
                  "test_get_data",
                  "test_get_data_for_clock",
                  0.7058575545818985
                ],
                [
                  "test_clock",
                  "test_get_data_for_clock",
                  0.7589002912016768
                ],
                [
                  "test_acquisition_null_device_exception",
                  "test_get_data",
                  0.5032196082827125
                ],
                [
                  "test_daq_with_no_buffer",
                  "test_clock",
                  0.7007176970829915
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_missing_offset",
                "true"
              ],
              [
                "test_count_clock_get_time",
                "false"
              ],
              [
                "test_get_data_for_clock",
                "false"
              ],
              [
                "test_get_data",
                "true"
              ],
              [
                "test_offset",
                "false"
              ],
              [
                "test_zero_offset",
                "false"
              ],
              [
                "test_acquisition_null_device_exception",
                "false"
              ],
              [
                "test_daq_with_no_buffer",
                "true"
              ],
              [
                "test_clock",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "bcipy_\u0026_tasks_\u0026_tests_\u0026_test_icon_to_icon.py",
    "testCases": [
      {
        "name": "TestIconToIcon",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_img_path",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_img_path",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_img_path",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_img_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_img_path",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_img_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_img_path",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_img_path",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_img_path",
                [
                  "signal_model",
                  "auc_filename",
                  "task",
                  "img_path",
                  "daq",
                  "display",
                  "fixation",
                  "file_save",
                  "fake",
                  "parameters",
                  "language_model"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_img_path",
                [
                  "self.parameters"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_img_path",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "bcipy_\u0026_helpers_\u0026_tests_\u0026_test_acquisition.py",
    "testCases": [
      {
        "name": "TestAcquisition",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_can_use_lsl",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_default_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_allows_customization",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_can_use_lsl",
                  "[]"
                ],
                [
                  "test_default_values",
                  "[]"
                ],
                [
                  "test_allows_customization",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_can_use_lsl",
                  "false"
                ],
                [
                  "test_default_values",
                  "false"
                ],
                [
                  "test_allows_customization",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_can_use_lsl",
                  "false"
                ],
                [
                  "test_default_values",
                  "false"
                ],
                [
                  "test_allows_customization",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_can_use_lsl",
                  "false"
                ],
                [
                  "test_default_values",
                  "false"
                ],
                [
                  "test_allows_customization",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_can_use_lsl",
                  "false"
                ],
                [
                  "test_default_values",
                  "false"
                ],
                [
                  "test_allows_customization",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                "false"
              ],
              [
                "test_default_values",
                "false"
              ],
              [
                "test_allows_customization",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                "false"
              ],
              [
                "test_default_values",
                "false"
              ],
              [
                "test_allows_customization",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                []
              ],
              [
                "test_default_values",
                []
              ],
              [
                "test_allows_customization",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                "false"
              ],
              [
                "test_default_values",
                "false"
              ],
              [
                "test_allows_customization",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_can_use_lsl",
                "true"
              ],
              [
                "test_default_values",
                "true"
              ],
              [
                "test_allows_customization",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_can_use_lsl",
                  "0"
                ],
                [
                  "test_default_values",
                  "0"
                ],
                [
                  "test_allows_customization",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_can_use_lsl",
                  "0"
                ],
                [
                  "test_default_values",
                  "0"
                ],
                [
                  "test_allows_customization",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_can_use_lsl",
                "true"
              ],
              [
                "test_default_values",
                "false"
              ],
              [
                "test_allows_customization",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_can_use_lsl",
                "true"
              ],
              [
                "test_default_values",
                "true"
              ],
              [
                "test_allows_customization",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                "2"
              ],
              [
                "test_default_values",
                "2"
              ],
              [
                "test_allows_customization",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                [
                  "server",
                  "client",
                  "params"
                ]
              ],
              [
                "test_default_values",
                [
                  "server",
                  "client"
                ]
              ],
              [
                "test_allows_customization",
                [
                  "server",
                  "f",
                  "client",
                  "params"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                []
              ],
              [
                "test_default_values",
                []
              ],
              [
                "test_allows_customization",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6981618836352644,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_default_values",
                  "test_allows_customization",
                  0.6207359338710897
                ],
                [
                  "test_allows_customization",
                  "test_can_use_lsl",
                  0.8171505630757668
                ],
                [
                  "test_default_values",
                  "test_can_use_lsl",
                  0.656599153958937
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_can_use_lsl",
                "false"
              ],
              [
                "test_default_values",
                "false"
              ],
              [
                "test_allows_customization",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "bcipy_\u0026_helpers_\u0026_tests_\u0026_test_signal_model.py",
    "testCases": [
      {
        "name": "TestSignalModelRelated",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_valid_letters",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_valid_letters",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_valid_letters",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_valid_letters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_valid_letters",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_valid_letters",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_valid_letters",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_valid_letters",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                [
                  "alp",
                  "target_info",
                  "timings",
                  "expected_letters",
                  "triggers",
                  "cp",
                  "expected_time",
                  "letters",
                  "labels"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_valid_letters",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "bcipy_\u0026_tasks_\u0026_tests_\u0026_test_decision_maker.py",
    "testCases": [
      {
        "name": "TestDecisionMaker",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_max_sequences",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decision_maker_threshold",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decision_maker",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_min_sequences",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_displayed_state",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_max_sequences",
                  "[]"
                ],
                [
                  "test_decision_maker_threshold",
                  "[]"
                ],
                [
                  "test_decision_maker",
                  "[]"
                ],
                [
                  "test_min_sequences",
                  "[]"
                ],
                [
                  "test_displayed_state",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_max_sequences",
                  "false"
                ],
                [
                  "test_decision_maker_threshold",
                  "false"
                ],
                [
                  "test_decision_maker",
                  "false"
                ],
                [
                  "test_min_sequences",
                  "false"
                ],
                [
                  "test_displayed_state",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_max_sequences",
                  "false"
                ],
                [
                  "test_decision_maker_threshold",
                  "false"
                ],
                [
                  "test_decision_maker",
                  "false"
                ],
                [
                  "test_min_sequences",
                  "false"
                ],
                [
                  "test_displayed_state",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_max_sequences",
                  "true"
                ],
                [
                  "test_decision_maker_threshold",
                  "false"
                ],
                [
                  "test_decision_maker",
                  "false"
                ],
                [
                  "test_min_sequences",
                  "false"
                ],
                [
                  "test_displayed_state",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_max_sequences",
                  "false"
                ],
                [
                  "test_decision_maker_threshold",
                  "false"
                ],
                [
                  "test_decision_maker",
                  "false"
                ],
                [
                  "test_min_sequences",
                  "false"
                ],
                [
                  "test_displayed_state",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "false"
              ],
              [
                "test_decision_maker_threshold",
                "false"
              ],
              [
                "test_decision_maker",
                "false"
              ],
              [
                "test_min_sequences",
                "false"
              ],
              [
                "test_displayed_state",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "false"
              ],
              [
                "test_decision_maker_threshold",
                "false"
              ],
              [
                "test_decision_maker",
                "false"
              ],
              [
                "test_min_sequences",
                "false"
              ],
              [
                "test_displayed_state",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                []
              ],
              [
                "test_decision_maker_threshold",
                []
              ],
              [
                "test_decision_maker",
                []
              ],
              [
                "test_min_sequences",
                []
              ],
              [
                "test_displayed_state",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "false"
              ],
              [
                "test_decision_maker_threshold",
                "false"
              ],
              [
                "test_decision_maker",
                "false"
              ],
              [
                "test_min_sequences",
                "false"
              ],
              [
                "test_displayed_state",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "false"
              ],
              [
                "test_decision_maker_threshold",
                "false"
              ],
              [
                "test_decision_maker",
                "false"
              ],
              [
                "test_min_sequences",
                "false"
              ],
              [
                "test_displayed_state",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_max_sequences",
                  "0"
                ],
                [
                  "test_decision_maker_threshold",
                  "0"
                ],
                [
                  "test_decision_maker",
                  "0"
                ],
                [
                  "test_min_sequences",
                  "0"
                ],
                [
                  "test_displayed_state",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_max_sequences",
                  "0"
                ],
                [
                  "test_decision_maker_threshold",
                  "0"
                ],
                [
                  "test_decision_maker",
                  "0"
                ],
                [
                  "test_min_sequences",
                  "0"
                ],
                [
                  "test_displayed_state",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "false"
              ],
              [
                "test_decision_maker_threshold",
                "false"
              ],
              [
                "test_decision_maker",
                "false"
              ],
              [
                "test_min_sequences",
                "false"
              ],
              [
                "test_displayed_state",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "false"
              ],
              [
                "test_decision_maker_threshold",
                "false"
              ],
              [
                "test_decision_maker",
                "false"
              ],
              [
                "test_min_sequences",
                "false"
              ],
              [
                "test_displayed_state",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "4"
              ],
              [
                "test_decision_maker_threshold",
                "2"
              ],
              [
                "test_decision_maker",
                "8"
              ],
              [
                "test_min_sequences",
                "3"
              ],
              [
                "test_displayed_state",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                [
                  "likelihood",
                  "decision",
                  "_arg",
                  "decision_maker"
                ]
              ],
              [
                "test_decision_maker_threshold",
                [
                  "likelihood",
                  "decision",
                  "_arg",
                  "decision_maker"
                ]
              ],
              [
                "test_decision_maker",
                [
                  "likelihood",
                  "decision",
                  "_arg",
                  "decision_maker"
                ]
              ],
              [
                "test_min_sequences",
                [
                  "likelihood",
                  "decision",
                  "_arg",
                  "decision_maker"
                ]
              ],
              [
                "test_displayed_state",
                [
                  "likelihood",
                  "_decision",
                  "_arg",
                  "decision_maker"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                []
              ],
              [
                "test_decision_maker_threshold",
                []
              ],
              [
                "test_decision_maker",
                []
              ],
              [
                "test_min_sequences",
                []
              ],
              [
                "test_displayed_state",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9123874387261655,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_max_sequences",
                  "test_displayed_state",
                  0.9078558739020455
                ],
                [
                  "test_decision_maker",
                  "test_max_sequences",
                  0.9389892036416838
                ],
                [
                  "test_min_sequences",
                  "test_displayed_state",
                  0.9208604673357854
                ],
                [
                  "test_decision_maker",
                  "test_decision_maker_threshold",
                  0.8902287010317295
                ],
                [
                  "test_decision_maker",
                  "test_displayed_state",
                  0.9074878859080047
                ],
                [
                  "test_min_sequences",
                  "test_max_sequences",
                  0.9535389854309035
                ],
                [
                  "test_max_sequences",
                  "test_decision_maker_threshold",
                  0.8749368124007963
                ],
                [
                  "test_min_sequences",
                  "test_decision_maker_threshold",
                  0.8838976505931886
                ],
                [
                  "test_decision_maker",
                  "test_min_sequences",
                  0.9455671724731785
                ],
                [
                  "test_displayed_state",
                  "test_decision_maker_threshold",
                  0.9005116345443386
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_max_sequences",
                "false"
              ],
              [
                "test_decision_maker_threshold",
                "false"
              ],
              [
                "test_decision_maker",
                "false"
              ],
              [
                "test_min_sequences",
                "false"
              ],
              [
                "test_displayed_state",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_test_processor.py",
    "testCases": [
      {
        "name": "TestFilewriter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_filewriter_setup",
                  "[]"
                ],
                [
                  "test_filewriter",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_filewriter_setup",
                  "[]"
                ],
                [
                  "test_filewriter",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_filewriter_setup",
                  "false"
                ],
                [
                  "test_filewriter",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_filewriter_setup",
                  "false"
                ],
                [
                  "test_filewriter",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_filewriter_setup",
                  "false"
                ],
                [
                  "test_filewriter",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_filewriter_setup",
                  "false"
                ],
                [
                  "test_filewriter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                "false"
              ],
              [
                "test_filewriter",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                "false"
              ],
              [
                "test_filewriter",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                []
              ],
              [
                "test_filewriter",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                "false"
              ],
              [
                "test_filewriter",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                "false"
              ],
              [
                "test_filewriter",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_filewriter_setup",
                  "0"
                ],
                [
                  "test_filewriter",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_filewriter_setup",
                  "0"
                ],
                [
                  "test_filewriter",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                "false"
              ],
              [
                "test_filewriter",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                "false"
              ],
              [
                "test_filewriter",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_filewriter_setup",
                "0"
              ],
              [
                "test_filewriter",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                [
                  "filewriter"
                ]
              ],
              [
                "test_filewriter",
                [
                  "expected_csv_rows",
                  "data",
                  "handle",
                  "filewriter",
                  "mockopen",
                  "timestamp"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                []
              ],
              [
                "test_filewriter",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.30796040246103223,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_filewriter",
                  "test_filewriter_setup",
                  0.30796040246103223
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_filewriter_setup",
                "false"
              ],
              [
                "test_filewriter",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestDispatchProcessor",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_set_device_info",
                  "[]"
                ],
                [
                  "test_process",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_set_device_info",
                  "[]"
                ],
                [
                  "test_process",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_set_device_info",
                  "false"
                ],
                [
                  "test_process",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_set_device_info",
                  "false"
                ],
                [
                  "test_process",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_set_device_info",
                  "false"
                ],
                [
                  "test_process",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_set_device_info",
                  "false"
                ],
                [
                  "test_process",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                "false"
              ],
              [
                "test_process",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                "false"
              ],
              [
                "test_process",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                []
              ],
              [
                "test_process",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                "false"
              ],
              [
                "test_process",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                "false"
              ],
              [
                "test_process",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_set_device_info",
                  "0"
                ],
                [
                  "test_process",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_set_device_info",
                  "0"
                ],
                [
                  "test_process",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                "false"
              ],
              [
                "test_process",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                "false"
              ],
              [
                "test_process",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_set_device_info",
                "0"
              ],
              [
                "test_process",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                [
                  "proc3",
                  "proc2",
                  "device_info",
                  "proc1",
                  "multi"
                ]
              ],
              [
                "test_process",
                [
                  "proc2",
                  "proc1",
                  "data2",
                  "data1",
                  "multi"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                []
              ],
              [
                "test_process",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5919652153676849,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_set_device_info",
                  "test_process",
                  0.5919652153676849
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_set_device_info",
                "false"
              ],
              [
                "test_process",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "bcipy_\u0026_tasks_\u0026_tests_\u0026_test_evidence_fusion.py",
    "testCases": [
      {
        "name": "TestEvidenceFusion",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fusion",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fusion",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fusion",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fusion",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fusion",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fusion",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_fusion",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fusion",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fusion",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                [
                  "num_sequences",
                  "conjugator",
                  "evidence_names",
                  "erp_evidence",
                  "frp_evidence",
                  "lm_evidence",
                  "len_alp",
                  "expected_posterior"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_fusion",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "bcipy_\u0026_gui_\u0026_tests_\u0026_viewer_\u0026_ring_buffer_test.py",
    "testCases": [
      {
        "name": "TestRingBuffer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_max",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_append",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_empty_value",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pre_allocation",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_empty_check",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_max",
                  "[]"
                ],
                [
                  "test_append",
                  "[]"
                ],
                [
                  "test_empty_value",
                  "[]"
                ],
                [
                  "test_pre_allocation",
                  "[]"
                ],
                [
                  "test_empty_check",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_max",
                  "true"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_empty_value",
                  "false"
                ],
                [
                  "test_pre_allocation",
                  "false"
                ],
                [
                  "test_empty_check",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_max",
                  "false"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_empty_value",
                  "false"
                ],
                [
                  "test_pre_allocation",
                  "false"
                ],
                [
                  "test_empty_check",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_max",
                  "false"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_empty_value",
                  "false"
                ],
                [
                  "test_pre_allocation",
                  "false"
                ],
                [
                  "test_empty_check",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_max",
                  "false"
                ],
                [
                  "test_append",
                  "false"
                ],
                [
                  "test_empty_value",
                  "false"
                ],
                [
                  "test_pre_allocation",
                  "false"
                ],
                [
                  "test_empty_check",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_empty_value",
                "false"
              ],
              [
                "test_pre_allocation",
                "false"
              ],
              [
                "test_empty_check",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_empty_value",
                "false"
              ],
              [
                "test_pre_allocation",
                "false"
              ],
              [
                "test_empty_check",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                []
              ],
              [
                "test_append",
                []
              ],
              [
                "test_empty_value",
                []
              ],
              [
                "test_pre_allocation",
                []
              ],
              [
                "test_empty_check",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_empty_value",
                "false"
              ],
              [
                "test_pre_allocation",
                "false"
              ],
              [
                "test_empty_check",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_empty_value",
                "false"
              ],
              [
                "test_pre_allocation",
                "false"
              ],
              [
                "test_empty_check",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_max",
                  "0"
                ],
                [
                  "test_append",
                  "0"
                ],
                [
                  "test_empty_value",
                  "0"
                ],
                [
                  "test_pre_allocation",
                  "0"
                ],
                [
                  "test_empty_check",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_max",
                  "0"
                ],
                [
                  "test_append",
                  "0"
                ],
                [
                  "test_empty_value",
                  "0"
                ],
                [
                  "test_pre_allocation",
                  "0"
                ],
                [
                  "test_empty_check",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_empty_value",
                "false"
              ],
              [
                "test_pre_allocation",
                "false"
              ],
              [
                "test_empty_check",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_empty_value",
                "false"
              ],
              [
                "test_pre_allocation",
                "false"
              ],
              [
                "test_empty_check",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "1"
              ],
              [
                "test_append",
                "8"
              ],
              [
                "test_empty_value",
                "6"
              ],
              [
                "test_pre_allocation",
                "8"
              ],
              [
                "test_empty_check",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                [
                  "buf",
                  "size"
                ]
              ],
              [
                "test_append",
                [
                  "buf"
                ]
              ],
              [
                "test_empty_value",
                [
                  "buf"
                ]
              ],
              [
                "test_pre_allocation",
                [
                  "buf"
                ]
              ],
              [
                "test_empty_check",
                [
                  "buf"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                []
              ],
              [
                "test_append",
                []
              ],
              [
                "test_empty_value",
                []
              ],
              [
                "test_pre_allocation",
                []
              ],
              [
                "test_empty_check",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5103267598166592,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_append",
                  "test_empty_check",
                  0.49099972420223076
                ],
                [
                  "test_empty_check",
                  "test_empty_value",
                  0.3879331084476855
                ],
                [
                  "test_append",
                  "test_max",
                  0.3703487587734027
                ],
                [
                  "test_max",
                  "test_pre_allocation",
                  0.40273358091216727
                ],
                [
                  "test_max",
                  "test_empty_value",
                  0.2758550949374014
                ],
                [
                  "test_max",
                  "test_empty_check",
                  0.370970413401187
                ],
                [
                  "test_pre_allocation",
                  "test_empty_check",
                  0.4951192808667013
                ],
                [
                  "test_pre_allocation",
                  "test_empty_value",
                  0.69311918516233
                ],
                [
                  "test_append",
                  "test_pre_allocation",
                  0.9322488068310079
                ],
                [
                  "test_append",
                  "test_empty_value",
                  0.6839396446324778
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_max",
                "false"
              ],
              [
                "test_append",
                "false"
              ],
              [
                "test_empty_value",
                "false"
              ],
              [
                "test_pre_allocation",
                "false"
              ],
              [
                "test_empty_check",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_test_buffer_server.py",
    "testCases": [
      {
        "name": "TestBufferServer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_all_data",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_count",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_query_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_multiple_servers",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_get_data_slice",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_all_data",
                  "[]"
                ],
                [
                  "test_count",
                  "[]"
                ],
                [
                  "test_query_data",
                  "[]"
                ],
                [
                  "test_multiple_servers",
                  "[]"
                ],
                [
                  "test_get_data_slice",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_all_data",
                  "true"
                ],
                [
                  "test_count",
                  "true"
                ],
                [
                  "test_query_data",
                  "true"
                ],
                [
                  "test_multiple_servers",
                  "true"
                ],
                [
                  "test_get_data_slice",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_all_data",
                  "true"
                ],
                [
                  "test_count",
                  "false"
                ],
                [
                  "test_query_data",
                  "false"
                ],
                [
                  "test_multiple_servers",
                  "false"
                ],
                [
                  "test_get_data_slice",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_all_data",
                  "false"
                ],
                [
                  "test_count",
                  "false"
                ],
                [
                  "test_query_data",
                  "false"
                ],
                [
                  "test_multiple_servers",
                  "false"
                ],
                [
                  "test_get_data_slice",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_all_data",
                  "false"
                ],
                [
                  "test_count",
                  "false"
                ],
                [
                  "test_query_data",
                  "false"
                ],
                [
                  "test_multiple_servers",
                  "false"
                ],
                [
                  "test_get_data_slice",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                "false"
              ],
              [
                "test_count",
                "false"
              ],
              [
                "test_query_data",
                "false"
              ],
              [
                "test_multiple_servers",
                "false"
              ],
              [
                "test_get_data_slice",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                "false"
              ],
              [
                "test_count",
                "false"
              ],
              [
                "test_query_data",
                "false"
              ],
              [
                "test_multiple_servers",
                "false"
              ],
              [
                "test_get_data_slice",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_all_data",
                [
                  "self.channels"
                ]
              ],
              [
                "test_count",
                [
                  "self.channels"
                ]
              ],
              [
                "test_query_data",
                []
              ],
              [
                "test_multiple_servers",
                []
              ],
              [
                "test_get_data_slice",
                [
                  "self.channels"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                "false"
              ],
              [
                "test_count",
                "false"
              ],
              [
                "test_query_data",
                "false"
              ],
              [
                "test_multiple_servers",
                "false"
              ],
              [
                "test_get_data_slice",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_all_data",
                "false"
              ],
              [
                "test_count",
                "false"
              ],
              [
                "test_query_data",
                "true"
              ],
              [
                "test_multiple_servers",
                "false"
              ],
              [
                "test_get_data_slice",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_all_data",
                  "0"
                ],
                [
                  "test_count",
                  "0"
                ],
                [
                  "test_query_data",
                  "0"
                ],
                [
                  "test_multiple_servers",
                  "0"
                ],
                [
                  "test_get_data_slice",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_all_data",
                  "0"
                ],
                [
                  "test_count",
                  "0"
                ],
                [
                  "test_query_data",
                  "0"
                ],
                [
                  "test_multiple_servers",
                  "0"
                ],
                [
                  "test_get_data_slice",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                "false"
              ],
              [
                "test_count",
                "false"
              ],
              [
                "test_query_data",
                "false"
              ],
              [
                "test_multiple_servers",
                "false"
              ],
              [
                "test_get_data_slice",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                "false"
              ],
              [
                "test_count",
                "false"
              ],
              [
                "test_query_data",
                "false"
              ],
              [
                "test_multiple_servers",
                "false"
              ],
              [
                "test_get_data_slice",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                "1"
              ],
              [
                "test_count",
                "1"
              ],
              [
                "test_query_data",
                "3"
              ],
              [
                "test_multiple_servers",
                "3"
              ],
              [
                "test_get_data_slice",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                [
                  "result",
                  "data"
                ]
              ],
              [
                "test_count",
                [
                  "n_records"
                ]
              ],
              [
                "test_query_data",
                [
                  "result",
                  "data",
                  "last_channel"
                ]
              ],
              [
                "test_multiple_servers",
                [
                  "server1_data",
                  "pid2",
                  "server2_data",
                  "n_records"
                ]
              ],
              [
                "test_get_data_slice",
                [
                  "result",
                  "data",
                  "start",
                  "end"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                [
                  "self.pid",
                  "self.channel_count"
                ]
              ],
              [
                "test_count",
                [
                  "self.pid",
                  "self.channel_count"
                ]
              ],
              [
                "test_query_data",
                [
                  "self.channels",
                  "self.pid",
                  "self.channel_count"
                ]
              ],
              [
                "test_multiple_servers",
                [
                  "self.channels",
                  "self.pid",
                  "self.channel_count"
                ]
              ],
              [
                "test_get_data_slice",
                [
                  "self.pid",
                  "self.channel_count"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5817478709860838,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_query_data",
                  "test_multiple_servers",
                  0.7888855592111665
                ],
                [
                  "test_get_all_data",
                  "test_multiple_servers",
                  0.3595778576041835
                ],
                [
                  "test_count",
                  "test_query_data",
                  0.565685424949238
                ],
                [
                  "test_count",
                  "test_get_all_data",
                  0.47733437050543803
                ],
                [
                  "test_get_data_slice",
                  "test_multiple_servers",
                  0.6141906218567124
                ],
                [
                  "test_count",
                  "test_get_data_slice",
                  0.6299678596025605
                ],
                [
                  "test_get_data_slice",
                  "test_query_data",
                  0.6420454545454546
                ],
                [
                  "test_count",
                  "test_multiple_servers",
                  0.617899933105873
                ],
                [
                  "test_get_data_slice",
                  "test_get_all_data",
                  0.6648246687290141
                ],
                [
                  "test_query_data",
                  "test_get_all_data",
                  0.4570669597511972
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_all_data",
                "false"
              ],
              [
                "test_count",
                "false"
              ],
              [
                "test_query_data",
                "false"
              ],
              [
                "test_multiple_servers",
                "false"
              ],
              [
                "test_get_data_slice",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "bcipy_\u0026_feedback_\u0026_tests_\u0026_sound_\u0026_test_sound_feedback.py",
    "testCases": [
      {
        "name": "TestSoundFeedback",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_feedback_administer_sound",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_feedback_type",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_feedback_administer_sound",
                  "[]"
                ],
                [
                  "test_feedback_type",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_feedback_administer_sound",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_feedback_administer_sound",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_feedback_administer_sound",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_feedback_administer_sound",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_feedback_administer_sound",
                [
                  "self.data_save_path",
                  "self.clock",
                  "self.parameters",
                  "self.parameters_used",
                  "self.user_information"
                ]
              ],
              [
                "test_feedback_type",
                [
                  "self.data_save_path",
                  "self.clock",
                  "self.sound",
                  "self.parameters",
                  "self.parameters_used",
                  "self.user_information",
                  "self.fs"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_feedback_administer_sound",
                  "0"
                ],
                [
                  "test_feedback_type",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_feedback_administer_sound",
                  "0"
                ],
                [
                  "test_feedback_type",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "1"
              ],
              [
                "test_feedback_type",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                [
                  "resp"
                ]
              ],
              [
                "test_feedback_type",
                [
                  "feedback_type"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                [
                  "self.sound",
                  "self.auditory_feedback",
                  "self.fs"
                ]
              ],
              [
                "test_feedback_type",
                [
                  "self.auditory_feedback"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.429197537639476,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_feedback_type",
                  "test_feedback_administer_sound",
                  0.429197537639476
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_sound",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_datastream_\u0026_test_producer.py",
    "testCases": [
      {
        "name": "TestProducer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_custom_generator",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_max_iters",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_frequency",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_custom_generator",
                  "[]"
                ],
                [
                  "test_max_iters",
                  "[]"
                ],
                [
                  "test_frequency",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_custom_generator",
                  "true"
                ],
                [
                  "test_max_iters",
                  "false"
                ],
                [
                  "test_frequency",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_custom_generator",
                  "false"
                ],
                [
                  "test_max_iters",
                  "false"
                ],
                [
                  "test_frequency",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_custom_generator",
                  "false"
                ],
                [
                  "test_max_iters",
                  "false"
                ],
                [
                  "test_frequency",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_custom_generator",
                  "false"
                ],
                [
                  "test_max_iters",
                  "false"
                ],
                [
                  "test_frequency",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_generator",
                "false"
              ],
              [
                "test_max_iters",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_generator",
                "false"
              ],
              [
                "test_max_iters",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_generator",
                []
              ],
              [
                "test_max_iters",
                []
              ],
              [
                "test_frequency",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_generator",
                "false"
              ],
              [
                "test_max_iters",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_custom_generator",
                "true"
              ],
              [
                "test_max_iters",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_custom_generator",
                  "0"
                ],
                [
                  "test_max_iters",
                  "0"
                ],
                [
                  "test_frequency",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_custom_generator",
                  "0"
                ],
                [
                  "test_max_iters",
                  "0"
                ],
                [
                  "test_frequency",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_custom_generator",
                "true"
              ],
              [
                "test_max_iters",
                "false"
              ],
              [
                "test_frequency",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": true,
            "detail": [
              [
                "test_custom_generator",
                "true"
              ],
              [
                "test_max_iters",
                "true"
              ],
              [
                "test_frequency",
                "true"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_generator",
                "3"
              ],
              [
                "test_max_iters",
                "2"
              ],
              [
                "test_frequency",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_generator",
                [
                  "data_queue",
                  "producer",
                  "counter",
                  "lst"
                ]
              ],
              [
                "test_max_iters",
                [
                  "sample_hz",
                  "data_queue",
                  "maxiters",
                  "data_n",
                  "runtime",
                  "producer",
                  "tolerance",
                  "expected_n"
                ]
              ],
              [
                "test_frequency",
                [
                  "sample_hz",
                  "data_queue",
                  "data_n",
                  "runtime",
                  "producer",
                  "tolerance",
                  "expected_n"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_custom_generator",
                []
              ],
              [
                "test_max_iters",
                []
              ],
              [
                "test_frequency",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7468095506926694,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_frequency",
                  "test_custom_generator",
                  0.6429128315037196
                ],
                [
                  "test_custom_generator",
                  "test_max_iters",
                  0.7173139708113532
                ],
                [
                  "test_frequency",
                  "test_max_iters",
                  0.8802018497629351
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_custom_generator",
                "true"
              ],
              [
                "test_max_iters",
                "true"
              ],
              [
                "test_frequency",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_protocols_\u0026_dsi_\u0026_test_dsi.py",
    "testCases": [
      {
        "name": "TestDsi",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_event_packet",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_event_sensor_map",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_eeg_packet",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_header",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_none_packet",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_event_packet",
                  "[]"
                ],
                [
                  "test_event_sensor_map",
                  "[]"
                ],
                [
                  "test_eeg_packet",
                  "[]"
                ],
                [
                  "test_header",
                  "[]"
                ],
                [
                  "test_none_packet",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_event_packet",
                  "true"
                ],
                [
                  "test_event_sensor_map",
                  "false"
                ],
                [
                  "test_eeg_packet",
                  "true"
                ],
                [
                  "test_header",
                  "true"
                ],
                [
                  "test_none_packet",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_event_packet",
                  "false"
                ],
                [
                  "test_event_sensor_map",
                  "false"
                ],
                [
                  "test_eeg_packet",
                  "false"
                ],
                [
                  "test_header",
                  "false"
                ],
                [
                  "test_none_packet",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_event_packet",
                  "false"
                ],
                [
                  "test_event_sensor_map",
                  "false"
                ],
                [
                  "test_eeg_packet",
                  "false"
                ],
                [
                  "test_header",
                  "false"
                ],
                [
                  "test_none_packet",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_event_packet",
                  "false"
                ],
                [
                  "test_event_sensor_map",
                  "false"
                ],
                [
                  "test_eeg_packet",
                  "false"
                ],
                [
                  "test_header",
                  "false"
                ],
                [
                  "test_none_packet",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                "false"
              ],
              [
                "test_event_sensor_map",
                "false"
              ],
              [
                "test_eeg_packet",
                "false"
              ],
              [
                "test_header",
                "false"
              ],
              [
                "test_none_packet",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                "false"
              ],
              [
                "test_event_sensor_map",
                "false"
              ],
              [
                "test_eeg_packet",
                "false"
              ],
              [
                "test_header",
                "false"
              ],
              [
                "test_none_packet",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                []
              ],
              [
                "test_event_sensor_map",
                []
              ],
              [
                "test_eeg_packet",
                []
              ],
              [
                "test_header",
                []
              ],
              [
                "test_none_packet",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                "false"
              ],
              [
                "test_event_sensor_map",
                "false"
              ],
              [
                "test_eeg_packet",
                "false"
              ],
              [
                "test_header",
                "false"
              ],
              [
                "test_none_packet",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_event_packet",
                "false"
              ],
              [
                "test_event_sensor_map",
                "true"
              ],
              [
                "test_eeg_packet",
                "false"
              ],
              [
                "test_header",
                "false"
              ],
              [
                "test_none_packet",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_event_packet",
                  "0"
                ],
                [
                  "test_event_sensor_map",
                  "0"
                ],
                [
                  "test_eeg_packet",
                  "0"
                ],
                [
                  "test_header",
                  "0"
                ],
                [
                  "test_none_packet",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_event_packet",
                  "0"
                ],
                [
                  "test_event_sensor_map",
                  "0"
                ],
                [
                  "test_eeg_packet",
                  "0"
                ],
                [
                  "test_header",
                  "0"
                ],
                [
                  "test_none_packet",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                "false"
              ],
              [
                "test_event_sensor_map",
                "false"
              ],
              [
                "test_eeg_packet",
                "false"
              ],
              [
                "test_header",
                "false"
              ],
              [
                "test_none_packet",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                "false"
              ],
              [
                "test_event_sensor_map",
                "false"
              ],
              [
                "test_eeg_packet",
                "false"
              ],
              [
                "test_header",
                "false"
              ],
              [
                "test_none_packet",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                "2"
              ],
              [
                "test_event_sensor_map",
                "2"
              ],
              [
                "test_eeg_packet",
                "4"
              ],
              [
                "test_header",
                "2"
              ],
              [
                "test_none_packet",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_event_packet",
                [
                  "result",
                  "expected",
                  "parsed",
                  "params"
                ]
              ],
              [
                "test_event_sensor_map",
                [
                  "result",
                  "channels",
                  "expected",
                  "channel_names",
                  "msg_len_bytes",
                  "parsed",
                  "msg_bytes",
                  "event_code_bytes",
                  "params",
                  "payload_length",
                  "sending_node_bytes"
                ]
              ],
              [
                "test_eeg_packet",
                [
                  "result",
                  "expected",
                  "parsed",
                  "params"
                ]
              ],
              [
                "test_header",
                [
                  "result",
                  "expected",
                  "parsed",
                  "params"
                ]
              ],
              [
                "test_none_packet",
                [
                  "result",
                  "expected",
                  "parsed",
                  "params"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                []
              ],
              [
                "test_event_sensor_map",
                []
              ],
              [
                "test_eeg_packet",
                []
              ],
              [
                "test_header",
                []
              ],
              [
                "test_none_packet",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5614250902868856,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_header",
                  "test_none_packet",
                  0.7898244146425604
                ],
                [
                  "test_header",
                  "test_event_packet",
                  0.798187172349169
                ],
                [
                  "test_none_packet",
                  "test_event_packet",
                  0.8899126597282128
                ],
                [
                  "test_event_packet",
                  "test_eeg_packet",
                  0.612049219511182
                ],
                [
                  "test_event_packet",
                  "test_event_sensor_map",
                  0.4382025860360911
                ],
                [
                  "test_none_packet",
                  "test_eeg_packet",
                  0.4974937185533099
                ],
                [
                  "test_header",
                  "test_event_sensor_map",
                  0.31217433209061873
                ],
                [
                  "test_header",
                  "test_eeg_packet",
                  0.5491251783869152
                ],
                [
                  "test_none_packet",
                  "test_event_sensor_map",
                  0.28097790393726757
                ],
                [
                  "test_event_sensor_map",
                  "test_eeg_packet",
                  0.44630371763352955
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_event_packet",
                "false"
              ],
              [
                "test_event_sensor_map",
                "false"
              ],
              [
                "test_eeg_packet",
                "false"
              ],
              [
                "test_header",
                "false"
              ],
              [
                "test_none_packet",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "bcipy_\u0026_feedback_\u0026_tests_\u0026_visual_\u0026_test_visual_feedback.py",
    "testCases": [
      {
        "name": "TestVisualFeedback",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_feedback_administer_image",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_feedback_administer_text",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_feedback_assertion_text",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_feedback_type",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_feedback_assertion_images",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_feedback_administer_image",
                  "[]"
                ],
                [
                  "test_feedback_administer_text",
                  "[]"
                ],
                [
                  "test_feedback_assertion_text",
                  "[]"
                ],
                [
                  "test_feedback_type",
                  "[]"
                ],
                [
                  "test_feedback_assertion_images",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_feedback_administer_image",
                  "false"
                ],
                [
                  "test_feedback_administer_text",
                  "false"
                ],
                [
                  "test_feedback_assertion_text",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ],
                [
                  "test_feedback_assertion_images",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_feedback_administer_image",
                  "false"
                ],
                [
                  "test_feedback_administer_text",
                  "false"
                ],
                [
                  "test_feedback_assertion_text",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ],
                [
                  "test_feedback_assertion_images",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_feedback_administer_image",
                  "false"
                ],
                [
                  "test_feedback_administer_text",
                  "false"
                ],
                [
                  "test_feedback_assertion_text",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ],
                [
                  "test_feedback_assertion_images",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_feedback_administer_image",
                  "false"
                ],
                [
                  "test_feedback_administer_text",
                  "false"
                ],
                [
                  "test_feedback_assertion_text",
                  "false"
                ],
                [
                  "test_feedback_type",
                  "false"
                ],
                [
                  "test_feedback_assertion_images",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "false"
              ],
              [
                "test_feedback_administer_text",
                "false"
              ],
              [
                "test_feedback_assertion_text",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ],
              [
                "test_feedback_assertion_images",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "false"
              ],
              [
                "test_feedback_administer_text",
                "false"
              ],
              [
                "test_feedback_assertion_text",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ],
              [
                "test_feedback_assertion_images",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_feedback_administer_image",
                [
                  "self.clock",
                  "self.text_mock",
                  "self.display",
                  "self.parameters",
                  "self.parameters_used",
                  "self.image_mock",
                  "self.rect_mock"
                ]
              ],
              [
                "test_feedback_administer_text",
                [
                  "self.clock",
                  "self.text_mock",
                  "self.display",
                  "self.parameters",
                  "self.parameters_used",
                  "self.image_mock",
                  "self.rect_mock"
                ]
              ],
              [
                "test_feedback_assertion_text",
                [
                  "self.clock",
                  "self.text_mock",
                  "self.display",
                  "self.parameters",
                  "self.parameters_used",
                  "self.image_mock",
                  "self.rect_mock"
                ]
              ],
              [
                "test_feedback_type",
                [
                  "self.clock",
                  "self.text_mock",
                  "self.display",
                  "self.parameters",
                  "self.parameters_used",
                  "self.image_mock",
                  "self.rect_mock"
                ]
              ],
              [
                "test_feedback_assertion_images",
                [
                  "self.clock",
                  "self.text_mock",
                  "self.display",
                  "self.parameters",
                  "self.parameters_used",
                  "self.image_mock",
                  "self.rect_mock"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "false"
              ],
              [
                "test_feedback_administer_text",
                "false"
              ],
              [
                "test_feedback_assertion_text",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ],
              [
                "test_feedback_assertion_images",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "false"
              ],
              [
                "test_feedback_administer_text",
                "false"
              ],
              [
                "test_feedback_assertion_text",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ],
              [
                "test_feedback_assertion_images",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_feedback_administer_image",
                  "0"
                ],
                [
                  "test_feedback_administer_text",
                  "0"
                ],
                [
                  "test_feedback_assertion_text",
                  "0"
                ],
                [
                  "test_feedback_type",
                  "0"
                ],
                [
                  "test_feedback_assertion_images",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_feedback_administer_image",
                  "0"
                ],
                [
                  "test_feedback_administer_text",
                  "0"
                ],
                [
                  "test_feedback_assertion_text",
                  "0"
                ],
                [
                  "test_feedback_type",
                  "0"
                ],
                [
                  "test_feedback_assertion_images",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "false"
              ],
              [
                "test_feedback_administer_text",
                "false"
              ],
              [
                "test_feedback_assertion_text",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ],
              [
                "test_feedback_assertion_images",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "false"
              ],
              [
                "test_feedback_administer_text",
                "false"
              ],
              [
                "test_feedback_assertion_text",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ],
              [
                "test_feedback_assertion_images",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "1"
              ],
              [
                "test_feedback_administer_text",
                "1"
              ],
              [
                "test_feedback_assertion_text",
                "1"
              ],
              [
                "test_feedback_type",
                "1"
              ],
              [
                "test_feedback_assertion_images",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                [
                  "resp",
                  "test_stimulus"
                ]
              ],
              [
                "test_feedback_administer_text",
                [
                  "resp",
                  "test_stimulus"
                ]
              ],
              [
                "test_feedback_assertion_text",
                [
                  "resp",
                  "stimulus",
                  "assertion"
                ]
              ],
              [
                "test_feedback_type",
                [
                  "feedback_type"
                ]
              ],
              [
                "test_feedback_assertion_images",
                [
                  "resp",
                  "assertion",
                  "test_stimulus"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                [
                  "self.visual_feedback"
                ]
              ],
              [
                "test_feedback_administer_text",
                [
                  "self.visual_feedback"
                ]
              ],
              [
                "test_feedback_assertion_text",
                [
                  "self.visual_feedback"
                ]
              ],
              [
                "test_feedback_type",
                [
                  "self.visual_feedback"
                ]
              ],
              [
                "test_feedback_assertion_images",
                [
                  "self.visual_feedback"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6198216786539217,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_feedback_type",
                  "test_feedback_assertion_images",
                  0.3761920624312231
                ],
                [
                  "test_feedback_administer_text",
                  "test_feedback_assertion_text",
                  0.7236759610155116
                ],
                [
                  "test_feedback_administer_text",
                  "test_feedback_administer_image",
                  0.8965517241379312
                ],
                [
                  "test_feedback_assertion_text",
                  "test_feedback_administer_image",
                  0.6164647075317321
                ],
                [
                  "test_feedback_type",
                  "test_feedback_assertion_text",
                  0.43047301604613925
                ],
                [
                  "test_feedback_type",
                  "test_feedback_administer_text",
                  0.46861575512653547
                ],
                [
                  "test_feedback_type",
                  "test_feedback_administer_image",
                  0.426014322842305
                ],
                [
                  "test_feedback_administer_text",
                  "test_feedback_assertion_images",
                  0.7197274920657465
                ],
                [
                  "test_feedback_assertion_text",
                  "test_feedback_assertion_images",
                  0.7100469468046932
                ],
                [
                  "test_feedback_administer_image",
                  "test_feedback_assertion_images",
                  0.8304547985373998
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_feedback_administer_image",
                "false"
              ],
              [
                "test_feedback_administer_text",
                "false"
              ],
              [
                "test_feedback_assertion_text",
                "false"
              ],
              [
                "test_feedback_type",
                "false"
              ],
              [
                "test_feedback_assertion_images",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_datastream_\u0026_test_generator.py",
    "testCases": [
      {
        "name": "TestGenerator",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_random_generator",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_file_with_custom_encoder",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_file_generator_end",
                  "[]"
                ],
                [
                  "test_random_high_low_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_random_with_custom_encoder",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_file_generator",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_random_generator",
                  "[]"
                ],
                [
                  "test_file_with_custom_encoder",
                  "[]"
                ],
                [
                  "test_file_generator_end",
                  "[]"
                ],
                [
                  "test_random_high_low_values",
                  "[]"
                ],
                [
                  "test_random_with_custom_encoder",
                  "[]"
                ],
                [
                  "test_file_generator",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_random_generator",
                  "false"
                ],
                [
                  "test_file_with_custom_encoder",
                  "true"
                ],
                [
                  "test_file_generator_end",
                  "true"
                ],
                [
                  "test_random_high_low_values",
                  "true"
                ],
                [
                  "test_random_with_custom_encoder",
                  "true"
                ],
                [
                  "test_file_generator",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_random_generator",
                  "true"
                ],
                [
                  "test_file_with_custom_encoder",
                  "true"
                ],
                [
                  "test_file_generator_end",
                  "false"
                ],
                [
                  "test_random_high_low_values",
                  "true"
                ],
                [
                  "test_random_with_custom_encoder",
                  "true"
                ],
                [
                  "test_file_generator",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_random_generator",
                  "false"
                ],
                [
                  "test_file_with_custom_encoder",
                  "false"
                ],
                [
                  "test_file_generator_end",
                  "false"
                ],
                [
                  "test_random_high_low_values",
                  "false"
                ],
                [
                  "test_random_with_custom_encoder",
                  "false"
                ],
                [
                  "test_file_generator",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_random_generator",
                  "false"
                ],
                [
                  "test_file_with_custom_encoder",
                  "false"
                ],
                [
                  "test_file_generator_end",
                  "false"
                ],
                [
                  "test_random_high_low_values",
                  "false"
                ],
                [
                  "test_random_with_custom_encoder",
                  "false"
                ],
                [
                  "test_file_generator",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                "false"
              ],
              [
                "test_file_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator_end",
                "false"
              ],
              [
                "test_random_high_low_values",
                "false"
              ],
              [
                "test_random_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                "false"
              ],
              [
                "test_file_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator_end",
                "false"
              ],
              [
                "test_random_high_low_values",
                "false"
              ],
              [
                "test_random_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                []
              ],
              [
                "test_file_with_custom_encoder",
                []
              ],
              [
                "test_file_generator_end",
                []
              ],
              [
                "test_random_high_low_values",
                []
              ],
              [
                "test_random_with_custom_encoder",
                []
              ],
              [
                "test_file_generator",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                "false"
              ],
              [
                "test_file_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator_end",
                "false"
              ],
              [
                "test_random_high_low_values",
                "false"
              ],
              [
                "test_random_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_random_generator",
                "true"
              ],
              [
                "test_file_with_custom_encoder",
                "true"
              ],
              [
                "test_file_generator_end",
                "false"
              ],
              [
                "test_random_high_low_values",
                "true"
              ],
              [
                "test_random_with_custom_encoder",
                "true"
              ],
              [
                "test_file_generator",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_random_generator",
                  "0"
                ],
                [
                  "test_file_with_custom_encoder",
                  "0"
                ],
                [
                  "test_file_generator_end",
                  "0"
                ],
                [
                  "test_random_high_low_values",
                  "0"
                ],
                [
                  "test_random_with_custom_encoder",
                  "0"
                ],
                [
                  "test_file_generator",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_random_generator",
                  "0"
                ],
                [
                  "test_file_with_custom_encoder",
                  "0"
                ],
                [
                  "test_file_generator_end",
                  "0"
                ],
                [
                  "test_random_high_low_values",
                  "0"
                ],
                [
                  "test_random_with_custom_encoder",
                  "0"
                ],
                [
                  "test_file_generator",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                "false"
              ],
              [
                "test_file_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator_end",
                "false"
              ],
              [
                "test_random_high_low_values",
                "false"
              ],
              [
                "test_random_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                "false"
              ],
              [
                "test_file_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator_end",
                "false"
              ],
              [
                "test_random_high_low_values",
                "false"
              ],
              [
                "test_random_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_random_generator",
                "1"
              ],
              [
                "test_file_with_custom_encoder",
                "3"
              ],
              [
                "test_file_generator_end",
                "0"
              ],
              [
                "test_random_high_low_values",
                "3"
              ],
              [
                "test_random_with_custom_encoder",
                "4"
              ],
              [
                "test_file_generator",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                [
                  "gen",
                  "data"
                ]
              ],
              [
                "test_file_with_custom_encoder",
                [
                  "gen",
                  "generated_data",
                  "data",
                  "test_data",
                  "header",
                  "rows",
                  "col_count",
                  "row_count"
                ]
              ],
              [
                "test_file_generator_end",
                [
                  "gen",
                  "data",
                  "test_data",
                  "header",
                  "rows",
                  "row_count"
                ]
              ],
              [
                "test_random_high_low_values",
                [
                  "gen",
                  "high",
                  "channel_count",
                  "data",
                  "low"
                ]
              ],
              [
                "test_random_with_custom_encoder",
                [
                  "gen",
                  "channel_count",
                  "data"
                ]
              ],
              [
                "test_file_generator",
                [
                  "gen",
                  "generated_data",
                  "data",
                  "test_data",
                  "header",
                  "rows",
                  "row_count"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_random_generator",
                []
              ],
              [
                "test_file_with_custom_encoder",
                []
              ],
              [
                "test_file_generator_end",
                []
              ],
              [
                "test_random_high_low_values",
                []
              ],
              [
                "test_random_with_custom_encoder",
                []
              ],
              [
                "test_file_generator",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6458026351158984,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_random_generator",
                  "test_file_generator_end",
                  0.475222812927585
                ],
                [
                  "test_random_high_low_values",
                  "test_file_generator_end",
                  0.4958233832103217
                ],
                [
                  "test_random_with_custom_encoder",
                  "test_file_generator_end",
                  0.4643035933050016
                ],
                [
                  "test_random_high_low_values",
                  "test_file_with_custom_encoder",
                  0.6839471280765737
                ],
                [
                  "test_random_with_custom_encoder",
                  "test_file_generator",
                  0.5064746025881809
                ],
                [
                  "test_random_generator",
                  "test_random_high_low_values",
                  0.7022866378759676
                ],
                [
                  "test_random_high_low_values",
                  "test_file_generator",
                  0.5494422557947561
                ],
                [
                  "test_file_generator",
                  "test_file_generator_end",
                  0.8744548483726593
                ],
                [
                  "test_random_with_custom_encoder",
                  "test_file_with_custom_encoder",
                  0.7333171389295796
                ],
                [
                  "test_random_high_low_values",
                  "test_random_with_custom_encoder",
                  0.7955991973673916
                ],
                [
                  "test_random_generator",
                  "test_file_generator",
                  0.5495666625111234
                ],
                [
                  "test_file_generator_end",
                  "test_file_with_custom_encoder",
                  0.7562687657461239
                ],
                [
                  "test_random_generator",
                  "test_file_with_custom_encoder",
                  0.5870375378313375
                ],
                [
                  "test_file_generator",
                  "test_file_with_custom_encoder",
                  0.8182870926938663
                ],
                [
                  "test_random_generator",
                  "test_random_with_custom_encoder",
                  0.6950078695080077
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_random_generator",
                "false"
              ],
              [
                "test_file_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator_end",
                "false"
              ],
              [
                "test_random_high_low_values",
                "true"
              ],
              [
                "test_random_with_custom_encoder",
                "false"
              ],
              [
                "test_file_generator",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_protocols_\u0026_dsi_\u0026_test_dsi_device.py",
    "testCases": [
      {
        "name": "TestDsiDevice",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_read_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_mismatched_frequency",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mismatched_channels",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_update_params_on_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_read_data",
                  "[]"
                ],
                [
                  "test_mismatched_frequency",
                  "[]"
                ],
                [
                  "test_mismatched_channels",
                  "[]"
                ],
                [
                  "test_update_params_on_init",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_read_data",
                  "true"
                ],
                [
                  "test_mismatched_frequency",
                  "false"
                ],
                [
                  "test_mismatched_channels",
                  "false"
                ],
                [
                  "test_update_params_on_init",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_mismatched_frequency",
                  "false"
                ],
                [
                  "test_mismatched_channels",
                  "false"
                ],
                [
                  "test_update_params_on_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": true
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_mismatched_frequency",
                  "false"
                ],
                [
                  "test_mismatched_channels",
                  "false"
                ],
                [
                  "test_update_params_on_init",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_mismatched_frequency",
                  "false"
                ],
                [
                  "test_mismatched_channels",
                  "false"
                ],
                [
                  "test_update_params_on_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_data",
                "false"
              ],
              [
                "test_mismatched_frequency",
                "false"
              ],
              [
                "test_mismatched_channels",
                "false"
              ],
              [
                "test_update_params_on_init",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_read_data",
                "false"
              ],
              [
                "test_mismatched_frequency",
                "false"
              ],
              [
                "test_mismatched_channels",
                "false"
              ],
              [
                "test_update_params_on_init",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_read_data",
                [
                  "self.port",
                  "self.server"
                ]
              ],
              [
                "test_mismatched_frequency",
                [
                  "self.port",
                  "self.server"
                ]
              ],
              [
                "test_mismatched_channels",
                [
                  "self.port",
                  "self.server"
                ]
              ],
              [
                "test_update_params_on_init",
                [
                  "self.port",
                  "self.server"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_data",
                "false"
              ],
              [
                "test_mismatched_frequency",
                "false"
              ],
              [
                "test_mismatched_channels",
                "false"
              ],
              [
                "test_update_params_on_init",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_read_data",
                "false"
              ],
              [
                "test_mismatched_frequency",
                "true"
              ],
              [
                "test_mismatched_channels",
                "true"
              ],
              [
                "test_update_params_on_init",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_mismatched_frequency",
                  "0"
                ],
                [
                  "test_mismatched_channels",
                  "0"
                ],
                [
                  "test_update_params_on_init",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_mismatched_frequency",
                  "0"
                ],
                [
                  "test_mismatched_channels",
                  "0"
                ],
                [
                  "test_update_params_on_init",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_read_data",
                "true"
              ],
              [
                "test_mismatched_frequency",
                "true"
              ],
              [
                "test_mismatched_channels",
                "true"
              ],
              [
                "test_update_params_on_init",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_data",
                "false"
              ],
              [
                "test_mismatched_frequency",
                "false"
              ],
              [
                "test_mismatched_channels",
                "false"
              ],
              [
                "test_update_params_on_init",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_read_data",
                "3"
              ],
              [
                "test_mismatched_frequency",
                "1"
              ],
              [
                "test_mismatched_channels",
                "1"
              ],
              [
                "test_update_params_on_init",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_read_data",
                [
                  "data",
                  "device"
                ]
              ],
              [
                "test_mismatched_frequency",
                [
                  "device"
                ]
              ],
              [
                "test_mismatched_channels",
                [
                  "device"
                ]
              ],
              [
                "test_update_params_on_init",
                [
                  "device"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_read_data",
                []
              ],
              [
                "test_mismatched_frequency",
                []
              ],
              [
                "test_mismatched_channels",
                []
              ],
              [
                "test_update_params_on_init",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5790695044567697,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_mismatched_channels",
                  "test_update_params_on_init",
                  0.4916660830178167
                ],
                [
                  "test_mismatched_channels",
                  "test_mismatched_frequency",
                  0.8846153846153847
                ],
                [
                  "test_mismatched_channels",
                  "test_read_data",
                  0.5283524652572602
                ],
                [
                  "test_mismatched_frequency",
                  "test_read_data",
                  0.5459642140991688
                ],
                [
                  "test_update_params_on_init",
                  "test_read_data",
                  0.5195459740916885
                ],
                [
                  "test_mismatched_frequency",
                  "test_update_params_on_init",
                  0.5042729056592993
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_read_data",
                "true"
              ],
              [
                "test_mismatched_frequency",
                "false"
              ],
              [
                "test_mismatched_channels",
                "false"
              ],
              [
                "test_update_params_on_init",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_protocols_\u0026_lsl_\u0026_test_lsl_device.py",
    "testCases": [
      {
        "name": "TestLslWithoutMetadata",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_connect",
                  "[]"
                ],
                [
                  "test_read_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_incorrect_frequency",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_frequency_init",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_connect",
                  "[]"
                ],
                [
                  "test_read_data",
                  "[]"
                ],
                [
                  "test_incorrect_frequency",
                  "[]"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "[]"
                ],
                [
                  "test_frequency_init",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_read_data",
                  "true"
                ],
                [
                  "test_incorrect_frequency",
                  "false"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "false"
                ],
                [
                  "test_frequency_init",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_incorrect_frequency",
                  "false"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "false"
                ],
                [
                  "test_frequency_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_incorrect_frequency",
                  "false"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "false"
                ],
                [
                  "test_frequency_init",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ],
                [
                  "test_incorrect_frequency",
                  "false"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "false"
                ],
                [
                  "test_frequency_init",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_incorrect_frequency",
                "false"
              ],
              [
                "test_incorrect_number_of_channels",
                "false"
              ],
              [
                "test_frequency_init",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_incorrect_frequency",
                "false"
              ],
              [
                "test_incorrect_number_of_channels",
                "false"
              ],
              [
                "test_frequency_init",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                []
              ],
              [
                "test_read_data",
                []
              ],
              [
                "test_incorrect_frequency",
                []
              ],
              [
                "test_incorrect_number_of_channels",
                []
              ],
              [
                "test_frequency_init",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_incorrect_frequency",
                "false"
              ],
              [
                "test_incorrect_number_of_channels",
                "false"
              ],
              [
                "test_frequency_init",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_connect",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_incorrect_frequency",
                "true"
              ],
              [
                "test_incorrect_number_of_channels",
                "true"
              ],
              [
                "test_frequency_init",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_connect",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_incorrect_frequency",
                  "0"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "0"
                ],
                [
                  "test_frequency_init",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_connect",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ],
                [
                  "test_incorrect_frequency",
                  "0"
                ],
                [
                  "test_incorrect_number_of_channels",
                  "0"
                ],
                [
                  "test_frequency_init",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_incorrect_frequency",
                "false"
              ],
              [
                "test_incorrect_number_of_channels",
                "false"
              ],
              [
                "test_frequency_init",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ],
              [
                "test_incorrect_frequency",
                "false"
              ],
              [
                "test_incorrect_number_of_channels",
                "false"
              ],
              [
                "test_frequency_init",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_connect",
                "0"
              ],
              [
                "test_read_data",
                "3"
              ],
              [
                "test_incorrect_frequency",
                "1"
              ],
              [
                "test_incorrect_number_of_channels",
                "2"
              ],
              [
                "test_frequency_init",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                [
                  "device"
                ]
              ],
              [
                "test_read_data",
                [
                  "data",
                  "device"
                ]
              ],
              [
                "test_incorrect_frequency",
                [
                  "device"
                ]
              ],
              [
                "test_incorrect_number_of_channels",
                [
                  "device"
                ]
              ],
              [
                "test_frequency_init",
                [
                  "device"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_connect",
                []
              ],
              [
                "test_read_data",
                []
              ],
              [
                "test_incorrect_frequency",
                []
              ],
              [
                "test_incorrect_number_of_channels",
                []
              ],
              [
                "test_frequency_init",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4760137856269491,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_frequency_init",
                  "test_connect",
                  0.48019603839902475
                ],
                [
                  "test_incorrect_number_of_channels",
                  "test_connect",
                  0.4535573676110727
                ],
                [
                  "test_incorrect_frequency",
                  "test_read_data",
                  0.4964928255427974
                ],
                [
                  "test_incorrect_number_of_channels",
                  "test_incorrect_frequency",
                  0.5385204638677067
                ],
                [
                  "test_incorrect_frequency",
                  "test_connect",
                  0.5589565568382149
                ],
                [
                  "test_incorrect_number_of_channels",
                  "test_read_data",
                  0.44666250028691856
                ],
                [
                  "test_incorrect_number_of_channels",
                  "test_frequency_init",
                  0.38892223413129856
                ],
                [
                  "test_incorrect_frequency",
                  "test_frequency_init",
                  0.5074954869911409
                ],
                [
                  "test_frequency_init",
                  "test_read_data",
                  0.49541508402214945
                ],
                [
                  "test_connect",
                  "test_read_data",
                  0.39391929857916763
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_connect",
                "false"
              ],
              [
                "test_read_data",
                "true"
              ],
              [
                "test_incorrect_frequency",
                "false"
              ],
              [
                "test_incorrect_number_of_channels",
                "false"
              ],
              [
                "test_frequency_init",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestLslWithMetadata",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_frequency_init",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_channel_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_connect",
                  "[]"
                ],
                [
                  "test_mismatched_channel_names",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_read_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_frequency_init",
                  "[]"
                ],
                [
                  "test_channel_init",
                  "[]"
                ],
                [
                  "test_connect",
                  "[]"
                ],
                [
                  "test_mismatched_channel_names",
                  "[]"
                ],
                [
                  "test_read_data",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_frequency_init",
                  "false"
                ],
                [
                  "test_channel_init",
                  "false"
                ],
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_mismatched_channel_names",
                  "false"
                ],
                [
                  "test_read_data",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_frequency_init",
                  "false"
                ],
                [
                  "test_channel_init",
                  "false"
                ],
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_mismatched_channel_names",
                  "true"
                ],
                [
                  "test_read_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_frequency_init",
                  "false"
                ],
                [
                  "test_channel_init",
                  "false"
                ],
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_mismatched_channel_names",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_frequency_init",
                  "false"
                ],
                [
                  "test_channel_init",
                  "false"
                ],
                [
                  "test_connect",
                  "false"
                ],
                [
                  "test_mismatched_channel_names",
                  "false"
                ],
                [
                  "test_read_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                "false"
              ],
              [
                "test_channel_init",
                "false"
              ],
              [
                "test_connect",
                "false"
              ],
              [
                "test_mismatched_channel_names",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                "false"
              ],
              [
                "test_channel_init",
                "false"
              ],
              [
                "test_connect",
                "false"
              ],
              [
                "test_mismatched_channel_names",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                []
              ],
              [
                "test_channel_init",
                []
              ],
              [
                "test_connect",
                []
              ],
              [
                "test_mismatched_channel_names",
                []
              ],
              [
                "test_read_data",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                "false"
              ],
              [
                "test_channel_init",
                "false"
              ],
              [
                "test_connect",
                "false"
              ],
              [
                "test_mismatched_channel_names",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_frequency_init",
                "false"
              ],
              [
                "test_channel_init",
                "true"
              ],
              [
                "test_connect",
                "false"
              ],
              [
                "test_mismatched_channel_names",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_frequency_init",
                  "0"
                ],
                [
                  "test_channel_init",
                  "0"
                ],
                [
                  "test_connect",
                  "0"
                ],
                [
                  "test_mismatched_channel_names",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_frequency_init",
                  "0"
                ],
                [
                  "test_channel_init",
                  "0"
                ],
                [
                  "test_connect",
                  "0"
                ],
                [
                  "test_mismatched_channel_names",
                  "0"
                ],
                [
                  "test_read_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                "false"
              ],
              [
                "test_channel_init",
                "false"
              ],
              [
                "test_connect",
                "false"
              ],
              [
                "test_mismatched_channel_names",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                "false"
              ],
              [
                "test_channel_init",
                "false"
              ],
              [
                "test_connect",
                "false"
              ],
              [
                "test_mismatched_channel_names",
                "false"
              ],
              [
                "test_read_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_frequency_init",
                "1"
              ],
              [
                "test_channel_init",
                "3"
              ],
              [
                "test_connect",
                "0"
              ],
              [
                "test_mismatched_channel_names",
                "1"
              ],
              [
                "test_read_data",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                [
                  "device"
                ]
              ],
              [
                "test_channel_init",
                [
                  "device"
                ]
              ],
              [
                "test_connect",
                [
                  "device"
                ]
              ],
              [
                "test_mismatched_channel_names",
                [
                  "channels",
                  "device"
                ]
              ],
              [
                "test_read_data",
                [
                  "data",
                  "device"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_frequency_init",
                []
              ],
              [
                "test_channel_init",
                []
              ],
              [
                "test_connect",
                []
              ],
              [
                "test_mismatched_channel_names",
                []
              ],
              [
                "test_read_data",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4932847419523213,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_mismatched_channel_names",
                  "test_connect",
                  0.4760952285695233
                ],
                [
                  "test_mismatched_channel_names",
                  "test_read_data",
                  0.4954403570783588
                ],
                [
                  "test_channel_init",
                  "test_connect",
                  0.4129483209670112
                ],
                [
                  "test_frequency_init",
                  "test_read_data",
                  0.4472135954999579
                ],
                [
                  "test_mismatched_channel_names",
                  "test_frequency_init",
                  0.43461349368017654
                ],
                [
                  "test_channel_init",
                  "test_frequency_init",
                  0.6073381670229584
                ],
                [
                  "test_connect",
                  "test_read_data",
                  0.40824829046386296
                ],
                [
                  "test_frequency_init",
                  "test_connect",
                  0.511207720338155
                ],
                [
                  "test_mismatched_channel_names",
                  "test_channel_init",
                  0.562180995427831
                ],
                [
                  "test_channel_init",
                  "test_read_data",
                  0.5775612504753779
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_frequency_init",
                "false"
              ],
              [
                "test_channel_init",
                "false"
              ],
              [
                "test_connect",
                "false"
              ],
              [
                "test_mismatched_channel_names",
                "false"
              ],
              [
                "test_read_data",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "bcipy_\u0026_acquisition_\u0026_tests_\u0026_protocols_\u0026_dsi_\u0026_test_dsi_protocol.py",
    "testCases": [
      {
        "name": "TestDsiProtocol",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_protocol_init_messages",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_encoder",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_protocol_init_messages",
                  "[]"
                ],
                [
                  "test_encoder",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_protocol_init_messages",
                  "false"
                ],
                [
                  "test_encoder",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_protocol_init_messages",
                  "false"
                ],
                [
                  "test_encoder",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_protocol_init_messages",
                  "false"
                ],
                [
                  "test_encoder",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_protocol_init_messages",
                  "false"
                ],
                [
                  "test_encoder",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "false"
              ],
              [
                "test_encoder",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "false"
              ],
              [
                "test_encoder",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                []
              ],
              [
                "test_encoder",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "false"
              ],
              [
                "test_encoder",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "false"
              ],
              [
                "test_encoder",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_protocol_init_messages",
                  "0"
                ],
                [
                  "test_encoder",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_protocol_init_messages",
                  "0"
                ],
                [
                  "test_encoder",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "false"
              ],
              [
                "test_encoder",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "false"
              ],
              [
                "test_encoder",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "6"
              ],
              [
                "test_encoder",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                [
                  "protocol",
                  "channel_msg",
                  "parsed1",
                  "parsed2"
                ]
              ],
              [
                "test_encoder",
                [
                  "data",
                  "parsed",
                  "encoder",
                  "encoded"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                []
              ],
              [
                "test_encoder",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4199393100320785,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_protocol_init_messages",
                  "test_encoder",
                  0.4199393100320785
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_protocol_init_messages",
                "false"
              ],
              [
                "test_encoder",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]