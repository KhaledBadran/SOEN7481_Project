[
  {
    "name": "tests_\u0026_custom_\u0026_test_text.py",
    "testCases": [
      {
        "name": "TextCleanerTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__remove_stopwords_not_empty",
                  "[]"
                ],
                [
                  "test__remove_stopwords_empty",
                  "[]"
                ],
                [
                  "test_detect_language_es",
                  "[]"
                ],
                [
                  "test_detect_language_en",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__remove_stopwords_not_empty",
                  "[PyAssertStatement]"
                ],
                [
                  "test__remove_stopwords_empty",
                  "[PyAssertStatement]"
                ],
                [
                  "test_detect_language_es",
                  "[PyAssertStatement]"
                ],
                [
                  "test_detect_language_en",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__remove_stopwords_not_empty",
                  "false"
                ],
                [
                  "test__remove_stopwords_empty",
                  "false"
                ],
                [
                  "test_detect_language_es",
                  "false"
                ],
                [
                  "test_detect_language_en",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__remove_stopwords_not_empty",
                  "false"
                ],
                [
                  "test__remove_stopwords_empty",
                  "false"
                ],
                [
                  "test_detect_language_es",
                  "false"
                ],
                [
                  "test_detect_language_en",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__remove_stopwords_not_empty",
                  "false"
                ],
                [
                  "test__remove_stopwords_empty",
                  "false"
                ],
                [
                  "test_detect_language_es",
                  "false"
                ],
                [
                  "test_detect_language_en",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__remove_stopwords_not_empty",
                  "false"
                ],
                [
                  "test__remove_stopwords_empty",
                  "false"
                ],
                [
                  "test_detect_language_es",
                  "false"
                ],
                [
                  "test_detect_language_en",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "false"
              ],
              [
                "test__remove_stopwords_empty",
                "false"
              ],
              [
                "test_detect_language_es",
                "false"
              ],
              [
                "test_detect_language_en",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "false"
              ],
              [
                "test__remove_stopwords_empty",
                "false"
              ],
              [
                "test_detect_language_es",
                "false"
              ],
              [
                "test_detect_language_en",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                []
              ],
              [
                "test__remove_stopwords_empty",
                []
              ],
              [
                "test_detect_language_es",
                []
              ],
              [
                "test_detect_language_en",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "false"
              ],
              [
                "test__remove_stopwords_empty",
                "false"
              ],
              [
                "test_detect_language_es",
                "false"
              ],
              [
                "test_detect_language_en",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "false"
              ],
              [
                "test__remove_stopwords_empty",
                "false"
              ],
              [
                "test_detect_language_es",
                "false"
              ],
              [
                "test_detect_language_en",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__remove_stopwords_not_empty",
                  "0"
                ],
                [
                  "test__remove_stopwords_empty",
                  "0"
                ],
                [
                  "test_detect_language_es",
                  "0"
                ],
                [
                  "test_detect_language_en",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__remove_stopwords_not_empty",
                  "0"
                ],
                [
                  "test__remove_stopwords_empty",
                  "0"
                ],
                [
                  "test_detect_language_es",
                  "0"
                ],
                [
                  "test_detect_language_en",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "false"
              ],
              [
                "test__remove_stopwords_empty",
                "false"
              ],
              [
                "test_detect_language_es",
                "false"
              ],
              [
                "test_detect_language_en",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "false"
              ],
              [
                "test__remove_stopwords_empty",
                "false"
              ],
              [
                "test_detect_language_es",
                "false"
              ],
              [
                "test_detect_language_en",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "1"
              ],
              [
                "test__remove_stopwords_empty",
                "1"
              ],
              [
                "test_detect_language_es",
                "1"
              ],
              [
                "test_detect_language_en",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                [
                  "returned",
                  "text_cleaner"
                ]
              ],
              [
                "test__remove_stopwords_empty",
                [
                  "returned",
                  "text_cleaner"
                ]
              ],
              [
                "test_detect_language_es",
                [
                  "texts",
                  "language"
                ]
              ],
              [
                "test_detect_language_en",
                [
                  "texts",
                  "language"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                []
              ],
              [
                "test__remove_stopwords_empty",
                []
              ],
              [
                "test_detect_language_es",
                []
              ],
              [
                "test_detect_language_en",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.44883564011566124,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_detect_language_es",
                  "test__remove_stopwords_not_empty",
                  0.3449415373637055
                ],
                [
                  "test_detect_language_en",
                  "test__remove_stopwords_not_empty",
                  0.4000058438095798
                ],
                [
                  "test_detect_language_es",
                  "test__remove_stopwords_empty",
                  0.34143167982105593
                ],
                [
                  "test__remove_stopwords_empty",
                  "test__remove_stopwords_not_empty",
                  0.8231909676227184
                ],
                [
                  "test_detect_language_en",
                  "test_detect_language_es",
                  0.4624148705148566
                ],
                [
                  "test_detect_language_en",
                  "test__remove_stopwords_empty",
                  0.3210289415620512
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__remove_stopwords_not_empty",
                "false"
              ],
              [
                "test__remove_stopwords_empty",
                "false"
              ],
              [
                "test_detect_language_es",
                "false"
              ],
              [
                "test_detect_language_en",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_adapters_\u0026_test_keras.py",
    "testCases": [
      {
        "name": "SequentialTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__setdefault_in_kwargs",
                  "[]"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "[]"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "[]"
                ],
                [
                  "test__setdefault_not_none",
                  "[]"
                ],
                [
                  "test__setdefault_none",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__setdefault_in_kwargs",
                  "[PyAssertStatement]"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "[PyAssertStatement]"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "[PyAssertStatement]"
                ],
                [
                  "test__setdefault_not_none",
                  "[PyAssertStatement]"
                ],
                [
                  "test__setdefault_none",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__setdefault_in_kwargs",
                  "false"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "false"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "false"
                ],
                [
                  "test__setdefault_not_none",
                  "false"
                ],
                [
                  "test__setdefault_none",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__setdefault_in_kwargs",
                  "false"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "false"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "false"
                ],
                [
                  "test__setdefault_not_none",
                  "false"
                ],
                [
                  "test__setdefault_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__setdefault_in_kwargs",
                  "false"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "false"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "false"
                ],
                [
                  "test__setdefault_not_none",
                  "false"
                ],
                [
                  "test__setdefault_none",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__setdefault_in_kwargs",
                  "false"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "false"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "false"
                ],
                [
                  "test__setdefault_not_none",
                  "false"
                ],
                [
                  "test__setdefault_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "false"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "false"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "false"
              ],
              [
                "test__setdefault_not_none",
                "false"
              ],
              [
                "test__setdefault_none",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "false"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "false"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "false"
              ],
              [
                "test__setdefault_not_none",
                "false"
              ],
              [
                "test__setdefault_none",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                []
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                []
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                []
              ],
              [
                "test__setdefault_not_none",
                []
              ],
              [
                "test__setdefault_none",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "false"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "false"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "false"
              ],
              [
                "test__setdefault_not_none",
                "false"
              ],
              [
                "test__setdefault_none",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "false"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "false"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "false"
              ],
              [
                "test__setdefault_not_none",
                "false"
              ],
              [
                "test__setdefault_none",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__setdefault_in_kwargs",
                  "0"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "0"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "0"
                ],
                [
                  "test__setdefault_not_none",
                  "0"
                ],
                [
                  "test__setdefault_none",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__setdefault_in_kwargs",
                  "0"
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "0"
                ],
                [
                  "test__augment_hyperparameters_3d_numpy",
                  "0"
                ],
                [
                  "test__setdefault_not_none",
                  "0"
                ],
                [
                  "test__setdefault_none",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "false"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "false"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "false"
              ],
              [
                "test__setdefault_not_none",
                "false"
              ],
              [
                "test__setdefault_none",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "false"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "false"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "false"
              ],
              [
                "test__setdefault_not_none",
                "false"
              ],
              [
                "test__setdefault_none",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "1"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "1"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "1"
              ],
              [
                "test__setdefault_not_none",
                "1"
              ],
              [
                "test__setdefault_none",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                [
                  "sequential",
                  "kwargs"
                ]
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                [
                  "sequential",
                  "kwargs"
                ]
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                [
                  "sequential",
                  "kwargs",
                  "X"
                ]
              ],
              [
                "test__setdefault_not_none",
                [
                  "sequential",
                  "kwargs"
                ]
              ],
              [
                "test__setdefault_none",
                [
                  "sequential",
                  "kwargs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                []
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                []
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                []
              ],
              [
                "test__setdefault_not_none",
                []
              ],
              [
                "test__setdefault_none",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8820829587250876,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__setdefault_not_none",
                  "test__setdefault_none",
                  0.9543095181401502
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "test__setdefault_not_none",
                  0.9659321802659159
                ],
                [
                  "test__setdefault_in_kwargs",
                  "test__setdefault_not_none",
                  0.9140701479880653
                ],
                [
                  "test__setdefault_in_kwargs",
                  "test__setdefault_none",
                  0.960125110155255
                ],
                [
                  "test__setdefault_none",
                  "test__augment_hyperparameters_3d_numpy",
                  0.8406335473485879
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "test__setdefault_none",
                  0.9264180443384353
                ],
                [
                  "test__setdefault_in_kwargs",
                  "test__setdefault_not_in_hyperparameters",
                  0.9153904243062951
                ],
                [
                  "test__setdefault_in_kwargs",
                  "test__augment_hyperparameters_3d_numpy",
                  0.8433096498707293
                ],
                [
                  "test__setdefault_not_none",
                  "test__augment_hyperparameters_3d_numpy",
                  0.7764129588348152
                ],
                [
                  "test__setdefault_not_in_hyperparameters",
                  "test__augment_hyperparameters_3d_numpy",
                  0.7242280060026263
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__setdefault_in_kwargs",
                "false"
              ],
              [
                "test__setdefault_not_in_hyperparameters",
                "false"
              ],
              [
                "test__augment_hyperparameters_3d_numpy",
                "false"
              ],
              [
                "test__setdefault_not_none",
                "false"
              ],
              [
                "test__setdefault_none",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_adapters_\u0026_test_pandas.py",
    "testCases": [
      {
        "name": "ResampleTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_resample_reset_index_false",
                  "[]"
                ],
                [
                  "test_resample_rule_int",
                  "[]"
                ],
                [
                  "test_resample_on",
                  "[]"
                ],
                [
                  "test_resample_rule_str",
                  "[]"
                ],
                [
                  "test_resample_aggregation_str",
                  "[]"
                ],
                [
                  "test_resample_aggregation_func",
                  "[]"
                ],
                [
                  "test_resample_aggregation_import",
                  "[]"
                ],
                [
                  "test_resample_groupby",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_resample_reset_index_false",
                  "[]"
                ],
                [
                  "test_resample_rule_int",
                  "[]"
                ],
                [
                  "test_resample_on",
                  "[]"
                ],
                [
                  "test_resample_rule_str",
                  "[]"
                ],
                [
                  "test_resample_aggregation_str",
                  "[]"
                ],
                [
                  "test_resample_aggregation_func",
                  "[]"
                ],
                [
                  "test_resample_aggregation_import",
                  "[]"
                ],
                [
                  "test_resample_groupby",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_resample_reset_index_false",
                  "false"
                ],
                [
                  "test_resample_rule_int",
                  "false"
                ],
                [
                  "test_resample_on",
                  "false"
                ],
                [
                  "test_resample_rule_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_func",
                  "false"
                ],
                [
                  "test_resample_aggregation_import",
                  "false"
                ],
                [
                  "test_resample_groupby",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_resample_reset_index_false",
                  "false"
                ],
                [
                  "test_resample_rule_int",
                  "false"
                ],
                [
                  "test_resample_on",
                  "false"
                ],
                [
                  "test_resample_rule_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_func",
                  "false"
                ],
                [
                  "test_resample_aggregation_import",
                  "false"
                ],
                [
                  "test_resample_groupby",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_resample_reset_index_false",
                  "false"
                ],
                [
                  "test_resample_rule_int",
                  "false"
                ],
                [
                  "test_resample_on",
                  "false"
                ],
                [
                  "test_resample_rule_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_func",
                  "false"
                ],
                [
                  "test_resample_aggregation_import",
                  "false"
                ],
                [
                  "test_resample_groupby",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_resample_reset_index_false",
                  "false"
                ],
                [
                  "test_resample_rule_int",
                  "false"
                ],
                [
                  "test_resample_on",
                  "false"
                ],
                [
                  "test_resample_rule_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_str",
                  "false"
                ],
                [
                  "test_resample_aggregation_func",
                  "false"
                ],
                [
                  "test_resample_aggregation_import",
                  "false"
                ],
                [
                  "test_resample_groupby",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "false"
              ],
              [
                "test_resample_rule_int",
                "false"
              ],
              [
                "test_resample_on",
                "false"
              ],
              [
                "test_resample_rule_str",
                "false"
              ],
              [
                "test_resample_aggregation_str",
                "false"
              ],
              [
                "test_resample_aggregation_func",
                "false"
              ],
              [
                "test_resample_aggregation_import",
                "false"
              ],
              [
                "test_resample_groupby",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "false"
              ],
              [
                "test_resample_rule_int",
                "false"
              ],
              [
                "test_resample_on",
                "false"
              ],
              [
                "test_resample_rule_str",
                "false"
              ],
              [
                "test_resample_aggregation_str",
                "false"
              ],
              [
                "test_resample_aggregation_func",
                "false"
              ],
              [
                "test_resample_aggregation_import",
                "false"
              ],
              [
                "test_resample_groupby",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                []
              ],
              [
                "test_resample_rule_int",
                []
              ],
              [
                "test_resample_on",
                []
              ],
              [
                "test_resample_rule_str",
                []
              ],
              [
                "test_resample_aggregation_str",
                []
              ],
              [
                "test_resample_aggregation_func",
                []
              ],
              [
                "test_resample_aggregation_import",
                []
              ],
              [
                "test_resample_groupby",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "false"
              ],
              [
                "test_resample_rule_int",
                "false"
              ],
              [
                "test_resample_on",
                "false"
              ],
              [
                "test_resample_rule_str",
                "false"
              ],
              [
                "test_resample_aggregation_str",
                "false"
              ],
              [
                "test_resample_aggregation_func",
                "false"
              ],
              [
                "test_resample_aggregation_import",
                "false"
              ],
              [
                "test_resample_groupby",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "false"
              ],
              [
                "test_resample_rule_int",
                "false"
              ],
              [
                "test_resample_on",
                "false"
              ],
              [
                "test_resample_rule_str",
                "false"
              ],
              [
                "test_resample_aggregation_str",
                "false"
              ],
              [
                "test_resample_aggregation_func",
                "false"
              ],
              [
                "test_resample_aggregation_import",
                "false"
              ],
              [
                "test_resample_groupby",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_resample_reset_index_false",
                  "0"
                ],
                [
                  "test_resample_rule_int",
                  "0"
                ],
                [
                  "test_resample_on",
                  "0"
                ],
                [
                  "test_resample_rule_str",
                  "0"
                ],
                [
                  "test_resample_aggregation_str",
                  "0"
                ],
                [
                  "test_resample_aggregation_func",
                  "0"
                ],
                [
                  "test_resample_aggregation_import",
                  "0"
                ],
                [
                  "test_resample_groupby",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_resample_reset_index_false",
                  "0"
                ],
                [
                  "test_resample_rule_int",
                  "0"
                ],
                [
                  "test_resample_on",
                  "0"
                ],
                [
                  "test_resample_rule_str",
                  "0"
                ],
                [
                  "test_resample_aggregation_str",
                  "0"
                ],
                [
                  "test_resample_aggregation_func",
                  "0"
                ],
                [
                  "test_resample_aggregation_import",
                  "0"
                ],
                [
                  "test_resample_groupby",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "false"
              ],
              [
                "test_resample_rule_int",
                "false"
              ],
              [
                "test_resample_on",
                "false"
              ],
              [
                "test_resample_rule_str",
                "false"
              ],
              [
                "test_resample_aggregation_str",
                "false"
              ],
              [
                "test_resample_aggregation_func",
                "false"
              ],
              [
                "test_resample_aggregation_import",
                "false"
              ],
              [
                "test_resample_groupby",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "false"
              ],
              [
                "test_resample_rule_int",
                "false"
              ],
              [
                "test_resample_on",
                "false"
              ],
              [
                "test_resample_rule_str",
                "false"
              ],
              [
                "test_resample_aggregation_str",
                "false"
              ],
              [
                "test_resample_aggregation_func",
                "false"
              ],
              [
                "test_resample_aggregation_import",
                "false"
              ],
              [
                "test_resample_groupby",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "1"
              ],
              [
                "test_resample_rule_int",
                "1"
              ],
              [
                "test_resample_on",
                "1"
              ],
              [
                "test_resample_rule_str",
                "1"
              ],
              [
                "test_resample_aggregation_str",
                "1"
              ],
              [
                "test_resample_aggregation_func",
                "1"
              ],
              [
                "test_resample_aggregation_import",
                "1"
              ],
              [
                "test_resample_groupby",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                [
                  "out"
                ]
              ],
              [
                "test_resample_rule_int",
                [
                  "out"
                ]
              ],
              [
                "test_resample_on",
                [
                  "out"
                ]
              ],
              [
                "test_resample_rule_str",
                [
                  "out"
                ]
              ],
              [
                "test_resample_aggregation_str",
                [
                  "out"
                ]
              ],
              [
                "test_resample_aggregation_func",
                [
                  "out"
                ]
              ],
              [
                "test_resample_aggregation_import",
                [
                  "out"
                ]
              ],
              [
                "test_resample_groupby",
                [
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                [
                  "self.df"
                ]
              ],
              [
                "test_resample_rule_int",
                [
                  "self.df"
                ]
              ],
              [
                "test_resample_on",
                [
                  "self.df"
                ]
              ],
              [
                "test_resample_rule_str",
                [
                  "self.df"
                ]
              ],
              [
                "test_resample_aggregation_str",
                [
                  "self.df"
                ]
              ],
              [
                "test_resample_aggregation_func",
                [
                  "self.df"
                ]
              ],
              [
                "test_resample_aggregation_import",
                [
                  "self.df"
                ]
              ],
              [
                "test_resample_groupby",
                [
                  "self.df"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.912825844990404,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_resample_rule_str",
                  "test_resample_aggregation_str",
                  0.9668886451151042
                ],
                [
                  "test_resample_rule_str",
                  "test_resample_aggregation_func",
                  0.9637080903614361
                ],
                [
                  "test_resample_rule_str",
                  "test_resample_aggregation_import",
                  0.9637080903614361
                ],
                [
                  "test_resample_rule_int",
                  "test_resample_aggregation_import",
                  0.9634349810838677
                ],
                [
                  "test_resample_on",
                  "test_resample_reset_index_false",
                  0.9754584990630857
                ],
                [
                  "test_resample_rule_int",
                  "test_resample_reset_index_false",
                  0.9751241213420584
                ],
                [
                  "test_resample_rule_int",
                  "test_resample_aggregation_func",
                  0.9634349810838677
                ],
                [
                  "test_resample_reset_index_false",
                  "test_resample_aggregation_import",
                  0.9534007556122224
                ],
                [
                  "test_resample_groupby",
                  "test_resample_reset_index_false",
                  0.7265651058843647
                ],
                [
                  "test_resample_rule_str",
                  "test_resample_rule_int",
                  0.9916582025764139
                ],
                [
                  "test_resample_reset_index_false",
                  "test_resample_aggregation_func",
                  0.9534007556122224
                ],
                [
                  "test_resample_aggregation_str",
                  "test_resample_aggregation_func",
                  0.993485342019544
                ],
                [
                  "test_resample_aggregation_str",
                  "test_resample_aggregation_import",
                  0.993485342019544
                ],
                [
                  "test_resample_groupby",
                  "test_resample_on",
                  0.7343592913607964
                ],
                [
                  "test_resample_rule_str",
                  "test_resample_groupby",
                  0.7284101076818642
                ],
                [
                  "test_resample_on",
                  "test_resample_aggregation_str",
                  0.9620225210036625
                ],
                [
                  "test_resample_on",
                  "test_resample_aggregation_func",
                  0.9620225210036625
                ],
                [
                  "test_resample_on",
                  "test_resample_aggregation_import",
                  0.9620225210036625
                ],
                [
                  "test_resample_aggregation_func",
                  "test_resample_aggregation_import",
                  0.993485342019544
                ],
                [
                  "test_resample_rule_str",
                  "test_resample_on",
                  0.9860043028340848
                ],
                [
                  "test_resample_rule_int",
                  "test_resample_on",
                  0.9841998128450703
                ],
                [
                  "test_resample_reset_index_false",
                  "test_resample_aggregation_str",
                  0.9534007556122224
                ],
                [
                  "test_resample_rule_str",
                  "test_resample_reset_index_false",
                  0.97701500836393
                ],
                [
                  "test_resample_groupby",
                  "test_resample_aggregation_func",
                  0.7521479874359257
                ],
                [
                  "test_resample_groupby",
                  "test_resample_aggregation_str",
                  0.7521479874359257
                ],
                [
                  "test_resample_groupby",
                  "test_resample_aggregation_import",
                  0.7521479874359257
                ],
                [
                  "test_resample_rule_int",
                  "test_resample_aggregation_str",
                  0.9634349810838677
                ],
                [
                  "test_resample_rule_int",
                  "test_resample_groupby",
                  0.7125496204760019
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_resample_reset_index_false",
                "false"
              ],
              [
                "test_resample_rule_int",
                "false"
              ],
              [
                "test_resample_on",
                "false"
              ],
              [
                "test_resample_rule_str",
                "false"
              ],
              [
                "test_resample_aggregation_str",
                "false"
              ],
              [
                "test_resample_aggregation_func",
                "false"
              ],
              [
                "test_resample_aggregation_import",
                "false"
              ],
              [
                "test_resample_groupby",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_custom_\u0026_test_preprocessing.py",
    "testCases": [
      {
        "name": "RangeScalerTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fit",
                  "[]"
                ],
                [
                  "test_scale",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fit",
                  "[]"
                ],
                [
                  "test_scale",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_scale",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_scale",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_scale",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_scale",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                []
              ],
              [
                "test_scale",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fit",
                  "0"
                ],
                [
                  "test_scale",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fit",
                  "0"
                ],
                [
                  "test_scale",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "3"
              ],
              [
                "test_scale",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                [
                  "data",
                  "scaler"
                ]
              ],
              [
                "test_scale",
                [
                  "data",
                  "scaled",
                  "scaler",
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                []
              ],
              [
                "test_scale",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9300397284715091,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_fit",
                  "test_scale",
                  0.9300397284715091
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_scale",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "RangeiUnscalerTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fit",
                  "[]"
                ],
                [
                  "test_unscale",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fit",
                  "[]"
                ],
                [
                  "test_unscale",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_unscale",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_unscale",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_unscale",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fit",
                  "false"
                ],
                [
                  "test_unscale",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_unscale",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_unscale",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                []
              ],
              [
                "test_unscale",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_unscale",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_unscale",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fit",
                  "0"
                ],
                [
                  "test_unscale",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fit",
                  "0"
                ],
                [
                  "test_unscale",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_unscale",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_unscale",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "2"
              ],
              [
                "test_unscale",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                [
                  "unscaler",
                  "data_range"
                ]
              ],
              [
                "test_unscale",
                [
                  "unscaler",
                  "data",
                  "unscaled",
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                []
              ],
              [
                "test_unscale",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6887075321558295,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_fit",
                  "test_unscale",
                  0.6887075321558295
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_fit",
                "false"
              ],
              [
                "test_unscale",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_custom_\u0026_test_feature_extraction.py",
    "testCases": [
      {
        "name": "FeatureExtractorTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fit_auto_pandas",
                  "[]"
                ],
                [
                  "test_fit_features",
                  "[]"
                ],
                [
                  "test_fit_auto_numpy",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fit_auto_pandas",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_fit_features",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_fit_auto_numpy",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fit_auto_pandas",
                  "false"
                ],
                [
                  "test_fit_features",
                  "false"
                ],
                [
                  "test_fit_auto_numpy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fit_auto_pandas",
                  "false"
                ],
                [
                  "test_fit_features",
                  "false"
                ],
                [
                  "test_fit_auto_numpy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fit_auto_pandas",
                  "false"
                ],
                [
                  "test_fit_features",
                  "false"
                ],
                [
                  "test_fit_auto_numpy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fit_auto_pandas",
                  "false"
                ],
                [
                  "test_fit_features",
                  "false"
                ],
                [
                  "test_fit_auto_numpy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "false"
              ],
              [
                "test_fit_features",
                "false"
              ],
              [
                "test_fit_auto_numpy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "false"
              ],
              [
                "test_fit_features",
                "false"
              ],
              [
                "test_fit_auto_numpy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                []
              ],
              [
                "test_fit_features",
                []
              ],
              [
                "test_fit_auto_numpy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "false"
              ],
              [
                "test_fit_features",
                "false"
              ],
              [
                "test_fit_auto_numpy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "false"
              ],
              [
                "test_fit_features",
                "false"
              ],
              [
                "test_fit_auto_numpy",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fit_auto_pandas",
                  "0"
                ],
                [
                  "test_fit_features",
                  "0"
                ],
                [
                  "test_fit_auto_numpy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fit_auto_pandas",
                  "0"
                ],
                [
                  "test_fit_features",
                  "0"
                ],
                [
                  "test_fit_auto_numpy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "false"
              ],
              [
                "test_fit_features",
                "false"
              ],
              [
                "test_fit_auto_numpy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "false"
              ],
              [
                "test_fit_features",
                "false"
              ],
              [
                "test_fit_auto_numpy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "3"
              ],
              [
                "test_fit_features",
                "2"
              ],
              [
                "test_fit_auto_numpy",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                [
                  "expected_calls",
                  "X",
                  "_detect_features",
                  "_fit",
                  "fe"
                ]
              ],
              [
                "test_fit_features",
                [
                  "X",
                  "_detect_features",
                  "_fit",
                  "fe"
                ]
              ],
              [
                "test_fit_auto_numpy",
                [
                  "expected_calls",
                  "X",
                  "_detect_features",
                  "_fit",
                  "fe"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                []
              ],
              [
                "test_fit_features",
                []
              ],
              [
                "test_fit_auto_numpy",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8876062597098704,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_fit_features",
                  "test_fit_auto_numpy",
                  0.8522930885393414
                ],
                [
                  "test_fit_auto_pandas",
                  "test_fit_auto_numpy",
                  0.9229670070844036
                ],
                [
                  "test_fit_features",
                  "test_fit_auto_pandas",
                  0.8875586835058663
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_auto_pandas",
                "false"
              ],
              [
                "test_fit_features",
                "false"
              ],
              [
                "test_fit_auto_numpy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "CategoricalEncoderTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__transform",
                  "[]"
                ],
                [
                  "test__detect_features_max_unique",
                  "[]"
                ],
                [
                  "test__detect_features_nones",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test__fit",
                  "[]"
                ],
                [
                  "test__detect_features_category",
                  "[]"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "[]"
                ],
                [
                  "test_fit",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__transform",
                  "[PyAssertStatement]"
                ],
                [
                  "test__detect_features_max_unique",
                  "[PyAssertStatement]"
                ],
                [
                  "test__detect_features_nones",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test__fit",
                  "[PyAssertStatement]"
                ],
                [
                  "test__detect_features_category",
                  "[PyAssertStatement]"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "[PyAssertStatement]"
                ],
                [
                  "test_fit",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__transform",
                  "false"
                ],
                [
                  "test__detect_features_max_unique",
                  "false"
                ],
                [
                  "test__detect_features_nones",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__detect_features_category",
                  "false"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__transform",
                  "false"
                ],
                [
                  "test__detect_features_max_unique",
                  "false"
                ],
                [
                  "test__detect_features_nones",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__detect_features_category",
                  "false"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__transform",
                  "false"
                ],
                [
                  "test__detect_features_max_unique",
                  "false"
                ],
                [
                  "test__detect_features_nones",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__detect_features_category",
                  "false"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__transform",
                  "false"
                ],
                [
                  "test__detect_features_max_unique",
                  "false"
                ],
                [
                  "test__detect_features_nones",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__detect_features_category",
                  "false"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "false"
                ],
                [
                  "test_fit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "false"
              ],
              [
                "test__detect_features_max_unique",
                "false"
              ],
              [
                "test__detect_features_nones",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__detect_features_category",
                "false"
              ],
              [
                "test__detect_features_no_max_unique",
                "false"
              ],
              [
                "test_fit",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "false"
              ],
              [
                "test__detect_features_max_unique",
                "false"
              ],
              [
                "test__detect_features_nones",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__detect_features_category",
                "false"
              ],
              [
                "test__detect_features_no_max_unique",
                "false"
              ],
              [
                "test_fit",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                []
              ],
              [
                "test__detect_features_max_unique",
                []
              ],
              [
                "test__detect_features_nones",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test__fit",
                []
              ],
              [
                "test__detect_features_category",
                []
              ],
              [
                "test__detect_features_no_max_unique",
                []
              ],
              [
                "test_fit",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "false"
              ],
              [
                "test__detect_features_max_unique",
                "false"
              ],
              [
                "test__detect_features_nones",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__detect_features_category",
                "false"
              ],
              [
                "test__detect_features_no_max_unique",
                "false"
              ],
              [
                "test_fit",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "false"
              ],
              [
                "test__detect_features_max_unique",
                "false"
              ],
              [
                "test__detect_features_nones",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__detect_features_category",
                "false"
              ],
              [
                "test__detect_features_no_max_unique",
                "false"
              ],
              [
                "test_fit",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__transform",
                  "0"
                ],
                [
                  "test__detect_features_max_unique",
                  "0"
                ],
                [
                  "test__detect_features_nones",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__fit",
                  "0"
                ],
                [
                  "test__detect_features_category",
                  "0"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "0"
                ],
                [
                  "test_fit",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__transform",
                  "0"
                ],
                [
                  "test__detect_features_max_unique",
                  "0"
                ],
                [
                  "test__detect_features_nones",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__fit",
                  "0"
                ],
                [
                  "test__detect_features_category",
                  "0"
                ],
                [
                  "test__detect_features_no_max_unique",
                  "0"
                ],
                [
                  "test_fit",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "false"
              ],
              [
                "test__detect_features_max_unique",
                "false"
              ],
              [
                "test__detect_features_nones",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__detect_features_category",
                "false"
              ],
              [
                "test__detect_features_no_max_unique",
                "false"
              ],
              [
                "test_fit",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "false"
              ],
              [
                "test__detect_features_max_unique",
                "false"
              ],
              [
                "test__detect_features_nones",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__detect_features_category",
                "false"
              ],
              [
                "test__detect_features_no_max_unique",
                "false"
              ],
              [
                "test_fit",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "2"
              ],
              [
                "test__detect_features_max_unique",
                "1"
              ],
              [
                "test__detect_features_nones",
                "1"
              ],
              [
                "test___init__",
                "3"
              ],
              [
                "test__fit",
                "2"
              ],
              [
                "test__detect_features_category",
                "1"
              ],
              [
                "test__detect_features_no_max_unique",
                "1"
              ],
              [
                "test_fit",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                [
                  "ce",
                  "expected",
                  "x",
                  "ohle_instance",
                  "returned"
                ]
              ],
              [
                "test__detect_features_max_unique",
                [
                  "features",
                  "ce",
                  "X"
                ]
              ],
              [
                "test__detect_features_nones",
                [
                  "features",
                  "ce",
                  "X"
                ]
              ],
              [
                "test___init__",
                [
                  "ce"
                ]
              ],
              [
                "test__fit",
                [
                  "ce",
                  "x"
                ]
              ],
              [
                "test__detect_features_category",
                [
                  "features",
                  "ce",
                  "X"
                ]
              ],
              [
                "test__detect_features_no_max_unique",
                [
                  "features",
                  "ce",
                  "X"
                ]
              ],
              [
                "test_fit",
                [
                  "ce"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                []
              ],
              [
                "test__detect_features_max_unique",
                []
              ],
              [
                "test__detect_features_nones",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test__fit",
                []
              ],
              [
                "test__detect_features_category",
                []
              ],
              [
                "test__detect_features_no_max_unique",
                []
              ],
              [
                "test_fit",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6038511407996678,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__detect_features_no_max_unique",
                  "test__detect_features_max_unique",
                  0.9103372163666557
                ],
                [
                  "test_fit",
                  "test__transform",
                  0.42195634692833955
                ],
                [
                  "test__fit",
                  "test__detect_features_max_unique",
                  0.3838579097067991
                ],
                [
                  "test_fit",
                  "test__detect_features_nones",
                  0.4070135768850545
                ],
                [
                  "test__transform",
                  "test__detect_features_category",
                  0.7105070957008043
                ],
                [
                  "test___init__",
                  "test__transform",
                  0.5967363885554647
                ],
                [
                  "test_fit",
                  "test__detect_features_no_max_unique",
                  0.40050093945740706
                ],
                [
                  "test__fit",
                  "test__detect_features_no_max_unique",
                  0.413016593815451
                ],
                [
                  "test__detect_features_no_max_unique",
                  "test__detect_features_nones",
                  0.877130227273687
                ],
                [
                  "test__fit",
                  "test__detect_features_category",
                  0.4253560621075342
                ],
                [
                  "test_fit",
                  "test__fit",
                  0.49122807017543857
                ],
                [
                  "test__detect_features_nones",
                  "test__detect_features_category",
                  0.8925473953025183
                ],
                [
                  "test__fit",
                  "test__transform",
                  0.536385186773313
                ],
                [
                  "test___init__",
                  "test__detect_features_max_unique",
                  0.6162161243547237
                ],
                [
                  "test___init__",
                  "test__detect_features_category",
                  0.6455597493239963
                ],
                [
                  "test__transform",
                  "test__detect_features_no_max_unique",
                  0.7040816326530611
                ],
                [
                  "test__detect_features_max_unique",
                  "test__detect_features_category",
                  0.8957055214723928
                ],
                [
                  "test___init__",
                  "test__detect_features_no_max_unique",
                  0.6371930928643098
                ],
                [
                  "test___init__",
                  "test_fit",
                  0.4465937565388721
                ],
                [
                  "test__transform",
                  "test__detect_features_max_unique",
                  0.6724442155739755
                ],
                [
                  "test__transform",
                  "test__detect_features_nones",
                  0.7017041818189494
                ],
                [
                  "test__detect_features_max_unique",
                  "test__detect_features_nones",
                  0.9426905073981653
                ],
                [
                  "test___init__",
                  "test__detect_features_nones",
                  0.6895257693499509
                ],
                [
                  "test_fit",
                  "test__detect_features_category",
                  0.4149815240073504
                ],
                [
                  "test__detect_features_no_max_unique",
                  "test__detect_features_category",
                  0.9473427942677393
                ],
                [
                  "test___init__",
                  "test__fit",
                  0.37216146378239345
                ],
                [
                  "test_fit",
                  "test__detect_features_max_unique",
                  0.3734833716066154
                ],
                [
                  "test__fit",
                  "test__detect_features_nones",
                  0.3815752283297386
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__transform",
                "false"
              ],
              [
                "test__detect_features_max_unique",
                "false"
              ],
              [
                "test__detect_features_nones",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__detect_features_category",
                "false"
              ],
              [
                "test__detect_features_no_max_unique",
                "false"
              ],
              [
                "test_fit",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_custom_\u0026_test_timeseries_anomalies.py",
    "testCases": [
      {
        "name": "GetMaxErrorsTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_two_sequences",
                  "[]"
                ],
                [
                  "test_no_anomalies",
                  "[]"
                ],
                [
                  "test_one_sequence",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_two_sequences",
                  "[]"
                ],
                [
                  "test_no_anomalies",
                  "[]"
                ],
                [
                  "test_one_sequence",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_two_sequences",
                  "false"
                ],
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_one_sequence",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_two_sequences",
                  "false"
                ],
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_one_sequence",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_two_sequences",
                  "false"
                ],
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_one_sequence",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_two_sequences",
                  "false"
                ],
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_one_sequence",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                "false"
              ],
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_one_sequence",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                "false"
              ],
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_one_sequence",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                []
              ],
              [
                "test_no_anomalies",
                []
              ],
              [
                "test_one_sequence",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                "false"
              ],
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_one_sequence",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                "false"
              ],
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_one_sequence",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_two_sequences",
                  "0"
                ],
                [
                  "test_no_anomalies",
                  "0"
                ],
                [
                  "test_one_sequence",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_two_sequences",
                  "0"
                ],
                [
                  "test_no_anomalies",
                  "0"
                ],
                [
                  "test_one_sequence",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                "false"
              ],
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_one_sequence",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                "false"
              ],
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_one_sequence",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_two_sequences",
                "0"
              ],
              [
                "test_no_anomalies",
                "0"
              ],
              [
                "test_one_sequence",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                [
                  "expected",
                  "sequences",
                  "errors"
                ]
              ],
              [
                "test_no_anomalies",
                [
                  "expected",
                  "sequences",
                  "errors"
                ]
              ],
              [
                "test_one_sequence",
                [
                  "expected",
                  "sequences",
                  "errors"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                []
              ],
              [
                "test_no_anomalies",
                []
              ],
              [
                "test_one_sequence",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9470167681429439,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_no_anomalies",
                  "test_one_sequence",
                  0.9556278761532438
                ],
                [
                  "test_one_sequence",
                  "test_two_sequences",
                  0.967185591723197
                ],
                [
                  "test_no_anomalies",
                  "test_two_sequences",
                  0.918236836552391
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_two_sequences",
                "false"
              ],
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_one_sequence",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "PruneAnomaliesTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_no_anomalies",
                  "[]"
                ],
                [
                  "test_two_anomalies",
                  "[]"
                ],
                [
                  "test_two_out_of_three",
                  "[]"
                ],
                [
                  "test_no_sequences",
                  "[]"
                ],
                [
                  "test_one_anomaly",
                  "[]"
                ],
                [
                  "test_two_with_a_gap",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_no_anomalies",
                  "[]"
                ],
                [
                  "test_two_anomalies",
                  "[]"
                ],
                [
                  "test_two_out_of_three",
                  "[]"
                ],
                [
                  "test_no_sequences",
                  "[]"
                ],
                [
                  "test_one_anomaly",
                  "[]"
                ],
                [
                  "test_two_with_a_gap",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_two_anomalies",
                  "false"
                ],
                [
                  "test_two_out_of_three",
                  "false"
                ],
                [
                  "test_no_sequences",
                  "false"
                ],
                [
                  "test_one_anomaly",
                  "false"
                ],
                [
                  "test_two_with_a_gap",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_two_anomalies",
                  "false"
                ],
                [
                  "test_two_out_of_three",
                  "false"
                ],
                [
                  "test_no_sequences",
                  "false"
                ],
                [
                  "test_one_anomaly",
                  "false"
                ],
                [
                  "test_two_with_a_gap",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_two_anomalies",
                  "false"
                ],
                [
                  "test_two_out_of_three",
                  "false"
                ],
                [
                  "test_no_sequences",
                  "false"
                ],
                [
                  "test_one_anomaly",
                  "false"
                ],
                [
                  "test_two_with_a_gap",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_no_anomalies",
                  "false"
                ],
                [
                  "test_two_anomalies",
                  "false"
                ],
                [
                  "test_two_out_of_three",
                  "false"
                ],
                [
                  "test_no_sequences",
                  "false"
                ],
                [
                  "test_one_anomaly",
                  "false"
                ],
                [
                  "test_two_with_a_gap",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_two_anomalies",
                "false"
              ],
              [
                "test_two_out_of_three",
                "false"
              ],
              [
                "test_no_sequences",
                "false"
              ],
              [
                "test_one_anomaly",
                "false"
              ],
              [
                "test_two_with_a_gap",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_two_anomalies",
                "false"
              ],
              [
                "test_two_out_of_three",
                "false"
              ],
              [
                "test_no_sequences",
                "false"
              ],
              [
                "test_one_anomaly",
                "false"
              ],
              [
                "test_two_with_a_gap",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                []
              ],
              [
                "test_two_anomalies",
                []
              ],
              [
                "test_two_out_of_three",
                []
              ],
              [
                "test_no_sequences",
                []
              ],
              [
                "test_one_anomaly",
                []
              ],
              [
                "test_two_with_a_gap",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_two_anomalies",
                "false"
              ],
              [
                "test_two_out_of_three",
                "false"
              ],
              [
                "test_no_sequences",
                "false"
              ],
              [
                "test_one_anomaly",
                "false"
              ],
              [
                "test_two_with_a_gap",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_two_anomalies",
                "false"
              ],
              [
                "test_two_out_of_three",
                "false"
              ],
              [
                "test_no_sequences",
                "false"
              ],
              [
                "test_one_anomaly",
                "false"
              ],
              [
                "test_two_with_a_gap",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_no_anomalies",
                  "0"
                ],
                [
                  "test_two_anomalies",
                  "0"
                ],
                [
                  "test_two_out_of_three",
                  "0"
                ],
                [
                  "test_no_sequences",
                  "0"
                ],
                [
                  "test_one_anomaly",
                  "0"
                ],
                [
                  "test_two_with_a_gap",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_no_anomalies",
                  "0"
                ],
                [
                  "test_two_anomalies",
                  "0"
                ],
                [
                  "test_two_out_of_three",
                  "0"
                ],
                [
                  "test_no_sequences",
                  "0"
                ],
                [
                  "test_one_anomaly",
                  "0"
                ],
                [
                  "test_two_with_a_gap",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_two_anomalies",
                "false"
              ],
              [
                "test_two_out_of_three",
                "false"
              ],
              [
                "test_no_sequences",
                "false"
              ],
              [
                "test_one_anomaly",
                "false"
              ],
              [
                "test_two_with_a_gap",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_two_anomalies",
                "false"
              ],
              [
                "test_two_out_of_three",
                "false"
              ],
              [
                "test_no_sequences",
                "false"
              ],
              [
                "test_one_anomaly",
                "false"
              ],
              [
                "test_two_with_a_gap",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_no_anomalies",
                "0"
              ],
              [
                "test_two_anomalies",
                "0"
              ],
              [
                "test_two_out_of_three",
                "0"
              ],
              [
                "test_no_sequences",
                "0"
              ],
              [
                "test_one_anomaly",
                "0"
              ],
              [
                "test_two_with_a_gap",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                [
                  "max_errors",
                  "expected"
                ]
              ],
              [
                "test_two_anomalies",
                [
                  "max_errors",
                  "expected"
                ]
              ],
              [
                "test_two_out_of_three",
                [
                  "max_errors",
                  "expected"
                ]
              ],
              [
                "test_no_sequences",
                [
                  "max_errors",
                  "expected"
                ]
              ],
              [
                "test_one_anomaly",
                [
                  "max_errors",
                  "expected"
                ]
              ],
              [
                "test_two_with_a_gap",
                [
                  "max_errors",
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                []
              ],
              [
                "test_two_anomalies",
                []
              ],
              [
                "test_two_out_of_three",
                []
              ],
              [
                "test_no_sequences",
                []
              ],
              [
                "test_one_anomaly",
                []
              ],
              [
                "test_two_with_a_gap",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8899168406727385,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_no_sequences",
                  "test_two_with_a_gap",
                  0.6846104100678746
                ],
                [
                  "test_no_anomalies",
                  "test_one_anomaly",
                  0.9420972188746342
                ],
                [
                  "test_two_anomalies",
                  "test_two_with_a_gap",
                  0.9895202815961319
                ],
                [
                  "test_no_sequences",
                  "test_no_anomalies",
                  0.9265056386297378
                ],
                [
                  "test_no_anomalies",
                  "test_two_out_of_three",
                  0.8944271909999159
                ],
                [
                  "test_one_anomaly",
                  "test_two_out_of_three",
                  0.9429513416419759
                ],
                [
                  "test_no_sequences",
                  "test_two_out_of_three",
                  0.7091689748717401
                ],
                [
                  "test_two_anomalies",
                  "test_two_out_of_three",
                  0.9921883183312927
                ],
                [
                  "test_no_sequences",
                  "test_one_anomaly",
                  0.839286909062253
                ],
                [
                  "test_no_anomalies",
                  "test_two_with_a_gap",
                  0.8811826936751231
                ],
                [
                  "test_no_anomalies",
                  "test_two_anomalies",
                  0.9202555237582839
                ],
                [
                  "test_one_anomaly",
                  "test_two_with_a_gap",
                  0.9308269790638868
                ],
                [
                  "test_no_sequences",
                  "test_two_anomalies",
                  0.7435656381472785
                ],
                [
                  "test_one_anomaly",
                  "test_two_anomalies",
                  0.9600998555777401
                ],
                [
                  "test_two_out_of_three",
                  "test_two_with_a_gap",
                  0.9920656357932095
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_no_anomalies",
                "false"
              ],
              [
                "test_two_anomalies",
                "false"
              ],
              [
                "test_two_out_of_three",
                "false"
              ],
              [
                "test_no_sequences",
                "false"
              ],
              [
                "test_one_anomaly",
                "false"
              ],
              [
                "test_two_with_a_gap",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "FindSequencesTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__find_sequences_all_one_sequence",
                  "[]"
                ],
                [
                  "test__find_sequences_open_end",
                  "[]"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "[]"
                ],
                [
                  "test__find_sequences_middle",
                  "[]"
                ],
                [
                  "test__find_sequences_stop",
                  "[]"
                ],
                [
                  "test__find_sequences_open_start",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__find_sequences_all_one_sequence",
                  "[]"
                ],
                [
                  "test__find_sequences_open_end",
                  "[]"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "[]"
                ],
                [
                  "test__find_sequences_middle",
                  "[]"
                ],
                [
                  "test__find_sequences_stop",
                  "[]"
                ],
                [
                  "test__find_sequences_open_start",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__find_sequences_all_one_sequence",
                  "false"
                ],
                [
                  "test__find_sequences_open_end",
                  "false"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "false"
                ],
                [
                  "test__find_sequences_middle",
                  "false"
                ],
                [
                  "test__find_sequences_stop",
                  "false"
                ],
                [
                  "test__find_sequences_open_start",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__find_sequences_all_one_sequence",
                  "false"
                ],
                [
                  "test__find_sequences_open_end",
                  "false"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "false"
                ],
                [
                  "test__find_sequences_middle",
                  "false"
                ],
                [
                  "test__find_sequences_stop",
                  "false"
                ],
                [
                  "test__find_sequences_open_start",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__find_sequences_all_one_sequence",
                  "false"
                ],
                [
                  "test__find_sequences_open_end",
                  "false"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "false"
                ],
                [
                  "test__find_sequences_middle",
                  "false"
                ],
                [
                  "test__find_sequences_stop",
                  "false"
                ],
                [
                  "test__find_sequences_open_start",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__find_sequences_all_one_sequence",
                  "false"
                ],
                [
                  "test__find_sequences_open_end",
                  "false"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "false"
                ],
                [
                  "test__find_sequences_middle",
                  "false"
                ],
                [
                  "test__find_sequences_stop",
                  "false"
                ],
                [
                  "test__find_sequences_open_start",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "false"
              ],
              [
                "test__find_sequences_open_end",
                "false"
              ],
              [
                "test__find_sequences_no_sequences",
                "false"
              ],
              [
                "test__find_sequences_middle",
                "false"
              ],
              [
                "test__find_sequences_stop",
                "false"
              ],
              [
                "test__find_sequences_open_start",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "false"
              ],
              [
                "test__find_sequences_open_end",
                "false"
              ],
              [
                "test__find_sequences_no_sequences",
                "false"
              ],
              [
                "test__find_sequences_middle",
                "false"
              ],
              [
                "test__find_sequences_stop",
                "false"
              ],
              [
                "test__find_sequences_open_start",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                []
              ],
              [
                "test__find_sequences_open_end",
                []
              ],
              [
                "test__find_sequences_no_sequences",
                []
              ],
              [
                "test__find_sequences_middle",
                []
              ],
              [
                "test__find_sequences_stop",
                []
              ],
              [
                "test__find_sequences_open_start",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "false"
              ],
              [
                "test__find_sequences_open_end",
                "false"
              ],
              [
                "test__find_sequences_no_sequences",
                "false"
              ],
              [
                "test__find_sequences_middle",
                "false"
              ],
              [
                "test__find_sequences_stop",
                "false"
              ],
              [
                "test__find_sequences_open_start",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "false"
              ],
              [
                "test__find_sequences_open_end",
                "false"
              ],
              [
                "test__find_sequences_no_sequences",
                "false"
              ],
              [
                "test__find_sequences_middle",
                "false"
              ],
              [
                "test__find_sequences_stop",
                "false"
              ],
              [
                "test__find_sequences_open_start",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__find_sequences_all_one_sequence",
                  "0"
                ],
                [
                  "test__find_sequences_open_end",
                  "0"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "0"
                ],
                [
                  "test__find_sequences_middle",
                  "0"
                ],
                [
                  "test__find_sequences_stop",
                  "0"
                ],
                [
                  "test__find_sequences_open_start",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__find_sequences_all_one_sequence",
                  "0"
                ],
                [
                  "test__find_sequences_open_end",
                  "0"
                ],
                [
                  "test__find_sequences_no_sequences",
                  "0"
                ],
                [
                  "test__find_sequences_middle",
                  "0"
                ],
                [
                  "test__find_sequences_stop",
                  "0"
                ],
                [
                  "test__find_sequences_open_start",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "false"
              ],
              [
                "test__find_sequences_open_end",
                "false"
              ],
              [
                "test__find_sequences_no_sequences",
                "false"
              ],
              [
                "test__find_sequences_middle",
                "false"
              ],
              [
                "test__find_sequences_stop",
                "false"
              ],
              [
                "test__find_sequences_open_start",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "false"
              ],
              [
                "test__find_sequences_open_end",
                "false"
              ],
              [
                "test__find_sequences_no_sequences",
                "false"
              ],
              [
                "test__find_sequences_middle",
                "false"
              ],
              [
                "test__find_sequences_stop",
                "false"
              ],
              [
                "test__find_sequences_open_start",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "0"
              ],
              [
                "test__find_sequences_open_end",
                "0"
              ],
              [
                "test__find_sequences_no_sequences",
                "0"
              ],
              [
                "test__find_sequences_middle",
                "0"
              ],
              [
                "test__find_sequences_stop",
                "0"
              ],
              [
                "test__find_sequences_open_start",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                []
              ],
              [
                "test__find_sequences_open_end",
                []
              ],
              [
                "test__find_sequences_no_sequences",
                []
              ],
              [
                "test__find_sequences_middle",
                []
              ],
              [
                "test__find_sequences_stop",
                []
              ],
              [
                "test__find_sequences_open_start",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                []
              ],
              [
                "test__find_sequences_open_end",
                []
              ],
              [
                "test__find_sequences_no_sequences",
                []
              ],
              [
                "test__find_sequences_middle",
                []
              ],
              [
                "test__find_sequences_stop",
                []
              ],
              [
                "test__find_sequences_open_start",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.920705436640817,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__find_sequences_open_start",
                  "test__find_sequences_stop",
                  0.9754711841925668
                ],
                [
                  "test__find_sequences_all_one_sequence",
                  "test__find_sequences_open_start",
                  0.9567929185064113
                ],
                [
                  "test__find_sequences_all_one_sequence",
                  "test__find_sequences_open_end",
                  0.9567929185064113
                ],
                [
                  "test__find_sequences_open_end",
                  "test__find_sequences_stop",
                  0.9754711841925668
                ],
                [
                  "test__find_sequences_all_one_sequence",
                  "test__find_sequences_middle",
                  0.9653741927083674
                ],
                [
                  "test__find_sequences_no_sequences",
                  "test__find_sequences_stop",
                  0.7977732820017962
                ],
                [
                  "test__find_sequences_open_start",
                  "test__find_sequences_middle",
                  0.9821820073972781
                ],
                [
                  "test__find_sequences_no_sequences",
                  "test__find_sequences_open_start",
                  0.847587807239702
                ],
                [
                  "test__find_sequences_open_end",
                  "test__find_sequences_middle",
                  0.9821820073972781
                ],
                [
                  "test__find_sequences_no_sequences",
                  "test__find_sequences_open_end",
                  0.847587807239702
                ],
                [
                  "test__find_sequences_middle",
                  "test__find_sequences_stop",
                  0.9842199798261407
                ],
                [
                  "test__find_sequences_no_sequences",
                  "test__find_sequences_middle",
                  0.8048843706309877
                ],
                [
                  "test__find_sequences_all_one_sequence",
                  "test__find_sequences_stop",
                  0.9542521130248965
                ],
                [
                  "test__find_sequences_open_end",
                  "test__find_sequences_open_start",
                  0.991150442477876
                ],
                [
                  "test__find_sequences_no_sequences",
                  "test__find_sequences_all_one_sequence",
                  0.788859334270275
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__find_sequences_all_one_sequence",
                "false"
              ],
              [
                "test__find_sequences_open_end",
                "false"
              ],
              [
                "test__find_sequences_no_sequences",
                "false"
              ],
              [
                "test__find_sequences_middle",
                "false"
              ],
              [
                "test__find_sequences_stop",
                "false"
              ],
              [
                "test__find_sequences_open_start",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "MergeSequencesTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__merge_sequences_consecutive",
                  "[]"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "[]"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "[]"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "[]"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "[]"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__merge_sequences_consecutive",
                  "[]"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "[]"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "[]"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "[]"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "[]"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__merge_sequences_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "false"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__merge_sequences_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "false"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__merge_sequences_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "false"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__merge_sequences_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "false"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "false"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "false"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "false"
              ],
              [
                "test__merge_sequences_start_overlap",
                "false"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "false"
              ],
              [
                "test__merge_sequences_start_overlap",
                "false"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                []
              ],
              [
                "test__merge_sequences_start_end_overlap",
                []
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                []
              ],
              [
                "test__merge_sequences_start_overlap",
                []
              ],
              [
                "test__merge_sequences_non_consecutive",
                []
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "false"
              ],
              [
                "test__merge_sequences_start_overlap",
                "false"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "false"
              ],
              [
                "test__merge_sequences_start_overlap",
                "false"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__merge_sequences_consecutive",
                  "0"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "0"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "0"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "0"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "0"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__merge_sequences_consecutive",
                  "0"
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "0"
                ],
                [
                  "test__merge_sequences_consecutive_different_score_and_length",
                  "0"
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "0"
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "0"
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "false"
              ],
              [
                "test__merge_sequences_start_overlap",
                "false"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "false"
              ],
              [
                "test__merge_sequences_start_overlap",
                "false"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "0"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "0"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "0"
              ],
              [
                "test__merge_sequences_start_overlap",
                "0"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "0"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                []
              ],
              [
                "test__merge_sequences_start_end_overlap",
                []
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                []
              ],
              [
                "test__merge_sequences_start_overlap",
                []
              ],
              [
                "test__merge_sequences_non_consecutive",
                []
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                []
              ],
              [
                "test__merge_sequences_start_end_overlap",
                []
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                []
              ],
              [
                "test__merge_sequences_start_overlap",
                []
              ],
              [
                "test__merge_sequences_non_consecutive",
                []
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9778235271283797,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__merge_sequences_start_overlap",
                  "test__merge_sequences_consecutive_different_score_and_length",
                  0.9678344297618552
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "test__merge_sequences_consecutive_different_score",
                  0.9767547513254082
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "test__merge_sequences_consecutive_different_score_and_length",
                  0.9633432944855655
                ],
                [
                  "test__merge_sequences_consecutive",
                  "test__merge_sequences_non_consecutive",
                  0.991816620975675
                ],
                [
                  "test__merge_sequences_consecutive",
                  "test__merge_sequences_consecutive_different_score",
                  0.9813512696610773
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "test__merge_sequences_consecutive_different_score_and_length",
                  0.9665099141454339
                ],
                [
                  "test__merge_sequences_consecutive",
                  "test__merge_sequences_start_end_overlap",
                  0.9813512696610773
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "test__merge_sequences_non_consecutive",
                  0.9799654559787982
                ],
                [
                  "test__merge_sequences_consecutive",
                  "test__merge_sequences_consecutive_different_score_and_length",
                  0.9723889698818348
                ],
                [
                  "test__merge_sequences_non_consecutive",
                  "test__merge_sequences_consecutive_different_score",
                  0.9754180279337197
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "test__merge_sequences_consecutive_different_score",
                  0.9722222222222222
                ],
                [
                  "test__merge_sequences_consecutive_different_score",
                  "test__merge_sequences_consecutive_different_score_and_length",
                  0.9816926905710048
                ],
                [
                  "test__merge_sequences_start_overlap",
                  "test__merge_sequences_start_end_overlap",
                  0.9953596037316065
                ],
                [
                  "test__merge_sequences_start_end_overlap",
                  "test__merge_sequences_non_consecutive",
                  0.9754180279337197
                ],
                [
                  "test__merge_sequences_consecutive",
                  "test__merge_sequences_start_overlap",
                  0.9859263586566988
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__merge_sequences_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_start_end_overlap",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score_and_length",
                "false"
              ],
              [
                "test__merge_sequences_start_overlap",
                "false"
              ],
              [
                "test__merge_sequences_non_consecutive",
                "false"
              ],
              [
                "test__merge_sequences_consecutive_different_score",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "FindAnomaliesTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_find_anomalies_lower_threshold",
                  "[]"
                ],
                [
                  "test_find_anomalies_open_start",
                  "[]"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "[]"
                ],
                [
                  "test_find_anomalies_open_end",
                  "[]"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "[]"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "[]"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "[]"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_find_anomalies_lower_threshold",
                  "[]"
                ],
                [
                  "test_find_anomalies_open_start",
                  "[]"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "[]"
                ],
                [
                  "test_find_anomalies_open_end",
                  "[]"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "[]"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "[]"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "[]"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_find_anomalies_lower_threshold",
                  "false"
                ],
                [
                  "test_find_anomalies_open_start",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_open_end",
                  "false"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_find_anomalies_lower_threshold",
                  "false"
                ],
                [
                  "test_find_anomalies_open_start",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_open_end",
                  "false"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_find_anomalies_lower_threshold",
                  "false"
                ],
                [
                  "test_find_anomalies_open_start",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_open_end",
                  "false"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_find_anomalies_lower_threshold",
                  "false"
                ],
                [
                  "test_find_anomalies_open_start",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_open_end",
                  "false"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "false"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "false"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "false"
              ],
              [
                "test_find_anomalies_open_start",
                "false"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_open_end",
                "false"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "false"
              ],
              [
                "test_find_anomalies_open_start",
                "false"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_open_end",
                "false"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                []
              ],
              [
                "test_find_anomalies_open_start",
                []
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                []
              ],
              [
                "test_find_anomalies_open_end",
                []
              ],
              [
                "test_find_anomalies_no_anomalies",
                []
              ],
              [
                "test_find_anomalies_two_anomalies",
                []
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                []
              ],
              [
                "test_find_anomalies_one_anomaly",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "false"
              ],
              [
                "test_find_anomalies_open_start",
                "false"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_open_end",
                "false"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "false"
              ],
              [
                "test_find_anomalies_open_start",
                "false"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_open_end",
                "false"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_find_anomalies_lower_threshold",
                  "0"
                ],
                [
                  "test_find_anomalies_open_start",
                  "0"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "0"
                ],
                [
                  "test_find_anomalies_open_end",
                  "0"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "0"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "0"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "0"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_find_anomalies_lower_threshold",
                  "0"
                ],
                [
                  "test_find_anomalies_open_start",
                  "0"
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "0"
                ],
                [
                  "test_find_anomalies_open_end",
                  "0"
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "0"
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "0"
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "0"
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "false"
              ],
              [
                "test_find_anomalies_open_start",
                "false"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_open_end",
                "false"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "false"
              ],
              [
                "test_find_anomalies_open_start",
                "false"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_open_end",
                "false"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "0"
              ],
              [
                "test_find_anomalies_open_start",
                "0"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "0"
              ],
              [
                "test_find_anomalies_open_end",
                "0"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "0"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "0"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "0"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                []
              ],
              [
                "test_find_anomalies_open_start",
                []
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                []
              ],
              [
                "test_find_anomalies_open_end",
                []
              ],
              [
                "test_find_anomalies_no_anomalies",
                []
              ],
              [
                "test_find_anomalies_two_anomalies",
                []
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                []
              ],
              [
                "test_find_anomalies_one_anomaly",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                []
              ],
              [
                "test_find_anomalies_open_start",
                []
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                []
              ],
              [
                "test_find_anomalies_open_end",
                []
              ],
              [
                "test_find_anomalies_no_anomalies",
                []
              ],
              [
                "test_find_anomalies_two_anomalies",
                []
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                []
              ],
              [
                "test_find_anomalies_one_anomaly",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8868620817200826,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_find_anomalies_two_anomalies",
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  0.9107785991402203
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  0.7991636327966004
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "test_find_anomalies_open_end",
                  0.9655172413793103
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  0.9352524402713824
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  0.777615791359739
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "test_find_anomalies_lower_threshold",
                  0.7380952380952379
                ],
                [
                  "test_find_anomalies_open_start",
                  "test_find_anomalies_two_anomalies",
                  0.9693996800117235
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  0.9891998725800367
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "test_find_anomalies_lower_threshold",
                  0.9098680561400193
                ],
                [
                  "test_find_anomalies_two_anomalies",
                  "test_find_anomalies_lower_threshold",
                  0.9129115544808832
                ],
                [
                  "test_find_anomalies_open_end",
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  0.9117460107822462
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "test_find_anomalies_one_anomaly",
                  0.7692520838274709
                ],
                [
                  "test_find_anomalies_open_end",
                  "test_find_anomalies_two_anomalies",
                  0.9693996800117235
                ],
                [
                  "test_find_anomalies_open_start",
                  "test_find_anomalies_open_end",
                  0.982758620689655
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "test_find_anomalies_two_anomalies",
                  0.9693996800117235
                ],
                [
                  "test_find_anomalies_open_end",
                  "test_find_anomalies_lower_threshold",
                  0.9098680561400193
                ],
                [
                  "test_find_anomalies_open_end",
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  0.8899461588783806
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "test_find_anomalies_open_start",
                  0.9655172413793103
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  0.9117460107822462
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "test_find_anomalies_open_start",
                  0.7692520838274709
                ],
                [
                  "test_find_anomalies_open_start",
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  0.8899461588783806
                ],
                [
                  "test_find_anomalies_one_anomaly",
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  0.8899461588783806
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "test_find_anomalies_open_end",
                  0.7692520838274709
                ],
                [
                  "test_find_anomalies_open_start",
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  0.9117460107822462
                ],
                [
                  "test_find_anomalies_no_anomalies",
                  "test_find_anomalies_two_anomalies",
                  0.7621950242599828
                ],
                [
                  "test_find_anomalies_open_start",
                  "test_find_anomalies_lower_threshold",
                  0.9098680561400193
                ],
                [
                  "test_find_anomalies_multiple_overlapping_thresholds",
                  "test_find_anomalies_lower_threshold",
                  0.8611991659360626
                ],
                [
                  "test_find_anomalies_multiple_non_overlapping_thresholds",
                  "test_find_anomalies_lower_threshold",
                  0.8812978968743709
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_find_anomalies_lower_threshold",
                "false"
              ],
              [
                "test_find_anomalies_open_start",
                "false"
              ],
              [
                "test_find_anomalies_multiple_non_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_open_end",
                "false"
              ],
              [
                "test_find_anomalies_no_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_two_anomalies",
                "false"
              ],
              [
                "test_find_anomalies_multiple_overlapping_thresholds",
                "false"
              ],
              [
                "test_find_anomalies_one_anomaly",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_custom_\u0026_test_timeseries_preprocessing.py",
    "testCases": [
      {
        "name": "IntervalsToMaskTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_end_index",
                  "[]"
                ],
                [
                  "test_exceed_index_end",
                  "[]"
                ],
                [
                  "test_start_index",
                  "[]"
                ],
                [
                  "test_whole_index",
                  "[]"
                ],
                [
                  "test_exceed_index",
                  "[]"
                ],
                [
                  "test_two_intervals_list",
                  "[]"
                ],
                [
                  "test_empty_list",
                  "[]"
                ],
                [
                  "test_one_interval",
                  "[]"
                ],
                [
                  "test_no_intervals",
                  "[]"
                ],
                [
                  "test_empty_array",
                  "[]"
                ],
                [
                  "test_two_intervals",
                  "[]"
                ],
                [
                  "test_exceed_index_start",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_end_index",
                  "[]"
                ],
                [
                  "test_exceed_index_end",
                  "[]"
                ],
                [
                  "test_start_index",
                  "[]"
                ],
                [
                  "test_whole_index",
                  "[]"
                ],
                [
                  "test_exceed_index",
                  "[]"
                ],
                [
                  "test_two_intervals_list",
                  "[]"
                ],
                [
                  "test_empty_list",
                  "[]"
                ],
                [
                  "test_one_interval",
                  "[]"
                ],
                [
                  "test_no_intervals",
                  "[]"
                ],
                [
                  "test_empty_array",
                  "[]"
                ],
                [
                  "test_two_intervals",
                  "[]"
                ],
                [
                  "test_exceed_index_start",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_end_index",
                  "false"
                ],
                [
                  "test_exceed_index_end",
                  "false"
                ],
                [
                  "test_start_index",
                  "false"
                ],
                [
                  "test_whole_index",
                  "false"
                ],
                [
                  "test_exceed_index",
                  "false"
                ],
                [
                  "test_two_intervals_list",
                  "false"
                ],
                [
                  "test_empty_list",
                  "false"
                ],
                [
                  "test_one_interval",
                  "false"
                ],
                [
                  "test_no_intervals",
                  "false"
                ],
                [
                  "test_empty_array",
                  "false"
                ],
                [
                  "test_two_intervals",
                  "false"
                ],
                [
                  "test_exceed_index_start",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_end_index",
                  "false"
                ],
                [
                  "test_exceed_index_end",
                  "false"
                ],
                [
                  "test_start_index",
                  "false"
                ],
                [
                  "test_whole_index",
                  "false"
                ],
                [
                  "test_exceed_index",
                  "false"
                ],
                [
                  "test_two_intervals_list",
                  "false"
                ],
                [
                  "test_empty_list",
                  "false"
                ],
                [
                  "test_one_interval",
                  "false"
                ],
                [
                  "test_no_intervals",
                  "false"
                ],
                [
                  "test_empty_array",
                  "false"
                ],
                [
                  "test_two_intervals",
                  "false"
                ],
                [
                  "test_exceed_index_start",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_end_index",
                  "false"
                ],
                [
                  "test_exceed_index_end",
                  "false"
                ],
                [
                  "test_start_index",
                  "false"
                ],
                [
                  "test_whole_index",
                  "false"
                ],
                [
                  "test_exceed_index",
                  "false"
                ],
                [
                  "test_two_intervals_list",
                  "false"
                ],
                [
                  "test_empty_list",
                  "false"
                ],
                [
                  "test_one_interval",
                  "false"
                ],
                [
                  "test_no_intervals",
                  "false"
                ],
                [
                  "test_empty_array",
                  "false"
                ],
                [
                  "test_two_intervals",
                  "false"
                ],
                [
                  "test_exceed_index_start",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_end_index",
                  "false"
                ],
                [
                  "test_exceed_index_end",
                  "false"
                ],
                [
                  "test_start_index",
                  "false"
                ],
                [
                  "test_whole_index",
                  "false"
                ],
                [
                  "test_exceed_index",
                  "false"
                ],
                [
                  "test_two_intervals_list",
                  "false"
                ],
                [
                  "test_empty_list",
                  "false"
                ],
                [
                  "test_one_interval",
                  "false"
                ],
                [
                  "test_no_intervals",
                  "false"
                ],
                [
                  "test_empty_array",
                  "false"
                ],
                [
                  "test_two_intervals",
                  "false"
                ],
                [
                  "test_exceed_index_start",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                "false"
              ],
              [
                "test_exceed_index_end",
                "false"
              ],
              [
                "test_start_index",
                "false"
              ],
              [
                "test_whole_index",
                "false"
              ],
              [
                "test_exceed_index",
                "false"
              ],
              [
                "test_two_intervals_list",
                "false"
              ],
              [
                "test_empty_list",
                "false"
              ],
              [
                "test_one_interval",
                "false"
              ],
              [
                "test_no_intervals",
                "false"
              ],
              [
                "test_empty_array",
                "false"
              ],
              [
                "test_two_intervals",
                "false"
              ],
              [
                "test_exceed_index_start",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                "false"
              ],
              [
                "test_exceed_index_end",
                "false"
              ],
              [
                "test_start_index",
                "false"
              ],
              [
                "test_whole_index",
                "false"
              ],
              [
                "test_exceed_index",
                "false"
              ],
              [
                "test_two_intervals_list",
                "false"
              ],
              [
                "test_empty_list",
                "false"
              ],
              [
                "test_one_interval",
                "false"
              ],
              [
                "test_no_intervals",
                "false"
              ],
              [
                "test_empty_array",
                "false"
              ],
              [
                "test_two_intervals",
                "false"
              ],
              [
                "test_exceed_index_start",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                []
              ],
              [
                "test_exceed_index_end",
                []
              ],
              [
                "test_start_index",
                []
              ],
              [
                "test_whole_index",
                []
              ],
              [
                "test_exceed_index",
                []
              ],
              [
                "test_two_intervals_list",
                []
              ],
              [
                "test_empty_list",
                []
              ],
              [
                "test_one_interval",
                []
              ],
              [
                "test_no_intervals",
                []
              ],
              [
                "test_empty_array",
                []
              ],
              [
                "test_two_intervals",
                []
              ],
              [
                "test_exceed_index_start",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                "false"
              ],
              [
                "test_exceed_index_end",
                "false"
              ],
              [
                "test_start_index",
                "false"
              ],
              [
                "test_whole_index",
                "false"
              ],
              [
                "test_exceed_index",
                "false"
              ],
              [
                "test_two_intervals_list",
                "false"
              ],
              [
                "test_empty_list",
                "false"
              ],
              [
                "test_one_interval",
                "false"
              ],
              [
                "test_no_intervals",
                "false"
              ],
              [
                "test_empty_array",
                "false"
              ],
              [
                "test_two_intervals",
                "false"
              ],
              [
                "test_exceed_index_start",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                "false"
              ],
              [
                "test_exceed_index_end",
                "false"
              ],
              [
                "test_start_index",
                "false"
              ],
              [
                "test_whole_index",
                "false"
              ],
              [
                "test_exceed_index",
                "false"
              ],
              [
                "test_two_intervals_list",
                "false"
              ],
              [
                "test_empty_list",
                "false"
              ],
              [
                "test_one_interval",
                "false"
              ],
              [
                "test_no_intervals",
                "false"
              ],
              [
                "test_empty_array",
                "false"
              ],
              [
                "test_two_intervals",
                "false"
              ],
              [
                "test_exceed_index_start",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_end_index",
                  "0"
                ],
                [
                  "test_exceed_index_end",
                  "0"
                ],
                [
                  "test_start_index",
                  "0"
                ],
                [
                  "test_whole_index",
                  "0"
                ],
                [
                  "test_exceed_index",
                  "0"
                ],
                [
                  "test_two_intervals_list",
                  "0"
                ],
                [
                  "test_empty_list",
                  "0"
                ],
                [
                  "test_one_interval",
                  "0"
                ],
                [
                  "test_no_intervals",
                  "0"
                ],
                [
                  "test_empty_array",
                  "0"
                ],
                [
                  "test_two_intervals",
                  "0"
                ],
                [
                  "test_exceed_index_start",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_end_index",
                  "0"
                ],
                [
                  "test_exceed_index_end",
                  "0"
                ],
                [
                  "test_start_index",
                  "0"
                ],
                [
                  "test_whole_index",
                  "0"
                ],
                [
                  "test_exceed_index",
                  "0"
                ],
                [
                  "test_two_intervals_list",
                  "0"
                ],
                [
                  "test_empty_list",
                  "0"
                ],
                [
                  "test_one_interval",
                  "0"
                ],
                [
                  "test_no_intervals",
                  "0"
                ],
                [
                  "test_empty_array",
                  "0"
                ],
                [
                  "test_two_intervals",
                  "0"
                ],
                [
                  "test_exceed_index_start",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                "false"
              ],
              [
                "test_exceed_index_end",
                "false"
              ],
              [
                "test_start_index",
                "false"
              ],
              [
                "test_whole_index",
                "false"
              ],
              [
                "test_exceed_index",
                "false"
              ],
              [
                "test_two_intervals_list",
                "false"
              ],
              [
                "test_empty_list",
                "false"
              ],
              [
                "test_one_interval",
                "false"
              ],
              [
                "test_no_intervals",
                "false"
              ],
              [
                "test_empty_array",
                "false"
              ],
              [
                "test_two_intervals",
                "false"
              ],
              [
                "test_exceed_index_start",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                "false"
              ],
              [
                "test_exceed_index_end",
                "false"
              ],
              [
                "test_start_index",
                "false"
              ],
              [
                "test_whole_index",
                "false"
              ],
              [
                "test_exceed_index",
                "false"
              ],
              [
                "test_two_intervals_list",
                "false"
              ],
              [
                "test_empty_list",
                "false"
              ],
              [
                "test_one_interval",
                "false"
              ],
              [
                "test_no_intervals",
                "false"
              ],
              [
                "test_empty_array",
                "false"
              ],
              [
                "test_two_intervals",
                "false"
              ],
              [
                "test_exceed_index_start",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_end_index",
                "0"
              ],
              [
                "test_exceed_index_end",
                "0"
              ],
              [
                "test_start_index",
                "0"
              ],
              [
                "test_whole_index",
                "0"
              ],
              [
                "test_exceed_index",
                "0"
              ],
              [
                "test_two_intervals_list",
                "0"
              ],
              [
                "test_empty_list",
                "0"
              ],
              [
                "test_one_interval",
                "0"
              ],
              [
                "test_no_intervals",
                "0"
              ],
              [
                "test_empty_array",
                "0"
              ],
              [
                "test_two_intervals",
                "0"
              ],
              [
                "test_exceed_index_start",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_exceed_index_end",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_start_index",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_whole_index",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_exceed_index",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_two_intervals_list",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_empty_list",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_one_interval",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_no_intervals",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_empty_array",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_two_intervals",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ],
              [
                "test_exceed_index_start",
                [
                  "intervals",
                  "expected",
                  "index"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                []
              ],
              [
                "test_exceed_index_end",
                []
              ],
              [
                "test_start_index",
                []
              ],
              [
                "test_whole_index",
                []
              ],
              [
                "test_exceed_index",
                []
              ],
              [
                "test_two_intervals_list",
                []
              ],
              [
                "test_empty_list",
                []
              ],
              [
                "test_one_interval",
                []
              ],
              [
                "test_no_intervals",
                []
              ],
              [
                "test_empty_array",
                []
              ],
              [
                "test_two_intervals",
                []
              ],
              [
                "test_exceed_index_start",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9156861260789091,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_two_intervals_list",
                  "test_start_index",
                  0.9535232006087934
                ],
                [
                  "test_two_intervals_list",
                  "test_exceed_index_start",
                  0.884599395318419
                ],
                [
                  "test_two_intervals",
                  "test_two_intervals_list",
                  0.988775508956003
                ],
                [
                  "test_two_intervals",
                  "test_exceed_index",
                  0.8738908624603482
                ],
                [
                  "test_whole_index",
                  "test_exceed_index_start",
                  0.9416780774719995
                ],
                [
                  "test_start_index",
                  "test_end_index",
                  0.9693877551020408
                ],
                [
                  "test_start_index",
                  "test_exceed_index_end",
                  0.9379142906311908
                ],
                [
                  "test_empty_list",
                  "test_start_index",
                  0.9091372900969897
                ],
                [
                  "test_one_interval",
                  "test_exceed_index",
                  0.9201247529086886
                ],
                [
                  "test_no_intervals",
                  "test_start_index",
                  0.9168656608439085
                ],
                [
                  "test_empty_array",
                  "test_two_intervals_list",
                  0.872971613702742
                ],
                [
                  "test_empty_list",
                  "test_one_interval",
                  0.9091372900969897
                ],
                [
                  "test_empty_array",
                  "test_exceed_index",
                  0.847963604524292
                ],
                [
                  "test_no_intervals",
                  "test_exceed_index_start",
                  0.8567628336893993
                ],
                [
                  "test_one_interval",
                  "test_end_index",
                  0.9387755102040817
                ],
                [
                  "test_empty_list",
                  "test_empty_array",
                  0.9753086419753086
                ],
                [
                  "test_no_intervals",
                  "test_empty_array",
                  0.9626598298415404
                ],
                [
                  "test_one_interval",
                  "test_two_intervals",
                  0.9523886328415343
                ],
                [
                  "test_one_interval",
                  "test_exceed_index_end",
                  0.9132323356145806
                ],
                [
                  "test_empty_list",
                  "test_exceed_index_start",
                  0.8560771774988032
                ],
                [
                  "test_empty_array",
                  "test_exceed_index_end",
                  0.895909258612905
                ],
                [
                  "test_two_intervals_list",
                  "test_exceed_index_end",
                  0.8769890095951838
                ],
                [
                  "test_exceed_index_end",
                  "test_exceed_index",
                  0.962433219707791
                ],
                [
                  "test_no_intervals",
                  "test_empty_list",
                  0.9626598298415404
                ],
                [
                  "test_exceed_index_start",
                  "test_exceed_index",
                  0.9632008196945053
                ],
                [
                  "test_no_intervals",
                  "test_exceed_index_end",
                  0.8946579399243448
                ],
                [
                  "test_no_intervals",
                  "test_one_interval",
                  0.9168656608439085
                ],
                [
                  "test_end_index",
                  "test_exceed_index_end",
                  0.950255268139496
                ],
                [
                  "test_empty_list",
                  "test_exceed_index_end",
                  0.895909258612905
                ],
                [
                  "test_two_intervals",
                  "test_exceed_index_end",
                  0.8604060131488428
                ],
                [
                  "test_empty_list",
                  "test_two_intervals",
                  0.870874812512166
                ],
                [
                  "test_one_interval",
                  "test_exceed_index_start",
                  0.9242213762523556
                ],
                [
                  "test_empty_array",
                  "test_two_intervals",
                  0.870874812512166
                ],
                [
                  "test_one_interval",
                  "test_two_intervals_list",
                  0.9421037610805443
                ],
                [
                  "test_empty_array",
                  "test_exceed_index_start",
                  0.8560771774988032
                ],
                [
                  "test_no_intervals",
                  "test_exceed_index",
                  0.8506264994993676
                ],
                [
                  "test_empty_list",
                  "test_exceed_index",
                  0.847963604524292
                ],
                [
                  "test_empty_array",
                  "test_start_index",
                  0.9091372900969897
                ],
                [
                  "test_no_intervals",
                  "test_two_intervals_list",
                  0.8919804488136883
                ],
                [
                  "test_start_index",
                  "test_whole_index",
                  0.9701940582194069
                ],
                [
                  "test_no_intervals",
                  "test_two_intervals",
                  0.8962860914470029
                ],
                [
                  "test_whole_index",
                  "test_exceed_index",
                  0.9750298988361742
                ],
                [
                  "test_two_intervals",
                  "test_start_index",
                  0.9409140710000701
                ],
                [
                  "test_end_index",
                  "test_whole_index",
                  0.9501900570190067
                ],
                [
                  "test_one_interval",
                  "test_whole_index",
                  0.9401880564188067
                ],
                [
                  "test_empty_list",
                  "test_two_intervals_list",
                  0.8792519850243445
                ],
                [
                  "test_empty_array",
                  "test_one_interval",
                  0.9091372900969897
                ],
                [
                  "test_two_intervals",
                  "test_exceed_index_start",
                  0.8683570381870875
                ],
                [
                  "test_whole_index",
                  "test_exceed_index_end",
                  0.9314364687029028
                ],
                [
                  "test_two_intervals_list",
                  "test_whole_index",
                  0.9402363280395559
                ],
                [
                  "test_empty_array",
                  "test_whole_index",
                  0.8471262312133769
                ],
                [
                  "test_empty_array",
                  "test_end_index",
                  0.9315851244203722
                ],
                [
                  "test_two_intervals_list",
                  "test_end_index",
                  0.9363940413164198
                ],
                [
                  "test_end_index",
                  "test_exceed_index",
                  0.9449929894737883
                ],
                [
                  "test_start_index",
                  "test_exceed_index",
                  0.9574271077563381
                ],
                [
                  "test_start_index",
                  "test_exceed_index_start",
                  0.9485429914168912
                ],
                [
                  "test_two_intervals",
                  "test_whole_index",
                  0.927903924229023
                ],
                [
                  "test_end_index",
                  "test_exceed_index_start",
                  0.9120605686700878
                ],
                [
                  "test_no_intervals",
                  "test_whole_index",
                  0.8578577387159502
                ],
                [
                  "test_two_intervals_list",
                  "test_exceed_index",
                  0.8905654309016324
                ],
                [
                  "test_no_intervals",
                  "test_end_index",
                  0.9377035167721792
                ],
                [
                  "test_one_interval",
                  "test_start_index",
                  0.9591836734693877
                ],
                [
                  "test_empty_list",
                  "test_end_index",
                  0.9315851244203722
                ],
                [
                  "test_exceed_index_start",
                  "test_exceed_index_end",
                  0.9559857306901339
                ],
                [
                  "test_two_intervals",
                  "test_end_index",
                  0.9237022282378736
                ],
                [
                  "test_empty_list",
                  "test_whole_index",
                  0.8471262312133769
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_end_index",
                "false"
              ],
              [
                "test_exceed_index_end",
                "false"
              ],
              [
                "test_start_index",
                "false"
              ],
              [
                "test_whole_index",
                "false"
              ],
              [
                "test_exceed_index",
                "false"
              ],
              [
                "test_two_intervals_list",
                "false"
              ],
              [
                "test_empty_list",
                "false"
              ],
              [
                "test_one_interval",
                "false"
              ],
              [
                "test_no_intervals",
                "false"
              ],
              [
                "test_empty_array",
                "false"
              ],
              [
                "test_two_intervals",
                "false"
              ],
              [
                "test_exceed_index_start",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 12
      },
      {
        "name": "RollingWindowSequencesTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_drop_float",
                  "[]"
                ],
                [
                  "test_drop_str",
                  "[]"
                ],
                [
                  "test_drop_bool",
                  "[]"
                ],
                [
                  "test_drop_mask",
                  "[]"
                ],
                [
                  "test_drop_float_nan",
                  "[]"
                ],
                [
                  "test_no_drop",
                  "[]"
                ],
                [
                  "test_drop_None",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_drop_float",
                  "[]"
                ],
                [
                  "test_drop_str",
                  "[]"
                ],
                [
                  "test_drop_bool",
                  "[]"
                ],
                [
                  "test_drop_mask",
                  "[]"
                ],
                [
                  "test_drop_float_nan",
                  "[]"
                ],
                [
                  "test_no_drop",
                  "[]"
                ],
                [
                  "test_drop_None",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_drop_float",
                  "false"
                ],
                [
                  "test_drop_str",
                  "false"
                ],
                [
                  "test_drop_bool",
                  "false"
                ],
                [
                  "test_drop_mask",
                  "false"
                ],
                [
                  "test_drop_float_nan",
                  "false"
                ],
                [
                  "test_no_drop",
                  "false"
                ],
                [
                  "test_drop_None",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_drop_float",
                  "false"
                ],
                [
                  "test_drop_str",
                  "false"
                ],
                [
                  "test_drop_bool",
                  "false"
                ],
                [
                  "test_drop_mask",
                  "false"
                ],
                [
                  "test_drop_float_nan",
                  "false"
                ],
                [
                  "test_no_drop",
                  "false"
                ],
                [
                  "test_drop_None",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_drop_float",
                  "false"
                ],
                [
                  "test_drop_str",
                  "false"
                ],
                [
                  "test_drop_bool",
                  "false"
                ],
                [
                  "test_drop_mask",
                  "false"
                ],
                [
                  "test_drop_float_nan",
                  "false"
                ],
                [
                  "test_no_drop",
                  "false"
                ],
                [
                  "test_drop_None",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_drop_float",
                  "false"
                ],
                [
                  "test_drop_str",
                  "false"
                ],
                [
                  "test_drop_bool",
                  "false"
                ],
                [
                  "test_drop_mask",
                  "false"
                ],
                [
                  "test_drop_float_nan",
                  "false"
                ],
                [
                  "test_no_drop",
                  "false"
                ],
                [
                  "test_drop_None",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                "false"
              ],
              [
                "test_drop_str",
                "false"
              ],
              [
                "test_drop_bool",
                "false"
              ],
              [
                "test_drop_mask",
                "false"
              ],
              [
                "test_drop_float_nan",
                "false"
              ],
              [
                "test_no_drop",
                "false"
              ],
              [
                "test_drop_None",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                "false"
              ],
              [
                "test_drop_str",
                "false"
              ],
              [
                "test_drop_bool",
                "false"
              ],
              [
                "test_drop_mask",
                "false"
              ],
              [
                "test_drop_float_nan",
                "false"
              ],
              [
                "test_no_drop",
                "false"
              ],
              [
                "test_drop_None",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                []
              ],
              [
                "test_drop_str",
                []
              ],
              [
                "test_drop_bool",
                []
              ],
              [
                "test_drop_mask",
                []
              ],
              [
                "test_drop_float_nan",
                []
              ],
              [
                "test_no_drop",
                []
              ],
              [
                "test_drop_None",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                "false"
              ],
              [
                "test_drop_str",
                "false"
              ],
              [
                "test_drop_bool",
                "false"
              ],
              [
                "test_drop_mask",
                "false"
              ],
              [
                "test_drop_float_nan",
                "false"
              ],
              [
                "test_no_drop",
                "false"
              ],
              [
                "test_drop_None",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                "false"
              ],
              [
                "test_drop_str",
                "false"
              ],
              [
                "test_drop_bool",
                "false"
              ],
              [
                "test_drop_mask",
                "false"
              ],
              [
                "test_drop_float_nan",
                "false"
              ],
              [
                "test_no_drop",
                "false"
              ],
              [
                "test_drop_None",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_drop_float",
                  "0"
                ],
                [
                  "test_drop_str",
                  "0"
                ],
                [
                  "test_drop_bool",
                  "0"
                ],
                [
                  "test_drop_mask",
                  "0"
                ],
                [
                  "test_drop_float_nan",
                  "0"
                ],
                [
                  "test_no_drop",
                  "0"
                ],
                [
                  "test_drop_None",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_drop_float",
                  "0"
                ],
                [
                  "test_drop_str",
                  "0"
                ],
                [
                  "test_drop_bool",
                  "0"
                ],
                [
                  "test_drop_mask",
                  "0"
                ],
                [
                  "test_drop_float_nan",
                  "0"
                ],
                [
                  "test_no_drop",
                  "0"
                ],
                [
                  "test_drop_None",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                "false"
              ],
              [
                "test_drop_str",
                "false"
              ],
              [
                "test_drop_bool",
                "false"
              ],
              [
                "test_drop_mask",
                "false"
              ],
              [
                "test_drop_float_nan",
                "false"
              ],
              [
                "test_no_drop",
                "false"
              ],
              [
                "test_drop_None",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                "false"
              ],
              [
                "test_drop_str",
                "false"
              ],
              [
                "test_drop_bool",
                "false"
              ],
              [
                "test_drop_mask",
                "false"
              ],
              [
                "test_drop_float_nan",
                "false"
              ],
              [
                "test_no_drop",
                "false"
              ],
              [
                "test_drop_None",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_drop_float",
                "0"
              ],
              [
                "test_drop_str",
                "0"
              ],
              [
                "test_drop_bool",
                "0"
              ],
              [
                "test_drop_mask",
                "0"
              ],
              [
                "test_drop_float_nan",
                "0"
              ],
              [
                "test_no_drop",
                "0"
              ],
              [
                "test_drop_None",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                [
                  "drop",
                  "expected_X_index",
                  "expected_y_index",
                  "X",
                  "index",
                  "expected_X",
                  "expected_y"
                ]
              ],
              [
                "test_drop_str",
                [
                  "drop",
                  "expected_X_index",
                  "expected_y_index",
                  "X",
                  "index",
                  "expected_X",
                  "expected_y"
                ]
              ],
              [
                "test_drop_bool",
                [
                  "drop",
                  "expected_X_index",
                  "expected_y_index",
                  "X",
                  "index",
                  "expected_X",
                  "expected_y"
                ]
              ],
              [
                "test_drop_mask",
                [
                  "drop",
                  "expected_X_index",
                  "expected_y_index",
                  "X",
                  "index",
                  "expected_X",
                  "expected_y"
                ]
              ],
              [
                "test_drop_float_nan",
                [
                  "drop",
                  "expected_X_index",
                  "expected_y_index",
                  "X",
                  "index",
                  "expected_X",
                  "expected_y"
                ]
              ],
              [
                "test_no_drop",
                [
                  "expected_X_index",
                  "expected_y_index",
                  "X",
                  "index",
                  "expected_X",
                  "expected_y"
                ]
              ],
              [
                "test_drop_None",
                [
                  "drop",
                  "expected_X_index",
                  "expected_y_index",
                  "X",
                  "index",
                  "expected_X",
                  "expected_y"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                []
              ],
              [
                "test_drop_str",
                []
              ],
              [
                "test_drop_bool",
                []
              ],
              [
                "test_drop_mask",
                []
              ],
              [
                "test_drop_float_nan",
                []
              ],
              [
                "test_no_drop",
                []
              ],
              [
                "test_drop_None",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9664188849212947,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_no_drop",
                  "test_drop_str",
                  0.9503754999148804
                ],
                [
                  "test_drop_float",
                  "test_drop_str",
                  0.9910059042860111
                ],
                [
                  "test_no_drop",
                  "test_drop_mask",
                  0.9187149352449459
                ],
                [
                  "test_drop_float_nan",
                  "test_drop_str",
                  0.9901512311661845
                ],
                [
                  "test_drop_mask",
                  "test_drop_float_nan",
                  0.9420112993319478
                ],
                [
                  "test_drop_mask",
                  "test_drop_str",
                  0.9432833261006814
                ],
                [
                  "test_no_drop",
                  "test_drop_None",
                  0.9501179619026848
                ],
                [
                  "test_drop_float",
                  "test_drop_None",
                  0.9909207425452311
                ],
                [
                  "test_drop_mask",
                  "test_drop_float",
                  0.9466330836619156
                ],
                [
                  "test_no_drop",
                  "test_drop_float",
                  0.9368217657443845
                ],
                [
                  "test_drop_float_nan",
                  "test_drop_bool",
                  0.9882594583024442
                ],
                [
                  "test_drop_float",
                  "test_drop_bool",
                  0.9914580512699043
                ],
                [
                  "test_drop_str",
                  "test_drop_bool",
                  0.9901301964586838
                ],
                [
                  "test_drop_None",
                  "test_drop_float_nan",
                  0.9875677951716476
                ],
                [
                  "test_no_drop",
                  "test_drop_bool",
                  0.9504182720912397
                ],
                [
                  "test_drop_None",
                  "test_drop_str",
                  0.989393054702676
                ],
                [
                  "test_drop_mask",
                  "test_drop_None",
                  0.9566426509367548
                ],
                [
                  "test_no_drop",
                  "test_drop_float_nan",
                  0.9473837518249574
                ],
                [
                  "test_drop_float",
                  "test_drop_float_nan",
                  0.9893289784635757
                ],
                [
                  "test_drop_None",
                  "test_drop_bool",
                  0.9924528397532771
                ],
                [
                  "test_drop_mask",
                  "test_drop_bool",
                  0.9517257844731607
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_drop_float",
                "false"
              ],
              [
                "test_drop_str",
                "false"
              ],
              [
                "test_drop_bool",
                "false"
              ],
              [
                "test_drop_mask",
                "false"
              ],
              [
                "test_drop_float_nan",
                "false"
              ],
              [
                "test_no_drop",
                "false"
              ],
              [
                "test_drop_None",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "TimeSegmentsAverageTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_array",
                  "[]"
                ],
                [
                  "test_pandas_dataframe",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_array",
                  "[]"
                ],
                [
                  "test_pandas_dataframe",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_array",
                  "false"
                ],
                [
                  "test_pandas_dataframe",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_array",
                  "false"
                ],
                [
                  "test_pandas_dataframe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_array",
                  "false"
                ],
                [
                  "test_pandas_dataframe",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_array",
                  "false"
                ],
                [
                  "test_pandas_dataframe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                "false"
              ],
              [
                "test_pandas_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                "false"
              ],
              [
                "test_pandas_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                []
              ],
              [
                "test_pandas_dataframe",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                "false"
              ],
              [
                "test_pandas_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                "false"
              ],
              [
                "test_pandas_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_array",
                  "0"
                ],
                [
                  "test_pandas_dataframe",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_array",
                  "0"
                ],
                [
                  "test_pandas_dataframe",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                "false"
              ],
              [
                "test_pandas_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                "false"
              ],
              [
                "test_pandas_dataframe",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_array",
                "0"
              ],
              [
                "test_pandas_dataframe",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                [
                  "X",
                  "interval",
                  "expected_values",
                  "expected_index"
                ]
              ],
              [
                "test_pandas_dataframe",
                [
                  "X",
                  "interval",
                  "expected_values",
                  "expected_index"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                []
              ],
              [
                "test_pandas_dataframe",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9585458174882711,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_array",
                  "test_pandas_dataframe",
                  0.9585458174882711
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_array",
                "false"
              ],
              [
                "test_pandas_dataframe",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TimeSegmentsAggregateTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_pandas_dataframe",
                  "[]"
                ],
                [
                  "test_multiple",
                  "[]"
                ],
                [
                  "test_array",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_pandas_dataframe",
                  "[]"
                ],
                [
                  "test_multiple",
                  "[]"
                ],
                [
                  "test_array",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_pandas_dataframe",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_array",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_pandas_dataframe",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_array",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_pandas_dataframe",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_array",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_pandas_dataframe",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_array",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_array",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_array",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                []
              ],
              [
                "test_multiple",
                []
              ],
              [
                "test_array",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_array",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_array",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_pandas_dataframe",
                  "0"
                ],
                [
                  "test_multiple",
                  "0"
                ],
                [
                  "test_array",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_pandas_dataframe",
                  "0"
                ],
                [
                  "test_multiple",
                  "0"
                ],
                [
                  "test_array",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_array",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_array",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_pandas_dataframe",
                "0"
              ],
              [
                "test_multiple",
                "0"
              ],
              [
                "test_array",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                [
                  "X",
                  "interval",
                  "expected_values",
                  "expected_index"
                ]
              ],
              [
                "test_multiple",
                [
                  "X",
                  "interval",
                  "expected_values",
                  "expected_index"
                ]
              ],
              [
                "test_array",
                [
                  "X",
                  "interval",
                  "expected_values",
                  "expected_index"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                []
              ],
              [
                "test_multiple",
                []
              ],
              [
                "test_array",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.957841921558801,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_array",
                  "test_multiple",
                  0.9735689830687475
                ],
                [
                  "test_pandas_dataframe",
                  "test_multiple",
                  0.9414109641193842
                ],
                [
                  "test_array",
                  "test_pandas_dataframe",
                  0.9585458174882711
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_pandas_dataframe",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_array",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "CutoffWindowSequencesTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_multiple_filter",
                  "[]"
                ],
                [
                  "test_window_size_integer",
                  "[]"
                ],
                [
                  "test_cutoff_time_only",
                  "[]"
                ],
                [
                  "test_window_size_timedelta",
                  "[]"
                ],
                [
                  "test_not_enough_data",
                  "[]"
                ],
                [
                  "test_time_index_column",
                  "[]"
                ],
                [
                  "test_window_size_string",
                  "[]"
                ],
                [
                  "test_cutoff_time_column",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_multiple_filter",
                  "[]"
                ],
                [
                  "test_window_size_integer",
                  "[]"
                ],
                [
                  "test_cutoff_time_only",
                  "[]"
                ],
                [
                  "test_window_size_timedelta",
                  "[]"
                ],
                [
                  "test_not_enough_data",
                  "[PyAssertStatement]"
                ],
                [
                  "test_time_index_column",
                  "[]"
                ],
                [
                  "test_window_size_string",
                  "[]"
                ],
                [
                  "test_cutoff_time_column",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_multiple_filter",
                  "false"
                ],
                [
                  "test_window_size_integer",
                  "false"
                ],
                [
                  "test_cutoff_time_only",
                  "false"
                ],
                [
                  "test_window_size_timedelta",
                  "false"
                ],
                [
                  "test_not_enough_data",
                  "false"
                ],
                [
                  "test_time_index_column",
                  "false"
                ],
                [
                  "test_window_size_string",
                  "false"
                ],
                [
                  "test_cutoff_time_column",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_multiple_filter",
                  "false"
                ],
                [
                  "test_window_size_integer",
                  "false"
                ],
                [
                  "test_cutoff_time_only",
                  "false"
                ],
                [
                  "test_window_size_timedelta",
                  "false"
                ],
                [
                  "test_not_enough_data",
                  "false"
                ],
                [
                  "test_time_index_column",
                  "false"
                ],
                [
                  "test_window_size_string",
                  "false"
                ],
                [
                  "test_cutoff_time_column",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_multiple_filter",
                  "false"
                ],
                [
                  "test_window_size_integer",
                  "false"
                ],
                [
                  "test_cutoff_time_only",
                  "false"
                ],
                [
                  "test_window_size_timedelta",
                  "false"
                ],
                [
                  "test_not_enough_data",
                  "false"
                ],
                [
                  "test_time_index_column",
                  "false"
                ],
                [
                  "test_window_size_string",
                  "false"
                ],
                [
                  "test_cutoff_time_column",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_multiple_filter",
                  "false"
                ],
                [
                  "test_window_size_integer",
                  "false"
                ],
                [
                  "test_cutoff_time_only",
                  "false"
                ],
                [
                  "test_window_size_timedelta",
                  "false"
                ],
                [
                  "test_not_enough_data",
                  "false"
                ],
                [
                  "test_time_index_column",
                  "false"
                ],
                [
                  "test_window_size_string",
                  "false"
                ],
                [
                  "test_cutoff_time_column",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "false"
              ],
              [
                "test_window_size_integer",
                "false"
              ],
              [
                "test_cutoff_time_only",
                "false"
              ],
              [
                "test_window_size_timedelta",
                "false"
              ],
              [
                "test_not_enough_data",
                "false"
              ],
              [
                "test_time_index_column",
                "false"
              ],
              [
                "test_window_size_string",
                "false"
              ],
              [
                "test_cutoff_time_column",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "false"
              ],
              [
                "test_window_size_integer",
                "false"
              ],
              [
                "test_cutoff_time_only",
                "false"
              ],
              [
                "test_window_size_timedelta",
                "false"
              ],
              [
                "test_not_enough_data",
                "false"
              ],
              [
                "test_time_index_column",
                "false"
              ],
              [
                "test_window_size_string",
                "false"
              ],
              [
                "test_cutoff_time_column",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                []
              ],
              [
                "test_window_size_integer",
                []
              ],
              [
                "test_cutoff_time_only",
                []
              ],
              [
                "test_window_size_timedelta",
                []
              ],
              [
                "test_not_enough_data",
                []
              ],
              [
                "test_time_index_column",
                []
              ],
              [
                "test_window_size_string",
                []
              ],
              [
                "test_cutoff_time_column",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "false"
              ],
              [
                "test_window_size_integer",
                "false"
              ],
              [
                "test_cutoff_time_only",
                "false"
              ],
              [
                "test_window_size_timedelta",
                "false"
              ],
              [
                "test_not_enough_data",
                "false"
              ],
              [
                "test_time_index_column",
                "false"
              ],
              [
                "test_window_size_string",
                "false"
              ],
              [
                "test_cutoff_time_column",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "false"
              ],
              [
                "test_window_size_integer",
                "false"
              ],
              [
                "test_cutoff_time_only",
                "false"
              ],
              [
                "test_window_size_timedelta",
                "false"
              ],
              [
                "test_not_enough_data",
                "false"
              ],
              [
                "test_time_index_column",
                "false"
              ],
              [
                "test_window_size_string",
                "false"
              ],
              [
                "test_cutoff_time_column",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_multiple_filter",
                  "0"
                ],
                [
                  "test_window_size_integer",
                  "0"
                ],
                [
                  "test_cutoff_time_only",
                  "0"
                ],
                [
                  "test_window_size_timedelta",
                  "0"
                ],
                [
                  "test_not_enough_data",
                  "0"
                ],
                [
                  "test_time_index_column",
                  "0"
                ],
                [
                  "test_window_size_string",
                  "0"
                ],
                [
                  "test_cutoff_time_column",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_multiple_filter",
                  "0"
                ],
                [
                  "test_window_size_integer",
                  "0"
                ],
                [
                  "test_cutoff_time_only",
                  "0"
                ],
                [
                  "test_window_size_timedelta",
                  "0"
                ],
                [
                  "test_not_enough_data",
                  "0"
                ],
                [
                  "test_time_index_column",
                  "0"
                ],
                [
                  "test_window_size_string",
                  "0"
                ],
                [
                  "test_cutoff_time_column",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "false"
              ],
              [
                "test_window_size_integer",
                "false"
              ],
              [
                "test_cutoff_time_only",
                "false"
              ],
              [
                "test_window_size_timedelta",
                "false"
              ],
              [
                "test_not_enough_data",
                "false"
              ],
              [
                "test_time_index_column",
                "false"
              ],
              [
                "test_window_size_string",
                "false"
              ],
              [
                "test_cutoff_time_column",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "false"
              ],
              [
                "test_window_size_integer",
                "false"
              ],
              [
                "test_cutoff_time_only",
                "false"
              ],
              [
                "test_window_size_timedelta",
                "false"
              ],
              [
                "test_not_enough_data",
                "false"
              ],
              [
                "test_time_index_column",
                "false"
              ],
              [
                "test_window_size_string",
                "false"
              ],
              [
                "test_cutoff_time_column",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "1"
              ],
              [
                "test_window_size_integer",
                "1"
              ],
              [
                "test_cutoff_time_only",
                "1"
              ],
              [
                "test_window_size_timedelta",
                "1"
              ],
              [
                "test_not_enough_data",
                "3"
              ],
              [
                "test_time_index_column",
                "1"
              ],
              [
                "test_window_size_string",
                "1"
              ],
              [
                "test_cutoff_time_column",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ],
              [
                "test_window_size_integer",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ],
              [
                "test_cutoff_time_only",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ],
              [
                "test_window_size_timedelta",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ],
              [
                "test_not_enough_data",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ],
              [
                "test_time_index_column",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ],
              [
                "test_window_size_string",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ],
              [
                "test_cutoff_time_column",
                [
                  "timeseries",
                  "expected_array",
                  "array",
                  "X"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ],
              [
                "test_window_size_integer",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ],
              [
                "test_cutoff_time_only",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ],
              [
                "test_window_size_timedelta",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ],
              [
                "test_not_enough_data",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ],
              [
                "test_time_index_column",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ],
              [
                "test_window_size_string",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ],
              [
                "test_cutoff_time_column",
                [
                  "self.X",
                  "self.timeseries"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9092406617076099,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_time_index_column",
                  "test_window_size_string",
                  0.911475289544788
                ],
                [
                  "test_not_enough_data",
                  "test_multiple_filter",
                  0.848479228804539
                ],
                [
                  "test_window_size_timedelta",
                  "test_cutoff_time_only",
                  0.9252089526790103
                ],
                [
                  "test_window_size_integer",
                  "test_cutoff_time_only",
                  0.9315337910076619
                ],
                [
                  "test_time_index_column",
                  "test_window_size_timedelta",
                  0.9100879912762844
                ],
                [
                  "test_cutoff_time_column",
                  "test_window_size_integer",
                  0.910849064169863
                ],
                [
                  "test_cutoff_time_column",
                  "test_window_size_string",
                  0.9027572088079332
                ],
                [
                  "test_window_size_integer",
                  "test_window_size_string",
                  0.9821835246309985
                ],
                [
                  "test_time_index_column",
                  "test_window_size_integer",
                  0.9199494614230167
                ],
                [
                  "test_window_size_integer",
                  "test_multiple_filter",
                  0.9196274218422342
                ],
                [
                  "test_window_size_integer",
                  "test_window_size_timedelta",
                  0.9761483808509638
                ],
                [
                  "test_window_size_timedelta",
                  "test_not_enough_data",
                  0.8731187390852259
                ],
                [
                  "test_cutoff_time_column",
                  "test_not_enough_data",
                  0.843634396405529
                ],
                [
                  "test_not_enough_data",
                  "test_cutoff_time_only",
                  0.8567501832670972
                ],
                [
                  "test_window_size_string",
                  "test_multiple_filter",
                  0.9148177930610714
                ],
                [
                  "test_window_size_string",
                  "test_not_enough_data",
                  0.8744998954874089
                ],
                [
                  "test_cutoff_time_column",
                  "test_multiple_filter",
                  0.881750131097946
                ],
                [
                  "test_time_index_column",
                  "test_not_enough_data",
                  0.8546029598151993
                ],
                [
                  "test_cutoff_time_column",
                  "test_window_size_timedelta",
                  0.9010493890956103
                ],
                [
                  "test_time_index_column",
                  "test_multiple_filter",
                  0.8951173127186076
                ],
                [
                  "test_cutoff_time_only",
                  "test_multiple_filter",
                  0.9384972119516967
                ],
                [
                  "test_window_size_string",
                  "test_cutoff_time_only",
                  0.9248446535912359
                ],
                [
                  "test_cutoff_time_column",
                  "test_time_index_column",
                  0.9397899383400146
                ],
                [
                  "test_window_size_string",
                  "test_window_size_timedelta",
                  0.9762738269641331
                ],
                [
                  "test_time_index_column",
                  "test_cutoff_time_only",
                  0.9163333712341103
                ],
                [
                  "test_window_size_timedelta",
                  "test_multiple_filter",
                  0.9201992602035093
                ],
                [
                  "test_cutoff_time_column",
                  "test_cutoff_time_only",
                  0.9280942269540162
                ],
                [
                  "test_window_size_integer",
                  "test_not_enough_data",
                  0.8810649235033694
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_multiple_filter",
                "false"
              ],
              [
                "test_window_size_integer",
                "false"
              ],
              [
                "test_cutoff_time_only",
                "false"
              ],
              [
                "test_window_size_timedelta",
                "false"
              ],
              [
                "test_not_enough_data",
                "false"
              ],
              [
                "test_time_index_column",
                "false"
              ],
              [
                "test_window_size_string",
                "false"
              ],
              [
                "test_cutoff_time_column",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  }
]