[
  {
    "name": "tests_\u0026_test_list.py",
    "testCases": [
      {
        "name": "TestList",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ],
                [
                  "test_format_line_part2",
                  "[]"
                ],
                [
                  "test_format_line_part1",
                  "[]"
                ],
                [
                  "test_uppercase",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ],
                [
                  "test_format_line_part2",
                  "[]"
                ],
                [
                  "test_format_line_part1",
                  "[]"
                ],
                [
                  "test_uppercase",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ],
                [
                  "test_format_line_part2",
                  "false"
                ],
                [
                  "test_format_line_part1",
                  "false"
                ],
                [
                  "test_uppercase",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ],
                [
                  "test_format_line_part2",
                  "false"
                ],
                [
                  "test_format_line_part1",
                  "false"
                ],
                [
                  "test_uppercase",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ],
                [
                  "test_format_line_part2",
                  "false"
                ],
                [
                  "test_format_line_part1",
                  "false"
                ],
                [
                  "test_uppercase",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ],
                [
                  "test_format_line_part2",
                  "false"
                ],
                [
                  "test_format_line_part1",
                  "false"
                ],
                [
                  "test_uppercase",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ],
              [
                "test_format_line_part2",
                "false"
              ],
              [
                "test_format_line_part1",
                "false"
              ],
              [
                "test_uppercase",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ],
              [
                "test_format_line_part2",
                "false"
              ],
              [
                "test_format_line_part1",
                "false"
              ],
              [
                "test_uppercase",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ],
              [
                "test_format_line_part2",
                []
              ],
              [
                "test_format_line_part1",
                []
              ],
              [
                "test_uppercase",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ],
              [
                "test_format_line_part2",
                "false"
              ],
              [
                "test_format_line_part1",
                "false"
              ],
              [
                "test_uppercase",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ],
              [
                "test_format_line_part2",
                "false"
              ],
              [
                "test_format_line_part1",
                "false"
              ],
              [
                "test_uppercase",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ],
                [
                  "test_format_line_part2",
                  "0"
                ],
                [
                  "test_format_line_part1",
                  "0"
                ],
                [
                  "test_uppercase",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ],
                [
                  "test_format_line_part2",
                  "0"
                ],
                [
                  "test_format_line_part1",
                  "0"
                ],
                [
                  "test_uppercase",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ],
              [
                "test_format_line_part2",
                "false"
              ],
              [
                "test_format_line_part1",
                "false"
              ],
              [
                "test_uppercase",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ],
              [
                "test_format_line_part2",
                "false"
              ],
              [
                "test_format_line_part1",
                "false"
              ],
              [
                "test_uppercase",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ],
              [
                "test_format_line_part2",
                "0"
              ],
              [
                "test_format_line_part1",
                "0"
              ],
              [
                "test_uppercase",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "alist"
                ]
              ],
              [
                "test_format_line_part2",
                [
                  "alist"
                ]
              ],
              [
                "test_format_line_part1",
                [
                  "alist"
                ]
              ],
              [
                "test_uppercase",
                [
                  "alist"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ],
              [
                "test_format_line_part2",
                []
              ],
              [
                "test_format_line_part1",
                []
              ],
              [
                "test_uppercase",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.36120494885555066,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_format_line_part1",
                  "test_format_line_part2",
                  0.7951219057382348
                ],
                [
                  "test",
                  "test_format_line_part2",
                  0.21653278478430668
                ],
                [
                  "test_uppercase",
                  "test_format_line_part2",
                  0.1640825308284734
                ],
                [
                  "test",
                  "test_uppercase",
                  0.46188021535170054
                ],
                [
                  "test",
                  "test_format_line_part1",
                  0.30129743086188376
                ],
                [
                  "test_uppercase",
                  "test_format_line_part1",
                  0.22831482556870478
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ],
              [
                "test_format_line_part2",
                "false"
              ],
              [
                "test_format_line_part1",
                "false"
              ],
              [
                "test_uppercase",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_verify.py",
    "testCases": [
      {
        "name": "VerifyTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_verify_with_encoding",
                  "[]"
                ],
                [
                  "test_verify_with_newlines",
                  "[]"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "[]"
                ],
                [
                  "test_verify_xml",
                  "[]"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_verify_fail",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_verify_file",
                  "[]"
                ],
                [
                  "test_verify",
                  "[]"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "[]"
                ],
                [
                  "test_verify_as_json",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_verify_with_encoding",
                  "[]"
                ],
                [
                  "test_verify_with_newlines",
                  "[]"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "[]"
                ],
                [
                  "test_verify_xml",
                  "[]"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "[]"
                ],
                [
                  "test_verify_fail",
                  "[]"
                ],
                [
                  "test_verify_file",
                  "[]"
                ],
                [
                  "test_verify",
                  "[]"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "[]"
                ],
                [
                  "test_verify_as_json",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_verify_with_encoding",
                  "false"
                ],
                [
                  "test_verify_with_newlines",
                  "false"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "false"
                ],
                [
                  "test_verify_xml",
                  "false"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "false"
                ],
                [
                  "test_verify_fail",
                  "false"
                ],
                [
                  "test_verify_file",
                  "false"
                ],
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "false"
                ],
                [
                  "test_verify_as_json",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_verify_with_encoding",
                  "false"
                ],
                [
                  "test_verify_with_newlines",
                  "false"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "false"
                ],
                [
                  "test_verify_xml",
                  "false"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "false"
                ],
                [
                  "test_verify_fail",
                  "false"
                ],
                [
                  "test_verify_file",
                  "false"
                ],
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "false"
                ],
                [
                  "test_verify_as_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_verify_with_encoding",
                  "false"
                ],
                [
                  "test_verify_with_newlines",
                  "false"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "false"
                ],
                [
                  "test_verify_xml",
                  "false"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "false"
                ],
                [
                  "test_verify_fail",
                  "false"
                ],
                [
                  "test_verify_file",
                  "false"
                ],
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "false"
                ],
                [
                  "test_verify_as_json",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_verify_with_encoding",
                  "false"
                ],
                [
                  "test_verify_with_newlines",
                  "false"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "false"
                ],
                [
                  "test_verify_xml",
                  "false"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "false"
                ],
                [
                  "test_verify_fail",
                  "false"
                ],
                [
                  "test_verify_file",
                  "false"
                ],
                [
                  "test_verify",
                  "false"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "false"
                ],
                [
                  "test_verify_as_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify_with_encoding",
                "false"
              ],
              [
                "test_verify_with_newlines",
                "false"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "false"
              ],
              [
                "test_verify_xml",
                "false"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "false"
              ],
              [
                "test_verify_fail",
                "false"
              ],
              [
                "test_verify_file",
                "false"
              ],
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "false"
              ],
              [
                "test_verify_as_json",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_verify_with_encoding",
                "false"
              ],
              [
                "test_verify_with_newlines",
                "false"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "false"
              ],
              [
                "test_verify_xml",
                "false"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "false"
              ],
              [
                "test_verify_fail",
                "true"
              ],
              [
                "test_verify_file",
                "false"
              ],
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "false"
              ],
              [
                "test_verify_as_json",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_verify_with_encoding",
                []
              ],
              [
                "test_verify_with_newlines",
                []
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                []
              ],
              [
                "test_verify_xml",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                []
              ],
              [
                "test_verify_fail",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_file",
                []
              ],
              [
                "test_verify",
                []
              ],
              [
                "test_verify_with_errors_replacement_character",
                []
              ],
              [
                "test_verify_as_json",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify_with_encoding",
                "false"
              ],
              [
                "test_verify_with_newlines",
                "false"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "false"
              ],
              [
                "test_verify_xml",
                "false"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "false"
              ],
              [
                "test_verify_fail",
                "false"
              ],
              [
                "test_verify_file",
                "false"
              ],
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "false"
              ],
              [
                "test_verify_as_json",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify_with_encoding",
                "false"
              ],
              [
                "test_verify_with_newlines",
                "false"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "false"
              ],
              [
                "test_verify_xml",
                "false"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "false"
              ],
              [
                "test_verify_fail",
                "false"
              ],
              [
                "test_verify_file",
                "false"
              ],
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "false"
              ],
              [
                "test_verify_as_json",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_verify_with_encoding",
                  "0"
                ],
                [
                  "test_verify_with_newlines",
                  "0"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "0"
                ],
                [
                  "test_verify_xml",
                  "0"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "0"
                ],
                [
                  "test_verify_fail",
                  "0"
                ],
                [
                  "test_verify_file",
                  "0"
                ],
                [
                  "test_verify",
                  "0"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "0"
                ],
                [
                  "test_verify_as_json",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_verify_with_encoding",
                  "0"
                ],
                [
                  "test_verify_with_newlines",
                  "0"
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "0"
                ],
                [
                  "test_verify_xml",
                  "0"
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "0"
                ],
                [
                  "test_verify_fail",
                  "0"
                ],
                [
                  "test_verify_file",
                  "0"
                ],
                [
                  "test_verify",
                  "0"
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "0"
                ],
                [
                  "test_verify_as_json",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_verify_with_encoding",
                "false"
              ],
              [
                "test_verify_with_newlines",
                "false"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "false"
              ],
              [
                "test_verify_xml",
                "false"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "false"
              ],
              [
                "test_verify_fail",
                "false"
              ],
              [
                "test_verify_file",
                "false"
              ],
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "false"
              ],
              [
                "test_verify_as_json",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_verify_with_encoding",
                "false"
              ],
              [
                "test_verify_with_newlines",
                "false"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "false"
              ],
              [
                "test_verify_xml",
                "false"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "false"
              ],
              [
                "test_verify_fail",
                "false"
              ],
              [
                "test_verify_file",
                "false"
              ],
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "false"
              ],
              [
                "test_verify_as_json",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_verify_with_encoding",
                "0"
              ],
              [
                "test_verify_with_newlines",
                "0"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "0"
              ],
              [
                "test_verify_xml",
                "0"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "1"
              ],
              [
                "test_verify_fail",
                "2"
              ],
              [
                "test_verify_file",
                "0"
              ],
              [
                "test_verify",
                "0"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "0"
              ],
              [
                "test_verify_as_json",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_verify_with_encoding",
                []
              ],
              [
                "test_verify_with_newlines",
                []
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                [
                  "filename",
                  "name"
                ]
              ],
              [
                "test_verify_xml",
                [
                  "xml"
                ]
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                []
              ],
              [
                "test_verify_fail",
                [
                  "reporter"
                ]
              ],
              [
                "test_verify_file",
                [
                  "filename",
                  "name"
                ]
              ],
              [
                "test_verify",
                []
              ],
              [
                "test_verify_with_errors_replacement_character",
                []
              ],
              [
                "test_verify_as_json",
                [
                  "o"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_verify_with_encoding",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_with_newlines",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_xml",
                []
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_fail",
                []
              ],
              [
                "test_verify_file",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_with_errors_replacement_character",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_verify_as_json",
                [
                  "self.reporter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2582216170089019,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_verify_with_errors_replacement_character",
                  "test_verify_file_with_windows_1252_encoding",
                  0.34752402342845795
                ],
                [
                  "test_verify_with_newlines",
                  "test_verify_as_json",
                  0.05201564866102994
                ],
                [
                  "test_verify",
                  "test_verify_with_encoding",
                  0.24333213169614376
                ],
                [
                  "test_verify_as_json",
                  "test_verify_xml",
                  0.3008025478093644
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "test_verify_as_json",
                  0.2217095981894773
                ],
                [
                  "test_verify",
                  "test_verify_file_with_windows_1252_encoding",
                  0.2357022603955158
                ],
                [
                  "test_verify_file",
                  "test_verify_xml",
                  0.12680852498964826
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "test_verify_with_newlines",
                  0.11246431142310666
                ],
                [
                  "test_verify_with_newlines",
                  "test_verify_file",
                  0.12060453783110543
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_with_newlines",
                  0.24747528995589838
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_file_with_windows_1252_encoding",
                  0.3441236008058426
                ],
                [
                  "test_verify",
                  "test_verify_with_newlines",
                  0.09534625892455924
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_as_json",
                  0.28319693016191544
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "test_verify_with_errors_replacement_character",
                  0.3745029431365692
                ],
                [
                  "test_verify",
                  "test_verify_xml",
                  0.15037641213512565
                ],
                [
                  "test_verify_fail",
                  "test_verify_file_with_windows_1252_encoding",
                  0.3205079825469411
                ],
                [
                  "test_verify_fail",
                  "test_verify_xml",
                  0.20448187639439963
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_fail",
                  0.22058872208213906
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "test_verify_fail",
                  0.22203617017115182
                ],
                [
                  "test_verify_as_json",
                  "test_verify_file_with_windows_1252_encoding",
                  0.4757686623831167
                ],
                [
                  "test_verify",
                  "test_verify_file",
                  0.23717082451262844
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_with_errors_replacement_character",
                  0.3826918985879519
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "test_verify_with_newlines",
                  0.1937437918785931
                ],
                [
                  "test_verify_with_newlines",
                  "test_verify_xml",
                  0.03823420887355179
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "test_verify_xml",
                  0.10185505834130104
                ],
                [
                  "test_verify_with_newlines",
                  "test_verify_fail",
                  0.05556508399324771
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "test_verify_fail",
                  0.3150582325694126
                ],
                [
                  "test_verify",
                  "test_verify_with_errors_replacement_character",
                  0.29488391230979427
                ],
                [
                  "test_verify",
                  "test_verify_with_encoding_error_raises_value_error",
                  0.19050019050028574
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "test_verify_as_json",
                  0.4343553801592562
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_with_encoding_error_raises_value_error",
                  0.7004727969157798
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "test_verify_file_with_windows_1252_encoding",
                  0.2694079530401624
                ],
                [
                  "test_verify_fail",
                  "test_verify_as_json",
                  0.5828678671740339
                ],
                [
                  "test_verify_fail",
                  "test_verify_file",
                  0.18428853505018536
                ],
                [
                  "test_verify_as_json",
                  "test_verify_file",
                  0.2760262237369417
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_xml",
                  0.1301028014992284
                ],
                [
                  "test_verify_with_newlines",
                  "test_verify_file_with_windows_1252_encoding",
                  0.13483997249264842
                ],
                [
                  "test_verify",
                  "test_verify_as_json",
                  0.40915854419248565
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "test_verify_xml",
                  0.1773743389180635
                ],
                [
                  "test_verify_with_errors_replacement_character",
                  "test_verify_file",
                  0.18650096164806276
                ],
                [
                  "test_verify_with_encoding",
                  "test_verify_file",
                  0.2051956704170308
                ],
                [
                  "test_verify_with_encoding_error_raises_value_error",
                  "test_verify_file",
                  0.16064386578049977
                ],
                [
                  "test_verify_file",
                  "test_verify_file_with_windows_1252_encoding",
                  0.6335525936249404
                ],
                [
                  "test_verify_file_with_windows_1252_encoding",
                  "test_verify_xml",
                  0.1890349880022229
                ],
                [
                  "test_verify",
                  "test_verify_fail",
                  0.43707863806076885
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_verify_with_encoding",
                "false"
              ],
              [
                "test_verify_with_newlines",
                "false"
              ],
              [
                "test_verify_file_with_windows_1252_encoding",
                "false"
              ],
              [
                "test_verify_xml",
                "false"
              ],
              [
                "test_verify_with_encoding_error_raises_value_error",
                "false"
              ],
              [
                "test_verify_fail",
                "false"
              ],
              [
                "test_verify_file",
                "false"
              ],
              [
                "test_verify",
                "false"
              ],
              [
                "test_verify_with_errors_replacement_character",
                "false"
              ],
              [
                "test_verify_as_json",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "tests_\u0026_test_asserts.py",
    "testCases": [
      {
        "name": "TestAssertEqualWithReporter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_text_reporter_called_on_failure",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_text_reporter_called_on_failure",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_text_reporter_called_on_failure",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_text_reporter_called_on_failure",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_text_reporter_called_on_failure",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_text_reporter_called_on_failure",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_text_reporter_called_on_failure",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_text_reporter_called_on_failure",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                [
                  "reporter"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_text_reporter_called_on_failure",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestAsserts",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_assert_against_file_works",
                  "[]"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_assert_against_file_works",
                  "[]"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_assert_against_file_works",
                  "false"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_assert_against_file_works",
                  "false"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_assert_against_file_works",
                  "false"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_assert_against_file_works",
                  "false"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                "false"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_assert_against_file_works",
                "false"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                []
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                "false"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                "false"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_assert_against_file_works",
                  "0"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_assert_against_file_works",
                  "0"
                ],
                [
                  "test_assert_against_file_fails_with_reporter",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                "false"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                "false"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                "1"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                [
                  "file_path"
                ]
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                [
                  "file_path",
                  "reporter"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                []
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6863095229163548,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_assert_against_file_works",
                  "test_assert_against_file_fails_with_reporter",
                  0.6863095229163548
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_assert_against_file_works",
                "false"
              ],
              [
                "test_assert_against_file_fails_with_reporter",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_combinations.py",
    "testCases": [
      {
        "name": "VerifyAllCombinationsTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "[]"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "[]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "[]"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "[]"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "[]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "[]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "[]"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "[]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "[]"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "[]"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "[]"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "[]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "[]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "[]"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "[]"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "[]"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "false"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "false"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "false"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "false"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "false"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "false"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "false"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "false"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "false"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "false"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "true"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "false"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "false"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                []
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                [
                  "self.func"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                []
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                []
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                []
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                []
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                []
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                []
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                []
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                []
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "false"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "false"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "false"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "false"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "false"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "false"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "0"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "0"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "0"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_uses_user_specified_formatter_when_supplied",
                  "0"
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "0"
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "0"
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "0"
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "0"
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "false"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "false"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "false"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "false"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "false"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "false"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "0"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "0"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "1"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "0"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "0"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "0"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "1"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "1"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "0"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "1"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                [
                  "arg_combinations",
                  "arg2_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                [
                  "arg_combinations",
                  "arg2_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                [
                  "all_args_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                [
                  "all_args_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                [
                  "arg_combinations",
                  "arg2_combinations",
                  "arg3_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                [
                  "arg_combinations",
                  "arg2_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                [
                  "all_args_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                [
                  "arg_combinations",
                  "arg2_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                [
                  "all_args_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                [
                  "arg_combinations",
                  "arg2_combinations",
                  "arg1_combinations"
                ]
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                [
                  "arg_combinations",
                  "arg2_combinations",
                  "arg1_combinations"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                [
                  "self.func",
                  "self.reporter"
                ]
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                [
                  "self.func",
                  "self.reporter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7824602501935293,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.971887894586929
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  0.9188217857562528
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.637845825171651
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.9055418211310344
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  0.9389060962972071
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.5163711081217612
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  0.928246073047476
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  0.8179128813519698
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  0.8755476845535208
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  0.9037077572078877
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.6202098137200104
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  0.9483719115939812
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.8743193147283428
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.5660220423101492
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.9141696859387022
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  0.7804098589988462
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.9010828071123911
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.9477895783061568
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  0.9165151389911678
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.8316837325359001
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.7526979898404413
                ],
                [
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.6809757122462976
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.7941614964638314
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.8281309472546391
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  0.8180531631266661
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.8434956716786711
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.6654813696390437
                ],
                [
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.8076126653997814
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.49477384420084125
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  0.6866065623255951
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.7124389772992957
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.6216937994414777
                ],
                [
                  "test_when_arg_combinations_have_equal_lengths",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.7986954303886268
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.5921264144217654
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  0.882251324974515
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.6561022502237314
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  0.7664279591575996
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  0.9209241368444986
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  0.8605216513474897
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  0.8137499952235748
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.724535680110326
                ],
                [
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.7305888774247193
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "test_records_exception_message_when_function_under_test_throws_an_exception",
                  0.7257881911641698
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.6175806794999419
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  0.8646612863105433
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.819586479058993
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.6924445240495433
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.8582631007883725
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  0.7555954170159938
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_for_func_accepting_three_args_and_combination_of_three_args",
                  0.6356417261637282
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.8299427880562253
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                  0.8899609058649128
                ],
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.7867484965622814
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "test_when_arg_combinations_have_equal_lengths",
                  0.6099237499907609
                ],
                [
                  "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                  "test_uses_user_specified_formatter_when_supplied",
                  0.7817676856238778
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_uses_user_specified_formatter_when_supplied",
                "false"
              ],
              [
                "test_records_exception_message_when_function_under_test_throws_an_exception",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_for_func_accepting_three_args_and_combination_of_three_args",
                "false"
              ],
              [
                "test_passes_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_one_arg",
                "false"
              ],
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_two_args",
                "false"
              ],
              [
                "test_fails_for_mismatch_with_for_func_accepting_two_args_and_combination_of_two_args",
                "false"
              ],
              [
                "test_when_arg_combinations_have_equal_lengths",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      },
      {
        "name": "VerifyAllCombinationsWithNamerTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                [
                  "all_args_combinations",
                  "arg1_combinations",
                  "namer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                [
                  "self.func",
                  "self.reporter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_passes_for_func_accepting_one_arg_and_combination_of_one_arg",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_configuration_\u0026_test_subdirectory.py",
    "testCases": [
      {
        "name": "TestSubdirectories",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_subdirectory",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_subdirectory",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_subdirectory",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_subdirectory",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_subdirectory",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_subdirectory",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_subdirectory",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_subdirectory",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_subdirectory",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_subdirectory",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_reporters_\u0026_test_genericdiffreporter.py",
    "testCases": [
      {
        "name": "GenericDiffReporterTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_winmerge",
                  "[]"
                ],
                [
                  "test_notworking_in_environment",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_araxis",
                  "[]"
                ],
                [
                  "test_get_araxis_mac",
                  "[]"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "[]"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "[]"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_get_pycharm_reporter",
                  "[]"
                ],
                [
                  "test_get_reporter",
                  "[]"
                ],
                [
                  "test_find_working_reporter",
                  "[PyCallExpression: self.assertIsNotNone]"
                ],
                [
                  "test_remove_reporter",
                  "[]"
                ],
                [
                  "test_list_configured_reporters",
                  "[]"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_serialization",
                  "[]"
                ],
                [
                  "test_deserialization",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_winmerge",
                  "[]"
                ],
                [
                  "test_notworking_in_environment",
                  "[]"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "[]"
                ],
                [
                  "test_get_araxis",
                  "[]"
                ],
                [
                  "test_get_araxis_mac",
                  "[]"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "[]"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "[]"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "[]"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "[]"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "[]"
                ],
                [
                  "test_get_pycharm_reporter",
                  "[]"
                ],
                [
                  "test_get_reporter",
                  "[]"
                ],
                [
                  "test_find_working_reporter",
                  "[]"
                ],
                [
                  "test_remove_reporter",
                  "[]"
                ],
                [
                  "test_list_configured_reporters",
                  "[]"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "[]"
                ],
                [
                  "test_serialization",
                  "[]"
                ],
                [
                  "test_deserialization",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_winmerge",
                  "false"
                ],
                [
                  "test_notworking_in_environment",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_get_araxis",
                  "false"
                ],
                [
                  "test_get_araxis_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "false"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "false"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "true"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "false"
                ],
                [
                  "test_get_pycharm_reporter",
                  "false"
                ],
                [
                  "test_get_reporter",
                  "false"
                ],
                [
                  "test_find_working_reporter",
                  "false"
                ],
                [
                  "test_remove_reporter",
                  "false"
                ],
                [
                  "test_list_configured_reporters",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_serialization",
                  "true"
                ],
                [
                  "test_deserialization",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_winmerge",
                  "false"
                ],
                [
                  "test_notworking_in_environment",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_get_araxis",
                  "false"
                ],
                [
                  "test_get_araxis_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "false"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "false"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "false"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "false"
                ],
                [
                  "test_get_pycharm_reporter",
                  "false"
                ],
                [
                  "test_get_reporter",
                  "false"
                ],
                [
                  "test_find_working_reporter",
                  "false"
                ],
                [
                  "test_remove_reporter",
                  "false"
                ],
                [
                  "test_list_configured_reporters",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_serialization",
                  "false"
                ],
                [
                  "test_deserialization",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_winmerge",
                  "false"
                ],
                [
                  "test_notworking_in_environment",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_get_araxis",
                  "false"
                ],
                [
                  "test_get_araxis_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "false"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "false"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "false"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "false"
                ],
                [
                  "test_get_pycharm_reporter",
                  "false"
                ],
                [
                  "test_get_reporter",
                  "false"
                ],
                [
                  "test_find_working_reporter",
                  "false"
                ],
                [
                  "test_remove_reporter",
                  "false"
                ],
                [
                  "test_list_configured_reporters",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_serialization",
                  "false"
                ],
                [
                  "test_deserialization",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_winmerge",
                  "false"
                ],
                [
                  "test_notworking_in_environment",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_get_araxis",
                  "false"
                ],
                [
                  "test_get_araxis_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "false"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "false"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "false"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "false"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "false"
                ],
                [
                  "test_get_pycharm_reporter",
                  "false"
                ],
                [
                  "test_get_reporter",
                  "false"
                ],
                [
                  "test_find_working_reporter",
                  "false"
                ],
                [
                  "test_remove_reporter",
                  "false"
                ],
                [
                  "test_list_configured_reporters",
                  "false"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "false"
                ],
                [
                  "test_serialization",
                  "false"
                ],
                [
                  "test_deserialization",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_winmerge",
                "false"
              ],
              [
                "test_notworking_in_environment",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_get_araxis",
                "false"
              ],
              [
                "test_get_araxis_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_constructs_valid_diff_command",
                "false"
              ],
              [
                "test_get_beyondcompare4_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "false"
              ],
              [
                "test_get_pycharm_reporter",
                "false"
              ],
              [
                "test_get_reporter",
                "false"
              ],
              [
                "test_find_working_reporter",
                "false"
              ],
              [
                "test_remove_reporter",
                "false"
              ],
              [
                "test_list_configured_reporters",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_serialization",
                "false"
              ],
              [
                "test_deserialization",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_get_winmerge",
                "false"
              ],
              [
                "test_notworking_in_environment",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_get_araxis",
                "false"
              ],
              [
                "test_get_araxis_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_constructs_valid_diff_command",
                "false"
              ],
              [
                "test_get_beyondcompare4_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "false"
              ],
              [
                "test_get_pycharm_reporter",
                "false"
              ],
              [
                "test_get_reporter",
                "false"
              ],
              [
                "test_find_working_reporter",
                "false"
              ],
              [
                "test_remove_reporter",
                "false"
              ],
              [
                "test_list_configured_reporters",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_serialization",
                "true"
              ],
              [
                "test_deserialization",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_winmerge",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_notworking_in_environment",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_get_araxis",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_get_araxis_mac",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_constructs_valid_diff_command",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_get_beyondcompare4_mac",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_non_working_reporter_does_not_report",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_get_pycharm_reporter",
                []
              ],
              [
                "test_get_reporter",
                []
              ],
              [
                "test_find_working_reporter",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_remove_reporter",
                []
              ],
              [
                "test_list_configured_reporters",
                []
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                [
                  "self.reporter"
                ]
              ],
              [
                "test_serialization",
                []
              ],
              [
                "test_deserialization",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_winmerge",
                "false"
              ],
              [
                "test_notworking_in_environment",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_get_araxis",
                "false"
              ],
              [
                "test_get_araxis_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_constructs_valid_diff_command",
                "false"
              ],
              [
                "test_get_beyondcompare4_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "false"
              ],
              [
                "test_get_pycharm_reporter",
                "false"
              ],
              [
                "test_get_reporter",
                "false"
              ],
              [
                "test_find_working_reporter",
                "false"
              ],
              [
                "test_remove_reporter",
                "false"
              ],
              [
                "test_list_configured_reporters",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_serialization",
                "false"
              ],
              [
                "test_deserialization",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_winmerge",
                "false"
              ],
              [
                "test_notworking_in_environment",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_get_araxis",
                "false"
              ],
              [
                "test_get_araxis_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_constructs_valid_diff_command",
                "false"
              ],
              [
                "test_get_beyondcompare4_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "true"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "false"
              ],
              [
                "test_get_pycharm_reporter",
                "false"
              ],
              [
                "test_get_reporter",
                "false"
              ],
              [
                "test_find_working_reporter",
                "false"
              ],
              [
                "test_remove_reporter",
                "false"
              ],
              [
                "test_list_configured_reporters",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_serialization",
                "false"
              ],
              [
                "test_deserialization",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_winmerge",
                  "0"
                ],
                [
                  "test_notworking_in_environment",
                  "0"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "0"
                ],
                [
                  "test_get_araxis",
                  "0"
                ],
                [
                  "test_get_araxis_mac",
                  "0"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "0"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "0"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "0"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "0"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "0"
                ],
                [
                  "test_get_pycharm_reporter",
                  "0"
                ],
                [
                  "test_get_reporter",
                  "0"
                ],
                [
                  "test_find_working_reporter",
                  "0"
                ],
                [
                  "test_remove_reporter",
                  "0"
                ],
                [
                  "test_list_configured_reporters",
                  "0"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "0"
                ],
                [
                  "test_serialization",
                  "0"
                ],
                [
                  "test_deserialization",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_winmerge",
                  "0"
                ],
                [
                  "test_notworking_in_environment",
                  "0"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "0"
                ],
                [
                  "test_get_araxis",
                  "0"
                ],
                [
                  "test_get_araxis_mac",
                  "0"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "0"
                ],
                [
                  "test_constructs_valid_diff_command",
                  "0"
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "0"
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "0"
                ],
                [
                  "test_non_working_reporter_does_not_report",
                  "0"
                ],
                [
                  "test_get_pycharm_reporter",
                  "0"
                ],
                [
                  "test_get_reporter",
                  "0"
                ],
                [
                  "test_find_working_reporter",
                  "0"
                ],
                [
                  "test_remove_reporter",
                  "0"
                ],
                [
                  "test_list_configured_reporters",
                  "0"
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "0"
                ],
                [
                  "test_serialization",
                  "0"
                ],
                [
                  "test_deserialization",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_winmerge",
                "false"
              ],
              [
                "test_notworking_in_environment",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_get_araxis",
                "false"
              ],
              [
                "test_get_araxis_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_constructs_valid_diff_command",
                "false"
              ],
              [
                "test_get_beyondcompare4_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "false"
              ],
              [
                "test_get_pycharm_reporter",
                "false"
              ],
              [
                "test_get_reporter",
                "false"
              ],
              [
                "test_find_working_reporter",
                "false"
              ],
              [
                "test_remove_reporter",
                "false"
              ],
              [
                "test_list_configured_reporters",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_serialization",
                "false"
              ],
              [
                "test_deserialization",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_winmerge",
                "false"
              ],
              [
                "test_notworking_in_environment",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_get_araxis",
                "false"
              ],
              [
                "test_get_araxis_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_constructs_valid_diff_command",
                "false"
              ],
              [
                "test_get_beyondcompare4_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "false"
              ],
              [
                "test_get_pycharm_reporter",
                "false"
              ],
              [
                "test_get_reporter",
                "false"
              ],
              [
                "test_find_working_reporter",
                "false"
              ],
              [
                "test_remove_reporter",
                "false"
              ],
              [
                "test_list_configured_reporters",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_serialization",
                "false"
              ],
              [
                "test_deserialization",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_winmerge",
                "0"
              ],
              [
                "test_notworking_in_environment",
                "1"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "1"
              ],
              [
                "test_get_araxis",
                "0"
              ],
              [
                "test_get_araxis_mac",
                "0"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "2"
              ],
              [
                "test_constructs_valid_diff_command",
                "1"
              ],
              [
                "test_get_beyondcompare4_mac",
                "0"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "2"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "2"
              ],
              [
                "test_get_pycharm_reporter",
                "0"
              ],
              [
                "test_get_reporter",
                "0"
              ],
              [
                "test_find_working_reporter",
                "1"
              ],
              [
                "test_remove_reporter",
                "0"
              ],
              [
                "test_list_configured_reporters",
                "0"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "1"
              ],
              [
                "test_serialization",
                "0"
              ],
              [
                "test_deserialization",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_winmerge",
                []
              ],
              [
                "test_notworking_in_environment",
                [
                  "reporter"
                ]
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                [
                  "approved_contents",
                  "actual_contents",
                  "reporter"
                ]
              ],
              [
                "test_get_araxis",
                []
              ],
              [
                "test_get_araxis_mac",
                []
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                [
                  "reporter"
                ]
              ],
              [
                "test_constructs_valid_diff_command",
                [
                  "approved",
                  "reporter",
                  "received",
                  "expected_command",
                  "namer",
                  "command"
                ]
              ],
              [
                "test_get_beyondcompare4_mac",
                []
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                [
                  "approved",
                  "received",
                  "reporter",
                  "namer"
                ]
              ],
              [
                "test_non_working_reporter_does_not_report",
                [
                  "success",
                  "reporter"
                ]
              ],
              [
                "test_get_pycharm_reporter",
                []
              ],
              [
                "test_get_reporter",
                []
              ],
              [
                "test_find_working_reporter",
                [
                  "r"
                ]
              ],
              [
                "test_remove_reporter",
                []
              ],
              [
                "test_list_configured_reporters",
                []
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                [
                  "approved",
                  "approved_contents",
                  "actual_contents",
                  "reporter",
                  "namer"
                ]
              ],
              [
                "test_serialization",
                [
                  "regex",
                  "file_contents",
                  "match",
                  "n",
                  "saved_reporters_file"
                ]
              ],
              [
                "test_deserialization",
                [
                  "reporters",
                  "full_name",
                  "namer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_get_winmerge",
                [
                  "self.factory"
                ]
              ],
              [
                "test_notworking_in_environment",
                []
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                []
              ],
              [
                "test_get_araxis",
                [
                  "self.factory"
                ]
              ],
              [
                "test_get_araxis_mac",
                [
                  "self.factory"
                ]
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                []
              ],
              [
                "test_constructs_valid_diff_command",
                [
                  "self.factory"
                ]
              ],
              [
                "test_get_beyondcompare4_mac",
                [
                  "self.factory"
                ]
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                [
                  "self.factory"
                ]
              ],
              [
                "test_non_working_reporter_does_not_report",
                []
              ],
              [
                "test_get_pycharm_reporter",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_get_reporter",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_find_working_reporter",
                [
                  "self.factory"
                ]
              ],
              [
                "test_remove_reporter",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_list_configured_reporters",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                [
                  "self.factory"
                ]
              ],
              [
                "test_serialization",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ],
              [
                "test_deserialization",
                [
                  "self.factory",
                  "self.reporter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.22483194726717745,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_non_working_reporter_does_not_report",
                  0.24942329796316196
                ],
                [
                  "test_list_configured_reporters",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.07495316889958614
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_serialization",
                  0.3740290585929524
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_deserialization",
                  0.11322770341445958
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_find_working_reporter",
                  0.19596545041740512
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_find_working_reporter",
                  0.10482848367219183
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_non_working_reporter_does_not_report",
                  0.12354155277685021
                ],
                [
                  "test_get_reporter",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.05555555555555555
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_serialization",
                  0.04920016531283318
                ],
                [
                  "test_get_araxis",
                  "test_constructs_valid_diff_command",
                  0.1
                ],
                [
                  "test_find_working_reporter",
                  "test_remove_reporter",
                  0.2834733547569204
                ],
                [
                  "test_get_winmerge",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.09179850920431569
                ],
                [
                  "test_serialization",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.45993310550389993
                ],
                [
                  "test_list_configured_reporters",
                  "test_remove_reporter",
                  0.6249999999999999
                ],
                [
                  "test_find_working_reporter",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.22291128503014115
                ],
                [
                  "test_get_winmerge",
                  "test_find_working_reporter",
                  0.15430334996209194
                ],
                [
                  "test_list_configured_reporters",
                  "test_find_working_reporter",
                  0.1889822365046136
                ],
                [
                  "test_list_configured_reporters",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.07372097807744857
                ],
                [
                  "test_serialization",
                  "test_notworking_in_environment",
                  0.2365249583956331
                ],
                [
                  "test_get_winmerge",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.06019292654288461
                ],
                [
                  "test_list_configured_reporters",
                  "test_get_winmerge",
                  0.20412414523193148
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.5907908398283785
                ],
                [
                  "test_get_winmerge",
                  "test_get_beyondcompare4_mac",
                  0.28306925853614895
                ],
                [
                  "test_get_winmerge",
                  "test_serialization",
                  0.07242068243779014
                ],
                [
                  "test_get_reporter",
                  "test_get_araxis_mac",
                  0.29095718698132317
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_get_pycharm_reporter",
                  0.04888237167378443
                ],
                [
                  "test_get_winmerge",
                  "test_non_working_reporter_does_not_report",
                  0.07273929674533079
                ],
                [
                  "test_get_reporter",
                  "test_constructs_valid_diff_command",
                  0.16666666666666666
                ],
                [
                  "test_get_araxis_mac",
                  "test_remove_reporter",
                  0.1543033499620919
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.425
                ],
                [
                  "test_get_winmerge",
                  "test_deserialization",
                  0.16666666666666666
                ],
                [
                  "test_get_araxis_mac",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.04550157551932901
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.2702474937259707
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_get_pycharm_reporter",
                  0.06950480468569159
                ],
                [
                  "test_get_araxis_mac",
                  "test_find_working_reporter",
                  0.11664236870396087
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_non_working_reporter_does_not_report",
                  0.38728682210391857
                ],
                [
                  "test_get_araxis_mac",
                  "test_serialization",
                  0.054744890145135894
                ],
                [
                  "test_serialization",
                  "test_deserialization",
                  0.46671106459909195
                ],
                [
                  "test_serialization",
                  "test_non_working_reporter_does_not_report",
                  0.4424976788687097
                ],
                [
                  "test_get_winmerge",
                  "test_notworking_in_environment",
                  0.13608276348795434
                ],
                [
                  "test_get_araxis",
                  "test_get_araxis_mac",
                  0.8183170883849714
                ],
                [
                  "test_get_araxis_mac",
                  "test_deserialization",
                  0.12598815766974242
                ],
                [
                  "test_get_araxis_mac",
                  "test_non_working_reporter_does_not_report",
                  0.0549857399228215
                ],
                [
                  "test_find_working_reporter",
                  "test_get_pycharm_reporter",
                  0.2672612419124244
                ],
                [
                  "test_get_winmerge",
                  "test_get_araxis_mac",
                  0.314970394174356
                ],
                [
                  "test_deserialization",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.1404501619333974
                ],
                [
                  "test_list_configured_reporters",
                  "test_get_pycharm_reporter",
                  0.2357022603955158
                ],
                [
                  "test_list_configured_reporters",
                  "test_get_araxis_mac",
                  0.1543033499620919
                ],
                [
                  "test_get_reporter",
                  "test_get_beyondcompare4_mac",
                  0.5229763603684908
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.032686022523030676
                ],
                [
                  "test_remove_reporter",
                  "test_get_pycharm_reporter",
                  0.35355339059327373
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_notworking_in_environment",
                  0.25927248643506745
                ],
                [
                  "test_get_araxis",
                  "test_get_pycharm_reporter",
                  0.3333333333333333
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_deserialization",
                  0.4079933742414031
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_remove_reporter",
                  0.1386750490563073
                ],
                [
                  "test_list_configured_reporters",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.05184758473652126
                ],
                [
                  "test_find_working_reporter",
                  "test_non_working_reporter_does_not_report",
                  0.3367175148507369
                ],
                [
                  "test_notworking_in_environment",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.1767766952966369
                ],
                [
                  "test_get_winmerge",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.048112522432468816
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_get_pycharm_reporter",
                  0.07066652533375734
                ],
                [
                  "test_list_configured_reporters",
                  "test_serialization",
                  0.08869685939836239
                ],
                [
                  "test_get_pycharm_reporter",
                  "test_non_working_reporter_does_not_report",
                  0.0839921051131616
                ],
                [
                  "test_get_araxis",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.05499266813300749
                ],
                [
                  "test_get_araxis_mac",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.06939315030888375
                ],
                [
                  "test_list_configured_reporters",
                  "test_non_working_reporter_does_not_report",
                  0.08908708063747478
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.04089304100547654
                ],
                [
                  "test_serialization",
                  "test_get_pycharm_reporter",
                  0.08362420100070908
                ],
                [
                  "test_notworking_in_environment",
                  "test_find_working_reporter",
                  0.314970394174356
                ],
                [
                  "test_get_winmerge",
                  "test_remove_reporter",
                  0.20412414523193148
                ],
                [
                  "test_list_configured_reporters",
                  "test_deserialization",
                  0.2721655269759086
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.7150499027457434
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_notworking_in_environment",
                  0.23112508176051216
                ],
                [
                  "test_get_reporter",
                  "test_notworking_in_environment",
                  0.15713484026367722
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_deserialization",
                  0.32455588011159797
                ],
                [
                  "test_get_araxis_mac",
                  "test_constructs_valid_diff_command",
                  0.08728715609439695
                ],
                [
                  "test_list_configured_reporters",
                  "test_get_araxis",
                  0.17677669529663687
                ],
                [
                  "test_get_reporter",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.06950480468569159
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_find_working_reporter",
                  0.24053511772118194
                ],
                [
                  "test_get_araxis",
                  "test_deserialization",
                  0.14433756729740643
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_non_working_reporter_does_not_report",
                  0.46195657812238883
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_deserialization",
                  0.4811252243246881
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_non_working_reporter_does_not_report",
                  0.2393774995725106
                ],
                [
                  "test_get_reporter",
                  "test_get_winmerge",
                  0.3849001794597505
                ],
                [
                  "test_get_araxis",
                  "test_find_working_reporter",
                  0.1336306209562122
                ],
                [
                  "test_list_configured_reporters",
                  "test_get_reporter",
                  0.35355339059327373
                ],
                [
                  "test_get_araxis",
                  "test_non_working_reporter_does_not_report",
                  0.0629940788348712
                ],
                [
                  "test_deserialization",
                  "test_get_pycharm_reporter",
                  0.19245008972987526
                ],
                [
                  "test_get_araxis",
                  "test_get_beyondcompare4_mac",
                  0.24514516892273006
                ],
                [
                  "test_notworking_in_environment",
                  "test_remove_reporter",
                  0.16666666666666666
                ],
                [
                  "test_remove_reporter",
                  "test_non_working_reporter_does_not_report",
                  0.08908708063747478
                ],
                [
                  "test_get_araxis_mac",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.036369648372665396
                ],
                [
                  "test_get_araxis_mac",
                  "test_notworking_in_environment",
                  0.10286889997472795
                ],
                [
                  "test_get_reporter",
                  "test_remove_reporter",
                  0.4714045207910316
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.7313985372043884
                ],
                [
                  "test_list_configured_reporters",
                  "test_constructs_valid_diff_command",
                  0.07071067811865475
                ],
                [
                  "test_get_winmerge",
                  "test_constructs_valid_diff_command",
                  0.11547005383792516
                ],
                [
                  "test_get_araxis",
                  "test_serialization",
                  0.0627181507505318
                ],
                [
                  "test_deserialization",
                  "test_notworking_in_environment",
                  0.2721655269759087
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_notworking_in_environment",
                  0.32479706523154
                ],
                [
                  "test_get_araxis",
                  "test_remove_reporter",
                  0.17677669529663687
                ],
                [
                  "test_get_araxis_mac",
                  "test_get_pycharm_reporter",
                  0.29095718698132317
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_get_pycharm_reporter",
                  0.1
                ],
                [
                  "test_notworking_in_environment",
                  "test_non_working_reporter_does_not_report",
                  0.5345224838248488
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.6745767290982251
                ],
                [
                  "test_notworking_in_environment",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.22116293423234576
                ],
                [
                  "test_find_working_reporter",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.15590239111558088
                ],
                [
                  "test_get_reporter",
                  "test_find_working_reporter",
                  0.2672612419124244
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.1668115312456598
                ],
                [
                  "test_list_configured_reporters",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.05892556509887895
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_constructs_valid_diff_command",
                  0.15689290811054724
                ],
                [
                  "test_get_araxis",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.07949984100047701
                ],
                [
                  "test_deserialization",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.20848759720736484
                ],
                [
                  "test_get_reporter",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.14133305066751467
                ],
                [
                  "test_get_araxis_mac",
                  "test_get_beyondcompare4_mac",
                  0.34236839400873037
                ],
                [
                  "test_get_araxis_mac",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.048001536073731935
                ],
                [
                  "test_get_winmerge",
                  "test_get_araxis",
                  0.36084391824351614
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_remove_reporter",
                  0.07071067811865475
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_serialization",
                  0.39002249342310036
                ],
                [
                  "test_deserialization",
                  "test_remove_reporter",
                  0.2721655269759086
                ],
                [
                  "test_list_configured_reporters",
                  "test_notworking_in_environment",
                  0.16666666666666666
                ],
                [
                  "test_get_winmerge",
                  "test_get_pycharm_reporter",
                  0.3849001794597505
                ],
                [
                  "test_get_reporter",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.09776474334756886
                ],
                [
                  "test_serialization",
                  "test_find_working_reporter",
                  0.20114557032045338
                ],
                [
                  "test_notworking_in_environment",
                  "test_get_pycharm_reporter",
                  0.15713484026367722
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_find_working_reporter",
                  0.2832963498350368
                ],
                [
                  "test_get_reporter",
                  "test_serialization",
                  0.1114989346676121
                ],
                [
                  "test_get_reporter",
                  "test_get_pycharm_reporter",
                  0.5555555555555556
                ],
                [
                  "test_get_reporter",
                  "test_non_working_reporter_does_not_report",
                  0.0839921051131616
                ],
                [
                  "test_get_winmerge",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.06350006350009525
                ],
                [
                  "test_get_araxis",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.041666666666666664
                ],
                [
                  "test_remove_reporter",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.05892556509887895
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_get_pycharm_reporter",
                  0.2614881801842454
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_remove_reporter",
                  0.05184758473652126
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.7698973538621048
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_get_pycharm_reporter",
                  0.05555555555555555
                ],
                [
                  "test_get_reporter",
                  "test_get_araxis",
                  0.3333333333333333
                ],
                [
                  "test_list_configured_reporters",
                  "test_get_beyondcompare4_mac",
                  0.1386750490563073
                ],
                [
                  "test_get_beyondcompare4_mac",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.1869391252764915
                ],
                [
                  "test_serialization",
                  "test_remove_reporter",
                  0.11826247919781652
                ],
                [
                  "test_deserialization",
                  "test_find_working_reporter",
                  0.25717224993681986
                ],
                [
                  "test_remove_reporter",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.07372097807744857
                ],
                [
                  "test_get_araxis",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.05212860351426869
                ],
                [
                  "test_deserialization",
                  "test_non_working_reporter_does_not_report",
                  0.24246432248443597
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.24462429809470346
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.3536397389620282
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_approved_file_not_changed_when_one_exists_already",
                  0.44166578333598333
                ],
                [
                  "test_serialization",
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  0.4620765587253283
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_remove_reporter",
                  0.07495316889958614
                ],
                [
                  "test_approved_file_not_changed_when_one_exists_already",
                  "test_notworking_in_environment",
                  0.22467286719159216
                ],
                [
                  "test_get_reporter",
                  "test_deserialization",
                  0.25660011963983365
                ],
                [
                  "test_constructs_valid_diff_command",
                  "test_serialization",
                  0.3763089045031908
                ],
                [
                  "test_get_araxis",
                  "test_notworking_in_environment",
                  0.11785113019775793
                ],
                [
                  "test_empty_approved_file_created_when_one_does_not_exist",
                  "test_non_working_reporter_does_not_report",
                  0.7881104062391007
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_winmerge",
                "false"
              ],
              [
                "test_notworking_in_environment",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_get_araxis",
                "false"
              ],
              [
                "test_get_araxis_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_constructs_valid_diff_command",
                "false"
              ],
              [
                "test_get_beyondcompare4_mac",
                "false"
              ],
              [
                "test_empty_approved_file_created_when_one_does_not_exist",
                "false"
              ],
              [
                "test_non_working_reporter_does_not_report",
                "false"
              ],
              [
                "test_get_pycharm_reporter",
                "false"
              ],
              [
                "test_get_reporter",
                "false"
              ],
              [
                "test_find_working_reporter",
                "false"
              ],
              [
                "test_remove_reporter",
                "false"
              ],
              [
                "test_list_configured_reporters",
                "false"
              ],
              [
                "test_approved_file_not_changed_when_one_exists_already",
                "false"
              ],
              [
                "test_serialization",
                "false"
              ],
              [
                "test_deserialization",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 18
      }
    ]
  },
  {
    "name": "tests_\u0026_reporters_\u0026_test_first_working_reporter.py",
    "testCases": [
      {
        "name": "TestFirstWorkingReporter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_second_one",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_exception",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_first_one",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_second_one",
                  "[]"
                ],
                [
                  "test_exception",
                  "[]"
                ],
                [
                  "test_first_one",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_second_one",
                  "false"
                ],
                [
                  "test_exception",
                  "false"
                ],
                [
                  "test_first_one",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_second_one",
                  "false"
                ],
                [
                  "test_exception",
                  "false"
                ],
                [
                  "test_first_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_second_one",
                  "false"
                ],
                [
                  "test_exception",
                  "false"
                ],
                [
                  "test_first_one",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_second_one",
                  "false"
                ],
                [
                  "test_exception",
                  "false"
                ],
                [
                  "test_first_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                "false"
              ],
              [
                "test_exception",
                "false"
              ],
              [
                "test_first_one",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_second_one",
                "false"
              ],
              [
                "test_exception",
                "true"
              ],
              [
                "test_first_one",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                []
              ],
              [
                "test_exception",
                []
              ],
              [
                "test_first_one",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                "false"
              ],
              [
                "test_exception",
                "false"
              ],
              [
                "test_first_one",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                "false"
              ],
              [
                "test_exception",
                "false"
              ],
              [
                "test_first_one",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_second_one",
                  "0"
                ],
                [
                  "test_exception",
                  "0"
                ],
                [
                  "test_first_one",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_second_one",
                  "0"
                ],
                [
                  "test_exception",
                  "0"
                ],
                [
                  "test_first_one",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                "false"
              ],
              [
                "test_exception",
                "false"
              ],
              [
                "test_first_one",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                "false"
              ],
              [
                "test_exception",
                "false"
              ],
              [
                "test_first_one",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                "3"
              ],
              [
                "test_exception",
                "3"
              ],
              [
                "test_first_one",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                [
                  "r2",
                  "success",
                  "first",
                  "r1"
                ]
              ],
              [
                "test_exception",
                [
                  "r2",
                  "success",
                  "first",
                  "r1"
                ]
              ],
              [
                "test_first_one",
                [
                  "r2",
                  "success",
                  "first",
                  "r1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                []
              ],
              [
                "test_exception",
                []
              ],
              [
                "test_first_one",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9474014251152143,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_second_one",
                  "test_exception",
                  0.9507171994535901
                ],
                [
                  "test_first_one",
                  "test_second_one",
                  0.9595959595959596
                ],
                [
                  "test_first_one",
                  "test_exception",
                  0.9318911162960933
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_second_one",
                "false"
              ],
              [
                "test_exception",
                "false"
              ],
              [
                "test_first_one",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]