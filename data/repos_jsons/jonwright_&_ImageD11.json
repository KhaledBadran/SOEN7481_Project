[
  {
    "name": "test_\u0026_test_sym_u.py",
    "testCases": [
      {
        "name": "testsyms",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_orthorhombic",
                  "[]"
                ],
                [
                  "test_cubic",
                  "[]"
                ],
                [
                  "test_tetragonal",
                  "[]"
                ],
                [
                  "test_trigonal",
                  "[]"
                ],
                [
                  "test_monoclinic",
                  "[]"
                ],
                [
                  "test_hexagonal",
                  "[]"
                ],
                [
                  "test_triclinic",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_orthorhombic",
                  "[PyAssertStatement]"
                ],
                [
                  "test_cubic",
                  "[PyAssertStatement]"
                ],
                [
                  "test_tetragonal",
                  "[PyAssertStatement]"
                ],
                [
                  "test_trigonal",
                  "[PyAssertStatement]"
                ],
                [
                  "test_monoclinic",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_hexagonal",
                  "[PyAssertStatement]"
                ],
                [
                  "test_triclinic",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_orthorhombic",
                  "false"
                ],
                [
                  "test_cubic",
                  "false"
                ],
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_trigonal",
                  "false"
                ],
                [
                  "test_monoclinic",
                  "false"
                ],
                [
                  "test_hexagonal",
                  "false"
                ],
                [
                  "test_triclinic",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_orthorhombic",
                  "false"
                ],
                [
                  "test_cubic",
                  "false"
                ],
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_trigonal",
                  "false"
                ],
                [
                  "test_monoclinic",
                  "false"
                ],
                [
                  "test_hexagonal",
                  "false"
                ],
                [
                  "test_triclinic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_orthorhombic",
                  "false"
                ],
                [
                  "test_cubic",
                  "false"
                ],
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_trigonal",
                  "false"
                ],
                [
                  "test_monoclinic",
                  "false"
                ],
                [
                  "test_hexagonal",
                  "false"
                ],
                [
                  "test_triclinic",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_orthorhombic",
                  "false"
                ],
                [
                  "test_cubic",
                  "false"
                ],
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_trigonal",
                  "false"
                ],
                [
                  "test_monoclinic",
                  "true"
                ],
                [
                  "test_hexagonal",
                  "false"
                ],
                [
                  "test_triclinic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_trigonal",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ],
              [
                "test_triclinic",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_trigonal",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ],
              [
                "test_triclinic",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                []
              ],
              [
                "test_cubic",
                []
              ],
              [
                "test_tetragonal",
                []
              ],
              [
                "test_trigonal",
                []
              ],
              [
                "test_monoclinic",
                []
              ],
              [
                "test_hexagonal",
                []
              ],
              [
                "test_triclinic",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_trigonal",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ],
              [
                "test_triclinic",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_trigonal",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ],
              [
                "test_triclinic",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_orthorhombic",
                  "0"
                ],
                [
                  "test_cubic",
                  "0"
                ],
                [
                  "test_tetragonal",
                  "0"
                ],
                [
                  "test_trigonal",
                  "0"
                ],
                [
                  "test_monoclinic",
                  "0"
                ],
                [
                  "test_hexagonal",
                  "0"
                ],
                [
                  "test_triclinic",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_orthorhombic",
                  "0"
                ],
                [
                  "test_cubic",
                  "0"
                ],
                [
                  "test_tetragonal",
                  "0"
                ],
                [
                  "test_trigonal",
                  "0"
                ],
                [
                  "test_monoclinic",
                  "0"
                ],
                [
                  "test_hexagonal",
                  "0"
                ],
                [
                  "test_triclinic",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_trigonal",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ],
              [
                "test_triclinic",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_trigonal",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ],
              [
                "test_triclinic",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "1"
              ],
              [
                "test_cubic",
                "1"
              ],
              [
                "test_tetragonal",
                "1"
              ],
              [
                "test_trigonal",
                "1"
              ],
              [
                "test_monoclinic",
                "3"
              ],
              [
                "test_hexagonal",
                "1"
              ],
              [
                "test_triclinic",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                [
                  "c"
                ]
              ],
              [
                "test_cubic",
                [
                  "c"
                ]
              ],
              [
                "test_tetragonal",
                [
                  "c"
                ]
              ],
              [
                "test_trigonal",
                [
                  "c"
                ]
              ],
              [
                "test_monoclinic",
                [
                  "c"
                ]
              ],
              [
                "test_hexagonal",
                [
                  "c"
                ]
              ],
              [
                "test_triclinic",
                [
                  "c"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                []
              ],
              [
                "test_cubic",
                []
              ],
              [
                "test_tetragonal",
                []
              ],
              [
                "test_trigonal",
                []
              ],
              [
                "test_monoclinic",
                []
              ],
              [
                "test_hexagonal",
                []
              ],
              [
                "test_triclinic",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8286313087827231,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_trigonal",
                  "test_triclinic",
                  0.8461538461538463
                ],
                [
                  "test_orthorhombic",
                  "test_triclinic",
                  0.8461538461538463
                ],
                [
                  "test_hexagonal",
                  "test_tetragonal",
                  0.8461538461538463
                ],
                [
                  "test_hexagonal",
                  "test_trigonal",
                  0.8461538461538463
                ],
                [
                  "test_orthorhombic",
                  "test_monoclinic",
                  0.7848249653549152
                ],
                [
                  "test_hexagonal",
                  "test_monoclinic",
                  0.7848249653549152
                ],
                [
                  "test_hexagonal",
                  "test_orthorhombic",
                  0.8461538461538463
                ],
                [
                  "test_cubic",
                  "test_hexagonal",
                  0.8461538461538463
                ],
                [
                  "test_monoclinic",
                  "test_triclinic",
                  0.7848249653549152
                ],
                [
                  "test_cubic",
                  "test_tetragonal",
                  0.8461538461538463
                ],
                [
                  "test_tetragonal",
                  "test_monoclinic",
                  0.7848249653549152
                ],
                [
                  "test_trigonal",
                  "test_monoclinic",
                  0.7848249653549152
                ],
                [
                  "test_cubic",
                  "test_orthorhombic",
                  0.8461538461538463
                ],
                [
                  "test_cubic",
                  "test_monoclinic",
                  0.7848249653549152
                ],
                [
                  "test_cubic",
                  "test_trigonal",
                  0.8461538461538463
                ],
                [
                  "test_tetragonal",
                  "test_triclinic",
                  0.8461538461538463
                ],
                [
                  "test_tetragonal",
                  "test_orthorhombic",
                  0.8461538461538463
                ],
                [
                  "test_tetragonal",
                  "test_trigonal",
                  0.8461538461538463
                ],
                [
                  "test_cubic",
                  "test_triclinic",
                  0.8461538461538463
                ],
                [
                  "test_trigonal",
                  "test_orthorhombic",
                  0.8461538461538463
                ],
                [
                  "test_hexagonal",
                  "test_triclinic",
                  0.8461538461538463
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_trigonal",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ],
              [
                "test_triclinic",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "test_\u0026_test_ubito.py",
    "testCases": [
      {
        "name": "test1",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ubitoU",
                  "[]"
                ],
                [
                  "test_ubitoRod",
                  "[]"
                ],
                [
                  "test_ubitoB",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ubitoU",
                  "[PyAssertStatement]"
                ],
                [
                  "test_ubitoRod",
                  "[PyAssertStatement]"
                ],
                [
                  "test_ubitoB",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ubitoU",
                  "false"
                ],
                [
                  "test_ubitoRod",
                  "false"
                ],
                [
                  "test_ubitoB",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ubitoU",
                  "false"
                ],
                [
                  "test_ubitoRod",
                  "false"
                ],
                [
                  "test_ubitoB",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ubitoU",
                  "false"
                ],
                [
                  "test_ubitoRod",
                  "false"
                ],
                [
                  "test_ubitoB",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ubitoU",
                  "false"
                ],
                [
                  "test_ubitoRod",
                  "false"
                ],
                [
                  "test_ubitoB",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "false"
              ],
              [
                "test_ubitoRod",
                "false"
              ],
              [
                "test_ubitoB",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "false"
              ],
              [
                "test_ubitoRod",
                "false"
              ],
              [
                "test_ubitoB",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                []
              ],
              [
                "test_ubitoRod",
                []
              ],
              [
                "test_ubitoB",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "false"
              ],
              [
                "test_ubitoRod",
                "false"
              ],
              [
                "test_ubitoB",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "false"
              ],
              [
                "test_ubitoRod",
                "false"
              ],
              [
                "test_ubitoB",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ubitoU",
                  "0"
                ],
                [
                  "test_ubitoRod",
                  "0"
                ],
                [
                  "test_ubitoB",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ubitoU",
                  "0"
                ],
                [
                  "test_ubitoRod",
                  "0"
                ],
                [
                  "test_ubitoB",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "false"
              ],
              [
                "test_ubitoRod",
                "false"
              ],
              [
                "test_ubitoB",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "false"
              ],
              [
                "test_ubitoRod",
                "false"
              ],
              [
                "test_ubitoB",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "1"
              ],
              [
                "test_ubitoRod",
                "1"
              ],
              [
                "test_ubitoB",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                [
                  "u"
                ]
              ],
              [
                "test_ubitoRod",
                [
                  "Rod"
                ]
              ],
              [
                "test_ubitoB",
                [
                  "b"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                []
              ],
              [
                "test_ubitoRod",
                []
              ],
              [
                "test_ubitoB",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6925835935872803,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ubitoB",
                  "test_ubitoU",
                  0.6858006858010287
                ],
                [
                  "test_ubitoB",
                  "test_ubitoRod",
                  0.6790438640176067
                ],
                [
                  "test_ubitoU",
                  "test_ubitoRod",
                  0.7129062309432054
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ubitoU",
                "false"
              ],
              [
                "test_ubitoRod",
                "false"
              ],
              [
                "test_ubitoB",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_misori.py",
    "testCases": [
      {
        "name": "test_random_orientations",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_orthorhombic",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_cubic",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_tetragonal",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_are_rotations",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_monoclinic",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_cubic_reverse",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_cubic_pairmat",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_orthorhombic",
                  "[]"
                ],
                [
                  "test_cubic",
                  "[]"
                ],
                [
                  "test_tetragonal",
                  "[]"
                ],
                [
                  "test_are_rotations",
                  "[]"
                ],
                [
                  "test_monoclinic",
                  "[]"
                ],
                [
                  "test_cubic_reverse",
                  "[]"
                ],
                [
                  "test_cubic_pairmat",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_orthorhombic",
                  "true"
                ],
                [
                  "test_cubic",
                  "true"
                ],
                [
                  "test_tetragonal",
                  "true"
                ],
                [
                  "test_are_rotations",
                  "false"
                ],
                [
                  "test_monoclinic",
                  "true"
                ],
                [
                  "test_cubic_reverse",
                  "true"
                ],
                [
                  "test_cubic_pairmat",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_orthorhombic",
                  "true"
                ],
                [
                  "test_cubic",
                  "true"
                ],
                [
                  "test_tetragonal",
                  "true"
                ],
                [
                  "test_are_rotations",
                  "true"
                ],
                [
                  "test_monoclinic",
                  "true"
                ],
                [
                  "test_cubic_reverse",
                  "false"
                ],
                [
                  "test_cubic_pairmat",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_orthorhombic",
                  "false"
                ],
                [
                  "test_cubic",
                  "false"
                ],
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_are_rotations",
                  "false"
                ],
                [
                  "test_monoclinic",
                  "false"
                ],
                [
                  "test_cubic_reverse",
                  "false"
                ],
                [
                  "test_cubic_pairmat",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_orthorhombic",
                  "false"
                ],
                [
                  "test_cubic",
                  "false"
                ],
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_are_rotations",
                  "false"
                ],
                [
                  "test_monoclinic",
                  "false"
                ],
                [
                  "test_cubic_reverse",
                  "false"
                ],
                [
                  "test_cubic_pairmat",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_are_rotations",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_cubic_reverse",
                "false"
              ],
              [
                "test_cubic_pairmat",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_are_rotations",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_cubic_reverse",
                "false"
              ],
              [
                "test_cubic_pairmat",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_orthorhombic",
                [
                  "self.pr"
                ]
              ],
              [
                "test_cubic",
                [
                  "self.pr"
                ]
              ],
              [
                "test_tetragonal",
                [
                  "self.pr"
                ]
              ],
              [
                "test_are_rotations",
                [
                  "self.pr"
                ]
              ],
              [
                "test_monoclinic",
                [
                  "self.pr"
                ]
              ],
              [
                "test_cubic_reverse",
                [
                  "self.pr"
                ]
              ],
              [
                "test_cubic_pairmat",
                [
                  "self.pr"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_are_rotations",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_cubic_reverse",
                "false"
              ],
              [
                "test_cubic_pairmat",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_are_rotations",
                "true"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_cubic_reverse",
                "false"
              ],
              [
                "test_cubic_pairmat",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_orthorhombic",
                  "0"
                ],
                [
                  "test_cubic",
                  "0"
                ],
                [
                  "test_tetragonal",
                  "0"
                ],
                [
                  "test_are_rotations",
                  "0"
                ],
                [
                  "test_monoclinic",
                  "0"
                ],
                [
                  "test_cubic_reverse",
                  "0"
                ],
                [
                  "test_cubic_pairmat",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_orthorhombic",
                  "0"
                ],
                [
                  "test_cubic",
                  "0"
                ],
                [
                  "test_tetragonal",
                  "0"
                ],
                [
                  "test_are_rotations",
                  "0"
                ],
                [
                  "test_monoclinic",
                  "0"
                ],
                [
                  "test_cubic_reverse",
                  "0"
                ],
                [
                  "test_cubic_pairmat",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_orthorhombic",
                "true"
              ],
              [
                "test_cubic",
                "true"
              ],
              [
                "test_tetragonal",
                "true"
              ],
              [
                "test_are_rotations",
                "false"
              ],
              [
                "test_monoclinic",
                "true"
              ],
              [
                "test_cubic_reverse",
                "true"
              ],
              [
                "test_cubic_pairmat",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_are_rotations",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_cubic_reverse",
                "false"
              ],
              [
                "test_cubic_pairmat",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "1"
              ],
              [
                "test_cubic",
                "1"
              ],
              [
                "test_tetragonal",
                "1"
              ],
              [
                "test_are_rotations",
                "2"
              ],
              [
                "test_monoclinic",
                "1"
              ],
              [
                "test_cubic_reverse",
                "1"
              ],
              [
                "test_cubic_pairmat",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                [
                  "p",
                  "c",
                  "U",
                  "t0",
                  "t1",
                  "pairs",
                  "t2"
                ]
              ],
              [
                "test_cubic",
                [
                  "p",
                  "c",
                  "U",
                  "t0",
                  "t1",
                  "pairs",
                  "t2"
                ]
              ],
              [
                "test_tetragonal",
                [
                  "p",
                  "c",
                  "U",
                  "t0",
                  "t1",
                  "pairs",
                  "t2"
                ]
              ],
              [
                "test_are_rotations",
                [
                  "dts",
                  "i",
                  "ids"
                ]
              ],
              [
                "test_monoclinic",
                [
                  "p",
                  "c",
                  "U",
                  "t0",
                  "t1",
                  "pairs",
                  "t2"
                ]
              ],
              [
                "test_cubic_reverse",
                [
                  "tr1",
                  "U",
                  "tr2",
                  "t0",
                  "t1",
                  "N"
                ]
              ],
              [
                "test_cubic_pairmat",
                [
                  "m0",
                  "m1",
                  "U",
                  "t0",
                  "t1",
                  "N",
                  "t2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_orthorhombic",
                []
              ],
              [
                "test_cubic",
                []
              ],
              [
                "test_tetragonal",
                []
              ],
              [
                "test_are_rotations",
                []
              ],
              [
                "test_monoclinic",
                []
              ],
              [
                "test_cubic_reverse",
                []
              ],
              [
                "test_cubic_pairmat",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.837410359681002,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cubic",
                  "test_orthorhombic",
                  0.9970674486803517
                ],
                [
                  "test_are_rotations",
                  "test_cubic",
                  0.7159223441598841
                ],
                [
                  "test_are_rotations",
                  "test_cubic_reverse",
                  0.7591620177895345
                ],
                [
                  "test_cubic",
                  "test_monoclinic",
                  0.9970674486803517
                ],
                [
                  "test_monoclinic",
                  "test_orthorhombic",
                  0.9970674486803517
                ],
                [
                  "test_orthorhombic",
                  "test_cubic_reverse",
                  0.8774845218732528
                ],
                [
                  "test_orthorhombic",
                  "test_cubic_pairmat",
                  0.7148308315120763
                ],
                [
                  "test_cubic_reverse",
                  "test_cubic_pairmat",
                  0.8274401150084534
                ],
                [
                  "test_monoclinic",
                  "test_cubic_reverse",
                  0.8774845218732528
                ],
                [
                  "test_monoclinic",
                  "test_cubic_pairmat",
                  0.7148308315120763
                ],
                [
                  "test_tetragonal",
                  "test_cubic_reverse",
                  0.8774845218732528
                ],
                [
                  "test_tetragonal",
                  "test_cubic_pairmat",
                  0.7148308315120763
                ],
                [
                  "test_cubic",
                  "test_cubic_reverse",
                  0.8808790461358185
                ],
                [
                  "test_orthorhombic",
                  "test_tetragonal",
                  0.9970674486803517
                ],
                [
                  "test_are_rotations",
                  "test_tetragonal",
                  0.7159223441598841
                ],
                [
                  "test_are_rotations",
                  "test_monoclinic",
                  0.7159223441598841
                ],
                [
                  "test_monoclinic",
                  "test_tetragonal",
                  0.9970674486803517
                ],
                [
                  "test_are_rotations",
                  "test_cubic_pairmat",
                  0.7785047469048353
                ],
                [
                  "test_cubic",
                  "test_tetragonal",
                  0.9970674486803517
                ],
                [
                  "test_cubic",
                  "test_cubic_pairmat",
                  0.716591498584766
                ],
                [
                  "test_are_rotations",
                  "test_orthorhombic",
                  0.7159223441598841
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_orthorhombic",
                "false"
              ],
              [
                "test_cubic",
                "false"
              ],
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_are_rotations",
                "false"
              ],
              [
                "test_monoclinic",
                "false"
              ],
              [
                "test_cubic_reverse",
                "false"
              ],
              [
                "test_cubic_pairmat",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "test_\u0026_test_indexing.py",
    "testCases": [
      {
        "name": "test_2pks",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_tetragonal",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_hexagonal",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_tetragonal",
                  "[]"
                ],
                [
                  "test_hexagonal",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_tetragonal",
                  "true"
                ],
                [
                  "test_hexagonal",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_hexagonal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_hexagonal",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_tetragonal",
                  "false"
                ],
                [
                  "test_hexagonal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                []
              ],
              [
                "test_hexagonal",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_tetragonal",
                "true"
              ],
              [
                "test_hexagonal",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_tetragonal",
                  "0"
                ],
                [
                  "test_hexagonal",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_tetragonal",
                  "0"
                ],
                [
                  "test_hexagonal",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                "false"
              ],
              [
                "test_hexagonal",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                "2"
              ],
              [
                "test_hexagonal",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_tetragonal",
                [
                  "a",
                  "c",
                  "ideal",
                  "hnew",
                  "drlvnew",
                  "h1",
                  "h2",
                  "g1",
                  "ufit",
                  "g2",
                  "cell",
                  "ub",
                  "hold",
                  "drlvold",
                  "gve"
                ]
              ],
              [
                "test_hexagonal",
                [
                  "a",
                  "c",
                  "ideal",
                  "hnew",
                  "drlvnew",
                  "h1",
                  "h2",
                  "g1",
                  "ufit",
                  "g2",
                  "cell",
                  "ub",
                  "hold",
                  "drlvold",
                  "gve"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_tetragonal",
                [
                  "self.a",
                  "self.U",
                  "self.c"
                ]
              ],
              [
                "test_hexagonal",
                [
                  "self.a",
                  "self.U",
                  "self.c"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9991694352159468,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_tetragonal",
                  "test_hexagonal",
                  0.9991694352159468
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_tetragonal",
                "true"
              ],
              [
                "test_hexagonal",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_put_incr.py",
    "testCases": [
      {
        "name": "test1",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_as_flat",
                  "[]"
                ],
                [
                  "test_put",
                  "[]"
                ],
                [
                  "test_put_twice",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_as_flat",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_put",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_put_twice",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_as_flat",
                  "false"
                ],
                [
                  "test_put",
                  "false"
                ],
                [
                  "test_put_twice",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_as_flat",
                  "false"
                ],
                [
                  "test_put",
                  "false"
                ],
                [
                  "test_put_twice",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_as_flat",
                  "false"
                ],
                [
                  "test_put",
                  "false"
                ],
                [
                  "test_put_twice",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_as_flat",
                  "false"
                ],
                [
                  "test_put",
                  "false"
                ],
                [
                  "test_put_twice",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "false"
              ],
              [
                "test_put",
                "false"
              ],
              [
                "test_put_twice",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "false"
              ],
              [
                "test_put",
                "false"
              ],
              [
                "test_put_twice",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                []
              ],
              [
                "test_put",
                []
              ],
              [
                "test_put_twice",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "false"
              ],
              [
                "test_put",
                "false"
              ],
              [
                "test_put_twice",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "false"
              ],
              [
                "test_put",
                "false"
              ],
              [
                "test_put_twice",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_as_flat",
                  "0"
                ],
                [
                  "test_put",
                  "0"
                ],
                [
                  "test_put_twice",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_as_flat",
                  "0"
                ],
                [
                  "test_put",
                  "0"
                ],
                [
                  "test_put_twice",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "false"
              ],
              [
                "test_put",
                "false"
              ],
              [
                "test_put_twice",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "false"
              ],
              [
                "test_put",
                "false"
              ],
              [
                "test_put_twice",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "3"
              ],
              [
                "test_put",
                "2"
              ],
              [
                "test_put_twice",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                [
                  "data",
                  "vals",
                  "ind"
                ]
              ],
              [
                "test_put",
                [
                  "data",
                  "vals",
                  "ind"
                ]
              ],
              [
                "test_put_twice",
                [
                  "data",
                  "vals",
                  "ind"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                []
              ],
              [
                "test_put",
                []
              ],
              [
                "test_put_twice",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6343164716341346,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_put_twice",
                  "test_as_flat",
                  0.6596954145788291
                ],
                [
                  "test_put",
                  "test_put_twice",
                  0.7463459980494975
                ],
                [
                  "test_put",
                  "test_as_flat",
                  0.4969080022740772
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_as_flat",
                "false"
              ],
              [
                "test_put",
                "false"
              ],
              [
                "test_put_twice",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_cImageD11.py",
    "testCases": [
      {
        "name": "test_compute_gv",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_5_0",
                  "[]"
                ],
                [
                  "test_5_0_tt",
                  "[]"
                ],
                [
                  "test_5_10m",
                  "[]"
                ],
                [
                  "test_0_5",
                  "[]"
                ],
                [
                  "test_5_10",
                  "[]"
                ],
                [
                  "test_0_0_t10",
                  "[]"
                ],
                [
                  "test_0_0_t0",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_5_0",
                  "[]"
                ],
                [
                  "test_5_0_tt",
                  "[]"
                ],
                [
                  "test_5_10m",
                  "[]"
                ],
                [
                  "test_0_5",
                  "[]"
                ],
                [
                  "test_5_10",
                  "[]"
                ],
                [
                  "test_0_0_t10",
                  "[]"
                ],
                [
                  "test_0_0_t0",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_0_tt",
                  "false"
                ],
                [
                  "test_5_10m",
                  "false"
                ],
                [
                  "test_0_5",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0_t10",
                  "false"
                ],
                [
                  "test_0_0_t0",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_0_tt",
                  "false"
                ],
                [
                  "test_5_10m",
                  "false"
                ],
                [
                  "test_0_5",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0_t10",
                  "false"
                ],
                [
                  "test_0_0_t0",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_0_tt",
                  "false"
                ],
                [
                  "test_5_10m",
                  "false"
                ],
                [
                  "test_0_5",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0_t10",
                  "false"
                ],
                [
                  "test_0_0_t0",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_0_tt",
                  "false"
                ],
                [
                  "test_5_10m",
                  "false"
                ],
                [
                  "test_0_5",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0_t10",
                  "false"
                ],
                [
                  "test_0_0_t0",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_0_tt",
                "false"
              ],
              [
                "test_5_10m",
                "false"
              ],
              [
                "test_0_5",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0_t10",
                "false"
              ],
              [
                "test_0_0_t0",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_0_tt",
                "false"
              ],
              [
                "test_5_10m",
                "false"
              ],
              [
                "test_0_5",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0_t10",
                "false"
              ],
              [
                "test_0_0_t0",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_5_0",
                [
                  "self.XLYLZL",
                  "self.XLYLZLT",
                  "self.omega"
                ]
              ],
              [
                "test_5_0_tt",
                [
                  "self.XLYLZL",
                  "self.XLYLZLT",
                  "self.omega"
                ]
              ],
              [
                "test_5_10m",
                [
                  "self.XLYLZL",
                  "self.XLYLZLT",
                  "self.omega"
                ]
              ],
              [
                "test_0_5",
                [
                  "self.XLYLZL",
                  "self.XLYLZLT",
                  "self.omega"
                ]
              ],
              [
                "test_5_10",
                [
                  "self.XLYLZL",
                  "self.XLYLZLT",
                  "self.omega"
                ]
              ],
              [
                "test_0_0_t10",
                [
                  "self.XLYLZL",
                  "self.XLYLZLT",
                  "self.omega"
                ]
              ],
              [
                "test_0_0_t0",
                [
                  "self.XLYLZL",
                  "self.XLYLZLT",
                  "self.omega"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_0_tt",
                "false"
              ],
              [
                "test_5_10m",
                "false"
              ],
              [
                "test_0_5",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0_t10",
                "false"
              ],
              [
                "test_0_0_t0",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_0_tt",
                "false"
              ],
              [
                "test_5_10m",
                "false"
              ],
              [
                "test_0_5",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0_t10",
                "false"
              ],
              [
                "test_0_0_t0",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_5_0",
                  "0"
                ],
                [
                  "test_5_0_tt",
                  "0"
                ],
                [
                  "test_5_10m",
                  "0"
                ],
                [
                  "test_0_5",
                  "0"
                ],
                [
                  "test_5_10",
                  "0"
                ],
                [
                  "test_0_0_t10",
                  "0"
                ],
                [
                  "test_0_0_t0",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_5_0",
                  "0"
                ],
                [
                  "test_5_0_tt",
                  "0"
                ],
                [
                  "test_5_10m",
                  "0"
                ],
                [
                  "test_0_5",
                  "0"
                ],
                [
                  "test_5_10",
                  "0"
                ],
                [
                  "test_0_0_t10",
                  "0"
                ],
                [
                  "test_0_0_t0",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_0_tt",
                "false"
              ],
              [
                "test_5_10m",
                "false"
              ],
              [
                "test_0_5",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0_t10",
                "false"
              ],
              [
                "test_0_0_t0",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_0_tt",
                "false"
              ],
              [
                "test_5_10m",
                "false"
              ],
              [
                "test_0_5",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0_t10",
                "false"
              ],
              [
                "test_0_0_t0",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_5_0",
                "0"
              ],
              [
                "test_5_0_tt",
                "0"
              ],
              [
                "test_5_10m",
                "0"
              ],
              [
                "test_0_5",
                "0"
              ],
              [
                "test_5_10",
                "0"
              ],
              [
                "test_0_0_t10",
                "0"
              ],
              [
                "test_0_0_t0",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                []
              ],
              [
                "test_5_0_tt",
                []
              ],
              [
                "test_5_10m",
                []
              ],
              [
                "test_0_5",
                []
              ],
              [
                "test_5_10",
                []
              ],
              [
                "test_0_0_t10",
                []
              ],
              [
                "test_0_0_t0",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_5_0",
                []
              ],
              [
                "test_5_0_tt",
                []
              ],
              [
                "test_5_10m",
                []
              ],
              [
                "test_0_5",
                []
              ],
              [
                "test_5_10",
                []
              ],
              [
                "test_0_0_t10",
                []
              ],
              [
                "test_0_0_t0",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9885956117595059,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_5_10",
                  "test_5_0_tt",
                  0.9824667713248085
                ],
                [
                  "test_5_10m",
                  "test_0_0_t0",
                  0.9789263390124798
                ],
                [
                  "test_5_10",
                  "test_5_10m",
                  0.9837398373983739
                ],
                [
                  "test_0_5",
                  "test_5_0_tt",
                  0.9824667713248085
                ],
                [
                  "test_0_5",
                  "test_5_10m",
                  0.9837398373983739
                ],
                [
                  "test_0_0_t0",
                  "test_0_0_t10",
                  1.0000000000000002
                ],
                [
                  "test_5_0",
                  "test_5_10m",
                  0.9837398373983739
                ],
                [
                  "test_0_5",
                  "test_0_0_t0",
                  0.9942220630595497
                ],
                [
                  "test_5_0_tt",
                  "test_0_0_t10",
                  0.9819558573619936
                ],
                [
                  "test_5_0",
                  "test_0_0_t0",
                  0.9942220630595497
                ],
                [
                  "test_5_10",
                  "test_0_0_t0",
                  0.9942220630595497
                ],
                [
                  "test_5_10m",
                  "test_5_0_tt",
                  0.9747912496738335
                ],
                [
                  "test_5_0",
                  "test_0_5",
                  0.9999999999999999
                ],
                [
                  "test_5_0",
                  "test_0_0_t10",
                  0.9942220630595497
                ],
                [
                  "test_0_5",
                  "test_0_0_t10",
                  0.9942220630595497
                ],
                [
                  "test_5_0_tt",
                  "test_0_0_t0",
                  0.9819558573619936
                ],
                [
                  "test_5_0",
                  "test_5_0_tt",
                  0.9824667713248085
                ],
                [
                  "test_5_10",
                  "test_0_5",
                  0.9999999999999999
                ],
                [
                  "test_5_10m",
                  "test_0_0_t10",
                  0.9789263390124798
                ],
                [
                  "test_5_10",
                  "test_0_0_t10",
                  0.9942220630595497
                ],
                [
                  "test_5_10",
                  "test_5_0",
                  0.9999999999999999
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_0_tt",
                "false"
              ],
              [
                "test_5_10m",
                "false"
              ],
              [
                "test_0_5",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0_t10",
                "false"
              ],
              [
                "test_0_0_t0",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "test_compute_xlylzl",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test1",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test1",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test1",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test1",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test1",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test1",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test1",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                [
                  "tilts",
                  "pars",
                  "dist",
                  "xlylzl",
                  "fmat",
                  "error",
                  "testtilts",
                  "p",
                  "r",
                  "dmat",
                  "pks",
                  "outxyz",
                  "ok"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                [
                  "self.pars",
                  "self.sc",
                  "self.fc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_transform.py",
    "testCases": [
      {
        "name": "testtransform",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_compute_tth_eta1",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "[]"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "[]"
                ],
                [
                  "test_compute_tth_eta1",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "false"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "false"
                ],
                [
                  "test_compute_tth_eta1",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "false"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "false"
                ],
                [
                  "test_compute_tth_eta1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "false"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "false"
                ],
                [
                  "test_compute_tth_eta1",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "false"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "false"
                ],
                [
                  "test_compute_tth_eta1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "false"
              ],
              [
                "test_xyz_from_tth_eta",
                "false"
              ],
              [
                "test_compute_tth_eta1",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "false"
              ],
              [
                "test_xyz_from_tth_eta",
                "false"
              ],
              [
                "test_compute_tth_eta1",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                []
              ],
              [
                "test_xyz_from_tth_eta",
                []
              ],
              [
                "test_compute_tth_eta1",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "false"
              ],
              [
                "test_xyz_from_tth_eta",
                "false"
              ],
              [
                "test_compute_tth_eta1",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "true"
              ],
              [
                "test_xyz_from_tth_eta",
                "true"
              ],
              [
                "test_compute_tth_eta1",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "0"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "0"
                ],
                [
                  "test_compute_tth_eta1",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_xyz_from_tth_eta_trans",
                  "0"
                ],
                [
                  "test_xyz_from_tth_eta",
                  "0"
                ],
                [
                  "test_compute_tth_eta1",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "false"
              ],
              [
                "test_xyz_from_tth_eta",
                "false"
              ],
              [
                "test_compute_tth_eta1",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "false"
              ],
              [
                "test_xyz_from_tth_eta",
                "false"
              ],
              [
                "test_compute_tth_eta1",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "2"
              ],
              [
                "test_xyz_from_tth_eta",
                "2"
              ],
              [
                "test_compute_tth_eta1",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                [
                  "ty",
                  "tz",
                  "zc",
                  "dist",
                  "tth",
                  "yc",
                  "t_x",
                  "t_z",
                  "omega",
                  "t_y",
                  "sc",
                  "eta",
                  "zs",
                  "ys",
                  "fc"
                ]
              ],
              [
                "test_xyz_from_tth_eta",
                [
                  "sc",
                  "eta",
                  "ty",
                  "tz",
                  "zc",
                  "zs",
                  "dist",
                  "tth",
                  "yc",
                  "ys",
                  "fc",
                  "omega"
                ]
              ],
              [
                "test_compute_tth_eta1",
                [
                  "ty",
                  "tz",
                  "zc",
                  "zs",
                  "dist",
                  "yc",
                  "ys",
                  "diff",
                  "not_trans",
                  "om",
                  "trans"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                [
                  "self.peaks"
                ]
              ],
              [
                "test_xyz_from_tth_eta",
                [
                  "self.peaks"
                ]
              ],
              [
                "test_compute_tth_eta1",
                [
                  "self.peaks"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8724735510649312,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_xyz_from_tth_eta",
                  "test_xyz_from_tth_eta_trans",
                  0.8854532276729747
                ],
                [
                  "test_compute_tth_eta1",
                  "test_xyz_from_tth_eta",
                  0.8889626864670759
                ],
                [
                  "test_compute_tth_eta1",
                  "test_xyz_from_tth_eta_trans",
                  0.8430047390547427
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_xyz_from_tth_eta_trans",
                "false"
              ],
              [
                "test_xyz_from_tth_eta",
                "false"
              ],
              [
                "test_compute_tth_eta1",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_clean_mask.py",
    "testCases": [
      {
        "name": "test_clean_mask",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_coo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test1",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_coo2",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_coo",
                  "[]"
                ],
                [
                  "test1",
                  "[]"
                ],
                [
                  "test_coo2",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_coo",
                  "false"
                ],
                [
                  "test1",
                  "true"
                ],
                [
                  "test_coo2",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_coo",
                  "false"
                ],
                [
                  "test1",
                  "false"
                ],
                [
                  "test_coo2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_coo",
                  "false"
                ],
                [
                  "test1",
                  "false"
                ],
                [
                  "test_coo2",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_coo",
                  "false"
                ],
                [
                  "test1",
                  "false"
                ],
                [
                  "test_coo2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test_coo2",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test_coo2",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_coo",
                [
                  "self.src"
                ]
              ],
              [
                "test1",
                []
              ],
              [
                "test_coo2",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test_coo2",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test_coo2",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_coo",
                  "0"
                ],
                [
                  "test1",
                  "0"
                ],
                [
                  "test_coo2",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_coo",
                  "0"
                ],
                [
                  "test1",
                  "0"
                ],
                [
                  "test_coo2",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_coo",
                "false"
              ],
              [
                "test1",
                "true"
              ],
              [
                "test_coo2",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test_coo2",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                "3"
              ],
              [
                "test1",
                "2"
              ],
              [
                "test_coo2",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                [
                  "tmp",
                  "npx",
                  "i",
                  "pi",
                  "j",
                  "pj",
                  "ok"
                ]
              ],
              [
                "test1",
                [
                  "npx",
                  "testmask"
                ]
              ],
              [
                "test_coo2",
                [
                  "tmp",
                  "npx",
                  "i",
                  "pi",
                  "j",
                  "pj",
                  "ok"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_coo",
                [
                  "self.target"
                ]
              ],
              [
                "test1",
                [
                  "self.src",
                  "self.target"
                ]
              ],
              [
                "test_coo2",
                [
                  "self.src",
                  "self.target"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7644914493060133,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test1",
                  "test_coo",
                  0.6542390267284234
                ],
                [
                  "test1",
                  "test_coo2",
                  0.6610242212460933
                ],
                [
                  "test_coo",
                  "test_coo2",
                  0.9782110999435234
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_coo",
                "true"
              ],
              [
                "test1",
                "true"
              ],
              [
                "test_coo2",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_closest_vec.py",
    "testCases": [
      {
        "name": "test_closest_vec",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_same_as_python",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_same_as_python",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_same_as_python",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_same_as_python",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_same_as_python",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                [
                  "r2",
                  "t1",
                  "t2",
                  "r1",
                  "t3"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                [
                  "self.data"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_uncomputegv.py",
    "testCases": [
      {
        "name": "test_uncomputegv",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_5_0",
                  "[]"
                ],
                [
                  "test_5_10",
                  "[]"
                ],
                [
                  "test_0_0",
                  "[]"
                ],
                [
                  "test_0_10",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_5_0",
                  "[]"
                ],
                [
                  "test_5_10",
                  "[]"
                ],
                [
                  "test_0_0",
                  "[]"
                ],
                [
                  "test_0_10",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_5_0",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_5_0",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_5_10",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_0_0",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_0_10",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_5_0",
                  "0"
                ],
                [
                  "test_5_10",
                  "0"
                ],
                [
                  "test_0_0",
                  "0"
                ],
                [
                  "test_0_10",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_5_0",
                  "0"
                ],
                [
                  "test_5_10",
                  "0"
                ],
                [
                  "test_0_0",
                  "0"
                ],
                [
                  "test_0_10",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_5_0",
                "0"
              ],
              [
                "test_5_10",
                "0"
              ],
              [
                "test_0_0",
                "0"
              ],
              [
                "test_0_10",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                []
              ],
              [
                "test_5_10",
                []
              ],
              [
                "test_0_0",
                []
              ],
              [
                "test_0_10",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_5_0",
                []
              ],
              [
                "test_5_10",
                []
              ],
              [
                "test_0_0",
                []
              ],
              [
                "test_0_10",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9999999999999999,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_5_0",
                  "test_0_10",
                  0.9999999999999999
                ],
                [
                  "test_5_10",
                  "test_0_10",
                  0.9999999999999999
                ],
                [
                  "test_5_0",
                  "test_0_0",
                  0.9999999999999999
                ],
                [
                  "test_5_10",
                  "test_5_0",
                  0.9999999999999999
                ],
                [
                  "test_0_10",
                  "test_0_0",
                  0.9999999999999999
                ],
                [
                  "test_5_10",
                  "test_0_0",
                  0.9999999999999999
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_5_0",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_test_overlapimage.py",
    "testCases": [
      {
        "name": "testimexists",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testit",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testit",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testit",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testit",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testit",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testit",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testit",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_score_gvec_z.py",
    "testCases": [
      {
        "name": "test_closest_vec",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_same_as_python",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_same_as_python",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_same_as_python",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_same_as_python",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_same_as_python",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_same_as_python",
                [
                  "ce",
                  "pe",
                  "GVE",
                  "pg0",
                  "pg2",
                  "pg1",
                  "cg1",
                  "UBI",
                  "UB",
                  "cg0",
                  "cg2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                [
                  "self.UBI",
                  "self.UB",
                  "self.GVE"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_same_as_python",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_sparse_image.py",
    "testCases": [
      {
        "name": "test_array_bounds_localmax",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test1",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test1",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test1",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test1",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test1",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test1",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                [
                  "vmx",
                  "nlabel",
                  "imx",
                  "nnz",
                  "labels"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                [
                  "self.row",
                  "self.col",
                  "self.vals"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "test_array_stats",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test1",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test3",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test2",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test1",
                  "[]"
                ],
                [
                  "test3",
                  "[]"
                ],
                [
                  "test2",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test1",
                  "true"
                ],
                [
                  "test3",
                  "true"
                ],
                [
                  "test2",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test1",
                  "false"
                ],
                [
                  "test3",
                  "false"
                ],
                [
                  "test2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test1",
                  "false"
                ],
                [
                  "test3",
                  "false"
                ],
                [
                  "test2",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test1",
                  "false"
                ],
                [
                  "test3",
                  "false"
                ],
                [
                  "test2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ],
              [
                "test3",
                []
              ],
              [
                "test2",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test1",
                  "0"
                ],
                [
                  "test3",
                  "0"
                ],
                [
                  "test2",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test1",
                  "0"
                ],
                [
                  "test3",
                  "0"
                ],
                [
                  "test2",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "true"
              ],
              [
                "test3",
                "true"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "1"
              ],
              [
                "test3",
                "1"
              ],
              [
                "test2",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                [
                  "ar",
                  "mini",
                  "t",
                  "maxi",
                  "mean",
                  "var"
                ]
              ],
              [
                "test3",
                [
                  "mini",
                  "nt",
                  "var",
                  "endc",
                  "start",
                  "FPS",
                  "numpytime",
                  "check",
                  "MB_s",
                  "dt",
                  "ar",
                  "nloop",
                  "maxi",
                  "mean",
                  "ctime",
                  "endn",
                  "ok"
                ]
              ],
              [
                "test2",
                [
                  "ar",
                  "mini",
                  "maxi",
                  "mean",
                  "var"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ],
              [
                "test3",
                []
              ],
              [
                "test2",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7587339964866443,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test2",
                  "test3",
                  0.7073848716528766
                ],
                [
                  "test1",
                  "test3",
                  0.670377695126587
                ],
                [
                  "test1",
                  "test2",
                  0.8984394226804693
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "test_array_histogram",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test1",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test1",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test1",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test1",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test1",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test1",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                [
                  "a",
                  "hn",
                  "endc",
                  "start",
                  "ctime",
                  "numpytime",
                  "hc",
                  "endn",
                  "N"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "test_sparse_is_sorted",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testbadj",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "testrpt",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "testbadi",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "testOK",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testbadj",
                  "[]"
                ],
                [
                  "testrpt",
                  "[]"
                ],
                [
                  "testbadi",
                  "[]"
                ],
                [
                  "testOK",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testbadj",
                  "false"
                ],
                [
                  "testrpt",
                  "false"
                ],
                [
                  "testbadi",
                  "false"
                ],
                [
                  "testOK",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testbadj",
                  "false"
                ],
                [
                  "testrpt",
                  "false"
                ],
                [
                  "testbadi",
                  "false"
                ],
                [
                  "testOK",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testbadj",
                  "false"
                ],
                [
                  "testrpt",
                  "false"
                ],
                [
                  "testbadi",
                  "false"
                ],
                [
                  "testOK",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testbadj",
                  "false"
                ],
                [
                  "testrpt",
                  "false"
                ],
                [
                  "testbadi",
                  "false"
                ],
                [
                  "testOK",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                "false"
              ],
              [
                "testrpt",
                "false"
              ],
              [
                "testbadi",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                "false"
              ],
              [
                "testrpt",
                "false"
              ],
              [
                "testbadi",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                []
              ],
              [
                "testrpt",
                []
              ],
              [
                "testbadi",
                []
              ],
              [
                "testOK",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                "false"
              ],
              [
                "testrpt",
                "false"
              ],
              [
                "testbadi",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testbadj",
                "true"
              ],
              [
                "testrpt",
                "false"
              ],
              [
                "testbadi",
                "true"
              ],
              [
                "testOK",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testbadj",
                  "0"
                ],
                [
                  "testrpt",
                  "0"
                ],
                [
                  "testbadi",
                  "0"
                ],
                [
                  "testOK",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testbadj",
                  "0"
                ],
                [
                  "testrpt",
                  "0"
                ],
                [
                  "testbadi",
                  "0"
                ],
                [
                  "testOK",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                "false"
              ],
              [
                "testrpt",
                "false"
              ],
              [
                "testbadi",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                "false"
              ],
              [
                "testrpt",
                "false"
              ],
              [
                "testbadi",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                "1"
              ],
              [
                "testrpt",
                "1"
              ],
              [
                "testbadi",
                "1"
              ],
              [
                "testOK",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                [
                  "ret"
                ]
              ],
              [
                "testrpt",
                [
                  "ret"
                ]
              ],
              [
                "testbadi",
                [
                  "ret"
                ]
              ],
              [
                "testOK",
                [
                  "ret"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                [
                  "self.j",
                  "self.i"
                ]
              ],
              [
                "testrpt",
                [
                  "self.j",
                  "self.i"
                ]
              ],
              [
                "testbadi",
                [
                  "self.j",
                  "self.i"
                ]
              ],
              [
                "testOK",
                [
                  "self.j",
                  "self.i"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8098488138598793,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testrpt",
                  "testbadj",
                  0.8365019125713041
                ],
                [
                  "testOK",
                  "testrpt",
                  0.7315635209502898
                ],
                [
                  "testOK",
                  "testbadi",
                  0.8497058314499201
                ],
                [
                  "testrpt",
                  "testbadi",
                  0.731310340973526
                ],
                [
                  "testbadi",
                  "testbadj",
                  0.9071147352221454
                ],
                [
                  "testOK",
                  "testbadj",
                  0.8028965419920906
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testbadj",
                "false"
              ],
              [
                "testrpt",
                "false"
              ],
              [
                "testbadi",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "test_sparse_connected_pixels",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testsplat",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "testOK",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testsplat",
                  "[]"
                ],
                [
                  "testOK",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testsplat",
                  "true"
                ],
                [
                  "testOK",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "testsplat",
                  "false"
                ],
                [
                  "testOK",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testsplat",
                  "false"
                ],
                [
                  "testOK",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testsplat",
                  "false"
                ],
                [
                  "testOK",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                []
              ],
              [
                "testOK",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testsplat",
                  "0"
                ],
                [
                  "testOK",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testsplat",
                  "0"
                ],
                [
                  "testOK",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "testsplat",
                "true"
              ],
              [
                "testOK",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                "2"
              ],
              [
                "testOK",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "testsplat",
                [
                  "s3",
                  "ns",
                  "i",
                  "j",
                  "sld",
                  "testcase",
                  "v",
                  "sl",
                  "z",
                  "ni",
                  "sls",
                  "nj",
                  "s0",
                  "s1",
                  "s2"
                ]
              ],
              [
                "testOK",
                [
                  "sparsetime",
                  "ns",
                  "sbegin",
                  "dl",
                  "i",
                  "j",
                  "sld",
                  "testcase",
                  "densetime",
                  "dstart",
                  "v",
                  "nd",
                  "dend",
                  "sl",
                  "send"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                [
                  "self.a",
                  "self.threshold",
                  "self.s"
                ]
              ],
              [
                "testOK",
                [
                  "self.a",
                  "self.threshold",
                  "self.s"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8817276319283728,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testOK",
                  "testsplat",
                  0.8817276319283728
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testsplat",
                "false"
              ],
              [
                "testOK",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_eps_sig_\u0026_test_eps.py",
    "testCases": [
      {
        "name": "test_eps_grain",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_e6_grain",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_e6_sample",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_e6_grain",
                  "[]"
                ],
                [
                  "test_e6_sample",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_e6_grain",
                  "true"
                ],
                [
                  "test_e6_sample",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_e6_grain",
                  "false"
                ],
                [
                  "test_e6_sample",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_e6_grain",
                  "false"
                ],
                [
                  "test_e6_sample",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_e6_grain",
                  "false"
                ],
                [
                  "test_e6_sample",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                "false"
              ],
              [
                "test_e6_sample",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                "false"
              ],
              [
                "test_e6_sample",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                []
              ],
              [
                "test_e6_sample",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                "false"
              ],
              [
                "test_e6_sample",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                "false"
              ],
              [
                "test_e6_sample",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_e6_grain",
                  "0"
                ],
                [
                  "test_e6_sample",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_e6_grain",
                  "0"
                ],
                [
                  "test_e6_sample",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_e6_grain",
                "true"
              ],
              [
                "test_e6_sample",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                "false"
              ],
              [
                "test_e6_sample",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                "1"
              ],
              [
                "test_e6_sample",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_e6_grain",
                [
                  "e11",
                  "e22",
                  "e33",
                  "e13",
                  "e12",
                  "e23",
                  "t12",
                  "t23",
                  "t11",
                  "t22",
                  "t33",
                  "t13",
                  "ok"
                ]
              ],
              [
                "test_e6_sample",
                [
                  "e11",
                  "e22",
                  "e33",
                  "e13",
                  "e12",
                  "e23",
                  "t12",
                  "t23",
                  "t11",
                  "t22",
                  "t33",
                  "t13",
                  "ok"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                [
                  "self.titles",
                  "self.testdata",
                  "self.grains",
                  "self.dzero"
                ]
              ],
              [
                "test_e6_sample",
                [
                  "self.titles",
                  "self.testdata",
                  "self.grains",
                  "self.dzero"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9772119764224129,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_e6_sample",
                  "test_e6_grain",
                  0.9772119764224129
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_e6_grain",
                "false"
              ],
              [
                "test_e6_sample",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_finite_strain.py",
    "testCases": [
      {
        "name": "test_m",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ref",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_lab",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ref",
                  "[]"
                ],
                [
                  "test_lab",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ref",
                  "true"
                ],
                [
                  "test_lab",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ref",
                  "false"
                ],
                [
                  "test_lab",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ref",
                  "false"
                ],
                [
                  "test_lab",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ref",
                  "false"
                ],
                [
                  "test_lab",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "false"
              ],
              [
                "test_lab",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "false"
              ],
              [
                "test_lab",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                []
              ],
              [
                "test_lab",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "false"
              ],
              [
                "test_lab",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "false"
              ],
              [
                "test_lab",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ref",
                  "0"
                ],
                [
                  "test_lab",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ref",
                  "0"
                ],
                [
                  "test_lab",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "false"
              ],
              [
                "test_lab",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "false"
              ],
              [
                "test_lab",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "1"
              ],
              [
                "test_lab",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                [
                  "forwards",
                  "ef",
                  "backward",
                  "m",
                  "eb"
                ]
              ],
              [
                "test_lab",
                [
                  "forwards",
                  "ef",
                  "backward",
                  "m",
                  "eb"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                []
              ],
              [
                "test_lab",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.942914072389673,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_lab",
                  "test_ref",
                  0.942914072389673
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ref",
                "false"
              ],
              [
                "test_lab",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "test_polar",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_polar",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_polar",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_polar",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_polar",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_polar",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_polar",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_polar",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_polar",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                [
                  "dgt",
                  "r",
                  "s",
                  "v"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_polar",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "test_svd",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_svd",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_svd",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_svd",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_svd",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_svd",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_svd",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_svd",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_svd",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                [
                  "dgt",
                  "fcalc",
                  "s",
                  "u",
                  "vt"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_svd",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "test_xfab_strain",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_strain_ref",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_strain_lab",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_strain_ref",
                  "[]"
                ],
                [
                  "test_strain_lab",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_strain_ref",
                  "false"
                ],
                [
                  "test_strain_lab",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_strain_ref",
                  "false"
                ],
                [
                  "test_strain_lab",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_strain_ref",
                  "false"
                ],
                [
                  "test_strain_lab",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_strain_ref",
                  "false"
                ],
                [
                  "test_strain_lab",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "false"
              ],
              [
                "test_strain_lab",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "false"
              ],
              [
                "test_strain_lab",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                []
              ],
              [
                "test_strain_lab",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "false"
              ],
              [
                "test_strain_lab",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "false"
              ],
              [
                "test_strain_lab",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_strain_ref",
                  "0"
                ],
                [
                  "test_strain_lab",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_strain_ref",
                  "0"
                ],
                [
                  "test_strain_lab",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "false"
              ],
              [
                "test_strain_lab",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "false"
              ],
              [
                "test_strain_lab",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "4"
              ],
              [
                "test_strain_lab",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                [
                  "dgt",
                  "u",
                  "eps_xfab_ref_e6",
                  "dzero_cell",
                  "eps_new"
                ]
              ],
              [
                "test_strain_lab",
                [
                  "Exfab",
                  "dgt",
                  "emat",
                  "u",
                  "eps_xfab_ref_e6",
                  "dzero_cell",
                  "eps_new"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                [
                  "self.ubi",
                  "self.ubi0",
                  "self.ub0",
                  "self.u"
                ]
              ],
              [
                "test_strain_lab",
                [
                  "self.ubi",
                  "self.ubi0",
                  "self.ub0",
                  "self.u"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9496996855930773,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_strain_ref",
                  "test_strain_lab",
                  0.9496996855930773
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_strain_ref",
                "false"
              ],
              [
                "test_strain_lab",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "test_y_strain",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_strainlab",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_strainref",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_strainlab",
                  "[]"
                ],
                [
                  "test_strainref",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_strainlab",
                  "true"
                ],
                [
                  "test_strainref",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_strainlab",
                  "false"
                ],
                [
                  "test_strainref",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_strainlab",
                  "false"
                ],
                [
                  "test_strainref",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_strainlab",
                  "false"
                ],
                [
                  "test_strainref",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                "false"
              ],
              [
                "test_strainref",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                "false"
              ],
              [
                "test_strainref",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_strainlab",
                [
                  "self.ubi",
                  "self.ubi0",
                  "self.ub0"
                ]
              ],
              [
                "test_strainref",
                [
                  "self.ubi",
                  "self.ubi0",
                  "self.ub0"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                "false"
              ],
              [
                "test_strainref",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_strainlab",
                "true"
              ],
              [
                "test_strainref",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_strainlab",
                  "0"
                ],
                [
                  "test_strainref",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_strainlab",
                  "0"
                ],
                [
                  "test_strainref",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                "false"
              ],
              [
                "test_strainref",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                "false"
              ],
              [
                "test_strainref",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                "3"
              ],
              [
                "test_strainref",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                [
                  "elab"
                ]
              ],
              [
                "test_strainref",
                [
                  "eref"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                [
                  "self.dgt"
                ]
              ],
              [
                "test_strainref",
                [
                  "self.dgt"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9166666666666666,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_strainlab",
                  "test_strainref",
                  0.9166666666666666
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_strainlab",
                "false"
              ],
              [
                "test_strainref",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_localmaxlabel.py",
    "testCases": [
      {
        "name": "test_localmaxlabel",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testbug",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test1",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test3",
                  "[]"
                ],
                [
                  "testsmall",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testbug",
                  "[]"
                ],
                [
                  "test1",
                  "[]"
                ],
                [
                  "test3",
                  "[]"
                ],
                [
                  "testsmall",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testbug",
                  "false"
                ],
                [
                  "test1",
                  "true"
                ],
                [
                  "test3",
                  "true"
                ],
                [
                  "testsmall",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testbug",
                  "false"
                ],
                [
                  "test1",
                  "false"
                ],
                [
                  "test3",
                  "false"
                ],
                [
                  "testsmall",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testbug",
                  "false"
                ],
                [
                  "test1",
                  "false"
                ],
                [
                  "test3",
                  "false"
                ],
                [
                  "testsmall",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testbug",
                  "false"
                ],
                [
                  "test1",
                  "false"
                ],
                [
                  "test3",
                  "false"
                ],
                [
                  "testsmall",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testbug",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "testsmall",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testbug",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "testsmall",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "testbug",
                [
                  "self.im",
                  "self.dopy"
                ]
              ],
              [
                "test1",
                []
              ],
              [
                "test3",
                [
                  "self.im",
                  "self.dopy"
                ]
              ],
              [
                "testsmall",
                [
                  "self.im",
                  "self.dopy"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testbug",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "testsmall",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testbug",
                "true"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "testsmall",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testbug",
                  "0"
                ],
                [
                  "test1",
                  "0"
                ],
                [
                  "test3",
                  "0"
                ],
                [
                  "testsmall",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testbug",
                  "0"
                ],
                [
                  "test1",
                  "0"
                ],
                [
                  "test3",
                  "0"
                ],
                [
                  "testsmall",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "testbug",
                "false"
              ],
              [
                "test1",
                "true"
              ],
              [
                "test3",
                "true"
              ],
              [
                "testsmall",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testbug",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "testsmall",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "testbug",
                "1"
              ],
              [
                "test1",
                "1"
              ],
              [
                "test3",
                "0"
              ],
              [
                "testsmall",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "testbug",
                [
                  "im",
                  "wk",
                  "la"
                ]
              ],
              [
                "test1",
                [
                  "im",
                  "l1",
                  "start",
                  "pytime",
                  "l",
                  "times",
                  "wi",
                  "names",
                  "wk",
                  "lref",
                  "wp",
                  "npks",
                  "ctime",
                  "end",
                  "li"
                ]
              ],
              [
                "test3",
                [
                  "im",
                  "l0",
                  "wk",
                  "l1",
                  "start",
                  "wp",
                  "npks",
                  "ctime",
                  "end",
                  "ptime",
                  "N"
                ]
              ],
              [
                "testsmall",
                [
                  "im",
                  "wk",
                  "la"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "testbug",
                []
              ],
              [
                "test1",
                [
                  "self.im",
                  "self.dopy"
                ]
              ],
              [
                "test3",
                []
              ],
              [
                "testsmall",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5298837764122545,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test1",
                  "test3",
                  0.7573372868307254
                ],
                [
                  "test3",
                  "testsmall",
                  0.5521177907240944
                ],
                [
                  "test3",
                  "testbug",
                  0.49699776898795733
                ],
                [
                  "test1",
                  "testsmall",
                  0.24290933735447254
                ],
                [
                  "testbug",
                  "testsmall",
                  0.9728044500519737
                ],
                [
                  "test1",
                  "testbug",
                  0.1571360245243033
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testbug",
                "false"
              ],
              [
                "test1",
                "false"
              ],
              [
                "test3",
                "false"
              ],
              [
                "testsmall",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_twinprob_\u0026_test_twin.py",
    "testCases": [
      {
        "name": "testtwin",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testtwin",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testtwin",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testtwin",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testtwin",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testtwin",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testtwin",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testtwin",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testtwin",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testtwin",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                [
                  "myindexer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testtwin",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_compress_duplicates.py",
    "testCases": [
      {
        "name": "testpls",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test1",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test2",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test1",
                  "[]"
                ],
                [
                  "test2",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test1",
                  "false"
                ],
                [
                  "test2",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test1",
                  "false"
                ],
                [
                  "test2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test1",
                  "false"
                ],
                [
                  "test2",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test1",
                  "false"
                ],
                [
                  "test2",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ],
              [
                "test2",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test2",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test1",
                  "0"
                ],
                [
                  "test2",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test1",
                  "0"
                ],
                [
                  "test2",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ],
              [
                "test2",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "4"
              ],
              [
                "test2",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                [
                  "a",
                  "r",
                  "c",
                  "d",
                  "tmp",
                  "i",
                  "j",
                  "oi",
                  "oj",
                  "N",
                  "n"
                ]
              ],
              [
                "test2",
                [
                  "a",
                  "coo",
                  "csr",
                  "c",
                  "d",
                  "i",
                  "j",
                  "N",
                  "n",
                  "r",
                  "tmp",
                  "oi",
                  "oj"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ],
              [
                "test2",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9430318172855534,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test1",
                  "test2",
                  0.9430318172855534
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "true"
              ],
              [
                "test2",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_gv_general_\u0026_test_gv_general.py",
    "testCases": [
      {
        "name": "test_g_to_k",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_10_0",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_0_10",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_5_10",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_0_0",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_10_0",
                  "[]"
                ],
                [
                  "test_0_10",
                  "[]"
                ],
                [
                  "test_5_10",
                  "[]"
                ],
                [
                  "test_0_0",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_10_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_10_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_10_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_10_0",
                  "false"
                ],
                [
                  "test_0_10",
                  "false"
                ],
                [
                  "test_5_10",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                []
              ],
              [
                "test_0_10",
                []
              ],
              [
                "test_5_10",
                []
              ],
              [
                "test_0_0",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_10_0",
                "true"
              ],
              [
                "test_0_10",
                "true"
              ],
              [
                "test_5_10",
                "true"
              ],
              [
                "test_0_0",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_10_0",
                  "0"
                ],
                [
                  "test_0_10",
                  "0"
                ],
                [
                  "test_5_10",
                  "0"
                ],
                [
                  "test_0_0",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_10_0",
                  "0"
                ],
                [
                  "test_0_10",
                  "0"
                ],
                [
                  "test_5_10",
                  "0"
                ],
                [
                  "test_0_0",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                "1"
              ],
              [
                "test_0_10",
                "1"
              ],
              [
                "test_5_10",
                "1"
              ],
              [
                "test_0_0",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_10_0",
                [
                  "err2",
                  "c",
                  "err1",
                  "err",
                  "g",
                  "c0",
                  "c1",
                  "c2",
                  "valid",
                  "post",
                  "sol1",
                  "w",
                  "sol2",
                  "s0",
                  "s1",
                  "s2"
                ]
              ],
              [
                "test_0_10",
                [
                  "err2",
                  "c",
                  "err1",
                  "err",
                  "g",
                  "c0",
                  "c1",
                  "c2",
                  "valid",
                  "post",
                  "sol1",
                  "w",
                  "sol2",
                  "s0",
                  "s1",
                  "s2"
                ]
              ],
              [
                "test_5_10",
                [
                  "err2",
                  "c",
                  "err1",
                  "err",
                  "g",
                  "c0",
                  "c1",
                  "c2",
                  "valid",
                  "post",
                  "sol1",
                  "w",
                  "sol2",
                  "s0",
                  "s1",
                  "s2"
                ]
              ],
              [
                "test_0_0",
                [
                  "err2",
                  "err1",
                  "err",
                  "g",
                  "c0",
                  "c1",
                  "c2",
                  "valid",
                  "sol1",
                  "sol2",
                  "s0",
                  "s1",
                  "s2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_0_10",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_5_10",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_0_0",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9847718056050144,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_10_0",
                  "test_0_10",
                  0.9976584387651921
                ],
                [
                  "test_0_0",
                  "test_10_0",
                  0.982853105345887
                ],
                [
                  "test_0_0",
                  "test_5_10",
                  0.9739725684301532
                ],
                [
                  "test_10_0",
                  "test_5_10",
                  0.9871779555498804
                ],
                [
                  "test_0_0",
                  "test_0_10",
                  0.983786504329092
                ],
                [
                  "test_0_10",
                  "test_5_10",
                  0.9831822612098814
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_10_0",
                "false"
              ],
              [
                "test_0_10",
                "false"
              ],
              [
                "test_5_10",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "test_k_to_g",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_25_30",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_0_0_0",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_0_0",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_25_30",
                  "[]"
                ],
                [
                  "test_0_0_0",
                  "[]"
                ],
                [
                  "test_0_0",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_25_30",
                  "true"
                ],
                [
                  "test_0_0_0",
                  "true"
                ],
                [
                  "test_0_0",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_25_30",
                  "false"
                ],
                [
                  "test_0_0_0",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_25_30",
                  "false"
                ],
                [
                  "test_0_0_0",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_25_30",
                  "false"
                ],
                [
                  "test_0_0_0",
                  "false"
                ],
                [
                  "test_0_0",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                "false"
              ],
              [
                "test_0_0_0",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                "false"
              ],
              [
                "test_0_0_0",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_25_30",
                []
              ],
              [
                "test_0_0_0",
                [
                  "self.omega"
                ]
              ],
              [
                "test_0_0",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                "false"
              ],
              [
                "test_0_0_0",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_25_30",
                "true"
              ],
              [
                "test_0_0_0",
                "true"
              ],
              [
                "test_0_0",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_25_30",
                  "0"
                ],
                [
                  "test_0_0_0",
                  "0"
                ],
                [
                  "test_0_0",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_25_30",
                  "0"
                ],
                [
                  "test_0_0_0",
                  "0"
                ],
                [
                  "test_0_0",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_25_30",
                "true"
              ],
              [
                "test_0_0_0",
                "true"
              ],
              [
                "test_0_0",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                "false"
              ],
              [
                "test_0_0_0",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                "1"
              ],
              [
                "test_0_0_0",
                "1"
              ],
              [
                "test_0_0",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                [
                  "g_new",
                  "c",
                  "SANITY",
                  "post",
                  "w",
                  "g_old",
                  "k",
                  "om"
                ]
              ],
              [
                "test_0_0_0",
                [
                  "g_new",
                  "SANITY",
                  "g_old",
                  "k",
                  "om"
                ]
              ],
              [
                "test_0_0",
                [
                  "g_new",
                  "SANITY",
                  "g_old",
                  "k",
                  "om"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_0_0_0",
                [
                  "self.wvln",
                  "self.np",
                  "self.eta",
                  "self.tth"
                ]
              ],
              [
                "test_0_0",
                [
                  "self.wvln",
                  "self.np",
                  "self.omega",
                  "self.eta",
                  "self.tth"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.958050701714846,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_0_0_0",
                  "test_0_0",
                  0.957685082574878
                ],
                [
                  "test_0_0_0",
                  "test_25_30",
                  0.9354708394361149
                ],
                [
                  "test_0_0",
                  "test_25_30",
                  0.9809961831335449
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_25_30",
                "false"
              ],
              [
                "test_0_0_0",
                "false"
              ],
              [
                "test_0_0",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "test_rotation_axis",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_rotate_vectors1",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertNotAlmostEqual]"
                ],
                [
                  "test_Rz0",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_rotate_vectors2",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_rotate_vectors",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_Rz30",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_from_matrix",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertNotAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertNotAlmostEqual]"
                ],
                [
                  "test_rotate_vectors_a",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertNotAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_rotate_vectors1",
                  "[]"
                ],
                [
                  "test_Rz0",
                  "[]"
                ],
                [
                  "test_rotate_vectors2",
                  "[]"
                ],
                [
                  "test_rotate_vectors",
                  "[]"
                ],
                [
                  "test_Rz30",
                  "[]"
                ],
                [
                  "test_from_matrix",
                  "[]"
                ],
                [
                  "test_rotate_vectors_a",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_rotate_vectors1",
                  "false"
                ],
                [
                  "test_Rz0",
                  "false"
                ],
                [
                  "test_rotate_vectors2",
                  "false"
                ],
                [
                  "test_rotate_vectors",
                  "false"
                ],
                [
                  "test_Rz30",
                  "false"
                ],
                [
                  "test_from_matrix",
                  "false"
                ],
                [
                  "test_rotate_vectors_a",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_rotate_vectors1",
                  "false"
                ],
                [
                  "test_Rz0",
                  "false"
                ],
                [
                  "test_rotate_vectors2",
                  "false"
                ],
                [
                  "test_rotate_vectors",
                  "false"
                ],
                [
                  "test_Rz30",
                  "false"
                ],
                [
                  "test_from_matrix",
                  "false"
                ],
                [
                  "test_rotate_vectors_a",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_rotate_vectors1",
                  "false"
                ],
                [
                  "test_Rz0",
                  "false"
                ],
                [
                  "test_rotate_vectors2",
                  "false"
                ],
                [
                  "test_rotate_vectors",
                  "false"
                ],
                [
                  "test_Rz30",
                  "false"
                ],
                [
                  "test_from_matrix",
                  "false"
                ],
                [
                  "test_rotate_vectors_a",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_rotate_vectors1",
                  "false"
                ],
                [
                  "test_Rz0",
                  "false"
                ],
                [
                  "test_rotate_vectors2",
                  "false"
                ],
                [
                  "test_rotate_vectors",
                  "false"
                ],
                [
                  "test_Rz30",
                  "false"
                ],
                [
                  "test_from_matrix",
                  "false"
                ],
                [
                  "test_rotate_vectors_a",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                "false"
              ],
              [
                "test_Rz0",
                "false"
              ],
              [
                "test_rotate_vectors2",
                "false"
              ],
              [
                "test_rotate_vectors",
                "false"
              ],
              [
                "test_Rz30",
                "false"
              ],
              [
                "test_from_matrix",
                "false"
              ],
              [
                "test_rotate_vectors_a",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                "false"
              ],
              [
                "test_Rz0",
                "false"
              ],
              [
                "test_rotate_vectors2",
                "false"
              ],
              [
                "test_rotate_vectors",
                "false"
              ],
              [
                "test_Rz30",
                "false"
              ],
              [
                "test_from_matrix",
                "false"
              ],
              [
                "test_rotate_vectors_a",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                []
              ],
              [
                "test_Rz0",
                []
              ],
              [
                "test_rotate_vectors2",
                []
              ],
              [
                "test_rotate_vectors",
                []
              ],
              [
                "test_Rz30",
                []
              ],
              [
                "test_from_matrix",
                []
              ],
              [
                "test_rotate_vectors_a",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                "false"
              ],
              [
                "test_Rz0",
                "false"
              ],
              [
                "test_rotate_vectors2",
                "false"
              ],
              [
                "test_rotate_vectors",
                "false"
              ],
              [
                "test_Rz30",
                "false"
              ],
              [
                "test_from_matrix",
                "false"
              ],
              [
                "test_rotate_vectors_a",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_rotate_vectors1",
                "true"
              ],
              [
                "test_Rz0",
                "true"
              ],
              [
                "test_rotate_vectors2",
                "true"
              ],
              [
                "test_rotate_vectors",
                "true"
              ],
              [
                "test_Rz30",
                "true"
              ],
              [
                "test_from_matrix",
                "true"
              ],
              [
                "test_rotate_vectors_a",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_rotate_vectors1",
                  "0"
                ],
                [
                  "test_Rz0",
                  "0"
                ],
                [
                  "test_rotate_vectors2",
                  "0"
                ],
                [
                  "test_rotate_vectors",
                  "0"
                ],
                [
                  "test_Rz30",
                  "0"
                ],
                [
                  "test_from_matrix",
                  "0"
                ],
                [
                  "test_rotate_vectors_a",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_rotate_vectors1",
                  "0"
                ],
                [
                  "test_Rz0",
                  "0"
                ],
                [
                  "test_rotate_vectors2",
                  "0"
                ],
                [
                  "test_rotate_vectors",
                  "0"
                ],
                [
                  "test_Rz30",
                  "0"
                ],
                [
                  "test_from_matrix",
                  "0"
                ],
                [
                  "test_rotate_vectors_a",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                "false"
              ],
              [
                "test_Rz0",
                "false"
              ],
              [
                "test_rotate_vectors2",
                "false"
              ],
              [
                "test_rotate_vectors",
                "false"
              ],
              [
                "test_Rz30",
                "false"
              ],
              [
                "test_from_matrix",
                "false"
              ],
              [
                "test_rotate_vectors_a",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                "false"
              ],
              [
                "test_Rz0",
                "false"
              ],
              [
                "test_rotate_vectors2",
                "false"
              ],
              [
                "test_rotate_vectors",
                "false"
              ],
              [
                "test_Rz30",
                "false"
              ],
              [
                "test_from_matrix",
                "false"
              ],
              [
                "test_rotate_vectors_a",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                "3"
              ],
              [
                "test_Rz0",
                "1"
              ],
              [
                "test_rotate_vectors2",
                "2"
              ],
              [
                "test_rotate_vectors",
                "3"
              ],
              [
                "test_Rz30",
                "1"
              ],
              [
                "test_from_matrix",
                "5"
              ],
              [
                "test_rotate_vectors_a",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                [
                  "res",
                  "vecs",
                  "o",
                  "r1"
                ]
              ],
              [
                "test_Rz0",
                [
                  "o"
                ]
              ],
              [
                "test_rotate_vectors2",
                [
                  "res",
                  "vecs",
                  "o",
                  "r1"
                ]
              ],
              [
                "test_rotate_vectors",
                [
                  "res",
                  "m1",
                  "err",
                  "angs",
                  "m2",
                  "m3",
                  "m4",
                  "vecs",
                  "o"
                ]
              ],
              [
                "test_Rz30",
                [
                  "c30",
                  "s30",
                  "r",
                  "e",
                  "o"
                ]
              ],
              [
                "test_from_matrix",
                [
                  "c30",
                  "s30",
                  "m",
                  "o"
                ]
              ],
              [
                "test_rotate_vectors_a",
                [
                  "r2",
                  "res",
                  "vecs",
                  "o"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                []
              ],
              [
                "test_Rz0",
                []
              ],
              [
                "test_rotate_vectors2",
                []
              ],
              [
                "test_rotate_vectors",
                []
              ],
              [
                "test_Rz30",
                []
              ],
              [
                "test_from_matrix",
                []
              ],
              [
                "test_rotate_vectors_a",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.880674754833612,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_Rz30",
                  "test_rotate_vectors",
                  0.914565911987592
                ],
                [
                  "test_Rz30",
                  "test_rotate_vectors1",
                  0.7631086078087421
                ],
                [
                  "test_Rz0",
                  "test_from_matrix",
                  0.8901603839913426
                ],
                [
                  "test_rotate_vectors1",
                  "test_rotate_vectors2",
                  0.7668923821475757
                ],
                [
                  "test_rotate_vectors",
                  "test_rotate_vectors2",
                  0.9455556468194557
                ],
                [
                  "test_Rz30",
                  "test_from_matrix",
                  0.9363068068793781
                ],
                [
                  "test_from_matrix",
                  "test_rotate_vectors2",
                  0.9117692016184168
                ],
                [
                  "test_rotate_vectors",
                  "test_rotate_vectors_a",
                  0.9460884526247467
                ],
                [
                  "test_from_matrix",
                  "test_rotate_vectors1",
                  0.779435823338608
                ],
                [
                  "test_Rz0",
                  "test_Rz30",
                  0.8887559469184126
                ],
                [
                  "test_Rz30",
                  "test_rotate_vectors2",
                  0.9402586337312137
                ],
                [
                  "test_rotate_vectors_a",
                  "test_rotate_vectors1",
                  0.91215583297016
                ],
                [
                  "test_Rz0",
                  "test_rotate_vectors2",
                  0.8548586291287783
                ],
                [
                  "test_from_matrix",
                  "test_rotate_vectors",
                  0.9138212087244199
                ],
                [
                  "test_Rz0",
                  "test_rotate_vectors_a",
                  0.8962221898658359
                ],
                [
                  "test_from_matrix",
                  "test_rotate_vectors_a",
                  0.9001647761500109
                ],
                [
                  "test_rotate_vectors_a",
                  "test_rotate_vectors2",
                  0.9287790491146737
                ],
                [
                  "test_Rz30",
                  "test_rotate_vectors_a",
                  0.8888286944431648
                ],
                [
                  "test_Rz0",
                  "test_rotate_vectors",
                  0.8665737675310548
                ],
                [
                  "test_rotate_vectors",
                  "test_rotate_vectors1",
                  0.8177677041131575
                ],
                [
                  "test_Rz0",
                  "test_rotate_vectors1",
                  0.8321002015991135
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_vectors1",
                "false"
              ],
              [
                "test_Rz0",
                "false"
              ],
              [
                "test_rotate_vectors2",
                "false"
              ],
              [
                "test_rotate_vectors",
                "false"
              ],
              [
                "test_Rz30",
                "false"
              ],
              [
                "test_from_matrix",
                "false"
              ],
              [
                "test_rotate_vectors_a",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "test_\u0026_test_index_unknown_\u0026_test_index_unknown.py",
    "testCases": [
      {
        "name": "testGve",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test1",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test1",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test1",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test1",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test1",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test1",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test1",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test1",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                [
                  "e"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                [
                  "self.fnames"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test1",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]