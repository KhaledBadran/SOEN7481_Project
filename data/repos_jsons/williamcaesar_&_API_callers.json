[
  {
    "name": "tests_\u0026_test_api_user.py",
    "testCases": [
      {
        "name": "TestAPIUser",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_receiving_json",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_receiving_json",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_receiving_json",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_receiving_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_receiving_json",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_receiving_json",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_receiving_json",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_receiving_json",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                [
                  "user",
                  "token"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_receiving_json",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_syncCaller.py",
    "testCases": [
      {
        "name": "TestSyncCaller",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_send_3",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_results",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_send_one",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_send_3",
                  "[]"
                ],
                [
                  "test_results",
                  "[]"
                ],
                [
                  "test_send_one",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_send_3",
                  "false"
                ],
                [
                  "test_results",
                  "false"
                ],
                [
                  "test_send_one",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_send_3",
                  "true"
                ],
                [
                  "test_results",
                  "false"
                ],
                [
                  "test_send_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_send_3",
                  "false"
                ],
                [
                  "test_results",
                  "false"
                ],
                [
                  "test_send_one",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_send_3",
                  "false"
                ],
                [
                  "test_results",
                  "false"
                ],
                [
                  "test_send_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                "false"
              ],
              [
                "test_results",
                "false"
              ],
              [
                "test_send_one",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                "false"
              ],
              [
                "test_results",
                "false"
              ],
              [
                "test_send_one",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                []
              ],
              [
                "test_results",
                []
              ],
              [
                "test_send_one",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                "false"
              ],
              [
                "test_results",
                "false"
              ],
              [
                "test_send_one",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_send_3",
                "true"
              ],
              [
                "test_results",
                "true"
              ],
              [
                "test_send_one",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_send_3",
                  "0"
                ],
                [
                  "test_results",
                  "0"
                ],
                [
                  "test_send_one",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_send_3",
                  "0"
                ],
                [
                  "test_results",
                  "0"
                ],
                [
                  "test_send_one",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_send_3",
                "false"
              ],
              [
                "test_results",
                "false"
              ],
              [
                "test_send_one",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                "false"
              ],
              [
                "test_results",
                "false"
              ],
              [
                "test_send_one",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                "7"
              ],
              [
                "test_results",
                "3"
              ],
              [
                "test_send_one",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                [
                  "caller",
                  "payloads",
                  "response"
                ]
              ],
              [
                "test_results",
                [
                  "caller"
                ]
              ],
              [
                "test_send_one",
                [
                  "caller",
                  "response"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                []
              ],
              [
                "test_results",
                []
              ],
              [
                "test_send_one",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8138384073365562,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_send_one",
                  "test_results",
                  0.8304547985373996
                ],
                [
                  "test_send_one",
                  "test_send_3",
                  0.8205764800142983
                ],
                [
                  "test_send_3",
                  "test_results",
                  0.790483943457971
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_send_3",
                "false"
              ],
              [
                "test_results",
                "false"
              ],
              [
                "test_send_one",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_asyncCaller.py",
    "testCases": [
      {
        "name": "TestSyncCaller",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_send_one",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_send_3",
                  "[PyCallExpression: self.assertGreater, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_send_one",
                  "[]"
                ],
                [
                  "test_send_3",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_send_one",
                  "false"
                ],
                [
                  "test_send_3",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_send_one",
                  "false"
                ],
                [
                  "test_send_3",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_send_one",
                  "false"
                ],
                [
                  "test_send_3",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_send_one",
                  "false"
                ],
                [
                  "test_send_3",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                "false"
              ],
              [
                "test_send_3",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                "false"
              ],
              [
                "test_send_3",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                []
              ],
              [
                "test_send_3",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                "false"
              ],
              [
                "test_send_3",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_send_one",
                "true"
              ],
              [
                "test_send_3",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_send_one",
                  "0"
                ],
                [
                  "test_send_3",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_send_one",
                  "0"
                ],
                [
                  "test_send_3",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_send_one",
                "true"
              ],
              [
                "test_send_3",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                "false"
              ],
              [
                "test_send_3",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                "4"
              ],
              [
                "test_send_3",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                [
                  "caller",
                  "response"
                ]
              ],
              [
                "test_send_3",
                [
                  "caller",
                  "payloads",
                  "response"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                []
              ],
              [
                "test_send_3",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8279955111928035,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_send_one",
                  "test_send_3",
                  0.8279955111928035
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_send_one",
                "false"
              ],
              [
                "test_send_3",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]