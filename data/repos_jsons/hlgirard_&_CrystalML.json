[
  {
    "name": "tests_\u0026_integration_\u0026_test_labeling.py",
    "testCases": [
      {
        "name": "TestLabelDroplets",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_crystal_clear_predictions",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_crystal_clear_predictions",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_crystal_clear_predictions",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_crystal_clear_predictions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_crystal_clear_predictions",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_crystal_clear_predictions",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_crystal_clear_predictions",
                [
                  "self.model_name",
                  "self.test_images_folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_crystal_clear_predictions",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_crystal_clear_predictions",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                [
                  "num_crystals",
                  "Y"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                [
                  "self.num_crystals",
                  "self.test_images_array",
                  "self.model",
                  "self.permitted_delta"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_crystal_clear_predictions",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_unit_\u0026_test_data_processing.py",
    "testCases": [
      {
        "name": "TestOpenImage",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_open_non_image_raises_error",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "[]"
                ],
                [
                  "test_open_non_image_raises_error",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "false"
                ],
                [
                  "test_open_non_image_raises_error",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "false"
                ],
                [
                  "test_open_non_image_raises_error",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "false"
                ],
                [
                  "test_open_non_image_raises_error",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "false"
                ],
                [
                  "test_open_non_image_raises_error",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "false"
              ],
              [
                "test_open_non_image_raises_error",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "false"
              ],
              [
                "test_open_non_image_raises_error",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                []
              ],
              [
                "test_open_non_image_raises_error",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "false"
              ],
              [
                "test_open_non_image_raises_error",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "false"
              ],
              [
                "test_open_non_image_raises_error",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "0"
                ],
                [
                  "test_open_non_image_raises_error",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "0"
                ],
                [
                  "test_open_non_image_raises_error",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "false"
              ],
              [
                "test_open_non_image_raises_error",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "false"
              ],
              [
                "test_open_non_image_raises_error",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "1"
              ],
              [
                "test_open_non_image_raises_error",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                []
              ],
              [
                "test_open_non_image_raises_error",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                []
              ],
              [
                "test_open_non_image_raises_error",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6508140266182865,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_open_asserts_error_if_file_not_found",
                  "test_open_non_image_raises_error",
                  0.6508140266182865
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_open_asserts_error_if_file_not_found",
                "false"
              ],
              [
                "test_open_non_image_raises_error",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestCrop",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_crop",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_crop",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_crop",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_crop",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_crop",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_crop",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_crop",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_crop",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                [
                  "crop_box",
                  "cropped"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                [
                  "self.empty_img"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_crop",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestUtils",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_date_taken",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_date_taken",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_date_taken",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_date_taken",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_date_taken",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_date_taken",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_date_taken",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_date_taken",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                [
                  "img_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_date_taken",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_\u0026_test_segmentation.py",
    "testCases": [
      {
        "name": "TestSegmentDroplets",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_segment_some_crystals",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_segment_empty_droplets",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_segment_all_crystals",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_segment_some_crystals",
                  "[]"
                ],
                [
                  "test_segment_empty_droplets",
                  "[]"
                ],
                [
                  "test_segment_all_crystals",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_segment_some_crystals",
                  "false"
                ],
                [
                  "test_segment_empty_droplets",
                  "false"
                ],
                [
                  "test_segment_all_crystals",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_segment_some_crystals",
                  "false"
                ],
                [
                  "test_segment_empty_droplets",
                  "false"
                ],
                [
                  "test_segment_all_crystals",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_segment_some_crystals",
                  "false"
                ],
                [
                  "test_segment_empty_droplets",
                  "false"
                ],
                [
                  "test_segment_all_crystals",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_segment_some_crystals",
                  "false"
                ],
                [
                  "test_segment_empty_droplets",
                  "false"
                ],
                [
                  "test_segment_all_crystals",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "false"
              ],
              [
                "test_segment_empty_droplets",
                "false"
              ],
              [
                "test_segment_all_crystals",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "false"
              ],
              [
                "test_segment_empty_droplets",
                "false"
              ],
              [
                "test_segment_all_crystals",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_segment_some_crystals",
                [
                  "self.empty_img",
                  "self.all_crystals_img"
                ]
              ],
              [
                "test_segment_empty_droplets",
                [
                  "self.some_crystals_img",
                  "self.all_crystals_img"
                ]
              ],
              [
                "test_segment_all_crystals",
                [
                  "self.empty_img",
                  "self.some_crystals_img"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "false"
              ],
              [
                "test_segment_empty_droplets",
                "false"
              ],
              [
                "test_segment_all_crystals",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "false"
              ],
              [
                "test_segment_empty_droplets",
                "false"
              ],
              [
                "test_segment_all_crystals",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_segment_some_crystals",
                  "0"
                ],
                [
                  "test_segment_empty_droplets",
                  "0"
                ],
                [
                  "test_segment_all_crystals",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_segment_some_crystals",
                  "0"
                ],
                [
                  "test_segment_empty_droplets",
                  "0"
                ],
                [
                  "test_segment_all_crystals",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "false"
              ],
              [
                "test_segment_empty_droplets",
                "false"
              ],
              [
                "test_segment_all_crystals",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "false"
              ],
              [
                "test_segment_empty_droplets",
                "false"
              ],
              [
                "test_segment_all_crystals",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "1"
              ],
              [
                "test_segment_empty_droplets",
                "1"
              ],
              [
                "test_segment_all_crystals",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                [
                  "num_regions",
                  "_"
                ]
              ],
              [
                "test_segment_empty_droplets",
                [
                  "num_regions",
                  "_"
                ]
              ],
              [
                "test_segment_all_crystals",
                [
                  "num_regions",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                [
                  "self.delta",
                  "self.some_crystals_img",
                  "self.num_droplets"
                ]
              ],
              [
                "test_segment_empty_droplets",
                [
                  "self.delta",
                  "self.empty_img",
                  "self.num_droplets"
                ]
              ],
              [
                "test_segment_all_crystals",
                [
                  "self.delta",
                  "self.all_crystals_img",
                  "self.num_droplets"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8471884544454155,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_segment_empty_droplets",
                  "test_segment_all_crystals",
                  0.8207826816681232
                ],
                [
                  "test_segment_empty_droplets",
                  "test_segment_some_crystals",
                  0.8207826816681232
                ],
                [
                  "test_segment_some_crystals",
                  "test_segment_all_crystals",
                  0.8999999999999998
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_segment_some_crystals",
                "false"
              ],
              [
                "test_segment_empty_droplets",
                "false"
              ],
              [
                "test_segment_all_crystals",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]