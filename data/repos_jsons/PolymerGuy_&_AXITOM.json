[
  {
    "name": "axitom_\u0026_tests_\u0026_test_real_projections.py",
    "testCases": [
      {
        "name": "Test_CompareToExternalSoftware",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compare_to_external_software",
                  "[PyCallExpression: self.fail]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compare_to_external_software",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compare_to_external_software",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compare_to_external_software",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compare_to_external_software",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compare_to_external_software",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compare_to_external_software",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compare_to_external_software",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_compare_to_external_software",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                [
                  "recon_crop_norm",
                  "correct",
                  "recon",
                  "recon_crop",
                  "correct_norm",
                  "dir_path",
                  "error_field"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compare_to_external_software",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "axitom_\u0026_tests_\u0026_test_rotate_coordinates.py",
    "testCases": [
      {
        "name": "Test_RotateCoordinates",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "[PyCallExpression: self.fail]"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "[PyCallExpression: self.fail]"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "[PyCallExpression: self.fail]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "[]"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "[]"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "true"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "true"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "false"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "false"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "false"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "false"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "false"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "false"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "false"
              ],
              [
                "test_rotate_coordinates_0deg",
                "false"
              ],
              [
                "test_rotate_coordinates_90deg",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "false"
              ],
              [
                "test_rotate_coordinates_0deg",
                "false"
              ],
              [
                "test_rotate_coordinates_90deg",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                []
              ],
              [
                "test_rotate_coordinates_0deg",
                []
              ],
              [
                "test_rotate_coordinates_90deg",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "false"
              ],
              [
                "test_rotate_coordinates_0deg",
                "false"
              ],
              [
                "test_rotate_coordinates_90deg",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "false"
              ],
              [
                "test_rotate_coordinates_0deg",
                "false"
              ],
              [
                "test_rotate_coordinates_90deg",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "0"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "0"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_rotate_coordinates_forward_and_reverse",
                  "0"
                ],
                [
                  "test_rotate_coordinates_0deg",
                  "0"
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "true"
              ],
              [
                "test_rotate_coordinates_0deg",
                "true"
              ],
              [
                "test_rotate_coordinates_90deg",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "false"
              ],
              [
                "test_rotate_coordinates_0deg",
                "false"
              ],
              [
                "test_rotate_coordinates_90deg",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "0"
              ],
              [
                "test_rotate_coordinates_0deg",
                "0"
              ],
              [
                "test_rotate_coordinates_90deg",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                [
                  "tol",
                  "yr_forw",
                  "error_xs",
                  "n_coordinates",
                  "error_ys",
                  "yr",
                  "ys",
                  "xr",
                  "rotation_angle",
                  "xs",
                  "xr_forw"
                ]
              ],
              [
                "test_rotate_coordinates_0deg",
                [
                  "tol",
                  "error_xs",
                  "n_coordinates",
                  "error_ys",
                  "yr",
                  "ys",
                  "xr",
                  "rotation_angle",
                  "xs"
                ]
              ],
              [
                "test_rotate_coordinates_90deg",
                [
                  "tol",
                  "error_xs",
                  "n_coordinates",
                  "error_ys",
                  "yr",
                  "ys",
                  "xr",
                  "rotation_angle",
                  "xs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                []
              ],
              [
                "test_rotate_coordinates_0deg",
                []
              ],
              [
                "test_rotate_coordinates_90deg",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9667876112265983,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_rotate_coordinates_0deg",
                  "test_rotate_coordinates_forward_and_reverse",
                  0.9576715197444301
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "test_rotate_coordinates_0deg",
                  0.9825695552015121
                ],
                [
                  "test_rotate_coordinates_90deg",
                  "test_rotate_coordinates_forward_and_reverse",
                  0.9601217587338529
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_rotate_coordinates_forward_and_reverse",
                "false"
              ],
              [
                "test_rotate_coordinates_0deg",
                "false"
              ],
              [
                "test_rotate_coordinates_90deg",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "axitom_\u0026_tests_\u0026_test_axis_sym_projection.py",
    "testCases": [
      {
        "name": "TestAxis_sym_projection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_axis_sym_projection",
                  "[PyCallExpression: self.fail]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_axis_sym_projection",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_axis_sym_projection",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_axis_sym_projection",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_axis_sym_projection",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_axis_sym_projection",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_axis_sym_projection",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_axis_sym_projection",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_axis_sym_projection",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                [
                  "tol",
                  "volume",
                  "angles",
                  "proj",
                  "error",
                  "config"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_axis_sym_projection",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "axitom_\u0026_tests_\u0026_test_simulated_projections.py",
    "testCases": [
      {
        "name": "Test_SimulatedProjections",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "[]"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "[]"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "false"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "false"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "false"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "false"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "false"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "false"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                []
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "false"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "false"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "0"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "0"
                ],
                [
                  "test_reconstruction_of_gradient_barrel",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "false"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "false"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "0"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                [
                  "path_to_projections",
                  "correct"
                ]
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                [
                  "path_to_projections",
                  "correct"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                []
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9077552576785977,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_reconstruction_of_massive_barrel",
                  "test_reconstruction_of_gradient_barrel",
                  0.9077552576785977
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_reconstruction_of_massive_barrel",
                "false"
              ],
              [
                "test_reconstruction_of_gradient_barrel",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "axitom_\u0026_tests_\u0026_test_map_object_to_detector_coords.py",
    "testCases": [
      {
        "name": "TestMap_object_to_detector_coords",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "[PyCallExpression: self.fail]"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "[PyCallExpression: self.fail]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "[]"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "true"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "false"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "false"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "false"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "false"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "false"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                []
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "false"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "false"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "0"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "0"
                ],
                [
                  "test_map_object_to_detector_coords_2xmag",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "true"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "false"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "0"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                [
                  "tol",
                  "zs",
                  "ys",
                  "xs",
                  "detector_a",
                  "config",
                  "detector_b",
                  "corr_vs",
                  "xs_error",
                  "corr_us",
                  "ys_error"
                ]
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                [
                  "tol",
                  "ys",
                  "xs",
                  "detector_a",
                  "config",
                  "detector_b",
                  "corr_vs",
                  "xs_error",
                  "corr_us",
                  "ys_error"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                []
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9034394960319391,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_map_object_to_detector_coords_1xmag",
                  "test_map_object_to_detector_coords_2xmag",
                  0.9034394960319391
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_map_object_to_detector_coords_1xmag",
                "false"
              ],
              [
                "test_map_object_to_detector_coords_2xmag",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]