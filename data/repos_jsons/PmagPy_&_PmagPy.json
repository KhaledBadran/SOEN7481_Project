[
  {
    "name": "pmagpy_tests_\u0026_test_env.py",
    "testCases": [
      {
        "name": "TestEnvVariables",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_is_frozen",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_is_server",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_is_notebook",
                  "[PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_is_frozen",
                  "[]"
                ],
                [
                  "test_is_server",
                  "[]"
                ],
                [
                  "test_is_notebook",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_is_frozen",
                  "false"
                ],
                [
                  "test_is_server",
                  "false"
                ],
                [
                  "test_is_notebook",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_is_frozen",
                  "false"
                ],
                [
                  "test_is_server",
                  "false"
                ],
                [
                  "test_is_notebook",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_is_frozen",
                  "false"
                ],
                [
                  "test_is_server",
                  "false"
                ],
                [
                  "test_is_notebook",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_is_frozen",
                  "false"
                ],
                [
                  "test_is_server",
                  "false"
                ],
                [
                  "test_is_notebook",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "false"
              ],
              [
                "test_is_server",
                "false"
              ],
              [
                "test_is_notebook",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "false"
              ],
              [
                "test_is_server",
                "false"
              ],
              [
                "test_is_notebook",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                []
              ],
              [
                "test_is_server",
                []
              ],
              [
                "test_is_notebook",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "false"
              ],
              [
                "test_is_server",
                "false"
              ],
              [
                "test_is_notebook",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "false"
              ],
              [
                "test_is_server",
                "false"
              ],
              [
                "test_is_notebook",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_is_frozen",
                  "0"
                ],
                [
                  "test_is_server",
                  "0"
                ],
                [
                  "test_is_notebook",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_is_frozen",
                  "0"
                ],
                [
                  "test_is_server",
                  "0"
                ],
                [
                  "test_is_notebook",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "false"
              ],
              [
                "test_is_server",
                "false"
              ],
              [
                "test_is_notebook",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "false"
              ],
              [
                "test_is_server",
                "false"
              ],
              [
                "test_is_notebook",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "1"
              ],
              [
                "test_is_server",
                "1"
              ],
              [
                "test_is_notebook",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                []
              ],
              [
                "test_is_server",
                []
              ],
              [
                "test_is_notebook",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                []
              ],
              [
                "test_is_server",
                []
              ],
              [
                "test_is_notebook",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6860260682416408,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_is_server",
                  "test_is_frozen",
                  0.6123724356957945
                ],
                [
                  "test_is_frozen",
                  "test_is_notebook",
                  0.8333333333333335
                ],
                [
                  "test_is_server",
                  "test_is_notebook",
                  0.6123724356957945
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_is_frozen",
                "false"
              ],
              [
                "test_is_server",
                "false"
              ],
              [
                "test_is_notebook",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_pmag.py",
    "testCases": [
      {
        "name": "TestLonAdjust",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_adjust",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_adjust",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_adjust",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_adjust",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_adjust",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_adjust",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_adjust",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_adjust",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_adjust",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_adjust",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestConvert2To3",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_upgrade_criteria",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_upgrade",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_upgrade_criteria",
                  "[]"
                ],
                [
                  "test_upgrade",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_upgrade_criteria",
                  "false"
                ],
                [
                  "test_upgrade",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_upgrade_criteria",
                  "false"
                ],
                [
                  "test_upgrade",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_upgrade_criteria",
                  "false"
                ],
                [
                  "test_upgrade",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_upgrade_criteria",
                  "false"
                ],
                [
                  "test_upgrade",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                "false"
              ],
              [
                "test_upgrade",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                "false"
              ],
              [
                "test_upgrade",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                []
              ],
              [
                "test_upgrade",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                "false"
              ],
              [
                "test_upgrade",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                "false"
              ],
              [
                "test_upgrade",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_upgrade_criteria",
                  "0"
                ],
                [
                  "test_upgrade",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_upgrade_criteria",
                  "0"
                ],
                [
                  "test_upgrade",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_upgrade_criteria",
                "true"
              ],
              [
                "test_upgrade",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                "false"
              ],
              [
                "test_upgrade",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                "1"
              ],
              [
                "test_upgrade",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                [
                  "output",
                  "outfile"
                ]
              ],
              [
                "test_upgrade",
                [
                  "upgraded",
                  "expect_not_out",
                  "meas",
                  "no_upgrade",
                  "expect_out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                []
              ],
              [
                "test_upgrade",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6285393610547089,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_upgrade",
                  "test_upgrade_criteria",
                  0.6285393610547089
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_upgrade_criteria",
                "false"
              ],
              [
                "test_upgrade",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestGetPlateData",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_plate_data",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_plate_data",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_plate_data",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_plate_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_plate_data",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_plate_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_plate_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_plate_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                [
                  "res",
                  "length",
                  "expected_out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_plate_data",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestMagicRead",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_magic_read_success",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_open_file_unicode",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_open_file_non_unicode",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_magic_read_no_such_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_magic_read_success",
                  "[]"
                ],
                [
                  "test_open_file_unicode",
                  "[]"
                ],
                [
                  "test_open_file_non_unicode",
                  "[]"
                ],
                [
                  "test_magic_read_no_such_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_magic_read_success",
                  "false"
                ],
                [
                  "test_open_file_unicode",
                  "false"
                ],
                [
                  "test_open_file_non_unicode",
                  "false"
                ],
                [
                  "test_magic_read_no_such_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_magic_read_success",
                  "false"
                ],
                [
                  "test_open_file_unicode",
                  "false"
                ],
                [
                  "test_open_file_non_unicode",
                  "false"
                ],
                [
                  "test_magic_read_no_such_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_magic_read_success",
                  "false"
                ],
                [
                  "test_open_file_unicode",
                  "false"
                ],
                [
                  "test_open_file_non_unicode",
                  "false"
                ],
                [
                  "test_magic_read_no_such_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_magic_read_success",
                  "false"
                ],
                [
                  "test_open_file_unicode",
                  "false"
                ],
                [
                  "test_open_file_non_unicode",
                  "false"
                ],
                [
                  "test_magic_read_no_such_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                "false"
              ],
              [
                "test_open_file_unicode",
                "false"
              ],
              [
                "test_open_file_non_unicode",
                "false"
              ],
              [
                "test_magic_read_no_such_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                "false"
              ],
              [
                "test_open_file_unicode",
                "false"
              ],
              [
                "test_open_file_non_unicode",
                "false"
              ],
              [
                "test_magic_read_no_such_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                []
              ],
              [
                "test_open_file_unicode",
                []
              ],
              [
                "test_open_file_non_unicode",
                []
              ],
              [
                "test_magic_read_no_such_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                "false"
              ],
              [
                "test_open_file_unicode",
                "false"
              ],
              [
                "test_open_file_non_unicode",
                "false"
              ],
              [
                "test_magic_read_no_such_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_magic_read_success",
                "true"
              ],
              [
                "test_open_file_unicode",
                "true"
              ],
              [
                "test_open_file_non_unicode",
                "false"
              ],
              [
                "test_magic_read_no_such_file",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_magic_read_success",
                  "0"
                ],
                [
                  "test_open_file_unicode",
                  "0"
                ],
                [
                  "test_open_file_non_unicode",
                  "0"
                ],
                [
                  "test_magic_read_no_such_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_magic_read_success",
                  "0"
                ],
                [
                  "test_open_file_unicode",
                  "0"
                ],
                [
                  "test_open_file_non_unicode",
                  "0"
                ],
                [
                  "test_magic_read_no_such_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_magic_read_success",
                "false"
              ],
              [
                "test_open_file_unicode",
                "true"
              ],
              [
                "test_open_file_non_unicode",
                "false"
              ],
              [
                "test_magic_read_no_such_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                "false"
              ],
              [
                "test_open_file_unicode",
                "false"
              ],
              [
                "test_open_file_non_unicode",
                "false"
              ],
              [
                "test_magic_read_no_such_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                "3"
              ],
              [
                "test_open_file_unicode",
                "1"
              ],
              [
                "test_open_file_non_unicode",
                "1"
              ],
              [
                "test_magic_read_no_such_file",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                [
                  "fname",
                  "magic_keys",
                  "ftype",
                  "data"
                ]
              ],
              [
                "test_open_file_unicode",
                [
                  "fname",
                  "data"
                ]
              ],
              [
                "test_open_file_non_unicode",
                [
                  "fname",
                  "data"
                ]
              ],
              [
                "test_magic_read_no_such_file",
                [
                  "fname",
                  "ftype",
                  "data"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_magic_read_success",
                []
              ],
              [
                "test_open_file_unicode",
                []
              ],
              [
                "test_open_file_non_unicode",
                []
              ],
              [
                "test_magic_read_no_such_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5502965548680875,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_open_file_non_unicode",
                  "test_open_file_unicode",
                  0.7093084682410772
                ],
                [
                  "test_magic_read_success",
                  "test_magic_read_no_such_file",
                  0.6977706949752874
                ],
                [
                  "test_open_file_unicode",
                  "test_magic_read_no_such_file",
                  0.5356896807128709
                ],
                [
                  "test_open_file_non_unicode",
                  "test_magic_read_no_such_file",
                  0.4708709557974187
                ],
                [
                  "test_magic_read_success",
                  "test_open_file_unicode",
                  0.4777748521530727
                ],
                [
                  "test_magic_read_success",
                  "test_open_file_non_unicode",
                  0.41036467732879794
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_magic_read_success",
                "false"
              ],
              [
                "test_open_file_unicode",
                "false"
              ],
              [
                "test_open_file_non_unicode",
                "true"
              ],
              [
                "test_magic_read_no_such_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_ipmag.py",
    "testCases": [
      {
        "name": "TestIGRF",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_igrf_output",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_igrf_output",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_igrf_output",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_igrf_output",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_igrf_output",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_igrf_output",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_igrf_output",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_igrf_output",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                [
                  "result",
                  "reference"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_igrf_output",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestUploadMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_images_good",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_with_valid_files",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test3_with_contribution",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_images_bad",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_with_invalid_files",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_depth_propagation",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_different_input_output_dir",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test3_with_invalid_files",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_empty_dir",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_images_good",
                  "[]"
                ],
                [
                  "test_with_valid_files",
                  "[PyAssertStatement]"
                ],
                [
                  "test3_with_contribution",
                  "[]"
                ],
                [
                  "test_with_images_bad",
                  "[]"
                ],
                [
                  "test_with_invalid_files",
                  "[]"
                ],
                [
                  "test_depth_propagation",
                  "[]"
                ],
                [
                  "test_with_different_input_output_dir",
                  "[]"
                ],
                [
                  "test3_with_invalid_files",
                  "[]"
                ],
                [
                  "test_empty_dir",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_images_good",
                  "false"
                ],
                [
                  "test_with_valid_files",
                  "false"
                ],
                [
                  "test3_with_contribution",
                  "true"
                ],
                [
                  "test_with_images_bad",
                  "true"
                ],
                [
                  "test_with_invalid_files",
                  "true"
                ],
                [
                  "test_depth_propagation",
                  "false"
                ],
                [
                  "test_with_different_input_output_dir",
                  "false"
                ],
                [
                  "test3_with_invalid_files",
                  "false"
                ],
                [
                  "test_empty_dir",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_images_good",
                  "false"
                ],
                [
                  "test_with_valid_files",
                  "false"
                ],
                [
                  "test3_with_contribution",
                  "false"
                ],
                [
                  "test_with_images_bad",
                  "false"
                ],
                [
                  "test_with_invalid_files",
                  "false"
                ],
                [
                  "test_depth_propagation",
                  "false"
                ],
                [
                  "test_with_different_input_output_dir",
                  "false"
                ],
                [
                  "test3_with_invalid_files",
                  "false"
                ],
                [
                  "test_empty_dir",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_images_good",
                  "false"
                ],
                [
                  "test_with_valid_files",
                  "false"
                ],
                [
                  "test3_with_contribution",
                  "false"
                ],
                [
                  "test_with_images_bad",
                  "false"
                ],
                [
                  "test_with_invalid_files",
                  "false"
                ],
                [
                  "test_depth_propagation",
                  "false"
                ],
                [
                  "test_with_different_input_output_dir",
                  "false"
                ],
                [
                  "test3_with_invalid_files",
                  "false"
                ],
                [
                  "test_empty_dir",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_images_good",
                  "false"
                ],
                [
                  "test_with_valid_files",
                  "false"
                ],
                [
                  "test3_with_contribution",
                  "false"
                ],
                [
                  "test_with_images_bad",
                  "false"
                ],
                [
                  "test_with_invalid_files",
                  "false"
                ],
                [
                  "test_depth_propagation",
                  "false"
                ],
                [
                  "test_with_different_input_output_dir",
                  "false"
                ],
                [
                  "test3_with_invalid_files",
                  "false"
                ],
                [
                  "test_empty_dir",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_images_good",
                "false"
              ],
              [
                "test_with_valid_files",
                "false"
              ],
              [
                "test3_with_contribution",
                "false"
              ],
              [
                "test_with_images_bad",
                "false"
              ],
              [
                "test_with_invalid_files",
                "false"
              ],
              [
                "test_depth_propagation",
                "false"
              ],
              [
                "test_with_different_input_output_dir",
                "false"
              ],
              [
                "test3_with_invalid_files",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_images_good",
                "false"
              ],
              [
                "test_with_valid_files",
                "false"
              ],
              [
                "test3_with_contribution",
                "false"
              ],
              [
                "test_with_images_bad",
                "false"
              ],
              [
                "test_with_invalid_files",
                "false"
              ],
              [
                "test_depth_propagation",
                "false"
              ],
              [
                "test_with_different_input_output_dir",
                "false"
              ],
              [
                "test3_with_invalid_files",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_with_images_good",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test_with_valid_files",
                []
              ],
              [
                "test3_with_contribution",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test_with_images_bad",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test_with_invalid_files",
                []
              ],
              [
                "test_depth_propagation",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test_with_different_input_output_dir",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test3_with_invalid_files",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test_empty_dir",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_images_good",
                "false"
              ],
              [
                "test_with_valid_files",
                "false"
              ],
              [
                "test3_with_contribution",
                "false"
              ],
              [
                "test_with_images_bad",
                "false"
              ],
              [
                "test_with_invalid_files",
                "false"
              ],
              [
                "test_depth_propagation",
                "true"
              ],
              [
                "test_with_different_input_output_dir",
                "false"
              ],
              [
                "test3_with_invalid_files",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_images_good",
                "false"
              ],
              [
                "test_with_valid_files",
                "false"
              ],
              [
                "test3_with_contribution",
                "false"
              ],
              [
                "test_with_images_bad",
                "false"
              ],
              [
                "test_with_invalid_files",
                "false"
              ],
              [
                "test_depth_propagation",
                "true"
              ],
              [
                "test_with_different_input_output_dir",
                "false"
              ],
              [
                "test3_with_invalid_files",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_images_good",
                  "0"
                ],
                [
                  "test_with_valid_files",
                  "0"
                ],
                [
                  "test3_with_contribution",
                  "0"
                ],
                [
                  "test_with_images_bad",
                  "0"
                ],
                [
                  "test_with_invalid_files",
                  "0"
                ],
                [
                  "test_depth_propagation",
                  "0"
                ],
                [
                  "test_with_different_input_output_dir",
                  "0"
                ],
                [
                  "test3_with_invalid_files",
                  "0"
                ],
                [
                  "test_empty_dir",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_images_good",
                  "0"
                ],
                [
                  "test_with_valid_files",
                  "0"
                ],
                [
                  "test3_with_contribution",
                  "0"
                ],
                [
                  "test_with_images_bad",
                  "0"
                ],
                [
                  "test_with_invalid_files",
                  "0"
                ],
                [
                  "test_depth_propagation",
                  "0"
                ],
                [
                  "test_with_different_input_output_dir",
                  "0"
                ],
                [
                  "test3_with_invalid_files",
                  "0"
                ],
                [
                  "test_empty_dir",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_with_images_good",
                "false"
              ],
              [
                "test_with_valid_files",
                "false"
              ],
              [
                "test3_with_contribution",
                "false"
              ],
              [
                "test_with_images_bad",
                "false"
              ],
              [
                "test_with_invalid_files",
                "false"
              ],
              [
                "test_depth_propagation",
                "true"
              ],
              [
                "test_with_different_input_output_dir",
                "false"
              ],
              [
                "test3_with_invalid_files",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_images_good",
                "false"
              ],
              [
                "test_with_valid_files",
                "false"
              ],
              [
                "test3_with_contribution",
                "false"
              ],
              [
                "test_with_images_bad",
                "false"
              ],
              [
                "test_with_invalid_files",
                "false"
              ],
              [
                "test_depth_propagation",
                "false"
              ],
              [
                "test_with_different_input_output_dir",
                "false"
              ],
              [
                "test3_with_invalid_files",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_images_good",
                "1"
              ],
              [
                "test_with_valid_files",
                "4"
              ],
              [
                "test3_with_contribution",
                "1"
              ],
              [
                "test_with_images_bad",
                "3"
              ],
              [
                "test_with_invalid_files",
                "3"
              ],
              [
                "test_depth_propagation",
                "2"
              ],
              [
                "test_with_different_input_output_dir",
                "2"
              ],
              [
                "test3_with_invalid_files",
                "1"
              ],
              [
                "test_empty_dir",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_images_good",
                [
                  "fail",
                  "con",
                  "upfile"
                ]
              ],
              [
                "test_with_valid_files",
                [
                  "error_message",
                  "outfile",
                  "directory",
                  "errors"
                ]
              ],
              [
                "test3_with_contribution",
                [
                  "error_message",
                  "msg",
                  "con",
                  "outfile",
                  "pattern",
                  "files",
                  "possible_files",
                  "dir_path",
                  "errors",
                  "all_errors"
                ]
              ],
              [
                "test_with_images_bad",
                [
                  "bad_cols",
                  "fail",
                  "con",
                  "upfile",
                  "bad_rows",
                  "dtype",
                  "missing_groups",
                  "failing_items",
                  "missing_cols"
                ]
              ],
              [
                "test_with_invalid_files",
                [
                  "error_message",
                  "outfile",
                  "pattern",
                  "files",
                  "possible_files",
                  "directory",
                  "errors"
                ]
              ],
              [
                "test_depth_propagation",
                [
                  "error_message",
                  "con",
                  "outfile",
                  "dir_path",
                  "errors",
                  "all_errors"
                ]
              ],
              [
                "test_with_different_input_output_dir",
                [
                  "error_message",
                  "msg",
                  "input_dir_path",
                  "outfile",
                  "errors",
                  "all_errors"
                ]
              ],
              [
                "test3_with_invalid_files",
                [
                  "error_message",
                  "msg",
                  "outfile",
                  "dir_path",
                  "errors",
                  "all_errors"
                ]
              ],
              [
                "test_empty_dir",
                [
                  "error_message",
                  "outfile",
                  "files",
                  "directory",
                  "errors"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_with_images_good",
                []
              ],
              [
                "test_with_valid_files",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test3_with_contribution",
                []
              ],
              [
                "test_with_images_bad",
                []
              ],
              [
                "test_with_invalid_files",
                [
                  "self.dir_path"
                ]
              ],
              [
                "test_depth_propagation",
                []
              ],
              [
                "test_with_different_input_output_dir",
                []
              ],
              [
                "test3_with_invalid_files",
                []
              ],
              [
                "test_empty_dir",
                [
                  "self.dir_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4383818587174686,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_different_input_output_dir",
                  "test_with_images_good",
                  0.38511704715513717
                ],
                [
                  "test_with_valid_files",
                  "test_with_images_good",
                  0.22197102744781597
                ],
                [
                  "test_with_invalid_files",
                  "test3_with_invalid_files",
                  0.5076207532276439
                ],
                [
                  "test_empty_dir",
                  "test_depth_propagation",
                  0.3107723875462024
                ],
                [
                  "test_empty_dir",
                  "test3_with_invalid_files",
                  0.4126984126984127
                ],
                [
                  "test3_with_contribution",
                  "test_with_images_bad",
                  0.3943194198591401
                ],
                [
                  "test3_with_invalid_files",
                  "test_depth_propagation",
                  0.4834237139607592
                ],
                [
                  "test_depth_propagation",
                  "test_with_images_bad",
                  0.35278771710576573
                ],
                [
                  "test_with_invalid_files",
                  "test_with_valid_files",
                  0.6067798762169179
                ],
                [
                  "test_with_images_good",
                  "test_with_images_bad",
                  0.7779730694816727
                ],
                [
                  "test_with_invalid_files",
                  "test_with_different_input_output_dir",
                  0.44316003710154384
                ],
                [
                  "test_with_valid_files",
                  "test3_with_contribution",
                  0.27999502235495904
                ],
                [
                  "test_with_valid_files",
                  "test_with_images_bad",
                  0.24852506087385423
                ],
                [
                  "test_depth_propagation",
                  "test_with_images_good",
                  0.42090163603691233
                ],
                [
                  "test_empty_dir",
                  "test3_with_contribution",
                  0.44271100207571645
                ],
                [
                  "test3_with_invalid_files",
                  "test3_with_contribution",
                  0.7673657369312419
                ],
                [
                  "test_with_valid_files",
                  "test_depth_propagation",
                  0.2129288586824849
                ],
                [
                  "test_empty_dir",
                  "test_with_images_bad",
                  0.32434184837821856
                ],
                [
                  "test3_with_invalid_files",
                  "test_with_images_bad",
                  0.39918996723473055
                ],
                [
                  "test3_with_contribution",
                  "test_depth_propagation",
                  0.4654869681155427
                ],
                [
                  "test_with_valid_files",
                  "test_with_different_input_output_dir",
                  0.3222120388915419
                ],
                [
                  "test_with_invalid_files",
                  "test_with_images_bad",
                  0.3111746148825254
                ],
                [
                  "test_with_invalid_files",
                  "test_with_images_good",
                  0.2993056723522841
                ],
                [
                  "test3_with_contribution",
                  "test_with_different_input_output_dir",
                  0.6652056689194431
                ],
                [
                  "test_empty_dir",
                  "test_with_images_good",
                  0.26997462357801943
                ],
                [
                  "test_with_valid_files",
                  "test3_with_invalid_files",
                  0.34634469611367963
                ],
                [
                  "test_depth_propagation",
                  "test_with_different_input_output_dir",
                  0.4063718931161384
                ],
                [
                  "test_with_different_input_output_dir",
                  "test_with_images_bad",
                  0.3416651374071857
                ],
                [
                  "test3_with_invalid_files",
                  "test_with_different_input_output_dir",
                  0.801553493506902
                ],
                [
                  "test_empty_dir",
                  "test_with_different_input_output_dir",
                  0.42115522540193157
                ],
                [
                  "test_with_invalid_files",
                  "test3_with_contribution",
                  0.6921662203943878
                ],
                [
                  "test_empty_dir",
                  "test_with_invalid_files",
                  0.6192973189377255
                ],
                [
                  "test3_with_invalid_files",
                  "test_with_images_good",
                  0.485954322440435
                ],
                [
                  "test_empty_dir",
                  "test_with_valid_files",
                  0.6023386019368342
                ],
                [
                  "test3_with_contribution",
                  "test_with_images_good",
                  0.4573660169594892
                ],
                [
                  "test_with_invalid_files",
                  "test_depth_propagation",
                  0.28159180650567334
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_images_good",
                "false"
              ],
              [
                "test_with_valid_files",
                "false"
              ],
              [
                "test3_with_contribution",
                "false"
              ],
              [
                "test_with_images_bad",
                "false"
              ],
              [
                "test_with_invalid_files",
                "false"
              ],
              [
                "test_depth_propagation",
                "false"
              ],
              [
                "test_with_different_input_output_dir",
                "false"
              ],
              [
                "test3_with_invalid_files",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      },
      {
        "name": "TestDownloadMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_all_files_are_created",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_separate_locs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_txt",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_all_files_are_created",
                  "[]"
                ],
                [
                  "test_separate_locs",
                  "[]"
                ],
                [
                  "test_with_txt",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_all_files_are_created",
                  "true"
                ],
                [
                  "test_separate_locs",
                  "true"
                ],
                [
                  "test_with_txt",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_all_files_are_created",
                  "false"
                ],
                [
                  "test_separate_locs",
                  "false"
                ],
                [
                  "test_with_txt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_all_files_are_created",
                  "false"
                ],
                [
                  "test_separate_locs",
                  "false"
                ],
                [
                  "test_with_txt",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_all_files_are_created",
                  "false"
                ],
                [
                  "test_separate_locs",
                  "false"
                ],
                [
                  "test_with_txt",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_files_are_created",
                "false"
              ],
              [
                "test_separate_locs",
                "false"
              ],
              [
                "test_with_txt",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_all_files_are_created",
                "false"
              ],
              [
                "test_separate_locs",
                "false"
              ],
              [
                "test_with_txt",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_all_files_are_created",
                []
              ],
              [
                "test_separate_locs",
                [
                  "self.download_dir"
                ]
              ],
              [
                "test_with_txt",
                [
                  "self.download_dir"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_files_are_created",
                "false"
              ],
              [
                "test_separate_locs",
                "false"
              ],
              [
                "test_with_txt",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_all_files_are_created",
                "false"
              ],
              [
                "test_separate_locs",
                "true"
              ],
              [
                "test_with_txt",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_all_files_are_created",
                  "0"
                ],
                [
                  "test_separate_locs",
                  "0"
                ],
                [
                  "test_with_txt",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_all_files_are_created",
                  "0"
                ],
                [
                  "test_separate_locs",
                  "0"
                ],
                [
                  "test_with_txt",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_all_files_are_created",
                "false"
              ],
              [
                "test_separate_locs",
                "false"
              ],
              [
                "test_with_txt",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_files_are_created",
                "false"
              ],
              [
                "test_separate_locs",
                "false"
              ],
              [
                "test_with_txt",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_files_are_created",
                "1"
              ],
              [
                "test_separate_locs",
                "4"
              ],
              [
                "test_with_txt",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_all_files_are_created",
                [
                  "output_files",
                  "files"
                ]
              ],
              [
                "test_separate_locs",
                [
                  "res",
                  "fnames_0",
                  "dirs",
                  "fname1",
                  "fname2",
                  "dir_path",
                  "fnames_1"
                ]
              ],
              [
                "test_with_txt",
                [
                  "res",
                  "output_files",
                  "ran"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_all_files_are_created",
                [
                  "self.download_dir"
                ]
              ],
              [
                "test_separate_locs",
                []
              ],
              [
                "test_with_txt",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3420347757834324,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_all_files_are_created",
                  "test_separate_locs",
                  0.254431257386479
                ],
                [
                  "test_with_txt",
                  "test_all_files_are_created",
                  0.4218879211229185
                ],
                [
                  "test_with_txt",
                  "test_separate_locs",
                  0.3497851488408997
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_all_files_are_created",
                "false"
              ],
              [
                "test_separate_locs",
                "true"
              ],
              [
                "test_with_txt",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestCombineMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_remove_rows",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_measurement_sequence",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_input_output_dir",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_custom_name",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_remove_rows",
                  "[]"
                ],
                [
                  "test_measurement_sequence",
                  "[]"
                ],
                [
                  "test_with_input_output_dir",
                  "[]"
                ],
                [
                  "test_with_custom_name",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_remove_rows",
                  "false"
                ],
                [
                  "test_measurement_sequence",
                  "false"
                ],
                [
                  "test_with_input_output_dir",
                  "false"
                ],
                [
                  "test_with_custom_name",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_remove_rows",
                  "true"
                ],
                [
                  "test_measurement_sequence",
                  "false"
                ],
                [
                  "test_with_input_output_dir",
                  "false"
                ],
                [
                  "test_with_custom_name",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_remove_rows",
                  "false"
                ],
                [
                  "test_measurement_sequence",
                  "false"
                ],
                [
                  "test_with_input_output_dir",
                  "false"
                ],
                [
                  "test_with_custom_name",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_remove_rows",
                  "false"
                ],
                [
                  "test_measurement_sequence",
                  "false"
                ],
                [
                  "test_with_input_output_dir",
                  "false"
                ],
                [
                  "test_with_custom_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                "false"
              ],
              [
                "test_measurement_sequence",
                "false"
              ],
              [
                "test_with_input_output_dir",
                "false"
              ],
              [
                "test_with_custom_name",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                "false"
              ],
              [
                "test_measurement_sequence",
                "false"
              ],
              [
                "test_with_input_output_dir",
                "false"
              ],
              [
                "test_with_custom_name",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                []
              ],
              [
                "test_measurement_sequence",
                []
              ],
              [
                "test_with_input_output_dir",
                []
              ],
              [
                "test_with_custom_name",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_remove_rows",
                "true"
              ],
              [
                "test_measurement_sequence",
                "false"
              ],
              [
                "test_with_input_output_dir",
                "false"
              ],
              [
                "test_with_custom_name",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_remove_rows",
                "true"
              ],
              [
                "test_measurement_sequence",
                "false"
              ],
              [
                "test_with_input_output_dir",
                "false"
              ],
              [
                "test_with_custom_name",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_remove_rows",
                  "0"
                ],
                [
                  "test_measurement_sequence",
                  "0"
                ],
                [
                  "test_with_input_output_dir",
                  "0"
                ],
                [
                  "test_with_custom_name",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_remove_rows",
                  "0"
                ],
                [
                  "test_measurement_sequence",
                  "0"
                ],
                [
                  "test_with_input_output_dir",
                  "0"
                ],
                [
                  "test_with_custom_name",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                "false"
              ],
              [
                "test_measurement_sequence",
                "false"
              ],
              [
                "test_with_input_output_dir",
                "false"
              ],
              [
                "test_with_custom_name",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                "false"
              ],
              [
                "test_measurement_sequence",
                "false"
              ],
              [
                "test_with_input_output_dir",
                "false"
              ],
              [
                "test_with_custom_name",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                "1"
              ],
              [
                "test_measurement_sequence",
                "2"
              ],
              [
                "test_with_input_output_dir",
                "2"
              ],
              [
                "test_with_custom_name",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                [
                  "res",
                  "flist",
                  "n"
                ]
              ],
              [
                "test_measurement_sequence",
                [
                  "res",
                  "df"
                ]
              ],
              [
                "test_with_input_output_dir",
                [
                  "res",
                  "flist"
                ]
              ],
              [
                "test_with_custom_name",
                [
                  "res",
                  "flist",
                  "outfile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_measurement_sequence",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_input_output_dir",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_custom_name",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4520683455627416,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_custom_name",
                  "test_measurement_sequence",
                  0.3962461644163422
                ],
                [
                  "test_with_input_output_dir",
                  "test_measurement_sequence",
                  0.5350101424280784
                ],
                [
                  "test_with_custom_name",
                  "test_with_input_output_dir",
                  0.5206874392697425
                ],
                [
                  "test_with_remove_rows",
                  "test_with_input_output_dir",
                  0.35564337957950964
                ],
                [
                  "test_with_custom_name",
                  "test_with_remove_rows",
                  0.6058228095703765
                ],
                [
                  "test_with_remove_rows",
                  "test_measurement_sequence",
                  0.2990001381124004
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_remove_rows",
                "false"
              ],
              [
                "test_measurement_sequence",
                "false"
              ],
              [
                "test_with_input_output_dir",
                "false"
              ],
              [
                "test_with_custom_name",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestCoreDepthplot",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "[]"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "[]"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "[]"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "[]"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "[]"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "[]"
                ],
                [
                  "test_core_depthplot_success",
                  "[]"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "[]"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "[]"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "false"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "false"
                ],
                [
                  "test_core_depthplot_success",
                  "false"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "false"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "false"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "false"
                ],
                [
                  "test_core_depthplot_success",
                  "false"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "false"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "false"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "false"
                ],
                [
                  "test_core_depthplot_success",
                  "false"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "false"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "false"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "false"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "false"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "false"
                ],
                [
                  "test_core_depthplot_success",
                  "false"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "false"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "false"
              ],
              [
                "test_core_depthplot_data_model3",
                "false"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_core_depthplot_bad_params",
                "false"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "false"
              ],
              [
                "test_core_depthplot_bad_method",
                "false"
              ],
              [
                "test_core_depthplot_success",
                "false"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "false"
              ],
              [
                "test_core_depthplot_with_no_files",
                "false"
              ],
              [
                "test_core_depthplot_success_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "false"
              ],
              [
                "test_core_depthplot_data_model3",
                "false"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_core_depthplot_bad_params",
                "false"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "false"
              ],
              [
                "test_core_depthplot_bad_method",
                "false"
              ],
              [
                "test_core_depthplot_success",
                "false"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "false"
              ],
              [
                "test_core_depthplot_with_no_files",
                "false"
              ],
              [
                "test_core_depthplot_success_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                []
              ],
              [
                "test_core_depthplot_data_model3",
                []
              ],
              [
                "test_core_depthplot_with_sum_file",
                []
              ],
              [
                "test_core_depthplot_bad_params",
                []
              ],
              [
                "test_core_depthplot_data_model3_options",
                []
              ],
              [
                "test_core_depthplot_bad_method",
                []
              ],
              [
                "test_core_depthplot_success",
                []
              ],
              [
                "test_core_depthplot_without_full_time_options",
                []
              ],
              [
                "test_core_depthplot_with_no_files",
                []
              ],
              [
                "test_core_depthplot_success_with_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "false"
              ],
              [
                "test_core_depthplot_data_model3",
                "false"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_core_depthplot_bad_params",
                "false"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "false"
              ],
              [
                "test_core_depthplot_bad_method",
                "false"
              ],
              [
                "test_core_depthplot_success",
                "false"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "false"
              ],
              [
                "test_core_depthplot_with_no_files",
                "false"
              ],
              [
                "test_core_depthplot_success_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "false"
              ],
              [
                "test_core_depthplot_data_model3",
                "false"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_core_depthplot_bad_params",
                "false"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "false"
              ],
              [
                "test_core_depthplot_bad_method",
                "false"
              ],
              [
                "test_core_depthplot_success",
                "false"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "false"
              ],
              [
                "test_core_depthplot_with_no_files",
                "false"
              ],
              [
                "test_core_depthplot_success_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "0"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "0"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "0"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "0"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "0"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "0"
                ],
                [
                  "test_core_depthplot_success",
                  "0"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "0"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "0"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_core_depthplot_success_with_other_options",
                  "0"
                ],
                [
                  "test_core_depthplot_data_model3",
                  "0"
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "0"
                ],
                [
                  "test_core_depthplot_bad_params",
                  "0"
                ],
                [
                  "test_core_depthplot_data_model3_options",
                  "0"
                ],
                [
                  "test_core_depthplot_bad_method",
                  "0"
                ],
                [
                  "test_core_depthplot_success",
                  "0"
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "0"
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "0"
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "false"
              ],
              [
                "test_core_depthplot_data_model3",
                "false"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_core_depthplot_bad_params",
                "false"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "false"
              ],
              [
                "test_core_depthplot_bad_method",
                "false"
              ],
              [
                "test_core_depthplot_success",
                "false"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "false"
              ],
              [
                "test_core_depthplot_with_no_files",
                "false"
              ],
              [
                "test_core_depthplot_success_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "false"
              ],
              [
                "test_core_depthplot_data_model3",
                "false"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_core_depthplot_bad_params",
                "false"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "false"
              ],
              [
                "test_core_depthplot_bad_method",
                "false"
              ],
              [
                "test_core_depthplot_success",
                "false"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "false"
              ],
              [
                "test_core_depthplot_with_no_files",
                "false"
              ],
              [
                "test_core_depthplot_success_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "2"
              ],
              [
                "test_core_depthplot_data_model3",
                "2"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "2"
              ],
              [
                "test_core_depthplot_bad_params",
                "2"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "2"
              ],
              [
                "test_core_depthplot_bad_method",
                "2"
              ],
              [
                "test_core_depthplot_success",
                "2"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "2"
              ],
              [
                "test_core_depthplot_with_no_files",
                "2"
              ],
              [
                "test_core_depthplot_success_with_options",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                [
                  "path",
                  "program_ran",
                  "plot_name"
                ]
              ],
              [
                "test_core_depthplot_data_model3",
                [
                  "path",
                  "program_ran",
                  "plot_name"
                ]
              ],
              [
                "test_core_depthplot_with_sum_file",
                [
                  "path",
                  "program_ran",
                  "outfile",
                  "plot_name",
                  "sum_file"
                ]
              ],
              [
                "test_core_depthplot_bad_params",
                [
                  "error_message",
                  "path",
                  "program_ran"
                ]
              ],
              [
                "test_core_depthplot_data_model3_options",
                [
                  "path",
                  "program_ran",
                  "plot_name"
                ]
              ],
              [
                "test_core_depthplot_bad_method",
                [
                  "error_message",
                  "path",
                  "program_ran"
                ]
              ],
              [
                "test_core_depthplot_success",
                [
                  "path",
                  "program_ran",
                  "plot_name"
                ]
              ],
              [
                "test_core_depthplot_without_full_time_options",
                [
                  "error_message",
                  "path",
                  "program_ran"
                ]
              ],
              [
                "test_core_depthplot_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ],
              [
                "test_core_depthplot_success_with_options",
                [
                  "path",
                  "program_ran",
                  "plot_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                []
              ],
              [
                "test_core_depthplot_data_model3",
                []
              ],
              [
                "test_core_depthplot_with_sum_file",
                []
              ],
              [
                "test_core_depthplot_bad_params",
                []
              ],
              [
                "test_core_depthplot_data_model3_options",
                []
              ],
              [
                "test_core_depthplot_bad_method",
                []
              ],
              [
                "test_core_depthplot_success",
                []
              ],
              [
                "test_core_depthplot_without_full_time_options",
                []
              ],
              [
                "test_core_depthplot_with_no_files",
                []
              ],
              [
                "test_core_depthplot_success_with_options",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.560866976934898,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_core_depthplot_bad_method",
                  "test_core_depthplot_data_model3_options",
                  0.4940492712684099
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "test_core_depthplot_data_model3",
                  0.6487062262127641
                ],
                [
                  "test_core_depthplot_success_with_other_options",
                  "test_core_depthplot_data_model3",
                  0.9025841844432282
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_success",
                  0.340187243012264
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_data_model3_options",
                  0.4730161648796402
                ],
                [
                  "test_core_depthplot_success",
                  "test_core_depthplot_success_with_other_options",
                  0.7698035927158027
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "test_core_depthplot_without_full_time_options",
                  0.4875809527768841
                ],
                [
                  "test_core_depthplot_bad_method",
                  "test_core_depthplot_data_model3",
                  0.48484848484848486
                ],
                [
                  "test_core_depthplot_success_with_other_options",
                  "test_core_depthplot_data_model3_options",
                  0.7522575841214345
                ],
                [
                  "test_core_depthplot_success",
                  "test_core_depthplot_with_sum_file",
                  0.7464625408829836
                ],
                [
                  "test_core_depthplot_data_model3",
                  "test_core_depthplot_data_model3_options",
                  0.7763631405646442
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_success_with_options",
                  0.269581933008596
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "test_core_depthplot_success_with_other_options",
                  0.9805521700243873
                ],
                [
                  "test_core_depthplot_success",
                  "test_core_depthplot_without_full_time_options",
                  0.4469797798845383
                ],
                [
                  "test_core_depthplot_success",
                  "test_core_depthplot_success_with_options",
                  0.7862448709593128
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "test_core_depthplot_data_model3_options",
                  0.49494677620882666
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_success",
                  0.22029078047151093
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "test_core_depthplot_data_model3_options",
                  0.7341671960484555
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_success_with_options",
                  0.4210060495408587
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_success_with_other_options",
                  0.40666285422027915
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_data_model3",
                  0.4061811972299616
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_data_model3",
                  0.27588029392302177
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_bad_method",
                  0.6745509168283291
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "test_core_depthplot_data_model3_options",
                  0.7655354469571903
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "test_core_depthplot_success_with_options",
                  0.6830008681915515
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_bad_params",
                  0.5062592711372338
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_without_full_time_options",
                  0.5359422007578724
                ],
                [
                  "test_core_depthplot_bad_method",
                  "test_core_depthplot_with_sum_file",
                  0.4385619557494743
                ],
                [
                  "test_core_depthplot_bad_method",
                  "test_core_depthplot_success_with_other_options",
                  0.4512920922216141
                ],
                [
                  "test_core_depthplot_success",
                  "test_core_depthplot_data_model3",
                  0.7717572622980946
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_data_model3_options",
                  0.28557772187996566
                ],
                [
                  "test_core_depthplot_bad_params",
                  "test_core_depthplot_with_sum_file",
                  0.4198911048651824
                ],
                [
                  "test_core_depthplot_bad_method",
                  "test_core_depthplot_without_full_time_options",
                  0.5753226325532886
                ],
                [
                  "test_core_depthplot_success_with_options",
                  "test_core_depthplot_data_model3",
                  0.8972196813298605
                ],
                [
                  "test_core_depthplot_with_sum_file",
                  "test_core_depthplot_success_with_other_options",
                  0.6643402293184253
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_success_with_other_options",
                  0.2685350089254074
                ],
                [
                  "test_core_depthplot_bad_method",
                  "test_core_depthplot_success_with_options",
                  0.4397264774834465
                ],
                [
                  "test_core_depthplot_bad_method",
                  "test_core_depthplot_success",
                  0.36677572861691626
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_without_full_time_options",
                  0.37749663711633447
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "test_core_depthplot_success_with_other_options",
                  0.7446549322790884
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "test_core_depthplot_data_model3",
                  0.653068934249679
                ],
                [
                  "test_core_depthplot_without_full_time_options",
                  "test_core_depthplot_success_with_options",
                  0.7657912053639463
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_bad_method",
                  0.4138204408845326
                ],
                [
                  "test_core_depthplot_success",
                  "test_core_depthplot_data_model3_options",
                  0.9165427851514754
                ],
                [
                  "test_core_depthplot_with_no_files",
                  "test_core_depthplot_with_sum_file",
                  0.30499714066520933
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_success_with_other_options",
                "false"
              ],
              [
                "test_core_depthplot_data_model3",
                "false"
              ],
              [
                "test_core_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_core_depthplot_bad_params",
                "false"
              ],
              [
                "test_core_depthplot_data_model3_options",
                "false"
              ],
              [
                "test_core_depthplot_bad_method",
                "false"
              ],
              [
                "test_core_depthplot_success",
                "false"
              ],
              [
                "test_core_depthplot_without_full_time_options",
                "false"
              ],
              [
                "test_core_depthplot_with_no_files",
                "false"
              ],
              [
                "test_core_depthplot_success_with_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      },
      {
        "name": "TestAniDepthplot2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_aniso_depthplot_with_files",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_aniso_depthplot_with_files",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "[]"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                []
              ],
              [
                "test_aniso_depthplot_with_no_files",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_age_option",
                []
              ],
              [
                "test_aniso_depthplot_with_options",
                []
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                [
                  "self.aniso_WD"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_aniso_depthplot_with_files",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_aniso_depthplot_with_files",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "2"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "2"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "2"
              ],
              [
                "test_aniso_depthplot_with_options",
                "2"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                [
                  "main_plot",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_no_files",
                [
                  "error_message",
                  "expected_file",
                  "program_ran"
                ]
              ],
              [
                "test_aniso_depthplot_with_age_option",
                [
                  "main_plot",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_options",
                [
                  "main_plot",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                [
                  "main_plot",
                  "plot_name",
                  "sum_file",
                  "dir_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_no_files",
                []
              ],
              [
                "test_aniso_depthplot_with_age_option",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_options",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5359083151781856,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_aniso_depthplot_with_sum_file",
                  "test_aniso_depthplot_with_age_option",
                  0.6298438669252061
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_age_option",
                  0.761386987626881
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_sum_file",
                  0.7950515853775598
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_files",
                  0.28211225599320744
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_age_option",
                  0.2881854393574164
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_options",
                  0.26586006150673236
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "test_aniso_depthplot_with_options",
                  0.7841515268245522
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_options",
                  0.6848431760360778
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "test_aniso_depthplot_with_options",
                  0.5810506234240947
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_sum_file",
                  0.2865976287101284
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestAniDepthplot",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "[PyAssertStatement]"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "false"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "false"
              ],
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "false"
              ],
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                []
              ],
              [
                "test_aniso_depthplot_with_files",
                []
              ],
              [
                "test_aniso_depthplot_with_age_option",
                []
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                []
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_options",
                []
              ],
              [
                "test_aniso_depthplot_with_no_files",
                [
                  "self.aniso_WD"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "false"
              ],
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "false"
              ],
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_aniso_depthplot_with_contribution",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "0"
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "false"
              ],
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "false"
              ],
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "2"
              ],
              [
                "test_aniso_depthplot_with_files",
                "2"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "2"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "2"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "2"
              ],
              [
                "test_aniso_depthplot_with_options",
                "2"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                [
                  "main_plot",
                  "con",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_files",
                [
                  "main_plot",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_age_option",
                [
                  "main_plot",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                [
                  "main_plot",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                [
                  "main_plot",
                  "plot_name",
                  "sum_file",
                  "dir_path"
                ]
              ],
              [
                "test_aniso_depthplot_with_options",
                [
                  "main_plot",
                  "plot_name"
                ]
              ],
              [
                "test_aniso_depthplot_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_files",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_age_option",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                []
              ],
              [
                "test_aniso_depthplot_with_options",
                [
                  "self.aniso_WD"
                ]
              ],
              [
                "test_aniso_depthplot_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5873322100793075,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_aniso_depthplot_with_age_option",
                  "test_aniso_depthplot_with_contribution",
                  0.7216878364870322
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_options",
                  0.6603381797442179
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "test_aniso_depthplot_with_age_option",
                  0.5751081237516715
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_meas_file",
                  0.8168717229557564
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_meas_file",
                  0.2970442628930023
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "test_aniso_depthplot_with_contribution",
                  0.7426106572325057
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_age_option",
                  0.7457440977032666
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "test_aniso_depthplot_with_options",
                  0.7845986714489123
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_options",
                  0.26413527189768715
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_contribution",
                  0.2777777777777778
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "test_aniso_depthplot_with_options",
                  0.5426633437013039
                ],
                [
                  "test_aniso_depthplot_with_sum_file",
                  "test_aniso_depthplot_with_contribution",
                  0.5447512055691041
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_sum_file",
                  0.6848300870011594
                ],
                [
                  "test_aniso_depthplot_with_age_option",
                  "test_aniso_depthplot_with_options",
                  0.7879092800517908
                ],
                [
                  "test_aniso_depthplot_with_files",
                  "test_aniso_depthplot_with_contribution",
                  0.6458333333333335
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_files",
                  0.3055555555555556
                ],
                [
                  "test_aniso_depthplot_with_options",
                  "test_aniso_depthplot_with_contribution",
                  0.9024621789837646
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "test_aniso_depthplot_with_age_option",
                  0.8860760232362955
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_sum_file",
                  0.2490291225458761
                ],
                [
                  "test_aniso_depthplot_with_no_files",
                  "test_aniso_depthplot_with_age_option",
                  0.28867513459481287
                ],
                [
                  "test_aniso_depthplot_with_meas_file",
                  "test_aniso_depthplot_with_sum_file",
                  0.6102745452006301
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_aniso_depthplot_with_contribution",
                "false"
              ],
              [
                "test_aniso_depthplot_with_files",
                "false"
              ],
              [
                "test_aniso_depthplot_with_age_option",
                "false"
              ],
              [
                "test_aniso_depthplot_with_meas_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_sum_file",
                "false"
              ],
              [
                "test_aniso_depthplot_with_options",
                "false"
              ],
              [
                "test_aniso_depthplot_with_no_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "TestPmagResultsExtract",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_extract",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_extract_latex",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_extract",
                  "[]"
                ],
                [
                  "test_extract_latex",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_extract",
                  "true"
                ],
                [
                  "test_extract_latex",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_extract",
                  "true"
                ],
                [
                  "test_extract_latex",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_extract",
                  "false"
                ],
                [
                  "test_extract_latex",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_extract",
                  "false"
                ],
                [
                  "test_extract_latex",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_extract_latex",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_extract_latex",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                []
              ],
              [
                "test_extract_latex",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_extract_latex",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_extract_latex",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_extract",
                  "0"
                ],
                [
                  "test_extract_latex",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_extract",
                  "0"
                ],
                [
                  "test_extract_latex",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_extract_latex",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_extract_latex",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "3"
              ],
              [
                "test_extract_latex",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                [
                  "res",
                  "direction_file",
                  "site_file",
                  "intensity_file",
                  "outfiles",
                  "crit_file",
                  "files",
                  "specimen_file"
                ]
              ],
              [
                "test_extract_latex",
                [
                  "res",
                  "direction_file",
                  "site_file",
                  "intensity_file",
                  "outfiles",
                  "crit_file",
                  "files",
                  "specimen_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                [
                  "self.result_WD"
                ]
              ],
              [
                "test_extract_latex",
                [
                  "self.result_WD"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9761237519533368,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_extract",
                  "test_extract_latex",
                  0.9761237519533368
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_extract",
                "false"
              ],
              [
                "test_extract_latex",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestAarmMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_different_input_output_dir",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_aarm_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fail",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_different_input_output_dir",
                  "[]"
                ],
                [
                  "test_aarm_success",
                  "[]"
                ],
                [
                  "test_fail",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_different_input_output_dir",
                  "false"
                ],
                [
                  "test_aarm_success",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_different_input_output_dir",
                  "false"
                ],
                [
                  "test_aarm_success",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_different_input_output_dir",
                  "false"
                ],
                [
                  "test_aarm_success",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_different_input_output_dir",
                  "false"
                ],
                [
                  "test_aarm_success",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "false"
              ],
              [
                "test_aarm_success",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "false"
              ],
              [
                "test_aarm_success",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                []
              ],
              [
                "test_aarm_success",
                []
              ],
              [
                "test_fail",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "false"
              ],
              [
                "test_aarm_success",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "false"
              ],
              [
                "test_aarm_success",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_different_input_output_dir",
                  "0"
                ],
                [
                  "test_aarm_success",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_different_input_output_dir",
                  "0"
                ],
                [
                  "test_aarm_success",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "false"
              ],
              [
                "test_aarm_success",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "false"
              ],
              [
                "test_aarm_success",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "3"
              ],
              [
                "test_aarm_success",
                "3"
              ],
              [
                "test_fail",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                [
                  "res",
                  "outfile"
                ]
              ],
              [
                "test_aarm_success",
                [
                  "res",
                  "outfile"
                ]
              ],
              [
                "test_fail",
                [
                  "msg",
                  "res"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                [
                  "self.aarm_WD"
                ]
              ],
              [
                "test_aarm_success",
                [
                  "self.aarm_WD"
                ]
              ],
              [
                "test_fail",
                [
                  "self.aarm_WD"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7847594471455049,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_aarm_success",
                  "test_fail",
                  0.7416899285442334
                ],
                [
                  "test_different_input_output_dir",
                  "test_fail",
                  0.7251445774379061
                ],
                [
                  "test_aarm_success",
                  "test_different_input_output_dir",
                  0.8874438354543756
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_different_input_output_dir",
                "false"
              ],
              [
                "test_aarm_success",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestAtrmMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_atrm_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_atrm_directories",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_atrm_success",
                  "[]"
                ],
                [
                  "test_atrm_directories",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_atrm_success",
                  "false"
                ],
                [
                  "test_atrm_directories",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_atrm_success",
                  "false"
                ],
                [
                  "test_atrm_directories",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_atrm_success",
                  "false"
                ],
                [
                  "test_atrm_directories",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_atrm_success",
                  "false"
                ],
                [
                  "test_atrm_directories",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "false"
              ],
              [
                "test_atrm_directories",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "false"
              ],
              [
                "test_atrm_directories",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                []
              ],
              [
                "test_atrm_directories",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "false"
              ],
              [
                "test_atrm_directories",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "false"
              ],
              [
                "test_atrm_directories",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_atrm_success",
                  "0"
                ],
                [
                  "test_atrm_directories",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_atrm_success",
                  "0"
                ],
                [
                  "test_atrm_directories",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "false"
              ],
              [
                "test_atrm_directories",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "false"
              ],
              [
                "test_atrm_directories",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "3"
              ],
              [
                "test_atrm_directories",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                [
                  "res",
                  "df",
                  "outfile"
                ]
              ],
              [
                "test_atrm_directories",
                [
                  "res",
                  "df",
                  "outfile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                [
                  "self.atrm_WD"
                ]
              ],
              [
                "test_atrm_directories",
                [
                  "self.atrm_WD"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9076923076923079,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_atrm_success",
                  "test_atrm_directories",
                  0.9076923076923079
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_atrm_success",
                "false"
              ],
              [
                "test_atrm_directories",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestHysteresisMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hysteresis_with_figs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hysteresis_bad_file",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_hysteresis_no_figs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_hysteresis_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hysteresis_with_figs",
                  "[]"
                ],
                [
                  "test_hysteresis_bad_file",
                  "[]"
                ],
                [
                  "test_hysteresis_no_figs",
                  "[]"
                ],
                [
                  "test_hysteresis_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hysteresis_with_figs",
                  "false"
                ],
                [
                  "test_hysteresis_bad_file",
                  "false"
                ],
                [
                  "test_hysteresis_no_figs",
                  "false"
                ],
                [
                  "test_hysteresis_success",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hysteresis_with_figs",
                  "false"
                ],
                [
                  "test_hysteresis_bad_file",
                  "false"
                ],
                [
                  "test_hysteresis_no_figs",
                  "false"
                ],
                [
                  "test_hysteresis_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hysteresis_with_figs",
                  "false"
                ],
                [
                  "test_hysteresis_bad_file",
                  "false"
                ],
                [
                  "test_hysteresis_no_figs",
                  "false"
                ],
                [
                  "test_hysteresis_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hysteresis_with_figs",
                  "false"
                ],
                [
                  "test_hysteresis_bad_file",
                  "false"
                ],
                [
                  "test_hysteresis_no_figs",
                  "false"
                ],
                [
                  "test_hysteresis_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "false"
              ],
              [
                "test_hysteresis_bad_file",
                "false"
              ],
              [
                "test_hysteresis_no_figs",
                "false"
              ],
              [
                "test_hysteresis_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "false"
              ],
              [
                "test_hysteresis_bad_file",
                "false"
              ],
              [
                "test_hysteresis_no_figs",
                "false"
              ],
              [
                "test_hysteresis_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                []
              ],
              [
                "test_hysteresis_bad_file",
                []
              ],
              [
                "test_hysteresis_no_figs",
                []
              ],
              [
                "test_hysteresis_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "false"
              ],
              [
                "test_hysteresis_bad_file",
                "false"
              ],
              [
                "test_hysteresis_no_figs",
                "false"
              ],
              [
                "test_hysteresis_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "true"
              ],
              [
                "test_hysteresis_bad_file",
                "false"
              ],
              [
                "test_hysteresis_no_figs",
                "false"
              ],
              [
                "test_hysteresis_success",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hysteresis_with_figs",
                  "0"
                ],
                [
                  "test_hysteresis_bad_file",
                  "0"
                ],
                [
                  "test_hysteresis_no_figs",
                  "0"
                ],
                [
                  "test_hysteresis_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hysteresis_with_figs",
                  "0"
                ],
                [
                  "test_hysteresis_bad_file",
                  "0"
                ],
                [
                  "test_hysteresis_no_figs",
                  "0"
                ],
                [
                  "test_hysteresis_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "false"
              ],
              [
                "test_hysteresis_bad_file",
                "false"
              ],
              [
                "test_hysteresis_no_figs",
                "false"
              ],
              [
                "test_hysteresis_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "false"
              ],
              [
                "test_hysteresis_bad_file",
                "false"
              ],
              [
                "test_hysteresis_no_figs",
                "false"
              ],
              [
                "test_hysteresis_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "3"
              ],
              [
                "test_hysteresis_bad_file",
                "1"
              ],
              [
                "test_hysteresis_no_figs",
                "3"
              ],
              [
                "test_hysteresis_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                [
                  "res",
                  "outfiles",
                  "fnames"
                ]
              ],
              [
                "test_hysteresis_bad_file",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_hysteresis_no_figs",
                [
                  "res",
                  "outfiles",
                  "fnames"
                ]
              ],
              [
                "test_hysteresis_success",
                [
                  "res",
                  "outfiles",
                  "fstring",
                  "files"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                [
                  "self.hyst_WD"
                ]
              ],
              [
                "test_hysteresis_bad_file",
                [
                  "self.hyst_WD"
                ]
              ],
              [
                "test_hysteresis_no_figs",
                [
                  "self.hyst_WD"
                ]
              ],
              [
                "test_hysteresis_success",
                [
                  "self.hyst_WD"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6433139971608025,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hysteresis_bad_file",
                  "test_hysteresis_success",
                  0.5350284209791207
                ],
                [
                  "test_hysteresis_no_figs",
                  "test_hysteresis_bad_file",
                  0.5660380844802229
                ],
                [
                  "test_hysteresis_with_figs",
                  "test_hysteresis_bad_file",
                  0.6038596398555418
                ],
                [
                  "test_hysteresis_with_figs",
                  "test_hysteresis_success",
                  0.6506000486323554
                ],
                [
                  "test_hysteresis_no_figs",
                  "test_hysteresis_success",
                  0.5963984045171224
                ],
                [
                  "test_hysteresis_no_figs",
                  "test_hysteresis_with_figs",
                  0.9079593845004517
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hysteresis_with_figs",
                "false"
              ],
              [
                "test_hysteresis_bad_file",
                "false"
              ],
              [
                "test_hysteresis_no_figs",
                "false"
              ],
              [
                "test_hysteresis_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestSitesExtract",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_McMurdo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_Megiddo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_McMurdo",
                  "[]"
                ],
                [
                  "test_Megiddo",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_McMurdo",
                  "true"
                ],
                [
                  "test_Megiddo",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_McMurdo",
                  "false"
                ],
                [
                  "test_Megiddo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_McMurdo",
                  "false"
                ],
                [
                  "test_Megiddo",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_McMurdo",
                  "false"
                ],
                [
                  "test_Megiddo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_McMurdo",
                [
                  "self.WD_1"
                ]
              ],
              [
                "test_Megiddo",
                [
                  "self.WD_0"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_McMurdo",
                  "0"
                ],
                [
                  "test_Megiddo",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_McMurdo",
                  "0"
                ],
                [
                  "test_Megiddo",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "2"
              ],
              [
                "test_Megiddo",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_Megiddo",
                [
                  "res",
                  "outfiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                [
                  "self.WD_0"
                ]
              ],
              [
                "test_Megiddo",
                [
                  "self.WD_1"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8128008128012192,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_McMurdo",
                  "test_Megiddo",
                  0.8128008128012192
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestSpecimensExtract",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_McMurdo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_Megiddo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_McMurdo",
                  "[]"
                ],
                [
                  "test_Megiddo",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_McMurdo",
                  "true"
                ],
                [
                  "test_Megiddo",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_McMurdo",
                  "false"
                ],
                [
                  "test_Megiddo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_McMurdo",
                  "false"
                ],
                [
                  "test_Megiddo",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_McMurdo",
                  "false"
                ],
                [
                  "test_Megiddo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_McMurdo",
                [
                  "self.WD_1"
                ]
              ],
              [
                "test_Megiddo",
                [
                  "self.WD_0"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_McMurdo",
                  "0"
                ],
                [
                  "test_Megiddo",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_McMurdo",
                  "0"
                ],
                [
                  "test_Megiddo",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "2"
              ],
              [
                "test_Megiddo",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_Megiddo",
                [
                  "res",
                  "outfiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                [
                  "self.WD_0"
                ]
              ],
              [
                "test_Megiddo",
                [
                  "self.WD_1"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8128008128012192,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_McMurdo",
                  "test_Megiddo",
                  0.8128008128012192
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_McMurdo",
                "false"
              ],
              [
                "test_Megiddo",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestCriteriaExtract",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_Megiddo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_McMurdo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_Megiddo",
                  "[]"
                ],
                [
                  "test_McMurdo",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_Megiddo",
                  "true"
                ],
                [
                  "test_McMurdo",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_Megiddo",
                  "false"
                ],
                [
                  "test_McMurdo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_Megiddo",
                  "false"
                ],
                [
                  "test_McMurdo",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_Megiddo",
                  "false"
                ],
                [
                  "test_McMurdo",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                "false"
              ],
              [
                "test_McMurdo",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                "false"
              ],
              [
                "test_McMurdo",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_Megiddo",
                [
                  "self.WD_0"
                ]
              ],
              [
                "test_McMurdo",
                [
                  "self.WD_1"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                "false"
              ],
              [
                "test_McMurdo",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_Megiddo",
                "true"
              ],
              [
                "test_McMurdo",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_Megiddo",
                  "0"
                ],
                [
                  "test_McMurdo",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_Megiddo",
                  "0"
                ],
                [
                  "test_McMurdo",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                "false"
              ],
              [
                "test_McMurdo",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                "false"
              ],
              [
                "test_McMurdo",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                "4"
              ],
              [
                "test_McMurdo",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_McMurdo",
                [
                  "res",
                  "outfiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                [
                  "self.WD_1"
                ]
              ],
              [
                "test_McMurdo",
                [
                  "self.WD_0"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8085428229838166,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_McMurdo",
                  "test_Megiddo",
                  0.8085428229838166
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_Megiddo",
                "false"
              ],
              [
                "test_McMurdo",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestThellierMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success_all_specs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_contribution_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fail_with_images",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_images",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_one_spec",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_contribution_fail",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success_all_specs",
                  "[]"
                ],
                [
                  "test_with_contribution_success",
                  "[]"
                ],
                [
                  "test_fail_with_images",
                  "[]"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_images",
                  "[]"
                ],
                [
                  "test_one_spec",
                  "[]"
                ],
                [
                  "test_with_contribution_fail",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success_all_specs",
                  "true"
                ],
                [
                  "test_with_contribution_success",
                  "false"
                ],
                [
                  "test_fail_with_images",
                  "false"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "true"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_images",
                  "false"
                ],
                [
                  "test_one_spec",
                  "true"
                ],
                [
                  "test_with_contribution_fail",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success_all_specs",
                  "false"
                ],
                [
                  "test_with_contribution_success",
                  "false"
                ],
                [
                  "test_fail_with_images",
                  "false"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_images",
                  "false"
                ],
                [
                  "test_one_spec",
                  "false"
                ],
                [
                  "test_with_contribution_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success_all_specs",
                  "false"
                ],
                [
                  "test_with_contribution_success",
                  "false"
                ],
                [
                  "test_fail_with_images",
                  "false"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_images",
                  "false"
                ],
                [
                  "test_one_spec",
                  "false"
                ],
                [
                  "test_with_contribution_fail",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success_all_specs",
                  "false"
                ],
                [
                  "test_with_contribution_success",
                  "false"
                ],
                [
                  "test_fail_with_images",
                  "false"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_images",
                  "false"
                ],
                [
                  "test_one_spec",
                  "false"
                ],
                [
                  "test_with_contribution_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                "false"
              ],
              [
                "test_with_contribution_success",
                "false"
              ],
              [
                "test_fail_with_images",
                "false"
              ],
              [
                "test_one_spec_with_output_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_one_spec",
                "false"
              ],
              [
                "test_with_contribution_fail",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                "false"
              ],
              [
                "test_with_contribution_success",
                "false"
              ],
              [
                "test_fail_with_images",
                "false"
              ],
              [
                "test_one_spec_with_output_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_one_spec",
                "false"
              ],
              [
                "test_with_contribution_fail",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_success_all_specs",
                []
              ],
              [
                "test_with_contribution_success",
                []
              ],
              [
                "test_fail_with_images",
                [
                  "self.thel_WD"
                ]
              ],
              [
                "test_one_spec_with_output_dir",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_images",
                []
              ],
              [
                "test_one_spec",
                []
              ],
              [
                "test_with_contribution_fail",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                "false"
              ],
              [
                "test_with_contribution_success",
                "false"
              ],
              [
                "test_fail_with_images",
                "false"
              ],
              [
                "test_one_spec_with_output_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_one_spec",
                "false"
              ],
              [
                "test_with_contribution_fail",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_success_all_specs",
                "true"
              ],
              [
                "test_with_contribution_success",
                "true"
              ],
              [
                "test_fail_with_images",
                "true"
              ],
              [
                "test_one_spec_with_output_dir",
                "true"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_with_images",
                "true"
              ],
              [
                "test_one_spec",
                "true"
              ],
              [
                "test_with_contribution_fail",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success_all_specs",
                  "0"
                ],
                [
                  "test_with_contribution_success",
                  "0"
                ],
                [
                  "test_fail_with_images",
                  "0"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_images",
                  "0"
                ],
                [
                  "test_one_spec",
                  "0"
                ],
                [
                  "test_with_contribution_fail",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success_all_specs",
                  "0"
                ],
                [
                  "test_with_contribution_success",
                  "0"
                ],
                [
                  "test_fail_with_images",
                  "0"
                ],
                [
                  "test_one_spec_with_output_dir",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_images",
                  "0"
                ],
                [
                  "test_one_spec",
                  "0"
                ],
                [
                  "test_with_contribution_fail",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                "false"
              ],
              [
                "test_with_contribution_success",
                "false"
              ],
              [
                "test_fail_with_images",
                "false"
              ],
              [
                "test_one_spec_with_output_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_one_spec",
                "false"
              ],
              [
                "test_with_contribution_fail",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                "false"
              ],
              [
                "test_with_contribution_success",
                "false"
              ],
              [
                "test_fail_with_images",
                "false"
              ],
              [
                "test_one_spec_with_output_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_one_spec",
                "false"
              ],
              [
                "test_with_contribution_fail",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                "2"
              ],
              [
                "test_with_contribution_success",
                "3"
              ],
              [
                "test_fail_with_images",
                "4"
              ],
              [
                "test_one_spec_with_output_dir",
                "5"
              ],
              [
                "test_success",
                "2"
              ],
              [
                "test_with_images",
                "4"
              ],
              [
                "test_one_spec",
                "3"
              ],
              [
                "test_with_contribution_fail",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_contribution_success",
                [
                  "res",
                  "con",
                  "outfiles"
                ]
              ],
              [
                "test_fail_with_images",
                [
                  "res",
                  "outfiles",
                  "image_recs"
                ]
              ],
              [
                "test_one_spec_with_output_dir",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_success",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_images",
                [
                  "res",
                  "outfiles",
                  "image_recs"
                ]
              ],
              [
                "test_one_spec",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_contribution_fail",
                [
                  "res",
                  "con",
                  "outfiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_success_all_specs",
                [
                  "self.thel_WD"
                ]
              ],
              [
                "test_with_contribution_success",
                [
                  "self.thel_WD"
                ]
              ],
              [
                "test_fail_with_images",
                []
              ],
              [
                "test_one_spec_with_output_dir",
                [
                  "self.thel_WD"
                ]
              ],
              [
                "test_success",
                [
                  "self.thel_WD"
                ]
              ],
              [
                "test_with_images",
                [
                  "self.thel_WD"
                ]
              ],
              [
                "test_one_spec",
                [
                  "self.thel_WD"
                ]
              ],
              [
                "test_with_contribution_fail",
                [
                  "self.thel_WD"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5912317789559945,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_one_spec",
                  "test_fail_with_images",
                  0.4614791034954486
                ],
                [
                  "test_one_spec",
                  "test_one_spec_with_output_dir",
                  0.8088518641335419
                ],
                [
                  "test_success",
                  "test_fail_with_images",
                  0.5958795715311239
                ],
                [
                  "test_success_all_specs",
                  "test_one_spec_with_output_dir",
                  0.5393996721302827
                ],
                [
                  "test_one_spec_with_output_dir",
                  "test_fail_with_images",
                  0.4263416246693093
                ],
                [
                  "test_one_spec",
                  "test_with_images",
                  0.5896618941607871
                ],
                [
                  "test_success_all_specs",
                  "test_with_images",
                  0.5536787286566668
                ],
                [
                  "test_one_spec_with_output_dir",
                  "test_with_contribution_fail",
                  0.5372288160169866
                ],
                [
                  "test_with_contribution_success",
                  "test_fail_with_images",
                  0.4531634835874829
                ],
                [
                  "test_success",
                  "test_with_images",
                  0.7833679783648667
                ],
                [
                  "test_with_images",
                  "test_fail_with_images",
                  0.8324833246120437
                ],
                [
                  "test_one_spec",
                  "test_with_contribution_fail",
                  0.5834500350116707
                ],
                [
                  "test_one_spec",
                  "test_with_contribution_success",
                  0.781947440012306
                ],
                [
                  "test_success",
                  "test_with_contribution_success",
                  0.6172133998483676
                ],
                [
                  "test_one_spec_with_output_dir",
                  "test_with_contribution_success",
                  0.7728098233339653
                ],
                [
                  "test_success_all_specs",
                  "test_one_spec",
                  0.5738190417570045
                ],
                [
                  "test_success_all_specs",
                  "test_with_contribution_fail",
                  0.4017536880041851
                ],
                [
                  "test_with_contribution_success",
                  "test_with_images",
                  0.561489925074877
                ],
                [
                  "test_success",
                  "test_one_spec_with_output_dir",
                  0.6337764908722299
                ],
                [
                  "test_success_all_specs",
                  "test_with_contribution_success",
                  0.5008703226778094
                ],
                [
                  "test_with_contribution_fail",
                  "test_fail_with_images",
                  0.45514956368175624
                ],
                [
                  "test_one_spec_with_output_dir",
                  "test_with_images",
                  0.6222604028047874
                ],
                [
                  "test_success",
                  "test_with_contribution_fail",
                  0.46206885338911463
                ],
                [
                  "test_success_all_specs",
                  "test_fail_with_images",
                  0.4375047341055788
                ],
                [
                  "test_with_contribution_fail",
                  "test_with_images",
                  0.42785848165549273
                ],
                [
                  "test_success",
                  "test_one_spec",
                  0.6547285010986551
                ],
                [
                  "test_success",
                  "test_success_all_specs",
                  0.661224398756117
                ],
                [
                  "test_with_contribution_fail",
                  "test_with_contribution_success",
                  0.82502864732539
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success_all_specs",
                "false"
              ],
              [
                "test_with_contribution_success",
                "false"
              ],
              [
                "test_fail_with_images",
                "false"
              ],
              [
                "test_one_spec_with_output_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_one_spec",
                "false"
              ],
              [
                "test_with_contribution_fail",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      },
      {
        "name": "TestOrientationMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success_with_one_dir",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success_with_one_dir",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success_with_one_dir",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success_with_one_dir",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success_with_one_dir",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success_with_one_dir",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                []
              ],
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success_with_one_dir",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success_with_one_dir",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "3"
              ],
              [
                "test_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                [
                  "res"
                ]
              ],
              [
                "test_success",
                [
                  "res"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                [
                  "self.orient_WD"
                ]
              ],
              [
                "test_success",
                [
                  "self.orient_WD"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7348469228349533,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_success_with_one_dir",
                  0.7348469228349533
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success_with_one_dir",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestEqareaMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_contribution_other",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_failure",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success_windows",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_ell",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_failure_with_images",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success_with_images",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_contribution_other",
                  "[]"
                ],
                [
                  "test_failure",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_success_windows",
                  "[]"
                ],
                [
                  "test_with_ell",
                  "[]"
                ],
                [
                  "test_failure_with_images",
                  "[]"
                ],
                [
                  "test_with_contribution",
                  "[]"
                ],
                [
                  "test_success_with_images",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_contribution_other",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_success",
                  "true"
                ],
                [
                  "test_success_windows",
                  "true"
                ],
                [
                  "test_with_ell",
                  "true"
                ],
                [
                  "test_failure_with_images",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success_with_images",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_contribution_other",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_success_windows",
                  "false"
                ],
                [
                  "test_with_ell",
                  "false"
                ],
                [
                  "test_failure_with_images",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success_with_images",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_contribution_other",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_success_windows",
                  "false"
                ],
                [
                  "test_with_ell",
                  "false"
                ],
                [
                  "test_failure_with_images",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success_with_images",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_contribution_other",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_success_windows",
                  "false"
                ],
                [
                  "test_with_ell",
                  "false"
                ],
                [
                  "test_failure_with_images",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success_with_images",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_success_windows",
                "false"
              ],
              [
                "test_with_ell",
                "false"
              ],
              [
                "test_failure_with_images",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_images",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_success_windows",
                "false"
              ],
              [
                "test_with_ell",
                "false"
              ],
              [
                "test_failure_with_images",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_images",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                []
              ],
              [
                "test_failure",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_success_windows",
                []
              ],
              [
                "test_with_ell",
                []
              ],
              [
                "test_failure_with_images",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success_with_images",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_contribution_other",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_success_windows",
                "false"
              ],
              [
                "test_with_ell",
                "false"
              ],
              [
                "test_failure_with_images",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_images",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_contribution_other",
                "true"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_success_windows",
                "false"
              ],
              [
                "test_with_ell",
                "false"
              ],
              [
                "test_failure_with_images",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_images",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_contribution_other",
                  "0"
                ],
                [
                  "test_failure",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_success_windows",
                  "0"
                ],
                [
                  "test_with_ell",
                  "0"
                ],
                [
                  "test_failure_with_images",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success_with_images",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_contribution_other",
                  "0"
                ],
                [
                  "test_failure",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_success_windows",
                  "0"
                ],
                [
                  "test_with_ell",
                  "0"
                ],
                [
                  "test_failure_with_images",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success_with_images",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_with_contribution_other",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_success_windows",
                "false"
              ],
              [
                "test_with_ell",
                "false"
              ],
              [
                "test_failure_with_images",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_images",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_success_windows",
                "false"
              ],
              [
                "test_with_ell",
                "false"
              ],
              [
                "test_failure_with_images",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_images",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                "3"
              ],
              [
                "test_failure",
                "1"
              ],
              [
                "test_success",
                "3"
              ],
              [
                "test_success_windows",
                "3"
              ],
              [
                "test_with_ell",
                "3"
              ],
              [
                "test_failure_with_images",
                "3"
              ],
              [
                "test_with_contribution",
                "2"
              ],
              [
                "test_success_with_images",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                [
                  "res",
                  "con",
                  "outfiles"
                ]
              ],
              [
                "test_failure",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_success",
                [
                  "figs",
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_success_windows",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_ell",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_failure_with_images",
                [
                  "res",
                  "outfiles",
                  "image_recs"
                ]
              ],
              [
                "test_with_contribution",
                [
                  "res",
                  "con",
                  "outfiles"
                ]
              ],
              [
                "test_success_with_images",
                [
                  "res",
                  "con",
                  "outfiles",
                  "image_recs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                []
              ],
              [
                "test_failure",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_success_windows",
                []
              ],
              [
                "test_with_ell",
                []
              ],
              [
                "test_failure_with_images",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success_with_images",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5557277919666218,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_failure",
                  "test_failure_with_images",
                  0.6500112459665918
                ],
                [
                  "test_with_contribution",
                  "test_failure_with_images",
                  0.45962735987049386
                ],
                [
                  "test_success_windows",
                  "test_failure_with_images",
                  0.5974529834860508
                ],
                [
                  "test_with_ell",
                  "test_success_with_images",
                  0.5918428055135636
                ],
                [
                  "test_with_contribution",
                  "test_with_contribution_other",
                  0.7882407813680822
                ],
                [
                  "test_success",
                  "test_with_ell",
                  0.5771499881036432
                ],
                [
                  "test_failure",
                  "test_success_with_images",
                  0.3764734830828952
                ],
                [
                  "test_with_contribution",
                  "test_success_with_images",
                  0.6655173820620853
                ],
                [
                  "test_with_ell",
                  "test_failure_with_images",
                  0.4524614483346644
                ],
                [
                  "test_success_windows",
                  "test_with_contribution_other",
                  0.5631333371009476
                ],
                [
                  "test_success_windows",
                  "test_success_with_images",
                  0.5399448865549691
                ],
                [
                  "test_failure",
                  "test_with_contribution_other",
                  0.4573295603800236
                ],
                [
                  "test_success",
                  "test_failure",
                  0.4349751191708486
                ],
                [
                  "test_failure",
                  "test_with_ell",
                  0.4859126579037751
                ],
                [
                  "test_success_windows",
                  "test_with_ell",
                  0.5437149461664321
                ],
                [
                  "test_success_with_images",
                  "test_failure_with_images",
                  0.6333722296313054
                ],
                [
                  "test_with_ell",
                  "test_with_contribution",
                  0.6871842709362768
                ],
                [
                  "test_success",
                  "test_failure_with_images",
                  0.39390843228953404
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.45326673576672327
                ],
                [
                  "test_with_ell",
                  "test_with_contribution_other",
                  0.6470588235294118
                ],
                [
                  "test_with_contribution_other",
                  "test_success_with_images",
                  0.8178191494369244
                ],
                [
                  "test_success",
                  "test_with_contribution_other",
                  0.5064785609889113
                ],
                [
                  "test_success",
                  "test_success_with_images",
                  0.4654134895319434
                ],
                [
                  "test_failure",
                  "test_with_contribution",
                  0.510688230856951
                ],
                [
                  "test_with_contribution_other",
                  "test_failure_with_images",
                  0.43278921145054855
                ],
                [
                  "test_success_windows",
                  "test_success",
                  0.6532268902162529
                ],
                [
                  "test_success_windows",
                  "test_failure",
                  0.6416236526819377
                ],
                [
                  "test_success_windows",
                  "test_with_contribution",
                  0.5337605126836237
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution_other",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_success_windows",
                "false"
              ],
              [
                "test_with_ell",
                "false"
              ],
              [
                "test_failure_with_images",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_images",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      },
      {
        "name": "TestPolemapMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_opts",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_image_records",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_path",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_opts",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_image_records",
                  "[]"
                ],
                [
                  "test_with_path",
                  "[]"
                ],
                [
                  "test_with_contribution",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_opts",
                  "true"
                ],
                [
                  "test_success",
                  "true"
                ],
                [
                  "test_with_image_records",
                  "true"
                ],
                [
                  "test_with_path",
                  "true"
                ],
                [
                  "test_with_contribution",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_opts",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_with_path",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_opts",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_with_path",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_opts",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_with_path",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_with_path",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_with_path",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_image_records",
                []
              ],
              [
                "test_with_path",
                []
              ],
              [
                "test_with_contribution",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_with_path",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_opts",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "true"
              ],
              [
                "test_with_path",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_opts",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_records",
                  "0"
                ],
                [
                  "test_with_path",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_opts",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_records",
                  "0"
                ],
                [
                  "test_with_path",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_with_path",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_with_path",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                "2"
              ],
              [
                "test_success",
                "2"
              ],
              [
                "test_with_image_records",
                "3"
              ],
              [
                "test_with_path",
                "2"
              ],
              [
                "test_with_contribution",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_success",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_image_records",
                [
                  "res",
                  "outfiles",
                  "image_recs"
                ]
              ],
              [
                "test_with_path",
                [
                  "res",
                  "outfiles",
                  "loc_file"
                ]
              ],
              [
                "test_with_contribution",
                [
                  "res",
                  "con",
                  "outfiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_image_records",
                []
              ],
              [
                "test_with_path",
                []
              ],
              [
                "test_with_contribution",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5807080875535494,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_image_records",
                  "test_with_path",
                  0.5393598899705937
                ],
                [
                  "test_with_image_records",
                  "test_with_contribution",
                  0.3954557894193501
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.39477101697586137
                ],
                [
                  "test_success",
                  "test_with_opts",
                  0.7462025072446365
                ],
                [
                  "test_success",
                  "test_with_path",
                  0.6356417261637282
                ],
                [
                  "test_success",
                  "test_with_image_records",
                  0.6749655638598863
                ],
                [
                  "test_with_path",
                  "test_with_contribution",
                  0.4600437062282361
                ],
                [
                  "test_with_image_records",
                  "test_with_opts",
                  0.6281486345370075
                ],
                [
                  "test_with_opts",
                  "test_with_path",
                  0.8695819912499182
                ],
                [
                  "test_with_opts",
                  "test_with_contribution",
                  0.4629100498862757
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_opts",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_with_path",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestZeqMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_images",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success_with_interpretations_long",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fail",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success_with_interpretations",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_images",
                  "[]"
                ],
                [
                  "test_success_with_interpretations_long",
                  "[]"
                ],
                [
                  "test_fail",
                  "[]"
                ],
                [
                  "test_with_contribution",
                  "[]"
                ],
                [
                  "test_success_with_interpretations",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "true"
                ],
                [
                  "test_with_images",
                  "true"
                ],
                [
                  "test_success_with_interpretations_long",
                  "true"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "true"
                ],
                [
                  "test_success_with_interpretations",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_images",
                  "false"
                ],
                [
                  "test_success_with_interpretations_long",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success_with_interpretations",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_images",
                  "false"
                ],
                [
                  "test_success_with_interpretations_long",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success_with_interpretations",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_images",
                  "false"
                ],
                [
                  "test_success_with_interpretations_long",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success_with_interpretations",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_success_with_interpretations_long",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_interpretations",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_success_with_interpretations_long",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_interpretations",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_images",
                []
              ],
              [
                "test_success_with_interpretations_long",
                []
              ],
              [
                "test_fail",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success_with_interpretations",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_success_with_interpretations_long",
                "true"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_interpretations",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "true"
              ],
              [
                "test_with_images",
                "true"
              ],
              [
                "test_success_with_interpretations_long",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_with_contribution",
                "true"
              ],
              [
                "test_success_with_interpretations",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_images",
                  "0"
                ],
                [
                  "test_success_with_interpretations_long",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success_with_interpretations",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_images",
                  "0"
                ],
                [
                  "test_success_with_interpretations_long",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success_with_interpretations",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_success_with_interpretations_long",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_interpretations",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_success_with_interpretations_long",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_interpretations",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "3"
              ],
              [
                "test_with_images",
                "5"
              ],
              [
                "test_success_with_interpretations_long",
                "2"
              ],
              [
                "test_fail",
                "2"
              ],
              [
                "test_with_contribution",
                "3"
              ],
              [
                "test_success_with_interpretations",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_images",
                [
                  "res",
                  "con",
                  "outfiles",
                  "image_recs"
                ]
              ],
              [
                "test_success_with_interpretations_long",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_fail",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_contribution",
                [
                  "res",
                  "con",
                  "outfiles"
                ]
              ],
              [
                "test_success_with_interpretations",
                [
                  "res",
                  "outfiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_images",
                []
              ],
              [
                "test_success_with_interpretations_long",
                []
              ],
              [
                "test_fail",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success_with_interpretations",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6209326413206058,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success_with_interpretations",
                  "test_with_images",
                  0.5990024930757496
                ],
                [
                  "test_success_with_interpretations_long",
                  "test_with_images",
                  0.37749021180571013
                ],
                [
                  "test_success_with_interpretations",
                  "test_fail",
                  0.6060915267313265
                ],
                [
                  "test_success",
                  "test_success_with_interpretations",
                  0.8203469922386928
                ],
                [
                  "test_success_with_interpretations_long",
                  "test_fail",
                  0.4889058650817127
                ],
                [
                  "test_success_with_interpretations_long",
                  "test_with_contribution",
                  0.4811114185247649
                ],
                [
                  "test_success_with_interpretations",
                  "test_success_with_interpretations_long",
                  0.7994512590476693
                ],
                [
                  "test_fail",
                  "test_with_images",
                  0.4235587248015105
                ],
                [
                  "test_success",
                  "test_success_with_interpretations_long",
                  0.6003651330350926
                ],
                [
                  "test_fail",
                  "test_with_contribution",
                  0.5111986324432478
                ],
                [
                  "test_with_contribution",
                  "test_with_images",
                  0.7915105427649071
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.7767237968080912
                ],
                [
                  "test_success",
                  "test_with_images",
                  0.6657540493097782
                ],
                [
                  "test_success",
                  "test_fail",
                  0.6736330697086078
                ],
                [
                  "test_success_with_interpretations",
                  "test_with_contribution",
                  0.6988459044322258
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_images",
                "false"
              ],
              [
                "test_success_with_interpretations_long",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success_with_interpretations",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "TestAnisoMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_image_recs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_image_recs_not_site",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success_old",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_new_success_by_site",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_contribution",
                  "[]"
                ],
                [
                  "test_with_image_recs",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_image_recs_not_site",
                  "[]"
                ],
                [
                  "test_success_old",
                  "[]"
                ],
                [
                  "test_new_success_by_site",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_contribution",
                  "true"
                ],
                [
                  "test_with_image_recs",
                  "true"
                ],
                [
                  "test_success",
                  "true"
                ],
                [
                  "test_with_image_recs_not_site",
                  "true"
                ],
                [
                  "test_success_old",
                  "false"
                ],
                [
                  "test_new_success_by_site",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_with_image_recs",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_recs_not_site",
                  "false"
                ],
                [
                  "test_success_old",
                  "false"
                ],
                [
                  "test_new_success_by_site",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_with_image_recs",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_recs_not_site",
                  "false"
                ],
                [
                  "test_success_old",
                  "false"
                ],
                [
                  "test_new_success_by_site",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_with_image_recs",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_recs_not_site",
                  "false"
                ],
                [
                  "test_success_old",
                  "false"
                ],
                [
                  "test_new_success_by_site",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs_not_site",
                "false"
              ],
              [
                "test_success_old",
                "false"
              ],
              [
                "test_new_success_by_site",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs_not_site",
                "false"
              ],
              [
                "test_success_old",
                "false"
              ],
              [
                "test_new_success_by_site",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                []
              ],
              [
                "test_with_image_recs",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_image_recs_not_site",
                []
              ],
              [
                "test_success_old",
                []
              ],
              [
                "test_new_success_by_site",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs_not_site",
                "false"
              ],
              [
                "test_success_old",
                "false"
              ],
              [
                "test_new_success_by_site",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_contribution",
                "true"
              ],
              [
                "test_with_image_recs",
                "true"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_with_image_recs_not_site",
                "true"
              ],
              [
                "test_success_old",
                "true"
              ],
              [
                "test_new_success_by_site",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_with_image_recs",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_recs_not_site",
                  "0"
                ],
                [
                  "test_success_old",
                  "0"
                ],
                [
                  "test_new_success_by_site",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_with_image_recs",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_recs_not_site",
                  "0"
                ],
                [
                  "test_success_old",
                  "0"
                ],
                [
                  "test_new_success_by_site",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs_not_site",
                "false"
              ],
              [
                "test_success_old",
                "false"
              ],
              [
                "test_new_success_by_site",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs_not_site",
                "false"
              ],
              [
                "test_success_old",
                "false"
              ],
              [
                "test_new_success_by_site",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "3"
              ],
              [
                "test_with_image_recs",
                "5"
              ],
              [
                "test_success",
                "3"
              ],
              [
                "test_with_image_recs_not_site",
                "5"
              ],
              [
                "test_success_old",
                "1"
              ],
              [
                "test_new_success_by_site",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                [
                  "con",
                  "outfiles",
                  "files",
                  "dir_path",
                  "status"
                ]
              ],
              [
                "test_with_image_recs",
                [
                  "con",
                  "outfiles",
                  "image_recs",
                  "files",
                  "dir_path",
                  "status"
                ]
              ],
              [
                "test_success",
                [
                  "outfiles",
                  "files",
                  "dir_path",
                  "status"
                ]
              ],
              [
                "test_with_image_recs_not_site",
                [
                  "con",
                  "outfiles",
                  "image_recs",
                  "files",
                  "dir_path",
                  "status"
                ]
              ],
              [
                "test_success_old",
                [
                  "files",
                  "dir_path"
                ]
              ],
              [
                "test_new_success_by_site",
                [
                  "outfiles",
                  "files",
                  "dir_path",
                  "status"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                []
              ],
              [
                "test_with_image_recs",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_image_recs_not_site",
                []
              ],
              [
                "test_success_old",
                []
              ],
              [
                "test_new_success_by_site",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7539338283448972,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_new_success_by_site",
                  "test_with_image_recs",
                  0.8381580761249496
                ],
                [
                  "test_success",
                  "test_with_image_recs",
                  0.736235703258602
                ],
                [
                  "test_with_contribution",
                  "test_with_image_recs",
                  0.9050183494432968
                ],
                [
                  "test_success_old",
                  "test_with_contribution",
                  0.5883705050823376
                ],
                [
                  "test_success_old",
                  "test_with_image_recs_not_site",
                  0.5347407899331232
                ],
                [
                  "test_new_success_by_site",
                  "test_with_contribution",
                  0.8815147508666312
                ],
                [
                  "test_new_success_by_site",
                  "test_with_image_recs_not_site",
                  0.8314794192830981
                ],
                [
                  "test_success_old",
                  "test_with_image_recs",
                  0.5544369932703277
                ],
                [
                  "test_success",
                  "test_new_success_by_site",
                  0.808290376865476
                ],
                [
                  "test_with_contribution",
                  "test_with_image_recs_not_site",
                  0.8787046577605876
                ],
                [
                  "test_success_old",
                  "test_success",
                  0.693103280083672
                ],
                [
                  "test_with_image_recs",
                  "test_with_image_recs_not_site",
                  0.976031233499216
                ],
                [
                  "test_success",
                  "test_with_image_recs_not_site",
                  0.7303691898205683
                ],
                [
                  "test_success_old",
                  "test_new_success_by_site",
                  0.6097727471733647
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.7427813527082073
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs_not_site",
                "false"
              ],
              [
                "test_success_old",
                "false"
              ],
              [
                "test_new_success_by_site",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "TestChiMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_options",
                  "[]"
                ],
                [
                  "test_with_contribution",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_options",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_options",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_options",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_options",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_options",
                "true"
              ],
              [
                "test_with_contribution",
                "true"
              ],
              [
                "test_success",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_options",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_options",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                "2"
              ],
              [
                "test_with_contribution",
                "2"
              ],
              [
                "test_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                [
                  "res",
                  "outfiles",
                  "files"
                ]
              ],
              [
                "test_with_contribution",
                [
                  "res",
                  "con",
                  "outfiles",
                  "files"
                ]
              ],
              [
                "test_success",
                [
                  "res",
                  "outfiles",
                  "files"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6949477538589767,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_with_options",
                  0.6674238124719146
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.6767633692869746
                ],
                [
                  "test_with_options",
                  "test_with_contribution",
                  0.740656079818041
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_options",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestQuickHyst",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_other_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_two_plots",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fail_with_image_records",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_image_records",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_without_save_plots",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_one_specimen",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fail_no_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_other_format",
                  "[]"
                ],
                [
                  "test_with_contribution",
                  "[]"
                ],
                [
                  "test_two_plots",
                  "[]"
                ],
                [
                  "test_fail_with_image_records",
                  "[]"
                ],
                [
                  "test_with_image_records",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_without_save_plots",
                  "[]"
                ],
                [
                  "test_one_specimen",
                  "[]"
                ],
                [
                  "test_fail_no_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_other_format",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_two_plots",
                  "false"
                ],
                [
                  "test_fail_with_image_records",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_success",
                  "true"
                ],
                [
                  "test_without_save_plots",
                  "false"
                ],
                [
                  "test_one_specimen",
                  "false"
                ],
                [
                  "test_fail_no_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_other_format",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_two_plots",
                  "false"
                ],
                [
                  "test_fail_with_image_records",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_without_save_plots",
                  "false"
                ],
                [
                  "test_one_specimen",
                  "false"
                ],
                [
                  "test_fail_no_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_other_format",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_two_plots",
                  "false"
                ],
                [
                  "test_fail_with_image_records",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_without_save_plots",
                  "false"
                ],
                [
                  "test_one_specimen",
                  "false"
                ],
                [
                  "test_fail_no_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_other_format",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_two_plots",
                  "false"
                ],
                [
                  "test_fail_with_image_records",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_without_save_plots",
                  "false"
                ],
                [
                  "test_one_specimen",
                  "false"
                ],
                [
                  "test_fail_no_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_two_plots",
                "false"
              ],
              [
                "test_fail_with_image_records",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_without_save_plots",
                "false"
              ],
              [
                "test_one_specimen",
                "false"
              ],
              [
                "test_fail_no_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_two_plots",
                "false"
              ],
              [
                "test_fail_with_image_records",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_without_save_plots",
                "false"
              ],
              [
                "test_one_specimen",
                "false"
              ],
              [
                "test_fail_no_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_two_plots",
                []
              ],
              [
                "test_fail_with_image_records",
                []
              ],
              [
                "test_with_image_records",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_without_save_plots",
                []
              ],
              [
                "test_one_specimen",
                []
              ],
              [
                "test_fail_no_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_two_plots",
                "false"
              ],
              [
                "test_fail_with_image_records",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_without_save_plots",
                "false"
              ],
              [
                "test_one_specimen",
                "false"
              ],
              [
                "test_fail_no_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_other_format",
                "true"
              ],
              [
                "test_with_contribution",
                "true"
              ],
              [
                "test_two_plots",
                "true"
              ],
              [
                "test_fail_with_image_records",
                "true"
              ],
              [
                "test_with_image_records",
                "true"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_without_save_plots",
                "false"
              ],
              [
                "test_one_specimen",
                "true"
              ],
              [
                "test_fail_no_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_other_format",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_two_plots",
                  "0"
                ],
                [
                  "test_fail_with_image_records",
                  "0"
                ],
                [
                  "test_with_image_records",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_without_save_plots",
                  "0"
                ],
                [
                  "test_one_specimen",
                  "0"
                ],
                [
                  "test_fail_no_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_other_format",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_two_plots",
                  "0"
                ],
                [
                  "test_fail_with_image_records",
                  "0"
                ],
                [
                  "test_with_image_records",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_without_save_plots",
                  "0"
                ],
                [
                  "test_one_specimen",
                  "0"
                ],
                [
                  "test_fail_no_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_two_plots",
                "false"
              ],
              [
                "test_fail_with_image_records",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_without_save_plots",
                "false"
              ],
              [
                "test_one_specimen",
                "false"
              ],
              [
                "test_fail_no_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_two_plots",
                "false"
              ],
              [
                "test_fail_with_image_records",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_without_save_plots",
                "false"
              ],
              [
                "test_one_specimen",
                "false"
              ],
              [
                "test_fail_no_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                "3"
              ],
              [
                "test_with_contribution",
                "3"
              ],
              [
                "test_two_plots",
                "3"
              ],
              [
                "test_fail_with_image_records",
                "3"
              ],
              [
                "test_with_image_records",
                "5"
              ],
              [
                "test_success",
                "3"
              ],
              [
                "test_without_save_plots",
                "3"
              ],
              [
                "test_one_specimen",
                "2"
              ],
              [
                "test_fail_no_file",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                [
                  "saved",
                  "status"
                ]
              ],
              [
                "test_with_contribution",
                [
                  "res",
                  "con",
                  "saved"
                ]
              ],
              [
                "test_two_plots",
                [
                  "saved",
                  "status"
                ]
              ],
              [
                "test_fail_with_image_records",
                [
                  "saved",
                  "image_recs",
                  "status"
                ]
              ],
              [
                "test_with_image_records",
                [
                  "saved",
                  "image_recs",
                  "status"
                ]
              ],
              [
                "test_success",
                [
                  "saved",
                  "status"
                ]
              ],
              [
                "test_without_save_plots",
                [
                  "saved",
                  "status"
                ]
              ],
              [
                "test_one_specimen",
                [
                  "saved",
                  "status"
                ]
              ],
              [
                "test_fail_no_file",
                [
                  "saved",
                  "status"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_two_plots",
                []
              ],
              [
                "test_fail_with_image_records",
                []
              ],
              [
                "test_with_image_records",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_without_save_plots",
                []
              ],
              [
                "test_one_specimen",
                []
              ],
              [
                "test_fail_no_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5664417915838688,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_one_specimen",
                  "test_without_save_plots",
                  0.4871080168020649
                ],
                [
                  "test_fail_no_file",
                  "test_with_contribution",
                  0.4931969619160719
                ],
                [
                  "test_success",
                  "test_other_format",
                  0.6288281455225323
                ],
                [
                  "test_success",
                  "test_one_specimen",
                  0.7643157063581784
                ],
                [
                  "test_one_specimen",
                  "test_with_contribution",
                  0.4273937576108645
                ],
                [
                  "test_one_specimen",
                  "test_two_plots",
                  0.5723514714723391
                ],
                [
                  "test_other_format",
                  "test_with_image_records",
                  0.7683473166337529
                ],
                [
                  "test_fail_no_file",
                  "test_without_save_plots",
                  0.5786375623578447
                ],
                [
                  "test_other_format",
                  "test_fail_with_image_records",
                  0.41247895569215265
                ],
                [
                  "test_with_contribution",
                  "test_without_save_plots",
                  0.5834482328466173
                ],
                [
                  "test_with_contribution",
                  "test_fail_with_image_records",
                  0.4359286452893223
                ],
                [
                  "test_fail_no_file",
                  "test_two_plots",
                  0.48666426339228763
                ],
                [
                  "test_other_format",
                  "test_without_save_plots",
                  0.6943650748294136
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.4793012932694108
                ],
                [
                  "test_with_contribution",
                  "test_with_image_records",
                  0.5992643310160244
                ],
                [
                  "test_one_specimen",
                  "test_with_image_records",
                  0.4977157493014015
                ],
                [
                  "test_one_specimen",
                  "test_fail_with_image_records",
                  0.4267459067940983
                ],
                [
                  "test_fail_no_file",
                  "test_one_specimen",
                  0.4642383454426297
                ],
                [
                  "test_success",
                  "test_without_save_plots",
                  0.5292561240249631
                ],
                [
                  "test_success",
                  "test_fail_with_image_records",
                  0.48507125007266594
                ],
                [
                  "test_two_plots",
                  "test_with_contribution",
                  0.6667259338283313
                ],
                [
                  "test_fail_no_file",
                  "test_other_format",
                  0.5
                ],
                [
                  "test_two_plots",
                  "test_without_save_plots",
                  0.7759705701987263
                ],
                [
                  "test_with_image_records",
                  "test_fail_with_image_records",
                  0.6064784348631226
                ],
                [
                  "test_success",
                  "test_two_plots",
                  0.612056372482123
                ],
                [
                  "test_without_save_plots",
                  "test_with_image_records",
                  0.5790069448163759
                ],
                [
                  "test_without_save_plots",
                  "test_fail_with_image_records",
                  0.40915854419248565
                ],
                [
                  "test_fail_no_file",
                  "test_with_image_records",
                  0.40204220056417306
                ],
                [
                  "test_other_format",
                  "test_two_plots",
                  0.8651809126974003
                ],
                [
                  "test_two_plots",
                  "test_with_image_records",
                  0.8000302474620598
                ],
                [
                  "test_success",
                  "test_fail_no_file",
                  0.5144957554275265
                ],
                [
                  "test_success",
                  "test_with_image_records",
                  0.5515973485146916
                ],
                [
                  "test_fail_no_file",
                  "test_fail_with_image_records",
                  0.6187184335382291
                ],
                [
                  "test_two_plots",
                  "test_fail_with_image_records",
                  0.4301545010073033
                ],
                [
                  "test_one_specimen",
                  "test_other_format",
                  0.5880352375606643
                ],
                [
                  "test_other_format",
                  "test_with_contribution",
                  0.6575959492214292
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_other_format",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_two_plots",
                "false"
              ],
              [
                "test_fail_with_image_records",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_without_save_plots",
                "false"
              ],
              [
                "test_one_specimen",
                "false"
              ],
              [
                "test_fail_no_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      },
      {
        "name": "TestVgpmapMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_image_recs",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fail",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_success_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_image_recs",
                  "[]"
                ],
                [
                  "test_fail",
                  "[]"
                ],
                [
                  "test_success_with_contribution",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "true"
                ],
                [
                  "test_with_image_recs",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_success_with_contribution",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_recs",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_success_with_contribution",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_recs",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_success_with_contribution",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_recs",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_success_with_contribution",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_success_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_success_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_image_recs",
                []
              ],
              [
                "test_fail",
                []
              ],
              [
                "test_success_with_contribution",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_success_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "true"
              ],
              [
                "test_with_image_recs",
                "true"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_success_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_recs",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ],
                [
                  "test_success_with_contribution",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_recs",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ],
                [
                  "test_success_with_contribution",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "true"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_success_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_success_with_contribution",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "3"
              ],
              [
                "test_with_image_recs",
                "5"
              ],
              [
                "test_fail",
                "2"
              ],
              [
                "test_success_with_contribution",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "saved",
                  "status"
                ]
              ],
              [
                "test_with_image_recs",
                [
                  "con",
                  "saved",
                  "image_recs",
                  "status"
                ]
              ],
              [
                "test_fail",
                [
                  "saved",
                  "status"
                ]
              ],
              [
                "test_success_with_contribution",
                [
                  "con",
                  "saved",
                  "status"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_image_recs",
                []
              ],
              [
                "test_fail",
                []
              ],
              [
                "test_success_with_contribution",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6088413837578954,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_success_with_contribution",
                  0.6672006408545297
                ],
                [
                  "test_success",
                  "test_with_image_recs",
                  0.6374552583116766
                ],
                [
                  "test_success",
                  "test_fail",
                  0.5345224838248488
                ],
                [
                  "test_with_image_recs",
                  "test_fail",
                  0.5111012519999519
                ],
                [
                  "test_success_with_contribution",
                  "test_with_image_recs",
                  0.7464200272921789
                ],
                [
                  "test_success_with_contribution",
                  "test_fail",
                  0.5563486402641867
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_recs",
                "false"
              ],
              [
                "test_fail",
                "false"
              ],
              [
                "test_success_with_contribution",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestHistplot",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fail",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_binsize",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fail",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_binsize",
                  "[]"
                ],
                [
                  "test_success_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_binsize",
                  "false"
                ],
                [
                  "test_success_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_binsize",
                  "false"
                ],
                [
                  "test_success_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fail",
                  "true"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_binsize",
                  "false"
                ],
                [
                  "test_success_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fail",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_binsize",
                  "false"
                ],
                [
                  "test_success_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_binsize",
                "false"
              ],
              [
                "test_success_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_binsize",
                "false"
              ],
              [
                "test_success_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_binsize",
                []
              ],
              [
                "test_success_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_binsize",
                "false"
              ],
              [
                "test_success_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_binsize",
                "false"
              ],
              [
                "test_success_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fail",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_binsize",
                  "0"
                ],
                [
                  "test_success_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fail",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_binsize",
                  "0"
                ],
                [
                  "test_success_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_binsize",
                "false"
              ],
              [
                "test_success_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_binsize",
                "false"
              ],
              [
                "test_success_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "2"
              ],
              [
                "test_success",
                "3"
              ],
              [
                "test_with_binsize",
                "3"
              ],
              [
                "test_success_file",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                [
                  "res",
                  "saved"
                ]
              ],
              [
                "test_success",
                [
                  "res",
                  "saved",
                  "norm"
                ]
              ],
              [
                "test_with_binsize",
                [
                  "res",
                  "saved",
                  "norm"
                ]
              ],
              [
                "test_success_file",
                [
                  "res",
                  "saved",
                  "norm"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_binsize",
                []
              ],
              [
                "test_success_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7897373414977472,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_success_file",
                  0.8994012224377722
                ],
                [
                  "test_success",
                  "test_fail",
                  0.7164977208318386
                ],
                [
                  "test_success",
                  "test_with_binsize",
                  0.9036519915598482
                ],
                [
                  "test_success_file",
                  "test_fail",
                  0.6859943405700353
                ],
                [
                  "test_with_binsize",
                  "test_fail",
                  0.6676978608895887
                ],
                [
                  "test_success_file",
                  "test_with_binsize",
                  0.8651809126974003
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_fail",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_binsize",
                "false"
              ],
              [
                "test_success_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestDayplotMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_image_records",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fail",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_contribution",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_image_records",
                  "[]"
                ],
                [
                  "test_fail",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_image_records",
                  "false"
                ],
                [
                  "test_fail",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_image_records",
                []
              ],
              [
                "test_fail",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "true"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_records",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_image_records",
                  "0"
                ],
                [
                  "test_fail",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "3"
              ],
              [
                "test_success",
                "3"
              ],
              [
                "test_with_image_records",
                "5"
              ],
              [
                "test_fail",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                [
                  "res",
                  "con",
                  "saved"
                ]
              ],
              [
                "test_success",
                [
                  "res",
                  "saved"
                ]
              ],
              [
                "test_with_image_records",
                [
                  "res",
                  "con",
                  "saved",
                  "image_records"
                ]
              ],
              [
                "test_fail",
                [
                  "res",
                  "saved"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_with_image_records",
                []
              ],
              [
                "test_fail",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.631195792784191,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_fail",
                  "test_with_contribution",
                  0.6343350474165466
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.723317638245537
                ],
                [
                  "test_fail",
                  "test_with_image_records",
                  0.5111012519999519
                ],
                [
                  "test_success",
                  "test_fail",
                  0.6687338550904235
                ],
                [
                  "test_with_contribution",
                  "test_with_image_records",
                  0.6764754597315763
                ],
                [
                  "test_success",
                  "test_with_image_records",
                  0.5732115042211109
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_with_image_records",
                "false"
              ],
              [
                "test_fail",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestDmagMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_output_dir",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_alt_failure",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_failure",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_with_contribution",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_alt_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_output_dir",
                  "[]"
                ],
                [
                  "test_alt_failure",
                  "[]"
                ],
                [
                  "test_failure",
                  "[]"
                ],
                [
                  "test_with_contribution",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_alt_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_output_dir",
                  "true"
                ],
                [
                  "test_alt_failure",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "true"
                ],
                [
                  "test_success",
                  "true"
                ],
                [
                  "test_alt_success",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_output_dir",
                  "false"
                ],
                [
                  "test_alt_failure",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_alt_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_output_dir",
                  "false"
                ],
                [
                  "test_alt_failure",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_alt_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_output_dir",
                  "false"
                ],
                [
                  "test_alt_failure",
                  "false"
                ],
                [
                  "test_failure",
                  "false"
                ],
                [
                  "test_with_contribution",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_alt_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                "false"
              ],
              [
                "test_alt_failure",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_alt_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                "false"
              ],
              [
                "test_alt_failure",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_alt_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                []
              ],
              [
                "test_alt_failure",
                []
              ],
              [
                "test_failure",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_alt_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_output_dir",
                "true"
              ],
              [
                "test_alt_failure",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_alt_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_output_dir",
                "true"
              ],
              [
                "test_alt_failure",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_with_contribution",
                "true"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_alt_success",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_output_dir",
                  "0"
                ],
                [
                  "test_alt_failure",
                  "0"
                ],
                [
                  "test_failure",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_alt_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_output_dir",
                  "0"
                ],
                [
                  "test_alt_failure",
                  "0"
                ],
                [
                  "test_failure",
                  "0"
                ],
                [
                  "test_with_contribution",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_alt_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_with_output_dir",
                "false"
              ],
              [
                "test_alt_failure",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "true"
              ],
              [
                "test_alt_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                "false"
              ],
              [
                "test_alt_failure",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_alt_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                "3"
              ],
              [
                "test_alt_failure",
                "1"
              ],
              [
                "test_failure",
                "1"
              ],
              [
                "test_with_contribution",
                "3"
              ],
              [
                "test_success",
                "3"
              ],
              [
                "test_alt_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                [
                  "res",
                  "images",
                  "outfiles"
                ]
              ],
              [
                "test_alt_failure",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_failure",
                [
                  "res",
                  "outfiles"
                ]
              ],
              [
                "test_with_contribution",
                [
                  "res",
                  "images",
                  "con",
                  "outfiles"
                ]
              ],
              [
                "test_success",
                [
                  "res",
                  "images",
                  "outfiles"
                ]
              ],
              [
                "test_alt_success",
                [
                  "res",
                  "images",
                  "outfiles"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                []
              ],
              [
                "test_alt_failure",
                []
              ],
              [
                "test_failure",
                []
              ],
              [
                "test_with_contribution",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_alt_success",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.654580352241354,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_alt_success",
                  "test_with_output_dir",
                  0.7521014330903549
                ],
                [
                  "test_with_output_dir",
                  "test_alt_failure",
                  0.5658251521157384
                ],
                [
                  "test_failure",
                  "test_alt_failure",
                  0.8109307588519342
                ],
                [
                  "test_success",
                  "test_failure",
                  0.7115124735378853
                ],
                [
                  "test_success",
                  "test_alt_failure",
                  0.6294407455622119
                ],
                [
                  "test_alt_success",
                  "test_with_contribution",
                  0.7329409123199366
                ],
                [
                  "test_with_contribution",
                  "test_alt_failure",
                  0.39125402252874997
                ],
                [
                  "test_alt_success",
                  "test_alt_failure",
                  0.6687338550904235
                ],
                [
                  "test_with_contribution",
                  "test_failure",
                  0.40824829046386296
                ],
                [
                  "test_alt_success",
                  "test_failure",
                  0.7323061664553777
                ],
                [
                  "test_success",
                  "test_with_output_dir",
                  0.8315131637046652
                ],
                [
                  "test_success",
                  "test_with_contribution",
                  0.564810071321915
                ],
                [
                  "test_with_output_dir",
                  "test_with_contribution",
                  0.5222329678670935
                ],
                [
                  "test_success",
                  "test_alt_success",
                  0.8217196689173956
                ],
                [
                  "test_with_output_dir",
                  "test_failure",
                  0.6751356017927663
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_output_dir",
                "false"
              ],
              [
                "test_alt_failure",
                "false"
              ],
              [
                "test_failure",
                "false"
              ],
              [
                "test_with_contribution",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_alt_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "TestMagICDownload",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_doi",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_bad_doi",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_bad_contribution_id",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_contribution_id",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_doi",
                  "[]"
                ],
                [
                  "test_with_bad_doi",
                  "[]"
                ],
                [
                  "test_with_bad_contribution_id",
                  "[]"
                ],
                [
                  "test_with_contribution_id",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_doi",
                  "false"
                ],
                [
                  "test_with_bad_doi",
                  "false"
                ],
                [
                  "test_with_bad_contribution_id",
                  "false"
                ],
                [
                  "test_with_contribution_id",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_doi",
                  "false"
                ],
                [
                  "test_with_bad_doi",
                  "false"
                ],
                [
                  "test_with_bad_contribution_id",
                  "false"
                ],
                [
                  "test_with_contribution_id",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_doi",
                  "false"
                ],
                [
                  "test_with_bad_doi",
                  "false"
                ],
                [
                  "test_with_bad_contribution_id",
                  "false"
                ],
                [
                  "test_with_contribution_id",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_doi",
                  "false"
                ],
                [
                  "test_with_bad_doi",
                  "false"
                ],
                [
                  "test_with_bad_contribution_id",
                  "false"
                ],
                [
                  "test_with_contribution_id",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "false"
              ],
              [
                "test_with_bad_doi",
                "false"
              ],
              [
                "test_with_bad_contribution_id",
                "false"
              ],
              [
                "test_with_contribution_id",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "false"
              ],
              [
                "test_with_bad_doi",
                "false"
              ],
              [
                "test_with_bad_contribution_id",
                "false"
              ],
              [
                "test_with_contribution_id",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                []
              ],
              [
                "test_with_bad_doi",
                []
              ],
              [
                "test_with_bad_contribution_id",
                []
              ],
              [
                "test_with_contribution_id",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "false"
              ],
              [
                "test_with_bad_doi",
                "false"
              ],
              [
                "test_with_bad_contribution_id",
                "false"
              ],
              [
                "test_with_contribution_id",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "false"
              ],
              [
                "test_with_bad_doi",
                "false"
              ],
              [
                "test_with_bad_contribution_id",
                "false"
              ],
              [
                "test_with_contribution_id",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_doi",
                  "0"
                ],
                [
                  "test_with_bad_doi",
                  "0"
                ],
                [
                  "test_with_bad_contribution_id",
                  "0"
                ],
                [
                  "test_with_contribution_id",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_doi",
                  "0"
                ],
                [
                  "test_with_bad_doi",
                  "0"
                ],
                [
                  "test_with_bad_contribution_id",
                  "0"
                ],
                [
                  "test_with_contribution_id",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "false"
              ],
              [
                "test_with_bad_doi",
                "false"
              ],
              [
                "test_with_bad_contribution_id",
                "false"
              ],
              [
                "test_with_contribution_id",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "false"
              ],
              [
                "test_with_bad_doi",
                "false"
              ],
              [
                "test_with_bad_contribution_id",
                "false"
              ],
              [
                "test_with_contribution_id",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "2"
              ],
              [
                "test_with_bad_doi",
                "2"
              ],
              [
                "test_with_bad_contribution_id",
                "2"
              ],
              [
                "test_with_contribution_id",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                [
                  "msg",
                  "res"
                ]
              ],
              [
                "test_with_bad_doi",
                [
                  "msg",
                  "res"
                ]
              ],
              [
                "test_with_bad_contribution_id",
                [
                  "msg",
                  "res"
                ]
              ],
              [
                "test_with_contribution_id",
                [
                  "msg",
                  "res"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                []
              ],
              [
                "test_with_bad_doi",
                []
              ],
              [
                "test_with_bad_contribution_id",
                []
              ],
              [
                "test_with_contribution_id",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5846757508814234,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_contribution_id",
                  "test_with_bad_doi",
                  0.519827460062754
                ],
                [
                  "test_with_bad_contribution_id",
                  "test_with_contribution_id",
                  0.6900655593423543
                ],
                [
                  "test_with_bad_contribution_id",
                  "test_with_doi",
                  0.45818979495265694
                ],
                [
                  "test_with_bad_contribution_id",
                  "test_with_bad_doi",
                  0.4509560339299333
                ],
                [
                  "test_with_contribution_id",
                  "test_with_doi",
                  0.681005224606999
                ],
                [
                  "test_with_bad_doi",
                  "test_with_doi",
                  0.7080104323938432
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_doi",
                "false"
              ],
              [
                "test_with_bad_doi",
                "false"
              ],
              [
                "test_with_bad_contribution_id",
                "false"
              ],
              [
                "test_with_contribution_id",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_imports2.py",
    "testCases": [
      {
        "name": "Test_sio_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_sio_magic_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_sio_magic_fail_option4",
                  "[]"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "[]"
                ],
                [
                  "test_sio_magic_success",
                  "[]"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "[]"
                ],
                [
                  "test_sio_magic_no_files",
                  "[]"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                []
              ],
              [
                "test_sio_magic_fail_with_coil",
                []
              ],
              [
                "test_sio_magic_success",
                []
              ],
              [
                "test_sio_magic_succeed_option4",
                []
              ],
              [
                "test_sio_magic_no_files",
                []
              ],
              [
                "test_sio_magic_succeed_with_coil",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_sio_magic_fail_option4",
                  "0"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "0"
                ],
                [
                  "test_sio_magic_success",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_sio_magic_no_files",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_sio_magic_fail_option4",
                  "0"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "0"
                ],
                [
                  "test_sio_magic_success",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_sio_magic_no_files",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "2"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "2"
              ],
              [
                "test_sio_magic_success",
                "2"
              ],
              [
                "test_sio_magic_succeed_option4",
                "2"
              ],
              [
                "test_sio_magic_no_files",
                "2"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "options",
                  "meas_file"
                ]
              ],
              [
                "test_sio_magic_fail_with_coil",
                [
                  "error_message",
                  "program_ran",
                  "options",
                  "meas_file"
                ]
              ],
              [
                "test_sio_magic_success",
                [
                  "program_ran",
                  "file_name",
                  "options",
                  "meas_file"
                ]
              ],
              [
                "test_sio_magic_succeed_option4",
                [
                  "program_ran",
                  "file_name",
                  "options",
                  "meas_file"
                ]
              ],
              [
                "test_sio_magic_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ],
              [
                "test_sio_magic_succeed_with_coil",
                [
                  "program_ran",
                  "file_name",
                  "options",
                  "meas_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                []
              ],
              [
                "test_sio_magic_fail_with_coil",
                []
              ],
              [
                "test_sio_magic_success",
                []
              ],
              [
                "test_sio_magic_succeed_option4",
                []
              ],
              [
                "test_sio_magic_no_files",
                []
              ],
              [
                "test_sio_magic_succeed_with_coil",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7328278646934182,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_success",
                  0.34517262948290695
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "test_sio_magic_succeed_with_coil",
                  0.9762596580392706
                ],
                [
                  "test_sio_magic_fail_option4",
                  "test_sio_magic_succeed_with_coil",
                  0.881401536590826
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_succeed_with_coil",
                  0.3400921207590814
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_succeed_option4",
                  0.3360672201667223
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_fail_option4",
                  0.8754836923530749
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_succeed_with_coil",
                  0.9697475392120778
                ],
                [
                  "test_sio_magic_fail_option4",
                  "test_sio_magic_fail_with_coil",
                  0.9162708326722891
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "test_sio_magic_fail_with_coil",
                  0.8966850716093465
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_fail_option4",
                  0.3734559144883569
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_succeed_option4",
                  0.9645752461085684
                ],
                [
                  "test_sio_magic_fail_option4",
                  "test_sio_magic_succeed_option4",
                  0.9088386592328929
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_fail_with_coil",
                  0.9076323334383272
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_fail_with_coil",
                  0.38210855060367915
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "test_sio_magic_succeed_with_coil",
                  0.9186269656438527
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_fail_option4",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "Test_cit_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cit_magic_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_with_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cit_magic_with_options",
                  "[]"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "[]"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "[]"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "[]"
                ],
                [
                  "test_cit_with_no_files",
                  "[]"
                ],
                [
                  "test_cit_magic_with_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                []
              ],
              [
                "test_cit_magic_succeed_option4",
                []
              ],
              [
                "test_cit_magic_fail_option4",
                []
              ],
              [
                "test_cit_magic_with_other_data",
                []
              ],
              [
                "test_cit_with_no_files",
                []
              ],
              [
                "test_cit_magic_with_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cit_magic_with_options",
                  "0"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "0"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "0"
                ],
                [
                  "test_cit_with_no_files",
                  "0"
                ],
                [
                  "test_cit_magic_with_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cit_magic_with_options",
                  "0"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "0"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "0"
                ],
                [
                  "test_cit_with_no_files",
                  "0"
                ],
                [
                  "test_cit_magic_with_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "2"
              ],
              [
                "test_cit_magic_succeed_option4",
                "2"
              ],
              [
                "test_cit_magic_fail_option4",
                "2"
              ],
              [
                "test_cit_magic_with_other_data",
                "2"
              ],
              [
                "test_cit_with_no_files",
                "2"
              ],
              [
                "test_cit_magic_with_file",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_cit_magic_succeed_option4",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_cit_magic_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_cit_magic_with_other_data",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_cit_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ],
              [
                "test_cit_magic_with_file",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                []
              ],
              [
                "test_cit_magic_succeed_option4",
                []
              ],
              [
                "test_cit_magic_fail_option4",
                []
              ],
              [
                "test_cit_magic_with_other_data",
                []
              ],
              [
                "test_cit_with_no_files",
                []
              ],
              [
                "test_cit_magic_with_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7030249007237424,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_with_other_data",
                  0.8869502585260155
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_fail_option4",
                  0.3977961264790775
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_with_options",
                  0.332026138755218
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "test_cit_magic_with_other_data",
                  0.8927463511159427
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_with_options",
                  0.8889729527344613
                ],
                [
                  "test_cit_magic_fail_option4",
                  "test_cit_magic_succeed_option4",
                  0.8342180365117214
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_with_other_data",
                  0.33127067443445657
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_fail_option4",
                  0.7755199075539727
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "test_cit_magic_with_options",
                  0.8947822633406195
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_with_file",
                  0.4279480516180917
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_succeed_option4",
                  0.37007637284637673
                ],
                [
                  "test_cit_magic_with_options",
                  "test_cit_magic_with_other_data",
                  0.9931688637204873
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_succeed_option4",
                  0.9452130472820798
                ],
                [
                  "test_cit_magic_fail_option4",
                  "test_cit_magic_with_options",
                  0.7882389792721344
                ],
                [
                  "test_cit_magic_fail_option4",
                  "test_cit_magic_with_other_data",
                  0.7864454866654799
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "Test_iodp_srm_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_iodp_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_with_files",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_iodp_with_one_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_iodp_with_no_files",
                  "[]"
                ],
                [
                  "test_iodp_with_files",
                  "[]"
                ],
                [
                  "test_iodp_with_one_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_iodp_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_with_files",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_iodp_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_with_files",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_iodp_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_with_files",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_iodp_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_with_files",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                "false"
              ],
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                "false"
              ],
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                []
              ],
              [
                "test_iodp_with_files",
                []
              ],
              [
                "test_iodp_with_one_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_iodp_with_no_files",
                "false"
              ],
              [
                "test_iodp_with_files",
                "true"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                "false"
              ],
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_iodp_with_no_files",
                  "0"
                ],
                [
                  "test_iodp_with_files",
                  "0"
                ],
                [
                  "test_iodp_with_one_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_iodp_with_no_files",
                  "0"
                ],
                [
                  "test_iodp_with_files",
                  "0"
                ],
                [
                  "test_iodp_with_one_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                "false"
              ],
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                "false"
              ],
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                "2"
              ],
              [
                "test_iodp_with_files",
                "1"
              ],
              [
                "test_iodp_with_one_file",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ],
              [
                "test_iodp_with_files",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "dir_path"
                ]
              ],
              [
                "test_iodp_with_one_file",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "dir_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                []
              ],
              [
                "test_iodp_with_files",
                []
              ],
              [
                "test_iodp_with_one_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.552099183990181,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_iodp_with_files",
                  "test_iodp_with_one_file",
                  0.831480201571812
                ],
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_one_file",
                  0.3969581307590986
                ],
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_files",
                  0.42785921963963236
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_no_files",
                "false"
              ],
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "Test_iodp_dscr_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_iodp_with_one_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_iodp_with_one_file",
                  "[]"
                ],
                [
                  "test_iodp_with_no_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                []
              ],
              [
                "test_iodp_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_iodp_with_one_file",
                  "0"
                ],
                [
                  "test_iodp_with_no_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_iodp_with_one_file",
                  "0"
                ],
                [
                  "test_iodp_with_no_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "2"
              ],
              [
                "test_iodp_with_no_files",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "dir_path"
                ]
              ],
              [
                "test_iodp_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                []
              ],
              [
                "test_iodp_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.373679493197531,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_one_file",
                  0.373679493197531
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "Test_iodp_jr6_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_iodp_jr6_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_iodp_jr6_with_options",
                  "[]"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "[]"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "[]"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                []
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                []
              ],
              [
                "test_iodp_jr6_with_no_files",
                []
              ],
              [
                "test_iodp_jr6_with_magfile",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_iodp_jr6_with_options",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_iodp_jr6_with_options",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "2"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "2"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "2"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                [
                  "mag_file",
                  "program_ran",
                  "outfile",
                  "options",
                  "input_dir",
                  "meas_file"
                ]
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                [
                  "error_message",
                  "msg",
                  "mag_file",
                  "program_ran",
                  "options",
                  "samp_file",
                  "input_dir",
                  "hidden_samp_file"
                ]
              ],
              [
                "test_iodp_jr6_with_no_files",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_iodp_jr6_with_magfile",
                [
                  "mag_file",
                  "program_ran",
                  "outfile",
                  "options",
                  "input_dir",
                  "meas_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                []
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                []
              ],
              [
                "test_iodp_jr6_with_no_files",
                []
              ],
              [
                "test_iodp_jr6_with_magfile",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7196685014971825,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_iodp_jr6_with_magfile",
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  0.7671942104328857
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  0.5735914384140803
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "test_iodp_jr6_with_options",
                  0.985492869683082
                ],
                [
                  "test_iodp_jr6_with_options",
                  "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                  0.7675780954758893
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "test_iodp_jr6_with_magfile",
                  0.6009942011789683
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "test_iodp_jr6_with_options",
                  0.6231601937981895
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile_but_hidden_sampfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "Test2g_bin_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_2g_fail_option7",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_with_bad_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_fail_option6",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_with_options",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_2g_with_files",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_2g_succeed_option7",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_2g_fail_option7",
                  "[]"
                ],
                [
                  "test_2g_with_no_files",
                  "[]"
                ],
                [
                  "test_2g_succeed_option4",
                  "[]"
                ],
                [
                  "test_2g_with_bad_file",
                  "[]"
                ],
                [
                  "test_2g_fail_option4",
                  "[]"
                ],
                [
                  "test_2g_fail_option6",
                  "[]"
                ],
                [
                  "test_2g_with_options",
                  "[]"
                ],
                [
                  "test_2g_with_files",
                  "[]"
                ],
                [
                  "test_2g_succeed_option7",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                []
              ],
              [
                "test_2g_with_no_files",
                []
              ],
              [
                "test_2g_succeed_option4",
                []
              ],
              [
                "test_2g_with_bad_file",
                []
              ],
              [
                "test_2g_fail_option4",
                []
              ],
              [
                "test_2g_fail_option6",
                []
              ],
              [
                "test_2g_with_options",
                []
              ],
              [
                "test_2g_with_files",
                []
              ],
              [
                "test_2g_succeed_option7",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_2g_fail_option7",
                  "0"
                ],
                [
                  "test_2g_with_no_files",
                  "0"
                ],
                [
                  "test_2g_succeed_option4",
                  "0"
                ],
                [
                  "test_2g_with_bad_file",
                  "0"
                ],
                [
                  "test_2g_fail_option4",
                  "0"
                ],
                [
                  "test_2g_fail_option6",
                  "0"
                ],
                [
                  "test_2g_with_options",
                  "0"
                ],
                [
                  "test_2g_with_files",
                  "0"
                ],
                [
                  "test_2g_succeed_option7",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_2g_fail_option7",
                  "0"
                ],
                [
                  "test_2g_with_no_files",
                  "0"
                ],
                [
                  "test_2g_succeed_option4",
                  "0"
                ],
                [
                  "test_2g_with_bad_file",
                  "0"
                ],
                [
                  "test_2g_fail_option4",
                  "0"
                ],
                [
                  "test_2g_fail_option6",
                  "0"
                ],
                [
                  "test_2g_with_options",
                  "0"
                ],
                [
                  "test_2g_with_files",
                  "0"
                ],
                [
                  "test_2g_succeed_option7",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "2"
              ],
              [
                "test_2g_with_no_files",
                "2"
              ],
              [
                "test_2g_succeed_option4",
                "2"
              ],
              [
                "test_2g_with_bad_file",
                "2"
              ],
              [
                "test_2g_fail_option4",
                "2"
              ],
              [
                "test_2g_fail_option6",
                "2"
              ],
              [
                "test_2g_with_options",
                "1"
              ],
              [
                "test_2g_with_files",
                "3"
              ],
              [
                "test_2g_succeed_option7",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_with_no_files",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_succeed_option4",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_2g_with_bad_file",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_fail_option6",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_with_options",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_2g_with_files",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_2g_succeed_option7",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                []
              ],
              [
                "test_2g_with_no_files",
                []
              ],
              [
                "test_2g_succeed_option4",
                []
              ],
              [
                "test_2g_with_bad_file",
                []
              ],
              [
                "test_2g_fail_option4",
                []
              ],
              [
                "test_2g_fail_option6",
                []
              ],
              [
                "test_2g_with_options",
                []
              ],
              [
                "test_2g_with_files",
                []
              ],
              [
                "test_2g_succeed_option7",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8376031691229908,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_2g_succeed_option4",
                  "test_2g_with_bad_file",
                  0.8727272727272727
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_fail_option7",
                  0.7071067811865475
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_with_options",
                  0.889489146943869
                ],
                [
                  "test_2g_with_files",
                  "test_2g_succeed_option4",
                  0.9361394951779466
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_fail_option6",
                  0.9164927600961618
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_succeed_option7",
                  1.0
                ],
                [
                  "test_2g_with_files",
                  "test_2g_with_options",
                  0.8144291237964549
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_fail_option7",
                  0.8983743352751077
                ],
                [
                  "test_2g_with_files",
                  "test_2g_succeed_option7",
                  0.9361394951779466
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_with_files",
                  0.7232521565244112
                ],
                [
                  "test_2g_succeed_option7",
                  "test_2g_with_bad_file",
                  0.8727272727272727
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_fail_option6",
                  0.9185834858291084
                ],
                [
                  "test_2g_with_files",
                  "test_2g_with_bad_file",
                  0.9010342641087737
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_fail_option4",
                  0.7071067811865475
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_succeed_option4",
                  0.6504925025453934
                ],
                [
                  "test_2g_succeed_option7",
                  "test_2g_fail_option6",
                  0.9164927600961618
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_with_options",
                  0.8202746086073928
                ],
                [
                  "test_2g_with_files",
                  "test_2g_fail_option7",
                  0.8532305966035162
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_with_bad_file",
                  0.8775320506967252
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_fail_option6",
                  0.6877446479107829
                ],
                [
                  "test_2g_with_files",
                  "test_2g_fail_option6",
                  0.8459401356115575
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_succeed_option7",
                  0.8696263565463043
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_with_options",
                  0.8415252461360817
                ],
                [
                  "test_2g_with_bad_file",
                  "test_2g_with_options",
                  0.8010289625500008
                ],
                [
                  "test_2g_fail_option6",
                  "test_2g_with_bad_file",
                  0.8714448108710962
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_with_bad_file",
                  0.8459092740950414
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_with_bad_file",
                  0.7602631123499284
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_succeed_option7",
                  0.8983743352751077
                ],
                [
                  "test_2g_fail_option6",
                  "test_2g_with_options",
                  0.8451221610079265
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_fail_option7",
                  0.9749999999999999
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_succeed_option7",
                  0.6504925025453934
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_fail_option6",
                  0.8915663244811936
                ],
                [
                  "test_2g_with_files",
                  "test_2g_fail_option4",
                  0.8219193820492587
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_with_options",
                  0.577016444201214
                ],
                [
                  "test_2g_succeed_option7",
                  "test_2g_with_options",
                  0.889489146943869
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_succeed_option4",
                  0.8696263565463043
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      },
      {
        "name": "Test_bgc_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bgc_alternate_infile",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bgc_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bgc_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bgc_alternate_infile",
                  "[]"
                ],
                [
                  "test_bgc_success",
                  "[]"
                ],
                [
                  "test_bgc_with_no_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_no_files",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_no_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_bgc_alternate_infile",
                []
              ],
              [
                "test_bgc_success",
                []
              ],
              [
                "test_bgc_with_no_files",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bgc_alternate_infile",
                  "0"
                ],
                [
                  "test_bgc_success",
                  "0"
                ],
                [
                  "test_bgc_with_no_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bgc_alternate_infile",
                  "0"
                ],
                [
                  "test_bgc_success",
                  "0"
                ],
                [
                  "test_bgc_with_no_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "2"
              ],
              [
                "test_bgc_success",
                "2"
              ],
              [
                "test_bgc_with_no_files",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_bgc_success",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_bgc_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_bgc_alternate_infile",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_bgc_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_bgc_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.624581618111942,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bgc_success",
                  "test_bgc_alternate_infile",
                  0.8889566369846307
                ],
                [
                  "test_bgc_with_no_files",
                  "test_bgc_success",
                  0.4954336943068623
                ],
                [
                  "test_bgc_with_no_files",
                  "test_bgc_alternate_infile",
                  0.4893545230443332
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_no_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_imports3.py",
    "testCases": [
      {
        "name": "Test2g_bin_magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_2g_with_bad_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_with_path",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_2g_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_fail_option6",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_with_files",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_2g_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_fail_option7",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_2g_succeed_option7",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_2g_with_bad_file",
                  "[]"
                ],
                [
                  "test_2g_with_no_files",
                  "[]"
                ],
                [
                  "test_2g_with_path",
                  "[]"
                ],
                [
                  "test_2g_fail_option4",
                  "[]"
                ],
                [
                  "test_2g_with_options",
                  "[]"
                ],
                [
                  "test_2g_fail_option6",
                  "[]"
                ],
                [
                  "test_2g_with_files",
                  "[]"
                ],
                [
                  "test_2g_succeed_option4",
                  "[]"
                ],
                [
                  "test_2g_fail_option7",
                  "[]"
                ],
                [
                  "test_2g_succeed_option7",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_with_path",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_with_path",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_with_path",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_2g_with_bad_file",
                  "false"
                ],
                [
                  "test_2g_with_no_files",
                  "false"
                ],
                [
                  "test_2g_with_path",
                  "false"
                ],
                [
                  "test_2g_fail_option4",
                  "false"
                ],
                [
                  "test_2g_with_options",
                  "false"
                ],
                [
                  "test_2g_fail_option6",
                  "false"
                ],
                [
                  "test_2g_with_files",
                  "false"
                ],
                [
                  "test_2g_succeed_option4",
                  "false"
                ],
                [
                  "test_2g_fail_option7",
                  "false"
                ],
                [
                  "test_2g_succeed_option7",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_with_path",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_with_path",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                []
              ],
              [
                "test_2g_with_no_files",
                []
              ],
              [
                "test_2g_with_path",
                []
              ],
              [
                "test_2g_fail_option4",
                []
              ],
              [
                "test_2g_with_options",
                []
              ],
              [
                "test_2g_fail_option6",
                []
              ],
              [
                "test_2g_with_files",
                []
              ],
              [
                "test_2g_succeed_option4",
                []
              ],
              [
                "test_2g_fail_option7",
                []
              ],
              [
                "test_2g_succeed_option7",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_with_path",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_with_path",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_2g_with_bad_file",
                  "0"
                ],
                [
                  "test_2g_with_no_files",
                  "0"
                ],
                [
                  "test_2g_with_path",
                  "0"
                ],
                [
                  "test_2g_fail_option4",
                  "0"
                ],
                [
                  "test_2g_with_options",
                  "0"
                ],
                [
                  "test_2g_fail_option6",
                  "0"
                ],
                [
                  "test_2g_with_files",
                  "0"
                ],
                [
                  "test_2g_succeed_option4",
                  "0"
                ],
                [
                  "test_2g_fail_option7",
                  "0"
                ],
                [
                  "test_2g_succeed_option7",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_2g_with_bad_file",
                  "0"
                ],
                [
                  "test_2g_with_no_files",
                  "0"
                ],
                [
                  "test_2g_with_path",
                  "0"
                ],
                [
                  "test_2g_fail_option4",
                  "0"
                ],
                [
                  "test_2g_with_options",
                  "0"
                ],
                [
                  "test_2g_fail_option6",
                  "0"
                ],
                [
                  "test_2g_with_files",
                  "0"
                ],
                [
                  "test_2g_succeed_option4",
                  "0"
                ],
                [
                  "test_2g_fail_option7",
                  "0"
                ],
                [
                  "test_2g_succeed_option7",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_with_path",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_with_path",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "2"
              ],
              [
                "test_2g_with_no_files",
                "2"
              ],
              [
                "test_2g_with_path",
                "3"
              ],
              [
                "test_2g_fail_option4",
                "2"
              ],
              [
                "test_2g_with_options",
                "2"
              ],
              [
                "test_2g_fail_option6",
                "2"
              ],
              [
                "test_2g_with_files",
                "4"
              ],
              [
                "test_2g_succeed_option4",
                "2"
              ],
              [
                "test_2g_fail_option7",
                "2"
              ],
              [
                "test_2g_succeed_option7",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_with_no_files",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_with_path",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "input_dir"
                ]
              ],
              [
                "test_2g_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_with_options",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_2g_fail_option6",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_with_files",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df"
                ]
              ],
              [
                "test_2g_succeed_option4",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_2g_fail_option7",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_2g_succeed_option7",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                []
              ],
              [
                "test_2g_with_no_files",
                []
              ],
              [
                "test_2g_with_path",
                []
              ],
              [
                "test_2g_fail_option4",
                []
              ],
              [
                "test_2g_with_options",
                []
              ],
              [
                "test_2g_fail_option6",
                []
              ],
              [
                "test_2g_with_files",
                []
              ],
              [
                "test_2g_succeed_option4",
                []
              ],
              [
                "test_2g_fail_option7",
                []
              ],
              [
                "test_2g_succeed_option7",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8053344042532097,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_2g_fail_option4",
                  "test_2g_succeed_option4",
                  0.8851416742396572
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_fail_option6",
                  0.9086706675875453
                ],
                [
                  "test_2g_with_files",
                  "test_2g_with_bad_file",
                  0.8361624588263545
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_fail_option7",
                  0.8851416742396572
                ],
                [
                  "test_2g_succeed_option7",
                  "test_2g_with_path",
                  0.8306886635937217
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_succeed_option4",
                  0.5931710140017395
                ],
                [
                  "test_2g_with_files",
                  "test_2g_fail_option4",
                  0.7841955263729278
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_with_path",
                  0.8306886635937217
                ],
                [
                  "test_2g_fail_option6",
                  "test_2g_with_bad_file",
                  0.8568790755367385
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_with_bad_file",
                  0.8606837194430925
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_succeed_option7",
                  0.8851416742396572
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_with_path",
                  0.7786298594168378
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_succeed_option7",
                  0.5931710140017395
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_with_options",
                  0.8341122288266093
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_fail_option7",
                  1.0
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_with_options",
                  0.5247835714059896
                ],
                [
                  "test_2g_succeed_option7",
                  "test_2g_with_options",
                  0.8975424625090952
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_with_path",
                  0.5101530688844431
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_fail_option7",
                  0.651150562908459
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_with_options",
                  0.8975424625090952
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_succeed_option7",
                  0.8851416742396572
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_with_options",
                  0.8341122288266093
                ],
                [
                  "test_2g_succeed_option7",
                  "test_2g_fail_option6",
                  0.9073327328891221
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_fail_option6",
                  0.9073327328891221
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_with_bad_file",
                  0.8562618371497391
                ],
                [
                  "test_2g_with_bad_file",
                  "test_2g_with_options",
                  0.7919207445514327
                ],
                [
                  "test_2g_with_files",
                  "test_2g_with_path",
                  0.8015325559078368
                ],
                [
                  "test_2g_succeed_option4",
                  "test_2g_succeed_option7",
                  1.0
                ],
                [
                  "test_2g_fail_option6",
                  "test_2g_with_path",
                  0.7752456157561758
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_fail_option6",
                  0.6409882014228715
                ],
                [
                  "test_2g_fail_option7",
                  "test_2g_with_path",
                  0.7786298594168378
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_fail_option6",
                  0.9086706675875453
                ],
                [
                  "test_2g_with_bad_file",
                  "test_2g_with_path",
                  0.8263661373529254
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_with_files",
                  0.6476608756134363
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_fail_option4",
                  0.651150562908459
                ],
                [
                  "test_2g_succeed_option7",
                  "test_2g_with_bad_file",
                  0.8562618371497391
                ],
                [
                  "test_2g_with_files",
                  "test_2g_succeed_option4",
                  0.8755585701175325
                ],
                [
                  "test_2g_fail_option4",
                  "test_2g_with_bad_file",
                  0.8606837194430925
                ],
                [
                  "test_2g_with_no_files",
                  "test_2g_with_bad_file",
                  0.7130704379553141
                ],
                [
                  "test_2g_with_files",
                  "test_2g_fail_option6",
                  0.7837688815089574
                ],
                [
                  "test_2g_with_options",
                  "test_2g_with_path",
                  0.8112089448782107
                ],
                [
                  "test_2g_with_files",
                  "test_2g_with_options",
                  0.7909497098199824
                ],
                [
                  "test_2g_fail_option6",
                  "test_2g_with_options",
                  0.8327955253822958
                ],
                [
                  "test_2g_with_files",
                  "test_2g_fail_option7",
                  0.7841955263729278
                ],
                [
                  "test_2g_with_files",
                  "test_2g_succeed_option7",
                  0.8755585701175325
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_2g_with_bad_file",
                "false"
              ],
              [
                "test_2g_with_no_files",
                "false"
              ],
              [
                "test_2g_with_path",
                "false"
              ],
              [
                "test_2g_fail_option4",
                "false"
              ],
              [
                "test_2g_with_options",
                "false"
              ],
              [
                "test_2g_fail_option6",
                "false"
              ],
              [
                "test_2g_with_files",
                "false"
              ],
              [
                "test_2g_succeed_option4",
                "false"
              ],
              [
                "test_2g_fail_option7",
                "false"
              ],
              [
                "test_2g_succeed_option7",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      },
      {
        "name": "TestAgmMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_backfield_success",
                  "[]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_backfield_success",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_backfield_success",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_backfield_success",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_backfield_success",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_backfield_success",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                []
              ],
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_backfield_success",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_backfield_success",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_backfield_success",
                "0"
              ],
              [
                "test_success",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                [
                  "filename",
                  "program_ran",
                  "input_dir"
                ]
              ],
              [
                "test_success",
                [
                  "filename",
                  "program_ran",
                  "input_dir"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                []
              ],
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8606629658238705,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_backfield_success",
                  0.8606629658238705
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_backfield_success",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestBgcMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bgc_with_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_bgc_alternate_infile",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bgc_with_append",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bgc_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_bgc_with_path",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bgc_with_no_files",
                  "[]"
                ],
                [
                  "test_bgc_alternate_infile",
                  "[]"
                ],
                [
                  "test_bgc_with_append",
                  "[]"
                ],
                [
                  "test_bgc_success",
                  "[]"
                ],
                [
                  "test_bgc_with_path",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bgc_with_no_files",
                  "false"
                ],
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_with_append",
                  "false"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_path",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bgc_with_no_files",
                  "false"
                ],
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_with_append",
                  "false"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bgc_with_no_files",
                  "false"
                ],
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_with_append",
                  "true"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_path",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bgc_with_no_files",
                  "false"
                ],
                [
                  "test_bgc_alternate_infile",
                  "false"
                ],
                [
                  "test_bgc_with_append",
                  "false"
                ],
                [
                  "test_bgc_success",
                  "false"
                ],
                [
                  "test_bgc_with_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                "false"
              ],
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_with_append",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                "false"
              ],
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_with_append",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_bgc_with_no_files",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_bgc_alternate_infile",
                []
              ],
              [
                "test_bgc_with_append",
                []
              ],
              [
                "test_bgc_success",
                []
              ],
              [
                "test_bgc_with_path",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                "false"
              ],
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_with_append",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_bgc_with_no_files",
                "false"
              ],
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_with_append",
                "true"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bgc_with_no_files",
                  "0"
                ],
                [
                  "test_bgc_alternate_infile",
                  "0"
                ],
                [
                  "test_bgc_with_append",
                  "0"
                ],
                [
                  "test_bgc_success",
                  "0"
                ],
                [
                  "test_bgc_with_path",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bgc_with_no_files",
                  "0"
                ],
                [
                  "test_bgc_alternate_infile",
                  "0"
                ],
                [
                  "test_bgc_with_append",
                  "0"
                ],
                [
                  "test_bgc_success",
                  "0"
                ],
                [
                  "test_bgc_with_path",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                "false"
              ],
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_with_append",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                "false"
              ],
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_with_append",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                "1"
              ],
              [
                "test_bgc_alternate_infile",
                "2"
              ],
              [
                "test_bgc_with_append",
                "3"
              ],
              [
                "test_bgc_success",
                "3"
              ],
              [
                "test_bgc_with_path",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                []
              ],
              [
                "test_bgc_alternate_infile",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_bgc_with_append",
                [
                  "program_ran",
                  "file_type",
                  "outfile",
                  "options",
                  "lines"
                ]
              ],
              [
                "test_bgc_success",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df"
                ]
              ],
              [
                "test_bgc_with_path",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_bgc_with_no_files",
                []
              ],
              [
                "test_bgc_alternate_infile",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_bgc_with_append",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_bgc_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_bgc_with_path",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4962861130791333,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bgc_with_no_files",
                  "test_bgc_alternate_infile",
                  0.22271770159368698
                ],
                [
                  "test_bgc_success",
                  "test_bgc_with_path",
                  0.60324934681779
                ],
                [
                  "test_bgc_with_no_files",
                  "test_bgc_success",
                  0.21428571428571427
                ],
                [
                  "test_bgc_alternate_infile",
                  "test_bgc_with_append",
                  0.8036830424667041
                ],
                [
                  "test_bgc_with_no_files",
                  "test_bgc_with_path",
                  0.21936339884283274
                ],
                [
                  "test_bgc_success",
                  "test_bgc_alternate_infile",
                  0.7795119555779044
                ],
                [
                  "test_bgc_success",
                  "test_bgc_with_append",
                  0.7129310462392063
                ],
                [
                  "test_bgc_with_path",
                  "test_bgc_alternate_infile",
                  0.581387732848254
                ],
                [
                  "test_bgc_with_path",
                  "test_bgc_with_append",
                  0.5789473684210528
                ],
                [
                  "test_bgc_with_no_files",
                  "test_bgc_with_append",
                  0.24678382369818683
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bgc_with_no_files",
                "false"
              ],
              [
                "test_bgc_alternate_infile",
                "false"
              ],
              [
                "test_bgc_with_append",
                "false"
              ],
              [
                "test_bgc_success",
                "false"
              ],
              [
                "test_bgc_with_path",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestCitMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cit_magic_with_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_cit_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cit_magic_with_path",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cit_magic_with_file",
                  "[]"
                ],
                [
                  "test_cit_with_no_files",
                  "[]"
                ],
                [
                  "test_cit_magic_with_options",
                  "[]"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "[]"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "[]"
                ],
                [
                  "test_cit_magic_with_path",
                  "[]"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cit_magic_with_file",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_magic_with_path",
                  "true"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cit_magic_with_file",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_magic_with_path",
                  "false"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cit_magic_with_file",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_magic_with_path",
                  "false"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cit_magic_with_file",
                  "false"
                ],
                [
                  "test_cit_with_no_files",
                  "false"
                ],
                [
                  "test_cit_magic_with_options",
                  "false"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "false"
                ],
                [
                  "test_cit_magic_with_path",
                  "false"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_magic_with_path",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_magic_with_path",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                []
              ],
              [
                "test_cit_with_no_files",
                []
              ],
              [
                "test_cit_magic_with_options",
                []
              ],
              [
                "test_cit_magic_succeed_option4",
                []
              ],
              [
                "test_cit_magic_with_other_data",
                []
              ],
              [
                "test_cit_magic_with_path",
                []
              ],
              [
                "test_cit_magic_fail_option4",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_magic_with_path",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_magic_with_path",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cit_magic_with_file",
                  "0"
                ],
                [
                  "test_cit_with_no_files",
                  "0"
                ],
                [
                  "test_cit_magic_with_options",
                  "0"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "0"
                ],
                [
                  "test_cit_magic_with_path",
                  "0"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cit_magic_with_file",
                  "0"
                ],
                [
                  "test_cit_with_no_files",
                  "0"
                ],
                [
                  "test_cit_magic_with_options",
                  "0"
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_cit_magic_with_other_data",
                  "0"
                ],
                [
                  "test_cit_magic_with_path",
                  "0"
                ],
                [
                  "test_cit_magic_fail_option4",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_magic_with_path",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_magic_with_path",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "3"
              ],
              [
                "test_cit_with_no_files",
                "2"
              ],
              [
                "test_cit_magic_with_options",
                "2"
              ],
              [
                "test_cit_magic_succeed_option4",
                "2"
              ],
              [
                "test_cit_magic_with_other_data",
                "2"
              ],
              [
                "test_cit_magic_with_path",
                "3"
              ],
              [
                "test_cit_magic_fail_option4",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df"
                ]
              ],
              [
                "test_cit_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ],
              [
                "test_cit_magic_with_options",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_cit_magic_succeed_option4",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_cit_magic_with_other_data",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_cit_magic_with_path",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_cit_magic_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "options"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                []
              ],
              [
                "test_cit_with_no_files",
                []
              ],
              [
                "test_cit_magic_with_options",
                []
              ],
              [
                "test_cit_magic_succeed_option4",
                []
              ],
              [
                "test_cit_magic_with_other_data",
                []
              ],
              [
                "test_cit_magic_with_path",
                []
              ],
              [
                "test_cit_magic_fail_option4",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6728747732051441,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_with_options",
                  0.3084246847506244
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_fail_option4",
                  0.36514837167011077
                ],
                [
                  "test_cit_magic_with_path",
                  "test_cit_magic_with_options",
                  0.746527930135034
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "test_cit_magic_with_other_data",
                  0.8900862436453901
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_with_file",
                  0.3928371006591931
                ],
                [
                  "test_cit_magic_succeed_option4",
                  "test_cit_magic_with_options",
                  0.8921830339329121
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_with_other_data",
                  0.843933623604518
                ],
                [
                  "test_cit_magic_with_path",
                  "test_cit_magic_with_other_data",
                  0.7447734554883118
                ],
                [
                  "test_cit_magic_fail_option4",
                  "test_cit_magic_with_other_data",
                  0.7844498086859464
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_succeed_option4",
                  0.3339115355603141
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_succeed_option4",
                  0.8888888888888888
                ],
                [
                  "test_cit_magic_with_path",
                  "test_cit_magic_succeed_option4",
                  0.7709428100436664
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_with_other_data",
                  0.3076998313754527
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_with_path",
                  0.7414800274942269
                ],
                [
                  "test_cit_magic_with_options",
                  "test_cit_magic_with_other_data",
                  0.9929439251080955
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_with_options",
                  0.845921691432687
                ],
                [
                  "test_cit_magic_fail_option4",
                  "test_cit_magic_succeed_option4",
                  0.8348430768491543
                ],
                [
                  "test_cit_with_no_files",
                  "test_cit_magic_with_path",
                  0.2291666666666667
                ],
                [
                  "test_cit_magic_with_path",
                  "test_cit_magic_fail_option4",
                  0.6983462608190869
                ],
                [
                  "test_cit_magic_fail_option4",
                  "test_cit_magic_with_options",
                  0.7862977495474576
                ],
                [
                  "test_cit_magic_with_file",
                  "test_cit_magic_fail_option4",
                  0.7315635209502898
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_cit_magic_with_file",
                "false"
              ],
              [
                "test_cit_with_no_files",
                "false"
              ],
              [
                "test_cit_magic_with_options",
                "false"
              ],
              [
                "test_cit_magic_succeed_option4",
                "false"
              ],
              [
                "test_cit_magic_with_other_data",
                "false"
              ],
              [
                "test_cit_magic_with_path",
                "false"
              ],
              [
                "test_cit_magic_fail_option4",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "TestGenericMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_generic_magic_no_exp",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_generic_magic_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_generic_magic_no_exp",
                  "[]"
                ],
                [
                  "test_generic_magic_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_generic_magic_no_exp",
                  "false"
                ],
                [
                  "test_generic_magic_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_generic_magic_no_exp",
                  "false"
                ],
                [
                  "test_generic_magic_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_generic_magic_no_exp",
                  "false"
                ],
                [
                  "test_generic_magic_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_generic_magic_no_exp",
                  "false"
                ],
                [
                  "test_generic_magic_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "false"
              ],
              [
                "test_generic_magic_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "false"
              ],
              [
                "test_generic_magic_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                []
              ],
              [
                "test_generic_magic_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "false"
              ],
              [
                "test_generic_magic_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "false"
              ],
              [
                "test_generic_magic_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_generic_magic_no_exp",
                  "0"
                ],
                [
                  "test_generic_magic_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_generic_magic_no_exp",
                  "0"
                ],
                [
                  "test_generic_magic_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "false"
              ],
              [
                "test_generic_magic_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "false"
              ],
              [
                "test_generic_magic_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "2"
              ],
              [
                "test_generic_magic_success",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                [
                  "error_message",
                  "program_ran",
                  "options",
                  "dir_path",
                  "no_exp_error"
                ]
              ],
              [
                "test_generic_magic_success",
                [
                  "program_ran",
                  "options",
                  "outfile_name",
                  "dir_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                []
              ],
              [
                "test_generic_magic_success",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.724777234747286,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_generic_magic_no_exp",
                  "test_generic_magic_success",
                  0.724777234747286
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_generic_magic_no_exp",
                "false"
              ],
              [
                "test_generic_magic_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestHujiMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_huji_magic_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_no_exp_type",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_bad_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_huji_magic_success",
                  "[]"
                ],
                [
                  "test_with_no_exp_type",
                  "[]"
                ],
                [
                  "test_with_bad_file",
                  "[]"
                ],
                [
                  "test_with_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_huji_magic_success",
                  "false"
                ],
                [
                  "test_with_no_exp_type",
                  "false"
                ],
                [
                  "test_with_bad_file",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_huji_magic_success",
                  "false"
                ],
                [
                  "test_with_no_exp_type",
                  "false"
                ],
                [
                  "test_with_bad_file",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_huji_magic_success",
                  "false"
                ],
                [
                  "test_with_no_exp_type",
                  "false"
                ],
                [
                  "test_with_bad_file",
                  "true"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_huji_magic_success",
                  "false"
                ],
                [
                  "test_with_no_exp_type",
                  "false"
                ],
                [
                  "test_with_bad_file",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "false"
              ],
              [
                "test_with_no_exp_type",
                "false"
              ],
              [
                "test_with_bad_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "false"
              ],
              [
                "test_with_no_exp_type",
                "false"
              ],
              [
                "test_with_bad_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                []
              ],
              [
                "test_with_no_exp_type",
                []
              ],
              [
                "test_with_bad_file",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "false"
              ],
              [
                "test_with_no_exp_type",
                "false"
              ],
              [
                "test_with_bad_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "false"
              ],
              [
                "test_with_no_exp_type",
                "false"
              ],
              [
                "test_with_bad_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_huji_magic_success",
                  "0"
                ],
                [
                  "test_with_no_exp_type",
                  "0"
                ],
                [
                  "test_with_bad_file",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_huji_magic_success",
                  "0"
                ],
                [
                  "test_with_no_exp_type",
                  "0"
                ],
                [
                  "test_with_bad_file",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "false"
              ],
              [
                "test_with_no_exp_type",
                "false"
              ],
              [
                "test_with_bad_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "false"
              ],
              [
                "test_with_no_exp_type",
                "false"
              ],
              [
                "test_with_bad_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "2"
              ],
              [
                "test_with_no_exp_type",
                "2"
              ],
              [
                "test_with_bad_file",
                "4"
              ],
              [
                "test_with_options",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                [
                  "program_ran",
                  "outfile",
                  "full_file",
                  "options",
                  "dir_path"
                ]
              ],
              [
                "test_with_no_exp_type",
                [
                  "res",
                  "mag_file",
                  "dir_path",
                  "error"
                ]
              ],
              [
                "test_with_bad_file",
                [
                  "error_msg",
                  "program_ran"
                ]
              ],
              [
                "test_with_options",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "dir_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                []
              ],
              [
                "test_with_no_exp_type",
                []
              ],
              [
                "test_with_bad_file",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5312296644305218,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_bad_file",
                  "test_huji_magic_success",
                  0.2613838422748508
                ],
                [
                  "test_with_options",
                  "test_with_no_exp_type",
                  0.7796811755854504
                ],
                [
                  "test_with_bad_file",
                  "test_with_no_exp_type",
                  0.23097828906119441
                ],
                [
                  "test_huji_magic_success",
                  "test_with_options",
                  0.9134575567658715
                ],
                [
                  "test_huji_magic_success",
                  "test_with_no_exp_type",
                  0.7554820474006072
                ],
                [
                  "test_with_bad_file",
                  "test_with_options",
                  0.2463950754951562
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_huji_magic_success",
                "false"
              ],
              [
                "test_with_no_exp_type",
                "false"
              ],
              [
                "test_with_bad_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestHujiSampleMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "outfile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestIodpSrmMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_iodp_with_files",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_iodp_with_one_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_iodp_with_files",
                  "[]"
                ],
                [
                  "test_iodp_with_one_file",
                  "[]"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "[]"
                ],
                [
                  "test_iodp_with_no_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_iodp_with_files",
                  "true"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_iodp_with_files",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_iodp_with_files",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_iodp_with_files",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                []
              ],
              [
                "test_iodp_with_one_file",
                []
              ],
              [
                "test_iodp_with_one_file_with_path",
                []
              ],
              [
                "test_iodp_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_iodp_with_files",
                  "0"
                ],
                [
                  "test_iodp_with_one_file",
                  "0"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "0"
                ],
                [
                  "test_iodp_with_no_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_iodp_with_files",
                  "0"
                ],
                [
                  "test_iodp_with_one_file",
                  "0"
                ],
                [
                  "test_iodp_with_one_file_with_path",
                  "0"
                ],
                [
                  "test_iodp_with_no_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                "1"
              ],
              [
                "test_iodp_with_one_file",
                "3"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "2"
              ],
              [
                "test_iodp_with_no_files",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "files",
                  "meas_df",
                  "dir_path",
                  "info"
                ]
              ],
              [
                "test_iodp_with_one_file",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df",
                  "dir_path"
                ]
              ],
              [
                "test_iodp_with_one_file_with_path",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "dir_path"
                ]
              ],
              [
                "test_iodp_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_files",
                []
              ],
              [
                "test_iodp_with_one_file",
                []
              ],
              [
                "test_iodp_with_one_file_with_path",
                []
              ],
              [
                "test_iodp_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.473697719316954,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_iodp_with_files",
                  "test_iodp_with_one_file",
                  0.5767011480530979
                ],
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_files",
                  0.18408247800222252
                ],
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_one_file_with_path",
                  0.37315837161716714
                ],
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_one_file",
                  0.3224746344626474
                ],
                [
                  "test_iodp_with_one_file",
                  "test_iodp_with_one_file_with_path",
                  0.8661003930790304
                ],
                [
                  "test_iodp_with_files",
                  "test_iodp_with_one_file_with_path",
                  0.5196692906875585
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_iodp_with_files",
                "true"
              ],
              [
                "test_iodp_with_one_file",
                "true"
              ],
              [
                "test_iodp_with_one_file_with_path",
                "true"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestIodpDscrMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_iodp_with_path",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_iodp_with_one_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_with_no_files",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_iodp_with_path",
                  "[]"
                ],
                [
                  "test_iodp_with_one_file",
                  "[]"
                ],
                [
                  "test_iodp_with_no_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_iodp_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_iodp_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_iodp_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_iodp_with_path",
                  "false"
                ],
                [
                  "test_iodp_with_one_file",
                  "false"
                ],
                [
                  "test_iodp_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                []
              ],
              [
                "test_iodp_with_one_file",
                []
              ],
              [
                "test_iodp_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_iodp_with_path",
                  "0"
                ],
                [
                  "test_iodp_with_one_file",
                  "0"
                ],
                [
                  "test_iodp_with_no_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_iodp_with_path",
                  "0"
                ],
                [
                  "test_iodp_with_one_file",
                  "0"
                ],
                [
                  "test_iodp_with_no_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                "false"
              ],
              [
                "test_iodp_with_one_file",
                "false"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                "3"
              ],
              [
                "test_iodp_with_one_file",
                "2"
              ],
              [
                "test_iodp_with_no_files",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df",
                  "dir_path"
                ]
              ],
              [
                "test_iodp_with_one_file",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "dir_path"
                ]
              ],
              [
                "test_iodp_with_no_files",
                [
                  "error_message",
                  "program_ran"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_with_path",
                []
              ],
              [
                "test_iodp_with_one_file",
                []
              ],
              [
                "test_iodp_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5041090494943489,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_iodp_with_one_file",
                  "test_iodp_with_path",
                  0.8849953577374194
                ],
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_one_file",
                  0.33086111132364343
                ],
                [
                  "test_iodp_with_no_files",
                  "test_iodp_with_path",
                  0.2964706794219839
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_iodp_with_path",
                "true"
              ],
              [
                "test_iodp_with_one_file",
                "true"
              ],
              [
                "test_iodp_with_no_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestIodpJr6Magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_iodp_jr6_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_iodp_jr6_with_options",
                  "[]"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "[]"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "[]"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "[]"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_iodp_jr6_with_options",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "false"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                []
              ],
              [
                "test_iodp_jr6_with_no_files",
                []
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                []
              ],
              [
                "test_iodp_jr6_with_magfile",
                []
              ],
              [
                "test_iodp_jr6_with_path",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_iodp_jr6_with_options",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_iodp_jr6_with_options",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "0"
                ],
                [
                  "test_iodp_jr6_with_path",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_path",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "2"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "1"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "2"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "3"
              ],
              [
                "test_iodp_jr6_with_path",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                [
                  "mag_file",
                  "program_ran",
                  "outfile",
                  "options",
                  "input_dir",
                  "meas_file"
                ]
              ],
              [
                "test_iodp_jr6_with_no_files",
                []
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                [
                  "error_message",
                  "expected_msg",
                  "program_ran",
                  "options"
                ]
              ],
              [
                "test_iodp_jr6_with_magfile",
                [
                  "mag_file",
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df",
                  "input_dir",
                  "meas_file"
                ]
              ],
              [
                "test_iodp_jr6_with_path",
                [
                  "mag_file",
                  "program_ran",
                  "outfile",
                  "options",
                  "input_dir",
                  "meas_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                []
              ],
              [
                "test_iodp_jr6_with_no_files",
                []
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                []
              ],
              [
                "test_iodp_jr6_with_magfile",
                []
              ],
              [
                "test_iodp_jr6_with_path",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5455663299996537,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_iodp_jr6_with_no_files",
                  "test_iodp_jr6_with_options",
                  0.2990284090483535
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "test_iodp_jr6_with_options",
                  0.5232997158346185
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "test_iodp_jr6_with_magfile",
                  0.5233867110360174
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "test_iodp_jr6_with_path",
                  0.8850910960208228
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "test_iodp_jr6_with_invalid_mag_file",
                  0.3499999999999999
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "test_iodp_jr6_with_magfile",
                  0.29248080910836266
                ],
                [
                  "test_iodp_jr6_with_invalid_mag_file",
                  "test_iodp_jr6_with_path",
                  0.5088218513147843
                ],
                [
                  "test_iodp_jr6_with_no_files",
                  "test_iodp_jr6_with_path",
                  0.30529311078887056
                ],
                [
                  "test_iodp_jr6_with_magfile",
                  "test_iodp_jr6_with_options",
                  0.8816824973760067
                ],
                [
                  "test_iodp_jr6_with_path",
                  "test_iodp_jr6_with_options",
                  0.8865790994687007
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_iodp_jr6_with_options",
                "false"
              ],
              [
                "test_iodp_jr6_with_no_files",
                "false"
              ],
              [
                "test_iodp_jr6_with_invalid_mag_file",
                "false"
              ],
              [
                "test_iodp_jr6_with_magfile",
                "false"
              ],
              [
                "test_iodp_jr6_with_path",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestIodpSamplesMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_right_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_with_wrong_format",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_content_with_right_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_data_model3",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_right_format",
                  "[]"
                ],
                [
                  "test_with_wrong_format",
                  "[]"
                ],
                [
                  "test_content_with_right_format",
                  "[]"
                ],
                [
                  "test_with_data_model3",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_right_format",
                  "false"
                ],
                [
                  "test_with_wrong_format",
                  "false"
                ],
                [
                  "test_content_with_right_format",
                  "false"
                ],
                [
                  "test_with_data_model3",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_right_format",
                  "false"
                ],
                [
                  "test_with_wrong_format",
                  "false"
                ],
                [
                  "test_content_with_right_format",
                  "false"
                ],
                [
                  "test_with_data_model3",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_right_format",
                  "false"
                ],
                [
                  "test_with_wrong_format",
                  "false"
                ],
                [
                  "test_content_with_right_format",
                  "false"
                ],
                [
                  "test_with_data_model3",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_right_format",
                  "false"
                ],
                [
                  "test_with_wrong_format",
                  "false"
                ],
                [
                  "test_content_with_right_format",
                  "false"
                ],
                [
                  "test_with_data_model3",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "false"
              ],
              [
                "test_with_wrong_format",
                "false"
              ],
              [
                "test_content_with_right_format",
                "false"
              ],
              [
                "test_with_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "false"
              ],
              [
                "test_with_wrong_format",
                "false"
              ],
              [
                "test_content_with_right_format",
                "false"
              ],
              [
                "test_with_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                []
              ],
              [
                "test_with_wrong_format",
                []
              ],
              [
                "test_content_with_right_format",
                []
              ],
              [
                "test_with_data_model3",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "false"
              ],
              [
                "test_with_wrong_format",
                "false"
              ],
              [
                "test_content_with_right_format",
                "false"
              ],
              [
                "test_with_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "false"
              ],
              [
                "test_with_wrong_format",
                "false"
              ],
              [
                "test_content_with_right_format",
                "false"
              ],
              [
                "test_with_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_right_format",
                  "0"
                ],
                [
                  "test_with_wrong_format",
                  "0"
                ],
                [
                  "test_content_with_right_format",
                  "0"
                ],
                [
                  "test_with_data_model3",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_right_format",
                  "0"
                ],
                [
                  "test_with_wrong_format",
                  "0"
                ],
                [
                  "test_content_with_right_format",
                  "0"
                ],
                [
                  "test_with_data_model3",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "false"
              ],
              [
                "test_with_wrong_format",
                "false"
              ],
              [
                "test_content_with_right_format",
                "false"
              ],
              [
                "test_with_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "false"
              ],
              [
                "test_with_wrong_format",
                "false"
              ],
              [
                "test_content_with_right_format",
                "false"
              ],
              [
                "test_with_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "3"
              ],
              [
                "test_with_wrong_format",
                "2"
              ],
              [
                "test_content_with_right_format",
                "2"
              ],
              [
                "test_with_data_model3",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                [
                  "expected_file",
                  "program_ran",
                  "outfile",
                  "reference_file",
                  "infile"
                ]
              ],
              [
                "test_with_wrong_format",
                [
                  "error_message",
                  "program_ran",
                  "infile",
                  "expected_error"
                ]
              ],
              [
                "test_content_with_right_format",
                [
                  "program_ran",
                  "out_lines",
                  "outfile",
                  "ref_lines",
                  "reference_file",
                  "infile"
                ]
              ],
              [
                "test_with_data_model3",
                [
                  "program_ran",
                  "outfile",
                  "infile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_wrong_format",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_content_with_right_format",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_data_model3",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6434281859181168,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_wrong_format",
                  "test_content_with_right_format",
                  0.4802704506241897
                ],
                [
                  "test_with_right_format",
                  "test_with_data_model3",
                  0.7825659588309478
                ],
                [
                  "test_content_with_right_format",
                  "test_with_data_model3",
                  0.6599120175960899
                ],
                [
                  "test_with_wrong_format",
                  "test_with_data_model3",
                  0.588875363339635
                ],
                [
                  "test_with_wrong_format",
                  "test_with_right_format",
                  0.5991015263066612
                ],
                [
                  "test_with_right_format",
                  "test_content_with_right_format",
                  0.749843798811177
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_right_format",
                "false"
              ],
              [
                "test_with_wrong_format",
                "false"
              ],
              [
                "test_content_with_right_format",
                "false"
              ],
              [
                "test_with_data_model3",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestIodpSamplesCsv",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "outfile",
                  "comp_depth_key",
                  "samp_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "self.dir_path",
                  "self.hole_lat",
                  "self.hole_lon"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestIodpSrmLore",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "srm_archive_dir",
                  "res",
                  "outfile",
                  "comp_depth_key",
                  "files",
                  "srm_archive_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "self.dir_path",
                  "self.hole_lat",
                  "self.hole_lon"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestIodpDscrLore",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                [
                  "self.hole_lat",
                  "self.hole_lon"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "srm_discrete_file",
                  "srm_discrete_dir",
                  "outfile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "self.dir_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestIodpJr6Lore",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                [
                  "self.hole_lat",
                  "self.hole_lon"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "outfile",
                  "jr6_dir",
                  "jr6_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "self.dir_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestIodpKly4sLore",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                [
                  "self.hole_lat",
                  "self.hole_lon"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "outfile",
                  "kly4s_dir",
                  "kly4s_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "self.dir_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestJr6TxtMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ],
              [
                "test_with_options",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "output",
                  "input_dir"
                ]
              ],
              [
                "test_with_options",
                [
                  "output",
                  "site_df",
                  "options",
                  "input_dir"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8022295326806644,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_with_options",
                  0.8022295326806644
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestJr6Jr6Magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ],
              [
                "test_with_options",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "output",
                  "input_dir"
                ]
              ],
              [
                "test_with_options",
                [
                  "output",
                  "site_df",
                  "options",
                  "input_dir"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7951313909311457,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_with_options",
                  0.7951313909311457
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestKly4sMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_kly4s_without_infile",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kly4s_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kly4s_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_kly4s_without_infile",
                  "[]"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "[]"
                ],
                [
                  "test_kly4s_fail_option4",
                  "[]"
                ],
                [
                  "test_kly4s_with_options",
                  "[]"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "[]"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "[]"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_kly4s_without_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "false"
                ],
                [
                  "test_kly4s_fail_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_options",
                  "false"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_kly4s_without_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "false"
                ],
                [
                  "test_kly4s_fail_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_options",
                  "false"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_kly4s_without_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "false"
                ],
                [
                  "test_kly4s_fail_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_options",
                  "false"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_kly4s_without_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "false"
                ],
                [
                  "test_kly4s_fail_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_options",
                  "false"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "false"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "false"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "false"
              ],
              [
                "test_kly4s_fail_option4",
                "false"
              ],
              [
                "test_kly4s_with_options",
                "false"
              ],
              [
                "test_kly4s_succeed_option4",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "false"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "false"
              ],
              [
                "test_kly4s_fail_option4",
                "false"
              ],
              [
                "test_kly4s_with_options",
                "false"
              ],
              [
                "test_kly4s_succeed_option4",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                []
              ],
              [
                "test_kly4s_with_invalid_infile",
                []
              ],
              [
                "test_kly4s_fail_option4",
                []
              ],
              [
                "test_kly4s_with_options",
                []
              ],
              [
                "test_kly4s_succeed_option4",
                []
              ],
              [
                "test_kly4s_with_valid_infile",
                []
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "false"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "false"
              ],
              [
                "test_kly4s_fail_option4",
                "false"
              ],
              [
                "test_kly4s_with_options",
                "false"
              ],
              [
                "test_kly4s_succeed_option4",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "false"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "false"
              ],
              [
                "test_kly4s_fail_option4",
                "false"
              ],
              [
                "test_kly4s_with_options",
                "false"
              ],
              [
                "test_kly4s_succeed_option4",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_kly4s_without_infile",
                  "0"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "0"
                ],
                [
                  "test_kly4s_fail_option4",
                  "0"
                ],
                [
                  "test_kly4s_with_options",
                  "0"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "0"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "0"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_kly4s_without_infile",
                  "0"
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "0"
                ],
                [
                  "test_kly4s_fail_option4",
                  "0"
                ],
                [
                  "test_kly4s_with_options",
                  "0"
                ],
                [
                  "test_kly4s_succeed_option4",
                  "0"
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "0"
                ],
                [
                  "test_kly4s_with_valid_infile_data_model3",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "false"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "false"
              ],
              [
                "test_kly4s_fail_option4",
                "false"
              ],
              [
                "test_kly4s_with_options",
                "false"
              ],
              [
                "test_kly4s_succeed_option4",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "false"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "false"
              ],
              [
                "test_kly4s_fail_option4",
                "false"
              ],
              [
                "test_kly4s_with_options",
                "false"
              ],
              [
                "test_kly4s_succeed_option4",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "1"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "2"
              ],
              [
                "test_kly4s_fail_option4",
                "2"
              ],
              [
                "test_kly4s_with_options",
                "3"
              ],
              [
                "test_kly4s_succeed_option4",
                "3"
              ],
              [
                "test_kly4s_with_valid_infile",
                "2"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                []
              ],
              [
                "test_kly4s_with_invalid_infile",
                [
                  "error_message",
                  "expected_file",
                  "program_ran"
                ]
              ],
              [
                "test_kly4s_fail_option4",
                [
                  "error_message",
                  "in_dir",
                  "program_ran"
                ]
              ],
              [
                "test_kly4s_with_options",
                [
                  "in_dir",
                  "program_ran",
                  "outfile"
                ]
              ],
              [
                "test_kly4s_succeed_option4",
                [
                  "in_dir",
                  "program_ran",
                  "outfile"
                ]
              ],
              [
                "test_kly4s_with_valid_infile",
                [
                  "in_dir",
                  "program_ran",
                  "outfile"
                ]
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                [
                  "con",
                  "in_dir",
                  "program_ran",
                  "outfile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                []
              ],
              [
                "test_kly4s_with_invalid_infile",
                []
              ],
              [
                "test_kly4s_fail_option4",
                []
              ],
              [
                "test_kly4s_with_options",
                []
              ],
              [
                "test_kly4s_succeed_option4",
                []
              ],
              [
                "test_kly4s_with_valid_infile",
                []
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5554010488286814,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_kly4s_without_infile",
                  "test_kly4s_with_valid_infile",
                  0.36313651960128146
                ],
                [
                  "test_kly4s_succeed_option4",
                  "test_kly4s_with_options",
                  0.8063242090863515
                ],
                [
                  "test_kly4s_with_options",
                  "test_kly4s_with_valid_infile_data_model3",
                  0.7207177261468983
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "test_kly4s_succeed_option4",
                  0.33691766577832266
                ],
                [
                  "test_kly4s_without_infile",
                  "test_kly4s_succeed_option4",
                  0.29773257907842177
                ],
                [
                  "test_kly4s_succeed_option4",
                  "test_kly4s_with_valid_infile_data_model3",
                  0.796528046486093
                ],
                [
                  "test_kly4s_without_infile",
                  "test_kly4s_with_invalid_infile",
                  0.41036467732879794
                ],
                [
                  "test_kly4s_without_infile",
                  "test_kly4s_fail_option4",
                  0.2609090251427747
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "test_kly4s_with_options",
                  0.8263730490678829
                ],
                [
                  "test_kly4s_fail_option4",
                  "test_kly4s_with_options",
                  0.6881970707061186
                ],
                [
                  "test_kly4s_without_infile",
                  "test_kly4s_with_valid_infile_data_model3",
                  0.2939905160189274
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "test_kly4s_with_valid_infile",
                  0.376685401750442
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "test_kly4s_with_options",
                  0.3112826639838732
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "test_kly4s_with_valid_infile_data_model3",
                  0.8674143788610469
                ],
                [
                  "test_kly4s_fail_option4",
                  "test_kly4s_succeed_option4",
                  0.8078836163901888
                ],
                [
                  "test_kly4s_without_infile",
                  "test_kly4s_with_options",
                  0.2864459496157732
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "test_kly4s_with_valid_infile_data_model3",
                  0.33109889823585537
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "test_kly4s_fail_option4",
                  0.8006002804785931
                ],
                [
                  "test_kly4s_fail_option4",
                  "test_kly4s_with_valid_infile_data_model3",
                  0.7678148371465535
                ],
                [
                  "test_kly4s_with_invalid_infile",
                  "test_kly4s_fail_option4",
                  0.38663389524819924
                ],
                [
                  "test_kly4s_with_valid_infile",
                  "test_kly4s_succeed_option4",
                  0.9263710192499129
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_kly4s_without_infile",
                "false"
              ],
              [
                "test_kly4s_with_invalid_infile",
                "false"
              ],
              [
                "test_kly4s_fail_option4",
                "false"
              ],
              [
                "test_kly4s_with_options",
                "false"
              ],
              [
                "test_kly4s_succeed_option4",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile",
                "false"
              ],
              [
                "test_kly4s_with_valid_infile_data_model3",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "TestK15Magic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_k15_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_k15_with_files",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_k15_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_data_model3",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_k15_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_k15_succeed_option4",
                  "[]"
                ],
                [
                  "test_k15_with_files",
                  "[]"
                ],
                [
                  "test_k15_with_options",
                  "[]"
                ],
                [
                  "test_data_model3",
                  "[]"
                ],
                [
                  "test_k15_fail_option4",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_k15_succeed_option4",
                  "false"
                ],
                [
                  "test_k15_with_files",
                  "false"
                ],
                [
                  "test_k15_with_options",
                  "false"
                ],
                [
                  "test_data_model3",
                  "false"
                ],
                [
                  "test_k15_fail_option4",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_k15_succeed_option4",
                  "false"
                ],
                [
                  "test_k15_with_files",
                  "false"
                ],
                [
                  "test_k15_with_options",
                  "false"
                ],
                [
                  "test_data_model3",
                  "false"
                ],
                [
                  "test_k15_fail_option4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_k15_succeed_option4",
                  "false"
                ],
                [
                  "test_k15_with_files",
                  "false"
                ],
                [
                  "test_k15_with_options",
                  "false"
                ],
                [
                  "test_data_model3",
                  "false"
                ],
                [
                  "test_k15_fail_option4",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_k15_succeed_option4",
                  "false"
                ],
                [
                  "test_k15_with_files",
                  "false"
                ],
                [
                  "test_k15_with_options",
                  "false"
                ],
                [
                  "test_data_model3",
                  "false"
                ],
                [
                  "test_k15_fail_option4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "false"
              ],
              [
                "test_k15_with_files",
                "false"
              ],
              [
                "test_k15_with_options",
                "false"
              ],
              [
                "test_data_model3",
                "false"
              ],
              [
                "test_k15_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "false"
              ],
              [
                "test_k15_with_files",
                "false"
              ],
              [
                "test_k15_with_options",
                "false"
              ],
              [
                "test_data_model3",
                "false"
              ],
              [
                "test_k15_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                []
              ],
              [
                "test_k15_with_files",
                []
              ],
              [
                "test_k15_with_options",
                []
              ],
              [
                "test_data_model3",
                []
              ],
              [
                "test_k15_fail_option4",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "false"
              ],
              [
                "test_k15_with_files",
                "false"
              ],
              [
                "test_k15_with_options",
                "false"
              ],
              [
                "test_data_model3",
                "false"
              ],
              [
                "test_k15_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "false"
              ],
              [
                "test_k15_with_files",
                "false"
              ],
              [
                "test_k15_with_options",
                "false"
              ],
              [
                "test_data_model3",
                "false"
              ],
              [
                "test_k15_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_k15_succeed_option4",
                  "0"
                ],
                [
                  "test_k15_with_files",
                  "0"
                ],
                [
                  "test_k15_with_options",
                  "0"
                ],
                [
                  "test_data_model3",
                  "0"
                ],
                [
                  "test_k15_fail_option4",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_k15_succeed_option4",
                  "0"
                ],
                [
                  "test_k15_with_files",
                  "0"
                ],
                [
                  "test_k15_with_options",
                  "0"
                ],
                [
                  "test_data_model3",
                  "0"
                ],
                [
                  "test_k15_fail_option4",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "false"
              ],
              [
                "test_k15_with_files",
                "false"
              ],
              [
                "test_k15_with_options",
                "false"
              ],
              [
                "test_data_model3",
                "false"
              ],
              [
                "test_k15_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "false"
              ],
              [
                "test_k15_with_files",
                "false"
              ],
              [
                "test_k15_with_options",
                "false"
              ],
              [
                "test_data_model3",
                "false"
              ],
              [
                "test_k15_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "2"
              ],
              [
                "test_k15_with_files",
                "2"
              ],
              [
                "test_k15_with_options",
                "2"
              ],
              [
                "test_data_model3",
                "2"
              ],
              [
                "test_k15_fail_option4",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                [
                  "program_ran",
                  "outfile",
                  "input_dir"
                ]
              ],
              [
                "test_k15_with_files",
                [
                  "program_ran",
                  "outfile",
                  "input_dir"
                ]
              ],
              [
                "test_k15_with_options",
                [
                  "program_ran",
                  "outfile",
                  "input_dir"
                ]
              ],
              [
                "test_data_model3",
                [
                  "program_ran",
                  "outfile",
                  "input_dir"
                ]
              ],
              [
                "test_k15_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "input_dir"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                []
              ],
              [
                "test_k15_with_files",
                []
              ],
              [
                "test_k15_with_options",
                []
              ],
              [
                "test_data_model3",
                []
              ],
              [
                "test_k15_fail_option4",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8123694417170138,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_k15_fail_option4",
                  "test_k15_succeed_option4",
                  0.8570588852732319
                ],
                [
                  "test_k15_with_options",
                  "test_data_model3",
                  0.7460588271610393
                ],
                [
                  "test_k15_with_files",
                  "test_data_model3",
                  0.8806831264179623
                ],
                [
                  "test_k15_with_files",
                  "test_k15_succeed_option4",
                  0.9061503567266267
                ],
                [
                  "test_k15_succeed_option4",
                  "test_k15_with_options",
                  0.7969557368255786
                ],
                [
                  "test_k15_succeed_option4",
                  "test_data_model3",
                  0.8605113939535762
                ],
                [
                  "test_k15_with_files",
                  "test_k15_fail_option4",
                  0.8154053390343309
                ],
                [
                  "test_k15_with_files",
                  "test_k15_with_options",
                  0.7838388874898484
                ],
                [
                  "test_k15_fail_option4",
                  "test_k15_with_options",
                  0.7034167010403843
                ],
                [
                  "test_k15_fail_option4",
                  "test_data_model3",
                  0.7736151632475582
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_k15_succeed_option4",
                "false"
              ],
              [
                "test_k15_with_files",
                "false"
              ],
              [
                "test_k15_with_options",
                "false"
              ],
              [
                "test_data_model3",
                "false"
              ],
              [
                "test_k15_fail_option4",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestLdeoMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ldeo_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ldeo_with_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_ldeo_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ldeo_options",
                  "[]"
                ],
                [
                  "test_ldeo_with_no_files",
                  "[]"
                ],
                [
                  "test_ldeo_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ldeo_options",
                  "false"
                ],
                [
                  "test_ldeo_with_no_files",
                  "false"
                ],
                [
                  "test_ldeo_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ldeo_options",
                  "false"
                ],
                [
                  "test_ldeo_with_no_files",
                  "false"
                ],
                [
                  "test_ldeo_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ldeo_options",
                  "false"
                ],
                [
                  "test_ldeo_with_no_files",
                  "false"
                ],
                [
                  "test_ldeo_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ldeo_options",
                  "false"
                ],
                [
                  "test_ldeo_with_no_files",
                  "false"
                ],
                [
                  "test_ldeo_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "false"
              ],
              [
                "test_ldeo_with_no_files",
                "false"
              ],
              [
                "test_ldeo_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "false"
              ],
              [
                "test_ldeo_with_no_files",
                "false"
              ],
              [
                "test_ldeo_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_ldeo_options",
                []
              ],
              [
                "test_ldeo_with_no_files",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_ldeo_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "false"
              ],
              [
                "test_ldeo_with_no_files",
                "false"
              ],
              [
                "test_ldeo_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "false"
              ],
              [
                "test_ldeo_with_no_files",
                "false"
              ],
              [
                "test_ldeo_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ldeo_options",
                  "0"
                ],
                [
                  "test_ldeo_with_no_files",
                  "0"
                ],
                [
                  "test_ldeo_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ldeo_options",
                  "0"
                ],
                [
                  "test_ldeo_with_no_files",
                  "0"
                ],
                [
                  "test_ldeo_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "false"
              ],
              [
                "test_ldeo_with_no_files",
                "false"
              ],
              [
                "test_ldeo_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "false"
              ],
              [
                "test_ldeo_with_no_files",
                "false"
              ],
              [
                "test_ldeo_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "2"
              ],
              [
                "test_ldeo_with_no_files",
                "1"
              ],
              [
                "test_ldeo_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_ldeo_with_no_files",
                []
              ],
              [
                "test_ldeo_success",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_ldeo_options",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_ldeo_with_no_files",
                []
              ],
              [
                "test_ldeo_success",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2583376735933646,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ldeo_with_no_files",
                  "test_ldeo_options",
                  0.09243423333081695
                ],
                [
                  "test_ldeo_with_no_files",
                  "test_ldeo_success",
                  0.21622499104693416
                ],
                [
                  "test_ldeo_success",
                  "test_ldeo_options",
                  0.46635379640234276
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ldeo_options",
                "false"
              ],
              [
                "test_ldeo_with_no_files",
                "false"
              ],
              [
                "test_ldeo_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestLivdbMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_livdb_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_naming_con_2",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_naming_con_3",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_livdb_success",
                  "[]"
                ],
                [
                  "test_naming_con_2",
                  "[]"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "[]"
                ],
                [
                  "test_naming_con_3",
                  "[]"
                ],
                [
                  "test_with_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_livdb_success",
                  "false"
                ],
                [
                  "test_naming_con_2",
                  "false"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "true"
                ],
                [
                  "test_naming_con_3",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_livdb_success",
                  "false"
                ],
                [
                  "test_naming_con_2",
                  "false"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "false"
                ],
                [
                  "test_naming_con_3",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_livdb_success",
                  "false"
                ],
                [
                  "test_naming_con_2",
                  "false"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "false"
                ],
                [
                  "test_naming_con_3",
                  "false"
                ],
                [
                  "test_with_options",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_livdb_success",
                  "false"
                ],
                [
                  "test_naming_con_2",
                  "false"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "false"
                ],
                [
                  "test_naming_con_3",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "false"
              ],
              [
                "test_naming_con_2",
                "false"
              ],
              [
                "test_livdb_all_experiment_types",
                "false"
              ],
              [
                "test_naming_con_3",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "false"
              ],
              [
                "test_naming_con_2",
                "false"
              ],
              [
                "test_livdb_all_experiment_types",
                "false"
              ],
              [
                "test_naming_con_3",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                []
              ],
              [
                "test_naming_con_2",
                []
              ],
              [
                "test_livdb_all_experiment_types",
                []
              ],
              [
                "test_naming_con_3",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "false"
              ],
              [
                "test_naming_con_2",
                "false"
              ],
              [
                "test_livdb_all_experiment_types",
                "false"
              ],
              [
                "test_naming_con_3",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "false"
              ],
              [
                "test_naming_con_2",
                "false"
              ],
              [
                "test_livdb_all_experiment_types",
                "false"
              ],
              [
                "test_naming_con_3",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_livdb_success",
                  "0"
                ],
                [
                  "test_naming_con_2",
                  "0"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "0"
                ],
                [
                  "test_naming_con_3",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_livdb_success",
                  "0"
                ],
                [
                  "test_naming_con_2",
                  "0"
                ],
                [
                  "test_livdb_all_experiment_types",
                  "0"
                ],
                [
                  "test_naming_con_3",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "false"
              ],
              [
                "test_naming_con_2",
                "false"
              ],
              [
                "test_livdb_all_experiment_types",
                "false"
              ],
              [
                "test_naming_con_3",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "false"
              ],
              [
                "test_naming_con_2",
                "false"
              ],
              [
                "test_livdb_all_experiment_types",
                "false"
              ],
              [
                "test_naming_con_3",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "2"
              ],
              [
                "test_naming_con_2",
                "3"
              ],
              [
                "test_livdb_all_experiment_types",
                "2"
              ],
              [
                "test_naming_con_3",
                "4"
              ],
              [
                "test_with_options",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                [
                  "res",
                  "meas_file"
                ]
              ],
              [
                "test_naming_con_2",
                [
                  "res",
                  "df",
                  "meas_file"
                ]
              ],
              [
                "test_livdb_all_experiment_types",
                [
                  "res",
                  "meas_file"
                ]
              ],
              [
                "test_naming_con_3",
                [
                  "res",
                  "df",
                  "meas_file"
                ]
              ],
              [
                "test_with_options",
                [
                  "res",
                  "df",
                  "meas_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_naming_con_2",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_livdb_all_experiment_types",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_naming_con_3",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_options",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6272844755892983,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_livdb_success",
                  "test_with_options",
                  0.5197475584915785
                ],
                [
                  "test_livdb_success",
                  "test_naming_con_2",
                  0.579365459502321
                ],
                [
                  "test_livdb_success",
                  "test_livdb_all_experiment_types",
                  0.6101792298525177
                ],
                [
                  "test_with_options",
                  "test_naming_con_2",
                  0.8983526194345371
                ],
                [
                  "test_livdb_all_experiment_types",
                  "test_naming_con_2",
                  0.46808238975153255
                ],
                [
                  "test_livdb_all_experiment_types",
                  "test_naming_con_3",
                  0.4396532345582502
                ],
                [
                  "test_livdb_success",
                  "test_naming_con_3",
                  0.5382625136761547
                ],
                [
                  "test_livdb_all_experiment_types",
                  "test_with_options",
                  0.512121021932368
                ],
                [
                  "test_with_options",
                  "test_naming_con_3",
                  0.8392818819321638
                ],
                [
                  "test_naming_con_2",
                  "test_naming_con_3",
                  0.867798846761559
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_livdb_success",
                "false"
              ],
              [
                "test_naming_con_2",
                "false"
              ],
              [
                "test_livdb_all_experiment_types",
                "false"
              ],
              [
                "test_naming_con_3",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestMstMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_mst_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_mst_synthetic",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_mst_with_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_mst_success",
                  "[]"
                ],
                [
                  "test_mst_synthetic",
                  "[]"
                ],
                [
                  "test_mst_with_no_files",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_mst_success",
                  "true"
                ],
                [
                  "test_mst_synthetic",
                  "false"
                ],
                [
                  "test_mst_with_no_files",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_mst_success",
                  "false"
                ],
                [
                  "test_mst_synthetic",
                  "false"
                ],
                [
                  "test_mst_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_mst_success",
                  "false"
                ],
                [
                  "test_mst_synthetic",
                  "false"
                ],
                [
                  "test_mst_with_no_files",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_mst_success",
                  "false"
                ],
                [
                  "test_mst_synthetic",
                  "false"
                ],
                [
                  "test_mst_with_no_files",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "false"
              ],
              [
                "test_mst_synthetic",
                "false"
              ],
              [
                "test_mst_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "false"
              ],
              [
                "test_mst_synthetic",
                "false"
              ],
              [
                "test_mst_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_mst_success",
                []
              ],
              [
                "test_mst_synthetic",
                []
              ],
              [
                "test_mst_with_no_files",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "false"
              ],
              [
                "test_mst_synthetic",
                "false"
              ],
              [
                "test_mst_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "false"
              ],
              [
                "test_mst_synthetic",
                "false"
              ],
              [
                "test_mst_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_mst_success",
                  "0"
                ],
                [
                  "test_mst_synthetic",
                  "0"
                ],
                [
                  "test_mst_with_no_files",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_mst_success",
                  "0"
                ],
                [
                  "test_mst_synthetic",
                  "0"
                ],
                [
                  "test_mst_with_no_files",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "false"
              ],
              [
                "test_mst_synthetic",
                "false"
              ],
              [
                "test_mst_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "false"
              ],
              [
                "test_mst_synthetic",
                "false"
              ],
              [
                "test_mst_with_no_files",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "5"
              ],
              [
                "test_mst_synthetic",
                "2"
              ],
              [
                "test_mst_with_no_files",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                [
                  "con",
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df"
                ]
              ],
              [
                "test_mst_synthetic",
                [
                  "program_ran",
                  "outfile",
                  "options"
                ]
              ],
              [
                "test_mst_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_mst_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_mst_synthetic",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_mst_with_no_files",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.38516689494400963,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_mst_with_no_files",
                  "test_mst_success",
                  0.19518001458970666
                ],
                [
                  "test_mst_with_no_files",
                  "test_mst_synthetic",
                  0.19090088708030314
                ],
                [
                  "test_mst_success",
                  "test_mst_synthetic",
                  0.7694197831620191
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_mst_success",
                "false"
              ],
              [
                "test_mst_synthetic",
                "false"
              ],
              [
                "test_mst_with_no_files",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestMiniMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_dm_2",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bad_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_dm_2",
                  "[]"
                ],
                [
                  "test_options",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_bad_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_dm_2",
                  "false"
                ],
                [
                  "test_options",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_bad_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_dm_2",
                  "false"
                ],
                [
                  "test_options",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_bad_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_dm_2",
                  "false"
                ],
                [
                  "test_options",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_bad_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_dm_2",
                  "false"
                ],
                [
                  "test_options",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_bad_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "false"
              ],
              [
                "test_options",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_bad_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "false"
              ],
              [
                "test_options",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_bad_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_dm_2",
                []
              ],
              [
                "test_options",
                []
              ],
              [
                "test_success",
                []
              ],
              [
                "test_bad_file",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "false"
              ],
              [
                "test_options",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_bad_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "false"
              ],
              [
                "test_options",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_bad_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_dm_2",
                  "0"
                ],
                [
                  "test_options",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_bad_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_dm_2",
                  "0"
                ],
                [
                  "test_options",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_bad_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "false"
              ],
              [
                "test_options",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_bad_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "false"
              ],
              [
                "test_options",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_bad_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "2"
              ],
              [
                "test_options",
                "2"
              ],
              [
                "test_success",
                "2"
              ],
              [
                "test_bad_file",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                [
                  "program_ran",
                  "magfile",
                  "outfile"
                ]
              ],
              [
                "test_options",
                [
                  "program_ran",
                  "magfile",
                  "outfile"
                ]
              ],
              [
                "test_success",
                [
                  "program_ran",
                  "magfile",
                  "outfile"
                ]
              ],
              [
                "test_bad_file",
                [
                  "program_ran",
                  "error"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_dm_2",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_options",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_bad_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5856952107087057,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_dm_2",
                  0.680009255387445
                ],
                [
                  "test_bad_file",
                  "test_success",
                  0.47075654176200427
                ],
                [
                  "test_options",
                  "test_dm_2",
                  0.8804087784801333
                ],
                [
                  "test_success",
                  "test_options",
                  0.7317274774221446
                ],
                [
                  "test_bad_file",
                  "test_options",
                  0.38939577897263383
                ],
                [
                  "test_bad_file",
                  "test_dm_2",
                  0.361873432227873
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_dm_2",
                "false"
              ],
              [
                "test_options",
                "false"
              ],
              [
                "test_success",
                "false"
              ],
              [
                "test_bad_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestPmdMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_pmd_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_pmd_with_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_pmd_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_pmd_success",
                  "[]"
                ],
                [
                  "test_pmd_with_no_files",
                  "[]"
                ],
                [
                  "test_pmd_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_pmd_success",
                  "false"
                ],
                [
                  "test_pmd_with_no_files",
                  "false"
                ],
                [
                  "test_pmd_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_pmd_success",
                  "false"
                ],
                [
                  "test_pmd_with_no_files",
                  "false"
                ],
                [
                  "test_pmd_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_pmd_success",
                  "false"
                ],
                [
                  "test_pmd_with_no_files",
                  "false"
                ],
                [
                  "test_pmd_options",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_pmd_success",
                  "false"
                ],
                [
                  "test_pmd_with_no_files",
                  "false"
                ],
                [
                  "test_pmd_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "false"
              ],
              [
                "test_pmd_with_no_files",
                "false"
              ],
              [
                "test_pmd_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "false"
              ],
              [
                "test_pmd_with_no_files",
                "false"
              ],
              [
                "test_pmd_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_pmd_success",
                []
              ],
              [
                "test_pmd_with_no_files",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_pmd_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "false"
              ],
              [
                "test_pmd_with_no_files",
                "false"
              ],
              [
                "test_pmd_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "false"
              ],
              [
                "test_pmd_with_no_files",
                "false"
              ],
              [
                "test_pmd_options",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_pmd_success",
                  "0"
                ],
                [
                  "test_pmd_with_no_files",
                  "0"
                ],
                [
                  "test_pmd_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_pmd_success",
                  "0"
                ],
                [
                  "test_pmd_with_no_files",
                  "0"
                ],
                [
                  "test_pmd_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "false"
              ],
              [
                "test_pmd_with_no_files",
                "false"
              ],
              [
                "test_pmd_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "false"
              ],
              [
                "test_pmd_with_no_files",
                "false"
              ],
              [
                "test_pmd_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "3"
              ],
              [
                "test_pmd_with_no_files",
                "1"
              ],
              [
                "test_pmd_options",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df"
                ]
              ],
              [
                "test_pmd_with_no_files",
                []
              ],
              [
                "test_pmd_options",
                [
                  "program_ran",
                  "outfile",
                  "loc_df",
                  "options"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_pmd_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_pmd_with_no_files",
                []
              ],
              [
                "test_pmd_options",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.34505478229450753,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_pmd_with_no_files",
                  "test_pmd_success",
                  0.2202669294643057
                ],
                [
                  "test_pmd_with_no_files",
                  "test_pmd_options",
                  0.13852712896188304
                ],
                [
                  "test_pmd_success",
                  "test_pmd_options",
                  0.6763702884573338
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_pmd_success",
                "false"
              ],
              [
                "test_pmd_with_no_files",
                "false"
              ],
              [
                "test_pmd_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestSioMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_sio_magic_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sio_magic_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_sio_magic_success",
                  "[]"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "[]"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "[]"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "[]"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "[]"
                ],
                [
                  "test_sio_magic_no_files",
                  "[]"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_sio_magic_success",
                  "false"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "false"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "false"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "false"
                ],
                [
                  "test_sio_magic_no_files",
                  "false"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_success_with_wd",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_success_with_wd",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                []
              ],
              [
                "test_sio_magic_fail_with_coil",
                []
              ],
              [
                "test_sio_magic_succeed_with_coil",
                []
              ],
              [
                "test_sio_magic_succeed_option4",
                []
              ],
              [
                "test_sio_magic_success_with_wd",
                []
              ],
              [
                "test_sio_magic_no_files",
                []
              ],
              [
                "test_sio_magic_fail_option4",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_success_with_wd",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_sio_magic_success",
                "true"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_success_with_wd",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_sio_magic_success",
                  "0"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "0"
                ],
                [
                  "test_sio_magic_no_files",
                  "0"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_sio_magic_success",
                  "0"
                ],
                [
                  "test_sio_magic_fail_with_coil",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_with_coil",
                  "0"
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "0"
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "0"
                ],
                [
                  "test_sio_magic_no_files",
                  "0"
                ],
                [
                  "test_sio_magic_fail_option4",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_success_with_wd",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_success_with_wd",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_fail_option4",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                "4"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "2"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "2"
              ],
              [
                "test_sio_magic_succeed_option4",
                "2"
              ],
              [
                "test_sio_magic_success_with_wd",
                "2"
              ],
              [
                "test_sio_magic_no_files",
                "1"
              ],
              [
                "test_sio_magic_fail_option4",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                [
                  "program_ran",
                  "file_name",
                  "options",
                  "meas_df",
                  "dir_path"
                ]
              ],
              [
                "test_sio_magic_fail_with_coil",
                [
                  "error_message",
                  "program_ran",
                  "options",
                  "meas_file"
                ]
              ],
              [
                "test_sio_magic_succeed_with_coil",
                [
                  "program_ran",
                  "file_name",
                  "options",
                  "meas_file"
                ]
              ],
              [
                "test_sio_magic_succeed_option4",
                [
                  "program_ran",
                  "file_name",
                  "options",
                  "meas_file"
                ]
              ],
              [
                "test_sio_magic_success_with_wd",
                [
                  "program_ran",
                  "file_name",
                  "options",
                  "dir_path"
                ]
              ],
              [
                "test_sio_magic_no_files",
                []
              ],
              [
                "test_sio_magic_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "options",
                  "meas_file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                []
              ],
              [
                "test_sio_magic_fail_with_coil",
                []
              ],
              [
                "test_sio_magic_succeed_with_coil",
                []
              ],
              [
                "test_sio_magic_succeed_option4",
                []
              ],
              [
                "test_sio_magic_success_with_wd",
                []
              ],
              [
                "test_sio_magic_no_files",
                []
              ],
              [
                "test_sio_magic_fail_option4",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6099213539300273,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_sio_magic_fail_with_coil",
                  "test_sio_magic_succeed_with_coil",
                  0.916354217527953
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_fail_with_coil",
                  0.6860232117781695
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "test_sio_magic_fail_with_coil",
                  0.6727706301969602
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "test_sio_magic_succeed_with_coil",
                  0.7014182615527995
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_fail_with_coil",
                  0.14777011582226218
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "test_sio_magic_succeed_option4",
                  0.6928640603037554
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_succeed_with_coil",
                  0.15925551431765156
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "test_sio_magic_fail_with_coil",
                  0.8937928518215315
                ],
                [
                  "test_sio_magic_success_with_wd",
                  "test_sio_magic_fail_option4",
                  0.65
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_success_with_wd",
                  0.7832032988997221
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_fail_option4",
                  0.12371791482634838
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_succeed_option4",
                  0.7370277311900888
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_success_with_wd",
                  0.20207259421636903
                ],
                [
                  "test_sio_magic_fail_option4",
                  "test_sio_magic_succeed_option4",
                  0.9063951992737732
                ],
                [
                  "test_sio_magic_fail_option4",
                  "test_sio_magic_succeed_with_coil",
                  0.8781801669521406
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_success",
                  0.223606797749979
                ],
                [
                  "test_sio_magic_fail_option4",
                  "test_sio_magic_fail_with_coil",
                  0.9140905301589132
                ],
                [
                  "test_sio_magic_no_files",
                  "test_sio_magic_succeed_option4",
                  0.13483997249264842
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_fail_option4",
                  0.6700875948200133
                ],
                [
                  "test_sio_magic_succeed_option4",
                  "test_sio_magic_succeed_with_coil",
                  0.9755335594323596
                ],
                [
                  "test_sio_magic_success",
                  "test_sio_magic_succeed_with_coil",
                  0.7393442091971356
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_sio_magic_success",
                "false"
              ],
              [
                "test_sio_magic_fail_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_with_coil",
                "false"
              ],
              [
                "test_sio_magic_succeed_option4",
                "false"
              ],
              [
                "test_sio_magic_success_with_wd",
                "false"
              ],
              [
                "test_sio_magic_no_files",
                "false"
              ],
              [
                "test_sio_magic_fail_option4",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "TestSMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_invalid_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_invalid_file",
                  "[]"
                ],
                [
                  "test_with_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_invalid_file",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_invalid_file",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_invalid_file",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_invalid_file",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_invalid_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_invalid_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_invalid_file",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_invalid_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_invalid_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_invalid_file",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_invalid_file",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_invalid_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_invalid_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ],
              [
                "test_with_invalid_file",
                "2"
              ],
              [
                "test_with_options",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "outfile"
                ]
              ],
              [
                "test_with_invalid_file",
                [
                  "res",
                  "expected_file",
                  "error_msg"
                ]
              ],
              [
                "test_with_options",
                [
                  "res",
                  "con",
                  "outfile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_invalid_file",
                []
              ],
              [
                "test_with_options",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5036197237391141,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_invalid_file",
                  "test_success",
                  0.3768891807222045
                ],
                [
                  "test_with_invalid_file",
                  "test_with_options",
                  0.3904475948502235
                ],
                [
                  "test_success",
                  "test_with_options",
                  0.7435223956449145
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_invalid_file",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestSufarAscMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_sufar4_with_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sufar4_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sufar4_fail_option4",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sufar4_with_infile",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_sufar4_with_no_files",
                  "[]"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "[]"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "[]"
                ],
                [
                  "test_sufar4_with_options",
                  "[]"
                ],
                [
                  "test_sufar4_fail_option4",
                  "[]"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "[]"
                ],
                [
                  "test_sufar4_with_infile",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_sufar4_with_no_files",
                  "false"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "false"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "false"
                ],
                [
                  "test_sufar4_with_options",
                  "false"
                ],
                [
                  "test_sufar4_fail_option4",
                  "false"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "false"
                ],
                [
                  "test_sufar4_with_infile",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_sufar4_with_no_files",
                  "false"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "false"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "false"
                ],
                [
                  "test_sufar4_with_options",
                  "false"
                ],
                [
                  "test_sufar4_fail_option4",
                  "false"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "false"
                ],
                [
                  "test_sufar4_with_infile",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_sufar4_with_no_files",
                  "false"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "false"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "false"
                ],
                [
                  "test_sufar4_with_options",
                  "false"
                ],
                [
                  "test_sufar4_fail_option4",
                  "false"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "false"
                ],
                [
                  "test_sufar4_with_infile",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_sufar4_with_no_files",
                  "false"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "false"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "false"
                ],
                [
                  "test_sufar4_with_options",
                  "false"
                ],
                [
                  "test_sufar4_fail_option4",
                  "false"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "false"
                ],
                [
                  "test_sufar4_with_infile",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "false"
              ],
              [
                "test_sufar4_with_invalid_file",
                "false"
              ],
              [
                "test_sufar4_succeed_option4",
                "false"
              ],
              [
                "test_sufar4_with_options",
                "false"
              ],
              [
                "test_sufar4_fail_option4",
                "false"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "false"
              ],
              [
                "test_sufar4_with_infile",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "false"
              ],
              [
                "test_sufar4_with_invalid_file",
                "false"
              ],
              [
                "test_sufar4_succeed_option4",
                "false"
              ],
              [
                "test_sufar4_with_options",
                "false"
              ],
              [
                "test_sufar4_fail_option4",
                "false"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "false"
              ],
              [
                "test_sufar4_with_infile",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                []
              ],
              [
                "test_sufar4_with_invalid_file",
                []
              ],
              [
                "test_sufar4_succeed_option4",
                []
              ],
              [
                "test_sufar4_with_options",
                []
              ],
              [
                "test_sufar4_fail_option4",
                []
              ],
              [
                "test_sufar4_succeed_data_model3",
                []
              ],
              [
                "test_sufar4_with_infile",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "false"
              ],
              [
                "test_sufar4_with_invalid_file",
                "false"
              ],
              [
                "test_sufar4_succeed_option4",
                "false"
              ],
              [
                "test_sufar4_with_options",
                "false"
              ],
              [
                "test_sufar4_fail_option4",
                "false"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "false"
              ],
              [
                "test_sufar4_with_infile",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "false"
              ],
              [
                "test_sufar4_with_invalid_file",
                "false"
              ],
              [
                "test_sufar4_succeed_option4",
                "false"
              ],
              [
                "test_sufar4_with_options",
                "false"
              ],
              [
                "test_sufar4_fail_option4",
                "false"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "true"
              ],
              [
                "test_sufar4_with_infile",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_sufar4_with_no_files",
                  "0"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "0"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "0"
                ],
                [
                  "test_sufar4_with_options",
                  "0"
                ],
                [
                  "test_sufar4_fail_option4",
                  "0"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "0"
                ],
                [
                  "test_sufar4_with_infile",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_sufar4_with_no_files",
                  "0"
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "0"
                ],
                [
                  "test_sufar4_succeed_option4",
                  "0"
                ],
                [
                  "test_sufar4_with_options",
                  "0"
                ],
                [
                  "test_sufar4_fail_option4",
                  "0"
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "0"
                ],
                [
                  "test_sufar4_with_infile",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "false"
              ],
              [
                "test_sufar4_with_invalid_file",
                "false"
              ],
              [
                "test_sufar4_succeed_option4",
                "false"
              ],
              [
                "test_sufar4_with_options",
                "false"
              ],
              [
                "test_sufar4_fail_option4",
                "false"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "false"
              ],
              [
                "test_sufar4_with_infile",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "false"
              ],
              [
                "test_sufar4_with_invalid_file",
                "false"
              ],
              [
                "test_sufar4_succeed_option4",
                "false"
              ],
              [
                "test_sufar4_with_options",
                "false"
              ],
              [
                "test_sufar4_fail_option4",
                "false"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "false"
              ],
              [
                "test_sufar4_with_infile",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "1"
              ],
              [
                "test_sufar4_with_invalid_file",
                "2"
              ],
              [
                "test_sufar4_succeed_option4",
                "2"
              ],
              [
                "test_sufar4_with_options",
                "2"
              ],
              [
                "test_sufar4_fail_option4",
                "2"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "5"
              ],
              [
                "test_sufar4_with_infile",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                []
              ],
              [
                "test_sufar4_with_invalid_file",
                [
                  "error_message",
                  "program_ran",
                  "input_dir",
                  "infile"
                ]
              ],
              [
                "test_sufar4_succeed_option4",
                [
                  "program_ran",
                  "ofile",
                  "outfile",
                  "input_dir",
                  "infile"
                ]
              ],
              [
                "test_sufar4_with_options",
                [
                  "program_ran",
                  "outfile",
                  "input_dir",
                  "infile"
                ]
              ],
              [
                "test_sufar4_fail_option4",
                [
                  "error_message",
                  "program_ran",
                  "input_dir",
                  "infile"
                ]
              ],
              [
                "test_sufar4_succeed_data_model3",
                [
                  "con",
                  "program_ran",
                  "outfile",
                  "input_dir",
                  "infile",
                  "lines"
                ]
              ],
              [
                "test_sufar4_with_infile",
                [
                  "program_ran",
                  "outfile",
                  "input_dir",
                  "infile",
                  "lines"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                []
              ],
              [
                "test_sufar4_with_invalid_file",
                []
              ],
              [
                "test_sufar4_succeed_option4",
                []
              ],
              [
                "test_sufar4_with_options",
                []
              ],
              [
                "test_sufar4_fail_option4",
                []
              ],
              [
                "test_sufar4_succeed_data_model3",
                []
              ],
              [
                "test_sufar4_with_infile",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6338231219676094,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_sufar4_with_no_files",
                  "test_sufar4_succeed_option4",
                  0.23985080590006172
                ],
                [
                  "test_sufar4_with_no_files",
                  "test_sufar4_succeed_data_model3",
                  0.31304951684997057
                ],
                [
                  "test_sufar4_with_no_files",
                  "test_sufar4_with_options",
                  0.3057342822246691
                ],
                [
                  "test_sufar4_with_infile",
                  "test_sufar4_succeed_option4",
                  0.8224253152776161
                ],
                [
                  "test_sufar4_with_infile",
                  "test_sufar4_succeed_data_model3",
                  0.8672294716634918
                ],
                [
                  "test_sufar4_with_infile",
                  "test_sufar4_with_options",
                  0.7944231356821868
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "test_sufar4_succeed_option4",
                  0.7627700713964737
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "test_sufar4_with_options",
                  0.6899531855351408
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "test_sufar4_with_options",
                  0.7257129542976328
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "test_sufar4_succeed_option4",
                  0.7627700713964738
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "test_sufar4_with_infile",
                  0.7809727769012628
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "test_sufar4_fail_option4",
                  0.7893522173763263
                ],
                [
                  "test_sufar4_succeed_data_model3",
                  "test_sufar4_fail_option4",
                  0.6665640946733422
                ],
                [
                  "test_sufar4_with_no_files",
                  "test_sufar4_fail_option4",
                  0.26965968581500305
                ],
                [
                  "test_sufar4_fail_option4",
                  "test_sufar4_succeed_option4",
                  0.8048829346318248
                ],
                [
                  "test_sufar4_with_no_files",
                  "test_sufar4_with_invalid_file",
                  0.33541019662496846
                ],
                [
                  "test_sufar4_with_no_files",
                  "test_sufar4_with_infile",
                  0.36490022459988086
                ],
                [
                  "test_sufar4_with_infile",
                  "test_sufar4_fail_option4",
                  0.7258514778472086
                ],
                [
                  "test_sufar4_succeed_option4",
                  "test_sufar4_with_options",
                  0.8423619247262303
                ],
                [
                  "test_sufar4_with_invalid_file",
                  "test_sufar4_succeed_data_model3",
                  0.69
                ],
                [
                  "test_sufar4_fail_option4",
                  "test_sufar4_with_options",
                  0.7564112179000324
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_sufar4_with_no_files",
                "false"
              ],
              [
                "test_sufar4_with_invalid_file",
                "false"
              ],
              [
                "test_sufar4_succeed_option4",
                "false"
              ],
              [
                "test_sufar4_with_options",
                "false"
              ],
              [
                "test_sufar4_fail_option4",
                "false"
              ],
              [
                "test_sufar4_succeed_data_model3",
                "false"
              ],
              [
                "test_sufar4_with_infile",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "TestTdtMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_with_options",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_with_options",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_with_options",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_with_options",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_with_options",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ],
              [
                "test_with_options",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "res",
                  "outfile"
                ]
              ],
              [
                "test_with_options",
                [
                  "res",
                  "df",
                  "outfile"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_with_options",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4728962165665973,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_with_options",
                  0.4728962165665973
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_with_options",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestUtrechtMagic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_utrecht_with_no_files",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_utrecht_success",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_utrecht_with_no_files",
                  "[]"
                ],
                [
                  "test_utrecht_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_utrecht_with_no_files",
                  "false"
                ],
                [
                  "test_utrecht_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_utrecht_with_no_files",
                  "false"
                ],
                [
                  "test_utrecht_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_utrecht_with_no_files",
                  "false"
                ],
                [
                  "test_utrecht_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_utrecht_with_no_files",
                  "false"
                ],
                [
                  "test_utrecht_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "false"
              ],
              [
                "test_utrecht_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "false"
              ],
              [
                "test_utrecht_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_utrecht_with_no_files",
                [
                  "self.input_dir"
                ]
              ],
              [
                "test_utrecht_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "false"
              ],
              [
                "test_utrecht_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "false"
              ],
              [
                "test_utrecht_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_utrecht_with_no_files",
                  "0"
                ],
                [
                  "test_utrecht_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_utrecht_with_no_files",
                  "0"
                ],
                [
                  "test_utrecht_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "false"
              ],
              [
                "test_utrecht_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "false"
              ],
              [
                "test_utrecht_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "1"
              ],
              [
                "test_utrecht_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                []
              ],
              [
                "test_utrecht_success",
                [
                  "program_ran",
                  "outfile",
                  "options",
                  "meas_df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_utrecht_with_no_files",
                []
              ],
              [
                "test_utrecht_success",
                [
                  "self.input_dir"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.24779731389167603,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_utrecht_with_no_files",
                  "test_utrecht_success",
                  0.24779731389167603
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_utrecht_with_no_files",
                "false"
              ],
              [
                "test_utrecht_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_pmag_gui.py",
    "testCases": [
      {
        "name": "TestCoreDepthplot",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_core_depthplot_window_initializes",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_core_depthplot_window_initializes",
                  "[]"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "[]"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_core_depthplot_window_initializes",
                  "false"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "true"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_core_depthplot_window_initializes",
                  "false"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "false"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_core_depthplot_window_initializes",
                  "false"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "false"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_core_depthplot_window_initializes",
                  "false"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "false"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "false"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "false"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "false"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "false"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_run_core_depthplot_with_no_info",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "false"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "false"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "false"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "false"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_core_depthplot_window_initializes",
                  "0"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "0"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_core_depthplot_window_initializes",
                  "0"
                ],
                [
                  "test_run_core_depthplot_with_correct_info",
                  "0"
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "false"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "false"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "false"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "false"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "2"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "1"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                []
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                [
                  "radio_buttons",
                  "plot_frame"
                ]
              ],
              [
                "test_run_core_depthplot_with_no_info",
                [
                  "event",
                  "btn"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                [
                  "self.core_window"
                ]
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                [
                  "self.core_window"
                ]
              ],
              [
                "test_run_core_depthplot_with_no_info",
                [
                  "self.core_window"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.20069197665778724,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_core_depthplot_window_initializes",
                  "test_run_core_depthplot_with_no_info",
                  0.10472978631328023
                ],
                [
                  "test_core_depthplot_window_initializes",
                  "test_run_core_depthplot_with_correct_info",
                  0.2212424463450107
                ],
                [
                  "test_run_core_depthplot_with_no_info",
                  "test_run_core_depthplot_with_correct_info",
                  0.2761036973150708
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_core_depthplot_window_initializes",
                "false"
              ],
              [
                "test_run_core_depthplot_with_correct_info",
                "false"
              ],
              [
                "test_run_core_depthplot_with_no_info",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestMainFrame3",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_data_object_is_created",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_click_button_one",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_demag_gui",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_thellier_gui",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_main_panel_is_created",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_click_button_three",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_button_one_a",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_click_change_dir",
                  "[PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_click_button_two",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_data_object_is_created",
                  "[]"
                ],
                [
                  "test_click_button_one",
                  "[]"
                ],
                [
                  "test_click_demag_gui",
                  "[]"
                ],
                [
                  "test_click_thellier_gui",
                  "[]"
                ],
                [
                  "test_main_panel_is_created",
                  "[]"
                ],
                [
                  "test_click_button_three",
                  "[]"
                ],
                [
                  "test_click_button_one_a",
                  "[]"
                ],
                [
                  "test_click_change_dir",
                  "[]"
                ],
                [
                  "test_click_button_two",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_click_button_one",
                  "false"
                ],
                [
                  "test_click_demag_gui",
                  "false"
                ],
                [
                  "test_click_thellier_gui",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ],
                [
                  "test_click_button_three",
                  "false"
                ],
                [
                  "test_click_button_one_a",
                  "false"
                ],
                [
                  "test_click_change_dir",
                  "false"
                ],
                [
                  "test_click_button_two",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_click_button_one",
                  "false"
                ],
                [
                  "test_click_demag_gui",
                  "false"
                ],
                [
                  "test_click_thellier_gui",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ],
                [
                  "test_click_button_three",
                  "false"
                ],
                [
                  "test_click_button_one_a",
                  "true"
                ],
                [
                  "test_click_change_dir",
                  "false"
                ],
                [
                  "test_click_button_two",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_click_button_one",
                  "false"
                ],
                [
                  "test_click_demag_gui",
                  "false"
                ],
                [
                  "test_click_thellier_gui",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ],
                [
                  "test_click_button_three",
                  "false"
                ],
                [
                  "test_click_button_one_a",
                  "false"
                ],
                [
                  "test_click_change_dir",
                  "false"
                ],
                [
                  "test_click_button_two",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_click_button_one",
                  "false"
                ],
                [
                  "test_click_demag_gui",
                  "false"
                ],
                [
                  "test_click_thellier_gui",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ],
                [
                  "test_click_button_three",
                  "false"
                ],
                [
                  "test_click_button_one_a",
                  "false"
                ],
                [
                  "test_click_change_dir",
                  "false"
                ],
                [
                  "test_click_button_two",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_click_button_one",
                "false"
              ],
              [
                "test_click_demag_gui",
                "false"
              ],
              [
                "test_click_thellier_gui",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ],
              [
                "test_click_button_three",
                "false"
              ],
              [
                "test_click_button_one_a",
                "false"
              ],
              [
                "test_click_change_dir",
                "false"
              ],
              [
                "test_click_button_two",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_click_button_one",
                "false"
              ],
              [
                "test_click_demag_gui",
                "false"
              ],
              [
                "test_click_thellier_gui",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ],
              [
                "test_click_button_three",
                "false"
              ],
              [
                "test_click_button_one_a",
                "false"
              ],
              [
                "test_click_change_dir",
                "false"
              ],
              [
                "test_click_button_two",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_data_object_is_created",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_button_one",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_click_demag_gui",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_click_thellier_gui",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_main_panel_is_created",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_click_button_three",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_click_button_one_a",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_click_change_dir",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_button_two",
                [
                  "self.frame",
                  "self.app"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_click_button_one",
                "false"
              ],
              [
                "test_click_demag_gui",
                "false"
              ],
              [
                "test_click_thellier_gui",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ],
              [
                "test_click_button_three",
                "false"
              ],
              [
                "test_click_button_one_a",
                "false"
              ],
              [
                "test_click_change_dir",
                "true"
              ],
              [
                "test_click_button_two",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_click_button_one",
                "false"
              ],
              [
                "test_click_demag_gui",
                "false"
              ],
              [
                "test_click_thellier_gui",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ],
              [
                "test_click_button_three",
                "false"
              ],
              [
                "test_click_button_one_a",
                "false"
              ],
              [
                "test_click_change_dir",
                "false"
              ],
              [
                "test_click_button_two",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_data_object_is_created",
                  "0"
                ],
                [
                  "test_click_button_one",
                  "0"
                ],
                [
                  "test_click_demag_gui",
                  "0"
                ],
                [
                  "test_click_thellier_gui",
                  "0"
                ],
                [
                  "test_main_panel_is_created",
                  "0"
                ],
                [
                  "test_click_button_three",
                  "0"
                ],
                [
                  "test_click_button_one_a",
                  "0"
                ],
                [
                  "test_click_change_dir",
                  "0"
                ],
                [
                  "test_click_button_two",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_data_object_is_created",
                  "0"
                ],
                [
                  "test_click_button_one",
                  "0"
                ],
                [
                  "test_click_demag_gui",
                  "0"
                ],
                [
                  "test_click_thellier_gui",
                  "0"
                ],
                [
                  "test_main_panel_is_created",
                  "0"
                ],
                [
                  "test_click_button_three",
                  "0"
                ],
                [
                  "test_click_button_one_a",
                  "0"
                ],
                [
                  "test_click_change_dir",
                  "0"
                ],
                [
                  "test_click_button_two",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_click_button_one",
                "false"
              ],
              [
                "test_click_demag_gui",
                "false"
              ],
              [
                "test_click_thellier_gui",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ],
              [
                "test_click_button_three",
                "false"
              ],
              [
                "test_click_button_one_a",
                "false"
              ],
              [
                "test_click_change_dir",
                "false"
              ],
              [
                "test_click_button_two",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_click_button_one",
                "false"
              ],
              [
                "test_click_demag_gui",
                "false"
              ],
              [
                "test_click_thellier_gui",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ],
              [
                "test_click_button_three",
                "false"
              ],
              [
                "test_click_button_one_a",
                "false"
              ],
              [
                "test_click_change_dir",
                "false"
              ],
              [
                "test_click_button_two",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "5"
              ],
              [
                "test_click_button_one",
                "3"
              ],
              [
                "test_click_demag_gui",
                "3"
              ],
              [
                "test_click_thellier_gui",
                "3"
              ],
              [
                "test_main_panel_is_created",
                "3"
              ],
              [
                "test_click_button_three",
                "3"
              ],
              [
                "test_click_button_one_a",
                "1"
              ],
              [
                "test_click_change_dir",
                "1"
              ],
              [
                "test_click_button_two",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                []
              ],
              [
                "test_click_button_one",
                [
                  "window"
                ]
              ],
              [
                "test_click_demag_gui",
                [
                  "window"
                ]
              ],
              [
                "test_click_thellier_gui",
                [
                  "window"
                ]
              ],
              [
                "test_main_panel_is_created",
                []
              ],
              [
                "test_click_button_three",
                [
                  "window"
                ]
              ],
              [
                "test_click_button_one_a",
                [
                  "child_names"
                ]
              ],
              [
                "test_click_change_dir",
                [
                  "new_WD",
                  "old_WD"
                ]
              ],
              [
                "test_click_button_two",
                [
                  "window"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                [
                  "self.frame"
                ]
              ],
              [
                "test_click_button_one",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_click_demag_gui",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_click_thellier_gui",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_main_panel_is_created",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_click_button_three",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_click_button_one_a",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_click_change_dir",
                [
                  "self.frame"
                ]
              ],
              [
                "test_click_button_two",
                [
                  "self.pnl"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.44914502143718277,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_data_object_is_created",
                  "test_main_panel_is_created",
                  0.41166465371081584
                ],
                [
                  "test_click_button_two",
                  "test_click_demag_gui",
                  0.7833494518006403
                ],
                [
                  "test_click_button_two",
                  "test_click_change_dir",
                  0.37344089980427997
                ],
                [
                  "test_main_panel_is_created",
                  "test_click_button_one_a",
                  0.236227795630767
                ],
                [
                  "test_main_panel_is_created",
                  "test_click_thellier_gui",
                  0.4605661864718383
                ],
                [
                  "test_click_button_three",
                  "test_click_change_dir",
                  0.39279921675914264
                ],
                [
                  "test_data_object_is_created",
                  "test_click_demag_gui",
                  0.3447251266633461
                ],
                [
                  "test_data_object_is_created",
                  "test_click_button_one",
                  0.3489836112123038
                ],
                [
                  "test_click_button_one",
                  "test_click_button_three",
                  0.888199355127579
                ],
                [
                  "test_data_object_is_created",
                  "test_click_button_two",
                  0.34655164004183603
                ],
                [
                  "test_click_button_one",
                  "test_click_thellier_gui",
                  0.7888467083796337
                ],
                [
                  "test_data_object_is_created",
                  "test_click_button_one_a",
                  0.173275820020918
                ],
                [
                  "test_click_button_one_a",
                  "test_click_demag_gui",
                  0.17407765595569782
                ],
                [
                  "test_click_button_one_a",
                  "test_click_thellier_gui",
                  0.17407765595569782
                ],
                [
                  "test_click_button_one",
                  "test_click_button_one_a",
                  0.2517544074890067
                ],
                [
                  "test_main_panel_is_created",
                  "test_click_button_two",
                  0.42521003213538067
                ],
                [
                  "test_click_button_one_a",
                  "test_click_button_three",
                  0.24926362137539537
                ],
                [
                  "test_click_button_one_a",
                  "test_click_change_dir",
                  0.2720783698574039
                ],
                [
                  "test_click_button_one",
                  "test_click_demag_gui",
                  0.7888467083796337
                ],
                [
                  "test_click_button_one_a",
                  "test_click_button_two",
                  0.25
                ],
                [
                  "test_click_button_three",
                  "test_click_thellier_gui",
                  0.7209619242766462
                ],
                [
                  "test_main_panel_is_created",
                  "test_click_button_three",
                  0.3913454490654027
                ],
                [
                  "test_click_demag_gui",
                  "test_click_thellier_gui",
                  0.8787878787878786
                ],
                [
                  "test_click_button_two",
                  "test_click_button_three",
                  0.9075752368027218
                ],
                [
                  "test_main_panel_is_created",
                  "test_click_change_dir",
                  0.21777026332312227
                ],
                [
                  "test_click_button_two",
                  "test_click_thellier_gui",
                  0.7833494518006403
                ],
                [
                  "test_click_button_three",
                  "test_click_demag_gui",
                  0.7209619242766462
                ],
                [
                  "test_click_button_one",
                  "test_click_change_dir",
                  0.376061569849552
                ],
                [
                  "test_data_object_is_created",
                  "test_click_button_three",
                  0.3189515696876696
                ],
                [
                  "test_data_object_is_created",
                  "test_click_thellier_gui",
                  0.3447251266633461
                ],
                [
                  "test_click_thellier_gui",
                  "test_click_change_dir",
                  0.21173941937869672
                ],
                [
                  "test_main_panel_is_created",
                  "test_click_button_one",
                  0.428193998794497
                ],
                [
                  "test_click_demag_gui",
                  "test_click_change_dir",
                  0.21173941937869672
                ],
                [
                  "test_click_button_one",
                  "test_click_button_two",
                  0.923099494126358
                ],
                [
                  "test_data_object_is_created",
                  "test_click_change_dir",
                  0.13945294228355204
                ],
                [
                  "test_main_panel_is_created",
                  "test_click_demag_gui",
                  0.4605661864718383
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_click_button_one",
                "false"
              ],
              [
                "test_click_demag_gui",
                "false"
              ],
              [
                "test_click_thellier_gui",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ],
              [
                "test_click_button_three",
                "false"
              ],
              [
                "test_click_button_one_a",
                "false"
              ],
              [
                "test_click_change_dir",
                "false"
              ],
              [
                "test_click_button_two",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      },
      {
        "name": "TestMenus3",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_click_any_file",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_Azdip_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_Kly4s_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_export_results",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_ani_depthplot",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_agm_file_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_that_all_menus_exist",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_click_agm_folder_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_core_depthplot",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_click_IODP_sample_format",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_click_any_file",
                  "[]"
                ],
                [
                  "test_click_Azdip_format",
                  "[]"
                ],
                [
                  "test_click_Kly4s_format",
                  "[]"
                ],
                [
                  "test_click_export_results",
                  "[]"
                ],
                [
                  "test_click_ani_depthplot",
                  "[]"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "[]"
                ],
                [
                  "test_click_agm_file_format",
                  "[]"
                ],
                [
                  "test_that_all_menus_exist",
                  "[]"
                ],
                [
                  "test_click_agm_folder_format",
                  "[]"
                ],
                [
                  "test_click_core_depthplot",
                  "[]"
                ],
                [
                  "test_click_IODP_sample_format",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_click_any_file",
                  "false"
                ],
                [
                  "test_click_Azdip_format",
                  "false"
                ],
                [
                  "test_click_Kly4s_format",
                  "false"
                ],
                [
                  "test_click_export_results",
                  "false"
                ],
                [
                  "test_click_ani_depthplot",
                  "false"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "false"
                ],
                [
                  "test_click_agm_file_format",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "true"
                ],
                [
                  "test_click_agm_folder_format",
                  "false"
                ],
                [
                  "test_click_core_depthplot",
                  "false"
                ],
                [
                  "test_click_IODP_sample_format",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_click_any_file",
                  "false"
                ],
                [
                  "test_click_Azdip_format",
                  "false"
                ],
                [
                  "test_click_Kly4s_format",
                  "false"
                ],
                [
                  "test_click_export_results",
                  "false"
                ],
                [
                  "test_click_ani_depthplot",
                  "false"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "false"
                ],
                [
                  "test_click_agm_file_format",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "false"
                ],
                [
                  "test_click_agm_folder_format",
                  "false"
                ],
                [
                  "test_click_core_depthplot",
                  "false"
                ],
                [
                  "test_click_IODP_sample_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_click_any_file",
                  "false"
                ],
                [
                  "test_click_Azdip_format",
                  "false"
                ],
                [
                  "test_click_Kly4s_format",
                  "false"
                ],
                [
                  "test_click_export_results",
                  "false"
                ],
                [
                  "test_click_ani_depthplot",
                  "false"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "false"
                ],
                [
                  "test_click_agm_file_format",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "false"
                ],
                [
                  "test_click_agm_folder_format",
                  "false"
                ],
                [
                  "test_click_core_depthplot",
                  "false"
                ],
                [
                  "test_click_IODP_sample_format",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_click_any_file",
                  "false"
                ],
                [
                  "test_click_Azdip_format",
                  "false"
                ],
                [
                  "test_click_Kly4s_format",
                  "false"
                ],
                [
                  "test_click_export_results",
                  "false"
                ],
                [
                  "test_click_ani_depthplot",
                  "false"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "false"
                ],
                [
                  "test_click_agm_file_format",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "false"
                ],
                [
                  "test_click_agm_folder_format",
                  "false"
                ],
                [
                  "test_click_core_depthplot",
                  "false"
                ],
                [
                  "test_click_IODP_sample_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "false"
              ],
              [
                "test_click_Azdip_format",
                "false"
              ],
              [
                "test_click_Kly4s_format",
                "false"
              ],
              [
                "test_click_export_results",
                "false"
              ],
              [
                "test_click_ani_depthplot",
                "false"
              ],
              [
                "test_click_SUFAR_asc_format",
                "false"
              ],
              [
                "test_click_agm_file_format",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_click_agm_folder_format",
                "false"
              ],
              [
                "test_click_core_depthplot",
                "false"
              ],
              [
                "test_click_IODP_sample_format",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "false"
              ],
              [
                "test_click_Azdip_format",
                "false"
              ],
              [
                "test_click_Kly4s_format",
                "false"
              ],
              [
                "test_click_export_results",
                "false"
              ],
              [
                "test_click_ani_depthplot",
                "false"
              ],
              [
                "test_click_SUFAR_asc_format",
                "false"
              ],
              [
                "test_click_agm_file_format",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_click_agm_folder_format",
                "false"
              ],
              [
                "test_click_core_depthplot",
                "false"
              ],
              [
                "test_click_IODP_sample_format",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_click_any_file",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_Azdip_format",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_Kly4s_format",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_export_results",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_ani_depthplot",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_SUFAR_asc_format",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_agm_file_format",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_that_all_menus_exist",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_agm_folder_format",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_core_depthplot",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_click_IODP_sample_format",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "false"
              ],
              [
                "test_click_Azdip_format",
                "false"
              ],
              [
                "test_click_Kly4s_format",
                "false"
              ],
              [
                "test_click_export_results",
                "false"
              ],
              [
                "test_click_ani_depthplot",
                "false"
              ],
              [
                "test_click_SUFAR_asc_format",
                "false"
              ],
              [
                "test_click_agm_file_format",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_click_agm_folder_format",
                "false"
              ],
              [
                "test_click_core_depthplot",
                "false"
              ],
              [
                "test_click_IODP_sample_format",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "false"
              ],
              [
                "test_click_Azdip_format",
                "false"
              ],
              [
                "test_click_Kly4s_format",
                "false"
              ],
              [
                "test_click_export_results",
                "false"
              ],
              [
                "test_click_ani_depthplot",
                "false"
              ],
              [
                "test_click_SUFAR_asc_format",
                "false"
              ],
              [
                "test_click_agm_file_format",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_click_agm_folder_format",
                "false"
              ],
              [
                "test_click_core_depthplot",
                "false"
              ],
              [
                "test_click_IODP_sample_format",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_click_any_file",
                  "0"
                ],
                [
                  "test_click_Azdip_format",
                  "0"
                ],
                [
                  "test_click_Kly4s_format",
                  "0"
                ],
                [
                  "test_click_export_results",
                  "0"
                ],
                [
                  "test_click_ani_depthplot",
                  "0"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "0"
                ],
                [
                  "test_click_agm_file_format",
                  "0"
                ],
                [
                  "test_that_all_menus_exist",
                  "0"
                ],
                [
                  "test_click_agm_folder_format",
                  "0"
                ],
                [
                  "test_click_core_depthplot",
                  "0"
                ],
                [
                  "test_click_IODP_sample_format",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_click_any_file",
                  "0"
                ],
                [
                  "test_click_Azdip_format",
                  "0"
                ],
                [
                  "test_click_Kly4s_format",
                  "0"
                ],
                [
                  "test_click_export_results",
                  "0"
                ],
                [
                  "test_click_ani_depthplot",
                  "0"
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "0"
                ],
                [
                  "test_click_agm_file_format",
                  "0"
                ],
                [
                  "test_that_all_menus_exist",
                  "0"
                ],
                [
                  "test_click_agm_folder_format",
                  "0"
                ],
                [
                  "test_click_core_depthplot",
                  "0"
                ],
                [
                  "test_click_IODP_sample_format",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "false"
              ],
              [
                "test_click_Azdip_format",
                "false"
              ],
              [
                "test_click_Kly4s_format",
                "false"
              ],
              [
                "test_click_export_results",
                "false"
              ],
              [
                "test_click_ani_depthplot",
                "false"
              ],
              [
                "test_click_SUFAR_asc_format",
                "false"
              ],
              [
                "test_click_agm_file_format",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_click_agm_folder_format",
                "false"
              ],
              [
                "test_click_core_depthplot",
                "false"
              ],
              [
                "test_click_IODP_sample_format",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "false"
              ],
              [
                "test_click_Azdip_format",
                "false"
              ],
              [
                "test_click_Kly4s_format",
                "false"
              ],
              [
                "test_click_export_results",
                "false"
              ],
              [
                "test_click_ani_depthplot",
                "false"
              ],
              [
                "test_click_SUFAR_asc_format",
                "false"
              ],
              [
                "test_click_agm_file_format",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_click_agm_folder_format",
                "false"
              ],
              [
                "test_click_core_depthplot",
                "false"
              ],
              [
                "test_click_IODP_sample_format",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "3"
              ],
              [
                "test_click_Azdip_format",
                "3"
              ],
              [
                "test_click_Kly4s_format",
                "3"
              ],
              [
                "test_click_export_results",
                "3"
              ],
              [
                "test_click_ani_depthplot",
                "3"
              ],
              [
                "test_click_SUFAR_asc_format",
                "3"
              ],
              [
                "test_click_agm_file_format",
                "3"
              ],
              [
                "test_that_all_menus_exist",
                "3"
              ],
              [
                "test_click_agm_folder_format",
                "3"
              ],
              [
                "test_click_core_depthplot",
                "3"
              ],
              [
                "test_click_IODP_sample_format",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                [
                  "window"
                ]
              ],
              [
                "test_click_Azdip_format",
                [
                  "window"
                ]
              ],
              [
                "test_click_Kly4s_format",
                [
                  "window"
                ]
              ],
              [
                "test_click_export_results",
                [
                  "window"
                ]
              ],
              [
                "test_click_ani_depthplot",
                [
                  "window"
                ]
              ],
              [
                "test_click_SUFAR_asc_format",
                [
                  "window"
                ]
              ],
              [
                "test_click_agm_file_format",
                [
                  "window"
                ]
              ],
              [
                "test_that_all_menus_exist",
                [
                  "menus",
                  "menu_names"
                ]
              ],
              [
                "test_click_agm_folder_format",
                [
                  "window"
                ]
              ],
              [
                "test_click_core_depthplot",
                [
                  "window"
                ]
              ],
              [
                "test_click_IODP_sample_format",
                [
                  "window"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_click_any_file",
                []
              ],
              [
                "test_click_Azdip_format",
                []
              ],
              [
                "test_click_Kly4s_format",
                []
              ],
              [
                "test_click_export_results",
                []
              ],
              [
                "test_click_ani_depthplot",
                []
              ],
              [
                "test_click_SUFAR_asc_format",
                []
              ],
              [
                "test_click_agm_file_format",
                []
              ],
              [
                "test_that_all_menus_exist",
                [
                  "self.frame"
                ]
              ],
              [
                "test_click_agm_folder_format",
                []
              ],
              [
                "test_click_core_depthplot",
                []
              ],
              [
                "test_click_IODP_sample_format",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6070018688092838,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_click_Azdip_format",
                  "test_click_agm_file_format",
                  0.7544714188481237
                ],
                [
                  "test_click_IODP_sample_format",
                  "test_click_ani_depthplot",
                  0.6311528416041716
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "test_click_core_depthplot",
                  0.6280639184941973
                ],
                [
                  "test_click_export_results",
                  "test_click_any_file",
                  0.6352408168042841
                ],
                [
                  "test_click_export_results",
                  "test_click_IODP_sample_format",
                  0.5938359754645384
                ],
                [
                  "test_click_export_results",
                  "test_click_SUFAR_asc_format",
                  0.5889696476913215
                ],
                [
                  "test_click_agm_file_format",
                  "test_click_core_depthplot",
                  0.63690401015123
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "test_click_agm_folder_format",
                  0.6380450213545767
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "test_click_agm_file_format",
                  0.6161124853422422
                ],
                [
                  "test_click_any_file",
                  "test_click_Kly4s_format",
                  0.6515899480427518
                ],
                [
                  "test_click_Azdip_format",
                  "test_click_core_depthplot",
                  0.7256921335399084
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_SUFAR_asc_format",
                  0.2912176030182453
                ],
                [
                  "test_click_any_file",
                  "test_click_ani_depthplot",
                  0.725796546409961
                ],
                [
                  "test_click_Kly4s_format",
                  "test_click_ani_depthplot",
                  0.698256535275343
                ],
                [
                  "test_click_export_results",
                  "test_click_agm_folder_format",
                  0.678208476755123
                ],
                [
                  "test_click_agm_folder_format",
                  "test_click_ani_depthplot",
                  0.6716800224834202
                ],
                [
                  "test_click_IODP_sample_format",
                  "test_click_Kly4s_format",
                  0.6567672978933173
                ],
                [
                  "test_click_export_results",
                  "test_click_core_depthplot",
                  0.6843859108291549
                ],
                [
                  "test_click_any_file",
                  "test_click_IODP_sample_format",
                  0.5752739964053398
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_ani_depthplot",
                  0.264197974633739
                ],
                [
                  "test_click_any_file",
                  "test_click_agm_folder_format",
                  0.6868732574462859
                ],
                [
                  "test_click_agm_file_format",
                  "test_click_agm_folder_format",
                  0.8676634118816221
                ],
                [
                  "test_click_Kly4s_format",
                  "test_click_agm_file_format",
                  0.6958935622201801
                ],
                [
                  "test_click_IODP_sample_format",
                  "test_click_SUFAR_asc_format",
                  0.7167829363048326
                ],
                [
                  "test_click_export_results",
                  "test_click_Kly4s_format",
                  0.6569721680977084
                ],
                [
                  "test_click_any_file",
                  "test_click_agm_file_format",
                  0.7209372509105905
                ],
                [
                  "test_click_Azdip_format",
                  "test_click_ani_depthplot",
                  0.7390086962623627
                ],
                [
                  "test_click_ani_depthplot",
                  "test_click_core_depthplot",
                  0.9092412093166349
                ],
                [
                  "test_click_SUFAR_asc_format",
                  "test_click_ani_depthplot",
                  0.6531972647421808
                ],
                [
                  "test_click_Kly4s_format",
                  "test_click_core_depthplot",
                  0.6693487271595476
                ],
                [
                  "test_click_agm_file_format",
                  "test_click_ani_depthplot",
                  0.6485912970975409
                ],
                [
                  "test_click_export_results",
                  "test_click_Azdip_format",
                  0.7122737595488454
                ],
                [
                  "test_click_agm_folder_format",
                  "test_click_core_depthplot",
                  0.6595766883899815
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_export_results",
                  0.2574550487828077
                ],
                [
                  "test_click_any_file",
                  "test_click_core_depthplot",
                  0.6629935441317959
                ],
                [
                  "test_click_Kly4s_format",
                  "test_click_agm_folder_format",
                  0.7206661662125625
                ],
                [
                  "test_click_export_results",
                  "test_click_agm_file_format",
                  0.6548953384303026
                ],
                [
                  "test_click_Azdip_format",
                  "test_click_IODP_sample_format",
                  0.726013441038939
                ],
                [
                  "test_click_any_file",
                  "test_click_Azdip_format",
                  0.70643848326254
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_Azdip_format",
                  0.2755193843889919
                ],
                [
                  "test_click_Azdip_format",
                  "test_click_agm_folder_format",
                  0.7813292929504018
                ],
                [
                  "test_click_any_file",
                  "test_click_SUFAR_asc_format",
                  0.5333493587335963
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_any_file",
                  0.21500653629805672
                ],
                [
                  "test_click_Azdip_format",
                  "test_click_SUFAR_asc_format",
                  0.728492796385774
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_IODP_sample_format",
                  0.27042622261966737
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_Kly4s_format",
                  0.25412780533938645
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_agm_file_format",
                  0.28211132259588295
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_agm_folder_format",
                  0.2754594823588484
                ],
                [
                  "test_click_export_results",
                  "test_click_ani_depthplot",
                  0.6969444979857556
                ],
                [
                  "test_click_IODP_sample_format",
                  "test_click_agm_folder_format",
                  0.6598687226099635
                ],
                [
                  "test_click_IODP_sample_format",
                  "test_click_agm_file_format",
                  0.661693159884427
                ],
                [
                  "test_click_IODP_sample_format",
                  "test_click_core_depthplot",
                  0.6197797868009122
                ],
                [
                  "test_click_Kly4s_format",
                  "test_click_SUFAR_asc_format",
                  0.6841488883953092
                ],
                [
                  "test_click_Azdip_format",
                  "test_click_Kly4s_format",
                  0.7767234340540016
                ],
                [
                  "test_that_all_menus_exist",
                  "test_click_core_depthplot",
                  0.25943726083138546
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_click_any_file",
                "false"
              ],
              [
                "test_click_Azdip_format",
                "false"
              ],
              [
                "test_click_Kly4s_format",
                "false"
              ],
              [
                "test_click_export_results",
                "false"
              ],
              [
                "test_click_ani_depthplot",
                "false"
              ],
              [
                "test_click_SUFAR_asc_format",
                "false"
              ],
              [
                "test_click_agm_file_format",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_click_agm_folder_format",
                "false"
              ],
              [
                "test_click_core_depthplot",
                "false"
              ],
              [
                "test_click_IODP_sample_format",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_programs.py",
    "testCases": [
      {
        "name": "TestProgramsHelp",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_guis_anaconda",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cmd_line",
                  "[]"
                ],
                [
                  "test_guis",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_guis_anaconda",
                  "[]"
                ],
                [
                  "test_cmd_line",
                  "[]"
                ],
                [
                  "test_guis",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_guis_anaconda",
                  "true"
                ],
                [
                  "test_cmd_line",
                  "true"
                ],
                [
                  "test_guis",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_guis_anaconda",
                  "false"
                ],
                [
                  "test_cmd_line",
                  "false"
                ],
                [
                  "test_guis",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_guis_anaconda",
                  "false"
                ],
                [
                  "test_cmd_line",
                  "false"
                ],
                [
                  "test_guis",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_guis_anaconda",
                  "false"
                ],
                [
                  "test_cmd_line",
                  "false"
                ],
                [
                  "test_guis",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_guis_anaconda",
                "false"
              ],
              [
                "test_cmd_line",
                "false"
              ],
              [
                "test_guis",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_guis_anaconda",
                "false"
              ],
              [
                "test_cmd_line",
                "false"
              ],
              [
                "test_guis",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_guis_anaconda",
                []
              ],
              [
                "test_cmd_line",
                []
              ],
              [
                "test_guis",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_guis_anaconda",
                "true"
              ],
              [
                "test_cmd_line",
                "false"
              ],
              [
                "test_guis",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_guis_anaconda",
                "true"
              ],
              [
                "test_cmd_line",
                "false"
              ],
              [
                "test_guis",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_guis_anaconda",
                  "0"
                ],
                [
                  "test_cmd_line",
                  "0"
                ],
                [
                  "test_guis",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_guis_anaconda",
                  "0"
                ],
                [
                  "test_cmd_line",
                  "0"
                ],
                [
                  "test_guis",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_guis_anaconda",
                "true"
              ],
              [
                "test_cmd_line",
                "true"
              ],
              [
                "test_guis",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_guis_anaconda",
                "false"
              ],
              [
                "test_cmd_line",
                "false"
              ],
              [
                "test_guis",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_guis_anaconda",
                "1"
              ],
              [
                "test_cmd_line",
                "0"
              ],
              [
                "test_guis",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_guis_anaconda",
                [
                  "res",
                  "tests",
                  "pip_anaconda"
                ]
              ],
              [
                "test_cmd_line",
                [
                  "res",
                  "conversion_scripts",
                  "not_checked",
                  "pip_anaconda",
                  "conversion_scripts2",
                  "prog",
                  "programs_list"
                ]
              ],
              [
                "test_guis",
                [
                  "res",
                  "tests",
                  "pip_anaconda",
                  "prog"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_guis_anaconda",
                [
                  "self.env"
                ]
              ],
              [
                "test_cmd_line",
                [
                  "self.env"
                ]
              ],
              [
                "test_guis",
                [
                  "self.env"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6631437812349905,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cmd_line",
                  "test_guis_anaconda",
                  0.6204009466582289
                ],
                [
                  "test_cmd_line",
                  "test_guis",
                  0.673477189898471
                ],
                [
                  "test_guis",
                  "test_guis_anaconda",
                  0.6955532071482716
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_guis_anaconda",
                "false"
              ],
              [
                "test_cmd_line",
                "false"
              ],
              [
                "test_guis",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "SPD_\u0026_tests_\u0026_test_curvature.py",
    "testCases": [
      {
        "name": "CheckCircle",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_for_too_few_values",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_var_circle",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_for_too_few_values",
                  "[]"
                ],
                [
                  "test_var_circle",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_for_too_few_values",
                  "false"
                ],
                [
                  "test_var_circle",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_for_too_few_values",
                  "false"
                ],
                [
                  "test_var_circle",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_for_too_few_values",
                  "false"
                ],
                [
                  "test_var_circle",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_for_too_few_values",
                  "false"
                ],
                [
                  "test_var_circle",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "false"
              ],
              [
                "test_var_circle",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "false"
              ],
              [
                "test_var_circle",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                []
              ],
              [
                "test_var_circle",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "false"
              ],
              [
                "test_var_circle",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "false"
              ],
              [
                "test_var_circle",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_for_too_few_values",
                  "0"
                ],
                [
                  "test_var_circle",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_for_too_few_values",
                  "0"
                ],
                [
                  "test_var_circle",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "false"
              ],
              [
                "test_var_circle",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "false"
              ],
              [
                "test_var_circle",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "1"
              ],
              [
                "test_var_circle",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                [
                  "Par",
                  "XY"
                ]
              ],
              [
                "test_var_circle",
                [
                  "Par",
                  "result",
                  "XY",
                  "ref_circle"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                []
              ],
              [
                "test_var_circle",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6466208061135634,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_for_too_few_values",
                  "test_var_circle",
                  0.6466208061135634
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_for_too_few_values",
                "false"
              ],
              [
                "test_var_circle",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CheckTaubinSVD",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_taubin_svd",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_taubin_svd",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_taubin_svd",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_taubin_svd",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_taubin_svd",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_taubin_svd",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_taubin_svd",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_taubin_svd",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                [
                  "ref_a",
                  "result",
                  "XY",
                  "ref_b",
                  "ref_r"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_taubin_svd",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CheckLMA",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_LMA",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_LMA",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_LMA",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_LMA",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_LMA",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_LMA",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_LMA",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_LMA",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                [
                  "result",
                  "ref_a",
                  "xy",
                  "ref_b",
                  "ref_r",
                  "par_ini"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_LMA",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CheckAraiCurvature",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_Arai_Curvature",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_Arai_Curvature",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_Arai_Curvature",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_Arai_Curvature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_Arai_Curvature",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_Arai_Curvature",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_Arai_Curvature",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_Arai_Curvature",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                [
                  "x_real",
                  "result",
                  "ref_a",
                  "ref_SSE",
                  "ref_b",
                  "ref_k",
                  "y_real"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_Arai_Curvature",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_demag_gui.py",
    "testCases": [
      {
        "name": "TestDemagGUI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fit_next_prev",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_to_str",
                  "[]"
                ],
                [
                  "test_add_delete_fit",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_next_prev_specimen",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_read_write_redo",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_main_frame",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_mark_good_bad_meas",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_VGP_viewer",
                  "[]"
                ],
                [
                  "test_export_images",
                  "[]"
                ],
                [
                  "test_read_write_pmag_tables",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_check_empty_dir",
                  "[]"
                ],
                [
                  "test_ie_buttons",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fit_next_prev",
                  "[]"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "[]"
                ],
                [
                  "test_to_str",
                  "[]"
                ],
                [
                  "test_add_delete_fit",
                  "[]"
                ],
                [
                  "test_next_prev_specimen",
                  "[]"
                ],
                [
                  "test_read_write_redo",
                  "[]"
                ],
                [
                  "test_main_frame",
                  "[]"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "[]"
                ],
                [
                  "test_mark_good_bad_meas",
                  "[]"
                ],
                [
                  "test_VGP_viewer",
                  "[]"
                ],
                [
                  "test_export_images",
                  "[]"
                ],
                [
                  "test_read_write_pmag_tables",
                  "[]"
                ],
                [
                  "test_check_empty_dir",
                  "[]"
                ],
                [
                  "test_ie_buttons",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fit_next_prev",
                  "true"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "true"
                ],
                [
                  "test_to_str",
                  "false"
                ],
                [
                  "test_add_delete_fit",
                  "false"
                ],
                [
                  "test_next_prev_specimen",
                  "false"
                ],
                [
                  "test_read_write_redo",
                  "true"
                ],
                [
                  "test_main_frame",
                  "false"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "true"
                ],
                [
                  "test_mark_good_bad_meas",
                  "true"
                ],
                [
                  "test_VGP_viewer",
                  "false"
                ],
                [
                  "test_export_images",
                  "false"
                ],
                [
                  "test_read_write_pmag_tables",
                  "true"
                ],
                [
                  "test_check_empty_dir",
                  "false"
                ],
                [
                  "test_ie_buttons",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fit_next_prev",
                  "false"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "true"
                ],
                [
                  "test_to_str",
                  "false"
                ],
                [
                  "test_add_delete_fit",
                  "false"
                ],
                [
                  "test_next_prev_specimen",
                  "false"
                ],
                [
                  "test_read_write_redo",
                  "false"
                ],
                [
                  "test_main_frame",
                  "false"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "false"
                ],
                [
                  "test_mark_good_bad_meas",
                  "true"
                ],
                [
                  "test_VGP_viewer",
                  "false"
                ],
                [
                  "test_export_images",
                  "false"
                ],
                [
                  "test_read_write_pmag_tables",
                  "false"
                ],
                [
                  "test_check_empty_dir",
                  "false"
                ],
                [
                  "test_ie_buttons",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fit_next_prev",
                  "true"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "false"
                ],
                [
                  "test_to_str",
                  "false"
                ],
                [
                  "test_add_delete_fit",
                  "true"
                ],
                [
                  "test_next_prev_specimen",
                  "true"
                ],
                [
                  "test_read_write_redo",
                  "false"
                ],
                [
                  "test_main_frame",
                  "false"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "true"
                ],
                [
                  "test_mark_good_bad_meas",
                  "true"
                ],
                [
                  "test_VGP_viewer",
                  "false"
                ],
                [
                  "test_export_images",
                  "false"
                ],
                [
                  "test_read_write_pmag_tables",
                  "false"
                ],
                [
                  "test_check_empty_dir",
                  "false"
                ],
                [
                  "test_ie_buttons",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fit_next_prev",
                  "false"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "false"
                ],
                [
                  "test_to_str",
                  "false"
                ],
                [
                  "test_add_delete_fit",
                  "false"
                ],
                [
                  "test_next_prev_specimen",
                  "false"
                ],
                [
                  "test_read_write_redo",
                  "false"
                ],
                [
                  "test_main_frame",
                  "false"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "false"
                ],
                [
                  "test_mark_good_bad_meas",
                  "false"
                ],
                [
                  "test_VGP_viewer",
                  "false"
                ],
                [
                  "test_export_images",
                  "false"
                ],
                [
                  "test_read_write_pmag_tables",
                  "false"
                ],
                [
                  "test_check_empty_dir",
                  "false"
                ],
                [
                  "test_ie_buttons",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_next_prev",
                "false"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "false"
              ],
              [
                "test_to_str",
                "false"
              ],
              [
                "test_add_delete_fit",
                "false"
              ],
              [
                "test_next_prev_specimen",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_main_frame",
                "false"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "false"
              ],
              [
                "test_mark_good_bad_meas",
                "false"
              ],
              [
                "test_VGP_viewer",
                "false"
              ],
              [
                "test_export_images",
                "false"
              ],
              [
                "test_read_write_pmag_tables",
                "false"
              ],
              [
                "test_check_empty_dir",
                "false"
              ],
              [
                "test_ie_buttons",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                "false"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "true"
              ],
              [
                "test_to_str",
                "false"
              ],
              [
                "test_add_delete_fit",
                "false"
              ],
              [
                "test_next_prev_specimen",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_main_frame",
                "false"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "false"
              ],
              [
                "test_mark_good_bad_meas",
                "false"
              ],
              [
                "test_VGP_viewer",
                "false"
              ],
              [
                "test_export_images",
                "false"
              ],
              [
                "test_read_write_pmag_tables",
                "false"
              ],
              [
                "test_check_empty_dir",
                "false"
              ],
              [
                "test_ie_buttons",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                [
                  "self.app"
                ]
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                [
                  "self.app"
                ]
              ],
              [
                "test_to_str",
                [
                  "self.app"
                ]
              ],
              [
                "test_add_delete_fit",
                [
                  "self.app"
                ]
              ],
              [
                "test_next_prev_specimen",
                [
                  "self.app"
                ]
              ],
              [
                "test_read_write_redo",
                [
                  "self.app"
                ]
              ],
              [
                "test_main_frame",
                [
                  "self.app"
                ]
              ],
              [
                "test_check_sample_orientation_bad_good",
                [
                  "self.app"
                ]
              ],
              [
                "test_mark_good_bad_meas",
                [
                  "self.app"
                ]
              ],
              [
                "test_VGP_viewer",
                [
                  "self.app"
                ]
              ],
              [
                "test_export_images",
                [
                  "self.app"
                ]
              ],
              [
                "test_read_write_pmag_tables",
                [
                  "self.app"
                ]
              ],
              [
                "test_check_empty_dir",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_ie_buttons",
                [
                  "self.app"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                "false"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "false"
              ],
              [
                "test_to_str",
                "false"
              ],
              [
                "test_add_delete_fit",
                "false"
              ],
              [
                "test_next_prev_specimen",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_main_frame",
                "false"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "true"
              ],
              [
                "test_mark_good_bad_meas",
                "false"
              ],
              [
                "test_VGP_viewer",
                "true"
              ],
              [
                "test_export_images",
                "false"
              ],
              [
                "test_read_write_pmag_tables",
                "true"
              ],
              [
                "test_check_empty_dir",
                "false"
              ],
              [
                "test_ie_buttons",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                "false"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "false"
              ],
              [
                "test_to_str",
                "false"
              ],
              [
                "test_add_delete_fit",
                "true"
              ],
              [
                "test_next_prev_specimen",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_main_frame",
                "false"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "false"
              ],
              [
                "test_mark_good_bad_meas",
                "true"
              ],
              [
                "test_VGP_viewer",
                "false"
              ],
              [
                "test_export_images",
                "false"
              ],
              [
                "test_read_write_pmag_tables",
                "false"
              ],
              [
                "test_check_empty_dir",
                "false"
              ],
              [
                "test_ie_buttons",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fit_next_prev",
                  "0"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "0"
                ],
                [
                  "test_to_str",
                  "0"
                ],
                [
                  "test_add_delete_fit",
                  "0"
                ],
                [
                  "test_next_prev_specimen",
                  "0"
                ],
                [
                  "test_read_write_redo",
                  "0"
                ],
                [
                  "test_main_frame",
                  "0"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "0"
                ],
                [
                  "test_mark_good_bad_meas",
                  "0"
                ],
                [
                  "test_VGP_viewer",
                  "0"
                ],
                [
                  "test_export_images",
                  "0"
                ],
                [
                  "test_read_write_pmag_tables",
                  "0"
                ],
                [
                  "test_check_empty_dir",
                  "0"
                ],
                [
                  "test_ie_buttons",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fit_next_prev",
                  "0"
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "0"
                ],
                [
                  "test_to_str",
                  "0"
                ],
                [
                  "test_add_delete_fit",
                  "0"
                ],
                [
                  "test_next_prev_specimen",
                  "0"
                ],
                [
                  "test_read_write_redo",
                  "0"
                ],
                [
                  "test_main_frame",
                  "0"
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "0"
                ],
                [
                  "test_mark_good_bad_meas",
                  "0"
                ],
                [
                  "test_VGP_viewer",
                  "0"
                ],
                [
                  "test_export_images",
                  "0"
                ],
                [
                  "test_read_write_pmag_tables",
                  "0"
                ],
                [
                  "test_check_empty_dir",
                  "0"
                ],
                [
                  "test_ie_buttons",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                "false"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "true"
              ],
              [
                "test_to_str",
                "false"
              ],
              [
                "test_add_delete_fit",
                "false"
              ],
              [
                "test_next_prev_specimen",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_main_frame",
                "false"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "false"
              ],
              [
                "test_mark_good_bad_meas",
                "false"
              ],
              [
                "test_VGP_viewer",
                "false"
              ],
              [
                "test_export_images",
                "false"
              ],
              [
                "test_read_write_pmag_tables",
                "true"
              ],
              [
                "test_check_empty_dir",
                "false"
              ],
              [
                "test_ie_buttons",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_next_prev",
                "false"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "false"
              ],
              [
                "test_to_str",
                "false"
              ],
              [
                "test_add_delete_fit",
                "false"
              ],
              [
                "test_next_prev_specimen",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_main_frame",
                "false"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "false"
              ],
              [
                "test_mark_good_bad_meas",
                "false"
              ],
              [
                "test_VGP_viewer",
                "false"
              ],
              [
                "test_export_images",
                "false"
              ],
              [
                "test_read_write_pmag_tables",
                "false"
              ],
              [
                "test_check_empty_dir",
                "false"
              ],
              [
                "test_ie_buttons",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                "2"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "1"
              ],
              [
                "test_to_str",
                "0"
              ],
              [
                "test_add_delete_fit",
                "8"
              ],
              [
                "test_next_prev_specimen",
                "6"
              ],
              [
                "test_read_write_redo",
                "3"
              ],
              [
                "test_main_frame",
                "1"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "6"
              ],
              [
                "test_mark_good_bad_meas",
                "10"
              ],
              [
                "test_VGP_viewer",
                "0"
              ],
              [
                "test_export_images",
                "0"
              ],
              [
                "test_read_write_pmag_tables",
                "3"
              ],
              [
                "test_check_empty_dir",
                "0"
              ],
              [
                "test_ie_buttons",
                "76"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                [
                  "prevfit_menu_evt",
                  "ci",
                  "edit_menu",
                  "nextfit_menu_evt",
                  "add_fit_evt",
                  "fits"
                ]
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                [
                  "gui_interps",
                  "pars",
                  "g",
                  "specimen",
                  "similar_fit_present",
                  "lsq_filenames",
                  "interps"
                ]
              ],
              [
                "test_to_str",
                []
              ],
              [
                "test_add_delete_fit",
                [
                  "tmax",
                  "edit_menu",
                  "tmin",
                  "add_fit_menu_evt",
                  "add_fit_evt",
                  "delete_fit_menu_evt",
                  "delete_fit_evt"
                ]
              ],
              [
                "test_next_prev_specimen",
                [
                  "next_menu_evt",
                  "edit_menu",
                  "prev_evt",
                  "s_old",
                  "next_evt",
                  "prev_menu_evt"
                ]
              ],
              [
                "test_read_write_redo",
                [
                  "importredo_menu_evt",
                  "file_menu",
                  "writeredo_menu_evt",
                  "ie",
                  "old_frame",
                  "imported_frame",
                  "imported_interpretations",
                  "old_interpretations",
                  "addall_evt"
                ]
              ],
              [
                "test_main_frame",
                []
              ],
              [
                "test_check_sample_orientation_bad_good",
                [
                  "specs",
                  "samp",
                  "analysis_menu",
                  "check_sample_menu",
                  "mark_sample_good_menu_evt",
                  "check_orient_menu_evt",
                  "mark_sample_bad_menu_evt"
                ]
              ],
              [
                "test_mark_good_bad_meas",
                [
                  "tmin_box_evt",
                  "total_num_of_good_meas_data",
                  "markbad_menu_evt",
                  "tmax",
                  "tmin",
                  "tmax_box_evt",
                  "add_fit_evt",
                  "mark_meas_data_menu",
                  "delete_fit_evt",
                  "n",
                  "fit",
                  "edit_menu",
                  "meas_data_before",
                  "markgood_menu_evt",
                  "total_n"
                ]
              ],
              [
                "test_VGP_viewer",
                [
                  "tools_menu",
                  "viewVGPs_menu_evt"
                ]
              ],
              [
                "test_export_images",
                [
                  "export_images_menu",
                  "file_menu",
                  "export_all_images_menu_evt"
                ]
              ],
              [
                "test_read_write_pmag_tables",
                [
                  "file_menu",
                  "speci_with_fits",
                  "frame2",
                  "old_frame",
                  "imported_frame",
                  "imported_interpretations",
                  "writepmag_menu_evt",
                  "old_interpretations"
                ]
              ],
              [
                "test_check_empty_dir",
                []
              ],
              [
                "test_ie_buttons",
                [
                  "addhighlight_evt",
                  "k0",
                  "tmax",
                  "k1",
                  "tmin",
                  "addall_evt",
                  "fit",
                  "gui_fit",
                  "new_fits",
                  "valid_specs",
                  "tmin_index",
                  "ie",
                  "tmax_index",
                  "delete_evt",
                  "apply_change_evt"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                [
                  "self.frame"
                ]
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                [
                  "self.frame"
                ]
              ],
              [
                "test_to_str",
                [
                  "self.frame"
                ]
              ],
              [
                "test_add_delete_fit",
                [
                  "self.frame"
                ]
              ],
              [
                "test_next_prev_specimen",
                [
                  "self.frame"
                ]
              ],
              [
                "test_read_write_redo",
                [
                  "self.frame"
                ]
              ],
              [
                "test_main_frame",
                [
                  "self.frame"
                ]
              ],
              [
                "test_check_sample_orientation_bad_good",
                [
                  "self.frame"
                ]
              ],
              [
                "test_mark_good_bad_meas",
                [
                  "self.frame"
                ]
              ],
              [
                "test_VGP_viewer",
                [
                  "self.frame"
                ]
              ],
              [
                "test_export_images",
                [
                  "self.frame"
                ]
              ],
              [
                "test_read_write_pmag_tables",
                [
                  "self.frame"
                ]
              ],
              [
                "test_check_empty_dir",
                []
              ],
              [
                "test_ie_buttons",
                [
                  "self.frame"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3152222093147819,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_next_prev_specimen",
                  "test_mark_good_bad_meas",
                  0.5316970188725787
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "test_export_images",
                  0.46385123834666514
                ],
                [
                  "test_check_empty_dir",
                  "test_interpretation_accuracy_with_lsq",
                  0.28463086612470573
                ],
                [
                  "test_to_str",
                  "test_mark_good_bad_meas",
                  0.05155921331679783
                ],
                [
                  "test_add_delete_fit",
                  "test_next_prev_specimen",
                  0.6422304671685316
                ],
                [
                  "test_add_delete_fit",
                  "test_read_write_redo",
                  0.552038864904182
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_read_write_redo",
                  0.48601016373274897
                ],
                [
                  "test_read_write_pmag_tables",
                  "test_VGP_viewer",
                  0.30311581059204495
                ],
                [
                  "test_to_str",
                  "test_check_sample_orientation_bad_good",
                  0.053168177735135054
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_read_write_pmag_tables",
                  0.3138447436831025
                ],
                [
                  "test_to_str",
                  "test_export_images",
                  0.07669649888473704
                ],
                [
                  "test_add_delete_fit",
                  "test_main_frame",
                  0.15375520133814752
                ],
                [
                  "test_add_delete_fit",
                  "test_read_write_pmag_tables",
                  0.32389473817652503
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_main_frame",
                  0.07321518861696907
                ],
                [
                  "test_ie_buttons",
                  "test_VGP_viewer",
                  0.203730453923291
                ],
                [
                  "test_next_prev_specimen",
                  "test_VGP_viewer",
                  0.5427143292042428
                ],
                [
                  "test_check_empty_dir",
                  "test_ie_buttons",
                  0.15676420022821322
                ],
                [
                  "test_to_str",
                  "test_ie_buttons",
                  0.022696976334670393
                ],
                [
                  "test_next_prev_specimen",
                  "test_check_sample_orientation_bad_good",
                  0.5955555478141082
                ],
                [
                  "test_read_write_redo",
                  "test_VGP_viewer",
                  0.4977233561314232
                ],
                [
                  "test_check_empty_dir",
                  "test_add_delete_fit",
                  0.11079241437693162
                ],
                [
                  "test_check_empty_dir",
                  "test_VGP_viewer",
                  0.2249304372476367
                ],
                [
                  "test_next_prev_specimen",
                  "test_ie_buttons",
                  0.37409136907092416
                ],
                [
                  "test_to_str",
                  "test_VGP_viewer",
                  0.14654866108946232
                ],
                [
                  "test_check_empty_dir",
                  "test_to_str",
                  0.2631174057921088
                ],
                [
                  "test_ie_buttons",
                  "test_main_frame",
                  0.20460417252648588
                ],
                [
                  "test_next_prev_specimen",
                  "test_interpretation_accuracy_with_lsq",
                  0.27336803083114264
                ],
                [
                  "test_check_empty_dir",
                  "test_mark_good_bad_meas",
                  0.16078372091967755
                ],
                [
                  "test_check_empty_dir",
                  "test_check_sample_orientation_bad_good",
                  0.23315788327270826
                ],
                [
                  "test_to_str",
                  "test_interpretation_accuracy_with_lsq",
                  0.039336862882432995
                ],
                [
                  "test_next_prev_specimen",
                  "test_fit_next_prev",
                  0.7282058373179509
                ],
                [
                  "test_add_delete_fit",
                  "test_fit_next_prev",
                  0.7527594828460936
                ],
                [
                  "test_fit_next_prev",
                  "test_mark_good_bad_meas",
                  0.5536537055681021
                ],
                [
                  "test_fit_next_prev",
                  "test_read_write_redo",
                  0.646237989798551
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "test_export_images",
                  0.15839248216005775
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "test_check_sample_orientation_bad_good",
                  0.3830003187261372
                ],
                [
                  "test_to_str",
                  "test_fit_next_prev",
                  0.04147806778921701
                ],
                [
                  "test_fit_next_prev",
                  "test_interpretation_accuracy_with_lsq",
                  0.32428389171897215
                ],
                [
                  "test_ie_buttons",
                  "test_interpretation_accuracy_with_lsq",
                  0.3755457126912592
                ],
                [
                  "test_ie_buttons",
                  "test_export_images",
                  0.13817430297352923
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "test_main_frame",
                  0.0538642178554906
                ],
                [
                  "test_export_images",
                  "test_main_frame",
                  0.0700140042014005
                ],
                [
                  "test_VGP_viewer",
                  "test_export_images",
                  0.46364048039956585
                ],
                [
                  "test_read_write_pmag_tables",
                  "test_check_sample_orientation_bad_good",
                  0.418088269788694
                ],
                [
                  "test_read_write_redo",
                  "test_check_sample_orientation_bad_good",
                  0.5644551337711363
                ],
                [
                  "test_read_write_redo",
                  "test_export_images",
                  0.5246119216094453
                ],
                [
                  "test_read_write_redo",
                  "test_main_frame",
                  0.08672403914199503
                ],
                [
                  "test_fit_next_prev",
                  "test_VGP_viewer",
                  0.5394717827940342
                ],
                [
                  "test_add_delete_fit",
                  "test_ie_buttons",
                  0.42577108200939495
                ],
                [
                  "test_to_str",
                  "test_add_delete_fit",
                  0.033686076842660756
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_ie_buttons",
                  0.4102335179280016
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_VGP_viewer",
                  0.40823030568036806
                ],
                [
                  "test_check_empty_dir",
                  "test_read_write_pmag_tables",
                  0.28109979369806376
                ],
                [
                  "test_add_delete_fit",
                  "test_VGP_viewer",
                  0.4597254808366581
                ],
                [
                  "test_fit_next_prev",
                  "test_ie_buttons",
                  0.31596634391349115
                ],
                [
                  "test_check_sample_orientation_bad_good",
                  "test_main_frame",
                  0.10920528857616528
                ],
                [
                  "test_to_str",
                  "test_read_write_redo",
                  0.0950014250320633
                ],
                [
                  "test_add_delete_fit",
                  "test_interpretation_accuracy_with_lsq",
                  0.24680072910652537
                ],
                [
                  "test_next_prev_specimen",
                  "test_read_write_redo",
                  0.6619413347183022
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_interpretation_accuracy_with_lsq",
                  0.32788872890531995
                ],
                [
                  "test_add_delete_fit",
                  "test_mark_good_bad_meas",
                  0.5437235360270449
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_export_images",
                  0.3350264999244888
                ],
                [
                  "test_add_delete_fit",
                  "test_check_sample_orientation_bad_good",
                  0.5003682577401201
                ],
                [
                  "test_add_delete_fit",
                  "test_export_images",
                  0.4069176544116018
                ],
                [
                  "test_to_str",
                  "test_read_write_pmag_tables",
                  0.08944271909999157
                ],
                [
                  "test_mark_good_bad_meas",
                  "test_check_sample_orientation_bad_good",
                  0.521610264165335
                ],
                [
                  "test_next_prev_specimen",
                  "test_read_write_pmag_tables",
                  0.3121502130084709
                ],
                [
                  "test_interpretation_accuracy_with_lsq",
                  "test_VGP_viewer",
                  0.25941440640961455
                ],
                [
                  "test_check_empty_dir",
                  "test_read_write_redo",
                  0.19164005184092334
                ],
                [
                  "test_check_empty_dir",
                  "test_next_prev_specimen",
                  0.16841548827686809
                ],
                [
                  "test_read_write_redo",
                  "test_ie_buttons",
                  0.3371828268420742
                ],
                [
                  "test_check_empty_dir",
                  "test_main_frame",
                  0.16012815380508716
                ],
                [
                  "test_read_write_pmag_tables",
                  "test_main_frame",
                  0.08164965809277261
                ],
                [
                  "test_fit_next_prev",
                  "test_export_images",
                  0.4811599152154304
                ],
                [
                  "test_read_write_redo",
                  "test_interpretation_accuracy_with_lsq",
                  0.3681002159670181
                ],
                [
                  "test_fit_next_prev",
                  "test_read_write_pmag_tables",
                  0.366353727650533
                ],
                [
                  "test_check_empty_dir",
                  "test_fit_next_prev",
                  0.13642001992460012
                ],
                [
                  "test_read_write_redo",
                  "test_read_write_pmag_tables",
                  0.580641027838186
                ],
                [
                  "test_ie_buttons",
                  "test_check_sample_orientation_bad_good",
                  0.37352896297803023
                ],
                [
                  "test_read_write_pmag_tables",
                  "test_export_images",
                  0.2486729484566378
                ],
                [
                  "test_VGP_viewer",
                  "test_check_sample_orientation_bad_good",
                  0.5259414550264159
                ],
                [
                  "test_read_write_pmag_tables",
                  "test_ie_buttons",
                  0.36372253743752697
                ],
                [
                  "test_VGP_viewer",
                  "test_main_frame",
                  0.10033500931359769
                ],
                [
                  "test_to_str",
                  "test_main_frame",
                  0.3651483716701107
                ],
                [
                  "test_next_prev_specimen",
                  "test_main_frame",
                  0.13355611265883557
                ],
                [
                  "test_fit_next_prev",
                  "test_main_frame",
                  0.07572824456627532
                ],
                [
                  "test_fit_next_prev",
                  "test_check_sample_orientation_bad_good",
                  0.5802730568860605
                ],
                [
                  "test_next_prev_specimen",
                  "test_export_images",
                  0.49091690722296755
                ],
                [
                  "test_read_write_pmag_tables",
                  "test_interpretation_accuracy_with_lsq",
                  0.4749834569042259
                ],
                [
                  "test_check_empty_dir",
                  "test_export_images",
                  0.11771773894935468
                ],
                [
                  "test_to_str",
                  "test_next_prev_specimen",
                  0.03657584779797275
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_next_prev",
                "false"
              ],
              [
                "test_interpretation_accuracy_with_lsq",
                "false"
              ],
              [
                "test_to_str",
                "false"
              ],
              [
                "test_add_delete_fit",
                "false"
              ],
              [
                "test_next_prev_specimen",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_main_frame",
                "false"
              ],
              [
                "test_check_sample_orientation_bad_good",
                "true"
              ],
              [
                "test_mark_good_bad_meas",
                "false"
              ],
              [
                "test_VGP_viewer",
                "false"
              ],
              [
                "test_export_images",
                "false"
              ],
              [
                "test_read_write_pmag_tables",
                "true"
              ],
              [
                "test_check_empty_dir",
                "false"
              ],
              [
                "test_ie_buttons",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 14
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_magic_gui.py",
    "testCases": [
      {
        "name": "TestMainFrame",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_data_object_is_created",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_specimen_button",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_age_button",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_location_button",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_measurement_button",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_sample_button",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_site_button",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_main_panel_is_created",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_data_object_is_created",
                  "[]"
                ],
                [
                  "test_specimen_button",
                  "[]"
                ],
                [
                  "test_age_button",
                  "[]"
                ],
                [
                  "test_location_button",
                  "[]"
                ],
                [
                  "test_measurement_button",
                  "[]"
                ],
                [
                  "test_sample_button",
                  "[]"
                ],
                [
                  "test_site_button",
                  "[]"
                ],
                [
                  "test_main_panel_is_created",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_specimen_button",
                  "false"
                ],
                [
                  "test_age_button",
                  "false"
                ],
                [
                  "test_location_button",
                  "false"
                ],
                [
                  "test_measurement_button",
                  "false"
                ],
                [
                  "test_sample_button",
                  "false"
                ],
                [
                  "test_site_button",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_specimen_button",
                  "false"
                ],
                [
                  "test_age_button",
                  "false"
                ],
                [
                  "test_location_button",
                  "false"
                ],
                [
                  "test_measurement_button",
                  "false"
                ],
                [
                  "test_sample_button",
                  "false"
                ],
                [
                  "test_site_button",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_specimen_button",
                  "false"
                ],
                [
                  "test_age_button",
                  "false"
                ],
                [
                  "test_location_button",
                  "false"
                ],
                [
                  "test_measurement_button",
                  "false"
                ],
                [
                  "test_sample_button",
                  "false"
                ],
                [
                  "test_site_button",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_data_object_is_created",
                  "false"
                ],
                [
                  "test_specimen_button",
                  "false"
                ],
                [
                  "test_age_button",
                  "false"
                ],
                [
                  "test_location_button",
                  "false"
                ],
                [
                  "test_measurement_button",
                  "false"
                ],
                [
                  "test_sample_button",
                  "false"
                ],
                [
                  "test_site_button",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_specimen_button",
                "false"
              ],
              [
                "test_age_button",
                "false"
              ],
              [
                "test_location_button",
                "false"
              ],
              [
                "test_measurement_button",
                "false"
              ],
              [
                "test_sample_button",
                "false"
              ],
              [
                "test_site_button",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_specimen_button",
                "false"
              ],
              [
                "test_age_button",
                "false"
              ],
              [
                "test_location_button",
                "false"
              ],
              [
                "test_measurement_button",
                "false"
              ],
              [
                "test_sample_button",
                "false"
              ],
              [
                "test_site_button",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_data_object_is_created",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_specimen_button",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_age_button",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_location_button",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_measurement_button",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_sample_button",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_site_button",
                [
                  "self.frame",
                  "self.app"
                ]
              ],
              [
                "test_main_panel_is_created",
                [
                  "self.app"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_specimen_button",
                "false"
              ],
              [
                "test_age_button",
                "false"
              ],
              [
                "test_location_button",
                "false"
              ],
              [
                "test_measurement_button",
                "false"
              ],
              [
                "test_sample_button",
                "false"
              ],
              [
                "test_site_button",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_specimen_button",
                "false"
              ],
              [
                "test_age_button",
                "false"
              ],
              [
                "test_location_button",
                "false"
              ],
              [
                "test_measurement_button",
                "false"
              ],
              [
                "test_sample_button",
                "false"
              ],
              [
                "test_site_button",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_data_object_is_created",
                  "0"
                ],
                [
                  "test_specimen_button",
                  "0"
                ],
                [
                  "test_age_button",
                  "0"
                ],
                [
                  "test_location_button",
                  "0"
                ],
                [
                  "test_measurement_button",
                  "0"
                ],
                [
                  "test_sample_button",
                  "0"
                ],
                [
                  "test_site_button",
                  "0"
                ],
                [
                  "test_main_panel_is_created",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_data_object_is_created",
                  "0"
                ],
                [
                  "test_specimen_button",
                  "0"
                ],
                [
                  "test_age_button",
                  "0"
                ],
                [
                  "test_location_button",
                  "0"
                ],
                [
                  "test_measurement_button",
                  "0"
                ],
                [
                  "test_sample_button",
                  "0"
                ],
                [
                  "test_site_button",
                  "0"
                ],
                [
                  "test_main_panel_is_created",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_specimen_button",
                "false"
              ],
              [
                "test_age_button",
                "false"
              ],
              [
                "test_location_button",
                "false"
              ],
              [
                "test_measurement_button",
                "false"
              ],
              [
                "test_sample_button",
                "false"
              ],
              [
                "test_site_button",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_specimen_button",
                "false"
              ],
              [
                "test_age_button",
                "false"
              ],
              [
                "test_location_button",
                "false"
              ],
              [
                "test_measurement_button",
                "false"
              ],
              [
                "test_sample_button",
                "false"
              ],
              [
                "test_site_button",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "5"
              ],
              [
                "test_specimen_button",
                "3"
              ],
              [
                "test_age_button",
                "3"
              ],
              [
                "test_location_button",
                "3"
              ],
              [
                "test_measurement_button",
                "4"
              ],
              [
                "test_sample_button",
                "3"
              ],
              [
                "test_site_button",
                "3"
              ],
              [
                "test_main_panel_is_created",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                []
              ],
              [
                "test_specimen_button",
                [
                  "window"
                ]
              ],
              [
                "test_age_button",
                [
                  "window"
                ]
              ],
              [
                "test_location_button",
                [
                  "window"
                ]
              ],
              [
                "test_measurement_button",
                [
                  "window"
                ]
              ],
              [
                "test_sample_button",
                [
                  "window"
                ]
              ],
              [
                "test_site_button",
                [
                  "window"
                ]
              ],
              [
                "test_main_panel_is_created",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                [
                  "self.frame"
                ]
              ],
              [
                "test_specimen_button",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_age_button",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_location_button",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_measurement_button",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_sample_button",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_site_button",
                [
                  "self.pnl"
                ]
              ],
              [
                "test_main_panel_is_created",
                [
                  "self.frame",
                  "self.pnl"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6452643547749262,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_data_object_is_created",
                  "test_specimen_button",
                  0.3500700210070024
                ],
                [
                  "test_specimen_button",
                  "test_location_button",
                  0.90625
                ],
                [
                  "test_main_panel_is_created",
                  "test_location_button",
                  0.33596597197983935
                ],
                [
                  "test_data_object_is_created",
                  "test_age_button",
                  0.3500700210070024
                ],
                [
                  "test_site_button",
                  "test_location_button",
                  0.90625
                ],
                [
                  "test_sample_button",
                  "test_measurement_button",
                  0.8779385507546066
                ],
                [
                  "test_data_object_is_created",
                  "test_site_button",
                  0.3500700210070024
                ],
                [
                  "test_site_button",
                  "test_measurement_button",
                  0.8779385507546066
                ],
                [
                  "test_sample_button",
                  "test_location_button",
                  0.90625
                ],
                [
                  "test_specimen_button",
                  "test_sample_button",
                  0.90625
                ],
                [
                  "test_specimen_button",
                  "test_site_button",
                  0.90625
                ],
                [
                  "test_age_button",
                  "test_measurement_button",
                  0.8779385507546066
                ],
                [
                  "test_main_panel_is_created",
                  "test_measurement_button",
                  0.35859145288247934
                ],
                [
                  "test_main_panel_is_created",
                  "test_sample_button",
                  0.33596597197983935
                ],
                [
                  "test_main_panel_is_created",
                  "test_site_button",
                  0.33596597197983935
                ],
                [
                  "test_data_object_is_created",
                  "test_measurement_button",
                  0.3816520186050666
                ],
                [
                  "test_data_object_is_created",
                  "test_sample_button",
                  0.3500700210070024
                ],
                [
                  "test_location_button",
                  "test_age_button",
                  0.90625
                ],
                [
                  "test_specimen_button",
                  "test_measurement_button",
                  0.8779385507546066
                ],
                [
                  "test_main_panel_is_created",
                  "test_age_button",
                  0.33596597197983935
                ],
                [
                  "test_sample_button",
                  "test_age_button",
                  0.90625
                ],
                [
                  "test_site_button",
                  "test_age_button",
                  0.90625
                ],
                [
                  "test_sample_button",
                  "test_site_button",
                  0.90625
                ],
                [
                  "test_main_panel_is_created",
                  "test_data_object_is_created",
                  0.44478574350314604
                ],
                [
                  "test_data_object_is_created",
                  "test_location_button",
                  0.3500700210070024
                ],
                [
                  "test_specimen_button",
                  "test_age_button",
                  0.90625
                ],
                [
                  "test_main_panel_is_created",
                  "test_specimen_button",
                  0.33596597197983935
                ],
                [
                  "test_location_button",
                  "test_measurement_button",
                  0.8779385507546066
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_data_object_is_created",
                "false"
              ],
              [
                "test_specimen_button",
                "false"
              ],
              [
                "test_age_button",
                "false"
              ],
              [
                "test_location_button",
                "false"
              ],
              [
                "test_measurement_button",
                "false"
              ],
              [
                "test_sample_button",
                "false"
              ],
              [
                "test_site_button",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      },
      {
        "name": "TestMagICGUIMenu",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_close_grid",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_that_all_menus_exist",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_show_mainframe",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_close_grid",
                  "[]"
                ],
                [
                  "test_that_all_menus_exist",
                  "[]"
                ],
                [
                  "test_show_mainframe",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_close_grid",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "true"
                ],
                [
                  "test_show_mainframe",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_close_grid",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "false"
                ],
                [
                  "test_show_mainframe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_close_grid",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "false"
                ],
                [
                  "test_show_mainframe",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_close_grid",
                  "false"
                ],
                [
                  "test_that_all_menus_exist",
                  "false"
                ],
                [
                  "test_show_mainframe",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_show_mainframe",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_show_mainframe",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_close_grid",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_that_all_menus_exist",
                [
                  "self.app",
                  "self.pnl",
                  "self.contribution"
                ]
              ],
              [
                "test_show_mainframe",
                [
                  "self.app",
                  "self.pnl",
                  "self.contribution"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_show_mainframe",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_show_mainframe",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_close_grid",
                  "0"
                ],
                [
                  "test_that_all_menus_exist",
                  "0"
                ],
                [
                  "test_show_mainframe",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_close_grid",
                  "0"
                ],
                [
                  "test_that_all_menus_exist",
                  "0"
                ],
                [
                  "test_show_mainframe",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_show_mainframe",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_show_mainframe",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "1"
              ],
              [
                "test_that_all_menus_exist",
                "4"
              ],
              [
                "test_show_mainframe",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                [
                  "close_item",
                  "close_id",
                  "fmenu",
                  "fmenu_name",
                  "menus",
                  "event"
                ]
              ],
              [
                "test_that_all_menus_exist",
                [
                  "menus",
                  "found_menus",
                  "menu_names"
                ]
              ],
              [
                "test_show_mainframe",
                [
                  "fmenu",
                  "show_id",
                  "fmenu_name",
                  "menus",
                  "event",
                  "show_item"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                [
                  "self.frame",
                  "self.contribution"
                ]
              ],
              [
                "test_that_all_menus_exist",
                [
                  "self.frame"
                ]
              ],
              [
                "test_show_mainframe",
                [
                  "self.frame"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5420619049207388,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_that_all_menus_exist",
                  "test_close_grid",
                  0.42705437283711206
                ],
                [
                  "test_that_all_menus_exist",
                  "test_show_mainframe",
                  0.48076571898433407
                ],
                [
                  "test_show_mainframe",
                  "test_close_grid",
                  0.7183656229407704
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_close_grid",
                "false"
              ],
              [
                "test_that_all_menus_exist",
                "false"
              ],
              [
                "test_show_mainframe",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_map_magic.py",
    "testCases": [
      {
        "name": "TestMapping",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_meas_map",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_samp_map",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_all_values_in_maps",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_loc_map",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_spec_map",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_site_map",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_spec_name",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_meas_map",
                  "[]"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "[]"
                ],
                [
                  "test_samp_map",
                  "[]"
                ],
                [
                  "test_all_values_in_maps",
                  "[]"
                ],
                [
                  "test_loc_map",
                  "[]"
                ],
                [
                  "test_spec_map",
                  "[]"
                ],
                [
                  "test_site_map",
                  "[]"
                ],
                [
                  "test_spec_name",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_meas_map",
                  "true"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "false"
                ],
                [
                  "test_samp_map",
                  "true"
                ],
                [
                  "test_all_values_in_maps",
                  "true"
                ],
                [
                  "test_loc_map",
                  "true"
                ],
                [
                  "test_spec_map",
                  "true"
                ],
                [
                  "test_site_map",
                  "true"
                ],
                [
                  "test_spec_name",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_meas_map",
                  "true"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "true"
                ],
                [
                  "test_samp_map",
                  "true"
                ],
                [
                  "test_all_values_in_maps",
                  "false"
                ],
                [
                  "test_loc_map",
                  "true"
                ],
                [
                  "test_spec_map",
                  "true"
                ],
                [
                  "test_site_map",
                  "true"
                ],
                [
                  "test_spec_name",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_meas_map",
                  "false"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "false"
                ],
                [
                  "test_samp_map",
                  "false"
                ],
                [
                  "test_all_values_in_maps",
                  "false"
                ],
                [
                  "test_loc_map",
                  "false"
                ],
                [
                  "test_spec_map",
                  "false"
                ],
                [
                  "test_site_map",
                  "false"
                ],
                [
                  "test_spec_name",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_meas_map",
                  "false"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "false"
                ],
                [
                  "test_samp_map",
                  "false"
                ],
                [
                  "test_all_values_in_maps",
                  "false"
                ],
                [
                  "test_loc_map",
                  "false"
                ],
                [
                  "test_spec_map",
                  "false"
                ],
                [
                  "test_site_map",
                  "false"
                ],
                [
                  "test_spec_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                "false"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "false"
              ],
              [
                "test_samp_map",
                "false"
              ],
              [
                "test_all_values_in_maps",
                "false"
              ],
              [
                "test_loc_map",
                "false"
              ],
              [
                "test_spec_map",
                "false"
              ],
              [
                "test_site_map",
                "false"
              ],
              [
                "test_spec_name",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                "false"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "false"
              ],
              [
                "test_samp_map",
                "false"
              ],
              [
                "test_all_values_in_maps",
                "false"
              ],
              [
                "test_loc_map",
                "false"
              ],
              [
                "test_spec_map",
                "false"
              ],
              [
                "test_site_map",
                "false"
              ],
              [
                "test_spec_name",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                []
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                []
              ],
              [
                "test_samp_map",
                []
              ],
              [
                "test_all_values_in_maps",
                []
              ],
              [
                "test_loc_map",
                []
              ],
              [
                "test_spec_map",
                []
              ],
              [
                "test_site_map",
                []
              ],
              [
                "test_spec_name",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                "false"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "false"
              ],
              [
                "test_samp_map",
                "false"
              ],
              [
                "test_all_values_in_maps",
                "false"
              ],
              [
                "test_loc_map",
                "false"
              ],
              [
                "test_spec_map",
                "false"
              ],
              [
                "test_site_map",
                "false"
              ],
              [
                "test_spec_name",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                "false"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "false"
              ],
              [
                "test_samp_map",
                "false"
              ],
              [
                "test_all_values_in_maps",
                "false"
              ],
              [
                "test_loc_map",
                "false"
              ],
              [
                "test_spec_map",
                "false"
              ],
              [
                "test_site_map",
                "false"
              ],
              [
                "test_spec_name",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_meas_map",
                  "0"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "0"
                ],
                [
                  "test_samp_map",
                  "0"
                ],
                [
                  "test_all_values_in_maps",
                  "0"
                ],
                [
                  "test_loc_map",
                  "0"
                ],
                [
                  "test_spec_map",
                  "0"
                ],
                [
                  "test_site_map",
                  "0"
                ],
                [
                  "test_spec_name",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_meas_map",
                  "0"
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "0"
                ],
                [
                  "test_samp_map",
                  "0"
                ],
                [
                  "test_all_values_in_maps",
                  "0"
                ],
                [
                  "test_loc_map",
                  "0"
                ],
                [
                  "test_spec_map",
                  "0"
                ],
                [
                  "test_site_map",
                  "0"
                ],
                [
                  "test_spec_name",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                "false"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "false"
              ],
              [
                "test_samp_map",
                "false"
              ],
              [
                "test_all_values_in_maps",
                "false"
              ],
              [
                "test_loc_map",
                "false"
              ],
              [
                "test_spec_map",
                "false"
              ],
              [
                "test_site_map",
                "false"
              ],
              [
                "test_spec_name",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                "false"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "false"
              ],
              [
                "test_samp_map",
                "false"
              ],
              [
                "test_all_values_in_maps",
                "false"
              ],
              [
                "test_loc_map",
                "false"
              ],
              [
                "test_spec_map",
                "false"
              ],
              [
                "test_site_map",
                "false"
              ],
              [
                "test_spec_name",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                "2"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "1"
              ],
              [
                "test_samp_map",
                "2"
              ],
              [
                "test_all_values_in_maps",
                "1"
              ],
              [
                "test_loc_map",
                "2"
              ],
              [
                "test_spec_map",
                "2"
              ],
              [
                "test_site_map",
                "3"
              ],
              [
                "test_spec_name",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                [
                  "output",
                  "magic3_keys",
                  "magic2_dict",
                  "magic2_keys"
                ]
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                [
                  "output",
                  "magic3_keys",
                  "magic2_keys",
                  "magic3_dict"
                ]
              ],
              [
                "test_samp_map",
                [
                  "output",
                  "magic3_keys",
                  "magic2_dict",
                  "magic2_keys"
                ]
              ],
              [
                "test_all_values_in_maps",
                [
                  "values",
                  "ignore"
                ]
              ],
              [
                "test_loc_map",
                [
                  "output",
                  "magic3_keys",
                  "magic2_dict",
                  "magic2_keys"
                ]
              ],
              [
                "test_spec_map",
                [
                  "output",
                  "magic3_keys",
                  "magic2_dict",
                  "magic2_keys"
                ]
              ],
              [
                "test_site_map",
                [
                  "output",
                  "magic3_keys",
                  "magic2_dict",
                  "magic2_keys",
                  "magic3_dict"
                ]
              ],
              [
                "test_spec_name",
                [
                  "output",
                  "magic3_keys",
                  "magic2_dict",
                  "magic2_keys"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_meas_map",
                []
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                []
              ],
              [
                "test_samp_map",
                []
              ],
              [
                "test_all_values_in_maps",
                []
              ],
              [
                "test_loc_map",
                []
              ],
              [
                "test_spec_map",
                []
              ],
              [
                "test_site_map",
                []
              ],
              [
                "test_spec_name",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7142346736251951,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_spec_name",
                  "test_samp_map_with_adjusted_vocab",
                  0.8978957222816735
                ],
                [
                  "test_samp_map",
                  "test_all_values_in_maps",
                  0.3014454764514555
                ],
                [
                  "test_meas_map",
                  "test_site_map",
                  0.8874358911398538
                ],
                [
                  "test_spec_name",
                  "test_site_map",
                  0.9047912896703745
                ],
                [
                  "test_spec_map",
                  "test_site_map",
                  0.8547742999663456
                ],
                [
                  "test_spec_map",
                  "test_all_values_in_maps",
                  0.293051938196277
                ],
                [
                  "test_meas_map",
                  "test_samp_map_with_adjusted_vocab",
                  0.8203800892150541
                ],
                [
                  "test_meas_map",
                  "test_spec_map",
                  0.8341693535699072
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "test_all_values_in_maps",
                  0.23217569619913692
                ],
                [
                  "test_spec_name",
                  "test_all_values_in_maps",
                  0.22908245508718303
                ],
                [
                  "test_spec_map",
                  "test_samp_map_with_adjusted_vocab",
                  0.8082272365789394
                ],
                [
                  "test_meas_map",
                  "test_loc_map",
                  0.8660436137071651
                ],
                [
                  "test_meas_map",
                  "test_all_values_in_maps",
                  0.29839872540306395
                ],
                [
                  "test_samp_map",
                  "test_loc_map",
                  0.8549749225500864
                ],
                [
                  "test_site_map",
                  "test_loc_map",
                  0.8743025904253104
                ],
                [
                  "test_spec_name",
                  "test_samp_map",
                  0.8695144584096202
                ],
                [
                  "test_spec_name",
                  "test_loc_map",
                  0.8746282132825572
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "test_loc_map",
                  0.8241261170196891
                ],
                [
                  "test_spec_map",
                  "test_samp_map",
                  0.8472916652092567
                ],
                [
                  "test_site_map",
                  "test_all_values_in_maps",
                  0.2713303616361223
                ],
                [
                  "test_loc_map",
                  "test_all_values_in_maps",
                  0.29839872540306395
                ],
                [
                  "test_spec_map",
                  "test_loc_map",
                  0.8491723994974234
                ],
                [
                  "test_samp_map",
                  "test_site_map",
                  0.9034221983551192
                ],
                [
                  "test_spec_map",
                  "test_spec_name",
                  0.8538997431862579
                ],
                [
                  "test_meas_map",
                  "test_spec_name",
                  0.8746282132825572
                ],
                [
                  "test_samp_map_with_adjusted_vocab",
                  "test_site_map",
                  0.8527930989571567
                ],
                [
                  "test_meas_map",
                  "test_samp_map",
                  0.8611480266840221
                ],
                [
                  "test_samp_map",
                  "test_samp_map_with_adjusted_vocab",
                  0.8610683401407897
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_meas_map",
                "false"
              ],
              [
                "test_samp_map_with_adjusted_vocab",
                "false"
              ],
              [
                "test_samp_map",
                "false"
              ],
              [
                "test_all_values_in_maps",
                "true"
              ],
              [
                "test_loc_map",
                "false"
              ],
              [
                "test_spec_map",
                "false"
              ],
              [
                "test_site_map",
                "false"
              ],
              [
                "test_spec_name",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      },
      {
        "name": "TestThellierGUIMapping",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn]"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "[]"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "false"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "false"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "false"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "false"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "false"
              ],
              [
                "test_with_numeric_measurement_name",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "false"
              ],
              [
                "test_with_numeric_measurement_name",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                []
              ],
              [
                "test_with_numeric_measurement_name",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "false"
              ],
              [
                "test_with_numeric_measurement_name",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "true"
              ],
              [
                "test_with_numeric_measurement_name",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "0"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "0"
                ],
                [
                  "test_with_numeric_measurement_name",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "false"
              ],
              [
                "test_with_numeric_measurement_name",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "false"
              ],
              [
                "test_with_numeric_measurement_name",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "10"
              ],
              [
                "test_with_numeric_measurement_name",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                [
                  "meas_data3_0",
                  "meas_data3_again",
                  "meas_data2_5",
                  "meas_data3_0_again"
                ]
              ],
              [
                "test_with_numeric_measurement_name",
                [
                  "meas_names",
                  "meas_data3_again",
                  "meas_data3",
                  "meas_data2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                [
                  "self.magic_file"
                ]
              ],
              [
                "test_with_numeric_measurement_name",
                [
                  "self.magic_file"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8416352426169589,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_thellier_gui_meas_mapping",
                  "test_with_numeric_measurement_name",
                  0.8416352426169589
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_thellier_gui_meas_mapping",
                "false"
              ],
              [
                "test_with_numeric_measurement_name",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_make_plots.py",
    "testCases": [
      {
        "name": "TestMakeMagicPlots",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_make_plots_long",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_make_plots",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_make_plots_long",
                  "[]"
                ],
                [
                  "test_make_plots",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_make_plots_long",
                  "true"
                ],
                [
                  "test_make_plots",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_make_plots_long",
                  "false"
                ],
                [
                  "test_make_plots",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_make_plots_long",
                  "false"
                ],
                [
                  "test_make_plots",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_make_plots_long",
                  "false"
                ],
                [
                  "test_make_plots",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                "false"
              ],
              [
                "test_make_plots",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                "false"
              ],
              [
                "test_make_plots",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                []
              ],
              [
                "test_make_plots",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                "false"
              ],
              [
                "test_make_plots",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_make_plots_long",
                "true"
              ],
              [
                "test_make_plots",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_make_plots_long",
                  "0"
                ],
                [
                  "test_make_plots",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_make_plots_long",
                  "0"
                ],
                [
                  "test_make_plots",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_make_plots_long",
                "true"
              ],
              [
                "test_make_plots",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                "false"
              ],
              [
                "test_make_plots",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                "5"
              ],
              [
                "test_make_plots",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                [
                  "num_pngs",
                  "lines",
                  "num_thumbnails"
                ]
              ],
              [
                "test_make_plots",
                [
                  "image_file",
                  "dir_path",
                  "lines"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_make_plots_long",
                []
              ],
              [
                "test_make_plots",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5952704890452786,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_make_plots",
                  "test_make_plots_long",
                  0.5952704890452786
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_make_plots_long",
                "true"
              ],
              [
                "test_make_plots",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_pmagplotlib.py",
    "testCases": [
      {
        "name": "TestPlotMagMap",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "true"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                [
                  "date",
                  "Brs",
                  "mod",
                  "res_1",
                  "res_2",
                  "lats",
                  "res_0",
                  "alt",
                  "Is",
                  "Ds",
                  "ghfile",
                  "Bs",
                  "lon_0",
                  "lons"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_validations.py",
    "testCases": [
      {
        "name": "TestValidation",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_controlled_vocab",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_missing_data",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_lat_lon",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_controlled_vocab",
                  "[]"
                ],
                [
                  "test_missing_data",
                  "[]"
                ],
                [
                  "test_lat_lon",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_controlled_vocab",
                  "true"
                ],
                [
                  "test_missing_data",
                  "false"
                ],
                [
                  "test_lat_lon",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_controlled_vocab",
                  "false"
                ],
                [
                  "test_missing_data",
                  "false"
                ],
                [
                  "test_lat_lon",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_controlled_vocab",
                  "false"
                ],
                [
                  "test_missing_data",
                  "false"
                ],
                [
                  "test_lat_lon",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_controlled_vocab",
                  "false"
                ],
                [
                  "test_missing_data",
                  "false"
                ],
                [
                  "test_lat_lon",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                "false"
              ],
              [
                "test_missing_data",
                "false"
              ],
              [
                "test_lat_lon",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                "false"
              ],
              [
                "test_missing_data",
                "false"
              ],
              [
                "test_lat_lon",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                []
              ],
              [
                "test_missing_data",
                []
              ],
              [
                "test_lat_lon",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                "false"
              ],
              [
                "test_missing_data",
                "false"
              ],
              [
                "test_lat_lon",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                "false"
              ],
              [
                "test_missing_data",
                "false"
              ],
              [
                "test_lat_lon",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_controlled_vocab",
                  "0"
                ],
                [
                  "test_missing_data",
                  "0"
                ],
                [
                  "test_lat_lon",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_controlled_vocab",
                  "0"
                ],
                [
                  "test_missing_data",
                  "0"
                ],
                [
                  "test_lat_lon",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_controlled_vocab",
                "false"
              ],
              [
                "test_missing_data",
                "false"
              ],
              [
                "test_lat_lon",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                "false"
              ],
              [
                "test_missing_data",
                "false"
              ],
              [
                "test_lat_lon",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                "7"
              ],
              [
                "test_missing_data",
                "5"
              ],
              [
                "test_lat_lon",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                [
                  "upfile",
                  "ran",
                  "errors"
                ]
              ],
              [
                "test_missing_data",
                [
                  "upfile",
                  "ran",
                  "errors"
                ]
              ],
              [
                "test_lat_lon",
                [
                  "upfile",
                  "ran",
                  "errors"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                []
              ],
              [
                "test_missing_data",
                []
              ],
              [
                "test_lat_lon",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6594504328920664,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_controlled_vocab",
                  "test_missing_data",
                  0.7379537417933815
                ],
                [
                  "test_lat_lon",
                  "test_missing_data",
                  0.6455650251374158
                ],
                [
                  "test_controlled_vocab",
                  "test_lat_lon",
                  0.5948325317454021
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_controlled_vocab",
                "false"
              ],
              [
                "test_missing_data",
                "false"
              ],
              [
                "test_lat_lon",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_thellier_gui.py",
    "testCases": [
      {
        "name": "TestThellierGUI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_plot_paleoint_curve",
                  "[]"
                ],
                [
                  "test_interpreter",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_spd",
                  "[]"
                ],
                [
                  "test_read_write_redo",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_empty_dir",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_auto_interpreter",
                  "[]"
                ],
                [
                  "test_main_panel_is_created",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_plot_paleoint_curve",
                  "[]"
                ],
                [
                  "test_interpreter",
                  "[]"
                ],
                [
                  "test_spd",
                  "[]"
                ],
                [
                  "test_read_write_redo",
                  "[]"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "[]"
                ],
                [
                  "test_empty_dir",
                  "[]"
                ],
                [
                  "test_auto_interpreter",
                  "[]"
                ],
                [
                  "test_main_panel_is_created",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_plot_paleoint_curve",
                  "false"
                ],
                [
                  "test_interpreter",
                  "true"
                ],
                [
                  "test_spd",
                  "false"
                ],
                [
                  "test_read_write_redo",
                  "false"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "true"
                ],
                [
                  "test_empty_dir",
                  "false"
                ],
                [
                  "test_auto_interpreter",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_plot_paleoint_curve",
                  "false"
                ],
                [
                  "test_interpreter",
                  "false"
                ],
                [
                  "test_spd",
                  "false"
                ],
                [
                  "test_read_write_redo",
                  "true"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "false"
                ],
                [
                  "test_empty_dir",
                  "false"
                ],
                [
                  "test_auto_interpreter",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_plot_paleoint_curve",
                  "false"
                ],
                [
                  "test_interpreter",
                  "false"
                ],
                [
                  "test_spd",
                  "false"
                ],
                [
                  "test_read_write_redo",
                  "true"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "false"
                ],
                [
                  "test_empty_dir",
                  "false"
                ],
                [
                  "test_auto_interpreter",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_plot_paleoint_curve",
                  "false"
                ],
                [
                  "test_interpreter",
                  "false"
                ],
                [
                  "test_spd",
                  "false"
                ],
                [
                  "test_read_write_redo",
                  "false"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "false"
                ],
                [
                  "test_empty_dir",
                  "false"
                ],
                [
                  "test_auto_interpreter",
                  "false"
                ],
                [
                  "test_main_panel_is_created",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "false"
              ],
              [
                "test_interpreter",
                "false"
              ],
              [
                "test_spd",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ],
              [
                "test_auto_interpreter",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "false"
              ],
              [
                "test_interpreter",
                "false"
              ],
              [
                "test_spd",
                "false"
              ],
              [
                "test_read_write_redo",
                "true"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "false"
              ],
              [
                "test_empty_dir",
                "true"
              ],
              [
                "test_auto_interpreter",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_plot_paleoint_curve",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_interpreter",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_spd",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_read_write_redo",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_anisotropy_calc_and_warns",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_empty_dir",
                [
                  "self.frame",
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_auto_interpreter",
                [
                  "self.app",
                  "self.pnl"
                ]
              ],
              [
                "test_main_panel_is_created",
                [
                  "self.frame",
                  "self.app"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "false"
              ],
              [
                "test_interpreter",
                "false"
              ],
              [
                "test_spd",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ],
              [
                "test_auto_interpreter",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "false"
              ],
              [
                "test_interpreter",
                "true"
              ],
              [
                "test_spd",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ],
              [
                "test_auto_interpreter",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_plot_paleoint_curve",
                  "0"
                ],
                [
                  "test_interpreter",
                  "0"
                ],
                [
                  "test_spd",
                  "0"
                ],
                [
                  "test_read_write_redo",
                  "0"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "0"
                ],
                [
                  "test_empty_dir",
                  "0"
                ],
                [
                  "test_auto_interpreter",
                  "0"
                ],
                [
                  "test_main_panel_is_created",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_plot_paleoint_curve",
                  "0"
                ],
                [
                  "test_interpreter",
                  "0"
                ],
                [
                  "test_spd",
                  "0"
                ],
                [
                  "test_read_write_redo",
                  "0"
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "0"
                ],
                [
                  "test_empty_dir",
                  "0"
                ],
                [
                  "test_auto_interpreter",
                  "0"
                ],
                [
                  "test_main_panel_is_created",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "false"
              ],
              [
                "test_interpreter",
                "false"
              ],
              [
                "test_spd",
                "true"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ],
              [
                "test_auto_interpreter",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "false"
              ],
              [
                "test_interpreter",
                "false"
              ],
              [
                "test_spd",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ],
              [
                "test_auto_interpreter",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "0"
              ],
              [
                "test_interpreter",
                "2"
              ],
              [
                "test_spd",
                "0"
              ],
              [
                "test_read_write_redo",
                "7"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "6"
              ],
              [
                "test_empty_dir",
                "1"
              ],
              [
                "test_auto_interpreter",
                "0"
              ],
              [
                "test_main_panel_is_created",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_paleoint_curve",
                [
                  "plot_menu",
                  "plot_paleoint_event"
                ]
              ],
              [
                "test_interpreter",
                [
                  "num_specs",
                  "program_ran",
                  "MICROWAVE",
                  "interpreter",
                  "THERMAL"
                ]
              ],
              [
                "test_spd",
                []
              ],
              [
                "test_read_write_redo",
                [
                  "old_interps",
                  "cleared_vals",
                  "new_interps",
                  "analysis_menu",
                  "write_redo_event",
                  "read_redo_event",
                  "clear_interps_event"
                ]
              ],
              [
                "test_anisotropy_calc_and_warns",
                [
                  "warn_aniso",
                  "aniso_menu",
                  "calc_aniso"
                ]
              ],
              [
                "test_empty_dir",
                []
              ],
              [
                "test_auto_interpreter",
                [
                  "ai_warn_event",
                  "ai_menu",
                  "ai_warn_item_id",
                  "ai_output_item_id",
                  "ai_output_event"
                ]
              ],
              [
                "test_main_panel_is_created",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_plot_paleoint_curve",
                [
                  "self.frame"
                ]
              ],
              [
                "test_interpreter",
                [
                  "self.frame"
                ]
              ],
              [
                "test_spd",
                []
              ],
              [
                "test_read_write_redo",
                [
                  "self.frame"
                ]
              ],
              [
                "test_anisotropy_calc_and_warns",
                [
                  "self.frame"
                ]
              ],
              [
                "test_empty_dir",
                []
              ],
              [
                "test_auto_interpreter",
                [
                  "self.frame"
                ]
              ],
              [
                "test_main_panel_is_created",
                [
                  "self.pnl"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.23862651699890616,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_main_panel_is_created",
                  "test_interpreter",
                  0.10061792555081206
                ],
                [
                  "test_spd",
                  "test_anisotropy_calc_and_warns",
                  0.10482848367219184
                ],
                [
                  "test_auto_interpreter",
                  "test_read_write_redo",
                  0.37975469299355835
                ],
                [
                  "test_main_panel_is_created",
                  "test_anisotropy_calc_and_warns",
                  0.14354231294080363
                ],
                [
                  "test_empty_dir",
                  "test_auto_interpreter",
                  0.17835775139194424
                ],
                [
                  "test_spd",
                  "test_auto_interpreter",
                  0.11845705259892222
                ],
                [
                  "test_interpreter",
                  "test_read_write_redo",
                  0.45697686457945447
                ],
                [
                  "test_spd",
                  "test_interpreter",
                  0.2099455524325912
                ],
                [
                  "test_main_panel_is_created",
                  "test_auto_interpreter",
                  0.02780639991600243
                ],
                [
                  "test_auto_interpreter",
                  "test_interpreter",
                  0.30376356145773914
                ],
                [
                  "test_auto_interpreter",
                  "test_plot_paleoint_curve",
                  0.4201855987307034
                ],
                [
                  "test_empty_dir",
                  "test_interpreter",
                  0.47635967084698205
                ],
                [
                  "test_interpreter",
                  "test_anisotropy_calc_and_warns",
                  0.35763445112247416
                ],
                [
                  "test_empty_dir",
                  "test_plot_paleoint_curve",
                  0.10690449676496974
                ],
                [
                  "test_spd",
                  "test_empty_dir",
                  0.29277002188455997
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "test_plot_paleoint_curve",
                  0.2870846258816073
                ],
                [
                  "test_spd",
                  "test_read_write_redo",
                  0.16350382386265755
                ],
                [
                  "test_empty_dir",
                  "test_read_write_redo",
                  0.370984890201216
                ],
                [
                  "test_main_panel_is_created",
                  "test_plot_paleoint_curve",
                  0.049999999999999996
                ],
                [
                  "test_interpreter",
                  "test_plot_paleoint_curve",
                  0.2299838298304276
                ],
                [
                  "test_spd",
                  "test_plot_paleoint_curve",
                  0.12171612389003691
                ],
                [
                  "test_anisotropy_calc_and_warns",
                  "test_read_write_redo",
                  0.47563105756103885
                ],
                [
                  "test_auto_interpreter",
                  "test_anisotropy_calc_and_warns",
                  0.29802415690133016
                ],
                [
                  "test_read_write_redo",
                  "test_plot_paleoint_curve",
                  0.3470245887007249
                ],
                [
                  "test_empty_dir",
                  "test_anisotropy_calc_and_warns",
                  0.26598552464321795
                ],
                [
                  "test_empty_dir",
                  "test_main_panel_is_created",
                  0.1336306209562122
                ],
                [
                  "test_spd",
                  "test_main_panel_is_created",
                  0.13693063937629152
                ],
                [
                  "test_main_panel_is_created",
                  "test_read_write_redo",
                  0.12313775728090236
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_plot_paleoint_curve",
                "false"
              ],
              [
                "test_interpreter",
                "false"
              ],
              [
                "test_spd",
                "false"
              ],
              [
                "test_read_write_redo",
                "false"
              ],
              [
                "test_anisotropy_calc_and_warns",
                "false"
              ],
              [
                "test_empty_dir",
                "false"
              ],
              [
                "test_auto_interpreter",
                "false"
              ],
              [
                "test_main_panel_is_created",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_find_pmag_dir.py",
    "testCases": [
      {
        "name": "TestFindPmagDir",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_local",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_local",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_local",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_local",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_local",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_local",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_local",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_local",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                [
                  "dir3",
                  "dir2",
                  "dir1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_local",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "SPD_\u0026_tests_\u0026_test_ptrm_statistics.py",
    "testCases": [
      {
        "name": "CheckpTRMparams",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_CDRAT",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_DRATS_real_data",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_DRAT",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_delta_CK",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_n_ptrm",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_max_ptrm_check",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_DRATS",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_mean_DRAT",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_mean_DEV",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_max_DEV",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_CDRAT",
                  "[]"
                ],
                [
                  "test_DRATS_real_data",
                  "[]"
                ],
                [
                  "test_DRAT",
                  "[]"
                ],
                [
                  "test_delta_CK",
                  "[]"
                ],
                [
                  "test_n_ptrm",
                  "[]"
                ],
                [
                  "test_max_ptrm_check",
                  "[]"
                ],
                [
                  "test_DRATS",
                  "[]"
                ],
                [
                  "test_mean_DRAT",
                  "[]"
                ],
                [
                  "test_mean_DEV",
                  "[]"
                ],
                [
                  "test_max_DEV",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_CDRAT",
                  "false"
                ],
                [
                  "test_DRATS_real_data",
                  "false"
                ],
                [
                  "test_DRAT",
                  "false"
                ],
                [
                  "test_delta_CK",
                  "false"
                ],
                [
                  "test_n_ptrm",
                  "false"
                ],
                [
                  "test_max_ptrm_check",
                  "false"
                ],
                [
                  "test_DRATS",
                  "false"
                ],
                [
                  "test_mean_DRAT",
                  "false"
                ],
                [
                  "test_mean_DEV",
                  "false"
                ],
                [
                  "test_max_DEV",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_CDRAT",
                  "false"
                ],
                [
                  "test_DRATS_real_data",
                  "false"
                ],
                [
                  "test_DRAT",
                  "false"
                ],
                [
                  "test_delta_CK",
                  "false"
                ],
                [
                  "test_n_ptrm",
                  "false"
                ],
                [
                  "test_max_ptrm_check",
                  "false"
                ],
                [
                  "test_DRATS",
                  "false"
                ],
                [
                  "test_mean_DRAT",
                  "false"
                ],
                [
                  "test_mean_DEV",
                  "false"
                ],
                [
                  "test_max_DEV",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_CDRAT",
                  "false"
                ],
                [
                  "test_DRATS_real_data",
                  "false"
                ],
                [
                  "test_DRAT",
                  "false"
                ],
                [
                  "test_delta_CK",
                  "false"
                ],
                [
                  "test_n_ptrm",
                  "false"
                ],
                [
                  "test_max_ptrm_check",
                  "false"
                ],
                [
                  "test_DRATS",
                  "false"
                ],
                [
                  "test_mean_DRAT",
                  "false"
                ],
                [
                  "test_mean_DEV",
                  "false"
                ],
                [
                  "test_max_DEV",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_CDRAT",
                  "false"
                ],
                [
                  "test_DRATS_real_data",
                  "false"
                ],
                [
                  "test_DRAT",
                  "false"
                ],
                [
                  "test_delta_CK",
                  "false"
                ],
                [
                  "test_n_ptrm",
                  "false"
                ],
                [
                  "test_max_ptrm_check",
                  "false"
                ],
                [
                  "test_DRATS",
                  "false"
                ],
                [
                  "test_mean_DRAT",
                  "false"
                ],
                [
                  "test_mean_DEV",
                  "false"
                ],
                [
                  "test_max_DEV",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                "false"
              ],
              [
                "test_DRATS_real_data",
                "false"
              ],
              [
                "test_DRAT",
                "false"
              ],
              [
                "test_delta_CK",
                "false"
              ],
              [
                "test_n_ptrm",
                "false"
              ],
              [
                "test_max_ptrm_check",
                "false"
              ],
              [
                "test_DRATS",
                "false"
              ],
              [
                "test_mean_DRAT",
                "false"
              ],
              [
                "test_mean_DEV",
                "false"
              ],
              [
                "test_max_DEV",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                "false"
              ],
              [
                "test_DRATS_real_data",
                "false"
              ],
              [
                "test_DRAT",
                "false"
              ],
              [
                "test_delta_CK",
                "false"
              ],
              [
                "test_n_ptrm",
                "false"
              ],
              [
                "test_max_ptrm_check",
                "false"
              ],
              [
                "test_DRATS",
                "false"
              ],
              [
                "test_mean_DRAT",
                "false"
              ],
              [
                "test_mean_DEV",
                "false"
              ],
              [
                "test_max_DEV",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                []
              ],
              [
                "test_DRATS_real_data",
                []
              ],
              [
                "test_DRAT",
                []
              ],
              [
                "test_delta_CK",
                []
              ],
              [
                "test_n_ptrm",
                []
              ],
              [
                "test_max_ptrm_check",
                []
              ],
              [
                "test_DRATS",
                []
              ],
              [
                "test_mean_DRAT",
                []
              ],
              [
                "test_mean_DEV",
                []
              ],
              [
                "test_max_DEV",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                "false"
              ],
              [
                "test_DRATS_real_data",
                "false"
              ],
              [
                "test_DRAT",
                "false"
              ],
              [
                "test_delta_CK",
                "false"
              ],
              [
                "test_n_ptrm",
                "false"
              ],
              [
                "test_max_ptrm_check",
                "false"
              ],
              [
                "test_DRATS",
                "false"
              ],
              [
                "test_mean_DRAT",
                "false"
              ],
              [
                "test_mean_DEV",
                "false"
              ],
              [
                "test_max_DEV",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                "false"
              ],
              [
                "test_DRATS_real_data",
                "false"
              ],
              [
                "test_DRAT",
                "false"
              ],
              [
                "test_delta_CK",
                "false"
              ],
              [
                "test_n_ptrm",
                "false"
              ],
              [
                "test_max_ptrm_check",
                "false"
              ],
              [
                "test_DRATS",
                "false"
              ],
              [
                "test_mean_DRAT",
                "false"
              ],
              [
                "test_mean_DEV",
                "false"
              ],
              [
                "test_max_DEV",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_CDRAT",
                  "0"
                ],
                [
                  "test_DRATS_real_data",
                  "0"
                ],
                [
                  "test_DRAT",
                  "0"
                ],
                [
                  "test_delta_CK",
                  "0"
                ],
                [
                  "test_n_ptrm",
                  "0"
                ],
                [
                  "test_max_ptrm_check",
                  "0"
                ],
                [
                  "test_DRATS",
                  "0"
                ],
                [
                  "test_mean_DRAT",
                  "0"
                ],
                [
                  "test_mean_DEV",
                  "0"
                ],
                [
                  "test_max_DEV",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_CDRAT",
                  "0"
                ],
                [
                  "test_DRATS_real_data",
                  "0"
                ],
                [
                  "test_DRAT",
                  "0"
                ],
                [
                  "test_delta_CK",
                  "0"
                ],
                [
                  "test_n_ptrm",
                  "0"
                ],
                [
                  "test_max_ptrm_check",
                  "0"
                ],
                [
                  "test_DRATS",
                  "0"
                ],
                [
                  "test_mean_DRAT",
                  "0"
                ],
                [
                  "test_mean_DEV",
                  "0"
                ],
                [
                  "test_max_DEV",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_CDRAT",
                "false"
              ],
              [
                "test_DRATS_real_data",
                "false"
              ],
              [
                "test_DRAT",
                "false"
              ],
              [
                "test_delta_CK",
                "false"
              ],
              [
                "test_n_ptrm",
                "false"
              ],
              [
                "test_max_ptrm_check",
                "true"
              ],
              [
                "test_DRATS",
                "false"
              ],
              [
                "test_mean_DRAT",
                "false"
              ],
              [
                "test_mean_DEV",
                "false"
              ],
              [
                "test_max_DEV",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                "false"
              ],
              [
                "test_DRATS_real_data",
                "false"
              ],
              [
                "test_DRAT",
                "false"
              ],
              [
                "test_delta_CK",
                "false"
              ],
              [
                "test_n_ptrm",
                "false"
              ],
              [
                "test_max_ptrm_check",
                "false"
              ],
              [
                "test_DRATS",
                "false"
              ],
              [
                "test_mean_DRAT",
                "false"
              ],
              [
                "test_mean_DEV",
                "false"
              ],
              [
                "test_max_DEV",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                "2"
              ],
              [
                "test_DRATS_real_data",
                "1"
              ],
              [
                "test_DRAT",
                "2"
              ],
              [
                "test_delta_CK",
                "1"
              ],
              [
                "test_n_ptrm",
                "2"
              ],
              [
                "test_max_ptrm_check",
                "4"
              ],
              [
                "test_DRATS",
                "2"
              ],
              [
                "test_mean_DRAT",
                "2"
              ],
              [
                "test_mean_DEV",
                "2"
              ],
              [
                "test_max_DEV",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                [
                  "ref_CDRAT",
                  "CDRAT",
                  "CDRAT_prime",
                  "ref_CDRAT_prime"
                ]
              ],
              [
                "test_DRATS_real_data",
                [
                  "DRATS",
                  "ref_drats"
                ]
              ],
              [
                "test_DRAT",
                [
                  "DRAT",
                  "ref_DRAT",
                  "L"
                ]
              ],
              [
                "test_delta_CK",
                [
                  "result"
                ]
              ],
              [
                "test_n_ptrm",
                [
                  "result"
                ]
              ],
              [
                "test_max_ptrm_check",
                [
                  "result",
                  "check_percent",
                  "sum_ptrm_diffs",
                  "diffs",
                  "max_ptrm_diff",
                  "sum_abs_ptrm_diffs"
                ]
              ],
              [
                "test_DRATS",
                [
                  "ref_DRATS_prime",
                  "DRATS",
                  "ref_DRATS",
                  "end",
                  "DRATS_prime"
                ]
              ],
              [
                "test_mean_DRAT",
                [
                  "ref_mean_DRAT",
                  "ref_mean_DRAT_prime",
                  "mean_DRAT_prime",
                  "mean_DRAT"
                ]
              ],
              [
                "test_mean_DEV",
                [
                  "ref_mean_DEV",
                  "mean_DEV_prime",
                  "ref_mean_DEV_prime",
                  "mean_DEV"
                ]
              ],
              [
                "test_max_DEV",
                [
                  "result",
                  "ref_max_DEV"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                []
              ],
              [
                "test_DRATS_real_data",
                []
              ],
              [
                "test_DRAT",
                []
              ],
              [
                "test_delta_CK",
                []
              ],
              [
                "test_n_ptrm",
                []
              ],
              [
                "test_max_ptrm_check",
                []
              ],
              [
                "test_DRATS",
                []
              ],
              [
                "test_mean_DRAT",
                []
              ],
              [
                "test_mean_DEV",
                []
              ],
              [
                "test_max_DEV",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5400211288674082,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_n_ptrm",
                  "test_CDRAT",
                  0.08467889254687809
                ],
                [
                  "test_max_DEV",
                  "test_DRATS_real_data",
                  0.6632258003585176
                ],
                [
                  "test_delta_CK",
                  "test_mean_DEV",
                  0.4738492449724393
                ],
                [
                  "test_delta_CK",
                  "test_DRAT",
                  0.6138442562023102
                ],
                [
                  "test_CDRAT",
                  "test_DRATS_real_data",
                  0.7292287933368751
                ],
                [
                  "test_CDRAT",
                  "test_mean_DEV",
                  0.8044164120551374
                ],
                [
                  "test_DRATS_real_data",
                  "test_mean_DRAT",
                  0.7812085861672268
                ],
                [
                  "test_mean_DRAT",
                  "test_mean_DEV",
                  0.8339909731846293
                ],
                [
                  "test_max_DEV",
                  "test_mean_DEV",
                  0.7023762910415503
                ],
                [
                  "test_DRAT",
                  "test_mean_DEV",
                  0.7464019442453678
                ],
                [
                  "test_delta_CK",
                  "test_DRATS_real_data",
                  0.5080005080007619
                ],
                [
                  "test_DRATS",
                  "test_mean_DRAT",
                  0.8762994573141881
                ],
                [
                  "test_n_ptrm",
                  "test_DRATS_real_data",
                  0.12361284651454937
                ],
                [
                  "test_max_ptrm_check",
                  "test_DRATS_real_data",
                  0.20448438717224487
                ],
                [
                  "test_max_ptrm_check",
                  "test_mean_DRAT",
                  0.3558066907187675
                ],
                [
                  "test_n_ptrm",
                  "test_mean_DRAT",
                  0.09523176813577712
                ],
                [
                  "test_delta_CK",
                  "test_CDRAT",
                  0.5306956801547452
                ],
                [
                  "test_n_ptrm",
                  "test_DRAT",
                  0.1463197042198942
                ],
                [
                  "test_n_ptrm",
                  "test_DRATS",
                  0.09403024365476575
                ],
                [
                  "test_max_ptrm_check",
                  "test_DRATS",
                  0.3117255171480132
                ],
                [
                  "test_n_ptrm",
                  "test_mean_DEV",
                  0.08021060652643612
                ],
                [
                  "test_DRATS",
                  "test_mean_DEV",
                  0.8028599555674101
                ],
                [
                  "test_DRAT",
                  "test_max_DEV",
                  0.8294930987919358
                ],
                [
                  "test_DRAT",
                  "test_CDRAT",
                  0.8592597119466855
                ],
                [
                  "test_max_DEV",
                  "test_mean_DRAT",
                  0.6916078142348212
                ],
                [
                  "test_CDRAT",
                  "test_DRATS",
                  0.8681440781595201
                ],
                [
                  "test_max_ptrm_check",
                  "test_CDRAT",
                  0.3074356103616099
                ],
                [
                  "test_CDRAT",
                  "test_mean_DRAT",
                  0.8140554500327465
                ],
                [
                  "test_DRATS_real_data",
                  "test_mean_DEV",
                  0.6488856845230502
                ],
                [
                  "test_max_DEV",
                  "test_DRATS",
                  0.7468722378730225
                ],
                [
                  "test_max_ptrm_check",
                  "test_delta_CK",
                  0.43077549191715303
                ],
                [
                  "test_delta_CK",
                  "test_max_DEV",
                  0.6076197215346475
                ],
                [
                  "test_n_ptrm",
                  "test_max_ptrm_check",
                  0.2543210618383125
                ],
                [
                  "test_delta_CK",
                  "test_DRATS",
                  0.5573474525846372
                ],
                [
                  "test_delta_CK",
                  "test_mean_DRAT",
                  0.5104765608901559
                ],
                [
                  "test_DRAT",
                  "test_DRATS_real_data",
                  0.7827649563274937
                ],
                [
                  "test_DRAT",
                  "test_DRATS",
                  0.8646673898384505
                ],
                [
                  "test_DRATS",
                  "test_DRATS_real_data",
                  0.8946996133851273
                ],
                [
                  "test_max_ptrm_check",
                  "test_DRAT",
                  0.39810330425470425
                ],
                [
                  "test_max_ptrm_check",
                  "test_mean_DEV",
                  0.2688657460244597
                ],
                [
                  "test_DRAT",
                  "test_mean_DRAT",
                  0.8326239642581369
                ],
                [
                  "test_max_DEV",
                  "test_CDRAT",
                  0.7303595290441307
                ],
                [
                  "test_n_ptrm",
                  "test_max_DEV",
                  0.14385736420700407
                ],
                [
                  "test_n_ptrm",
                  "test_delta_CK",
                  0.2703690352179376
                ],
                [
                  "test_max_ptrm_check",
                  "test_max_DEV",
                  0.4258473625491429
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_CDRAT",
                "false"
              ],
              [
                "test_DRATS_real_data",
                "false"
              ],
              [
                "test_DRAT",
                "false"
              ],
              [
                "test_delta_CK",
                "false"
              ],
              [
                "test_n_ptrm",
                "false"
              ],
              [
                "test_max_ptrm_check",
                "false"
              ],
              [
                "test_DRATS",
                "false"
              ],
              [
                "test_mean_DRAT",
                "false"
              ],
              [
                "test_mean_DEV",
                "false"
              ],
              [
                "test_max_DEV",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      },
      {
        "name": "CheckDeltaPal",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_delta_pal",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_delta_pal",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_delta_pal",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_delta_pal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_delta_pal",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_delta_pal",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_delta_pal",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_delta_pal",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_delta_pal",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                [
                  "delta_pal"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_delta_pal",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_er_magic_dialogs.py",
    "testCases": [
      {
        "name": "TestMagicGrid",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_remove_col",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn]"
                ],
                [
                  "test_add_row",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_col",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_changes_after_row_delete",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_row_no_label",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_remove_row_charlie",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_remove_row",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_remove_col",
                  "[]"
                ],
                [
                  "test_add_row",
                  "[]"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "[]"
                ],
                [
                  "test_add_col",
                  "[]"
                ],
                [
                  "test_changes_after_row_delete",
                  "[]"
                ],
                [
                  "test_add_row_no_label",
                  "[]"
                ],
                [
                  "test_remove_row_charlie",
                  "[]"
                ],
                [
                  "test_remove_row",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_remove_col",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "false"
                ],
                [
                  "test_add_col",
                  "false"
                ],
                [
                  "test_changes_after_row_delete",
                  "false"
                ],
                [
                  "test_add_row_no_label",
                  "false"
                ],
                [
                  "test_remove_row_charlie",
                  "false"
                ],
                [
                  "test_remove_row",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_remove_col",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "false"
                ],
                [
                  "test_add_col",
                  "false"
                ],
                [
                  "test_changes_after_row_delete",
                  "false"
                ],
                [
                  "test_add_row_no_label",
                  "false"
                ],
                [
                  "test_remove_row_charlie",
                  "false"
                ],
                [
                  "test_remove_row",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_remove_col",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "false"
                ],
                [
                  "test_add_col",
                  "false"
                ],
                [
                  "test_changes_after_row_delete",
                  "false"
                ],
                [
                  "test_add_row_no_label",
                  "false"
                ],
                [
                  "test_remove_row_charlie",
                  "false"
                ],
                [
                  "test_remove_row",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_remove_col",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "false"
                ],
                [
                  "test_add_col",
                  "false"
                ],
                [
                  "test_changes_after_row_delete",
                  "false"
                ],
                [
                  "test_add_row_no_label",
                  "false"
                ],
                [
                  "test_remove_row_charlie",
                  "false"
                ],
                [
                  "test_remove_row",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "false"
              ],
              [
                "test_add_col",
                "false"
              ],
              [
                "test_changes_after_row_delete",
                "false"
              ],
              [
                "test_add_row_no_label",
                "false"
              ],
              [
                "test_remove_row_charlie",
                "false"
              ],
              [
                "test_remove_row",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "false"
              ],
              [
                "test_add_col",
                "false"
              ],
              [
                "test_changes_after_row_delete",
                "false"
              ],
              [
                "test_add_row_no_label",
                "false"
              ],
              [
                "test_remove_row_charlie",
                "false"
              ],
              [
                "test_remove_row",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_remove_col",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ],
              [
                "test_add_row",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ],
              [
                "test_changes_after_multiple_row_delete",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ],
              [
                "test_add_col",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ],
              [
                "test_changes_after_row_delete",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ],
              [
                "test_add_row_no_label",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ],
              [
                "test_remove_row_charlie",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ],
              [
                "test_remove_row",
                [
                  "self.frame",
                  "self.app",
                  "self.frame.pnl"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_remove_col",
                "true"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "false"
              ],
              [
                "test_add_col",
                "true"
              ],
              [
                "test_changes_after_row_delete",
                "false"
              ],
              [
                "test_add_row_no_label",
                "false"
              ],
              [
                "test_remove_row_charlie",
                "false"
              ],
              [
                "test_remove_row",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "false"
              ],
              [
                "test_add_col",
                "false"
              ],
              [
                "test_changes_after_row_delete",
                "false"
              ],
              [
                "test_add_row_no_label",
                "false"
              ],
              [
                "test_remove_row_charlie",
                "false"
              ],
              [
                "test_remove_row",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_remove_col",
                  "0"
                ],
                [
                  "test_add_row",
                  "0"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "0"
                ],
                [
                  "test_add_col",
                  "0"
                ],
                [
                  "test_changes_after_row_delete",
                  "0"
                ],
                [
                  "test_add_row_no_label",
                  "0"
                ],
                [
                  "test_remove_row_charlie",
                  "0"
                ],
                [
                  "test_remove_row",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_remove_col",
                  "0"
                ],
                [
                  "test_add_row",
                  "0"
                ],
                [
                  "test_changes_after_multiple_row_delete",
                  "0"
                ],
                [
                  "test_add_col",
                  "0"
                ],
                [
                  "test_changes_after_row_delete",
                  "0"
                ],
                [
                  "test_add_row_no_label",
                  "0"
                ],
                [
                  "test_remove_row_charlie",
                  "0"
                ],
                [
                  "test_remove_row",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "false"
              ],
              [
                "test_add_col",
                "false"
              ],
              [
                "test_changes_after_row_delete",
                "false"
              ],
              [
                "test_add_row_no_label",
                "false"
              ],
              [
                "test_remove_row_charlie",
                "false"
              ],
              [
                "test_remove_row",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "false"
              ],
              [
                "test_add_col",
                "false"
              ],
              [
                "test_changes_after_row_delete",
                "false"
              ],
              [
                "test_add_row_no_label",
                "false"
              ],
              [
                "test_remove_row_charlie",
                "false"
              ],
              [
                "test_remove_row",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                "4"
              ],
              [
                "test_add_row",
                "1"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "1"
              ],
              [
                "test_add_col",
                "2"
              ],
              [
                "test_changes_after_row_delete",
                "1"
              ],
              [
                "test_add_row_no_label",
                "2"
              ],
              [
                "test_remove_row_charlie",
                "3"
              ],
              [
                "test_remove_row",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                [
                  "result",
                  "new_num_cols",
                  "num_cols"
                ]
              ],
              [
                "test_add_row",
                [
                  "last_row",
                  "label"
                ]
              ],
              [
                "test_changes_after_multiple_row_delete",
                [
                  "correct_changes"
                ]
              ],
              [
                "test_add_col",
                [
                  "label",
                  "cols"
                ]
              ],
              [
                "test_changes_after_row_delete",
                [
                  "correct_changes"
                ]
              ],
              [
                "test_add_row_no_label",
                [
                  "last_row"
                ]
              ],
              [
                "test_remove_row_charlie",
                [
                  "old_row_name"
                ]
              ],
              [
                "test_remove_row",
                [
                  "new_num_rows",
                  "new_last_row_name",
                  "num_rows",
                  "last_row_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                [
                  "self.grid"
                ]
              ],
              [
                "test_add_row",
                [
                  "self.grid"
                ]
              ],
              [
                "test_changes_after_multiple_row_delete",
                [
                  "self.grid"
                ]
              ],
              [
                "test_add_col",
                [
                  "self.grid"
                ]
              ],
              [
                "test_changes_after_row_delete",
                [
                  "self.grid"
                ]
              ],
              [
                "test_add_row_no_label",
                [
                  "self.grid"
                ]
              ],
              [
                "test_remove_row_charlie",
                [
                  "self.grid"
                ]
              ],
              [
                "test_remove_row",
                [
                  "self.grid"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4633515186176962,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_changes_after_row_delete",
                  "test_changes_after_multiple_row_delete",
                  0.9724227787367286
                ],
                [
                  "test_add_row",
                  "test_changes_after_multiple_row_delete",
                  0.3969581307590985
                ],
                [
                  "test_remove_row",
                  "test_remove_col",
                  0.5391348539358931
                ],
                [
                  "test_remove_row",
                  "test_remove_row_charlie",
                  0.6699051325658724
                ],
                [
                  "test_remove_row",
                  "test_changes_after_row_delete",
                  0.43087261937611593
                ],
                [
                  "test_add_row",
                  "test_remove_row_charlie",
                  0.4660413824283704
                ],
                [
                  "test_remove_row_charlie",
                  "test_changes_after_row_delete",
                  0.4696682183138621
                ],
                [
                  "test_add_row",
                  "test_add_row_no_label",
                  0.7396002616336389
                ],
                [
                  "test_add_row_no_label",
                  "test_remove_col",
                  0.45927932677184585
                ],
                [
                  "test_remove_row",
                  "test_add_col",
                  0.32965053650668474
                ],
                [
                  "test_remove_row_charlie",
                  "test_changes_after_multiple_row_delete",
                  0.4856221545660243
                ],
                [
                  "test_add_col",
                  "test_remove_col",
                  0.5596518804334774
                ],
                [
                  "test_remove_col",
                  "test_changes_after_multiple_row_delete",
                  0.23596995186213474
                ],
                [
                  "test_add_row_no_label",
                  "test_add_col",
                  0.4134344328947824
                ],
                [
                  "test_remove_col",
                  "test_changes_after_row_delete",
                  0.2510395055232011
                ],
                [
                  "test_add_row",
                  "test_remove_row",
                  0.6265751081125869
                ],
                [
                  "test_add_row_no_label",
                  "test_remove_row_charlie",
                  0.5951190357119042
                ],
                [
                  "test_add_row",
                  "test_changes_after_row_delete",
                  0.4134491152973615
                ],
                [
                  "test_remove_row_charlie",
                  "test_add_col",
                  0.3107907802540305
                ],
                [
                  "test_remove_row",
                  "test_changes_after_multiple_row_delete",
                  0.4224651715728209
                ],
                [
                  "test_add_row_no_label",
                  "test_changes_after_multiple_row_delete",
                  0.3578132236660672
                ],
                [
                  "test_add_col",
                  "test_changes_after_multiple_row_delete",
                  0.1149919149152138
                ],
                [
                  "test_add_row_no_label",
                  "test_changes_after_row_delete",
                  0.372677996249965
                ],
                [
                  "test_add_col",
                  "test_changes_after_row_delete",
                  0.1556997888323046
                ],
                [
                  "test_remove_row_charlie",
                  "test_remove_col",
                  0.4609024475704925
                ],
                [
                  "test_add_row_no_label",
                  "test_remove_row",
                  0.705983962571664
                ],
                [
                  "test_add_row",
                  "test_add_col",
                  0.5793654595023211
                ],
                [
                  "test_add_row",
                  "test_remove_col",
                  0.4387573507310308
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_col",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_changes_after_multiple_row_delete",
                "false"
              ],
              [
                "test_add_col",
                "false"
              ],
              [
                "test_changes_after_row_delete",
                "false"
              ],
              [
                "test_add_row_no_label",
                "false"
              ],
              [
                "test_remove_row_charlie",
                "false"
              ],
              [
                "test_remove_row",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_dialog_components.py",
    "testCases": [
      {
        "name": "TestVocabularies",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_methods",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_all_codes",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_vocabularies",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_suggested",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_methods",
                  "[]"
                ],
                [
                  "test_all_codes",
                  "[]"
                ],
                [
                  "test_vocabularies",
                  "[]"
                ],
                [
                  "test_suggested",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_methods",
                  "true"
                ],
                [
                  "test_all_codes",
                  "false"
                ],
                [
                  "test_vocabularies",
                  "false"
                ],
                [
                  "test_suggested",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_methods",
                  "false"
                ],
                [
                  "test_all_codes",
                  "false"
                ],
                [
                  "test_vocabularies",
                  "false"
                ],
                [
                  "test_suggested",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_methods",
                  "false"
                ],
                [
                  "test_all_codes",
                  "false"
                ],
                [
                  "test_vocabularies",
                  "false"
                ],
                [
                  "test_suggested",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_methods",
                  "false"
                ],
                [
                  "test_all_codes",
                  "false"
                ],
                [
                  "test_vocabularies",
                  "false"
                ],
                [
                  "test_suggested",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "false"
              ],
              [
                "test_all_codes",
                "false"
              ],
              [
                "test_vocabularies",
                "false"
              ],
              [
                "test_suggested",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "false"
              ],
              [
                "test_all_codes",
                "false"
              ],
              [
                "test_vocabularies",
                "false"
              ],
              [
                "test_suggested",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                []
              ],
              [
                "test_all_codes",
                []
              ],
              [
                "test_vocabularies",
                []
              ],
              [
                "test_suggested",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "false"
              ],
              [
                "test_all_codes",
                "false"
              ],
              [
                "test_vocabularies",
                "false"
              ],
              [
                "test_suggested",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "false"
              ],
              [
                "test_all_codes",
                "false"
              ],
              [
                "test_vocabularies",
                "false"
              ],
              [
                "test_suggested",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_methods",
                  "0"
                ],
                [
                  "test_all_codes",
                  "0"
                ],
                [
                  "test_vocabularies",
                  "0"
                ],
                [
                  "test_suggested",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_methods",
                  "0"
                ],
                [
                  "test_all_codes",
                  "0"
                ],
                [
                  "test_vocabularies",
                  "0"
                ],
                [
                  "test_suggested",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "false"
              ],
              [
                "test_all_codes",
                "false"
              ],
              [
                "test_vocabularies",
                "false"
              ],
              [
                "test_suggested",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "false"
              ],
              [
                "test_all_codes",
                "false"
              ],
              [
                "test_vocabularies",
                "false"
              ],
              [
                "test_suggested",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "2"
              ],
              [
                "test_all_codes",
                "2"
              ],
              [
                "test_vocabularies",
                "2"
              ],
              [
                "test_suggested",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                []
              ],
              [
                "test_all_codes",
                []
              ],
              [
                "test_vocabularies",
                []
              ],
              [
                "test_suggested",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                [
                  "self.vocab"
                ]
              ],
              [
                "test_all_codes",
                [
                  "self.vocab"
                ]
              ],
              [
                "test_vocabularies",
                [
                  "self.vocab"
                ]
              ],
              [
                "test_suggested",
                [
                  "self.vocab"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3935778347204326,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_suggested",
                  "test_all_codes",
                  0.390094748802747
                ],
                [
                  "test_vocabularies",
                  "test_all_codes",
                  0.390094748802747
                ],
                [
                  "test_methods",
                  "test_all_codes",
                  0.3034330424545042
                ],
                [
                  "test_vocabularies",
                  "test_suggested",
                  0.5
                ],
                [
                  "test_suggested",
                  "test_methods",
                  0.38892223413129867
                ],
                [
                  "test_vocabularies",
                  "test_methods",
                  0.38892223413129867
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_methods",
                "false"
              ],
              [
                "test_all_codes",
                "false"
              ],
              [
                "test_vocabularies",
                "false"
              ],
              [
                "test_suggested",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "SPD_\u0026_tests_\u0026_test_arai_plot_statistics.py",
    "testCases": [
      {
        "name": "CheckInitialAttributeValues",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_known_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_name",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_known_values",
                  "[]"
                ],
                [
                  "test_name",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_known_values",
                  "true"
                ],
                [
                  "test_name",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_known_values",
                  "false"
                ],
                [
                  "test_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_known_values",
                  "false"
                ],
                [
                  "test_name",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_known_values",
                  "false"
                ],
                [
                  "test_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "false"
              ],
              [
                "test_name",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "false"
              ],
              [
                "test_name",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                []
              ],
              [
                "test_name",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "false"
              ],
              [
                "test_name",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "false"
              ],
              [
                "test_name",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_known_values",
                  "0"
                ],
                [
                  "test_name",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_known_values",
                  "0"
                ],
                [
                  "test_name",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "false"
              ],
              [
                "test_name",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "false"
              ],
              [
                "test_name",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "3"
              ],
              [
                "test_name",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                [
                  "message"
                ]
              ],
              [
                "test_name",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                []
              ],
              [
                "test_name",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.12437964877624864,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_name",
                  "test_known_values",
                  0.12437964877624864
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_known_values",
                "false"
              ],
              [
                "test_name",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CheckYorkRegression",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_York_Regression",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_York_Regression",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_York_Regression",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_York_Regression",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_York_Regression",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_York_Regression",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_York_Regression",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_York_Regression",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                [
                  "message"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_York_Regression",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CheckVDSsequence",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_for_negative_values",
                  "[PyCallExpression: self.assertGreaterEqual]"
                ],
                [
                  "test_against_known_values",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_for_negative_values",
                  "[]"
                ],
                [
                  "test_against_known_values",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_for_negative_values",
                  "true"
                ],
                [
                  "test_against_known_values",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_for_negative_values",
                  "false"
                ],
                [
                  "test_against_known_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_for_negative_values",
                  "false"
                ],
                [
                  "test_against_known_values",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_for_negative_values",
                  "false"
                ],
                [
                  "test_against_known_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                "false"
              ],
              [
                "test_against_known_values",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                "false"
              ],
              [
                "test_against_known_values",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                []
              ],
              [
                "test_against_known_values",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                "false"
              ],
              [
                "test_against_known_values",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_for_negative_values",
                "true"
              ],
              [
                "test_against_known_values",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_for_negative_values",
                  "0"
                ],
                [
                  "test_against_known_values",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_for_negative_values",
                  "0"
                ],
                [
                  "test_against_known_values",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                "false"
              ],
              [
                "test_against_known_values",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                "false"
              ],
              [
                "test_against_known_values",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                "1"
              ],
              [
                "test_against_known_values",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                []
              ],
              [
                "test_against_known_values",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                []
              ],
              [
                "test_against_known_values",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2032242548312348,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_against_known_values",
                  "test_for_negative_values",
                  0.2032242548312348
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_for_negative_values",
                "false"
              ],
              [
                "test_against_known_values",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CheckSCAT",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_SCAT",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_SCAT_real_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_in_SCAT_box",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_SCAT_points",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_SCAT_box",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_SCAT",
                  "[]"
                ],
                [
                  "test_SCAT_real_data",
                  "[]"
                ],
                [
                  "test_in_SCAT_box",
                  "[]"
                ],
                [
                  "test_SCAT_points",
                  "[]"
                ],
                [
                  "test_SCAT_box",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_SCAT",
                  "false"
                ],
                [
                  "test_SCAT_real_data",
                  "false"
                ],
                [
                  "test_in_SCAT_box",
                  "true"
                ],
                [
                  "test_SCAT_points",
                  "true"
                ],
                [
                  "test_SCAT_box",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_SCAT",
                  "false"
                ],
                [
                  "test_SCAT_real_data",
                  "false"
                ],
                [
                  "test_in_SCAT_box",
                  "false"
                ],
                [
                  "test_SCAT_points",
                  "false"
                ],
                [
                  "test_SCAT_box",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_SCAT",
                  "false"
                ],
                [
                  "test_SCAT_real_data",
                  "false"
                ],
                [
                  "test_in_SCAT_box",
                  "false"
                ],
                [
                  "test_SCAT_points",
                  "false"
                ],
                [
                  "test_SCAT_box",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_SCAT",
                  "false"
                ],
                [
                  "test_SCAT_real_data",
                  "false"
                ],
                [
                  "test_in_SCAT_box",
                  "false"
                ],
                [
                  "test_SCAT_points",
                  "false"
                ],
                [
                  "test_SCAT_box",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "false"
              ],
              [
                "test_SCAT_real_data",
                "false"
              ],
              [
                "test_in_SCAT_box",
                "false"
              ],
              [
                "test_SCAT_points",
                "false"
              ],
              [
                "test_SCAT_box",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "false"
              ],
              [
                "test_SCAT_real_data",
                "false"
              ],
              [
                "test_in_SCAT_box",
                "false"
              ],
              [
                "test_SCAT_points",
                "false"
              ],
              [
                "test_SCAT_box",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                []
              ],
              [
                "test_SCAT_real_data",
                []
              ],
              [
                "test_in_SCAT_box",
                []
              ],
              [
                "test_SCAT_points",
                []
              ],
              [
                "test_SCAT_box",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "false"
              ],
              [
                "test_SCAT_real_data",
                "false"
              ],
              [
                "test_in_SCAT_box",
                "false"
              ],
              [
                "test_SCAT_points",
                "false"
              ],
              [
                "test_SCAT_box",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "false"
              ],
              [
                "test_SCAT_real_data",
                "false"
              ],
              [
                "test_in_SCAT_box",
                "false"
              ],
              [
                "test_SCAT_points",
                "false"
              ],
              [
                "test_SCAT_box",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_SCAT",
                  "0"
                ],
                [
                  "test_SCAT_real_data",
                  "0"
                ],
                [
                  "test_in_SCAT_box",
                  "0"
                ],
                [
                  "test_SCAT_points",
                  "0"
                ],
                [
                  "test_SCAT_box",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_SCAT",
                  "0"
                ],
                [
                  "test_SCAT_real_data",
                  "0"
                ],
                [
                  "test_in_SCAT_box",
                  "0"
                ],
                [
                  "test_SCAT_points",
                  "0"
                ],
                [
                  "test_SCAT_box",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "false"
              ],
              [
                "test_SCAT_real_data",
                "false"
              ],
              [
                "test_in_SCAT_box",
                "false"
              ],
              [
                "test_SCAT_points",
                "false"
              ],
              [
                "test_SCAT_box",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "false"
              ],
              [
                "test_SCAT_real_data",
                "false"
              ],
              [
                "test_in_SCAT_box",
                "false"
              ],
              [
                "test_SCAT_points",
                "false"
              ],
              [
                "test_SCAT_box",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "4"
              ],
              [
                "test_SCAT_real_data",
                "2"
              ],
              [
                "test_in_SCAT_box",
                "2"
              ],
              [
                "test_SCAT_points",
                "1"
              ],
              [
                "test_SCAT_box",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_SCAT",
                [
                  "points2",
                  "result",
                  "points1",
                  "y",
                  "x_max",
                  "y_max",
                  "result3",
                  "result2",
                  "points",
                  "points3",
                  "result1"
                ]
              ],
              [
                "test_SCAT_real_data",
                [
                  "thing",
                  "thing1"
                ]
              ],
              [
                "test_in_SCAT_box",
                [
                  "result",
                  "bad",
                  "x_max",
                  "y_max",
                  "good",
                  "high_line",
                  "low_bound",
                  "high_bound",
                  "low_line"
                ]
              ],
              [
                "test_SCAT_points",
                [
                  "tail_checks_temperatures",
                  "tmax",
                  "ref_points",
                  "tmin",
                  "ptrm_checks_temperatures",
                  "y_ptrm_check",
                  "y_Arai_segment",
                  "result",
                  "tail_checks_starting_temperatures",
                  "ptrm_checks_starting_temperatures",
                  "x_tail_check",
                  "x_Arai_segment",
                  "y_tail_check",
                  "x_ptrm_check"
                ]
              ],
              [
                "test_SCAT_box",
                [
                  "result",
                  "ref_high_bound_result",
                  "ref_low_bound_result",
                  "ref_y_max",
                  "ref_x_max"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                []
              ],
              [
                "test_SCAT_real_data",
                []
              ],
              [
                "test_in_SCAT_box",
                []
              ],
              [
                "test_SCAT_points",
                []
              ],
              [
                "test_SCAT_box",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6328867015391629,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_in_SCAT_box",
                  "test_SCAT_real_data",
                  0.5026001973598123
                ],
                [
                  "test_SCAT",
                  "test_SCAT_real_data",
                  0.6730697061418146
                ],
                [
                  "test_SCAT_box",
                  "test_in_SCAT_box",
                  0.5723467686462367
                ],
                [
                  "test_SCAT_points",
                  "test_SCAT",
                  0.7842770862043629
                ],
                [
                  "test_SCAT_box",
                  "test_SCAT",
                  0.6277028174781024
                ],
                [
                  "test_in_SCAT_box",
                  "test_SCAT_points",
                  0.5799243554676042
                ],
                [
                  "test_SCAT_points",
                  "test_SCAT_real_data",
                  0.7314114154224501
                ],
                [
                  "test_SCAT_box",
                  "test_SCAT_real_data",
                  0.5210107064582756
                ],
                [
                  "test_SCAT_box",
                  "test_SCAT_points",
                  0.5385000472469391
                ],
                [
                  "test_in_SCAT_box",
                  "test_SCAT",
                  0.7980239149660311
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_SCAT",
                "false"
              ],
              [
                "test_SCAT_real_data",
                "false"
              ],
              [
                "test_in_SCAT_box",
                "false"
              ],
              [
                "test_SCAT_points",
                "false"
              ],
              [
                "test_SCAT_box",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "CheckFrac",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_lib_vs_actual",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_FRAC",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_lib_vs_actual",
                  "[]"
                ],
                [
                  "test_FRAC",
                  "[]"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "[]"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_lib_vs_actual",
                  "false"
                ],
                [
                  "test_FRAC",
                  "false"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "false"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_lib_vs_actual",
                  "false"
                ],
                [
                  "test_FRAC",
                  "false"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "false"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_lib_vs_actual",
                  "false"
                ],
                [
                  "test_FRAC",
                  "false"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "false"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_lib_vs_actual",
                  "false"
                ],
                [
                  "test_FRAC",
                  "false"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "false"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                "false"
              ],
              [
                "test_FRAC",
                "false"
              ],
              [
                "test_FRAC_with_zero_vds",
                "false"
              ],
              [
                "test_FRAC_with_negative_input",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                "false"
              ],
              [
                "test_FRAC",
                "false"
              ],
              [
                "test_FRAC_with_zero_vds",
                "false"
              ],
              [
                "test_FRAC_with_negative_input",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                []
              ],
              [
                "test_FRAC",
                []
              ],
              [
                "test_FRAC_with_zero_vds",
                []
              ],
              [
                "test_FRAC_with_negative_input",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                "false"
              ],
              [
                "test_FRAC",
                "false"
              ],
              [
                "test_FRAC_with_zero_vds",
                "false"
              ],
              [
                "test_FRAC_with_negative_input",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_lib_vs_actual",
                "false"
              ],
              [
                "test_FRAC",
                "true"
              ],
              [
                "test_FRAC_with_zero_vds",
                "true"
              ],
              [
                "test_FRAC_with_negative_input",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_lib_vs_actual",
                  "0"
                ],
                [
                  "test_FRAC",
                  "0"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "0"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_lib_vs_actual",
                  "0"
                ],
                [
                  "test_FRAC",
                  "0"
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "0"
                ],
                [
                  "test_FRAC_with_negative_input",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                "false"
              ],
              [
                "test_FRAC",
                "false"
              ],
              [
                "test_FRAC_with_zero_vds",
                "false"
              ],
              [
                "test_FRAC_with_negative_input",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                "false"
              ],
              [
                "test_FRAC",
                "false"
              ],
              [
                "test_FRAC_with_zero_vds",
                "false"
              ],
              [
                "test_FRAC_with_negative_input",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                "1"
              ],
              [
                "test_FRAC",
                "1"
              ],
              [
                "test_FRAC_with_zero_vds",
                "1"
              ],
              [
                "test_FRAC_with_negative_input",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                [
                  "obj_frac",
                  "frac"
                ]
              ],
              [
                "test_FRAC",
                [
                  "frac"
                ]
              ],
              [
                "test_FRAC_with_zero_vds",
                []
              ],
              [
                "test_FRAC_with_negative_input",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                []
              ],
              [
                "test_FRAC",
                []
              ],
              [
                "test_FRAC_with_zero_vds",
                []
              ],
              [
                "test_FRAC_with_negative_input",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.677705860933293,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_FRAC",
                  "test_FRAC_with_zero_vds",
                  0.7205766921228922
                ],
                [
                  "test_FRAC",
                  "test_lib_vs_actual",
                  0.7463904912524668
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "test_FRAC_with_negative_input",
                  0.8060323502739514
                ],
                [
                  "test_FRAC_with_negative_input",
                  "test_lib_vs_actual",
                  0.5853140973807077
                ],
                [
                  "test_FRAC_with_zero_vds",
                  "test_lib_vs_actual",
                  0.6038810848771178
                ],
                [
                  "test_FRAC",
                  "test_FRAC_with_negative_input",
                  0.6040404496926219
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_lib_vs_actual",
                "false"
              ],
              [
                "test_FRAC",
                "false"
              ],
              [
                "test_FRAC_with_zero_vds",
                "false"
              ],
              [
                "test_FRAC_with_negative_input",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "CheckR_corr2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testSimpleInput",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "testPositiveOutput",
                  "[PyCallExpression: self.assertGreater]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testSimpleInput",
                  "[]"
                ],
                [
                  "testPositiveOutput",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testSimpleInput",
                  "false"
                ],
                [
                  "testPositiveOutput",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testSimpleInput",
                  "false"
                ],
                [
                  "testPositiveOutput",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testSimpleInput",
                  "false"
                ],
                [
                  "testPositiveOutput",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testSimpleInput",
                  "false"
                ],
                [
                  "testPositiveOutput",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                "false"
              ],
              [
                "testPositiveOutput",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                "false"
              ],
              [
                "testPositiveOutput",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                []
              ],
              [
                "testPositiveOutput",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                "false"
              ],
              [
                "testPositiveOutput",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testSimpleInput",
                "false"
              ],
              [
                "testPositiveOutput",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testSimpleInput",
                  "0"
                ],
                [
                  "testPositiveOutput",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testSimpleInput",
                  "0"
                ],
                [
                  "testPositiveOutput",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                "false"
              ],
              [
                "testPositiveOutput",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                "false"
              ],
              [
                "testPositiveOutput",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                "1"
              ],
              [
                "testPositiveOutput",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                [
                  "r"
                ]
              ],
              [
                "testPositiveOutput",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                []
              ],
              [
                "testPositiveOutput",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3451342449813167,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testPositiveOutput",
                  "testSimpleInput",
                  0.3451342449813167
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testSimpleInput",
                "false"
              ],
              [
                "testPositiveOutput",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CheckR_det2",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_simple_input",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_simple_input",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_simple_input",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_simple_input",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_simple_input",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_simple_input",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_simple_input",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_simple_input",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_simple_input",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CheckZigzag",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testZStar",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "testWiggleB",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "testZ",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testZStar",
                  "[]"
                ],
                [
                  "testWiggleB",
                  "[]"
                ],
                [
                  "testZ",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testZStar",
                  "false"
                ],
                [
                  "testWiggleB",
                  "true"
                ],
                [
                  "testZ",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testZStar",
                  "false"
                ],
                [
                  "testWiggleB",
                  "false"
                ],
                [
                  "testZ",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testZStar",
                  "false"
                ],
                [
                  "testWiggleB",
                  "false"
                ],
                [
                  "testZ",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testZStar",
                  "false"
                ],
                [
                  "testWiggleB",
                  "false"
                ],
                [
                  "testZ",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "false"
              ],
              [
                "testWiggleB",
                "false"
              ],
              [
                "testZ",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "false"
              ],
              [
                "testWiggleB",
                "false"
              ],
              [
                "testZ",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                []
              ],
              [
                "testWiggleB",
                []
              ],
              [
                "testZ",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "false"
              ],
              [
                "testWiggleB",
                "false"
              ],
              [
                "testZ",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "false"
              ],
              [
                "testWiggleB",
                "false"
              ],
              [
                "testZ",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testZStar",
                  "0"
                ],
                [
                  "testWiggleB",
                  "0"
                ],
                [
                  "testZ",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testZStar",
                  "0"
                ],
                [
                  "testWiggleB",
                  "0"
                ],
                [
                  "testZ",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "false"
              ],
              [
                "testWiggleB",
                "false"
              ],
              [
                "testZ",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "false"
              ],
              [
                "testWiggleB",
                "false"
              ],
              [
                "testZ",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "1"
              ],
              [
                "testWiggleB",
                "1"
              ],
              [
                "testZ",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                [
                  "result"
                ]
              ],
              [
                "testWiggleB",
                [
                  "result"
                ]
              ],
              [
                "testZ",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                []
              ],
              [
                "testWiggleB",
                []
              ],
              [
                "testZ",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3881699005468591,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testZ",
                  "testZStar",
                  0.6111111111111112
                ],
                [
                  "testWiggleB",
                  "testZStar",
                  0.31622776601683794
                ],
                [
                  "testWiggleB",
                  "testZ",
                  0.23717082451262844
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testZStar",
                "false"
              ],
              [
                "testWiggleB",
                "false"
              ],
              [
                "testZ",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "CheckIZZI_MD",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testPointNorming",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "testXyArray",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testPointNorming",
                  "[]"
                ],
                [
                  "testXyArray",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testPointNorming",
                  "true"
                ],
                [
                  "testXyArray",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "testPointNorming",
                  "false"
                ],
                [
                  "testXyArray",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testPointNorming",
                  "false"
                ],
                [
                  "testXyArray",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testPointNorming",
                  "false"
                ],
                [
                  "testXyArray",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "false"
              ],
              [
                "testXyArray",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "false"
              ],
              [
                "testXyArray",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                []
              ],
              [
                "testXyArray",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "false"
              ],
              [
                "testXyArray",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "false"
              ],
              [
                "testXyArray",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testPointNorming",
                  "0"
                ],
                [
                  "testXyArray",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testPointNorming",
                  "0"
                ],
                [
                  "testXyArray",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "false"
              ],
              [
                "testXyArray",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "false"
              ],
              [
                "testXyArray",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "1"
              ],
              [
                "testXyArray",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                [
                  "result"
                ]
              ],
              [
                "testXyArray",
                [
                  "xy_array"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                []
              ],
              [
                "testXyArray",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4073065399812784,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testPointNorming",
                  "testXyArray",
                  0.4073065399812784
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testPointNorming",
                "false"
              ],
              [
                "testXyArray",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "pmagpy_tests_\u0026_test_contribution_builder.py",
    "testCases": [
      {
        "name": "TestMagicDataFrame",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_init_blank",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_convert_to_pmag_list",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_all_to_str",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_update_row",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_init_with_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sort_dataframe_cols",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_init_with_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_delete_rows",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_delete_row",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_init_with_dtype",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_front_and_backfill",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_init_then_add_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_first_non_null_value",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_add_row",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_meas_dataframe",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_get_name",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_records_for_code",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_drop_stub_rows",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_blank_row",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_update_record",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_get_di_block",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_init_blank",
                  "[]"
                ],
                [
                  "test_convert_to_pmag_list",
                  "[]"
                ],
                [
                  "test_all_to_str",
                  "[]"
                ],
                [
                  "test_update_row",
                  "[]"
                ],
                [
                  "test_init_with_data",
                  "[]"
                ],
                [
                  "test_sort_dataframe_cols",
                  "[]"
                ],
                [
                  "test_init_with_file",
                  "[]"
                ],
                [
                  "test_delete_rows",
                  "[]"
                ],
                [
                  "test_delete_row",
                  "[]"
                ],
                [
                  "test_init_with_dtype",
                  "[]"
                ],
                [
                  "test_front_and_backfill",
                  "[]"
                ],
                [
                  "test_init_then_add_data",
                  "[]"
                ],
                [
                  "test_get_first_non_null_value",
                  "[]"
                ],
                [
                  "test_add_row",
                  "[]"
                ],
                [
                  "test_meas_dataframe",
                  "[]"
                ],
                [
                  "test_get_name",
                  "[]"
                ],
                [
                  "test_get_records_for_code",
                  "[]"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "[]"
                ],
                [
                  "test_drop_stub_rows",
                  "[]"
                ],
                [
                  "test_add_blank_row",
                  "[]"
                ],
                [
                  "test_update_record",
                  "[]"
                ],
                [
                  "test_get_di_block",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_init_blank",
                  "false"
                ],
                [
                  "test_convert_to_pmag_list",
                  "true"
                ],
                [
                  "test_all_to_str",
                  "false"
                ],
                [
                  "test_update_row",
                  "false"
                ],
                [
                  "test_init_with_data",
                  "false"
                ],
                [
                  "test_sort_dataframe_cols",
                  "false"
                ],
                [
                  "test_init_with_file",
                  "false"
                ],
                [
                  "test_delete_rows",
                  "true"
                ],
                [
                  "test_delete_row",
                  "false"
                ],
                [
                  "test_init_with_dtype",
                  "false"
                ],
                [
                  "test_front_and_backfill",
                  "false"
                ],
                [
                  "test_init_then_add_data",
                  "false"
                ],
                [
                  "test_get_first_non_null_value",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_meas_dataframe",
                  "false"
                ],
                [
                  "test_get_name",
                  "false"
                ],
                [
                  "test_get_records_for_code",
                  "false"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "false"
                ],
                [
                  "test_drop_stub_rows",
                  "false"
                ],
                [
                  "test_add_blank_row",
                  "false"
                ],
                [
                  "test_update_record",
                  "false"
                ],
                [
                  "test_get_di_block",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_init_blank",
                  "false"
                ],
                [
                  "test_convert_to_pmag_list",
                  "false"
                ],
                [
                  "test_all_to_str",
                  "false"
                ],
                [
                  "test_update_row",
                  "false"
                ],
                [
                  "test_init_with_data",
                  "false"
                ],
                [
                  "test_sort_dataframe_cols",
                  "false"
                ],
                [
                  "test_init_with_file",
                  "false"
                ],
                [
                  "test_delete_rows",
                  "false"
                ],
                [
                  "test_delete_row",
                  "false"
                ],
                [
                  "test_init_with_dtype",
                  "false"
                ],
                [
                  "test_front_and_backfill",
                  "false"
                ],
                [
                  "test_init_then_add_data",
                  "false"
                ],
                [
                  "test_get_first_non_null_value",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_meas_dataframe",
                  "false"
                ],
                [
                  "test_get_name",
                  "false"
                ],
                [
                  "test_get_records_for_code",
                  "false"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "false"
                ],
                [
                  "test_drop_stub_rows",
                  "false"
                ],
                [
                  "test_add_blank_row",
                  "false"
                ],
                [
                  "test_update_record",
                  "false"
                ],
                [
                  "test_get_di_block",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_init_blank",
                  "false"
                ],
                [
                  "test_convert_to_pmag_list",
                  "false"
                ],
                [
                  "test_all_to_str",
                  "false"
                ],
                [
                  "test_update_row",
                  "false"
                ],
                [
                  "test_init_with_data",
                  "false"
                ],
                [
                  "test_sort_dataframe_cols",
                  "false"
                ],
                [
                  "test_init_with_file",
                  "false"
                ],
                [
                  "test_delete_rows",
                  "false"
                ],
                [
                  "test_delete_row",
                  "false"
                ],
                [
                  "test_init_with_dtype",
                  "false"
                ],
                [
                  "test_front_and_backfill",
                  "false"
                ],
                [
                  "test_init_then_add_data",
                  "false"
                ],
                [
                  "test_get_first_non_null_value",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_meas_dataframe",
                  "false"
                ],
                [
                  "test_get_name",
                  "false"
                ],
                [
                  "test_get_records_for_code",
                  "false"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "false"
                ],
                [
                  "test_drop_stub_rows",
                  "false"
                ],
                [
                  "test_add_blank_row",
                  "false"
                ],
                [
                  "test_update_record",
                  "false"
                ],
                [
                  "test_get_di_block",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_init_blank",
                  "false"
                ],
                [
                  "test_convert_to_pmag_list",
                  "false"
                ],
                [
                  "test_all_to_str",
                  "false"
                ],
                [
                  "test_update_row",
                  "false"
                ],
                [
                  "test_init_with_data",
                  "false"
                ],
                [
                  "test_sort_dataframe_cols",
                  "false"
                ],
                [
                  "test_init_with_file",
                  "false"
                ],
                [
                  "test_delete_rows",
                  "false"
                ],
                [
                  "test_delete_row",
                  "false"
                ],
                [
                  "test_init_with_dtype",
                  "false"
                ],
                [
                  "test_front_and_backfill",
                  "false"
                ],
                [
                  "test_init_then_add_data",
                  "false"
                ],
                [
                  "test_get_first_non_null_value",
                  "false"
                ],
                [
                  "test_add_row",
                  "false"
                ],
                [
                  "test_meas_dataframe",
                  "false"
                ],
                [
                  "test_get_name",
                  "false"
                ],
                [
                  "test_get_records_for_code",
                  "false"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "false"
                ],
                [
                  "test_drop_stub_rows",
                  "false"
                ],
                [
                  "test_add_blank_row",
                  "false"
                ],
                [
                  "test_update_record",
                  "false"
                ],
                [
                  "test_get_di_block",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                "false"
              ],
              [
                "test_convert_to_pmag_list",
                "false"
              ],
              [
                "test_all_to_str",
                "false"
              ],
              [
                "test_update_row",
                "false"
              ],
              [
                "test_init_with_data",
                "false"
              ],
              [
                "test_sort_dataframe_cols",
                "false"
              ],
              [
                "test_init_with_file",
                "false"
              ],
              [
                "test_delete_rows",
                "false"
              ],
              [
                "test_delete_row",
                "false"
              ],
              [
                "test_init_with_dtype",
                "false"
              ],
              [
                "test_front_and_backfill",
                "false"
              ],
              [
                "test_init_then_add_data",
                "false"
              ],
              [
                "test_get_first_non_null_value",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_meas_dataframe",
                "false"
              ],
              [
                "test_get_name",
                "false"
              ],
              [
                "test_get_records_for_code",
                "false"
              ],
              [
                "test_convert_to_pmag_data_list",
                "false"
              ],
              [
                "test_drop_stub_rows",
                "false"
              ],
              [
                "test_add_blank_row",
                "false"
              ],
              [
                "test_update_record",
                "false"
              ],
              [
                "test_get_di_block",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                "false"
              ],
              [
                "test_convert_to_pmag_list",
                "false"
              ],
              [
                "test_all_to_str",
                "false"
              ],
              [
                "test_update_row",
                "false"
              ],
              [
                "test_init_with_data",
                "false"
              ],
              [
                "test_sort_dataframe_cols",
                "false"
              ],
              [
                "test_init_with_file",
                "false"
              ],
              [
                "test_delete_rows",
                "false"
              ],
              [
                "test_delete_row",
                "false"
              ],
              [
                "test_init_with_dtype",
                "false"
              ],
              [
                "test_front_and_backfill",
                "false"
              ],
              [
                "test_init_then_add_data",
                "false"
              ],
              [
                "test_get_first_non_null_value",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_meas_dataframe",
                "false"
              ],
              [
                "test_get_name",
                "false"
              ],
              [
                "test_get_records_for_code",
                "false"
              ],
              [
                "test_convert_to_pmag_data_list",
                "false"
              ],
              [
                "test_drop_stub_rows",
                "false"
              ],
              [
                "test_add_blank_row",
                "false"
              ],
              [
                "test_update_record",
                "false"
              ],
              [
                "test_get_di_block",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                []
              ],
              [
                "test_convert_to_pmag_list",
                []
              ],
              [
                "test_all_to_str",
                []
              ],
              [
                "test_update_row",
                []
              ],
              [
                "test_init_with_data",
                []
              ],
              [
                "test_sort_dataframe_cols",
                []
              ],
              [
                "test_init_with_file",
                []
              ],
              [
                "test_delete_rows",
                []
              ],
              [
                "test_delete_row",
                []
              ],
              [
                "test_init_with_dtype",
                []
              ],
              [
                "test_front_and_backfill",
                []
              ],
              [
                "test_init_then_add_data",
                []
              ],
              [
                "test_get_first_non_null_value",
                []
              ],
              [
                "test_add_row",
                []
              ],
              [
                "test_meas_dataframe",
                []
              ],
              [
                "test_get_name",
                []
              ],
              [
                "test_get_records_for_code",
                []
              ],
              [
                "test_convert_to_pmag_data_list",
                []
              ],
              [
                "test_drop_stub_rows",
                []
              ],
              [
                "test_add_blank_row",
                []
              ],
              [
                "test_update_record",
                []
              ],
              [
                "test_get_di_block",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                "false"
              ],
              [
                "test_convert_to_pmag_list",
                "false"
              ],
              [
                "test_all_to_str",
                "false"
              ],
              [
                "test_update_row",
                "false"
              ],
              [
                "test_init_with_data",
                "false"
              ],
              [
                "test_sort_dataframe_cols",
                "false"
              ],
              [
                "test_init_with_file",
                "false"
              ],
              [
                "test_delete_rows",
                "false"
              ],
              [
                "test_delete_row",
                "false"
              ],
              [
                "test_init_with_dtype",
                "false"
              ],
              [
                "test_front_and_backfill",
                "false"
              ],
              [
                "test_init_then_add_data",
                "false"
              ],
              [
                "test_get_first_non_null_value",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_meas_dataframe",
                "false"
              ],
              [
                "test_get_name",
                "false"
              ],
              [
                "test_get_records_for_code",
                "false"
              ],
              [
                "test_convert_to_pmag_data_list",
                "false"
              ],
              [
                "test_drop_stub_rows",
                "false"
              ],
              [
                "test_add_blank_row",
                "false"
              ],
              [
                "test_update_record",
                "false"
              ],
              [
                "test_get_di_block",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_init_blank",
                "false"
              ],
              [
                "test_convert_to_pmag_list",
                "false"
              ],
              [
                "test_all_to_str",
                "false"
              ],
              [
                "test_update_row",
                "false"
              ],
              [
                "test_init_with_data",
                "true"
              ],
              [
                "test_sort_dataframe_cols",
                "false"
              ],
              [
                "test_init_with_file",
                "false"
              ],
              [
                "test_delete_rows",
                "false"
              ],
              [
                "test_delete_row",
                "false"
              ],
              [
                "test_init_with_dtype",
                "false"
              ],
              [
                "test_front_and_backfill",
                "false"
              ],
              [
                "test_init_then_add_data",
                "true"
              ],
              [
                "test_get_first_non_null_value",
                "true"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_meas_dataframe",
                "false"
              ],
              [
                "test_get_name",
                "false"
              ],
              [
                "test_get_records_for_code",
                "true"
              ],
              [
                "test_convert_to_pmag_data_list",
                "false"
              ],
              [
                "test_drop_stub_rows",
                "true"
              ],
              [
                "test_add_blank_row",
                "false"
              ],
              [
                "test_update_record",
                "false"
              ],
              [
                "test_get_di_block",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_init_blank",
                  "0"
                ],
                [
                  "test_convert_to_pmag_list",
                  "0"
                ],
                [
                  "test_all_to_str",
                  "0"
                ],
                [
                  "test_update_row",
                  "0"
                ],
                [
                  "test_init_with_data",
                  "0"
                ],
                [
                  "test_sort_dataframe_cols",
                  "0"
                ],
                [
                  "test_init_with_file",
                  "0"
                ],
                [
                  "test_delete_rows",
                  "0"
                ],
                [
                  "test_delete_row",
                  "0"
                ],
                [
                  "test_init_with_dtype",
                  "0"
                ],
                [
                  "test_front_and_backfill",
                  "0"
                ],
                [
                  "test_init_then_add_data",
                  "0"
                ],
                [
                  "test_get_first_non_null_value",
                  "0"
                ],
                [
                  "test_add_row",
                  "0"
                ],
                [
                  "test_meas_dataframe",
                  "0"
                ],
                [
                  "test_get_name",
                  "0"
                ],
                [
                  "test_get_records_for_code",
                  "0"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "0"
                ],
                [
                  "test_drop_stub_rows",
                  "0"
                ],
                [
                  "test_add_blank_row",
                  "0"
                ],
                [
                  "test_update_record",
                  "0"
                ],
                [
                  "test_get_di_block",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_init_blank",
                  "0"
                ],
                [
                  "test_convert_to_pmag_list",
                  "0"
                ],
                [
                  "test_all_to_str",
                  "0"
                ],
                [
                  "test_update_row",
                  "0"
                ],
                [
                  "test_init_with_data",
                  "0"
                ],
                [
                  "test_sort_dataframe_cols",
                  "0"
                ],
                [
                  "test_init_with_file",
                  "0"
                ],
                [
                  "test_delete_rows",
                  "0"
                ],
                [
                  "test_delete_row",
                  "0"
                ],
                [
                  "test_init_with_dtype",
                  "0"
                ],
                [
                  "test_front_and_backfill",
                  "0"
                ],
                [
                  "test_init_then_add_data",
                  "0"
                ],
                [
                  "test_get_first_non_null_value",
                  "0"
                ],
                [
                  "test_add_row",
                  "0"
                ],
                [
                  "test_meas_dataframe",
                  "0"
                ],
                [
                  "test_get_name",
                  "0"
                ],
                [
                  "test_get_records_for_code",
                  "0"
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "0"
                ],
                [
                  "test_drop_stub_rows",
                  "0"
                ],
                [
                  "test_add_blank_row",
                  "0"
                ],
                [
                  "test_update_record",
                  "0"
                ],
                [
                  "test_get_di_block",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                "false"
              ],
              [
                "test_convert_to_pmag_list",
                "false"
              ],
              [
                "test_all_to_str",
                "false"
              ],
              [
                "test_update_row",
                "false"
              ],
              [
                "test_init_with_data",
                "false"
              ],
              [
                "test_sort_dataframe_cols",
                "false"
              ],
              [
                "test_init_with_file",
                "false"
              ],
              [
                "test_delete_rows",
                "false"
              ],
              [
                "test_delete_row",
                "false"
              ],
              [
                "test_init_with_dtype",
                "false"
              ],
              [
                "test_front_and_backfill",
                "false"
              ],
              [
                "test_init_then_add_data",
                "false"
              ],
              [
                "test_get_first_non_null_value",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_meas_dataframe",
                "false"
              ],
              [
                "test_get_name",
                "false"
              ],
              [
                "test_get_records_for_code",
                "false"
              ],
              [
                "test_convert_to_pmag_data_list",
                "false"
              ],
              [
                "test_drop_stub_rows",
                "false"
              ],
              [
                "test_add_blank_row",
                "false"
              ],
              [
                "test_update_record",
                "false"
              ],
              [
                "test_get_di_block",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                "false"
              ],
              [
                "test_convert_to_pmag_list",
                "false"
              ],
              [
                "test_all_to_str",
                "false"
              ],
              [
                "test_update_row",
                "false"
              ],
              [
                "test_init_with_data",
                "false"
              ],
              [
                "test_sort_dataframe_cols",
                "false"
              ],
              [
                "test_init_with_file",
                "false"
              ],
              [
                "test_delete_rows",
                "false"
              ],
              [
                "test_delete_row",
                "false"
              ],
              [
                "test_init_with_dtype",
                "false"
              ],
              [
                "test_front_and_backfill",
                "false"
              ],
              [
                "test_init_then_add_data",
                "false"
              ],
              [
                "test_get_first_non_null_value",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_meas_dataframe",
                "false"
              ],
              [
                "test_get_name",
                "false"
              ],
              [
                "test_get_records_for_code",
                "false"
              ],
              [
                "test_convert_to_pmag_data_list",
                "false"
              ],
              [
                "test_drop_stub_rows",
                "false"
              ],
              [
                "test_add_blank_row",
                "false"
              ],
              [
                "test_update_record",
                "false"
              ],
              [
                "test_get_di_block",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                "1"
              ],
              [
                "test_convert_to_pmag_list",
                "5"
              ],
              [
                "test_all_to_str",
                "1"
              ],
              [
                "test_update_row",
                "4"
              ],
              [
                "test_init_with_data",
                "4"
              ],
              [
                "test_sort_dataframe_cols",
                "2"
              ],
              [
                "test_init_with_file",
                "2"
              ],
              [
                "test_delete_rows",
                "1"
              ],
              [
                "test_delete_row",
                "2"
              ],
              [
                "test_init_with_dtype",
                "1"
              ],
              [
                "test_front_and_backfill",
                "2"
              ],
              [
                "test_init_then_add_data",
                "4"
              ],
              [
                "test_get_first_non_null_value",
                "2"
              ],
              [
                "test_add_row",
                "2"
              ],
              [
                "test_meas_dataframe",
                "2"
              ],
              [
                "test_get_name",
                "3"
              ],
              [
                "test_get_records_for_code",
                "3"
              ],
              [
                "test_convert_to_pmag_data_list",
                "6"
              ],
              [
                "test_drop_stub_rows",
                "3"
              ],
              [
                "test_add_blank_row",
                "2"
              ],
              [
                "test_update_record",
                "1"
              ],
              [
                "test_get_di_block",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                [
                  "magic_df"
                ]
              ],
              [
                "test_convert_to_pmag_list",
                [
                  "fname",
                  "df",
                  "relevant_lst",
                  "lst",
                  "directory"
                ]
              ],
              [
                "test_all_to_str",
                [
                  "fname",
                  "sites",
                  "directory"
                ]
              ],
              [
                "test_update_row",
                [
                  "magic_df"
                ]
              ],
              [
                "test_init_with_data",
                [
                  "magic_df",
                  "data"
                ]
              ],
              [
                "test_sort_dataframe_cols",
                [
                  "magic_df"
                ]
              ],
              [
                "test_init_with_file",
                [
                  "magic_df"
                ]
              ],
              [
                "test_delete_rows",
                [
                  "magic_df",
                  "cond"
                ]
              ],
              [
                "test_delete_row",
                [
                  "old_len",
                  "magic_df"
                ]
              ],
              [
                "test_init_with_dtype",
                [
                  "magic_df"
                ]
              ],
              [
                "test_front_and_backfill",
                [
                  "magic_df",
                  "directions"
                ]
              ],
              [
                "test_init_then_add_data",
                [
                  "magic_df",
                  "data"
                ]
              ],
              [
                "test_get_first_non_null_value",
                [
                  "magic_df",
                  "res"
                ]
              ],
              [
                "test_add_row",
                [
                  "old_len",
                  "magic_df"
                ]
              ],
              [
                "test_meas_dataframe",
                [
                  "magic_df",
                  "df",
                  "meas_file"
                ]
              ],
              [
                "test_get_name",
                [
                  "val",
                  "magic_df",
                  "df_slice",
                  "index_names"
                ]
              ],
              [
                "test_get_records_for_code",
                [
                  "magic_df",
                  "df_slice",
                  "results"
                ]
              ],
              [
                "test_convert_to_pmag_data_list",
                [
                  "magic_df",
                  "dct",
                  "lst"
                ]
              ],
              [
                "test_drop_stub_rows",
                [
                  "magic_df"
                ]
              ],
              [
                "test_add_blank_row",
                [
                  "old_len",
                  "magic_df"
                ]
              ],
              [
                "test_update_record",
                [
                  "magic_df",
                  "cond"
                ]
              ],
              [
                "test_get_di_block",
                [
                  "magic_df",
                  "di_block"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_init_blank",
                []
              ],
              [
                "test_convert_to_pmag_list",
                []
              ],
              [
                "test_all_to_str",
                []
              ],
              [
                "test_update_row",
                []
              ],
              [
                "test_init_with_data",
                []
              ],
              [
                "test_sort_dataframe_cols",
                []
              ],
              [
                "test_init_with_file",
                []
              ],
              [
                "test_delete_rows",
                []
              ],
              [
                "test_delete_row",
                []
              ],
              [
                "test_init_with_dtype",
                []
              ],
              [
                "test_front_and_backfill",
                []
              ],
              [
                "test_init_then_add_data",
                []
              ],
              [
                "test_get_first_non_null_value",
                []
              ],
              [
                "test_add_row",
                []
              ],
              [
                "test_meas_dataframe",
                []
              ],
              [
                "test_get_name",
                []
              ],
              [
                "test_get_records_for_code",
                []
              ],
              [
                "test_convert_to_pmag_data_list",
                []
              ],
              [
                "test_drop_stub_rows",
                []
              ],
              [
                "test_add_blank_row",
                []
              ],
              [
                "test_update_record",
                []
              ],
              [
                "test_get_di_block",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5045308681808974,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_update_row",
                  "test_delete_rows",
                  0.5776573540840528
                ],
                [
                  "test_add_row",
                  "test_get_first_non_null_value",
                  0.49738929719122227
                ],
                [
                  "test_init_blank",
                  "test_front_and_backfill",
                  0.40555355282690636
                ],
                [
                  "test_init_with_dtype",
                  "test_get_name",
                  0.5095246653650681
                ],
                [
                  "test_init_with_file",
                  "test_convert_to_pmag_list",
                  0.31760895401752304
                ],
                [
                  "test_add_row",
                  "test_get_name",
                  0.5336683912127115
                ],
                [
                  "test_delete_row",
                  "test_update_record",
                  0.6612903225806451
                ],
                [
                  "test_update_record",
                  "test_convert_to_pmag_list",
                  0.3418433273513877
                ],
                [
                  "test_update_row",
                  "test_convert_to_pmag_data_list",
                  0.5379439140183466
                ],
                [
                  "test_init_with_file",
                  "test_sort_dataframe_cols",
                  0.7705042602012596
                ],
                [
                  "test_init_then_add_data",
                  "test_get_first_non_null_value",
                  0.4612184445748615
                ],
                [
                  "test_update_record",
                  "test_get_records_for_code",
                  0.5716356620526792
                ],
                [
                  "test_init_with_data",
                  "test_get_records_for_code",
                  0.41501983641926626
                ],
                [
                  "test_init_with_dtype",
                  "test_sort_dataframe_cols",
                  0.653385466861646
                ],
                [
                  "test_init_with_dtype",
                  "test_get_first_non_null_value",
                  0.48478035274511067
                ],
                [
                  "test_add_blank_row",
                  "test_all_to_str",
                  0.3530090432487313
                ],
                [
                  "test_get_name",
                  "test_get_di_block",
                  0.506720625349773
                ],
                [
                  "test_add_row",
                  "test_get_records_for_code",
                  0.5020757168046374
                ],
                [
                  "test_update_record",
                  "test_get_name",
                  0.6252170838877579
                ],
                [
                  "test_init_with_file",
                  "test_get_name",
                  0.6419407387663695
                ],
                [
                  "test_init_then_add_data",
                  "test_sort_dataframe_cols",
                  0.4860433481948062
                ],
                [
                  "test_init_with_file",
                  "test_get_first_non_null_value",
                  0.5758649303016753
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_get_first_non_null_value",
                  0.4995575350892916
                ],
                [
                  "test_get_records_for_code",
                  "test_meas_dataframe",
                  0.44965779667101036
                ],
                [
                  "test_get_records_for_code",
                  "test_convert_to_pmag_list",
                  0.3787141479473784
                ],
                [
                  "test_delete_rows",
                  "test_update_record",
                  0.6495924548932419
                ],
                [
                  "test_init_with_dtype",
                  "test_convert_to_pmag_list",
                  0.22623846713400017
                ],
                [
                  "test_init_with_data",
                  "test_get_name",
                  0.49347259875752786
                ],
                [
                  "test_drop_stub_rows",
                  "test_convert_to_pmag_list",
                  0.30138764052923084
                ],
                [
                  "test_add_row",
                  "test_convert_to_pmag_list",
                  0.29015354976794355
                ],
                [
                  "test_update_row",
                  "test_delete_row",
                  0.6761663363417532
                ],
                [
                  "test_init_then_add_data",
                  "test_get_records_for_code",
                  0.4417211577307681
                ],
                [
                  "test_init_with_data",
                  "test_sort_dataframe_cols",
                  0.4418102987353551
                ],
                [
                  "test_update_record",
                  "test_sort_dataframe_cols",
                  0.6666887004996233
                ],
                [
                  "test_init_with_file",
                  "test_meas_dataframe",
                  0.55080945288825
                ],
                [
                  "test_init_blank",
                  "test_delete_row",
                  0.5715005715008572
                ],
                [
                  "test_update_row",
                  "test_meas_dataframe",
                  0.48059455740668133
                ],
                [
                  "test_get_records_for_code",
                  "test_get_first_non_null_value",
                  0.5477644755825631
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_get_name",
                  0.5412677916532325
                ],
                [
                  "test_delete_rows",
                  "test_get_di_block",
                  0.40804729543343665
                ],
                [
                  "test_init_blank",
                  "test_get_di_block",
                  0.3740329694714834
                ],
                [
                  "test_delete_row",
                  "test_get_di_block",
                  0.48233038234754255
                ],
                [
                  "test_init_blank",
                  "test_init_with_file",
                  0.6557892373388906
                ],
                [
                  "test_add_blank_row",
                  "test_delete_rows",
                  0.5911685457466842
                ],
                [
                  "test_init_blank",
                  "test_update_row",
                  0.5324139056496683
                ],
                [
                  "test_update_row",
                  "test_all_to_str",
                  0.271253207745385
                ],
                [
                  "test_meas_dataframe",
                  "test_convert_to_pmag_list",
                  0.3443155823144364
                ],
                [
                  "test_update_record",
                  "test_meas_dataframe",
                  0.5002443195845779
                ],
                [
                  "test_drop_stub_rows",
                  "test_meas_dataframe",
                  0.33617510114542537
                ],
                [
                  "test_add_blank_row",
                  "test_get_di_block",
                  0.4496560070843945
                ],
                [
                  "test_delete_rows",
                  "test_drop_stub_rows",
                  0.4233118135862247
                ],
                [
                  "test_init_with_data",
                  "test_convert_to_pmag_list",
                  0.38700133467148057
                ],
                [
                  "test_delete_row",
                  "test_drop_stub_rows",
                  0.5675726859764737
                ],
                [
                  "test_get_di_block",
                  "test_convert_to_pmag_list",
                  0.3249623763373097
                ],
                [
                  "test_init_with_dtype",
                  "test_meas_dataframe",
                  0.502518907629606
                ],
                [
                  "test_front_and_backfill",
                  "test_drop_stub_rows",
                  0.4900322223562124
                ],
                [
                  "test_init_with_file",
                  "test_get_records_for_code",
                  0.5536102382055429
                ],
                [
                  "test_update_record",
                  "test_get_first_non_null_value",
                  0.5924605598423158
                ],
                [
                  "test_init_with_data",
                  "test_add_row",
                  0.42156383954123355
                ],
                [
                  "test_init_with_dtype",
                  "test_get_records_for_code",
                  0.5059924592267421
                ],
                [
                  "test_add_blank_row",
                  "test_delete_row",
                  0.834878633399013
                ],
                [
                  "test_delete_row",
                  "test_front_and_backfill",
                  0.5871610209441096
                ],
                [
                  "test_get_first_non_null_value",
                  "test_meas_dataframe",
                  0.4385003279431825
                ],
                [
                  "test_init_with_data",
                  "test_init_then_add_data",
                  0.951453182187509
                ],
                [
                  "test_add_row",
                  "test_update_record",
                  0.6051058630029453
                ],
                [
                  "test_update_row",
                  "test_convert_to_pmag_list",
                  0.2388477152666645
                ],
                [
                  "test_delete_row",
                  "test_get_name",
                  0.6252170838877579
                ],
                [
                  "test_add_blank_row",
                  "test_update_record",
                  0.6143446547653114
                ],
                [
                  "test_add_blank_row",
                  "test_drop_stub_rows",
                  0.5337897590337558
                ],
                [
                  "test_delete_rows",
                  "test_get_name",
                  0.5319813511808079
                ],
                [
                  "test_update_row",
                  "test_sort_dataframe_cols",
                  0.6476018454665725
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_get_di_block",
                  0.4494293659373934
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_convert_to_pmag_list",
                  0.49965889815342035
                ],
                [
                  "test_init_with_dtype",
                  "test_add_row",
                  0.5735678682618889
                ],
                [
                  "test_init_with_dtype",
                  "test_delete_rows",
                  0.5932237473453119
                ],
                [
                  "test_init_with_file",
                  "test_delete_rows",
                  0.6636838030841121
                ],
                [
                  "test_add_row",
                  "test_meas_dataframe",
                  0.4962546289118298
                ],
                [
                  "test_get_di_block",
                  "test_meas_dataframe",
                  0.3966546845707138
                ],
                [
                  "test_init_with_data",
                  "test_update_record",
                  0.4930119320982991
                ],
                [
                  "test_init_with_file",
                  "test_add_row",
                  0.6597904084514847
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_drop_stub_rows",
                  0.4398651401520928
                ],
                [
                  "test_convert_to_pmag_list",
                  "test_all_to_str",
                  0.5897084980383271
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_meas_dataframe",
                  0.4599986370430946
                ],
                [
                  "test_update_row",
                  "test_get_first_non_null_value",
                  0.47416695981871154
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_get_records_for_code",
                  0.4658869214995824
                ],
                [
                  "test_init_with_file",
                  "test_update_record",
                  0.7446687115861395
                ],
                [
                  "test_add_row",
                  "test_drop_stub_rows",
                  0.5459840184054107
                ],
                [
                  "test_init_blank",
                  "test_delete_rows",
                  0.5231143743471868
                ],
                [
                  "test_init_then_add_data",
                  "test_add_blank_row",
                  0.48357641986159117
                ],
                [
                  "test_get_name",
                  "test_front_and_backfill",
                  0.5399055247990171
                ],
                [
                  "test_update_record",
                  "test_convert_to_pmag_data_list",
                  0.5378861108990536
                ],
                [
                  "test_front_and_backfill",
                  "test_all_to_str",
                  0.46169025843831935
                ],
                [
                  "test_init_with_dtype",
                  "test_delete_row",
                  0.5962472244699946
                ],
                [
                  "test_init_with_dtype",
                  "test_update_record",
                  0.6480948092065157
                ],
                [
                  "test_get_first_non_null_value",
                  "test_drop_stub_rows",
                  0.48435664546683377
                ],
                [
                  "test_init_blank",
                  "test_add_blank_row",
                  0.558156305651438
                ],
                [
                  "test_delete_rows",
                  "test_front_and_backfill",
                  0.5091621433231821
                ],
                [
                  "test_init_with_file",
                  "test_delete_row",
                  0.725072166544399
                ],
                [
                  "test_add_blank_row",
                  "test_meas_dataframe",
                  0.5038314736557788
                ],
                [
                  "test_update_record",
                  "test_all_to_str",
                  0.44177063089637436
                ],
                [
                  "test_init_with_data",
                  "test_init_with_dtype",
                  0.5282705437953743
                ],
                [
                  "test_init_then_add_data",
                  "test_convert_to_pmag_list",
                  0.3736285580219932
                ],
                [
                  "test_init_blank",
                  "test_convert_to_pmag_data_list",
                  0.5190342490858748
                ],
                [
                  "test_init_then_add_data",
                  "test_convert_to_pmag_data_list",
                  0.5538186196949966
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_get_first_non_null_value",
                  0.46489249403456173
                ],
                [
                  "test_init_with_data",
                  "test_drop_stub_rows",
                  0.42836658281994844
                ],
                [
                  "test_get_name",
                  "test_get_first_non_null_value",
                  0.5881132071619337
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_convert_to_pmag_data_list",
                  0.5316442066501519
                ],
                [
                  "test_get_di_block",
                  "test_get_records_for_code",
                  0.5255216749650856
                ],
                [
                  "test_front_and_backfill",
                  "test_convert_to_pmag_list",
                  0.3553113445848245
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_convert_to_pmag_list",
                  0.2297559542854401
                ],
                [
                  "test_init_with_data",
                  "test_meas_dataframe",
                  0.42474549856151905
                ],
                [
                  "test_get_records_for_code",
                  "test_front_and_backfill",
                  0.48148822109670686
                ],
                [
                  "test_init_blank",
                  "test_convert_to_pmag_list",
                  0.2638899069846298
                ],
                [
                  "test_get_name",
                  "test_drop_stub_rows",
                  0.4590731488048886
                ],
                [
                  "test_get_first_non_null_value",
                  "test_front_and_backfill",
                  0.619174861020294
                ],
                [
                  "test_init_blank",
                  "test_all_to_str",
                  0.2898754521821014
                ],
                [
                  "test_get_di_block",
                  "test_drop_stub_rows",
                  0.4667090004687827
                ],
                [
                  "test_init_with_data",
                  "test_update_row",
                  0.44972473218317405
                ],
                [
                  "test_init_blank",
                  "test_sort_dataframe_cols",
                  0.5761659596980319
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_all_to_str",
                  0.2969179877322692
                ],
                [
                  "test_add_blank_row",
                  "test_get_name",
                  0.5418164714711029
                ],
                [
                  "test_get_name",
                  "test_get_records_for_code",
                  0.578954416201552
                ],
                [
                  "test_add_blank_row",
                  "test_front_and_backfill",
                  0.5432694546952354
                ],
                [
                  "test_get_name",
                  "test_meas_dataframe",
                  0.5206264157741757
                ],
                [
                  "test_init_with_data",
                  "test_get_first_non_null_value",
                  0.43902030954166793
                ],
                [
                  "test_get_di_block",
                  "test_get_first_non_null_value",
                  0.4783163254772585
                ],
                [
                  "test_front_and_backfill",
                  "test_meas_dataframe",
                  0.4692498000006371
                ],
                [
                  "test_add_row",
                  "test_front_and_backfill",
                  0.5350995238203572
                ],
                [
                  "test_init_blank",
                  "test_get_first_non_null_value",
                  0.44529918808198476
                ],
                [
                  "test_meas_dataframe",
                  "test_all_to_str",
                  0.4281744192888376
                ],
                [
                  "test_add_blank_row",
                  "test_get_first_non_null_value",
                  0.504983466116928
                ],
                [
                  "test_init_with_data",
                  "test_init_with_file",
                  0.5657245767937635
                ],
                [
                  "test_get_first_non_null_value",
                  "test_all_to_str",
                  0.4291534246286561
                ],
                [
                  "test_init_with_data",
                  "test_init_blank",
                  0.5122056727163324
                ],
                [
                  "test_init_then_add_data",
                  "test_all_to_str",
                  0.40014617212254766
                ],
                [
                  "test_add_blank_row",
                  "test_sort_dataframe_cols",
                  0.619359796384177
                ],
                [
                  "test_init_then_add_data",
                  "test_init_blank",
                  0.538638634844706
                ],
                [
                  "test_get_name",
                  "test_convert_to_pmag_list",
                  0.4574368224569737
                ],
                [
                  "test_init_with_dtype",
                  "test_update_row",
                  0.5977319337018303
                ],
                [
                  "test_init_with_file",
                  "test_get_di_block",
                  0.4972329616000384
                ],
                [
                  "test_get_records_for_code",
                  "test_drop_stub_rows",
                  0.5074783212860845
                ],
                [
                  "test_init_blank",
                  "test_get_records_for_code",
                  0.47293785296374563
                ],
                [
                  "test_update_row",
                  "test_update_record",
                  0.6310885805856362
                ],
                [
                  "test_init_with_file",
                  "test_update_row",
                  0.698302618269232
                ],
                [
                  "test_add_blank_row",
                  "test_get_records_for_code",
                  0.509741438259523
                ],
                [
                  "test_init_with_dtype",
                  "test_front_and_backfill",
                  0.4470296705094523
                ],
                [
                  "test_init_with_file",
                  "test_front_and_backfill",
                  0.5882357548280667
                ],
                [
                  "test_init_then_add_data",
                  "test_init_with_file",
                  0.5857540178467058
                ],
                [
                  "test_get_di_block",
                  "test_all_to_str",
                  0.44279033619182706
                ],
                [
                  "test_init_with_file",
                  "test_add_blank_row",
                  0.6698641270570836
                ],
                [
                  "test_init_with_dtype",
                  "test_get_di_block",
                  0.3993648378746987
                ],
                [
                  "test_delete_row",
                  "test_convert_to_pmag_data_list",
                  0.5695264703637037
                ],
                [
                  "test_delete_rows",
                  "test_all_to_str",
                  0.34310015697711027
                ],
                [
                  "test_update_record",
                  "test_drop_stub_rows",
                  0.5780832912723343
                ],
                [
                  "test_update_row",
                  "test_drop_stub_rows",
                  0.4993794012880445
                ],
                [
                  "test_init_then_add_data",
                  "test_update_row",
                  0.4916206273911007
                ],
                [
                  "test_init_with_file",
                  "test_drop_stub_rows",
                  0.5491201525567068
                ],
                [
                  "test_update_row",
                  "test_add_blank_row",
                  0.6053466602228877
                ],
                [
                  "test_drop_stub_rows",
                  "test_all_to_str",
                  0.35767301376997934
                ],
                [
                  "test_get_di_block",
                  "test_front_and_backfill",
                  0.4807418819472758
                ],
                [
                  "test_init_with_dtype",
                  "test_convert_to_pmag_data_list",
                  0.5254992153061281
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_front_and_backfill",
                  0.43109618433151387
                ],
                [
                  "test_init_with_dtype",
                  "test_all_to_str",
                  0.25819888974716115
                ],
                [
                  "test_add_row",
                  "test_delete_row",
                  0.8223233522860539
                ],
                [
                  "test_delete_row",
                  "test_delete_rows",
                  0.6495924548932419
                ],
                [
                  "test_delete_row",
                  "test_all_to_str",
                  0.4283836420813327
                ],
                [
                  "test_init_then_add_data",
                  "test_delete_rows",
                  0.42936321899582647
                ],
                [
                  "test_init_with_file",
                  "test_all_to_str",
                  0.40662503039522213
                ],
                [
                  "test_init_with_data",
                  "test_front_and_backfill",
                  0.40233407141125876
                ],
                [
                  "test_init_with_dtype",
                  "test_drop_stub_rows",
                  0.4392292959596659
                ],
                [
                  "test_delete_row",
                  "test_get_records_for_code",
                  0.5384973628032486
                ],
                [
                  "test_update_record",
                  "test_get_di_block",
                  0.4896384184437174
                ],
                [
                  "test_delete_rows",
                  "test_convert_to_pmag_data_list",
                  0.4730382061258896
                ],
                [
                  "test_init_then_add_data",
                  "test_get_di_block",
                  0.40736509762195355
                ],
                [
                  "test_delete_rows",
                  "test_get_records_for_code",
                  0.5308211872513781
                ],
                [
                  "test_delete_rows",
                  "test_meas_dataframe",
                  0.4865092359773211
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_all_to_str",
                  0.4376881095324085
                ],
                [
                  "test_init_with_dtype",
                  "test_add_blank_row",
                  0.5823251360731083
                ],
                [
                  "test_update_row",
                  "test_get_records_for_code",
                  0.4862319519950274
                ],
                [
                  "test_init_then_add_data",
                  "test_delete_row",
                  0.521197524057043
                ],
                [
                  "test_delete_row",
                  "test_meas_dataframe",
                  0.515876954571596
                ],
                [
                  "test_init_blank",
                  "test_update_record",
                  0.5715005715008572
                ],
                [
                  "test_delete_rows",
                  "test_sort_dataframe_cols",
                  0.6251273685016524
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_meas_dataframe",
                  0.5200882648923051
                ],
                [
                  "test_delete_row",
                  "test_get_first_non_null_value",
                  0.5493725191265111
                ],
                [
                  "test_get_name",
                  "test_all_to_str",
                  0.570087712549569
                ],
                [
                  "test_init_then_add_data",
                  "test_update_record",
                  0.5342274621584691
                ],
                [
                  "test_init_blank",
                  "test_add_row",
                  0.5497624996033735
                ],
                [
                  "test_convert_to_pmag_data_list",
                  "test_get_di_block",
                  0.41097081216239395
                ],
                [
                  "test_init_then_add_data",
                  "test_drop_stub_rows",
                  0.4670081491703249
                ],
                [
                  "test_delete_rows",
                  "test_get_first_non_null_value",
                  0.49299980141972
                ],
                [
                  "test_init_then_add_data",
                  "test_add_row",
                  0.47630417974419564
                ],
                [
                  "test_delete_row",
                  "test_sort_dataframe_cols",
                  0.6341673004752514
                ],
                [
                  "test_init_with_file",
                  "test_convert_to_pmag_data_list",
                  0.6407097870320746
                ],
                [
                  "test_delete_rows",
                  "test_convert_to_pmag_list",
                  0.3251717328980667
                ],
                [
                  "test_init_blank",
                  "test_init_with_dtype",
                  0.7144345083117604
                ],
                [
                  "test_update_row",
                  "test_get_name",
                  0.5352858025106524
                ],
                [
                  "test_init_with_data",
                  "test_convert_to_pmag_data_list",
                  0.5462564880729823
                ],
                [
                  "test_add_row",
                  "test_add_blank_row",
                  0.8637355125217873
                ],
                [
                  "test_init_then_add_data",
                  "test_init_with_dtype",
                  0.5235673853646196
                ],
                [
                  "test_update_row",
                  "test_get_di_block",
                  0.4289176857927352
                ],
                [
                  "test_init_blank",
                  "test_meas_dataframe",
                  0.5231388366621641
                ],
                [
                  "test_init_blank",
                  "test_drop_stub_rows",
                  0.3931127970861248
                ],
                [
                  "test_init_then_add_data",
                  "test_meas_dataframe",
                  0.4420122177473814
                ],
                [
                  "test_delete_row",
                  "test_convert_to_pmag_list",
                  0.3418433273513877
                ],
                [
                  "test_add_row",
                  "test_get_di_block",
                  0.4428938774200016
                ],
                [
                  "test_init_with_data",
                  "test_all_to_str",
                  0.40919660368228405
                ],
                [
                  "test_add_row",
                  "test_delete_rows",
                  0.5822782867556608
                ],
                [
                  "test_update_row",
                  "test_front_and_backfill",
                  0.503818819024902
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_drop_stub_rows",
                  0.4662419334792519
                ],
                [
                  "test_add_blank_row",
                  "test_convert_to_pmag_list",
                  0.2945836311624852
                ],
                [
                  "test_add_blank_row",
                  "test_convert_to_pmag_data_list",
                  0.5150262026246047
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_get_records_for_code",
                  0.5011323069984058
                ],
                [
                  "test_init_with_data",
                  "test_add_blank_row",
                  0.42800030093781744
                ],
                [
                  "test_get_first_non_null_value",
                  "test_convert_to_pmag_list",
                  0.36260216636899717
                ],
                [
                  "test_update_record",
                  "test_front_and_backfill",
                  0.5665588798583513
                ],
                [
                  "test_update_row",
                  "test_add_row",
                  0.682969465718298
                ],
                [
                  "test_init_with_data",
                  "test_delete_row",
                  0.4930119320982991
                ],
                [
                  "test_init_with_dtype",
                  "test_init_with_file",
                  0.7874259854358902
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_front_and_backfill",
                  0.5400284401164431
                ],
                [
                  "test_init_then_add_data",
                  "test_get_name",
                  0.5121993539020251
                ],
                [
                  "test_add_row",
                  "test_sort_dataframe_cols",
                  0.6100455846621579
                ],
                [
                  "test_init_with_data",
                  "test_get_di_block",
                  0.3909199660246932
                ],
                [
                  "test_add_row",
                  "test_all_to_str",
                  0.3477003341788151
                ],
                [
                  "test_init_then_add_data",
                  "test_front_and_backfill",
                  0.4244109491278615
                ],
                [
                  "test_add_row",
                  "test_convert_to_pmag_data_list",
                  0.5072810065017075
                ],
                [
                  "test_get_records_for_code",
                  "test_all_to_str",
                  0.36443550701144034
                ],
                [
                  "test_init_with_data",
                  "test_delete_rows",
                  0.3885944631870226
                ],
                [
                  "test_init_blank",
                  "test_get_name",
                  0.48536267169707553
                ],
                [
                  "test_sort_dataframe_cols",
                  "test_get_name",
                  0.5237878578684708
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_init_blank",
                "false"
              ],
              [
                "test_convert_to_pmag_list",
                "true"
              ],
              [
                "test_all_to_str",
                "false"
              ],
              [
                "test_update_row",
                "false"
              ],
              [
                "test_init_with_data",
                "false"
              ],
              [
                "test_sort_dataframe_cols",
                "false"
              ],
              [
                "test_init_with_file",
                "false"
              ],
              [
                "test_delete_rows",
                "true"
              ],
              [
                "test_delete_row",
                "false"
              ],
              [
                "test_init_with_dtype",
                "false"
              ],
              [
                "test_front_and_backfill",
                "false"
              ],
              [
                "test_init_then_add_data",
                "false"
              ],
              [
                "test_get_first_non_null_value",
                "false"
              ],
              [
                "test_add_row",
                "false"
              ],
              [
                "test_meas_dataframe",
                "false"
              ],
              [
                "test_get_name",
                "false"
              ],
              [
                "test_get_records_for_code",
                "false"
              ],
              [
                "test_convert_to_pmag_data_list",
                "false"
              ],
              [
                "test_drop_stub_rows",
                "false"
              ],
              [
                "test_add_blank_row",
                "false"
              ],
              [
                "test_update_record",
                "false"
              ],
              [
                "test_get_di_block",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 22
      },
      {
        "name": "TestContribution",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_min_max_lat_lon",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_propagate_cols_up_old",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sites_only_propagation",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_propagate_ages",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_vocabulary_is_created",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_add_magic_table",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreater]"
                ],
                [
                  "test_propagate_lithology_cols",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "[]"
                ],
                [
                  "test_init_empty",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_age_levels",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_custom_filenames",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_propagate_ages_location_component",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_propagate_name_down",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_propagate_name_down_fail",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn]"
                ],
                [
                  "test_propagate_cols_up",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "[]"
                ],
                [
                  "test_add_empty_magic_table",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_init",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_magic_table_from_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "[]"
                ],
                [
                  "test_propagate_average_up",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_get_parent_and_child",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_find_missing_items",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_min_max_lat_lon",
                  "[]"
                ],
                [
                  "test_propagate_cols_up_old",
                  "[]"
                ],
                [
                  "test_sites_only_propagation",
                  "[]"
                ],
                [
                  "test_propagate_ages",
                  "[]"
                ],
                [
                  "test_vocabulary_is_created",
                  "[]"
                ],
                [
                  "test_add_magic_table",
                  "[]"
                ],
                [
                  "test_propagate_lithology_cols",
                  "[]"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "[]"
                ],
                [
                  "test_init_empty",
                  "[]"
                ],
                [
                  "test_get_age_levels",
                  "[]"
                ],
                [
                  "test_add_custom_filenames",
                  "[]"
                ],
                [
                  "test_propagate_ages_location_component",
                  "[]"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "[]"
                ],
                [
                  "test_propagate_name_down",
                  "[]"
                ],
                [
                  "test_propagate_name_down_fail",
                  "[]"
                ],
                [
                  "test_propagate_cols_up",
                  "[]"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "[]"
                ],
                [
                  "test_add_empty_magic_table",
                  "[]"
                ],
                [
                  "test_init",
                  "[]"
                ],
                [
                  "test_add_magic_table_from_data",
                  "[]"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "[]"
                ],
                [
                  "test_propagate_average_up",
                  "[]"
                ],
                [
                  "test_get_parent_and_child",
                  "[]"
                ],
                [
                  "test_find_missing_items",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_min_max_lat_lon",
                  "false"
                ],
                [
                  "test_propagate_cols_up_old",
                  "false"
                ],
                [
                  "test_sites_only_propagation",
                  "true"
                ],
                [
                  "test_propagate_ages",
                  "false"
                ],
                [
                  "test_vocabulary_is_created",
                  "true"
                ],
                [
                  "test_add_magic_table",
                  "false"
                ],
                [
                  "test_propagate_lithology_cols",
                  "false"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "false"
                ],
                [
                  "test_init_empty",
                  "true"
                ],
                [
                  "test_get_age_levels",
                  "false"
                ],
                [
                  "test_add_custom_filenames",
                  "false"
                ],
                [
                  "test_propagate_ages_location_component",
                  "false"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "false"
                ],
                [
                  "test_propagate_name_down",
                  "false"
                ],
                [
                  "test_propagate_name_down_fail",
                  "false"
                ],
                [
                  "test_propagate_cols_up",
                  "false"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "false"
                ],
                [
                  "test_add_empty_magic_table",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_add_magic_table_from_data",
                  "false"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "false"
                ],
                [
                  "test_propagate_average_up",
                  "false"
                ],
                [
                  "test_get_parent_and_child",
                  "false"
                ],
                [
                  "test_find_missing_items",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_min_max_lat_lon",
                  "false"
                ],
                [
                  "test_propagate_cols_up_old",
                  "false"
                ],
                [
                  "test_sites_only_propagation",
                  "false"
                ],
                [
                  "test_propagate_ages",
                  "false"
                ],
                [
                  "test_vocabulary_is_created",
                  "false"
                ],
                [
                  "test_add_magic_table",
                  "false"
                ],
                [
                  "test_propagate_lithology_cols",
                  "false"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "false"
                ],
                [
                  "test_init_empty",
                  "false"
                ],
                [
                  "test_get_age_levels",
                  "false"
                ],
                [
                  "test_add_custom_filenames",
                  "false"
                ],
                [
                  "test_propagate_ages_location_component",
                  "false"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "false"
                ],
                [
                  "test_propagate_name_down",
                  "false"
                ],
                [
                  "test_propagate_name_down_fail",
                  "false"
                ],
                [
                  "test_propagate_cols_up",
                  "false"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "false"
                ],
                [
                  "test_add_empty_magic_table",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_add_magic_table_from_data",
                  "false"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "false"
                ],
                [
                  "test_propagate_average_up",
                  "false"
                ],
                [
                  "test_get_parent_and_child",
                  "false"
                ],
                [
                  "test_find_missing_items",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_min_max_lat_lon",
                  "false"
                ],
                [
                  "test_propagate_cols_up_old",
                  "false"
                ],
                [
                  "test_sites_only_propagation",
                  "true"
                ],
                [
                  "test_propagate_ages",
                  "false"
                ],
                [
                  "test_vocabulary_is_created",
                  "false"
                ],
                [
                  "test_add_magic_table",
                  "false"
                ],
                [
                  "test_propagate_lithology_cols",
                  "false"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "false"
                ],
                [
                  "test_init_empty",
                  "false"
                ],
                [
                  "test_get_age_levels",
                  "false"
                ],
                [
                  "test_add_custom_filenames",
                  "false"
                ],
                [
                  "test_propagate_ages_location_component",
                  "true"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "false"
                ],
                [
                  "test_propagate_name_down",
                  "false"
                ],
                [
                  "test_propagate_name_down_fail",
                  "false"
                ],
                [
                  "test_propagate_cols_up",
                  "false"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "false"
                ],
                [
                  "test_add_empty_magic_table",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_add_magic_table_from_data",
                  "false"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "false"
                ],
                [
                  "test_propagate_average_up",
                  "true"
                ],
                [
                  "test_get_parent_and_child",
                  "false"
                ],
                [
                  "test_find_missing_items",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_min_max_lat_lon",
                  "false"
                ],
                [
                  "test_propagate_cols_up_old",
                  "false"
                ],
                [
                  "test_sites_only_propagation",
                  "false"
                ],
                [
                  "test_propagate_ages",
                  "false"
                ],
                [
                  "test_vocabulary_is_created",
                  "false"
                ],
                [
                  "test_add_magic_table",
                  "false"
                ],
                [
                  "test_propagate_lithology_cols",
                  "false"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "false"
                ],
                [
                  "test_init_empty",
                  "false"
                ],
                [
                  "test_get_age_levels",
                  "false"
                ],
                [
                  "test_add_custom_filenames",
                  "false"
                ],
                [
                  "test_propagate_ages_location_component",
                  "false"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "false"
                ],
                [
                  "test_propagate_name_down",
                  "false"
                ],
                [
                  "test_propagate_name_down_fail",
                  "false"
                ],
                [
                  "test_propagate_cols_up",
                  "false"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "false"
                ],
                [
                  "test_add_empty_magic_table",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_add_magic_table_from_data",
                  "false"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "false"
                ],
                [
                  "test_propagate_average_up",
                  "false"
                ],
                [
                  "test_get_parent_and_child",
                  "false"
                ],
                [
                  "test_find_missing_items",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "false"
              ],
              [
                "test_propagate_cols_up_old",
                "false"
              ],
              [
                "test_sites_only_propagation",
                "false"
              ],
              [
                "test_propagate_ages",
                "false"
              ],
              [
                "test_vocabulary_is_created",
                "false"
              ],
              [
                "test_add_magic_table",
                "false"
              ],
              [
                "test_propagate_lithology_cols",
                "false"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "false"
              ],
              [
                "test_init_empty",
                "false"
              ],
              [
                "test_get_age_levels",
                "false"
              ],
              [
                "test_add_custom_filenames",
                "false"
              ],
              [
                "test_propagate_ages_location_component",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "false"
              ],
              [
                "test_propagate_name_down",
                "false"
              ],
              [
                "test_propagate_name_down_fail",
                "false"
              ],
              [
                "test_propagate_cols_up",
                "false"
              ],
              [
                "test_propagate_ages_other_contribution",
                "false"
              ],
              [
                "test_add_empty_magic_table",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_add_magic_table_from_data",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "false"
              ],
              [
                "test_propagate_average_up",
                "false"
              ],
              [
                "test_get_parent_and_child",
                "false"
              ],
              [
                "test_find_missing_items",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "false"
              ],
              [
                "test_propagate_cols_up_old",
                "false"
              ],
              [
                "test_sites_only_propagation",
                "false"
              ],
              [
                "test_propagate_ages",
                "false"
              ],
              [
                "test_vocabulary_is_created",
                "false"
              ],
              [
                "test_add_magic_table",
                "false"
              ],
              [
                "test_propagate_lithology_cols",
                "false"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "false"
              ],
              [
                "test_init_empty",
                "true"
              ],
              [
                "test_get_age_levels",
                "false"
              ],
              [
                "test_add_custom_filenames",
                "false"
              ],
              [
                "test_propagate_ages_location_component",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "false"
              ],
              [
                "test_propagate_name_down",
                "false"
              ],
              [
                "test_propagate_name_down_fail",
                "false"
              ],
              [
                "test_propagate_cols_up",
                "false"
              ],
              [
                "test_propagate_ages_other_contribution",
                "false"
              ],
              [
                "test_add_empty_magic_table",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_add_magic_table_from_data",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "false"
              ],
              [
                "test_propagate_average_up",
                "false"
              ],
              [
                "test_get_parent_and_child",
                "false"
              ],
              [
                "test_find_missing_items",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_propagate_cols_up_old",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_sites_only_propagation",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_ages",
                [
                  "self.directory"
                ]
              ],
              [
                "test_vocabulary_is_created",
                [
                  "self.directory"
                ]
              ],
              [
                "test_add_magic_table",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_lithology_cols",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_ages_extra_location_rows",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_init_empty",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_get_age_levels",
                [
                  "self.directory"
                ]
              ],
              [
                "test_add_custom_filenames",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_ages_location_component",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_name_down",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_propagate_name_down_fail",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_propagate_cols_up",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_propagate_ages_other_contribution",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_add_empty_magic_table",
                [
                  "self.con"
                ]
              ],
              [
                "test_init",
                [
                  "self.directory"
                ]
              ],
              [
                "test_add_magic_table_from_data",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_average_up",
                [
                  "self.con",
                  "self.directory"
                ]
              ],
              [
                "test_get_parent_and_child",
                [
                  "self.directory"
                ]
              ],
              [
                "test_find_missing_items",
                [
                  "self.directory"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "false"
              ],
              [
                "test_propagate_cols_up_old",
                "false"
              ],
              [
                "test_sites_only_propagation",
                "false"
              ],
              [
                "test_propagate_ages",
                "false"
              ],
              [
                "test_vocabulary_is_created",
                "false"
              ],
              [
                "test_add_magic_table",
                "false"
              ],
              [
                "test_propagate_lithology_cols",
                "false"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "false"
              ],
              [
                "test_init_empty",
                "false"
              ],
              [
                "test_get_age_levels",
                "false"
              ],
              [
                "test_add_custom_filenames",
                "false"
              ],
              [
                "test_propagate_ages_location_component",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "false"
              ],
              [
                "test_propagate_name_down",
                "false"
              ],
              [
                "test_propagate_name_down_fail",
                "false"
              ],
              [
                "test_propagate_cols_up",
                "false"
              ],
              [
                "test_propagate_ages_other_contribution",
                "false"
              ],
              [
                "test_add_empty_magic_table",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_add_magic_table_from_data",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "false"
              ],
              [
                "test_propagate_average_up",
                "false"
              ],
              [
                "test_get_parent_and_child",
                "false"
              ],
              [
                "test_find_missing_items",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "true"
              ],
              [
                "test_propagate_cols_up_old",
                "false"
              ],
              [
                "test_sites_only_propagation",
                "false"
              ],
              [
                "test_propagate_ages",
                "true"
              ],
              [
                "test_vocabulary_is_created",
                "false"
              ],
              [
                "test_add_magic_table",
                "true"
              ],
              [
                "test_propagate_lithology_cols",
                "false"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "false"
              ],
              [
                "test_init_empty",
                "true"
              ],
              [
                "test_get_age_levels",
                "false"
              ],
              [
                "test_add_custom_filenames",
                "false"
              ],
              [
                "test_propagate_ages_location_component",
                "true"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "false"
              ],
              [
                "test_propagate_name_down",
                "false"
              ],
              [
                "test_propagate_name_down_fail",
                "false"
              ],
              [
                "test_propagate_cols_up",
                "false"
              ],
              [
                "test_propagate_ages_other_contribution",
                "false"
              ],
              [
                "test_add_empty_magic_table",
                "true"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_add_magic_table_from_data",
                "true"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "false"
              ],
              [
                "test_propagate_average_up",
                "false"
              ],
              [
                "test_get_parent_and_child",
                "false"
              ],
              [
                "test_find_missing_items",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_min_max_lat_lon",
                  "0"
                ],
                [
                  "test_propagate_cols_up_old",
                  "0"
                ],
                [
                  "test_sites_only_propagation",
                  "0"
                ],
                [
                  "test_propagate_ages",
                  "0"
                ],
                [
                  "test_vocabulary_is_created",
                  "0"
                ],
                [
                  "test_add_magic_table",
                  "0"
                ],
                [
                  "test_propagate_lithology_cols",
                  "0"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "0"
                ],
                [
                  "test_init_empty",
                  "0"
                ],
                [
                  "test_get_age_levels",
                  "0"
                ],
                [
                  "test_add_custom_filenames",
                  "0"
                ],
                [
                  "test_propagate_ages_location_component",
                  "0"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "0"
                ],
                [
                  "test_propagate_name_down",
                  "0"
                ],
                [
                  "test_propagate_name_down_fail",
                  "0"
                ],
                [
                  "test_propagate_cols_up",
                  "0"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "0"
                ],
                [
                  "test_add_empty_magic_table",
                  "0"
                ],
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_add_magic_table_from_data",
                  "0"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "0"
                ],
                [
                  "test_propagate_average_up",
                  "0"
                ],
                [
                  "test_get_parent_and_child",
                  "0"
                ],
                [
                  "test_find_missing_items",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_min_max_lat_lon",
                  "0"
                ],
                [
                  "test_propagate_cols_up_old",
                  "0"
                ],
                [
                  "test_sites_only_propagation",
                  "0"
                ],
                [
                  "test_propagate_ages",
                  "0"
                ],
                [
                  "test_vocabulary_is_created",
                  "0"
                ],
                [
                  "test_add_magic_table",
                  "0"
                ],
                [
                  "test_propagate_lithology_cols",
                  "0"
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "0"
                ],
                [
                  "test_init_empty",
                  "0"
                ],
                [
                  "test_get_age_levels",
                  "0"
                ],
                [
                  "test_add_custom_filenames",
                  "0"
                ],
                [
                  "test_propagate_ages_location_component",
                  "0"
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "0"
                ],
                [
                  "test_propagate_name_down",
                  "0"
                ],
                [
                  "test_propagate_name_down_fail",
                  "0"
                ],
                [
                  "test_propagate_cols_up",
                  "0"
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "0"
                ],
                [
                  "test_add_empty_magic_table",
                  "0"
                ],
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_add_magic_table_from_data",
                  "0"
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "0"
                ],
                [
                  "test_propagate_average_up",
                  "0"
                ],
                [
                  "test_get_parent_and_child",
                  "0"
                ],
                [
                  "test_find_missing_items",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "false"
              ],
              [
                "test_propagate_cols_up_old",
                "false"
              ],
              [
                "test_sites_only_propagation",
                "false"
              ],
              [
                "test_propagate_ages",
                "false"
              ],
              [
                "test_vocabulary_is_created",
                "false"
              ],
              [
                "test_add_magic_table",
                "false"
              ],
              [
                "test_propagate_lithology_cols",
                "false"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "false"
              ],
              [
                "test_init_empty",
                "true"
              ],
              [
                "test_get_age_levels",
                "false"
              ],
              [
                "test_add_custom_filenames",
                "false"
              ],
              [
                "test_propagate_ages_location_component",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "false"
              ],
              [
                "test_propagate_name_down",
                "false"
              ],
              [
                "test_propagate_name_down_fail",
                "false"
              ],
              [
                "test_propagate_cols_up",
                "false"
              ],
              [
                "test_propagate_ages_other_contribution",
                "false"
              ],
              [
                "test_add_empty_magic_table",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_add_magic_table_from_data",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "false"
              ],
              [
                "test_propagate_average_up",
                "false"
              ],
              [
                "test_get_parent_and_child",
                "false"
              ],
              [
                "test_find_missing_items",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "false"
              ],
              [
                "test_propagate_cols_up_old",
                "false"
              ],
              [
                "test_sites_only_propagation",
                "false"
              ],
              [
                "test_propagate_ages",
                "false"
              ],
              [
                "test_vocabulary_is_created",
                "false"
              ],
              [
                "test_add_magic_table",
                "false"
              ],
              [
                "test_propagate_lithology_cols",
                "false"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "false"
              ],
              [
                "test_init_empty",
                "false"
              ],
              [
                "test_get_age_levels",
                "false"
              ],
              [
                "test_add_custom_filenames",
                "false"
              ],
              [
                "test_propagate_ages_location_component",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "false"
              ],
              [
                "test_propagate_name_down",
                "false"
              ],
              [
                "test_propagate_name_down_fail",
                "false"
              ],
              [
                "test_propagate_cols_up",
                "false"
              ],
              [
                "test_propagate_ages_other_contribution",
                "false"
              ],
              [
                "test_add_empty_magic_table",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_add_magic_table_from_data",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "false"
              ],
              [
                "test_propagate_average_up",
                "false"
              ],
              [
                "test_get_parent_and_child",
                "false"
              ],
              [
                "test_find_missing_items",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "2"
              ],
              [
                "test_propagate_cols_up_old",
                "2"
              ],
              [
                "test_sites_only_propagation",
                "8"
              ],
              [
                "test_propagate_ages",
                "4"
              ],
              [
                "test_vocabulary_is_created",
                "2"
              ],
              [
                "test_add_magic_table",
                "5"
              ],
              [
                "test_propagate_lithology_cols",
                "5"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "0"
              ],
              [
                "test_init_empty",
                "1"
              ],
              [
                "test_get_age_levels",
                "6"
              ],
              [
                "test_add_custom_filenames",
                "1"
              ],
              [
                "test_propagate_ages_location_component",
                "5"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "3"
              ],
              [
                "test_propagate_name_down",
                "2"
              ],
              [
                "test_propagate_name_down_fail",
                "4"
              ],
              [
                "test_propagate_cols_up",
                "3"
              ],
              [
                "test_propagate_ages_other_contribution",
                "0"
              ],
              [
                "test_add_empty_magic_table",
                "3"
              ],
              [
                "test_init",
                "2"
              ],
              [
                "test_add_magic_table_from_data",
                "4"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "0"
              ],
              [
                "test_propagate_average_up",
                "8"
              ],
              [
                "test_get_parent_and_child",
                "4"
              ],
              [
                "test_find_missing_items",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                [
                  "loc_container",
                  "site_container",
                  "con"
                ]
              ],
              [
                "test_propagate_cols_up_old",
                [
                  "con",
                  "directory"
                ]
              ],
              [
                "test_sites_only_propagation",
                [
                  "con",
                  "samp_df",
                  "directory"
                ]
              ],
              [
                "test_propagate_ages",
                [
                  "res"
                ]
              ],
              [
                "test_vocabulary_is_created",
                []
              ],
              [
                "test_add_magic_table",
                [
                  "con"
                ]
              ],
              [
                "test_propagate_lithology_cols",
                [
                  "res"
                ]
              ],
              [
                "test_propagate_ages_extra_location_rows",
                [
                  "con",
                  "directory"
                ]
              ],
              [
                "test_init_empty",
                [
                  "fname",
                  "tables",
                  "con",
                  "files"
                ]
              ],
              [
                "test_get_age_levels",
                []
              ],
              [
                "test_add_custom_filenames",
                []
              ],
              [
                "test_propagate_ages_location_component",
                [
                  "res"
                ]
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                []
              ],
              [
                "test_propagate_name_down",
                [
                  "con",
                  "directory"
                ]
              ],
              [
                "test_propagate_name_down_fail",
                [
                  "con",
                  "meas_df",
                  "directory"
                ]
              ],
              [
                "test_propagate_cols_up",
                [
                  "con",
                  "directory",
                  "cols",
                  "ind"
                ]
              ],
              [
                "test_propagate_ages_other_contribution",
                [
                  "con",
                  "directory"
                ]
              ],
              [
                "test_add_empty_magic_table",
                [
                  "con"
                ]
              ],
              [
                "test_init",
                []
              ],
              [
                "test_add_magic_table_from_data",
                [
                  "magic_df",
                  "data"
                ]
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                []
              ],
              [
                "test_propagate_average_up",
                [
                  "res",
                  "con",
                  "directory"
                ]
              ],
              [
                "test_get_parent_and_child",
                [
                  "parent_name",
                  "child_name"
                ]
              ],
              [
                "test_find_missing_items",
                [
                  "con",
                  "missing",
                  "directory"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                []
              ],
              [
                "test_propagate_cols_up_old",
                []
              ],
              [
                "test_sites_only_propagation",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_ages",
                [
                  "self.con"
                ]
              ],
              [
                "test_vocabulary_is_created",
                [
                  "self.con"
                ]
              ],
              [
                "test_add_magic_table",
                [
                  "self.directory"
                ]
              ],
              [
                "test_propagate_lithology_cols",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_ages_extra_location_rows",
                []
              ],
              [
                "test_init_empty",
                []
              ],
              [
                "test_get_age_levels",
                [
                  "self.con"
                ]
              ],
              [
                "test_add_custom_filenames",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_ages_location_component",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_name_down",
                []
              ],
              [
                "test_propagate_name_down_fail",
                []
              ],
              [
                "test_propagate_cols_up",
                []
              ],
              [
                "test_propagate_ages_other_contribution",
                []
              ],
              [
                "test_add_empty_magic_table",
                [
                  "self.directory"
                ]
              ],
              [
                "test_init",
                [
                  "self.con"
                ]
              ],
              [
                "test_add_magic_table_from_data",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                [
                  "self.con"
                ]
              ],
              [
                "test_propagate_average_up",
                []
              ],
              [
                "test_get_parent_and_child",
                [
                  "self.con"
                ]
              ],
              [
                "test_find_missing_items",
                [
                  "self.con"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2622225436711757,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_vocabulary_is_created",
                  "test_propagate_all_tables_info_missing_row",
                  0.22178140560001575
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_name_down_fail",
                  0.15389675281277312
                ],
                [
                  "test_init_empty",
                  "test_propagate_average_up",
                  0.2643065732395941
                ],
                [
                  "test_propagate_name_down",
                  "test_propagate_name_down_fail",
                  0.670978193563058
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_cols_up_old",
                  0.3269490719074458
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_add_magic_table",
                  0.4630478002389412
                ],
                [
                  "test_get_age_levels",
                  "test_propagate_name_down_fail",
                  0.2662226103570013
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_lithology_cols",
                  0.1515306130337912
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_ages",
                  0.1744294171751544
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_name_down_fail",
                  0.3555943874993708
                ],
                [
                  "test_init",
                  "test_find_missing_items",
                  0.21114460292333603
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_find_missing_items",
                  0.3721438547031919
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_cols_up",
                  0.2921743548953888
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_get_age_levels",
                  0.37243233329520375
                ],
                [
                  "test_propagate_average_up",
                  "test_propagate_ages_other_contribution",
                  0.43207056034242725
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_ages",
                  0.19005431578221121
                ],
                [
                  "test_init_empty",
                  "test_propagate_ages_location_component",
                  0.2523705534718811
                ],
                [
                  "test_init_empty",
                  "test_add_empty_magic_table",
                  0.2842159349776747
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_cols_up",
                  0.10140510251467072
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_ages_location_component",
                  0.167093470609201
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_get_min_max_lat_lon",
                  0.2944889959516598
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_ages_location_component",
                  0.16472207036913358
                ],
                [
                  "test_init_empty",
                  "test_propagate_ages",
                  0.28607360928503334
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_ages_extra_location_rows",
                  0.1270838173730295
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_average_up",
                  0.29835164849064705
                ],
                [
                  "test_sites_only_propagation",
                  "test_get_age_levels",
                  0.25090335678465614
                ],
                [
                  "test_add_custom_filenames",
                  "test_add_empty_magic_table",
                  0.2342606428329091
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_all_tables_info_missing_row",
                  0.19364916731037085
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_name_down_fail",
                  0.1922770786336936
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_cols_up",
                  0.04062594777350891
                ],
                [
                  "test_init",
                  "test_add_custom_filenames",
                  0.22941573387056174
                ],
                [
                  "test_vocabulary_is_created",
                  "test_add_magic_table",
                  0.24445060351935236
                ],
                [
                  "test_add_empty_magic_table",
                  "test_find_missing_items",
                  0.26351557659932257
                ],
                [
                  "test_get_parent_and_child",
                  "test_find_missing_items",
                  0.19814734824194036
                ],
                [
                  "test_init",
                  "test_propagate_name_down",
                  0.1967675871773127
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_get_parent_and_child",
                  0.21597969886241555
                ],
                [
                  "test_propagate_ages_location_component",
                  "test_propagate_name_down_fail",
                  0.3082681296632558
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_cols_up",
                  0.4459067240467351
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_ages_other_contribution",
                  0.19957162814315652
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_average_up",
                  0.22692055349961612
                ],
                [
                  "test_init",
                  "test_propagate_ages",
                  0.08157084435148047
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_name_down",
                  0.21766660205361194
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_lithology_cols",
                  0.2965103877469405
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_ages",
                  0.19435148988063225
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_lithology_cols",
                  0.3071042803725481
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_ages_extra_location_rows",
                  0.08284930213349333
                ],
                [
                  "test_propagate_ages",
                  "test_find_missing_items",
                  0.3299686408341905
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_ages_location_component",
                  0.2911851682007628
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_lithology_cols",
                  0.1131980897868014
                ],
                [
                  "test_get_age_levels",
                  "test_propagate_ages_location_component",
                  0.24802281514906194
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_cols_up",
                  0.5078222695940607
                ],
                [
                  "test_init",
                  "test_sites_only_propagation",
                  0.2166297917589585
                ],
                [
                  "test_propagate_ages",
                  "test_propagate_name_down",
                  0.27446351968267374
                ],
                [
                  "test_propagate_cols_up",
                  "test_propagate_name_down",
                  0.32908097014761045
                ],
                [
                  "test_propagate_average_up",
                  "test_propagate_name_down_fail",
                  0.44281735995894417
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_name_down",
                  0.32901728732744034
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_ages_location_component",
                  0.4873777822181311
                ],
                [
                  "test_init_empty",
                  "test_propagate_name_down",
                  0.2567243916456793
                ],
                [
                  "test_vocabulary_is_created",
                  "test_add_empty_magic_table",
                  0.1951219512195122
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_ages_location_component",
                  0.26874192494328497
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_ages_location_component",
                  0.10400628679223045
                ],
                [
                  "test_init_empty",
                  "test_add_custom_filenames",
                  0.11972828565264391
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_ages",
                  0.5726801827451582
                ],
                [
                  "test_init",
                  "test_propagate_all_tables_info_missing_tables",
                  0.10526315789473682
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_cols_up_old",
                  0.27516766419604394
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_name_down_fail",
                  0.3044387078366815
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_get_min_max_lat_lon",
                  0.021232188191399833
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_ages_location_component",
                  0.29946541191655324
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_name_down_fail",
                  0.29139711855430966
                ],
                [
                  "test_get_age_levels",
                  "test_propagate_ages_other_contribution",
                  0.30016322175279575
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_ages_other_contribution",
                  0.2008048322256247
                ],
                [
                  "test_init_empty",
                  "test_init",
                  0.2856625461878818
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_all_tables_info_missing_tables",
                  0.1433148727800037
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_ages_other_contribution",
                  0.08980265101338746
                ],
                [
                  "test_add_magic_table",
                  "test_get_parent_and_child",
                  0.2390457218668787
                ],
                [
                  "test_init",
                  "test_vocabulary_is_created",
                  0.21497230917000557
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_ages_extra_location_rows",
                  0.08000711205939974
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_all_tables_info_missing_tables",
                  0.13904693239779645
                ],
                [
                  "test_get_parent_and_child",
                  "test_sites_only_propagation",
                  0.20329488981930915
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_sites_only_propagation",
                  0.26412618556073686
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_ages_other_contribution",
                  0.32413454567883465
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_average_up",
                  0.2946732243062143
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_get_age_levels",
                  0.38186983804252833
                ],
                [
                  "test_propagate_cols_up",
                  "test_propagate_name_down_fail",
                  0.3815379996620731
                ],
                [
                  "test_add_custom_filenames",
                  "test_get_min_max_lat_lon",
                  0.046274481338274755
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_average_up",
                  0.032464580933940744
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_ages_extra_location_rows",
                  0.35503374651817843
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_all_tables_info_missing_row",
                  0.25980762113533157
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_average_up",
                  0.30851495400718837
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_average_up",
                  0.11497673487254906
                ],
                [
                  "test_add_magic_table",
                  "test_get_min_max_lat_lon",
                  0.20694577179185555
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_find_missing_items",
                  0.3323926343970749
                ],
                [
                  "test_add_custom_filenames",
                  "test_get_parent_and_child",
                  0.1336306209562122
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_cols_up_old",
                  0.39185921086033987
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_ages_other_contribution",
                  0.33691333488306346
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_ages_extra_location_rows",
                  0.14296569235025997
                ],
                [
                  "test_init",
                  "test_add_magic_table_from_data",
                  0.23174488732966075
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_all_tables_info_missing_row",
                  0.247779252204718
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_ages_extra_location_rows",
                  0.05812381937190964
                ],
                [
                  "test_propagate_ages",
                  "test_propagate_ages_other_contribution",
                  0.45340808502091623
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_find_missing_items",
                  0.27724131203346875
                ],
                [
                  "test_get_age_levels",
                  "test_propagate_ages_extra_location_rows",
                  0.35787957143745397
                ],
                [
                  "test_get_age_levels",
                  "test_propagate_name_down",
                  0.18860582147689187
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_lithology_cols",
                  0.2525510217229853
                ],
                [
                  "test_propagate_cols_up",
                  "test_propagate_ages_other_contribution",
                  0.5194865224907835
                ],
                [
                  "test_vocabulary_is_created",
                  "test_add_magic_table_from_data",
                  0.17353525526047314
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_ages_other_contribution",
                  0.16829781403596433
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "test_propagate_name_down",
                  0.3614285968633786
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_ages_location_component",
                  0.15882096333554363
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_average_up",
                  0.2966140131554541
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_cols_up",
                  0.18405254345807756
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_ages_extra_location_rows",
                  0.2231129113429849
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_all_tables_info_missing_row",
                  0.5034965460952284
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_name_down",
                  0.1686789350519987
                ],
                [
                  "test_propagate_name_down",
                  "test_find_missing_items",
                  0.3042409279802482
                ],
                [
                  "test_init_empty",
                  "test_propagate_all_tables_info_missing_row",
                  0.21021323090253663
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_ages",
                  0.46611484624605526
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "test_propagate_name_down",
                  0.4813927390655834
                ],
                [
                  "test_init",
                  "test_propagate_ages_location_component",
                  0.1484664446943481
                ],
                [
                  "test_get_parent_and_child",
                  "test_get_age_levels",
                  0.18806617567419245
                ],
                [
                  "test_init",
                  "test_propagate_name_down_fail",
                  0.2589131342368178
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_ages_other_contribution",
                  0.11219854269064287
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_name_down",
                  0.13401406685472433
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_ages_location_component",
                  0.2310123103062453
                ],
                [
                  "test_init",
                  "test_add_empty_magic_table",
                  0.32245846375500836
                ],
                [
                  "test_init_empty",
                  "test_propagate_ages_extra_location_rows",
                  0.26722810556093474
                ],
                [
                  "test_vocabulary_is_created",
                  "test_get_parent_and_child",
                  0.16695677422593644
                ],
                [
                  "test_propagate_cols_up",
                  "test_propagate_ages_location_component",
                  0.3601720902596193
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_name_down",
                  0.2517182332798266
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_name_down",
                  0.18410952486916224
                ],
                [
                  "test_init_empty",
                  "test_propagate_cols_up_old",
                  0.3098352346382208
                ],
                [
                  "test_add_custom_filenames",
                  "test_add_magic_table",
                  0.22360679774997896
                ],
                [
                  "test_propagate_ages",
                  "test_propagate_ages_location_component",
                  0.5456660267926349
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_name_down_fail",
                  0.3650076245157566
                ],
                [
                  "test_propagate_cols_up",
                  "test_propagate_average_up",
                  0.5909790662384454
                ],
                [
                  "test_init",
                  "test_get_parent_and_child",
                  0.20437977982832192
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_average_up",
                  0.505262395040439
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_sites_only_propagation",
                  0.33339269995670134
                ],
                [
                  "test_init",
                  "test_propagate_cols_up",
                  0.16250379109403565
                ],
                [
                  "test_add_magic_table",
                  "test_sites_only_propagation",
                  0.31671690438500405
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "test_propagate_name_down_fail",
                  0.3578026824965221
                ],
                [
                  "test_vocabulary_is_created",
                  "test_find_missing_items",
                  0.2275816343357786
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_name_down_fail",
                  0.19940178764956107
                ],
                [
                  "test_init",
                  "test_propagate_ages_other_contribution",
                  0.12361284651454937
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_ages_location_component",
                  0.21479386229420155
                ],
                [
                  "test_propagate_ages_location_component",
                  "test_find_missing_items",
                  0.2694425655472941
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_cols_up_old",
                  0.0781166566864507
                ],
                [
                  "test_init_empty",
                  "test_get_min_max_lat_lon",
                  0.19058853261133335
                ],
                [
                  "test_init",
                  "test_propagate_lithology_cols",
                  0.17807604233955282
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_name_down",
                  0.09838379358865636
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_ages",
                  0.3196603179194996
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_cols_up",
                  0.6180514360793538
                ],
                [
                  "test_propagate_ages",
                  "test_propagate_name_down_fail",
                  0.3356122334316158
                ],
                [
                  "test_init",
                  "test_propagate_all_tables_info_missing_row",
                  0.2665569949915915
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_get_age_levels",
                  0.3840515714420705
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_ages_other_contribution",
                  0.5504046707130827
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_cols_up_old",
                  0.5175941509051664
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_name_down",
                  0.1506922629601929
                ],
                [
                  "test_propagate_average_up",
                  "test_propagate_ages_location_component",
                  0.3515945574347413
                ],
                [
                  "test_propagate_cols_up",
                  "test_propagate_ages_extra_location_rows",
                  0.5352267298270059
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_all_tables_info_missing_tables",
                  0.11470786693528087
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_all_tables_info_missing_tables",
                  0.0512989176042577
                ],
                [
                  "test_add_custom_filenames",
                  "test_get_age_levels",
                  0.0879598994267085
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_find_missing_items",
                  0.24633537007722536
                ],
                [
                  "test_add_empty_magic_table",
                  "test_get_min_max_lat_lon",
                  0.20957893507123151
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_cols_up_old",
                  0.08512565307587486
                ],
                [
                  "test_add_magic_table",
                  "test_get_age_levels",
                  0.2261869615739897
                ],
                [
                  "test_init_empty",
                  "test_add_magic_table",
                  0.21417646843905963
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_ages_extra_location_rows",
                  0.4345017064516317
                ],
                [
                  "test_add_empty_magic_table",
                  "test_get_parent_and_child",
                  0.2226090323012486
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_lithology_cols",
                  0.2247400038634004
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_lithology_cols",
                  0.18371647551369563
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "test_propagate_ages_extra_location_rows",
                  0.8142689983928403
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_ages",
                  0.11661089392837935
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_cols_up_old",
                  0.26648544566940835
                ],
                [
                  "test_init_empty",
                  "test_propagate_all_tables_info_missing_tables",
                  0.21974042014452444
                ],
                [
                  "test_propagate_average_up",
                  "test_find_missing_items",
                  0.3527325207169266
                ],
                [
                  "test_init_empty",
                  "test_get_age_levels",
                  0.1895631833616981
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_all_tables_info_missing_row",
                  0.20701966780270623
                ],
                [
                  "test_init_empty",
                  "test_propagate_ages_other_contribution",
                  0.3440613584926575
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_ages",
                  0.36931710803219
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "test_propagate_name_down_fail",
                  0.4422507643180486
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_cols_up_old",
                  0.1196495412667539
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_add_empty_magic_table",
                  0.39439830741016624
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "test_propagate_ages_location_component",
                  0.29888128883203074
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_get_age_levels",
                  0.02017938487815913
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_ages_other_contribution",
                  0.09274777915203367
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_name_down",
                  0.2635269404139834
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_name_down_fail",
                  0.36681572450442623
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_cols_up",
                  0.27655937049455653
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_cols_up",
                  0.10668698993381627
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_lithology_cols",
                  0.2663990157198426
                ],
                [
                  "test_propagate_average_up",
                  "test_propagate_name_down",
                  0.3792861497587128
                ],
                [
                  "test_init_empty",
                  "test_propagate_cols_up",
                  0.33923218763577356
                ],
                [
                  "test_propagate_cols_up",
                  "test_propagate_ages",
                  0.5792684723587544
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_get_age_levels",
                  0.1362668902454885
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_all_tables_info_missing_tables",
                  0.07165743639000186
                ],
                [
                  "test_add_empty_magic_table",
                  "test_add_magic_table",
                  0.803194840135015
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_sites_only_propagation",
                  0.17149858514250882
                ],
                [
                  "test_init",
                  "test_add_magic_table",
                  0.3590924232298039
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_average_up",
                  0.16575091582813725
                ],
                [
                  "test_init_empty",
                  "test_get_parent_and_child",
                  0.16212690026556031
                ],
                [
                  "test_vocabulary_is_created",
                  "test_propagate_ages_extra_location_rows",
                  0.07261932421315972
                ],
                [
                  "test_vocabulary_is_created",
                  "test_add_custom_filenames",
                  0.15617376188860607
                ],
                [
                  "test_propagate_cols_up",
                  "test_find_missing_items",
                  0.3848163506055581
                ],
                [
                  "test_propagate_average_up",
                  "test_propagate_ages",
                  0.49183012486199285
                ],
                [
                  "test_propagate_name_down_fail",
                  "test_find_missing_items",
                  0.4249203166969022
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_ages",
                  0.04894250661088828
                ],
                [
                  "test_add_empty_magic_table",
                  "test_sites_only_propagation",
                  0.30108414941770384
                ],
                [
                  "test_add_custom_filenames",
                  "test_add_magic_table_from_data",
                  0.20203050891044214
                ],
                [
                  "test_get_parent_and_child",
                  "test_get_min_max_lat_lon",
                  0.08657162745924431
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_cols_up_old",
                  0.22600468905942403
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_propagate_name_down_fail",
                  0.27982655361386166
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_cols_up_old",
                  0.12088642012256096
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_cols_up_old",
                  0.15167191839776337
                ],
                [
                  "test_propagate_ages_location_component",
                  "test_propagate_ages_extra_location_rows",
                  0.23643615608035903
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_ages",
                  0.05333386009010835
                ],
                [
                  "test_get_age_levels",
                  "test_propagate_ages",
                  0.6223713019621668
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_ages",
                  0.20273883232870704
                ],
                [
                  "test_init",
                  "test_get_age_levels",
                  0.14125569414711392
                ],
                [
                  "test_propagate_ages_other_contribution",
                  "test_find_missing_items",
                  0.4545782289374502
                ],
                [
                  "test_vocabulary_is_created",
                  "test_get_min_max_lat_lon",
                  0.0867223179605096
                ],
                [
                  "test_sites_only_propagation",
                  "test_find_missing_items",
                  0.44358475810740483
                ],
                [
                  "test_propagate_average_up",
                  "test_get_age_levels",
                  0.3780834022614739
                ],
                [
                  "test_init_empty",
                  "test_find_missing_items",
                  0.44811772795903876
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_name_down_fail",
                  0.2559239653166382
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_sites_only_propagation",
                  0.30205379421195677
                ],
                [
                  "test_add_magic_table",
                  "test_propagate_cols_up",
                  0.2573822927073716
                ],
                [
                  "test_add_custom_filenames",
                  "test_propagate_cols_up",
                  0.10329923381766717
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_name_down",
                  0.26743185236191797
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_name_down",
                  0.2076136996343499
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_ages_extra_location_rows",
                  0.5244697768295875
                ],
                [
                  "test_propagate_ages",
                  "test_propagate_ages_extra_location_rows",
                  0.4794616632439498
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_get_age_levels",
                  0.3642969565202291
                ],
                [
                  "test_init_empty",
                  "test_propagate_name_down_fail",
                  0.2751585294346117
                ],
                [
                  "test_add_empty_magic_table",
                  "test_get_age_levels",
                  0.19231839744337514
                ],
                [
                  "test_init_empty",
                  "test_propagate_lithology_cols",
                  0.2726091803841933
                ],
                [
                  "test_init",
                  "test_get_min_max_lat_lon",
                  0.09554484686129924
                ],
                [
                  "test_init",
                  "test_propagate_average_up",
                  0.19478748560364445
                ],
                [
                  "test_vocabulary_is_created",
                  "test_sites_only_propagation",
                  0.22120468120484363
                ],
                [
                  "test_init",
                  "test_propagate_cols_up_old",
                  0.17576247754451405
                ],
                [
                  "test_init_empty",
                  "test_add_magic_table_from_data",
                  0.22253665162868166
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_average_up",
                  0.46076395557455097
                ],
                [
                  "test_init_empty",
                  "test_sites_only_propagation",
                  0.38062022864940454
                ],
                [
                  "test_init",
                  "test_propagate_ages_extra_location_rows",
                  0.08000711205939974
                ],
                [
                  "test_add_magic_table_from_data",
                  "test_find_missing_items",
                  0.3021531376759854
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_ages_extra_location_rows",
                  0.3233356902086514
                ],
                [
                  "test_add_custom_filenames",
                  "test_find_missing_items",
                  0.11504474832710555
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_ages_other_contribution",
                  0.12361284651454937
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_lithology_cols",
                  0.07419835097481367
                ],
                [
                  "test_propagate_cols_up",
                  "test_get_age_levels",
                  0.42834896739445094
                ],
                [
                  "test_add_empty_magic_table",
                  "test_propagate_all_tables_info_missing_row",
                  0.24194335156365354
                ],
                [
                  "test_propagate_average_up",
                  "test_propagate_ages_extra_location_rows",
                  0.4194796744060348
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_find_missing_items",
                  0.23778907732563587
                ],
                [
                  "test_propagate_ages_extra_location_rows",
                  "test_find_missing_items",
                  0.40121041028708926
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_ages_other_contribution",
                  0.09600307214746387
                ],
                [
                  "test_get_age_levels",
                  "test_find_missing_items",
                  0.26647554496714415
                ],
                [
                  "test_propagate_lithology_cols",
                  "test_propagate_average_up",
                  0.4302149609510788
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_name_down_fail",
                  0.39962912576784043
                ],
                [
                  "test_add_magic_table",
                  "test_find_missing_items",
                  0.32584731177076676
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_ages_other_contribution",
                  0.438121517842122
                ],
                [
                  "test_vocabulary_is_created",
                  "test_get_age_levels",
                  0.11676474130490633
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_ages_location_component",
                  0.08483796839677035
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_average_up",
                  0.18725561183456627
                ],
                [
                  "test_get_parent_and_child",
                  "test_propagate_all_tables_info_missing_tables",
                  0.08175191193132876
                ],
                [
                  "test_propagate_all_tables_info_missing_tables",
                  "test_propagate_name_down_fail",
                  0.09415023063157009
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_cols_up",
                  0.3824094774042976
                ],
                [
                  "test_propagate_cols_up_old",
                  "test_propagate_name_down",
                  0.3285514069160361
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_propagate_ages_extra_location_rows",
                  0.060030022518766414
                ],
                [
                  "test_propagate_ages_location_component",
                  "test_propagate_name_down",
                  0.24779209727085522
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_sites_only_propagation",
                  0.23304257499549155
                ],
                [
                  "test_init_empty",
                  "test_vocabulary_is_created",
                  0.17950480103853142
                ],
                [
                  "test_sites_only_propagation",
                  "test_propagate_ages_location_component",
                  0.23279346474257595
                ],
                [
                  "test_add_custom_filenames",
                  "test_sites_only_propagation",
                  0.15737789507292674
                ],
                [
                  "test_get_min_max_lat_lon",
                  "test_propagate_ages",
                  0.4261407658536065
                ],
                [
                  "test_propagate_all_tables_info_missing_row",
                  "test_get_min_max_lat_lon",
                  0.0537660886732572
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_min_max_lat_lon",
                "false"
              ],
              [
                "test_propagate_cols_up_old",
                "false"
              ],
              [
                "test_sites_only_propagation",
                "false"
              ],
              [
                "test_propagate_ages",
                "false"
              ],
              [
                "test_vocabulary_is_created",
                "false"
              ],
              [
                "test_add_magic_table",
                "false"
              ],
              [
                "test_propagate_lithology_cols",
                "false"
              ],
              [
                "test_propagate_ages_extra_location_rows",
                "false"
              ],
              [
                "test_init_empty",
                "false"
              ],
              [
                "test_get_age_levels",
                "false"
              ],
              [
                "test_add_custom_filenames",
                "false"
              ],
              [
                "test_propagate_ages_location_component",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_row",
                "false"
              ],
              [
                "test_propagate_name_down",
                "false"
              ],
              [
                "test_propagate_name_down_fail",
                "false"
              ],
              [
                "test_propagate_cols_up",
                "false"
              ],
              [
                "test_propagate_ages_other_contribution",
                "false"
              ],
              [
                "test_add_empty_magic_table",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_add_magic_table_from_data",
                "false"
              ],
              [
                "test_propagate_all_tables_info_missing_tables",
                "false"
              ],
              [
                "test_propagate_average_up",
                "false"
              ],
              [
                "test_get_parent_and_child",
                "false"
              ],
              [
                "test_find_missing_items",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 24
      },
      {
        "name": "TestNotNull",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_values",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_values",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_values",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_values",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_values",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                [
                  "res",
                  "correct",
                  "vals"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_values",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestMungeForPlotting",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_group_by_site",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_group_by_site",
                  "[]"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_group_by_site",
                  "false"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_group_by_site",
                  "false"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_group_by_site",
                  "true"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_group_by_site",
                  "false"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "false"
              ],
              [
                "test_prep_for_intensity_plot",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "false"
              ],
              [
                "test_prep_for_intensity_plot",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                []
              ],
              [
                "test_prep_for_intensity_plot",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "false"
              ],
              [
                "test_prep_for_intensity_plot",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "false"
              ],
              [
                "test_prep_for_intensity_plot",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_group_by_site",
                  "0"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_group_by_site",
                  "0"
                ],
                [
                  "test_prep_for_intensity_plot",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "false"
              ],
              [
                "test_prep_for_intensity_plot",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "false"
              ],
              [
                "test_prep_for_intensity_plot",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "8"
              ],
              [
                "test_prep_for_intensity_plot",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                [
                  "meas_data",
                  "osler_dir",
                  "dmag_dir",
                  "warning",
                  "mcmurdo_dir",
                  "orientation_dir",
                  "status"
                ]
              ],
              [
                "test_prep_for_intensity_plot",
                [
                  "reqd_cols",
                  "meas_data",
                  "dmag_dir",
                  "dropna",
                  "meth_code",
                  "status"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                []
              ],
              [
                "test_prep_for_intensity_plot",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5042783517866918,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_group_by_site",
                  "test_prep_for_intensity_plot",
                  0.5042783517866918
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_group_by_site",
                "false"
              ],
              [
                "test_prep_for_intensity_plot",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "SPD_\u0026_tests_\u0026_test_tail_check_statistics.py",
    "testCases": [
      {
        "name": "CheckTailSelection",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_DRAT_tail",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_max_tail_check",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_n_tail",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_MD_VDS",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_delta_TR",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_DRAT_tail",
                  "[]"
                ],
                [
                  "test_max_tail_check",
                  "[]"
                ],
                [
                  "test_n_tail",
                  "[]"
                ],
                [
                  "test_MD_VDS",
                  "[]"
                ],
                [
                  "test_delta_TR",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_DRAT_tail",
                  "false"
                ],
                [
                  "test_max_tail_check",
                  "true"
                ],
                [
                  "test_n_tail",
                  "false"
                ],
                [
                  "test_MD_VDS",
                  "false"
                ],
                [
                  "test_delta_TR",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_DRAT_tail",
                  "false"
                ],
                [
                  "test_max_tail_check",
                  "false"
                ],
                [
                  "test_n_tail",
                  "false"
                ],
                [
                  "test_MD_VDS",
                  "false"
                ],
                [
                  "test_delta_TR",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_DRAT_tail",
                  "false"
                ],
                [
                  "test_max_tail_check",
                  "false"
                ],
                [
                  "test_n_tail",
                  "false"
                ],
                [
                  "test_MD_VDS",
                  "false"
                ],
                [
                  "test_delta_TR",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_DRAT_tail",
                  "false"
                ],
                [
                  "test_max_tail_check",
                  "false"
                ],
                [
                  "test_n_tail",
                  "false"
                ],
                [
                  "test_MD_VDS",
                  "false"
                ],
                [
                  "test_delta_TR",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "false"
              ],
              [
                "test_max_tail_check",
                "false"
              ],
              [
                "test_n_tail",
                "false"
              ],
              [
                "test_MD_VDS",
                "false"
              ],
              [
                "test_delta_TR",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "false"
              ],
              [
                "test_max_tail_check",
                "false"
              ],
              [
                "test_n_tail",
                "false"
              ],
              [
                "test_MD_VDS",
                "false"
              ],
              [
                "test_delta_TR",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                []
              ],
              [
                "test_max_tail_check",
                []
              ],
              [
                "test_n_tail",
                []
              ],
              [
                "test_MD_VDS",
                []
              ],
              [
                "test_delta_TR",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "false"
              ],
              [
                "test_max_tail_check",
                "false"
              ],
              [
                "test_n_tail",
                "false"
              ],
              [
                "test_MD_VDS",
                "false"
              ],
              [
                "test_delta_TR",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "false"
              ],
              [
                "test_max_tail_check",
                "false"
              ],
              [
                "test_n_tail",
                "false"
              ],
              [
                "test_MD_VDS",
                "false"
              ],
              [
                "test_delta_TR",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_DRAT_tail",
                  "0"
                ],
                [
                  "test_max_tail_check",
                  "0"
                ],
                [
                  "test_n_tail",
                  "0"
                ],
                [
                  "test_MD_VDS",
                  "0"
                ],
                [
                  "test_delta_TR",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_DRAT_tail",
                  "0"
                ],
                [
                  "test_max_tail_check",
                  "0"
                ],
                [
                  "test_n_tail",
                  "0"
                ],
                [
                  "test_MD_VDS",
                  "0"
                ],
                [
                  "test_delta_TR",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "false"
              ],
              [
                "test_max_tail_check",
                "false"
              ],
              [
                "test_n_tail",
                "false"
              ],
              [
                "test_MD_VDS",
                "false"
              ],
              [
                "test_delta_TR",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "false"
              ],
              [
                "test_max_tail_check",
                "false"
              ],
              [
                "test_n_tail",
                "false"
              ],
              [
                "test_MD_VDS",
                "false"
              ],
              [
                "test_delta_TR",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "1"
              ],
              [
                "test_max_tail_check",
                "2"
              ],
              [
                "test_n_tail",
                "1"
              ],
              [
                "test_MD_VDS",
                "1"
              ],
              [
                "test_delta_TR",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                [
                  "DRAT_tail",
                  "ref_DRAT_tail"
                ]
              ],
              [
                "test_max_tail_check",
                [
                  "tail_check_diffs",
                  "tail_check_max"
                ]
              ],
              [
                "test_n_tail",
                [
                  "n_tail",
                  "ref_n_tail"
                ]
              ],
              [
                "test_MD_VDS",
                [
                  "ref_MD_VDS",
                  "MD_VDS"
                ]
              ],
              [
                "test_delta_TR",
                [
                  "delta_TR",
                  "ref_delta_TR"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                []
              ],
              [
                "test_max_tail_check",
                []
              ],
              [
                "test_n_tail",
                []
              ],
              [
                "test_MD_VDS",
                []
              ],
              [
                "test_delta_TR",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4699061178113941,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_n_tail",
                  "test_max_tail_check",
                  0.4596644570955764
                ],
                [
                  "test_n_tail",
                  "test_delta_TR",
                  0.28226787568468886
                ],
                [
                  "test_DRAT_tail",
                  "test_delta_TR",
                  0.6535066902757564
                ],
                [
                  "test_delta_TR",
                  "test_MD_VDS",
                  0.698256535275343
                ],
                [
                  "test_n_tail",
                  "test_DRAT_tail",
                  0.3889222341312986
                ],
                [
                  "test_n_tail",
                  "test_MD_VDS",
                  0.3048863735866824
                ],
                [
                  "test_DRAT_tail",
                  "test_MD_VDS",
                  0.7419302618329275
                ],
                [
                  "test_max_tail_check",
                  "test_delta_TR",
                  0.32083267885761607
                ],
                [
                  "test_max_tail_check",
                  "test_DRAT_tail",
                  0.4795108649299221
                ],
                [
                  "test_max_tail_check",
                  "test_MD_VDS",
                  0.3692832064441294
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_DRAT_tail",
                "false"
              ],
              [
                "test_max_tail_check",
                "false"
              ],
              [
                "test_n_tail",
                "false"
              ],
              [
                "test_MD_VDS",
                "false"
              ],
              [
                "test_delta_TR",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "SPD_\u0026_tests_\u0026_test_directional_statistics.py",
    "testCases": [
      {
        "name": "CheckDecInc",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_PD_direction",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_PD_direction_negative",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_orientation_tensor",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_dec_and_inc",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertGreaterEqual]"
                ],
                [
                  "test_cart_averages",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cart_primes",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_zdata_segment",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_PD_direction",
                  "[]"
                ],
                [
                  "test_PD_direction_negative",
                  "[]"
                ],
                [
                  "test_orientation_tensor",
                  "[]"
                ],
                [
                  "test_get_dec_and_inc",
                  "[]"
                ],
                [
                  "test_cart_averages",
                  "[]"
                ],
                [
                  "test_cart_primes",
                  "[]"
                ],
                [
                  "test_zdata_segment",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_PD_direction",
                  "true"
                ],
                [
                  "test_PD_direction_negative",
                  "true"
                ],
                [
                  "test_orientation_tensor",
                  "false"
                ],
                [
                  "test_get_dec_and_inc",
                  "false"
                ],
                [
                  "test_cart_averages",
                  "false"
                ],
                [
                  "test_cart_primes",
                  "false"
                ],
                [
                  "test_zdata_segment",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_PD_direction",
                  "false"
                ],
                [
                  "test_PD_direction_negative",
                  "false"
                ],
                [
                  "test_orientation_tensor",
                  "false"
                ],
                [
                  "test_get_dec_and_inc",
                  "false"
                ],
                [
                  "test_cart_averages",
                  "false"
                ],
                [
                  "test_cart_primes",
                  "false"
                ],
                [
                  "test_zdata_segment",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_PD_direction",
                  "false"
                ],
                [
                  "test_PD_direction_negative",
                  "false"
                ],
                [
                  "test_orientation_tensor",
                  "false"
                ],
                [
                  "test_get_dec_and_inc",
                  "false"
                ],
                [
                  "test_cart_averages",
                  "false"
                ],
                [
                  "test_cart_primes",
                  "false"
                ],
                [
                  "test_zdata_segment",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_PD_direction",
                  "false"
                ],
                [
                  "test_PD_direction_negative",
                  "false"
                ],
                [
                  "test_orientation_tensor",
                  "false"
                ],
                [
                  "test_get_dec_and_inc",
                  "false"
                ],
                [
                  "test_cart_averages",
                  "false"
                ],
                [
                  "test_cart_primes",
                  "false"
                ],
                [
                  "test_zdata_segment",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                "false"
              ],
              [
                "test_PD_direction_negative",
                "false"
              ],
              [
                "test_orientation_tensor",
                "false"
              ],
              [
                "test_get_dec_and_inc",
                "false"
              ],
              [
                "test_cart_averages",
                "false"
              ],
              [
                "test_cart_primes",
                "false"
              ],
              [
                "test_zdata_segment",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                "false"
              ],
              [
                "test_PD_direction_negative",
                "false"
              ],
              [
                "test_orientation_tensor",
                "false"
              ],
              [
                "test_get_dec_and_inc",
                "false"
              ],
              [
                "test_cart_averages",
                "false"
              ],
              [
                "test_cart_primes",
                "false"
              ],
              [
                "test_zdata_segment",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                []
              ],
              [
                "test_PD_direction_negative",
                []
              ],
              [
                "test_orientation_tensor",
                []
              ],
              [
                "test_get_dec_and_inc",
                []
              ],
              [
                "test_cart_averages",
                []
              ],
              [
                "test_cart_primes",
                []
              ],
              [
                "test_zdata_segment",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                "false"
              ],
              [
                "test_PD_direction_negative",
                "false"
              ],
              [
                "test_orientation_tensor",
                "false"
              ],
              [
                "test_get_dec_and_inc",
                "false"
              ],
              [
                "test_cart_averages",
                "false"
              ],
              [
                "test_cart_primes",
                "false"
              ],
              [
                "test_zdata_segment",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_PD_direction",
                "false"
              ],
              [
                "test_PD_direction_negative",
                "false"
              ],
              [
                "test_orientation_tensor",
                "false"
              ],
              [
                "test_get_dec_and_inc",
                "true"
              ],
              [
                "test_cart_averages",
                "false"
              ],
              [
                "test_cart_primes",
                "false"
              ],
              [
                "test_zdata_segment",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_PD_direction",
                  "0"
                ],
                [
                  "test_PD_direction_negative",
                  "0"
                ],
                [
                  "test_orientation_tensor",
                  "0"
                ],
                [
                  "test_get_dec_and_inc",
                  "0"
                ],
                [
                  "test_cart_averages",
                  "0"
                ],
                [
                  "test_cart_primes",
                  "0"
                ],
                [
                  "test_zdata_segment",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_PD_direction",
                  "0"
                ],
                [
                  "test_PD_direction_negative",
                  "0"
                ],
                [
                  "test_orientation_tensor",
                  "0"
                ],
                [
                  "test_get_dec_and_inc",
                  "0"
                ],
                [
                  "test_cart_averages",
                  "0"
                ],
                [
                  "test_cart_primes",
                  "0"
                ],
                [
                  "test_zdata_segment",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                "false"
              ],
              [
                "test_PD_direction_negative",
                "false"
              ],
              [
                "test_orientation_tensor",
                "false"
              ],
              [
                "test_get_dec_and_inc",
                "false"
              ],
              [
                "test_cart_averages",
                "false"
              ],
              [
                "test_cart_primes",
                "false"
              ],
              [
                "test_zdata_segment",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                "false"
              ],
              [
                "test_PD_direction_negative",
                "false"
              ],
              [
                "test_orientation_tensor",
                "false"
              ],
              [
                "test_get_dec_and_inc",
                "false"
              ],
              [
                "test_cart_averages",
                "false"
              ],
              [
                "test_cart_primes",
                "false"
              ],
              [
                "test_zdata_segment",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                "1"
              ],
              [
                "test_PD_direction_negative",
                "1"
              ],
              [
                "test_orientation_tensor",
                "1"
              ],
              [
                "test_get_dec_and_inc",
                "4"
              ],
              [
                "test_cart_averages",
                "3"
              ],
              [
                "test_cart_primes",
                "3"
              ],
              [
                "test_zdata_segment",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                [
                  "result",
                  "X2_prime",
                  "PD",
                  "ref_PD",
                  "X3_prime",
                  "X1_prime"
                ]
              ],
              [
                "test_PD_direction_negative",
                [
                  "result",
                  "X2_prime",
                  "PD",
                  "ref_PD",
                  "X3_prime",
                  "X1_prime"
                ]
              ],
              [
                "test_orientation_tensor",
                [
                  "result",
                  "X2_prime",
                  "orient_tensor",
                  "v",
                  "X3_prime",
                  "X1_prime"
                ]
              ],
              [
                "test_get_dec_and_inc",
                [
                  "means",
                  "dec",
                  "V",
                  "tau",
                  "intenstiy",
                  "PCA_sigma",
                  "inc"
                ]
              ],
              [
                "test_cart_averages",
                [
                  "result"
                ]
              ],
              [
                "test_cart_primes",
                [
                  "result"
                ]
              ],
              [
                "test_zdata_segment",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                []
              ],
              [
                "test_PD_direction_negative",
                []
              ],
              [
                "test_orientation_tensor",
                []
              ],
              [
                "test_get_dec_and_inc",
                []
              ],
              [
                "test_cart_averages",
                []
              ],
              [
                "test_cart_primes",
                []
              ],
              [
                "test_zdata_segment",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5316139985594176,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_PD_direction_negative",
                  "test_get_dec_and_inc",
                  0.5419105437699265
                ],
                [
                  "test_zdata_segment",
                  "test_cart_averages",
                  0.2827673179077792
                ],
                [
                  "test_zdata_segment",
                  "test_get_dec_and_inc",
                  0.30400972846696894
                ],
                [
                  "test_cart_primes",
                  "test_get_dec_and_inc",
                  0.44339334329340785
                ],
                [
                  "test_zdata_segment",
                  "test_orientation_tensor",
                  0.27688900037376646
                ],
                [
                  "test_zdata_segment",
                  "test_PD_direction_negative",
                  0.27554990548085667
                ],
                [
                  "test_cart_averages",
                  "test_PD_direction",
                  0.5977438428982341
                ],
                [
                  "test_PD_direction",
                  "test_get_dec_and_inc",
                  0.5441568177849281
                ],
                [
                  "test_zdata_segment",
                  "test_PD_direction",
                  0.2659986736915807
                ],
                [
                  "test_zdata_segment",
                  "test_cart_primes",
                  0.2827673179077792
                ],
                [
                  "test_cart_averages",
                  "test_orientation_tensor",
                  0.5517198940900386
                ],
                [
                  "test_cart_averages",
                  "test_PD_direction_negative",
                  0.6031654362523182
                ],
                [
                  "test_cart_averages",
                  "test_get_dec_and_inc",
                  0.44339334329340785
                ],
                [
                  "test_cart_primes",
                  "test_PD_direction",
                  0.5977438428982341
                ],
                [
                  "test_cart_averages",
                  "test_cart_primes",
                  0.8582089552238806
                ],
                [
                  "test_orientation_tensor",
                  "test_get_dec_and_inc",
                  0.47449217503303504
                ],
                [
                  "test_cart_primes",
                  "test_PD_direction_negative",
                  0.6031654362523182
                ],
                [
                  "test_orientation_tensor",
                  "test_PD_direction_negative",
                  0.8325320515912754
                ],
                [
                  "test_PD_direction",
                  "test_PD_direction_negative",
                  0.9906360626020096
                ],
                [
                  "test_orientation_tensor",
                  "test_PD_direction",
                  0.8309690644468456
                ],
                [
                  "test_cart_primes",
                  "test_orientation_tensor",
                  0.5626812164891785
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_PD_direction",
                "false"
              ],
              [
                "test_PD_direction_negative",
                "false"
              ],
              [
                "test_orientation_tensor",
                "false"
              ],
              [
                "test_get_dec_and_inc",
                "false"
              ],
              [
                "test_cart_averages",
                "false"
              ],
              [
                "test_cart_primes",
                "false"
              ],
              [
                "test_zdata_segment",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "CheckMad",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_MAD",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_MAD",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_MAD",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_MAD",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_MAD",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_MAD",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_MAD",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_MAD",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                [
                  "MAD"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_MAD",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CheckAlpha",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_alpha",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_alpha_real_data",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_alpha",
                  "[]"
                ],
                [
                  "test_alpha_real_data",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_alpha",
                  "false"
                ],
                [
                  "test_alpha_real_data",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_alpha",
                  "false"
                ],
                [
                  "test_alpha_real_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_alpha",
                  "false"
                ],
                [
                  "test_alpha_real_data",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_alpha",
                  "false"
                ],
                [
                  "test_alpha_real_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "false"
              ],
              [
                "test_alpha_real_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "false"
              ],
              [
                "test_alpha_real_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                []
              ],
              [
                "test_alpha_real_data",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "false"
              ],
              [
                "test_alpha_real_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "false"
              ],
              [
                "test_alpha_real_data",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_alpha",
                  "0"
                ],
                [
                  "test_alpha_real_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_alpha",
                  "0"
                ],
                [
                  "test_alpha_real_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "false"
              ],
              [
                "test_alpha_real_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "false"
              ],
              [
                "test_alpha_real_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "1"
              ],
              [
                "test_alpha_real_data",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                [
                  "result"
                ]
              ],
              [
                "test_alpha_real_data",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                []
              ],
              [
                "test_alpha_real_data",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.2858309752375147,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_alpha",
                  "test_alpha_real_data",
                  0.2858309752375147
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_alpha",
                "false"
              ],
              [
                "test_alpha_real_data",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CheckDang",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_DANG_real_values",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_DANG",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_DANG_real_values",
                  "[]"
                ],
                [
                  "test_DANG",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_DANG_real_values",
                  "false"
                ],
                [
                  "test_DANG",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_DANG_real_values",
                  "false"
                ],
                [
                  "test_DANG",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_DANG_real_values",
                  "false"
                ],
                [
                  "test_DANG",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_DANG_real_values",
                  "false"
                ],
                [
                  "test_DANG",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "false"
              ],
              [
                "test_DANG",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "false"
              ],
              [
                "test_DANG",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                []
              ],
              [
                "test_DANG",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "false"
              ],
              [
                "test_DANG",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "false"
              ],
              [
                "test_DANG",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_DANG_real_values",
                  "0"
                ],
                [
                  "test_DANG",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_DANG_real_values",
                  "0"
                ],
                [
                  "test_DANG",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "false"
              ],
              [
                "test_DANG",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "false"
              ],
              [
                "test_DANG",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "1"
              ],
              [
                "test_DANG",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                []
              ],
              [
                "test_DANG",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                []
              ],
              [
                "test_DANG",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4583333333333333,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_DANG",
                  "test_DANG_real_values",
                  0.4583333333333333
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_DANG_real_values",
                "false"
              ],
              [
                "test_DANG",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CheckNRMdev",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_NRM_dev",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_NRM_dev",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_NRM_dev",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_NRM_dev",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_NRM_dev",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_NRM_dev",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_NRM_dev",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_NRM_dev",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_NRM_dev",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CheckTheta",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_theta",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_theta",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_theta",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_theta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_theta",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_theta",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_theta",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_theta",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_theta",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CheckGamma",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testGamma",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testGamma",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testGamma",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testGamma",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testGamma",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testGamma",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testGamma",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testGamma",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testGamma",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testGamma",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "SPD_\u0026_tests_\u0026_test_additivity_check_statistics.py",
    "testCases": [
      {
        "name": "CheckAdditivity",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_data_selection",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_delta_AC",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_data_selection",
                  "[]"
                ],
                [
                  "test_delta_AC",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_data_selection",
                  "true"
                ],
                [
                  "test_delta_AC",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_data_selection",
                  "false"
                ],
                [
                  "test_delta_AC",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_data_selection",
                  "false"
                ],
                [
                  "test_delta_AC",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_data_selection",
                  "false"
                ],
                [
                  "test_delta_AC",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "false"
              ],
              [
                "test_delta_AC",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "false"
              ],
              [
                "test_delta_AC",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                []
              ],
              [
                "test_delta_AC",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "false"
              ],
              [
                "test_delta_AC",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "false"
              ],
              [
                "test_delta_AC",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_data_selection",
                  "0"
                ],
                [
                  "test_delta_AC",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_data_selection",
                  "0"
                ],
                [
                  "test_delta_AC",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "false"
              ],
              [
                "test_delta_AC",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "false"
              ],
              [
                "test_delta_AC",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "2"
              ],
              [
                "test_delta_AC",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                [
                  "incl_temps",
                  "n_add"
                ]
              ],
              [
                "test_delta_AC",
                [
                  "included_add_checks",
                  "delta_AC"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                []
              ],
              [
                "test_delta_AC",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.18009006755629925,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_data_selection",
                  "test_delta_AC",
                  0.18009006755629925
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_data_selection",
                "false"
              ],
              [
                "test_delta_AC",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]