[
  {
    "name": "tests_\u0026_engine_tests.py",
    "testCases": [
      {
        "name": "TestEngine",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_retrieval",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_retrieval_sparse",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_storage_issue",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_retrieval",
                  "[]"
                ],
                [
                  "test_retrieval_sparse",
                  "[]"
                ],
                [
                  "test_storage_issue",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_retrieval",
                  "true"
                ],
                [
                  "test_retrieval_sparse",
                  "true"
                ],
                [
                  "test_storage_issue",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_retrieval",
                  "false"
                ],
                [
                  "test_retrieval_sparse",
                  "false"
                ],
                [
                  "test_storage_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_retrieval",
                  "false"
                ],
                [
                  "test_retrieval_sparse",
                  "false"
                ],
                [
                  "test_storage_issue",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_retrieval",
                  "false"
                ],
                [
                  "test_retrieval_sparse",
                  "false"
                ],
                [
                  "test_storage_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                "false"
              ],
              [
                "test_retrieval_sparse",
                "false"
              ],
              [
                "test_storage_issue",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                "false"
              ],
              [
                "test_retrieval_sparse",
                "false"
              ],
              [
                "test_storage_issue",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_retrieval",
                []
              ],
              [
                "test_retrieval_sparse",
                []
              ],
              [
                "test_storage_issue",
                [
                  "self.engine"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                "false"
              ],
              [
                "test_retrieval_sparse",
                "false"
              ],
              [
                "test_storage_issue",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_retrieval",
                "true"
              ],
              [
                "test_retrieval_sparse",
                "true"
              ],
              [
                "test_storage_issue",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_retrieval",
                  "0"
                ],
                [
                  "test_retrieval_sparse",
                  "0"
                ],
                [
                  "test_storage_issue",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_retrieval",
                  "0"
                ],
                [
                  "test_retrieval_sparse",
                  "0"
                ],
                [
                  "test_storage_issue",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                "false"
              ],
              [
                "test_retrieval_sparse",
                "false"
              ],
              [
                "test_storage_issue",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                "false"
              ],
              [
                "test_retrieval_sparse",
                "false"
              ],
              [
                "test_storage_issue",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                "3"
              ],
              [
                "test_retrieval_sparse",
                "3"
              ],
              [
                "test_storage_issue",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                [
                  "y_data",
                  "y_distance",
                  "x",
                  "delta",
                  "y",
                  "normalized_x",
                  "x_data",
                  "n"
                ]
              ],
              [
                "test_retrieval_sparse",
                [
                  "y_data",
                  "y_distance",
                  "x",
                  "delta",
                  "y",
                  "normalized_x",
                  "x_data",
                  "n"
                ]
              ],
              [
                "test_storage_issue",
                [
                  "engine2",
                  "engine1",
                  "x",
                  "x_data"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_retrieval",
                [
                  "self.engine"
                ]
              ],
              [
                "test_retrieval_sparse",
                [
                  "self.engine"
                ]
              ],
              [
                "test_storage_issue",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.724573054382616,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_storage_issue",
                  "test_retrieval_sparse",
                  0.5952036455526329
                ],
                [
                  "test_retrieval",
                  "test_retrieval_sparse",
                  0.9684943817617736
                ],
                [
                  "test_storage_issue",
                  "test_retrieval",
                  0.6100211358334414
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_retrieval",
                "false"
              ],
              [
                "test_retrieval_sparse",
                "false"
              ],
              [
                "test_storage_issue",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestDelete",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_delete_vector_multiple_hash",
                  "[]"
                ],
                [
                  "test_delete_vector_single_hash",
                  "[]"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_delete_vector_multiple_hash",
                  "[]"
                ],
                [
                  "test_delete_vector_single_hash",
                  "[]"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_delete_vector_multiple_hash",
                  "false"
                ],
                [
                  "test_delete_vector_single_hash",
                  "false"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_delete_vector_multiple_hash",
                  "true"
                ],
                [
                  "test_delete_vector_single_hash",
                  "false"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_delete_vector_multiple_hash",
                  "false"
                ],
                [
                  "test_delete_vector_single_hash",
                  "false"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_delete_vector_multiple_hash",
                  "false"
                ],
                [
                  "test_delete_vector_single_hash",
                  "false"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "false"
              ],
              [
                "test_delete_vector_single_hash",
                "false"
              ],
              [
                "test_delete_vector_with_provided_value",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "false"
              ],
              [
                "test_delete_vector_single_hash",
                "false"
              ],
              [
                "test_delete_vector_with_provided_value",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                [
                  "self.removed_vector",
                  "self.all_values"
                ]
              ],
              [
                "test_delete_vector_single_hash",
                [
                  "self.removed_vector",
                  "self.all_values"
                ]
              ],
              [
                "test_delete_vector_with_provided_value",
                [
                  "self.all_values"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "false"
              ],
              [
                "test_delete_vector_single_hash",
                "false"
              ],
              [
                "test_delete_vector_with_provided_value",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "false"
              ],
              [
                "test_delete_vector_single_hash",
                "false"
              ],
              [
                "test_delete_vector_with_provided_value",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_delete_vector_multiple_hash",
                  "0"
                ],
                [
                  "test_delete_vector_single_hash",
                  "0"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_delete_vector_multiple_hash",
                  "0"
                ],
                [
                  "test_delete_vector_single_hash",
                  "0"
                ],
                [
                  "test_delete_vector_with_provided_value",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "false"
              ],
              [
                "test_delete_vector_single_hash",
                "false"
              ],
              [
                "test_delete_vector_with_provided_value",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "false"
              ],
              [
                "test_delete_vector_single_hash",
                "false"
              ],
              [
                "test_delete_vector_with_provided_value",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "0"
              ],
              [
                "test_delete_vector_single_hash",
                "0"
              ],
              [
                "test_delete_vector_with_provided_value",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                [
                  "engine",
                  "hashes"
                ]
              ],
              [
                "test_delete_vector_single_hash",
                [
                  "engine"
                ]
              ],
              [
                "test_delete_vector_with_provided_value",
                [
                  "engine"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                [
                  "self.dim",
                  "self.removed_value"
                ]
              ],
              [
                "test_delete_vector_single_hash",
                [
                  "self.dim",
                  "self.removed_value"
                ]
              ],
              [
                "test_delete_vector_with_provided_value",
                [
                  "self.removed_vector",
                  "self.dim",
                  "self.removed_value"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6669228167990227,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_delete_vector_multiple_hash",
                  "test_delete_vector_with_provided_value",
                  0.5443310539518174
                ],
                [
                  "test_delete_vector_single_hash",
                  "test_delete_vector_multiple_hash",
                  0.6546536707079771
                ],
                [
                  "test_delete_vector_single_hash",
                  "test_delete_vector_with_provided_value",
                  0.8017837257372733
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_delete_vector_multiple_hash",
                "false"
              ],
              [
                "test_delete_vector_single_hash",
                "false"
              ],
              [
                "test_delete_vector_with_provided_value",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_hashes_tests.py",
    "testCases": [
      {
        "name": "TestRandomBinaryProjections",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hash_deterministic",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_format_sparse",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_hash_format",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hash_deterministic",
                  "[]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[]"
                ],
                [
                  "test_hash_format_sparse",
                  "[]"
                ],
                [
                  "test_hash_format",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hash_deterministic",
                  "true"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "true"
                ],
                [
                  "test_hash_format_sparse",
                  "true"
                ],
                [
                  "test_hash_format",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                []
              ],
              [
                "test_hash_deterministic_sparse",
                []
              ],
              [
                "test_hash_format_sparse",
                []
              ],
              [
                "test_hash_format",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "true"
              ],
              [
                "test_hash_format",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hash_deterministic",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_format",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hash_deterministic",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_format",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                "1"
              ],
              [
                "test_hash_deterministic_sparse",
                "1"
              ],
              [
                "test_hash_format_sparse",
                "4"
              ],
              [
                "test_hash_format",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                [
                  "x",
                  "first_hash"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "x",
                  "first_hash"
                ]
              ],
              [
                "test_hash_format_sparse",
                [
                  "h"
                ]
              ],
              [
                "test_hash_format",
                [
                  "h"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_deterministic",
                [
                  "self.rbp"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "self.rbp"
                ]
              ],
              [
                "test_hash_format_sparse",
                [
                  "self.rbp"
                ]
              ],
              [
                "test_hash_format",
                [
                  "self.rbp"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5393079764765493,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hash_format",
                  "test_hash_format_sparse",
                  0.9187795405622854
                ],
                [
                  "test_hash_format",
                  "test_hash_deterministic_sparse",
                  0.34867747990172687
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_format_sparse",
                  0.3174078403432616
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_deterministic_sparse",
                  0.8427772341319071
                ],
                [
                  "test_hash_format_sparse",
                  "test_hash_deterministic_sparse",
                  0.4627389502500903
                ],
                [
                  "test_hash_format",
                  "test_hash_deterministic",
                  0.3454668136700244
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "true"
              ],
              [
                "test_hash_format",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestRandomDiscretizedProjections",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hash_format_sparse",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_deterministic",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_format",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hash_format_sparse",
                  "[]"
                ],
                [
                  "test_hash_deterministic",
                  "[]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[]"
                ],
                [
                  "test_hash_format",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "true"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "true"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                []
              ],
              [
                "test_hash_deterministic",
                []
              ],
              [
                "test_hash_deterministic_sparse",
                []
              ],
              [
                "test_hash_format",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_format_sparse",
                "true"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_format",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_format",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "2"
              ],
              [
                "test_hash_deterministic",
                "1"
              ],
              [
                "test_hash_deterministic_sparse",
                "1"
              ],
              [
                "test_hash_format",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                [
                  "h"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "x",
                  "first_hash"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "x",
                  "first_hash"
                ]
              ],
              [
                "test_hash_format",
                [
                  "h"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                [
                  "self.rbp"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "self.rbp"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "self.rbp"
                ]
              ],
              [
                "test_hash_format",
                [
                  "self.rbp"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.569073268395028,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hash_format",
                  "test_hash_deterministic_sparse",
                  0.42994461834001113
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_deterministic_sparse",
                  0.8427772341319071
                ],
                [
                  "test_hash_format_sparse",
                  "test_hash_deterministic_sparse",
                  0.5800147905657416
                ],
                [
                  "test_hash_format",
                  "test_hash_format_sparse",
                  0.766825781116149
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_format_sparse",
                  0.35557950110937975
                ],
                [
                  "test_hash_format",
                  "test_hash_deterministic",
                  0.4392976851069794
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestPCABinaryProjections",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hash_format",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_format_sparse",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_hash_deterministic",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hash_format",
                  "[]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[]"
                ],
                [
                  "test_hash_format_sparse",
                  "[]"
                ],
                [
                  "test_hash_deterministic",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hash_format",
                  "true"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "true"
                ],
                [
                  "test_hash_format_sparse",
                  "true"
                ],
                [
                  "test_hash_deterministic",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hash_format",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hash_format",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hash_format",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_format",
                [
                  "self.vectors"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "self.vectors"
                ]
              ],
              [
                "test_hash_format_sparse",
                [
                  "self.vectors"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "self.vectors"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_format",
                "true"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "true"
              ],
              [
                "test_hash_deterministic",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hash_format",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hash_format",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                "4"
              ],
              [
                "test_hash_deterministic_sparse",
                "1"
              ],
              [
                "test_hash_format_sparse",
                "4"
              ],
              [
                "test_hash_deterministic",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                [
                  "h"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "x",
                  "first_hash"
                ]
              ],
              [
                "test_hash_format_sparse",
                [
                  "h"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "x",
                  "first_hash"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format",
                [
                  "self.pbp"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "self.pbp"
                ]
              ],
              [
                "test_hash_format_sparse",
                [
                  "self.pbp"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "self.pbp"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5393079764765493,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hash_format",
                  "test_hash_format_sparse",
                  0.9187795405622854
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_deterministic_sparse",
                  0.8427772341319071
                ],
                [
                  "test_hash_format",
                  "test_hash_deterministic_sparse",
                  0.34867747990172687
                ],
                [
                  "test_hash_format_sparse",
                  "test_hash_deterministic_sparse",
                  0.4627389502500903
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_format_sparse",
                  0.3174078403432616
                ],
                [
                  "test_hash_format",
                  "test_hash_deterministic",
                  0.3454668136700244
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_format",
                "true"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_format_sparse",
                "true"
              ],
              [
                "test_hash_deterministic",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestPCADiscretizedProjections",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hash_format_sparse",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_deterministic",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_format",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hash_format_sparse",
                  "[]"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "[]"
                ],
                [
                  "test_hash_deterministic",
                  "[]"
                ],
                [
                  "test_hash_format",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "true"
                ],
                [
                  "test_hash_deterministic",
                  "true"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hash_format_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "false"
                ],
                [
                  "test_hash_deterministic",
                  "false"
                ],
                [
                  "test_hash_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_format_sparse",
                [
                  "self.vectors"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "self.vectors"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "self.vectors"
                ]
              ],
              [
                "test_hash_format",
                [
                  "self.vectors"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_format_sparse",
                "true"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_format",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic",
                  "0"
                ],
                [
                  "test_hash_format",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hash_format_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic_sparse",
                  "0"
                ],
                [
                  "test_hash_deterministic",
                  "0"
                ],
                [
                  "test_hash_format",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "2"
              ],
              [
                "test_hash_deterministic_sparse",
                "1"
              ],
              [
                "test_hash_deterministic",
                "1"
              ],
              [
                "test_hash_format",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                [
                  "h"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "x",
                  "first_hash"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "x",
                  "first_hash"
                ]
              ],
              [
                "test_hash_format",
                [
                  "h"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                [
                  "self.pdp"
                ]
              ],
              [
                "test_hash_deterministic_sparse",
                [
                  "self.pdp"
                ]
              ],
              [
                "test_hash_deterministic",
                [
                  "self.pdp"
                ]
              ],
              [
                "test_hash_format",
                [
                  "self.pdp"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.569073268395028,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hash_format",
                  "test_hash_deterministic",
                  0.4392976851069794
                ],
                [
                  "test_hash_format_sparse",
                  "test_hash_deterministic_sparse",
                  0.5800147905657416
                ],
                [
                  "test_hash_format",
                  "test_hash_deterministic_sparse",
                  0.42994461834001113
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_format_sparse",
                  0.35557950110937975
                ],
                [
                  "test_hash_format",
                  "test_hash_format_sparse",
                  0.766825781116149
                ],
                [
                  "test_hash_deterministic",
                  "test_hash_deterministic_sparse",
                  0.8427772341319071
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_format_sparse",
                "false"
              ],
              [
                "test_hash_deterministic_sparse",
                "false"
              ],
              [
                "test_hash_deterministic",
                "false"
              ],
              [
                "test_hash_format",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_filters_tests.py",
    "testCases": [
      {
        "name": "TestVectorFilters",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unique",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_nearest",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_thresholding",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unique",
                  "[]"
                ],
                [
                  "test_nearest",
                  "[]"
                ],
                [
                  "test_thresholding",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unique",
                  "false"
                ],
                [
                  "test_nearest",
                  "false"
                ],
                [
                  "test_thresholding",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unique",
                  "false"
                ],
                [
                  "test_nearest",
                  "false"
                ],
                [
                  "test_thresholding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unique",
                  "false"
                ],
                [
                  "test_nearest",
                  "false"
                ],
                [
                  "test_thresholding",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unique",
                  "false"
                ],
                [
                  "test_nearest",
                  "false"
                ],
                [
                  "test_thresholding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                "false"
              ],
              [
                "test_nearest",
                "false"
              ],
              [
                "test_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                "false"
              ],
              [
                "test_nearest",
                "false"
              ],
              [
                "test_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_unique",
                [
                  "self.nearest_filter",
                  "self.threshold_filter"
                ]
              ],
              [
                "test_nearest",
                [
                  "self.unique",
                  "self.threshold_filter"
                ]
              ],
              [
                "test_thresholding",
                [
                  "self.nearest_filter",
                  "self.unique"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                "false"
              ],
              [
                "test_nearest",
                "false"
              ],
              [
                "test_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_unique",
                "true"
              ],
              [
                "test_nearest",
                "true"
              ],
              [
                "test_thresholding",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unique",
                  "0"
                ],
                [
                  "test_nearest",
                  "0"
                ],
                [
                  "test_thresholding",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unique",
                  "0"
                ],
                [
                  "test_nearest",
                  "0"
                ],
                [
                  "test_thresholding",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                "false"
              ],
              [
                "test_nearest",
                "false"
              ],
              [
                "test_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                "false"
              ],
              [
                "test_nearest",
                "false"
              ],
              [
                "test_thresholding",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                "1"
              ],
              [
                "test_nearest",
                "6"
              ],
              [
                "test_thresholding",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                [
                  "result",
                  "W"
                ]
              ],
              [
                "test_nearest",
                [
                  "result"
                ]
              ],
              [
                "test_thresholding",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                [
                  "self.unique",
                  "self.V"
                ]
              ],
              [
                "test_nearest",
                [
                  "self.nearest_filter",
                  "self.V"
                ]
              ],
              [
                "test_thresholding",
                [
                  "self.V",
                  "self.threshold_filter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4250823554195728,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_nearest",
                  "test_unique",
                  0.12954097951001708
                ],
                [
                  "test_thresholding",
                  "test_nearest",
                  0.9658440504189741
                ],
                [
                  "test_thresholding",
                  "test_unique",
                  0.17986203632972705
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_unique",
                "false"
              ],
              [
                "test_nearest",
                "false"
              ],
              [
                "test_thresholding",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_storage_tests.py",
    "testCases": [
      {
        "name": "MemoryStorageTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_store_sparse_vector",
                  "[]"
                ],
                [
                  "test_delete_vector",
                  "[]"
                ],
                [
                  "test_get_all_bucket_keys",
                  "[]"
                ],
                [
                  "test_store_vector",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_store_sparse_vector",
                  "[]"
                ],
                [
                  "test_delete_vector",
                  "[]"
                ],
                [
                  "test_get_all_bucket_keys",
                  "[]"
                ],
                [
                  "test_store_vector",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_store_sparse_vector",
                [
                  "self.storage"
                ]
              ],
              [
                "test_delete_vector",
                [
                  "self.storage"
                ]
              ],
              [
                "test_get_all_bucket_keys",
                [
                  "self.storage"
                ]
              ],
              [
                "test_store_vector",
                [
                  "self.storage"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_store_sparse_vector",
                  "0"
                ],
                [
                  "test_delete_vector",
                  "0"
                ],
                [
                  "test_get_all_bucket_keys",
                  "0"
                ],
                [
                  "test_store_vector",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_store_sparse_vector",
                  "0"
                ],
                [
                  "test_delete_vector",
                  "0"
                ],
                [
                  "test_get_all_bucket_keys",
                  "0"
                ],
                [
                  "test_store_vector",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_store_sparse_vector",
                "0"
              ],
              [
                "test_delete_vector",
                "0"
              ],
              [
                "test_get_all_bucket_keys",
                "0"
              ],
              [
                "test_store_vector",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                [
                  "x"
                ]
              ],
              [
                "test_delete_vector",
                []
              ],
              [
                "test_get_all_bucket_keys",
                []
              ],
              [
                "test_store_vector",
                [
                  "x"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_store_sparse_vector",
                []
              ],
              [
                "test_delete_vector",
                []
              ],
              [
                "test_get_all_bucket_keys",
                []
              ],
              [
                "test_store_vector",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3374187886706323,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_store_vector",
                  "test_delete_vector",
                  0.3265986323710904
                ],
                [
                  "test_store_sparse_vector",
                  "test_get_all_bucket_keys",
                  0.15877683720748895
                ],
                [
                  "test_get_all_bucket_keys",
                  "test_delete_vector",
                  0.2300894966542111
                ],
                [
                  "test_store_vector",
                  "test_store_sparse_vector",
                  0.8451542547285166
                ],
                [
                  "test_store_sparse_vector",
                  "test_delete_vector",
                  0.2760262237369417
                ],
                [
                  "test_store_vector",
                  "test_get_all_bucket_keys",
                  0.18786728732554484
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "RedisStorageTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_store_many_vectors",
                  "[]"
                ],
                [
                  "test_store_vector",
                  "[]"
                ],
                [
                  "test_store_sparse_vector",
                  "[]"
                ],
                [
                  "test_get_all_bucket_keys",
                  "[]"
                ],
                [
                  "test_store_zero",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_delete_vector",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_store_many_vectors",
                  "[]"
                ],
                [
                  "test_store_vector",
                  "[]"
                ],
                [
                  "test_store_sparse_vector",
                  "[]"
                ],
                [
                  "test_get_all_bucket_keys",
                  "[]"
                ],
                [
                  "test_store_zero",
                  "[]"
                ],
                [
                  "test_delete_vector",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_store_many_vectors",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_store_many_vectors",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_store_many_vectors",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_store_many_vectors",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_many_vectors",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_store_many_vectors",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_store_many_vectors",
                [
                  "self.storage"
                ]
              ],
              [
                "test_store_vector",
                [
                  "self.storage"
                ]
              ],
              [
                "test_store_sparse_vector",
                [
                  "self.storage"
                ]
              ],
              [
                "test_get_all_bucket_keys",
                [
                  "self.storage"
                ]
              ],
              [
                "test_store_zero",
                []
              ],
              [
                "test_delete_vector",
                [
                  "self.storage"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_many_vectors",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_store_many_vectors",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_zero",
                "true"
              ],
              [
                "test_delete_vector",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_store_many_vectors",
                  "0"
                ],
                [
                  "test_store_vector",
                  "0"
                ],
                [
                  "test_store_sparse_vector",
                  "0"
                ],
                [
                  "test_get_all_bucket_keys",
                  "0"
                ],
                [
                  "test_store_zero",
                  "0"
                ],
                [
                  "test_delete_vector",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_store_many_vectors",
                  "0"
                ],
                [
                  "test_store_vector",
                  "0"
                ],
                [
                  "test_store_sparse_vector",
                  "0"
                ],
                [
                  "test_get_all_bucket_keys",
                  "0"
                ],
                [
                  "test_store_zero",
                  "0"
                ],
                [
                  "test_delete_vector",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_store_many_vectors",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_many_vectors",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_store_many_vectors",
                "0"
              ],
              [
                "test_store_vector",
                "0"
              ],
              [
                "test_store_sparse_vector",
                "0"
              ],
              [
                "test_get_all_bucket_keys",
                "0"
              ],
              [
                "test_store_zero",
                "1"
              ],
              [
                "test_delete_vector",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_store_many_vectors",
                [
                  "x"
                ]
              ],
              [
                "test_store_vector",
                [
                  "x"
                ]
              ],
              [
                "test_store_sparse_vector",
                [
                  "x"
                ]
              ],
              [
                "test_get_all_bucket_keys",
                []
              ],
              [
                "test_store_zero",
                [
                  "bucket",
                  "data",
                  "bucket_name",
                  "x",
                  "hash_name",
                  "_"
                ]
              ],
              [
                "test_delete_vector",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_store_many_vectors",
                []
              ],
              [
                "test_store_vector",
                []
              ],
              [
                "test_store_sparse_vector",
                []
              ],
              [
                "test_get_all_bucket_keys",
                []
              ],
              [
                "test_store_zero",
                [
                  "self.storage"
                ]
              ],
              [
                "test_delete_vector",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.344564253350909,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_store_vector",
                  "test_delete_vector",
                  0.3265986323710904
                ],
                [
                  "test_store_sparse_vector",
                  "test_store_many_vectors",
                  0.6508140266182865
                ],
                [
                  "test_get_all_bucket_keys",
                  "test_delete_vector",
                  0.2300894966542111
                ],
                [
                  "test_store_sparse_vector",
                  "test_store_zero",
                  0.3910371502940007
                ],
                [
                  "test_delete_vector",
                  "test_store_many_vectors",
                  0.21764287503300347
                ],
                [
                  "test_store_vector",
                  "test_store_zero",
                  0.35381518506868126
                ],
                [
                  "test_get_all_bucket_keys",
                  "test_store_many_vectors",
                  0.16692446522239712
                ],
                [
                  "test_store_zero",
                  "test_store_many_vectors",
                  0.3869206667253395
                ],
                [
                  "test_delete_vector",
                  "test_store_zero",
                  0.06666666666666665
                ],
                [
                  "test_store_sparse_vector",
                  "test_delete_vector",
                  0.2760262237369417
                ],
                [
                  "test_store_vector",
                  "test_get_all_bucket_keys",
                  0.18786728732554484
                ],
                [
                  "test_get_all_bucket_keys",
                  "test_store_zero",
                  0.2556549962824568
                ],
                [
                  "test_store_vector",
                  "test_store_many_vectors",
                  0.7108186533109108
                ],
                [
                  "test_store_sparse_vector",
                  "test_get_all_bucket_keys",
                  0.15877683720748895
                ],
                [
                  "test_store_vector",
                  "test_store_sparse_vector",
                  0.7888106377466154
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_store_many_vectors",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "MongoStorageTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_store_sparse_vector",
                  "[]"
                ],
                [
                  "test_get_all_bucket_keys",
                  "[]"
                ],
                [
                  "test_store_vector",
                  "[]"
                ],
                [
                  "test_delete_vector",
                  "[]"
                ],
                [
                  "test_store_zero",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_store_sparse_vector",
                  "[]"
                ],
                [
                  "test_get_all_bucket_keys",
                  "[]"
                ],
                [
                  "test_store_vector",
                  "[]"
                ],
                [
                  "test_delete_vector",
                  "[]"
                ],
                [
                  "test_store_zero",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_store_sparse_vector",
                  "false"
                ],
                [
                  "test_get_all_bucket_keys",
                  "false"
                ],
                [
                  "test_store_vector",
                  "false"
                ],
                [
                  "test_delete_vector",
                  "false"
                ],
                [
                  "test_store_zero",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_store_sparse_vector",
                [
                  "self.storage"
                ]
              ],
              [
                "test_get_all_bucket_keys",
                [
                  "self.storage"
                ]
              ],
              [
                "test_store_vector",
                [
                  "self.storage"
                ]
              ],
              [
                "test_delete_vector",
                [
                  "self.storage"
                ]
              ],
              [
                "test_store_zero",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_store_zero",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_store_sparse_vector",
                  "0"
                ],
                [
                  "test_get_all_bucket_keys",
                  "0"
                ],
                [
                  "test_store_vector",
                  "0"
                ],
                [
                  "test_delete_vector",
                  "0"
                ],
                [
                  "test_store_zero",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_store_sparse_vector",
                  "0"
                ],
                [
                  "test_get_all_bucket_keys",
                  "0"
                ],
                [
                  "test_store_vector",
                  "0"
                ],
                [
                  "test_delete_vector",
                  "0"
                ],
                [
                  "test_store_zero",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_store_sparse_vector",
                "0"
              ],
              [
                "test_get_all_bucket_keys",
                "0"
              ],
              [
                "test_store_vector",
                "0"
              ],
              [
                "test_delete_vector",
                "0"
              ],
              [
                "test_store_zero",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                [
                  "x"
                ]
              ],
              [
                "test_get_all_bucket_keys",
                []
              ],
              [
                "test_store_vector",
                [
                  "x"
                ]
              ],
              [
                "test_delete_vector",
                []
              ],
              [
                "test_store_zero",
                [
                  "bucket",
                  "data",
                  "bucket_name",
                  "x",
                  "hash_name",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_store_sparse_vector",
                []
              ],
              [
                "test_get_all_bucket_keys",
                []
              ],
              [
                "test_store_vector",
                []
              ],
              [
                "test_delete_vector",
                []
              ],
              [
                "test_store_zero",
                [
                  "self.storage"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3035343113353698,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_store_vector",
                  "test_store_zero",
                  0.35381518506868126
                ],
                [
                  "test_store_vector",
                  "test_get_all_bucket_keys",
                  0.18786728732554484
                ],
                [
                  "test_store_vector",
                  "test_delete_vector",
                  0.3265986323710904
                ],
                [
                  "test_get_all_bucket_keys",
                  "test_store_zero",
                  0.2556549962824568
                ],
                [
                  "test_store_sparse_vector",
                  "test_store_zero",
                  0.3910371502940007
                ],
                [
                  "test_get_all_bucket_keys",
                  "test_delete_vector",
                  0.2300894966542111
                ],
                [
                  "test_store_sparse_vector",
                  "test_get_all_bucket_keys",
                  0.15877683720748895
                ],
                [
                  "test_store_vector",
                  "test_store_sparse_vector",
                  0.7888106377466154
                ],
                [
                  "test_delete_vector",
                  "test_store_zero",
                  0.06666666666666665
                ],
                [
                  "test_store_sparse_vector",
                  "test_delete_vector",
                  0.2760262237369417
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_store_sparse_vector",
                "false"
              ],
              [
                "test_get_all_bucket_keys",
                "false"
              ],
              [
                "test_store_vector",
                "false"
              ],
              [
                "test_delete_vector",
                "false"
              ],
              [
                "test_store_zero",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_distances_tests.py",
    "testCases": [
      {
        "name": "TestEuclideanDistance",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_triangle_inequality",
                  "[]"
                ],
                [
                  "test_symmetry",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_triangle_inequality",
                  "[]"
                ],
                [
                  "test_symmetry",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_triangle_inequality",
                  "false"
                ],
                [
                  "test_symmetry",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_triangle_inequality",
                  "false"
                ],
                [
                  "test_symmetry",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_triangle_inequality",
                  "false"
                ],
                [
                  "test_symmetry",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_triangle_inequality",
                  "false"
                ],
                [
                  "test_symmetry",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                "false"
              ],
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                "false"
              ],
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                []
              ],
              [
                "test_symmetry",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                "false"
              ],
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                "false"
              ],
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_triangle_inequality",
                  "0"
                ],
                [
                  "test_symmetry",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_triangle_inequality",
                  "0"
                ],
                [
                  "test_symmetry",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                "false"
              ],
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                "false"
              ],
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_triangle_inequality",
                "0"
              ],
              [
                "test_symmetry",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                []
              ],
              [
                "test_symmetry",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                [
                  "self.euclidean"
                ]
              ],
              [
                "test_symmetry",
                [
                  "self.euclidean"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5698028822981898,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_triangle_inequality",
                  "test_symmetry",
                  0.5698028822981898
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_triangle_inequality",
                "false"
              ],
              [
                "test_symmetry",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestCosineDistance",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_symmetry",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_symmetry",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_symmetry",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_symmetry",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_symmetry",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_symmetry",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_symmetry",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_symmetry",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_symmetry",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                [
                  "self.cosine"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestManhattanDistance",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_symmetry",
                  "[]"
                ],
                [
                  "test_triangle_inequality",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_symmetry",
                  "[]"
                ],
                [
                  "test_triangle_inequality",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_symmetry",
                  "false"
                ],
                [
                  "test_triangle_inequality",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_symmetry",
                  "false"
                ],
                [
                  "test_triangle_inequality",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_symmetry",
                  "false"
                ],
                [
                  "test_triangle_inequality",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_symmetry",
                  "false"
                ],
                [
                  "test_triangle_inequality",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ],
              [
                "test_triangle_inequality",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ],
              [
                "test_triangle_inequality",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                []
              ],
              [
                "test_triangle_inequality",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ],
              [
                "test_triangle_inequality",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ],
              [
                "test_triangle_inequality",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_symmetry",
                  "0"
                ],
                [
                  "test_triangle_inequality",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_symmetry",
                  "0"
                ],
                [
                  "test_triangle_inequality",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ],
              [
                "test_triangle_inequality",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ],
              [
                "test_triangle_inequality",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_symmetry",
                "0"
              ],
              [
                "test_triangle_inequality",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                []
              ],
              [
                "test_triangle_inequality",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                [
                  "self.manhattan"
                ]
              ],
              [
                "test_triangle_inequality",
                [
                  "self.manhattan"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5698028822981898,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_triangle_inequality",
                  "test_symmetry",
                  0.5698028822981898
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_symmetry",
                "false"
              ],
              [
                "test_triangle_inequality",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_experiments_tests.py",
    "testCases": [
      {
        "name": "TestRecallExperiment",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_experiment_with_unibucket_3",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_experiment_with_list_1",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_experiment_with_list_3",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_random_binary_projections",
                  "[]"
                ],
                [
                  "test_experiment_with_list_2",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_random_discretized_projections",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_experiment_with_unibucket_3",
                  "[]"
                ],
                [
                  "test_experiment_with_list_1",
                  "[]"
                ],
                [
                  "test_experiment_with_list_3",
                  "[]"
                ],
                [
                  "test_random_binary_projections",
                  "[]"
                ],
                [
                  "test_experiment_with_list_2",
                  "[]"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "[]"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "[]"
                ],
                [
                  "test_random_discretized_projections",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_experiment_with_unibucket_3",
                  "false"
                ],
                [
                  "test_experiment_with_list_1",
                  "true"
                ],
                [
                  "test_experiment_with_list_3",
                  "true"
                ],
                [
                  "test_random_binary_projections",
                  "false"
                ],
                [
                  "test_experiment_with_list_2",
                  "true"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "false"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "false"
                ],
                [
                  "test_random_discretized_projections",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_experiment_with_unibucket_3",
                  "false"
                ],
                [
                  "test_experiment_with_list_1",
                  "false"
                ],
                [
                  "test_experiment_with_list_3",
                  "false"
                ],
                [
                  "test_random_binary_projections",
                  "false"
                ],
                [
                  "test_experiment_with_list_2",
                  "false"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "false"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "false"
                ],
                [
                  "test_random_discretized_projections",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_experiment_with_unibucket_3",
                  "false"
                ],
                [
                  "test_experiment_with_list_1",
                  "false"
                ],
                [
                  "test_experiment_with_list_3",
                  "false"
                ],
                [
                  "test_random_binary_projections",
                  "false"
                ],
                [
                  "test_experiment_with_list_2",
                  "false"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "false"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "false"
                ],
                [
                  "test_random_discretized_projections",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_experiment_with_unibucket_3",
                  "false"
                ],
                [
                  "test_experiment_with_list_1",
                  "false"
                ],
                [
                  "test_experiment_with_list_3",
                  "false"
                ],
                [
                  "test_random_binary_projections",
                  "false"
                ],
                [
                  "test_experiment_with_list_2",
                  "false"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "false"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "false"
                ],
                [
                  "test_random_discretized_projections",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "false"
              ],
              [
                "test_experiment_with_list_1",
                "false"
              ],
              [
                "test_experiment_with_list_3",
                "false"
              ],
              [
                "test_random_binary_projections",
                "false"
              ],
              [
                "test_experiment_with_list_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_1",
                "false"
              ],
              [
                "test_random_discretized_projections",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "false"
              ],
              [
                "test_experiment_with_list_1",
                "false"
              ],
              [
                "test_experiment_with_list_3",
                "false"
              ],
              [
                "test_random_binary_projections",
                "false"
              ],
              [
                "test_experiment_with_list_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_1",
                "false"
              ],
              [
                "test_random_discretized_projections",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                []
              ],
              [
                "test_experiment_with_list_1",
                []
              ],
              [
                "test_experiment_with_list_3",
                []
              ],
              [
                "test_random_binary_projections",
                []
              ],
              [
                "test_experiment_with_list_2",
                []
              ],
              [
                "test_experiment_with_unibucket_2",
                []
              ],
              [
                "test_experiment_with_unibucket_1",
                []
              ],
              [
                "test_random_discretized_projections",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "false"
              ],
              [
                "test_experiment_with_list_1",
                "false"
              ],
              [
                "test_experiment_with_list_3",
                "false"
              ],
              [
                "test_random_binary_projections",
                "false"
              ],
              [
                "test_experiment_with_list_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_1",
                "false"
              ],
              [
                "test_random_discretized_projections",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "true"
              ],
              [
                "test_experiment_with_list_1",
                "true"
              ],
              [
                "test_experiment_with_list_3",
                "true"
              ],
              [
                "test_random_binary_projections",
                "false"
              ],
              [
                "test_experiment_with_list_2",
                "true"
              ],
              [
                "test_experiment_with_unibucket_2",
                "true"
              ],
              [
                "test_experiment_with_unibucket_1",
                "true"
              ],
              [
                "test_random_discretized_projections",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_experiment_with_unibucket_3",
                  "0"
                ],
                [
                  "test_experiment_with_list_1",
                  "0"
                ],
                [
                  "test_experiment_with_list_3",
                  "0"
                ],
                [
                  "test_random_binary_projections",
                  "0"
                ],
                [
                  "test_experiment_with_list_2",
                  "0"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "0"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "0"
                ],
                [
                  "test_random_discretized_projections",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_experiment_with_unibucket_3",
                  "0"
                ],
                [
                  "test_experiment_with_list_1",
                  "0"
                ],
                [
                  "test_experiment_with_list_3",
                  "0"
                ],
                [
                  "test_random_binary_projections",
                  "0"
                ],
                [
                  "test_experiment_with_list_2",
                  "0"
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "0"
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "0"
                ],
                [
                  "test_random_discretized_projections",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "false"
              ],
              [
                "test_experiment_with_list_1",
                "false"
              ],
              [
                "test_experiment_with_list_3",
                "false"
              ],
              [
                "test_random_binary_projections",
                "true"
              ],
              [
                "test_experiment_with_list_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_1",
                "false"
              ],
              [
                "test_random_discretized_projections",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "false"
              ],
              [
                "test_experiment_with_list_1",
                "false"
              ],
              [
                "test_experiment_with_list_3",
                "false"
              ],
              [
                "test_random_binary_projections",
                "false"
              ],
              [
                "test_experiment_with_list_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_1",
                "false"
              ],
              [
                "test_random_discretized_projections",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "2"
              ],
              [
                "test_experiment_with_list_1",
                "2"
              ],
              [
                "test_experiment_with_list_3",
                "2"
              ],
              [
                "test_random_binary_projections",
                "0"
              ],
              [
                "test_experiment_with_list_2",
                "2"
              ],
              [
                "test_experiment_with_unibucket_2",
                "2"
              ],
              [
                "test_experiment_with_unibucket_1",
                "2"
              ],
              [
                "test_random_discretized_projections",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                [
                  "result",
                  "vector_count",
                  "vectors",
                  "engine",
                  "dim",
                  "unibucket",
                  "exp",
                  "nearest"
                ]
              ],
              [
                "test_experiment_with_list_1",
                [
                  "result",
                  "vector_count",
                  "vectors",
                  "engine",
                  "dim",
                  "unibucket",
                  "exp",
                  "nearest"
                ]
              ],
              [
                "test_experiment_with_list_3",
                [
                  "result",
                  "vector_count",
                  "vectors",
                  "engine",
                  "dim",
                  "unibucket",
                  "exp",
                  "nearest"
                ]
              ],
              [
                "test_random_binary_projections",
                [
                  "result",
                  "recall1",
                  "vector_count",
                  "rbp",
                  "vectors",
                  "searchtime1",
                  "engine",
                  "dim",
                  "exp",
                  "nearest",
                  "precision1"
                ]
              ],
              [
                "test_experiment_with_list_2",
                [
                  "result",
                  "vector_count",
                  "vectors",
                  "engine",
                  "dim",
                  "unibucket",
                  "exp",
                  "nearest"
                ]
              ],
              [
                "test_experiment_with_unibucket_2",
                [
                  "result",
                  "vector_count",
                  "vectors",
                  "engine",
                  "dim",
                  "unibucket",
                  "exp",
                  "nearest"
                ]
              ],
              [
                "test_experiment_with_unibucket_1",
                [
                  "result",
                  "vector_count",
                  "vectors",
                  "engine",
                  "dim",
                  "unibucket",
                  "exp",
                  "nearest"
                ]
              ],
              [
                "test_random_discretized_projections",
                [
                  "recall1",
                  "vector_count",
                  "recall2",
                  "searchtime1",
                  "searchtime2",
                  "dim",
                  "nearest",
                  "result",
                  "vectors",
                  "engine",
                  "precision2",
                  "exp",
                  "precision1",
                  "rdp"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                []
              ],
              [
                "test_experiment_with_list_1",
                []
              ],
              [
                "test_experiment_with_list_3",
                []
              ],
              [
                "test_random_binary_projections",
                []
              ],
              [
                "test_experiment_with_list_2",
                []
              ],
              [
                "test_experiment_with_unibucket_2",
                []
              ],
              [
                "test_experiment_with_unibucket_1",
                []
              ],
              [
                "test_random_discretized_projections",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9300195914308043,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_experiment_with_list_3",
                  "test_random_binary_projections",
                  0.8783324226277922
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "test_experiment_with_list_1",
                  0.9761141507034121
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "test_experiment_with_list_3",
                  0.9871717708029738
                ],
                [
                  "test_experiment_with_unibucket_3",
                  "test_experiment_with_list_1",
                  0.9522744162178824
                ],
                [
                  "test_experiment_with_list_2",
                  "test_experiment_with_list_3",
                  0.9974369885236286
                ],
                [
                  "test_experiment_with_list_2",
                  "test_random_binary_projections",
                  0.8776101841515797
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "test_experiment_with_list_2",
                  0.9897610921501706
                ],
                [
                  "test_experiment_with_list_2",
                  "test_random_discretized_projections",
                  0.8730090815315956
                ],
                [
                  "test_experiment_with_list_3",
                  "test_random_discretized_projections",
                  0.8718400734679432
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "test_random_discretized_projections",
                  0.8772635117534845
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "test_random_discretized_projections",
                  0.8654576558873387
                ],
                [
                  "test_experiment_with_unibucket_3",
                  "test_random_binary_projections",
                  0.8859967544133751
                ],
                [
                  "test_experiment_with_list_1",
                  "test_random_discretized_projections",
                  0.8682764813669319
                ],
                [
                  "test_experiment_with_list_1",
                  "test_random_binary_projections",
                  0.8864693637049493
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "test_experiment_with_list_3",
                  0.9412232897559588
                ],
                [
                  "test_experiment_with_unibucket_3",
                  "test_experiment_with_list_2",
                  0.9871717708029738
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "test_experiment_with_unibucket_3",
                  0.9974369885236286
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "test_random_binary_projections",
                  0.8852548721668373
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "test_experiment_with_unibucket_3",
                  0.9565455293566372
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "test_experiment_with_list_2",
                  0.9388109236624862
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "test_random_binary_projections",
                  0.8880816764546425
                ],
                [
                  "test_experiment_with_unibucket_3",
                  "test_random_discretized_projections",
                  0.8761054358626005
                ],
                [
                  "test_random_discretized_projections",
                  "test_random_binary_projections",
                  0.9651448205104511
                ],
                [
                  "test_experiment_with_list_1",
                  "test_experiment_with_list_3",
                  0.9632961108500339
                ],
                [
                  "test_experiment_with_unibucket_3",
                  "test_experiment_with_list_3",
                  0.9897084048027442
                ],
                [
                  "test_experiment_with_unibucket_1",
                  "test_experiment_with_unibucket_2",
                  0.9540938921872244
                ],
                [
                  "test_experiment_with_list_1",
                  "test_experiment_with_list_2",
                  0.9608271718627812
                ],
                [
                  "test_experiment_with_unibucket_2",
                  "test_experiment_with_list_1",
                  0.9498337259604611
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_experiment_with_unibucket_3",
                "false"
              ],
              [
                "test_experiment_with_list_1",
                "false"
              ],
              [
                "test_experiment_with_list_3",
                "false"
              ],
              [
                "test_random_binary_projections",
                "false"
              ],
              [
                "test_experiment_with_list_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_2",
                "false"
              ],
              [
                "test_experiment_with_unibucket_1",
                "false"
              ],
              [
                "test_random_discretized_projections",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_permutation_tests.py",
    "testCases": [
      {
        "name": "TestPermutation",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_runnable",
                  "[PyCallExpression: self.assertLess]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_runnable",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_runnable",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_runnable",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_runnable",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_runnable",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_runnable",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_runnable",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                [
                  "permuted_dists",
                  "v",
                  "query",
                  "matrix",
                  "results",
                  "dists"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                [
                  "self.engine",
                  "self.engine_perm",
                  "self.permutations"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_runnable",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_hash_storage_tests.py",
    "testCases": [
      {
        "name": "TestHashStorage",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hash_memory_storage_rbp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hash_memory_storage_rbp",
                  "[]"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "[]"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "[]"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "[]"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "[]"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "[]"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "[]"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "[]"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "[]"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hash_memory_storage_rbp",
                  "true"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "true"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "true"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "true"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "true"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "true"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "true"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hash_memory_storage_rbp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hash_memory_storage_rbp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hash_memory_storage_rbp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "false"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "false"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "false"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "false"
              ],
              [
                "test_hash_redis_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_rbp",
                "false"
              ],
              [
                "test_hash_memory_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "false"
              ],
              [
                "test_hash_redis_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_rbp",
                "false"
              ],
              [
                "test_hash_memory_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                [
                  "self.redis_object",
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_redis_storage_rdp",
                [
                  "self.redis_object",
                  "self.memory"
                ]
              ],
              [
                "test_hash_redis_storage_pcabp",
                [
                  "self.redis_object",
                  "self.memory"
                ]
              ],
              [
                "test_hash_memory_storage_none_config",
                [
                  "self.redis_object",
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_redis_storage_rbp",
                [
                  "self.redis_object",
                  "self.memory"
                ]
              ],
              [
                "test_hash_memory_storage_rdp",
                [
                  "self.redis_object",
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_redis_storage_none_config",
                [
                  "self.redis_object",
                  "self.memory"
                ]
              ],
              [
                "test_hash_redis_storage_pcadp",
                [
                  "self.redis_object",
                  "self.memory"
                ]
              ],
              [
                "test_hash_memory_storage_pcabp",
                [
                  "self.redis_object",
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_memory_storage_pcadp",
                [
                  "self.redis_object",
                  "self.redis_storage"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "false"
              ],
              [
                "test_hash_redis_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_rbp",
                "false"
              ],
              [
                "test_hash_memory_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "false"
              ],
              [
                "test_hash_redis_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_rbp",
                "false"
              ],
              [
                "test_hash_memory_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hash_memory_storage_rbp",
                  "0"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "0"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "0"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "0"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "0"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hash_memory_storage_rbp",
                  "0"
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "0"
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "0"
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "0"
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "0"
                ],
                [
                  "test_hash_redis_storage_pcadp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "0"
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "false"
              ],
              [
                "test_hash_redis_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_rbp",
                "false"
              ],
              [
                "test_hash_memory_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "false"
              ],
              [
                "test_hash_redis_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_rbp",
                "false"
              ],
              [
                "test_hash_memory_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "4"
              ],
              [
                "test_hash_redis_storage_rdp",
                "5"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "4"
              ],
              [
                "test_hash_memory_storage_none_config",
                "1"
              ],
              [
                "test_hash_redis_storage_rbp",
                "4"
              ],
              [
                "test_hash_memory_storage_rdp",
                "5"
              ],
              [
                "test_hash_redis_storage_none_config",
                "1"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "5"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "4"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                [
                  "hash2",
                  "hash1"
                ]
              ],
              [
                "test_hash_redis_storage_rdp",
                [
                  "hash2",
                  "hash1"
                ]
              ],
              [
                "test_hash_redis_storage_pcabp",
                [
                  "train_vectors",
                  "hash2",
                  "hash1"
                ]
              ],
              [
                "test_hash_memory_storage_none_config",
                [
                  "conf"
                ]
              ],
              [
                "test_hash_redis_storage_rbp",
                [
                  "hash2",
                  "hash1"
                ]
              ],
              [
                "test_hash_memory_storage_rdp",
                [
                  "hash2",
                  "hash1"
                ]
              ],
              [
                "test_hash_redis_storage_none_config",
                [
                  "conf"
                ]
              ],
              [
                "test_hash_redis_storage_pcadp",
                [
                  "train_vectors",
                  "hash2",
                  "hash1"
                ]
              ],
              [
                "test_hash_memory_storage_pcabp",
                [
                  "train_vectors",
                  "hash2",
                  "hash1"
                ]
              ],
              [
                "test_hash_memory_storage_pcadp",
                [
                  "train_vectors",
                  "hash2",
                  "hash1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                [
                  "self.memory"
                ]
              ],
              [
                "test_hash_redis_storage_rdp",
                [
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_redis_storage_pcabp",
                [
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_memory_storage_none_config",
                [
                  "self.memory"
                ]
              ],
              [
                "test_hash_redis_storage_rbp",
                [
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_memory_storage_rdp",
                [
                  "self.memory"
                ]
              ],
              [
                "test_hash_redis_storage_none_config",
                [
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_redis_storage_pcadp",
                [
                  "self.redis_storage"
                ]
              ],
              [
                "test_hash_memory_storage_pcabp",
                [
                  "self.memory"
                ]
              ],
              [
                "test_hash_memory_storage_pcadp",
                [
                  "self.memory"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7473129740379398,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_hash_memory_storage_rdp",
                  "test_hash_memory_storage_pcadp",
                  0.9331269338583473
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_memory_storage_pcabp",
                  0.4268660654655476
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_memory_storage_pcadp",
                  0.4084249830886535
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_redis_storage_pcabp",
                  0.4116934847963092
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "test_hash_redis_storage_pcabp",
                  0.8893721711348248
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "test_hash_redis_storage_none_config",
                  0.4151592931705006
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_redis_storage_none_config",
                  0.8651809126974003
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "test_hash_redis_storage_pcadp",
                  0.9896406267359099
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "test_hash_memory_storage_pcabp",
                  0.9017306569520129
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "test_hash_redis_storage_rdp",
                  0.9223799153545663
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "test_hash_redis_storage_pcadp",
                  0.9334830569471808
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_memory_storage_pcadp",
                  0.8852587100294376
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_redis_storage_pcabp",
                  0.8915140453758303
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "test_hash_redis_storage_rdp",
                  0.8898850485888422
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "test_hash_redis_storage_rbp",
                  0.4703658354289307
                ],
                [
                  "test_hash_redis_storage_rdp",
                  "test_hash_redis_storage_pcabp",
                  0.9023139400492808
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "test_hash_redis_storage_rbp",
                  0.8912927299015887
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "test_hash_redis_storage_rdp",
                  0.45051654728468793
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "test_hash_redis_storage_pcabp",
                  0.9058209294559105
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "test_hash_redis_storage_pcadp",
                  0.9443605301250177
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_memory_storage_rbp",
                  0.4564911920116405
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "test_hash_redis_storage_rdp",
                  0.9887045098250912
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "test_hash_redis_storage_none_config",
                  0.4020783083553962
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "test_hash_redis_storage_rdp",
                  0.9537526126280074
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "test_hash_redis_storage_rbp",
                  0.9404028155931828
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "test_hash_redis_storage_pcabp",
                  0.9864002637970105
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "test_hash_redis_storage_pcadp",
                  0.4198268571247917
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_memory_storage_rdp",
                  0.9535051319477994
                ],
                [
                  "test_hash_memory_storage_rdp",
                  "test_hash_redis_storage_pcadp",
                  0.9225959499428694
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_redis_storage_pcadp",
                  0.8737386234016632
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_redis_storage_none_config",
                  0.4304310275542364
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "test_hash_redis_storage_pcabp",
                  0.9435952526801287
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "test_hash_redis_storage_rbp",
                  0.8728138485196316
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_memory_storage_pcabp",
                  0.9051589117332547
                ],
                [
                  "test_hash_redis_storage_none_config",
                  "test_hash_redis_storage_pcabp",
                  0.4407843143479594
                ],
                [
                  "test_hash_redis_storage_rbp",
                  "test_hash_redis_storage_pcadp",
                  0.8858822771528142
                ],
                [
                  "test_hash_redis_storage_pcabp",
                  "test_hash_redis_storage_pcadp",
                  0.9559518804430456
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_redis_storage_rbp",
                  0.9854080226124461
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_memory_storage_rdp",
                  0.4390807922054059
                ],
                [
                  "test_hash_memory_storage_pcadp",
                  "test_hash_redis_storage_none_config",
                  0.3858395786478207
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_redis_storage_pcadp",
                  0.3953868350792742
                ],
                [
                  "test_hash_memory_storage_rbp",
                  "test_hash_redis_storage_rdp",
                  0.9411787656529765
                ],
                [
                  "test_hash_memory_storage_pcabp",
                  "test_hash_memory_storage_pcadp",
                  0.9557424093520162
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_redis_storage_rdp",
                  0.42533242085645423
                ],
                [
                  "test_hash_memory_storage_none_config",
                  "test_hash_redis_storage_rbp",
                  0.44061481380159495
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hash_memory_storage_rbp",
                "false"
              ],
              [
                "test_hash_redis_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_rbp",
                "false"
              ],
              [
                "test_hash_memory_storage_rdp",
                "false"
              ],
              [
                "test_hash_redis_storage_none_config",
                "false"
              ],
              [
                "test_hash_redis_storage_pcadp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcabp",
                "false"
              ],
              [
                "test_hash_memory_storage_pcadp",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 10
      }
    ]
  },
  {
    "name": "tests_\u0026_projection_trees_tests.py",
    "testCases": [
      {
        "name": "TestRandomBinaryProjectionTree",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_storage_redis",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_storage_memory",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_retrieval",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_storage_redis",
                  "[]"
                ],
                [
                  "test_storage_memory",
                  "[]"
                ],
                [
                  "test_retrieval",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_storage_redis",
                  "true"
                ],
                [
                  "test_storage_memory",
                  "true"
                ],
                [
                  "test_retrieval",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_storage_redis",
                  "false"
                ],
                [
                  "test_storage_memory",
                  "false"
                ],
                [
                  "test_retrieval",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_storage_redis",
                  "false"
                ],
                [
                  "test_storage_memory",
                  "false"
                ],
                [
                  "test_retrieval",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_storage_redis",
                  "false"
                ],
                [
                  "test_storage_memory",
                  "false"
                ],
                [
                  "test_retrieval",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                "false"
              ],
              [
                "test_storage_memory",
                "false"
              ],
              [
                "test_retrieval",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                "false"
              ],
              [
                "test_storage_memory",
                "false"
              ],
              [
                "test_retrieval",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_storage_redis",
                [
                  "self.redis_object",
                  "self.memory"
                ]
              ],
              [
                "test_storage_memory",
                [
                  "self.redis_object",
                  "self.redis_storage"
                ]
              ],
              [
                "test_retrieval",
                [
                  "self.redis_object",
                  "self.redis_storage",
                  "self.memory"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                "false"
              ],
              [
                "test_storage_memory",
                "false"
              ],
              [
                "test_retrieval",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_storage_redis",
                "false"
              ],
              [
                "test_storage_memory",
                "false"
              ],
              [
                "test_retrieval",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_storage_redis",
                  "0"
                ],
                [
                  "test_storage_memory",
                  "0"
                ],
                [
                  "test_retrieval",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_storage_redis",
                  "0"
                ],
                [
                  "test_storage_memory",
                  "0"
                ],
                [
                  "test_retrieval",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                "false"
              ],
              [
                "test_storage_memory",
                "false"
              ],
              [
                "test_retrieval",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                "false"
              ],
              [
                "test_storage_memory",
                "false"
              ],
              [
                "test_retrieval",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                "6"
              ],
              [
                "test_storage_memory",
                "6"
              ],
              [
                "test_retrieval",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                [
                  "rbpt",
                  "x",
                  "rbpt2",
                  "keys2",
                  "x_data",
                  "keys1"
                ]
              ],
              [
                "test_storage_memory",
                [
                  "rbpt",
                  "x",
                  "rbpt2",
                  "keys2",
                  "x_data",
                  "keys1"
                ]
              ],
              [
                "test_retrieval",
                [
                  "rbpt",
                  "x",
                  "x_data",
                  "n"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_storage_redis",
                [
                  "self.redis_storage"
                ]
              ],
              [
                "test_storage_memory",
                [
                  "self.memory"
                ]
              ],
              [
                "test_retrieval",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9213506138618897,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_storage_memory",
                  "test_storage_redis",
                  0.9956668898858838
                ],
                [
                  "test_retrieval",
                  "test_storage_redis",
                  0.8837134982034583
                ],
                [
                  "test_retrieval",
                  "test_storage_memory",
                  0.884671453496327
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_storage_redis",
                "false"
              ],
              [
                "test_storage_memory",
                "false"
              ],
              [
                "test_retrieval",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]