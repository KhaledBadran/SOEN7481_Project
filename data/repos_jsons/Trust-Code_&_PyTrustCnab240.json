[
  {
    "name": "tests_\u0026_test_file.py",
    "testCases": [
      {
        "name": "TestPyCnab240",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_close_file",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_header",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_add_segment",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_str",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_load_return_file",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_close_file",
                  "[]"
                ],
                [
                  "test_add_header",
                  "[]"
                ],
                [
                  "test_add_segment",
                  "[]"
                ],
                [
                  "test_str",
                  "[]"
                ],
                [
                  "test_load_return_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_close_file",
                  "false"
                ],
                [
                  "test_add_header",
                  "false"
                ],
                [
                  "test_add_segment",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_load_return_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_close_file",
                  "false"
                ],
                [
                  "test_add_header",
                  "false"
                ],
                [
                  "test_add_segment",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_load_return_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_close_file",
                  "false"
                ],
                [
                  "test_add_header",
                  "false"
                ],
                [
                  "test_add_segment",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_load_return_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_close_file",
                  "false"
                ],
                [
                  "test_add_header",
                  "false"
                ],
                [
                  "test_add_segment",
                  "false"
                ],
                [
                  "test_str",
                  "false"
                ],
                [
                  "test_load_return_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                "false"
              ],
              [
                "test_add_header",
                "false"
              ],
              [
                "test_add_segment",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_load_return_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                "false"
              ],
              [
                "test_add_header",
                "false"
              ],
              [
                "test_add_segment",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_load_return_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_close_file",
                [
                  "self.data",
                  "self.path_to_file",
                  "self.comparison_file"
                ]
              ],
              [
                "test_add_header",
                [
                  "self.data",
                  "self.path_to_file"
                ]
              ],
              [
                "test_add_segment",
                [
                  "self.data",
                  "self.path_to_file"
                ]
              ],
              [
                "test_str",
                [
                  "self.data",
                  "self.path_to_file"
                ]
              ],
              [
                "test_load_return_file",
                [
                  "self.file",
                  "self.data",
                  "self.comparison_file"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                "false"
              ],
              [
                "test_add_header",
                "false"
              ],
              [
                "test_add_segment",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_load_return_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_close_file",
                "true"
              ],
              [
                "test_add_header",
                "false"
              ],
              [
                "test_add_segment",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_load_return_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_close_file",
                  "0"
                ],
                [
                  "test_add_header",
                  "0"
                ],
                [
                  "test_add_segment",
                  "0"
                ],
                [
                  "test_str",
                  "0"
                ],
                [
                  "test_load_return_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_close_file",
                  "0"
                ],
                [
                  "test_add_header",
                  "0"
                ],
                [
                  "test_add_segment",
                  "0"
                ],
                [
                  "test_str",
                  "0"
                ],
                [
                  "test_load_return_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                "false"
              ],
              [
                "test_add_header",
                "false"
              ],
              [
                "test_add_segment",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_load_return_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                "false"
              ],
              [
                "test_add_header",
                "false"
              ],
              [
                "test_add_segment",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_load_return_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                "3"
              ],
              [
                "test_add_header",
                "1"
              ],
              [
                "test_add_segment",
                "2"
              ],
              [
                "test_str",
                "1"
              ],
              [
                "test_load_return_file",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                []
              ],
              [
                "test_add_header",
                []
              ],
              [
                "test_add_segment",
                []
              ],
              [
                "test_str",
                []
              ],
              [
                "test_load_return_file",
                [
                  "loaded_cnab",
                  "file_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                [
                  "self.file"
                ]
              ],
              [
                "test_add_header",
                [
                  "self.file",
                  "self.comparison_file"
                ]
              ],
              [
                "test_add_segment",
                [
                  "self.file",
                  "self.comparison_file"
                ]
              ],
              [
                "test_str",
                [
                  "self.file",
                  "self.comparison_file"
                ]
              ],
              [
                "test_load_return_file",
                [
                  "self.path_to_file"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.23778844767548207,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_add_header",
                  "test_close_file",
                  0.24056261216234406
                ],
                [
                  "test_add_segment",
                  "test_str",
                  0.2135042050734495
                ],
                [
                  "test_close_file",
                  "test_load_return_file",
                  0.11895773785772164
                ],
                [
                  "test_add_header",
                  "test_load_return_file",
                  0.13736056394868904
                ],
                [
                  "test_add_header",
                  "test_str",
                  0.3333333333333333
                ],
                [
                  "test_add_segment",
                  "test_load_return_file",
                  0.08798117404291673
                ],
                [
                  "test_str",
                  "test_load_return_file",
                  0.13736056394868904
                ],
                [
                  "test_add_segment",
                  "test_close_file",
                  0.18490006540840973
                ],
                [
                  "test_add_header",
                  "test_add_segment",
                  0.5871365639519861
                ],
                [
                  "test_close_file",
                  "test_str",
                  0.3367876570272817
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_close_file",
                "false"
              ],
              [
                "test_add_header",
                "false"
              ],
              [
                "test_add_segment",
                "false"
              ],
              [
                "test_str",
                "false"
              ],
              [
                "test_load_return_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_utils.py",
    "testCases": [
      {
        "name": "TestUtils",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_pretty_format_48",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decode_48_barcode",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_decode_47_barcode",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_pretty_format_47",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_pretty_format_48",
                  "[]"
                ],
                [
                  "test_decode_48_barcode",
                  "[]"
                ],
                [
                  "test_decode_47_barcode",
                  "[]"
                ],
                [
                  "test_pretty_format_47",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_pretty_format_48",
                  "false"
                ],
                [
                  "test_decode_48_barcode",
                  "false"
                ],
                [
                  "test_decode_47_barcode",
                  "false"
                ],
                [
                  "test_pretty_format_47",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_pretty_format_48",
                  "false"
                ],
                [
                  "test_decode_48_barcode",
                  "false"
                ],
                [
                  "test_decode_47_barcode",
                  "false"
                ],
                [
                  "test_pretty_format_47",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_pretty_format_48",
                  "false"
                ],
                [
                  "test_decode_48_barcode",
                  "false"
                ],
                [
                  "test_decode_47_barcode",
                  "false"
                ],
                [
                  "test_pretty_format_47",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_pretty_format_48",
                  "false"
                ],
                [
                  "test_decode_48_barcode",
                  "false"
                ],
                [
                  "test_decode_47_barcode",
                  "false"
                ],
                [
                  "test_pretty_format_47",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                "false"
              ],
              [
                "test_decode_48_barcode",
                "false"
              ],
              [
                "test_decode_47_barcode",
                "false"
              ],
              [
                "test_pretty_format_47",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                "false"
              ],
              [
                "test_decode_48_barcode",
                "false"
              ],
              [
                "test_decode_47_barcode",
                "false"
              ],
              [
                "test_pretty_format_47",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                []
              ],
              [
                "test_decode_48_barcode",
                []
              ],
              [
                "test_decode_47_barcode",
                []
              ],
              [
                "test_pretty_format_47",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                "false"
              ],
              [
                "test_decode_48_barcode",
                "false"
              ],
              [
                "test_decode_47_barcode",
                "false"
              ],
              [
                "test_pretty_format_47",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_pretty_format_48",
                "false"
              ],
              [
                "test_decode_48_barcode",
                "true"
              ],
              [
                "test_decode_47_barcode",
                "true"
              ],
              [
                "test_pretty_format_47",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_pretty_format_48",
                  "0"
                ],
                [
                  "test_decode_48_barcode",
                  "0"
                ],
                [
                  "test_decode_47_barcode",
                  "0"
                ],
                [
                  "test_pretty_format_47",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_pretty_format_48",
                  "0"
                ],
                [
                  "test_decode_48_barcode",
                  "0"
                ],
                [
                  "test_decode_47_barcode",
                  "0"
                ],
                [
                  "test_pretty_format_47",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                "false"
              ],
              [
                "test_decode_48_barcode",
                "false"
              ],
              [
                "test_decode_47_barcode",
                "false"
              ],
              [
                "test_pretty_format_47",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                "false"
              ],
              [
                "test_decode_48_barcode",
                "false"
              ],
              [
                "test_decode_47_barcode",
                "false"
              ],
              [
                "test_pretty_format_47",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                "1"
              ],
              [
                "test_decode_48_barcode",
                "3"
              ],
              [
                "test_decode_47_barcode",
                "4"
              ],
              [
                "test_pretty_format_47",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                [
                  "dig_line"
                ]
              ],
              [
                "test_decode_48_barcode",
                [
                  "dig_line",
                  "vals"
                ]
              ],
              [
                "test_decode_47_barcode",
                [
                  "dig_line",
                  "vals"
                ]
              ],
              [
                "test_pretty_format_47",
                [
                  "dig_line"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                []
              ],
              [
                "test_decode_48_barcode",
                []
              ],
              [
                "test_decode_47_barcode",
                []
              ],
              [
                "test_pretty_format_47",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8706447023391295,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_decode_47_barcode",
                  "test_pretty_format_48",
                  0.7893652036286896
                ],
                [
                  "test_decode_48_barcode",
                  "test_pretty_format_48",
                  0.8342314001435738
                ],
                [
                  "test_decode_47_barcode",
                  "test_decode_48_barcode",
                  0.9288631785843319
                ],
                [
                  "test_decode_47_barcode",
                  "test_pretty_format_47",
                  0.8564716036810275
                ],
                [
                  "test_decode_48_barcode",
                  "test_pretty_format_47",
                  0.8566707137397942
                ],
                [
                  "test_pretty_format_47",
                  "test_pretty_format_48",
                  0.9582661142573601
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_pretty_format_48",
                "false"
              ],
              [
                "test_decode_48_barcode",
                "false"
              ],
              [
                "test_decode_47_barcode",
                "false"
              ],
              [
                "test_pretty_format_47",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  }
]