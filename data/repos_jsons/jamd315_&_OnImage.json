[
  {
    "name": "on_image_\u0026_tests_\u0026_test_OnImage.py",
    "testCases": [
      {
        "name": "TestOnImage",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_on_image",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertFalse, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_run_stop",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_on_image",
                  "[]"
                ],
                [
                  "test_run_stop",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_on_image",
                  "true"
                ],
                [
                  "test_run_stop",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_on_image",
                  "true"
                ],
                [
                  "test_run_stop",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_on_image",
                  "true"
                ],
                [
                  "test_run_stop",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_on_image",
                  "false"
                ],
                [
                  "test_run_stop",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "false"
              ],
              [
                "test_run_stop",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "false"
              ],
              [
                "test_run_stop",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                []
              ],
              [
                "test_run_stop",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "false"
              ],
              [
                "test_run_stop",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "false"
              ],
              [
                "test_run_stop",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_on_image",
                  "0"
                ],
                [
                  "test_run_stop",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_on_image",
                  "0"
                ],
                [
                  "test_run_stop",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "false"
              ],
              [
                "test_run_stop",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "false"
              ],
              [
                "test_run_stop",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "11"
              ],
              [
                "test_run_stop",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                [
                  "resolved"
                ]
              ],
              [
                "test_run_stop",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                [
                  "self.img_handler"
                ]
              ],
              [
                "test_run_stop",
                [
                  "self.img_handler"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.34159773035537166,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_on_image",
                  "test_run_stop",
                  0.34159773035537166
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_on_image",
                "false"
              ],
              [
                "test_run_stop",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "on_image_\u0026_tests_\u0026_test_img_search.py",
    "testCases": [
      {
        "name": "TestImg_find",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_thresh_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_img_find",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_thresh_error",
                  "[]"
                ],
                [
                  "test_img_find",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_thresh_error",
                  "false"
                ],
                [
                  "test_img_find",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_thresh_error",
                  "false"
                ],
                [
                  "test_img_find",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_thresh_error",
                  "false"
                ],
                [
                  "test_img_find",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_thresh_error",
                  "false"
                ],
                [
                  "test_img_find",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "false"
              ],
              [
                "test_img_find",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "false"
              ],
              [
                "test_img_find",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                []
              ],
              [
                "test_img_find",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "false"
              ],
              [
                "test_img_find",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "false"
              ],
              [
                "test_img_find",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_thresh_error",
                  "0"
                ],
                [
                  "test_img_find",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_thresh_error",
                  "0"
                ],
                [
                  "test_img_find",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "false"
              ],
              [
                "test_img_find",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "false"
              ],
              [
                "test_img_find",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "1"
              ],
              [
                "test_img_find",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                []
              ],
              [
                "test_img_find",
                [
                  "target_size",
                  "target_img_draw",
                  "target_img",
                  "mock_screenshot_size",
                  "mock_screenshot",
                  "position"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                []
              ],
              [
                "test_img_find",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.09603996093735452,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_img_find",
                  "test_thresh_error",
                  0.09603996093735452
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_thresh_error",
                "false"
              ],
              [
                "test_img_find",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "on_image_\u0026_tests_\u0026_test_HashingArray.py",
    "testCases": [
      {
        "name": "TestHashingArray",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_eq",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_hash",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_numpy_function",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_eq",
                  "[]"
                ],
                [
                  "test_hash",
                  "[]"
                ],
                [
                  "test_numpy_function",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_eq",
                  "false"
                ],
                [
                  "test_hash",
                  "false"
                ],
                [
                  "test_numpy_function",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_eq",
                  "false"
                ],
                [
                  "test_hash",
                  "false"
                ],
                [
                  "test_numpy_function",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_eq",
                  "false"
                ],
                [
                  "test_hash",
                  "false"
                ],
                [
                  "test_numpy_function",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_eq",
                  "false"
                ],
                [
                  "test_hash",
                  "false"
                ],
                [
                  "test_numpy_function",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                "false"
              ],
              [
                "test_hash",
                "false"
              ],
              [
                "test_numpy_function",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                "false"
              ],
              [
                "test_hash",
                "false"
              ],
              [
                "test_numpy_function",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_eq",
                []
              ],
              [
                "test_hash",
                [
                  "self.sample_np_array"
                ]
              ],
              [
                "test_numpy_function",
                [
                  "self.sample_np_array"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                "false"
              ],
              [
                "test_hash",
                "false"
              ],
              [
                "test_numpy_function",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_eq",
                "false"
              ],
              [
                "test_hash",
                "true"
              ],
              [
                "test_numpy_function",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_eq",
                  "0"
                ],
                [
                  "test_hash",
                  "0"
                ],
                [
                  "test_numpy_function",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_eq",
                  "0"
                ],
                [
                  "test_hash",
                  "0"
                ],
                [
                  "test_numpy_function",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                "false"
              ],
              [
                "test_hash",
                "false"
              ],
              [
                "test_numpy_function",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                "false"
              ],
              [
                "test_hash",
                "false"
              ],
              [
                "test_numpy_function",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                "3"
              ],
              [
                "test_hash",
                "1"
              ],
              [
                "test_numpy_function",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                []
              ],
              [
                "test_hash",
                []
              ],
              [
                "test_numpy_function",
                [
                  "new_arr"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                [
                  "self.sample_np_array",
                  "self.sample_hashing_array"
                ]
              ],
              [
                "test_hash",
                [
                  "self.sample_hashing_array"
                ]
              ],
              [
                "test_numpy_function",
                [
                  "self.sample_hashing_array"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4306651455401305,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_eq",
                  "test_numpy_function",
                  0.4420256812102543
                ],
                [
                  "test_hash",
                  "test_numpy_function",
                  0.40201512610368484
                ],
                [
                  "test_hash",
                  "test_eq",
                  0.4479546293064525
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_eq",
                "false"
              ],
              [
                "test_hash",
                "false"
              ],
              [
                "test_numpy_function",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "on_image_\u0026_tests_\u0026_test_resolve_image.py",
    "testCases": [
      {
        "name": "TestResolve_image",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_from_HashingArray",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_from_HashingArray",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_from_HashingArray",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_from_HashingArray",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_from_HashingArray",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_from_HashingArray",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_from_HashingArray",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_from_HashingArray",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                [
                  "ha"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_from_HashingArray",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "on_image_\u0026_tests_\u0026_test_multi_img_find.py",
    "testCases": [
      {
        "name": "TestMulti_img_find",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_run",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_run",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_run",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_run",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_run",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_run",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_run",
                  "1"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_run",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_run",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]