[
  {
    "name": "test_\u0026_test_request.py",
    "testCases": [
      {
        "name": "TestRequest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_post_request",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_get_request",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_post_request",
                  "[]"
                ],
                [
                  "test_get_request",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_post_request",
                  "false"
                ],
                [
                  "test_get_request",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_post_request",
                  "false"
                ],
                [
                  "test_get_request",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_post_request",
                  "false"
                ],
                [
                  "test_get_request",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_post_request",
                  "false"
                ],
                [
                  "test_get_request",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                "false"
              ],
              [
                "test_get_request",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                "false"
              ],
              [
                "test_get_request",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                []
              ],
              [
                "test_get_request",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                "false"
              ],
              [
                "test_get_request",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                "false"
              ],
              [
                "test_get_request",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_post_request",
                  "0"
                ],
                [
                  "test_get_request",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_post_request",
                  "0"
                ],
                [
                  "test_get_request",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                "false"
              ],
              [
                "test_get_request",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                "false"
              ],
              [
                "test_get_request",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_post_request",
                "2"
              ],
              [
                "test_get_request",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                [
                  "res",
                  "post_requests",
                  "parser",
                  "original_request",
                  "made_request"
                ]
              ],
              [
                "test_get_request",
                [
                  "res",
                  "get_requests",
                  "parser",
                  "original_request",
                  "made_request"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_post_request",
                []
              ],
              [
                "test_get_request",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8592425326181434,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_request",
                  "test_post_request",
                  0.8592425326181434
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_post_request",
                "true"
              ],
              [
                "test_get_request",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_parse_request_file.py",
    "testCases": [
      {
        "name": "TestParseRequestFile",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_third_post_request",
                  "[]"
                ],
                [
                  "test_first_get_request",
                  "[]"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fourth_get_request",
                  "[]"
                ],
                [
                  "test_request_structure",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_second_post_request",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_third_post_request",
                  "[]"
                ],
                [
                  "test_first_get_request",
                  "[]"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "[]"
                ],
                [
                  "test_fourth_get_request",
                  "[]"
                ],
                [
                  "test_request_structure",
                  "[]"
                ],
                [
                  "test_second_post_request",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_third_post_request",
                  "false"
                ],
                [
                  "test_first_get_request",
                  "false"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "false"
                ],
                [
                  "test_fourth_get_request",
                  "false"
                ],
                [
                  "test_request_structure",
                  "false"
                ],
                [
                  "test_second_post_request",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_third_post_request",
                  "false"
                ],
                [
                  "test_first_get_request",
                  "false"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "false"
                ],
                [
                  "test_fourth_get_request",
                  "false"
                ],
                [
                  "test_request_structure",
                  "false"
                ],
                [
                  "test_second_post_request",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_third_post_request",
                  "false"
                ],
                [
                  "test_first_get_request",
                  "false"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "false"
                ],
                [
                  "test_fourth_get_request",
                  "false"
                ],
                [
                  "test_request_structure",
                  "false"
                ],
                [
                  "test_second_post_request",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_third_post_request",
                  "false"
                ],
                [
                  "test_first_get_request",
                  "false"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "false"
                ],
                [
                  "test_fourth_get_request",
                  "false"
                ],
                [
                  "test_request_structure",
                  "false"
                ],
                [
                  "test_second_post_request",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                "false"
              ],
              [
                "test_first_get_request",
                "false"
              ],
              [
                "test_check_header_is_present_in_line",
                "false"
              ],
              [
                "test_fourth_get_request",
                "false"
              ],
              [
                "test_request_structure",
                "false"
              ],
              [
                "test_second_post_request",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                "false"
              ],
              [
                "test_first_get_request",
                "false"
              ],
              [
                "test_check_header_is_present_in_line",
                "false"
              ],
              [
                "test_fourth_get_request",
                "false"
              ],
              [
                "test_request_structure",
                "false"
              ],
              [
                "test_second_post_request",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                []
              ],
              [
                "test_first_get_request",
                []
              ],
              [
                "test_check_header_is_present_in_line",
                []
              ],
              [
                "test_fourth_get_request",
                []
              ],
              [
                "test_request_structure",
                []
              ],
              [
                "test_second_post_request",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                "false"
              ],
              [
                "test_first_get_request",
                "false"
              ],
              [
                "test_check_header_is_present_in_line",
                "false"
              ],
              [
                "test_fourth_get_request",
                "false"
              ],
              [
                "test_request_structure",
                "false"
              ],
              [
                "test_second_post_request",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_third_post_request",
                "false"
              ],
              [
                "test_first_get_request",
                "false"
              ],
              [
                "test_check_header_is_present_in_line",
                "false"
              ],
              [
                "test_fourth_get_request",
                "false"
              ],
              [
                "test_request_structure",
                "true"
              ],
              [
                "test_second_post_request",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_third_post_request",
                  "0"
                ],
                [
                  "test_first_get_request",
                  "0"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "0"
                ],
                [
                  "test_fourth_get_request",
                  "0"
                ],
                [
                  "test_request_structure",
                  "0"
                ],
                [
                  "test_second_post_request",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_third_post_request",
                  "0"
                ],
                [
                  "test_first_get_request",
                  "0"
                ],
                [
                  "test_check_header_is_present_in_line",
                  "0"
                ],
                [
                  "test_fourth_get_request",
                  "0"
                ],
                [
                  "test_request_structure",
                  "0"
                ],
                [
                  "test_second_post_request",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                "false"
              ],
              [
                "test_first_get_request",
                "false"
              ],
              [
                "test_check_header_is_present_in_line",
                "false"
              ],
              [
                "test_fourth_get_request",
                "false"
              ],
              [
                "test_request_structure",
                "false"
              ],
              [
                "test_second_post_request",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                "false"
              ],
              [
                "test_first_get_request",
                "false"
              ],
              [
                "test_check_header_is_present_in_line",
                "false"
              ],
              [
                "test_fourth_get_request",
                "false"
              ],
              [
                "test_request_structure",
                "false"
              ],
              [
                "test_second_post_request",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_third_post_request",
                "0"
              ],
              [
                "test_first_get_request",
                "0"
              ],
              [
                "test_check_header_is_present_in_line",
                "1"
              ],
              [
                "test_fourth_get_request",
                "0"
              ],
              [
                "test_request_structure",
                "2"
              ],
              [
                "test_second_post_request",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                []
              ],
              [
                "test_first_get_request",
                []
              ],
              [
                "test_check_header_is_present_in_line",
                [
                  "is_present",
                  "line"
                ]
              ],
              [
                "test_fourth_get_request",
                []
              ],
              [
                "test_request_structure",
                []
              ],
              [
                "test_second_post_request",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                []
              ],
              [
                "test_first_get_request",
                []
              ],
              [
                "test_check_header_is_present_in_line",
                []
              ],
              [
                "test_fourth_get_request",
                []
              ],
              [
                "test_request_structure",
                []
              ],
              [
                "test_second_post_request",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4345792772626112,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_check_header_is_present_in_line",
                  "test_third_post_request",
                  0.19500358584270897
                ],
                [
                  "test_request_structure",
                  "test_first_get_request",
                  0.1988980632395388
                ],
                [
                  "test_first_get_request",
                  "test_third_post_request",
                  0.9095006394928621
                ],
                [
                  "test_second_post_request",
                  "test_fourth_get_request",
                  0.8965517241379312
                ],
                [
                  "test_request_structure",
                  "test_fourth_get_request",
                  0.19851666679418606
                ],
                [
                  "test_check_header_is_present_in_line",
                  "test_request_structure",
                  0.3954372976473722
                ],
                [
                  "test_first_get_request",
                  "test_fourth_get_request",
                  0.76007817551305
                ],
                [
                  "test_request_structure",
                  "test_third_post_request",
                  0.20173664619648224
                ],
                [
                  "test_check_header_is_present_in_line",
                  "test_second_post_request",
                  0.15264062771816592
                ],
                [
                  "test_check_header_is_present_in_line",
                  "test_fourth_get_request",
                  0.15264062771816592
                ],
                [
                  "test_first_get_request",
                  "test_second_post_request",
                  0.7140128315425621
                ],
                [
                  "test_third_post_request",
                  "test_fourth_get_request",
                  0.6607934284572005
                ],
                [
                  "test_check_header_is_present_in_line",
                  "test_first_get_request",
                  0.18352066281439178
                ],
                [
                  "test_second_post_request",
                  "test_third_post_request",
                  0.7008415150303642
                ],
                [
                  "test_request_structure",
                  "test_second_post_request",
                  0.19851666679418606
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_third_post_request",
                "false"
              ],
              [
                "test_first_get_request",
                "false"
              ],
              [
                "test_check_header_is_present_in_line",
                "false"
              ],
              [
                "test_fourth_get_request",
                "false"
              ],
              [
                "test_request_structure",
                "false"
              ],
              [
                "test_second_post_request",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  }
]