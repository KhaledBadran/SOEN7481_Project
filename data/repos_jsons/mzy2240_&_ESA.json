[
  {
    "name": "tests_\u0026_test_saw.py",
    "testCases": [
      {
        "name": "InitializationTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bad_path",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_error_during_dispatch",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_init_expected_behavior",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bad_path",
                  "[]"
                ],
                [
                  "test_error_during_dispatch",
                  "[]"
                ],
                [
                  "test_init_expected_behavior",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_error_during_dispatch",
                  "false"
                ],
                [
                  "test_init_expected_behavior",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_error_during_dispatch",
                  "false"
                ],
                [
                  "test_init_expected_behavior",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_error_during_dispatch",
                  "false"
                ],
                [
                  "test_init_expected_behavior",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bad_path",
                  "false"
                ],
                [
                  "test_error_during_dispatch",
                  "false"
                ],
                [
                  "test_init_expected_behavior",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_error_during_dispatch",
                "false"
              ],
              [
                "test_init_expected_behavior",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_error_during_dispatch",
                "false"
              ],
              [
                "test_init_expected_behavior",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                []
              ],
              [
                "test_error_during_dispatch",
                []
              ],
              [
                "test_init_expected_behavior",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_error_during_dispatch",
                "false"
              ],
              [
                "test_init_expected_behavior",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_error_during_dispatch",
                "false"
              ],
              [
                "test_init_expected_behavior",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bad_path",
                  "0"
                ],
                [
                  "test_error_during_dispatch",
                  "0"
                ],
                [
                  "test_init_expected_behavior",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bad_path",
                  "0"
                ],
                [
                  "test_error_during_dispatch",
                  "0"
                ],
                [
                  "test_init_expected_behavior",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_error_during_dispatch",
                "false"
              ],
              [
                "test_init_expected_behavior",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_error_during_dispatch",
                "false"
              ],
              [
                "test_init_expected_behavior",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "1"
              ],
              [
                "test_error_during_dispatch",
                "1"
              ],
              [
                "test_init_expected_behavior",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                []
              ],
              [
                "test_error_during_dispatch",
                []
              ],
              [
                "test_init_expected_behavior",
                [
                  "my_saw_14",
                  "df",
                  "cols"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                []
              ],
              [
                "test_error_during_dispatch",
                []
              ],
              [
                "test_init_expected_behavior",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3081983326738224,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bad_path",
                  "test_init_expected_behavior",
                  0.2793803487701973
                ],
                [
                  "test_bad_path",
                  "test_error_during_dispatch",
                  0.30442954117128224
                ],
                [
                  "test_init_expected_behavior",
                  "test_error_during_dispatch",
                  0.3407851080799876
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_path",
                "false"
              ],
              [
                "test_error_during_dispatch",
                "false"
              ],
              [
                "test_init_expected_behavior",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "ChangeAndConfirmParamsMultipleElementTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_success",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_failure_numeric",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_failure_string",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_with_string_value",
                  "[PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_success",
                  "[]"
                ],
                [
                  "test_failure_numeric",
                  "[]"
                ],
                [
                  "test_failure_string",
                  "[]"
                ],
                [
                  "test_with_string_value",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_failure_numeric",
                  "false"
                ],
                [
                  "test_failure_string",
                  "false"
                ],
                [
                  "test_with_string_value",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_failure_numeric",
                  "false"
                ],
                [
                  "test_failure_string",
                  "false"
                ],
                [
                  "test_with_string_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_failure_numeric",
                  "false"
                ],
                [
                  "test_failure_string",
                  "false"
                ],
                [
                  "test_with_string_value",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_success",
                  "false"
                ],
                [
                  "test_failure_numeric",
                  "false"
                ],
                [
                  "test_failure_string",
                  "false"
                ],
                [
                  "test_with_string_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_failure_numeric",
                "false"
              ],
              [
                "test_failure_string",
                "false"
              ],
              [
                "test_with_string_value",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_failure_numeric",
                "false"
              ],
              [
                "test_failure_string",
                "false"
              ],
              [
                "test_with_string_value",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                [
                  "self.branch_data",
                  "self.branch_data_copy"
                ]
              ],
              [
                "test_failure_numeric",
                [
                  "self.branch_data",
                  "self.branch_data_copy"
                ]
              ],
              [
                "test_failure_string",
                [
                  "self.branch_data",
                  "self.branch_data_copy"
                ]
              ],
              [
                "test_with_string_value",
                [
                  "self.branch_data"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_failure_numeric",
                "false"
              ],
              [
                "test_failure_string",
                "false"
              ],
              [
                "test_with_string_value",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_failure_numeric",
                "false"
              ],
              [
                "test_failure_string",
                "false"
              ],
              [
                "test_with_string_value",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_failure_numeric",
                  "0"
                ],
                [
                  "test_failure_string",
                  "0"
                ],
                [
                  "test_with_string_value",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_success",
                  "0"
                ],
                [
                  "test_failure_numeric",
                  "0"
                ],
                [
                  "test_failure_string",
                  "0"
                ],
                [
                  "test_with_string_value",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_failure_numeric",
                "false"
              ],
              [
                "test_failure_string",
                "false"
              ],
              [
                "test_with_string_value",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_failure_numeric",
                "false"
              ],
              [
                "test_failure_string",
                "false"
              ],
              [
                "test_with_string_value",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "1"
              ],
              [
                "test_failure_numeric",
                "1"
              ],
              [
                "test_failure_string",
                "1"
              ],
              [
                "test_with_string_value",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                [
                  "command_df"
                ]
              ],
              [
                "test_failure_numeric",
                [
                  "command_df"
                ]
              ],
              [
                "test_failure_string",
                [
                  "command_df"
                ]
              ],
              [
                "test_with_string_value",
                [
                  "to_13",
                  "from_6"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_success",
                []
              ],
              [
                "test_failure_numeric",
                []
              ],
              [
                "test_failure_string",
                []
              ],
              [
                "test_with_string_value",
                [
                  "self.branch_data_copy"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7639043500924633,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_with_string_value",
                  "test_failure_numeric",
                  0.6484618804340387
                ],
                [
                  "test_with_string_value",
                  "test_success",
                  0.69871747222567
                ],
                [
                  "test_failure_numeric",
                  "test_failure_string",
                  0.9423120786710473
                ],
                [
                  "test_success",
                  "test_failure_string",
                  0.8153352637555991
                ],
                [
                  "test_success",
                  "test_failure_numeric",
                  0.8333146871358169
                ],
                [
                  "test_with_string_value",
                  "test_failure_string",
                  0.6452847183326075
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_success",
                "false"
              ],
              [
                "test_failure_numeric",
                "false"
              ],
              [
                "test_failure_string",
                "false"
              ],
              [
                "test_with_string_value",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "ChangeParametersMultipleElementDFTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_comma_decimal_delimiter",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_success",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertDictEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_comma_decimal_delimiter",
                  "[]"
                ],
                [
                  "test_success",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_comma_decimal_delimiter",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_comma_decimal_delimiter",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_comma_decimal_delimiter",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_comma_decimal_delimiter",
                  "false"
                ],
                [
                  "test_success",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                []
              ],
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "false"
              ],
              [
                "test_success",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_comma_decimal_delimiter",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_comma_decimal_delimiter",
                  "0"
                ],
                [
                  "test_success",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "4"
              ],
              [
                "test_success",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                [
                  "command_df",
                  "cols"
                ]
              ],
              [
                "test_success",
                [
                  "command_df",
                  "cols"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                []
              ],
              [
                "test_success",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8206529371958308,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_success",
                  "test_with_comma_decimal_delimiter",
                  0.8206529371958308
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_with_comma_decimal_delimiter",
                "false"
              ],
              [
                "test_success",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CleanDFOrSeriesTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_works_df",
                  "[]"
                ],
                [
                  "test_bad_df_columns_2",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_series_bad_index",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_bad_type",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_bad_df_columns",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_works_df",
                  "[]"
                ],
                [
                  "test_bad_df_columns_2",
                  "[]"
                ],
                [
                  "test_series_bad_index",
                  "[]"
                ],
                [
                  "test_bad_type",
                  "[]"
                ],
                [
                  "test_bad_df_columns",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_works_df",
                  "false"
                ],
                [
                  "test_bad_df_columns_2",
                  "false"
                ],
                [
                  "test_series_bad_index",
                  "false"
                ],
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_bad_df_columns",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_works_df",
                  "false"
                ],
                [
                  "test_bad_df_columns_2",
                  "false"
                ],
                [
                  "test_series_bad_index",
                  "false"
                ],
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_bad_df_columns",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_works_df",
                  "false"
                ],
                [
                  "test_bad_df_columns_2",
                  "false"
                ],
                [
                  "test_series_bad_index",
                  "false"
                ],
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_bad_df_columns",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_works_df",
                  "false"
                ],
                [
                  "test_bad_df_columns_2",
                  "false"
                ],
                [
                  "test_series_bad_index",
                  "false"
                ],
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_bad_df_columns",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "false"
              ],
              [
                "test_bad_df_columns_2",
                "false"
              ],
              [
                "test_series_bad_index",
                "false"
              ],
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_bad_df_columns",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "false"
              ],
              [
                "test_bad_df_columns_2",
                "false"
              ],
              [
                "test_series_bad_index",
                "false"
              ],
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_bad_df_columns",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                []
              ],
              [
                "test_bad_df_columns_2",
                []
              ],
              [
                "test_series_bad_index",
                []
              ],
              [
                "test_bad_type",
                []
              ],
              [
                "test_bad_df_columns",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "false"
              ],
              [
                "test_bad_df_columns_2",
                "false"
              ],
              [
                "test_series_bad_index",
                "false"
              ],
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_bad_df_columns",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "false"
              ],
              [
                "test_bad_df_columns_2",
                "false"
              ],
              [
                "test_series_bad_index",
                "false"
              ],
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_bad_df_columns",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_works_df",
                  "0"
                ],
                [
                  "test_bad_df_columns_2",
                  "0"
                ],
                [
                  "test_series_bad_index",
                  "0"
                ],
                [
                  "test_bad_type",
                  "0"
                ],
                [
                  "test_bad_df_columns",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_works_df",
                  "0"
                ],
                [
                  "test_bad_df_columns_2",
                  "0"
                ],
                [
                  "test_series_bad_index",
                  "0"
                ],
                [
                  "test_bad_type",
                  "0"
                ],
                [
                  "test_bad_df_columns",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "false"
              ],
              [
                "test_bad_df_columns_2",
                "false"
              ],
              [
                "test_series_bad_index",
                "false"
              ],
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_bad_df_columns",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "false"
              ],
              [
                "test_bad_df_columns_2",
                "false"
              ],
              [
                "test_series_bad_index",
                "false"
              ],
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_bad_df_columns",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "1"
              ],
              [
                "test_bad_df_columns_2",
                "1"
              ],
              [
                "test_series_bad_index",
                "1"
              ],
              [
                "test_bad_type",
                "1"
              ],
              [
                "test_bad_df_columns",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                [
                  "df_in",
                  "df_expected",
                  "df_actual"
                ]
              ],
              [
                "test_bad_df_columns_2",
                [
                  "bad_df"
                ]
              ],
              [
                "test_series_bad_index",
                [
                  "bad_series"
                ]
              ],
              [
                "test_bad_type",
                []
              ],
              [
                "test_bad_df_columns",
                [
                  "bad_df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                []
              ],
              [
                "test_bad_df_columns_2",
                []
              ],
              [
                "test_series_bad_index",
                []
              ],
              [
                "test_bad_type",
                []
              ],
              [
                "test_bad_df_columns",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6040934119164783,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bad_type",
                  "test_series_bad_index",
                  0.5926085416187828
                ],
                [
                  "test_bad_df_columns",
                  "test_bad_type",
                  0.5400936311518659
                ],
                [
                  "test_bad_df_columns",
                  "test_series_bad_index",
                  0.7251827132782057
                ],
                [
                  "test_bad_df_columns_2",
                  "test_works_df",
                  0.586338982822887
                ],
                [
                  "test_bad_df_columns_2",
                  "test_series_bad_index",
                  0.7199574481013383
                ],
                [
                  "test_bad_df_columns",
                  "test_bad_df_columns_2",
                  0.8406728074767075
                ],
                [
                  "test_bad_df_columns_2",
                  "test_bad_type",
                  0.5254854954931826
                ],
                [
                  "test_bad_df_columns",
                  "test_works_df",
                  0.5696658939845624
                ],
                [
                  "test_works_df",
                  "test_series_bad_index",
                  0.5177668628560973
                ],
                [
                  "test_works_df",
                  "test_bad_type",
                  0.4231617423811535
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_works_df",
                "false"
              ],
              [
                "test_bad_df_columns_2",
                "false"
              ],
              [
                "test_series_bad_index",
                "false"
              ],
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_bad_df_columns",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "GetKeyFieldsForObjectType",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cached",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_shunts",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_nonexistent_object",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_gens",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_buses",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_branches",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cached",
                  "[]"
                ],
                [
                  "test_shunts",
                  "[]"
                ],
                [
                  "test_nonexistent_object",
                  "[]"
                ],
                [
                  "test_gens",
                  "[]"
                ],
                [
                  "test_buses",
                  "[]"
                ],
                [
                  "test_branches",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cached",
                  "false"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cached",
                  "false"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cached",
                  "true"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cached",
                  "false"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_buses",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_buses",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                []
              ],
              [
                "test_shunts",
                []
              ],
              [
                "test_nonexistent_object",
                []
              ],
              [
                "test_gens",
                []
              ],
              [
                "test_buses",
                []
              ],
              [
                "test_branches",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_buses",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_cached",
                "true"
              ],
              [
                "test_shunts",
                "true"
              ],
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_gens",
                "true"
              ],
              [
                "test_buses",
                "true"
              ],
              [
                "test_branches",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cached",
                  "0"
                ],
                [
                  "test_shunts",
                  "0"
                ],
                [
                  "test_nonexistent_object",
                  "0"
                ],
                [
                  "test_gens",
                  "0"
                ],
                [
                  "test_buses",
                  "0"
                ],
                [
                  "test_branches",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cached",
                  "0"
                ],
                [
                  "test_shunts",
                  "0"
                ],
                [
                  "test_nonexistent_object",
                  "0"
                ],
                [
                  "test_gens",
                  "0"
                ],
                [
                  "test_buses",
                  "0"
                ],
                [
                  "test_branches",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_buses",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_buses",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                "4"
              ],
              [
                "test_shunts",
                "3"
              ],
              [
                "test_nonexistent_object",
                "1"
              ],
              [
                "test_gens",
                "3"
              ],
              [
                "test_buses",
                "2"
              ],
              [
                "test_branches",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                [
                  "kf"
                ]
              ],
              [
                "test_shunts",
                [
                  "result"
                ]
              ],
              [
                "test_nonexistent_object",
                []
              ],
              [
                "test_gens",
                [
                  "result"
                ]
              ],
              [
                "test_buses",
                [
                  "result"
                ]
              ],
              [
                "test_branches",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                []
              ],
              [
                "test_shunts",
                []
              ],
              [
                "test_nonexistent_object",
                []
              ],
              [
                "test_gens",
                []
              ],
              [
                "test_buses",
                []
              ],
              [
                "test_branches",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6238365356885212,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_gens",
                  "test_nonexistent_object",
                  0.3912303982179758
                ],
                [
                  "test_shunts",
                  "test_cached",
                  0.5429626947793564
                ],
                [
                  "test_gens",
                  "test_branches",
                  0.8851409923120647
                ],
                [
                  "test_branches",
                  "test_nonexistent_object",
                  0.3543474132013336
                ],
                [
                  "test_buses",
                  "test_nonexistent_object",
                  0.41017423970657285
                ],
                [
                  "test_shunts",
                  "test_nonexistent_object",
                  0.40768304506925745
                ],
                [
                  "test_gens",
                  "test_cached",
                  0.5556025789373055
                ],
                [
                  "test_branches",
                  "test_cached",
                  0.5046383901369729
                ],
                [
                  "test_buses",
                  "test_shunts",
                  0.8539478633303569
                ],
                [
                  "test_buses",
                  "test_cached",
                  0.554327216847427
                ],
                [
                  "test_gens",
                  "test_buses",
                  0.8770446494182441
                ],
                [
                  "test_branches",
                  "test_buses",
                  0.8217536376104474
                ],
                [
                  "test_branches",
                  "test_shunts",
                  0.8787717438798407
                ],
                [
                  "test_gens",
                  "test_shunts",
                  0.9075950713612994
                ],
                [
                  "test_nonexistent_object",
                  "test_cached",
                  0.41232810051936136
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_cached",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_buses",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "GetKeyFieldListTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_gen",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_3wxformer",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertListEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_gen",
                  "[]"
                ],
                [
                  "test_3wxformer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_gen",
                  "false"
                ],
                [
                  "test_3wxformer",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_gen",
                  "false"
                ],
                [
                  "test_3wxformer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_gen",
                  "false"
                ],
                [
                  "test_3wxformer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_gen",
                  "false"
                ],
                [
                  "test_3wxformer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                "false"
              ],
              [
                "test_3wxformer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_gen",
                "false"
              ],
              [
                "test_3wxformer",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                []
              ],
              [
                "test_3wxformer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                "false"
              ],
              [
                "test_3wxformer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                "false"
              ],
              [
                "test_3wxformer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_gen",
                  "0"
                ],
                [
                  "test_3wxformer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_gen",
                  "0"
                ],
                [
                  "test_3wxformer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                "false"
              ],
              [
                "test_3wxformer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                "false"
              ],
              [
                "test_3wxformer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                "2"
              ],
              [
                "test_3wxformer",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                []
              ],
              [
                "test_3wxformer",
                [
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                []
              ],
              [
                "test_3wxformer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6458775625474433,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_gen",
                  "test_3wxformer",
                  0.6458775625474433
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_gen",
                "false"
              ],
              [
                "test_3wxformer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "GetPowerFlowResultsTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_with_additional_fields",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertSetEqual, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_shunt",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_bad_field",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_with_additional_fields",
                  "[]"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "[]"
                ],
                [
                  "test_shunt",
                  "[]"
                ],
                [
                  "test_bad_field",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_with_additional_fields",
                  "false"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "true"
                ],
                [
                  "test_shunt",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_with_additional_fields",
                  "false"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "false"
                ],
                [
                  "test_shunt",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_with_additional_fields",
                  "false"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "false"
                ],
                [
                  "test_shunt",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_with_additional_fields",
                  "false"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "false"
                ],
                [
                  "test_shunt",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                "false"
              ],
              [
                "test_all_valid_types_except_shunts",
                "false"
              ],
              [
                "test_shunt",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                "false"
              ],
              [
                "test_all_valid_types_except_shunts",
                "false"
              ],
              [
                "test_shunt",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                []
              ],
              [
                "test_all_valid_types_except_shunts",
                []
              ],
              [
                "test_shunt",
                []
              ],
              [
                "test_bad_field",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                "false"
              ],
              [
                "test_all_valid_types_except_shunts",
                "false"
              ],
              [
                "test_shunt",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                "false"
              ],
              [
                "test_all_valid_types_except_shunts",
                "false"
              ],
              [
                "test_shunt",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_with_additional_fields",
                  "0"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "0"
                ],
                [
                  "test_shunt",
                  "0"
                ],
                [
                  "test_bad_field",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_with_additional_fields",
                  "0"
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "0"
                ],
                [
                  "test_shunt",
                  "0"
                ],
                [
                  "test_bad_field",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                "false"
              ],
              [
                "test_all_valid_types_except_shunts",
                "false"
              ],
              [
                "test_shunt",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                "false"
              ],
              [
                "test_all_valid_types_except_shunts",
                "false"
              ],
              [
                "test_shunt",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                "2"
              ],
              [
                "test_all_valid_types_except_shunts",
                "3"
              ],
              [
                "test_shunt",
                "1"
              ],
              [
                "test_bad_field",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                [
                  "result",
                  "num_fields_after",
                  "num_fields_before"
                ]
              ],
              [
                "test_all_valid_types_except_shunts",
                [
                  "result"
                ]
              ],
              [
                "test_shunt",
                []
              ],
              [
                "test_bad_field",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_with_additional_fields",
                []
              ],
              [
                "test_all_valid_types_except_shunts",
                []
              ],
              [
                "test_shunt",
                []
              ],
              [
                "test_bad_field",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5443423580738895,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_shunt",
                  "test_with_additional_fields",
                  0.560473402386419
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "test_shunt",
                  0.6698898925484507
                ],
                [
                  "test_bad_field",
                  "test_shunt",
                  0.4490502093697089
                ],
                [
                  "test_bad_field",
                  "test_all_valid_types_except_shunts",
                  0.4873189983357244
                ],
                [
                  "test_bad_field",
                  "test_with_additional_fields",
                  0.43145262632189924
                ],
                [
                  "test_all_valid_types_except_shunts",
                  "test_with_additional_fields",
                  0.6678690194811353
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_with_additional_fields",
                "true"
              ],
              [
                "test_all_valid_types_except_shunts",
                "false"
              ],
              [
                "test_shunt",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "IdentifyNumericFieldsTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_correct",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_correct",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_correct",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_correct",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_correct",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_correct",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_correct",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_correct",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_correct",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                [
                  "actual",
                  "expected",
                  "fields"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "GetVersionAndBuildDateTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_correct",
                  "[PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_correct",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_correct",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_correct",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_correct",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_correct",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_correct",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_correct",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_correct",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "SetSimAutoPropertyTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_set_ui_visible_bad_value",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_re_raise_attr_error",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_set_ui_visible_true",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_set_current_dir_here",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "[PyCallExpression: self.assertLogs]"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_set_ui_visible_false",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertLogs]"
                ],
                [
                  "test_set_bad_property_name",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_set_current_dir_bad",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_set_ui_visible_bad_value",
                  "[]"
                ],
                [
                  "test_re_raise_attr_error",
                  "[]"
                ],
                [
                  "test_set_ui_visible_true",
                  "[]"
                ],
                [
                  "test_set_current_dir_here",
                  "[]"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "[]"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "[]"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "[]"
                ],
                [
                  "test_set_ui_visible_false",
                  "[]"
                ],
                [
                  "test_set_bad_property_name",
                  "[]"
                ],
                [
                  "test_set_current_dir_bad",
                  "[]"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_set_ui_visible_bad_value",
                  "false"
                ],
                [
                  "test_re_raise_attr_error",
                  "false"
                ],
                [
                  "test_set_ui_visible_true",
                  "false"
                ],
                [
                  "test_set_current_dir_here",
                  "false"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "false"
                ],
                [
                  "test_set_ui_visible_false",
                  "true"
                ],
                [
                  "test_set_bad_property_name",
                  "false"
                ],
                [
                  "test_set_current_dir_bad",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_set_ui_visible_bad_value",
                  "false"
                ],
                [
                  "test_re_raise_attr_error",
                  "false"
                ],
                [
                  "test_set_ui_visible_true",
                  "false"
                ],
                [
                  "test_set_current_dir_here",
                  "false"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "false"
                ],
                [
                  "test_set_ui_visible_false",
                  "false"
                ],
                [
                  "test_set_bad_property_name",
                  "false"
                ],
                [
                  "test_set_current_dir_bad",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_set_ui_visible_bad_value",
                  "false"
                ],
                [
                  "test_re_raise_attr_error",
                  "false"
                ],
                [
                  "test_set_ui_visible_true",
                  "false"
                ],
                [
                  "test_set_current_dir_here",
                  "false"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "false"
                ],
                [
                  "test_set_ui_visible_false",
                  "false"
                ],
                [
                  "test_set_bad_property_name",
                  "false"
                ],
                [
                  "test_set_current_dir_bad",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_set_ui_visible_bad_value",
                  "false"
                ],
                [
                  "test_re_raise_attr_error",
                  "false"
                ],
                [
                  "test_set_ui_visible_true",
                  "false"
                ],
                [
                  "test_set_current_dir_here",
                  "false"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "false"
                ],
                [
                  "test_set_ui_visible_false",
                  "false"
                ],
                [
                  "test_set_bad_property_name",
                  "false"
                ],
                [
                  "test_set_current_dir_bad",
                  "false"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "false"
              ],
              [
                "test_re_raise_attr_error",
                "false"
              ],
              [
                "test_set_ui_visible_true",
                "false"
              ],
              [
                "test_set_current_dir_here",
                "false"
              ],
              [
                "test_attr_error_for_ui_visible",
                "false"
              ],
              [
                "test_set_create_if_not_found_false",
                "false"
              ],
              [
                "test_set_create_if_not_found_true",
                "false"
              ],
              [
                "test_set_ui_visible_false",
                "false"
              ],
              [
                "test_set_bad_property_name",
                "false"
              ],
              [
                "test_set_current_dir_bad",
                "false"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "false"
              ],
              [
                "test_re_raise_attr_error",
                "false"
              ],
              [
                "test_set_ui_visible_true",
                "false"
              ],
              [
                "test_set_current_dir_here",
                "false"
              ],
              [
                "test_attr_error_for_ui_visible",
                "false"
              ],
              [
                "test_set_create_if_not_found_false",
                "false"
              ],
              [
                "test_set_create_if_not_found_true",
                "false"
              ],
              [
                "test_set_ui_visible_false",
                "false"
              ],
              [
                "test_set_bad_property_name",
                "false"
              ],
              [
                "test_set_current_dir_bad",
                "false"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                []
              ],
              [
                "test_re_raise_attr_error",
                []
              ],
              [
                "test_set_ui_visible_true",
                []
              ],
              [
                "test_set_current_dir_here",
                []
              ],
              [
                "test_attr_error_for_ui_visible",
                []
              ],
              [
                "test_set_create_if_not_found_false",
                []
              ],
              [
                "test_set_create_if_not_found_true",
                []
              ],
              [
                "test_set_ui_visible_false",
                []
              ],
              [
                "test_set_bad_property_name",
                []
              ],
              [
                "test_set_current_dir_bad",
                []
              ],
              [
                "test_set_create_if_not_found_bad_value",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "false"
              ],
              [
                "test_re_raise_attr_error",
                "false"
              ],
              [
                "test_set_ui_visible_true",
                "false"
              ],
              [
                "test_set_current_dir_here",
                "false"
              ],
              [
                "test_attr_error_for_ui_visible",
                "false"
              ],
              [
                "test_set_create_if_not_found_false",
                "false"
              ],
              [
                "test_set_create_if_not_found_true",
                "false"
              ],
              [
                "test_set_ui_visible_false",
                "false"
              ],
              [
                "test_set_bad_property_name",
                "false"
              ],
              [
                "test_set_current_dir_bad",
                "false"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "false"
              ],
              [
                "test_re_raise_attr_error",
                "false"
              ],
              [
                "test_set_ui_visible_true",
                "false"
              ],
              [
                "test_set_current_dir_here",
                "false"
              ],
              [
                "test_attr_error_for_ui_visible",
                "false"
              ],
              [
                "test_set_create_if_not_found_false",
                "false"
              ],
              [
                "test_set_create_if_not_found_true",
                "false"
              ],
              [
                "test_set_ui_visible_false",
                "false"
              ],
              [
                "test_set_bad_property_name",
                "false"
              ],
              [
                "test_set_current_dir_bad",
                "false"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_set_ui_visible_bad_value",
                  "0"
                ],
                [
                  "test_re_raise_attr_error",
                  "0"
                ],
                [
                  "test_set_ui_visible_true",
                  "0"
                ],
                [
                  "test_set_current_dir_here",
                  "0"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "0"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "0"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "0"
                ],
                [
                  "test_set_ui_visible_false",
                  "0"
                ],
                [
                  "test_set_bad_property_name",
                  "0"
                ],
                [
                  "test_set_current_dir_bad",
                  "0"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_set_ui_visible_bad_value",
                  "0"
                ],
                [
                  "test_re_raise_attr_error",
                  "0"
                ],
                [
                  "test_set_ui_visible_true",
                  "0"
                ],
                [
                  "test_set_current_dir_here",
                  "0"
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "0"
                ],
                [
                  "test_set_create_if_not_found_false",
                  "0"
                ],
                [
                  "test_set_create_if_not_found_true",
                  "0"
                ],
                [
                  "test_set_ui_visible_false",
                  "0"
                ],
                [
                  "test_set_bad_property_name",
                  "0"
                ],
                [
                  "test_set_current_dir_bad",
                  "0"
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "false"
              ],
              [
                "test_re_raise_attr_error",
                "false"
              ],
              [
                "test_set_ui_visible_true",
                "false"
              ],
              [
                "test_set_current_dir_here",
                "false"
              ],
              [
                "test_attr_error_for_ui_visible",
                "false"
              ],
              [
                "test_set_create_if_not_found_false",
                "false"
              ],
              [
                "test_set_create_if_not_found_true",
                "false"
              ],
              [
                "test_set_ui_visible_false",
                "false"
              ],
              [
                "test_set_bad_property_name",
                "false"
              ],
              [
                "test_set_current_dir_bad",
                "false"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "false"
              ],
              [
                "test_re_raise_attr_error",
                "false"
              ],
              [
                "test_set_ui_visible_true",
                "false"
              ],
              [
                "test_set_current_dir_here",
                "false"
              ],
              [
                "test_attr_error_for_ui_visible",
                "false"
              ],
              [
                "test_set_create_if_not_found_false",
                "false"
              ],
              [
                "test_set_create_if_not_found_true",
                "false"
              ],
              [
                "test_set_ui_visible_false",
                "false"
              ],
              [
                "test_set_bad_property_name",
                "false"
              ],
              [
                "test_set_current_dir_bad",
                "false"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "1"
              ],
              [
                "test_re_raise_attr_error",
                "1"
              ],
              [
                "test_set_ui_visible_true",
                "1"
              ],
              [
                "test_set_current_dir_here",
                "1"
              ],
              [
                "test_attr_error_for_ui_visible",
                "1"
              ],
              [
                "test_set_create_if_not_found_false",
                "1"
              ],
              [
                "test_set_create_if_not_found_true",
                "1"
              ],
              [
                "test_set_ui_visible_false",
                "2"
              ],
              [
                "test_set_bad_property_name",
                "1"
              ],
              [
                "test_set_current_dir_bad",
                "1"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                []
              ],
              [
                "test_re_raise_attr_error",
                []
              ],
              [
                "test_set_ui_visible_true",
                []
              ],
              [
                "test_set_current_dir_here",
                []
              ],
              [
                "test_attr_error_for_ui_visible",
                []
              ],
              [
                "test_set_create_if_not_found_false",
                []
              ],
              [
                "test_set_create_if_not_found_true",
                []
              ],
              [
                "test_set_ui_visible_false",
                []
              ],
              [
                "test_set_bad_property_name",
                [
                  "m"
                ]
              ],
              [
                "test_set_current_dir_bad",
                []
              ],
              [
                "test_set_create_if_not_found_bad_value",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                [
                  "self.saw"
                ]
              ],
              [
                "test_re_raise_attr_error",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_ui_visible_true",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_current_dir_here",
                [
                  "self.saw"
                ]
              ],
              [
                "test_attr_error_for_ui_visible",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_create_if_not_found_false",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_create_if_not_found_true",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_ui_visible_false",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_bad_property_name",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_current_dir_bad",
                [
                  "self.saw"
                ]
              ],
              [
                "test_set_create_if_not_found_bad_value",
                [
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3842679004250502,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_set_create_if_not_found_false",
                  "test_set_bad_property_name",
                  0.15877683720748895
                ],
                [
                  "test_set_ui_visible_true",
                  "test_set_current_dir_here",
                  0.33737388489831593
                ],
                [
                  "test_set_ui_visible_false",
                  "test_set_ui_visible_bad_value",
                  0.5520524474738834
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_set_create_if_not_found_bad_value",
                  0.7008766440504625
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_set_ui_visible_bad_value",
                  0.2253744679276044
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_set_current_dir_here",
                  0.25031308716087947
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_ui_visible_false",
                  0.30618621784789724
                ],
                [
                  "test_set_ui_visible_false",
                  "test_set_bad_property_name",
                  0.1620509308880411
                ],
                [
                  "test_set_ui_visible_bad_value",
                  "test_set_current_dir_bad",
                  0.5333333333333333
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_create_if_not_found_false",
                  0.9285714285714286
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_current_dir_bad",
                  0.19720265943665385
                ],
                [
                  "test_set_current_dir_here",
                  "test_attr_error_for_ui_visible",
                  0.2656937137768185
                ],
                [
                  "test_set_bad_property_name",
                  "test_re_raise_attr_error",
                  0.3716280625569003
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_re_raise_attr_error",
                  0.5077582684619295
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_attr_error_for_ui_visible",
                  0.2248177578111541
                ],
                [
                  "test_set_ui_visible_true",
                  "test_set_ui_visible_bad_value",
                  0.42769946138415077
                ],
                [
                  "test_set_ui_visible_false",
                  "test_set_current_dir_here",
                  0.40824829046386296
                ],
                [
                  "test_set_current_dir_bad",
                  "test_attr_error_for_ui_visible",
                  0.3385555833846721
                ],
                [
                  "test_set_ui_visible_true",
                  "test_set_bad_property_name",
                  0.17409326480181356
                ],
                [
                  "test_set_ui_visible_true",
                  "test_attr_error_for_ui_visible",
                  0.4861144222231712
                ],
                [
                  "test_set_current_dir_bad",
                  "test_set_bad_property_name",
                  0.5636018619766345
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_set_current_dir_here",
                  0.23809523809523808
                ],
                [
                  "test_set_ui_visible_false",
                  "test_re_raise_attr_error",
                  0.4208895735537933
                ],
                [
                  "test_set_ui_visible_true",
                  "test_re_raise_attr_error",
                  0.3478205637596122
                ],
                [
                  "test_set_current_dir_bad",
                  "test_re_raise_attr_error",
                  0.39562828403747224
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_current_dir_here",
                  0.23809523809523808
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_set_current_dir_bad",
                  0.19720265943665385
                ],
                [
                  "test_set_ui_visible_bad_value",
                  "test_set_current_dir_here",
                  0.2817180849095055
                ],
                [
                  "test_set_bad_property_name",
                  "test_attr_error_for_ui_visible",
                  0.24987096773334005
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_bad_property_name",
                  0.15877683720748895
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_set_ui_visible_false",
                  0.3065696697424829
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_ui_visible_bad_value",
                  0.2253744679276044
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_set_ui_visible_false",
                  0.36450740219987765
                ],
                [
                  "test_set_ui_visible_false",
                  "test_attr_error_for_ui_visible",
                  0.6132670635441545
                ],
                [
                  "test_set_ui_visible_true",
                  "test_set_ui_visible_false",
                  0.5976598528022172
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_create_if_not_found_bad_value",
                  0.7008766440504625
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_re_raise_attr_error",
                  0.37151880838356854
                ],
                [
                  "test_set_ui_visible_bad_value",
                  "test_set_bad_property_name",
                  0.5636018619766345
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_attr_error_for_ui_visible",
                  0.300814529815478
                ],
                [
                  "test_set_current_dir_here",
                  "test_re_raise_attr_error",
                  0.260063165868498
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_set_ui_visible_true",
                  0.32935148475979104
                ],
                [
                  "test_set_create_if_not_found_true",
                  "test_set_ui_visible_true",
                  0.2771285483093309
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_set_ui_visible_true",
                  0.25303041367373696
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_set_current_dir_bad",
                  0.4738791022072739
                ],
                [
                  "test_set_current_dir_here",
                  "test_set_current_dir_bad",
                  0.563436169819011
                ],
                [
                  "test_set_ui_visible_true",
                  "test_set_current_dir_bad",
                  0.2851329742561005
                ],
                [
                  "test_set_ui_visible_bad_value",
                  "test_attr_error_for_ui_visible",
                  0.5320159167473419
                ],
                [
                  "test_attr_error_for_ui_visible",
                  "test_re_raise_attr_error",
                  0.6378198309799198
                ],
                [
                  "test_set_current_dir_here",
                  "test_set_bad_property_name",
                  0.26462806201248157
                ],
                [
                  "test_set_ui_visible_bad_value",
                  "test_re_raise_attr_error",
                  0.4835456804902438
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_set_ui_visible_bad_value",
                  0.7108186533109109
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_re_raise_attr_error",
                  0.39009474880274697
                ],
                [
                  "test_set_ui_visible_false",
                  "test_set_current_dir_bad",
                  0.2760262237369417
                ],
                [
                  "test_set_create_if_not_found_false",
                  "test_attr_error_for_ui_visible",
                  0.20437977982832192
                ],
                [
                  "test_set_create_if_not_found_bad_value",
                  "test_set_bad_property_name",
                  0.5007733956671915
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_set_ui_visible_bad_value",
                "false"
              ],
              [
                "test_re_raise_attr_error",
                "false"
              ],
              [
                "test_set_ui_visible_true",
                "false"
              ],
              [
                "test_set_current_dir_here",
                "false"
              ],
              [
                "test_attr_error_for_ui_visible",
                "false"
              ],
              [
                "test_set_create_if_not_found_false",
                "false"
              ],
              [
                "test_set_create_if_not_found_true",
                "false"
              ],
              [
                "test_set_ui_visible_false",
                "false"
              ],
              [
                "test_set_bad_property_name",
                "false"
              ],
              [
                "test_set_current_dir_bad",
                "false"
              ],
              [
                "test_set_create_if_not_found_bad_value",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      },
      {
        "name": "GetYbusTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_ybus_default",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_get_ybus_full",
                  "[PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_ybus_default",
                  "[]"
                ],
                [
                  "test_get_ybus_full",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_ybus_default",
                  "false"
                ],
                [
                  "test_get_ybus_full",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_ybus_default",
                  "false"
                ],
                [
                  "test_get_ybus_full",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_ybus_default",
                  "false"
                ],
                [
                  "test_get_ybus_full",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_ybus_default",
                  "false"
                ],
                [
                  "test_get_ybus_full",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "false"
              ],
              [
                "test_get_ybus_full",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "false"
              ],
              [
                "test_get_ybus_full",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                []
              ],
              [
                "test_get_ybus_full",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "false"
              ],
              [
                "test_get_ybus_full",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "false"
              ],
              [
                "test_get_ybus_full",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_ybus_default",
                  "0"
                ],
                [
                  "test_get_ybus_full",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_ybus_default",
                  "0"
                ],
                [
                  "test_get_ybus_full",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "false"
              ],
              [
                "test_get_ybus_full",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "false"
              ],
              [
                "test_get_ybus_full",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "1"
              ],
              [
                "test_get_ybus_full",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                []
              ],
              [
                "test_get_ybus_full",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                [
                  "self.saw"
                ]
              ],
              [
                "test_get_ybus_full",
                [
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6666666666666667,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_ybus_default",
                  "test_get_ybus_full",
                  0.6666666666666667
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_ybus_default",
                "false"
              ],
              [
                "test_get_ybus_full",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "GetJacobianTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_jacobian_full",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_get_jacobian_default",
                  "[PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_jacobian_full",
                  "[]"
                ],
                [
                  "test_get_jacobian_default",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_jacobian_full",
                  "false"
                ],
                [
                  "test_get_jacobian_default",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_jacobian_full",
                  "false"
                ],
                [
                  "test_get_jacobian_default",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_jacobian_full",
                  "false"
                ],
                [
                  "test_get_jacobian_default",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_jacobian_full",
                  "false"
                ],
                [
                  "test_get_jacobian_default",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "false"
              ],
              [
                "test_get_jacobian_default",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "false"
              ],
              [
                "test_get_jacobian_default",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                []
              ],
              [
                "test_get_jacobian_default",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "false"
              ],
              [
                "test_get_jacobian_default",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "false"
              ],
              [
                "test_get_jacobian_default",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_jacobian_full",
                  "0"
                ],
                [
                  "test_get_jacobian_default",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_jacobian_full",
                  "0"
                ],
                [
                  "test_get_jacobian_default",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "false"
              ],
              [
                "test_get_jacobian_default",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "false"
              ],
              [
                "test_get_jacobian_default",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "1"
              ],
              [
                "test_get_jacobian_default",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                []
              ],
              [
                "test_get_jacobian_default",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                [
                  "self.saw"
                ]
              ],
              [
                "test_get_jacobian_default",
                [
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6666666666666667,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_jacobian_default",
                  "test_get_jacobian_full",
                  0.6666666666666667
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_jacobian_full",
                "false"
              ],
              [
                "test_get_jacobian_default",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "UpdateUITestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_update_default",
                  "[PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_update_default",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_update_default",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_update_default",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_update_default",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_update_default",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_update_default",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_update_default",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                [
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_update_default",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "ChangeParametersMultipleElementTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bad_object_type",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_mismatched_list_lengths",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.fail]"
                ],
                [
                  "test_missing_key_fields",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bad_object_type",
                  "[]"
                ],
                [
                  "test_mismatched_list_lengths",
                  "[]"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "[]"
                ],
                [
                  "test_missing_key_fields",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bad_object_type",
                  "false"
                ],
                [
                  "test_mismatched_list_lengths",
                  "false"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "true"
                ],
                [
                  "test_missing_key_fields",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bad_object_type",
                  "false"
                ],
                [
                  "test_mismatched_list_lengths",
                  "false"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_missing_key_fields",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bad_object_type",
                  "false"
                ],
                [
                  "test_mismatched_list_lengths",
                  "false"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_missing_key_fields",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bad_object_type",
                  "false"
                ],
                [
                  "test_mismatched_list_lengths",
                  "false"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_missing_key_fields",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                "false"
              ],
              [
                "test_mismatched_list_lengths",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_missing_key_fields",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_object_type",
                "false"
              ],
              [
                "test_mismatched_list_lengths",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points",
                "true"
              ],
              [
                "test_missing_key_fields",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_object_type",
                [
                  "self.params",
                  "self.gen_v_pu",
                  "self.key_field_df_gens"
                ]
              ],
              [
                "test_mismatched_list_lengths",
                [
                  "self.key_field_df_gens"
                ]
              ],
              [
                "test_change_gen_voltage_set_points",
                [
                  "self.key_field_df_gens"
                ]
              ],
              [
                "test_missing_key_fields",
                [
                  "self.params",
                  "self.key_field_df_gens"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                "false"
              ],
              [
                "test_mismatched_list_lengths",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_missing_key_fields",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                "false"
              ],
              [
                "test_mismatched_list_lengths",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_missing_key_fields",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bad_object_type",
                  "0"
                ],
                [
                  "test_mismatched_list_lengths",
                  "0"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_missing_key_fields",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bad_object_type",
                  "0"
                ],
                [
                  "test_mismatched_list_lengths",
                  "0"
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_missing_key_fields",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                "false"
              ],
              [
                "test_mismatched_list_lengths",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_missing_key_fields",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                "false"
              ],
              [
                "test_mismatched_list_lengths",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_missing_key_fields",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                "1"
              ],
              [
                "test_mismatched_list_lengths",
                "1"
              ],
              [
                "test_change_gen_voltage_set_points",
                "3"
              ],
              [
                "test_missing_key_fields",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                []
              ],
              [
                "test_mismatched_list_lengths",
                [
                  "value_list",
                  "m"
                ]
              ],
              [
                "test_change_gen_voltage_set_points",
                [
                  "actual",
                  "expected",
                  "value_list",
                  "gen_v"
                ]
              ],
              [
                "test_missing_key_fields",
                [
                  "df",
                  "value_list"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_object_type",
                []
              ],
              [
                "test_mismatched_list_lengths",
                [
                  "self.gen_v_pu",
                  "self.params"
                ]
              ],
              [
                "test_change_gen_voltage_set_points",
                [
                  "self.gen_v_pu",
                  "self.params"
                ]
              ],
              [
                "test_missing_key_fields",
                [
                  "self.gen_v_pu"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6166955509330241,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_change_gen_voltage_set_points",
                  "test_missing_key_fields",
                  0.7684555138814092
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "test_bad_object_type",
                  0.4712661216205205
                ],
                [
                  "test_missing_key_fields",
                  "test_bad_object_type",
                  0.5440961396086686
                ],
                [
                  "test_missing_key_fields",
                  "test_mismatched_list_lengths",
                  0.6820871587165035
                ],
                [
                  "test_change_gen_voltage_set_points",
                  "test_mismatched_list_lengths",
                  0.7252817732117548
                ],
                [
                  "test_bad_object_type",
                  "test_mismatched_list_lengths",
                  0.5089865985592876
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_object_type",
                "false"
              ],
              [
                "test_mismatched_list_lengths",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_missing_key_fields",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "ChangeParametersMultipleElementExpectedFailure",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_change_gen_voltage_set_points",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.fail]"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "[PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_change_gen_voltage_set_points",
                  "[]"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_change_gen_voltage_set_points",
                  "true"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "true"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                [
                  "self.key_field_df_gens"
                ]
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                [
                  "self.params",
                  "self.key_field_df_gens"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_change_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_change_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_change_gen_voltage_set_points_via_helper",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "2"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                [
                  "value_list",
                  "gen_v"
                ]
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                [
                  "result",
                  "command_df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                [
                  "self.gen_v_pu",
                  "self.params"
                ]
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                [
                  "self.gen_v_pu"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6024770070450901,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_change_gen_voltage_set_points",
                  "test_change_gen_voltage_set_points_via_helper",
                  0.6024770070450901
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_change_gen_voltage_set_points_via_helper",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "ChangeParametersMultipleElementFlatInputTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_change_gen_voltage_set_points",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.fail]"
                ],
                [
                  "test_nested_value_list",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_change_gen_voltage_set_points",
                  "[]"
                ],
                [
                  "test_nested_value_list",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_change_gen_voltage_set_points",
                  "true"
                ],
                [
                  "test_nested_value_list",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_change_gen_voltage_set_points",
                  "true"
                ],
                [
                  "test_nested_value_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_nested_value_list",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_change_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_nested_value_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_nested_value_list",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "true"
              ],
              [
                "test_nested_value_list",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                [
                  "self.key_field_df_gens"
                ]
              ],
              [
                "test_nested_value_list",
                [
                  "self.key_field_df_gens"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_nested_value_list",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_nested_value_list",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_change_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_nested_value_list",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_change_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_nested_value_list",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_nested_value_list",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_nested_value_list",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "3"
              ],
              [
                "test_nested_value_list",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                [
                  "actual",
                  "flattened_value_list",
                  "num_objects",
                  "expected",
                  "value_list",
                  "gen_v"
                ]
              ],
              [
                "test_nested_value_list",
                [
                  "num_objects",
                  "value_list"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                [
                  "self.gen_v_pu",
                  "self.params"
                ]
              ],
              [
                "test_nested_value_list",
                [
                  "self.gen_v_pu",
                  "self.params"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6902048147920115,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_change_gen_voltage_set_points",
                  "test_nested_value_list",
                  0.6902048147920115
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_change_gen_voltage_set_points",
                "false"
              ],
              [
                "test_nested_value_list",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "ChangeParametersTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_change_line_r",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_change_line_r",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_change_line_r",
                [
                  "self.line_r",
                  "self.line_key_fields"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_change_line_r",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_change_line_r",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                [
                  "value_series",
                  "new_line_data",
                  "values_list",
                  "new_r"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                [
                  "self.line_data",
                  "self.params"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "ChangeParametersSingleElementTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_change_line_r",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_change_line_r",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_change_line_r",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_change_line_r",
                [
                  "self.line_r",
                  "self.line_key_fields"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_change_line_r",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_change_line_r",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                [
                  "value_series",
                  "new_line_data",
                  "values_list",
                  "new_r"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                [
                  "self.line_data",
                  "self.params"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_change_line_r",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "GetFieldListTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_df_value_error_not_from_old_list",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_copy_false",
                  "[PyCallExpression: self.assertIs]"
                ],
                [
                  "test_copy_true",
                  "[PyCallExpression: self.assertIsNot]"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "[]"
                ],
                [
                  "test_switch_to_old_field_list",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_df_value_error_not_from_old_list",
                  "[]"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "[]"
                ],
                [
                  "test_copy_false",
                  "[]"
                ],
                [
                  "test_copy_true",
                  "[]"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "[]"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "[]"
                ],
                [
                  "test_switch_to_old_field_list",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_df_value_error_not_from_old_list",
                  "false"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "false"
                ],
                [
                  "test_copy_false",
                  "false"
                ],
                [
                  "test_copy_true",
                  "false"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "false"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "false"
                ],
                [
                  "test_switch_to_old_field_list",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_df_value_error_not_from_old_list",
                  "false"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "false"
                ],
                [
                  "test_copy_false",
                  "false"
                ],
                [
                  "test_copy_true",
                  "false"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "false"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "false"
                ],
                [
                  "test_switch_to_old_field_list",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_df_value_error_not_from_old_list",
                  "false"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "false"
                ],
                [
                  "test_copy_false",
                  "false"
                ],
                [
                  "test_copy_true",
                  "false"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "false"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "false"
                ],
                [
                  "test_switch_to_old_field_list",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_df_value_error_not_from_old_list",
                  "false"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "false"
                ],
                [
                  "test_copy_false",
                  "false"
                ],
                [
                  "test_copy_true",
                  "false"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "false"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "false"
                ],
                [
                  "test_switch_to_old_field_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "false"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "false"
              ],
              [
                "test_copy_false",
                "false"
              ],
              [
                "test_copy_true",
                "false"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "false"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "false"
              ],
              [
                "test_switch_to_old_field_list",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "false"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "true"
              ],
              [
                "test_copy_false",
                "false"
              ],
              [
                "test_copy_true",
                "false"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "false"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "false"
              ],
              [
                "test_switch_to_old_field_list",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                []
              ],
              [
                "test_simauto_called_for_new_object_type",
                []
              ],
              [
                "test_copy_false",
                []
              ],
              [
                "test_copy_true",
                []
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                []
              ],
              [
                "test_works_if_object_type_not_in_model",
                []
              ],
              [
                "test_switch_to_old_field_list",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "false"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "false"
              ],
              [
                "test_copy_false",
                "false"
              ],
              [
                "test_copy_true",
                "false"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "false"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "false"
              ],
              [
                "test_switch_to_old_field_list",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "false"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "true"
              ],
              [
                "test_copy_false",
                "false"
              ],
              [
                "test_copy_true",
                "false"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "true"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "false"
              ],
              [
                "test_switch_to_old_field_list",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_df_value_error_not_from_old_list",
                  "0"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "0"
                ],
                [
                  "test_copy_false",
                  "0"
                ],
                [
                  "test_copy_true",
                  "0"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "0"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "0"
                ],
                [
                  "test_switch_to_old_field_list",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_df_value_error_not_from_old_list",
                  "0"
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "0"
                ],
                [
                  "test_copy_false",
                  "0"
                ],
                [
                  "test_copy_true",
                  "0"
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "0"
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "0"
                ],
                [
                  "test_switch_to_old_field_list",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "false"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "false"
              ],
              [
                "test_copy_false",
                "false"
              ],
              [
                "test_copy_true",
                "false"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "false"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "false"
              ],
              [
                "test_switch_to_old_field_list",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "false"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "false"
              ],
              [
                "test_copy_false",
                "false"
              ],
              [
                "test_copy_true",
                "false"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "false"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "false"
              ],
              [
                "test_switch_to_old_field_list",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "1"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "4"
              ],
              [
                "test_copy_false",
                "1"
              ],
              [
                "test_copy_true",
                "1"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "1"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "0"
              ],
              [
                "test_switch_to_old_field_list",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                []
              ],
              [
                "test_simauto_called_for_new_object_type",
                [
                  "obj_type",
                  "field_list"
                ]
              ],
              [
                "test_copy_false",
                [
                  "field_list"
                ]
              ],
              [
                "test_copy_true",
                [
                  "field_list"
                ]
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                [
                  "field_list"
                ]
              ],
              [
                "test_works_if_object_type_not_in_model",
                [
                  "field_list"
                ]
              ],
              [
                "test_switch_to_old_field_list",
                [
                  "result",
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                []
              ],
              [
                "test_simauto_called_for_new_object_type",
                []
              ],
              [
                "test_copy_false",
                []
              ],
              [
                "test_copy_true",
                []
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                []
              ],
              [
                "test_works_if_object_type_not_in_model",
                []
              ],
              [
                "test_switch_to_old_field_list",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5813803922462986,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_copy_true",
                  "test_copy_false",
                  0.8011103405759894
                ],
                [
                  "test_switch_to_old_field_list",
                  "test_df_value_error_not_from_old_list",
                  0.8067840785302384
                ],
                [
                  "test_copy_false",
                  "test_works_if_object_type_not_in_model",
                  0.5100786019626585
                ],
                [
                  "test_copy_true",
                  "test_df_value_error_not_from_old_list",
                  0.42217585482977393
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "test_copy_true",
                  0.455111100123066
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "test_simauto_called_for_new_object_type",
                  0.7840436371540989
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "test_copy_false",
                  0.5160648769277401
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "test_df_value_error_not_from_old_list",
                  0.6438630753951795
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "test_works_if_object_type_not_in_model",
                  0.62463225764131
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "test_df_value_error_not_from_old_list",
                  0.45120924085988023
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "test_works_if_object_type_not_in_model",
                  0.653537034114178
                ],
                [
                  "test_copy_false",
                  "test_df_value_error_not_from_old_list",
                  0.40051118231720484
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "test_copy_true",
                  0.5160837262027953
                ],
                [
                  "test_copy_true",
                  "test_works_if_object_type_not_in_model",
                  0.5376700559721446
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "test_copy_false",
                  0.4225699952006553
                ],
                [
                  "test_works_if_object_type_not_in_model",
                  "test_switch_to_old_field_list",
                  0.5622850726023692
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "test_df_value_error_not_from_old_list",
                  0.6782401879167137
                ],
                [
                  "test_does_not_call_simauto_if_not_necessary",
                  "test_switch_to_old_field_list",
                  0.7408747752387427
                ],
                [
                  "test_simauto_called_for_new_object_type",
                  "test_switch_to_old_field_list",
                  0.7750961848137243
                ],
                [
                  "test_copy_true",
                  "test_switch_to_old_field_list",
                  0.4690344191396802
                ],
                [
                  "test_copy_false",
                  "test_switch_to_old_field_list",
                  0.43801253965412884
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_df_value_error_not_from_old_list",
                "false"
              ],
              [
                "test_simauto_called_for_new_object_type",
                "false"
              ],
              [
                "test_copy_false",
                "false"
              ],
              [
                "test_copy_true",
                "false"
              ],
              [
                "test_does_not_call_simauto_if_not_necessary",
                "false"
              ],
              [
                "test_works_if_object_type_not_in_model",
                "false"
              ],
              [
                "test_switch_to_old_field_list",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      },
      {
        "name": "GetParametersMultipleElementTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_gen_voltage_set_points",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertSetEqual]"
                ],
                [
                  "test_shunts_returns_none",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_bad_object_type",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_gen_voltage_set_points",
                  "[]"
                ],
                [
                  "test_shunts_returns_none",
                  "[]"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "[]"
                ],
                [
                  "test_bad_object_type",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_shunts_returns_none",
                  "false"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "false"
                ],
                [
                  "test_bad_object_type",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_shunts_returns_none",
                  "false"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "false"
                ],
                [
                  "test_bad_object_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_shunts_returns_none",
                  "false"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "false"
                ],
                [
                  "test_bad_object_type",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ],
                [
                  "test_shunts_returns_none",
                  "false"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "false"
                ],
                [
                  "test_bad_object_type",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "false"
              ],
              [
                "test_shunts_returns_none",
                "false"
              ],
              [
                "test_get_nonexistent_parameter",
                "false"
              ],
              [
                "test_bad_object_type",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "false"
              ],
              [
                "test_shunts_returns_none",
                "false"
              ],
              [
                "test_get_nonexistent_parameter",
                "false"
              ],
              [
                "test_bad_object_type",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                []
              ],
              [
                "test_shunts_returns_none",
                []
              ],
              [
                "test_get_nonexistent_parameter",
                []
              ],
              [
                "test_bad_object_type",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "false"
              ],
              [
                "test_shunts_returns_none",
                "false"
              ],
              [
                "test_get_nonexistent_parameter",
                "false"
              ],
              [
                "test_bad_object_type",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "false"
              ],
              [
                "test_shunts_returns_none",
                "false"
              ],
              [
                "test_get_nonexistent_parameter",
                "false"
              ],
              [
                "test_bad_object_type",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_shunts_returns_none",
                  "0"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "0"
                ],
                [
                  "test_bad_object_type",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_gen_voltage_set_points",
                  "0"
                ],
                [
                  "test_shunts_returns_none",
                  "0"
                ],
                [
                  "test_get_nonexistent_parameter",
                  "0"
                ],
                [
                  "test_bad_object_type",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "false"
              ],
              [
                "test_shunts_returns_none",
                "false"
              ],
              [
                "test_get_nonexistent_parameter",
                "false"
              ],
              [
                "test_bad_object_type",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "false"
              ],
              [
                "test_shunts_returns_none",
                "false"
              ],
              [
                "test_get_nonexistent_parameter",
                "false"
              ],
              [
                "test_bad_object_type",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "2"
              ],
              [
                "test_shunts_returns_none",
                "1"
              ],
              [
                "test_get_nonexistent_parameter",
                "1"
              ],
              [
                "test_bad_object_type",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                [
                  "params",
                  "results"
                ]
              ],
              [
                "test_shunts_returns_none",
                [
                  "results"
                ]
              ],
              [
                "test_get_nonexistent_parameter",
                []
              ],
              [
                "test_bad_object_type",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                []
              ],
              [
                "test_shunts_returns_none",
                []
              ],
              [
                "test_get_nonexistent_parameter",
                []
              ],
              [
                "test_bad_object_type",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.535065250824819,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_nonexistent_parameter",
                  "test_bad_object_type",
                  0.629929832761474
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "test_get_nonexistent_parameter",
                  0.4748324320318872
                ],
                [
                  "test_shunts_returns_none",
                  "test_get_nonexistent_parameter",
                  0.5562939111665909
                ],
                [
                  "test_shunts_returns_none",
                  "test_bad_object_type",
                  0.574285574926471
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "test_bad_object_type",
                  0.43948021245882857
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "test_shunts_returns_none",
                  0.5355695416036627
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_gen_voltage_set_points",
                "false"
              ],
              [
                "test_shunts_returns_none",
                "false"
              ],
              [
                "test_get_nonexistent_parameter",
                "false"
              ],
              [
                "test_bad_object_type",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "GetParametersMultipleElementFlatOutput",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_shunts",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_shunts",
                  "[]"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "false"
              ],
              [
                "test_get_gen_voltage_set_points",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "false"
              ],
              [
                "test_get_gen_voltage_set_points",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                []
              ],
              [
                "test_get_gen_voltage_set_points",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "false"
              ],
              [
                "test_get_gen_voltage_set_points",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "false"
              ],
              [
                "test_get_gen_voltage_set_points",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_shunts",
                  "0"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_shunts",
                  "0"
                ],
                [
                  "test_get_gen_voltage_set_points",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "false"
              ],
              [
                "test_get_gen_voltage_set_points",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "false"
              ],
              [
                "test_get_gen_voltage_set_points",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "1"
              ],
              [
                "test_get_gen_voltage_set_points",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                [
                  "kf"
                ]
              ],
              [
                "test_get_gen_voltage_set_points",
                [
                  "params",
                  "results"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                []
              ],
              [
                "test_get_gen_voltage_set_points",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5312161852311214,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_gen_voltage_set_points",
                  "test_shunts",
                  0.5312161852311214
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_shunts",
                "false"
              ],
              [
                "test_get_gen_voltage_set_points",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "GetParametersSingleElementTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bad_field",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_expected_results",
                  "[]"
                ],
                [
                  "test_nonexistent_object",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bad_field",
                  "[]"
                ],
                [
                  "test_expected_results",
                  "[]"
                ],
                [
                  "test_nonexistent_object",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ],
                [
                  "test_nonexistent_object",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                []
              ],
              [
                "test_expected_results",
                []
              ],
              [
                "test_nonexistent_object",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bad_field",
                  "0"
                ],
                [
                  "test_expected_results",
                  "0"
                ],
                [
                  "test_nonexistent_object",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bad_field",
                  "0"
                ],
                [
                  "test_expected_results",
                  "0"
                ],
                [
                  "test_nonexistent_object",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "1"
              ],
              [
                "test_expected_results",
                "1"
              ],
              [
                "test_nonexistent_object",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                []
              ],
              [
                "test_expected_results",
                [
                  "actual",
                  "expected",
                  "fields"
                ]
              ],
              [
                "test_nonexistent_object",
                [
                  "actual"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                []
              ],
              [
                "test_expected_results",
                []
              ],
              [
                "test_nonexistent_object",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7196091920090217,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_expected_results",
                  "test_bad_field",
                  0.6480740698407861
                ],
                [
                  "test_nonexistent_object",
                  "test_bad_field",
                  0.8072299001720907
                ],
                [
                  "test_expected_results",
                  "test_nonexistent_object",
                  0.7035236060141885
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ],
              [
                "test_nonexistent_object",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "GetParametersTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_nonexistent_object",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_bad_field",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_expected_results",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_nonexistent_object",
                  "[]"
                ],
                [
                  "test_bad_field",
                  "[]"
                ],
                [
                  "test_expected_results",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_nonexistent_object",
                  "false"
                ],
                [
                  "test_bad_field",
                  "false"
                ],
                [
                  "test_expected_results",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                []
              ],
              [
                "test_bad_field",
                []
              ],
              [
                "test_expected_results",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_nonexistent_object",
                  "0"
                ],
                [
                  "test_bad_field",
                  "0"
                ],
                [
                  "test_expected_results",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_nonexistent_object",
                  "0"
                ],
                [
                  "test_bad_field",
                  "0"
                ],
                [
                  "test_expected_results",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "1"
              ],
              [
                "test_bad_field",
                "1"
              ],
              [
                "test_expected_results",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                [
                  "actual"
                ]
              ],
              [
                "test_bad_field",
                []
              ],
              [
                "test_expected_results",
                [
                  "actual",
                  "expected",
                  "fields"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                []
              ],
              [
                "test_bad_field",
                []
              ],
              [
                "test_expected_results",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7159357599201835,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_expected_results",
                  "test_bad_field",
                  0.6429049513681863
                ],
                [
                  "test_expected_results",
                  "test_nonexistent_object",
                  0.7000685517353671
                ],
                [
                  "test_nonexistent_object",
                  "test_bad_field",
                  0.8048337766569971
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_object",
                "false"
              ],
              [
                "test_bad_field",
                "false"
              ],
              [
                "test_expected_results",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "GetSpecificFieldListTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_some_variables",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_all",
                  "[]"
                ],
                [
                  "test_all_location",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_some_variables",
                  "[]"
                ],
                [
                  "test_all",
                  "[]"
                ],
                [
                  "test_all_location",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_some_variables",
                  "false"
                ],
                [
                  "test_all",
                  "false"
                ],
                [
                  "test_all_location",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_some_variables",
                  "false"
                ],
                [
                  "test_all",
                  "false"
                ],
                [
                  "test_all_location",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_some_variables",
                  "false"
                ],
                [
                  "test_all",
                  "false"
                ],
                [
                  "test_all_location",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_some_variables",
                  "false"
                ],
                [
                  "test_all",
                  "false"
                ],
                [
                  "test_all_location",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                "false"
              ],
              [
                "test_all",
                "false"
              ],
              [
                "test_all_location",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                "false"
              ],
              [
                "test_all",
                "false"
              ],
              [
                "test_all_location",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                []
              ],
              [
                "test_all",
                []
              ],
              [
                "test_all_location",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                "false"
              ],
              [
                "test_all",
                "false"
              ],
              [
                "test_all_location",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_some_variables",
                "false"
              ],
              [
                "test_all",
                "false"
              ],
              [
                "test_all_location",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_some_variables",
                  "0"
                ],
                [
                  "test_all",
                  "0"
                ],
                [
                  "test_all_location",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_some_variables",
                  "0"
                ],
                [
                  "test_all",
                  "0"
                ],
                [
                  "test_all_location",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                "false"
              ],
              [
                "test_all",
                "false"
              ],
              [
                "test_all_location",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                "false"
              ],
              [
                "test_all",
                "false"
              ],
              [
                "test_all_location",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_some_variables",
                "1"
              ],
              [
                "test_all",
                "0"
              ],
              [
                "test_all_location",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                [
                  "v",
                  "out"
                ]
              ],
              [
                "test_all",
                [
                  "out"
                ]
              ],
              [
                "test_all_location",
                [
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                []
              ],
              [
                "test_all",
                []
              ],
              [
                "test_all_location",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6258499918624171,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_all",
                  "test_all_location",
                  0.6829776177136289
                ],
                [
                  "test_all",
                  "test_some_variables",
                  0.6014013438718829
                ],
                [
                  "test_all_location",
                  "test_some_variables",
                  0.5931710140017394
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_some_variables",
                "false"
              ],
              [
                "test_all",
                "false"
              ],
              [
                "test_all_location",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "GetSpecificFieldMaxNumTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_load_angle",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_bad_input",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_load_angle",
                  "[]"
                ],
                [
                  "test_bad_input",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_load_angle",
                  "false"
                ],
                [
                  "test_bad_input",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_load_angle",
                  "false"
                ],
                [
                  "test_bad_input",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_load_angle",
                  "false"
                ],
                [
                  "test_bad_input",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_load_angle",
                  "false"
                ],
                [
                  "test_bad_input",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                "false"
              ],
              [
                "test_bad_input",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                "false"
              ],
              [
                "test_bad_input",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                []
              ],
              [
                "test_bad_input",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                "false"
              ],
              [
                "test_bad_input",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_load_angle",
                "true"
              ],
              [
                "test_bad_input",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_load_angle",
                  "0"
                ],
                [
                  "test_bad_input",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_load_angle",
                  "0"
                ],
                [
                  "test_bad_input",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                "false"
              ],
              [
                "test_bad_input",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                "false"
              ],
              [
                "test_bad_input",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                "1"
              ],
              [
                "test_bad_input",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                []
              ],
              [
                "test_bad_input",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                []
              ],
              [
                "test_bad_input",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.33523564017462143,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_load_angle",
                  "test_bad_input",
                  0.33523564017462143
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_load_angle",
                "false"
              ],
              [
                "test_bad_input",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "ListOfDevicesTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_buses",
                  "[]"
                ],
                [
                  "test_shunts",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_gens",
                  "[]"
                ],
                [
                  "test_branches",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_buses",
                  "[]"
                ],
                [
                  "test_shunts",
                  "[]"
                ],
                [
                  "test_gens",
                  "[]"
                ],
                [
                  "test_branches",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_buses",
                  "false"
                ],
                [
                  "test_shunts",
                  "false"
                ],
                [
                  "test_gens",
                  "false"
                ],
                [
                  "test_branches",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                []
              ],
              [
                "test_shunts",
                []
              ],
              [
                "test_gens",
                []
              ],
              [
                "test_branches",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_buses",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_branches",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_buses",
                  "0"
                ],
                [
                  "test_shunts",
                  "0"
                ],
                [
                  "test_gens",
                  "0"
                ],
                [
                  "test_branches",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_buses",
                  "0"
                ],
                [
                  "test_shunts",
                  "0"
                ],
                [
                  "test_gens",
                  "0"
                ],
                [
                  "test_branches",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "1"
              ],
              [
                "test_shunts",
                "1"
              ],
              [
                "test_gens",
                "1"
              ],
              [
                "test_branches",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                [
                  "result",
                  "expected"
                ]
              ],
              [
                "test_shunts",
                [
                  "result"
                ]
              ],
              [
                "test_gens",
                [
                  "result",
                  "expected"
                ]
              ],
              [
                "test_branches",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                []
              ],
              [
                "test_shunts",
                []
              ],
              [
                "test_gens",
                []
              ],
              [
                "test_branches",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6013321103743993,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_gens",
                  "test_shunts",
                  0.5299140892015061
                ],
                [
                  "test_shunts",
                  "test_buses",
                  0.5621809954278311
                ],
                [
                  "test_shunts",
                  "test_branches",
                  0.5279240273210397
                ],
                [
                  "test_gens",
                  "test_buses",
                  0.762953047626794
                ],
                [
                  "test_gens",
                  "test_branches",
                  0.6310341329369005
                ],
                [
                  "test_branches",
                  "test_buses",
                  0.5939863697323242
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ],
              [
                "test_shunts",
                "false"
              ],
              [
                "test_gens",
                "false"
              ],
              [
                "test_branches",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "ListOfDevicesAsVariantStrings",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_buses",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_buses",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_buses",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_buses",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_buses",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_buses",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_buses",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_buses",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_buses",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                [
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "GetCaseHeaderTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_case_header",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_case_header",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_case_header",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_case_header",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_case_header",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_case_header",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_case_header",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_case_header",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                [
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_case_header",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "ListOfDevicesFlatOutputTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_buses",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_buses",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_buses",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_buses",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_buses",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_buses",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_buses",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_buses",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_buses",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                [
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_buses",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "LoadStateErrorTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_load_state_errors",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_load_state_errors",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_load_state_errors",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_load_state_errors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_load_state_errors",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_load_state_errors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_load_state_errors",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_load_state_errors",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                [
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_load_state_errors",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "LoadStateSaveStateTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_save_change_load",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_save_change_load",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_save_change_load",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_save_change_load",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_save_change_load",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_save_change_load",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_save_change_load",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_save_change_load",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                [
                  "branch_key_fields",
                  "branch_data_copy",
                  "branch_data_new",
                  "branch_data"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_save_change_load",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "ProcessAuxFileTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_process_aux_ltc_filter",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_process_aux_ltc_filter",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_process_aux_ltc_filter",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_process_aux_ltc_filter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_process_aux_ltc_filter",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_process_aux_ltc_filter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_process_aux_ltc_filter",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_process_aux_ltc_filter",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                [
                  "bus",
                  "kf",
                  "area_bus",
                  "bus_expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                [
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_process_aux_ltc_filter",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "RunScriptCommandTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_calls_call_simauto",
                  "[]"
                ],
                [
                  "test_exception_for_bad_statement",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_calls_call_simauto",
                  "[]"
                ],
                [
                  "test_exception_for_bad_statement",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_calls_call_simauto",
                  "false"
                ],
                [
                  "test_exception_for_bad_statement",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_calls_call_simauto",
                  "false"
                ],
                [
                  "test_exception_for_bad_statement",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_calls_call_simauto",
                  "false"
                ],
                [
                  "test_exception_for_bad_statement",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_calls_call_simauto",
                  "false"
                ],
                [
                  "test_exception_for_bad_statement",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "false"
              ],
              [
                "test_exception_for_bad_statement",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "false"
              ],
              [
                "test_exception_for_bad_statement",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                []
              ],
              [
                "test_exception_for_bad_statement",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "false"
              ],
              [
                "test_exception_for_bad_statement",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "false"
              ],
              [
                "test_exception_for_bad_statement",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_calls_call_simauto",
                  "0"
                ],
                [
                  "test_exception_for_bad_statement",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_calls_call_simauto",
                  "0"
                ],
                [
                  "test_exception_for_bad_statement",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "false"
              ],
              [
                "test_exception_for_bad_statement",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "false"
              ],
              [
                "test_exception_for_bad_statement",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "1"
              ],
              [
                "test_exception_for_bad_statement",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                []
              ],
              [
                "test_exception_for_bad_statement",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                []
              ],
              [
                "test_exception_for_bad_statement",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3294039229342061,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_calls_call_simauto",
                  "test_exception_for_bad_statement",
                  0.3294039229342061
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_calls_call_simauto",
                "false"
              ],
              [
                "test_exception_for_bad_statement",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "OpenCaseTypeTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_expected_behavior",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_options_single",
                  "[]"
                ],
                [
                  "test_options_multiple",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_expected_behavior",
                  "[]"
                ],
                [
                  "test_options_single",
                  "[]"
                ],
                [
                  "test_options_multiple",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_expected_behavior",
                  "false"
                ],
                [
                  "test_options_single",
                  "false"
                ],
                [
                  "test_options_multiple",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_expected_behavior",
                  "false"
                ],
                [
                  "test_options_single",
                  "false"
                ],
                [
                  "test_options_multiple",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_expected_behavior",
                  "false"
                ],
                [
                  "test_options_single",
                  "false"
                ],
                [
                  "test_options_multiple",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_expected_behavior",
                  "false"
                ],
                [
                  "test_options_single",
                  "false"
                ],
                [
                  "test_options_multiple",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                "false"
              ],
              [
                "test_options_single",
                "false"
              ],
              [
                "test_options_multiple",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                "false"
              ],
              [
                "test_options_single",
                "false"
              ],
              [
                "test_options_multiple",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                []
              ],
              [
                "test_options_single",
                []
              ],
              [
                "test_options_multiple",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                "false"
              ],
              [
                "test_options_single",
                "false"
              ],
              [
                "test_options_multiple",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                "false"
              ],
              [
                "test_options_single",
                "false"
              ],
              [
                "test_options_multiple",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_expected_behavior",
                  "0"
                ],
                [
                  "test_options_single",
                  "0"
                ],
                [
                  "test_options_multiple",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_expected_behavior",
                  "0"
                ],
                [
                  "test_options_single",
                  "0"
                ],
                [
                  "test_options_multiple",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                "false"
              ],
              [
                "test_options_single",
                "false"
              ],
              [
                "test_options_multiple",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                "false"
              ],
              [
                "test_options_single",
                "false"
              ],
              [
                "test_options_multiple",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_expected_behavior",
                "1"
              ],
              [
                "test_options_single",
                "0"
              ],
              [
                "test_options_multiple",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                []
              ],
              [
                "test_options_single",
                []
              ],
              [
                "test_options_multiple",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                [
                  "self.saw"
                ]
              ],
              [
                "test_options_single",
                [
                  "self.saw"
                ]
              ],
              [
                "test_options_multiple",
                [
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.677295188152483,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_expected_behavior",
                  "test_options_single",
                  0.5817744738827396
                ],
                [
                  "test_options_single",
                  "test_options_multiple",
                  0.8894991799933214
                ],
                [
                  "test_expected_behavior",
                  "test_options_multiple",
                  0.560611910581388
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_expected_behavior",
                "false"
              ],
              [
                "test_options_single",
                "false"
              ],
              [
                "test_options_multiple",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "OpenCaseTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_failure_if_pwb_file_path_none",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                [
                  "m"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_failure_if_pwb_file_path_none",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TSGetContingencyResultsTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_nonexistent_ctg",
                  "[PyCallExpression: self.assertIsNone, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_solve_and_run",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_existing_ctg",
                  "[]"
                ],
                [
                  "test_individual_object_field_pair",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreaterEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_nonexistent_ctg",
                  "[]"
                ],
                [
                  "test_solve_and_run",
                  "[]"
                ],
                [
                  "test_existing_ctg",
                  "[]"
                ],
                [
                  "test_individual_object_field_pair",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_nonexistent_ctg",
                  "false"
                ],
                [
                  "test_solve_and_run",
                  "true"
                ],
                [
                  "test_existing_ctg",
                  "false"
                ],
                [
                  "test_individual_object_field_pair",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_nonexistent_ctg",
                  "false"
                ],
                [
                  "test_solve_and_run",
                  "false"
                ],
                [
                  "test_existing_ctg",
                  "false"
                ],
                [
                  "test_individual_object_field_pair",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_nonexistent_ctg",
                  "false"
                ],
                [
                  "test_solve_and_run",
                  "false"
                ],
                [
                  "test_existing_ctg",
                  "false"
                ],
                [
                  "test_individual_object_field_pair",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_nonexistent_ctg",
                  "false"
                ],
                [
                  "test_solve_and_run",
                  "false"
                ],
                [
                  "test_existing_ctg",
                  "false"
                ],
                [
                  "test_individual_object_field_pair",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_ctg",
                "false"
              ],
              [
                "test_solve_and_run",
                "false"
              ],
              [
                "test_existing_ctg",
                "false"
              ],
              [
                "test_individual_object_field_pair",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_ctg",
                "false"
              ],
              [
                "test_solve_and_run",
                "false"
              ],
              [
                "test_existing_ctg",
                "false"
              ],
              [
                "test_individual_object_field_pair",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_nonexistent_ctg",
                [
                  "self.ctg_name"
                ]
              ],
              [
                "test_solve_and_run",
                []
              ],
              [
                "test_existing_ctg",
                []
              ],
              [
                "test_individual_object_field_pair",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": true,
            "detail": [
              [
                "test_nonexistent_ctg",
                "false"
              ],
              [
                "test_solve_and_run",
                "false"
              ],
              [
                "test_existing_ctg",
                "true"
              ],
              [
                "test_individual_object_field_pair",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_nonexistent_ctg",
                "false"
              ],
              [
                "test_solve_and_run",
                "false"
              ],
              [
                "test_existing_ctg",
                "false"
              ],
              [
                "test_individual_object_field_pair",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_nonexistent_ctg",
                  "0"
                ],
                [
                  "test_solve_and_run",
                  "0"
                ],
                [
                  "test_existing_ctg",
                  "0"
                ],
                [
                  "test_individual_object_field_pair",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_nonexistent_ctg",
                  "0"
                ],
                [
                  "test_solve_and_run",
                  "0"
                ],
                [
                  "test_existing_ctg",
                  "0"
                ],
                [
                  "test_individual_object_field_pair",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_nonexistent_ctg",
                "false"
              ],
              [
                "test_solve_and_run",
                "false"
              ],
              [
                "test_existing_ctg",
                "true"
              ],
              [
                "test_individual_object_field_pair",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_ctg",
                "false"
              ],
              [
                "test_solve_and_run",
                "false"
              ],
              [
                "test_existing_ctg",
                "false"
              ],
              [
                "test_individual_object_field_pair",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_nonexistent_ctg",
                "2"
              ],
              [
                "test_solve_and_run",
                "5"
              ],
              [
                "test_existing_ctg",
                "0"
              ],
              [
                "test_individual_object_field_pair",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_ctg",
                [
                  "data",
                  "obj_field_list",
                  "meta",
                  "ctg_name",
                  "t1",
                  "t2"
                ]
              ],
              [
                "test_solve_and_run",
                [
                  "meta_rows",
                  "data",
                  "obj_field_list",
                  "meta",
                  "data_cols",
                  "t1",
                  "t2"
                ]
              ],
              [
                "test_existing_ctg",
                [
                  "result",
                  "obj_field_list",
                  "t1",
                  "t2"
                ]
              ],
              [
                "test_individual_object_field_pair",
                [
                  "data",
                  "obj_field_list",
                  "meta",
                  "contingency",
                  "cmd",
                  "params",
                  "t1",
                  "t2",
                  "stepsize"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_ctg",
                [
                  "self.saw"
                ]
              ],
              [
                "test_solve_and_run",
                [
                  "self.ctg_name",
                  "self.saw"
                ]
              ],
              [
                "test_existing_ctg",
                [
                  "self.ctg_name",
                  "self.saw"
                ]
              ],
              [
                "test_individual_object_field_pair",
                [
                  "self.ctg_name",
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7504978379976124,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_solve_and_run",
                  "test_individual_object_field_pair",
                  0.834097403232852
                ],
                [
                  "test_nonexistent_ctg",
                  "test_existing_ctg",
                  0.7734644484342388
                ],
                [
                  "test_nonexistent_ctg",
                  "test_solve_and_run",
                  0.7568653056215258
                ],
                [
                  "test_nonexistent_ctg",
                  "test_individual_object_field_pair",
                  0.7217946628096565
                ],
                [
                  "test_existing_ctg",
                  "test_solve_and_run",
                  0.7117563827107081
                ],
                [
                  "test_existing_ctg",
                  "test_individual_object_field_pair",
                  0.7050088251766929
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistent_ctg",
                "false"
              ],
              [
                "test_solve_and_run",
                "false"
              ],
              [
                "test_existing_ctg",
                "false"
              ],
              [
                "test_individual_object_field_pair",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "WriteAuxFileTestCaseTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_file_is_created",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_file_is_created",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_file_is_created",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_file_is_created",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_file_is_created",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_file_is_created",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_file_is_created",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_file_is_created",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                [
                  "temp_path"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_file_is_created",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "SaveCaseTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bad_type",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_save_with_missing_path",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_save_creates_file",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_save_with_same_file",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bad_type",
                  "[]"
                ],
                [
                  "test_save_with_missing_path",
                  "[]"
                ],
                [
                  "test_save_creates_file",
                  "[]"
                ],
                [
                  "test_save_with_same_file",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_save_with_missing_path",
                  "false"
                ],
                [
                  "test_save_creates_file",
                  "false"
                ],
                [
                  "test_save_with_same_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_save_with_missing_path",
                  "false"
                ],
                [
                  "test_save_creates_file",
                  "false"
                ],
                [
                  "test_save_with_same_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_save_with_missing_path",
                  "false"
                ],
                [
                  "test_save_creates_file",
                  "false"
                ],
                [
                  "test_save_with_same_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bad_type",
                  "false"
                ],
                [
                  "test_save_with_missing_path",
                  "false"
                ],
                [
                  "test_save_creates_file",
                  "false"
                ],
                [
                  "test_save_with_same_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_save_with_missing_path",
                "false"
              ],
              [
                "test_save_creates_file",
                "false"
              ],
              [
                "test_save_with_same_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_save_with_missing_path",
                "false"
              ],
              [
                "test_save_creates_file",
                "false"
              ],
              [
                "test_save_with_same_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_type",
                []
              ],
              [
                "test_save_with_missing_path",
                [
                  "self.out_file"
                ]
              ],
              [
                "test_save_creates_file",
                []
              ],
              [
                "test_save_with_same_file",
                [
                  "self.out_file"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_save_with_missing_path",
                "false"
              ],
              [
                "test_save_creates_file",
                "false"
              ],
              [
                "test_save_with_same_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_save_with_missing_path",
                "false"
              ],
              [
                "test_save_creates_file",
                "false"
              ],
              [
                "test_save_with_same_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bad_type",
                  "0"
                ],
                [
                  "test_save_with_missing_path",
                  "0"
                ],
                [
                  "test_save_creates_file",
                  "0"
                ],
                [
                  "test_save_with_same_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bad_type",
                  "0"
                ],
                [
                  "test_save_with_missing_path",
                  "0"
                ],
                [
                  "test_save_creates_file",
                  "0"
                ],
                [
                  "test_save_with_same_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_save_with_missing_path",
                "false"
              ],
              [
                "test_save_creates_file",
                "false"
              ],
              [
                "test_save_with_same_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_save_with_missing_path",
                "false"
              ],
              [
                "test_save_creates_file",
                "false"
              ],
              [
                "test_save_with_same_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "1"
              ],
              [
                "test_save_with_missing_path",
                "1"
              ],
              [
                "test_save_creates_file",
                "2"
              ],
              [
                "test_save_with_same_file",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                []
              ],
              [
                "test_save_with_missing_path",
                [
                  "m"
                ]
              ],
              [
                "test_save_creates_file",
                []
              ],
              [
                "test_save_with_same_file",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_bad_type",
                [
                  "self.out_file"
                ]
              ],
              [
                "test_save_with_missing_path",
                []
              ],
              [
                "test_save_creates_file",
                [
                  "self.out_file"
                ]
              ],
              [
                "test_save_with_same_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5267419625098859,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bad_type",
                  "test_save_with_missing_path",
                  0.516102947737777
                ],
                [
                  "test_save_creates_file",
                  "test_bad_type",
                  0.5394109498457442
                ],
                [
                  "test_save_creates_file",
                  "test_save_with_same_file",
                  0.4857363150716554
                ],
                [
                  "test_bad_type",
                  "test_save_with_same_file",
                  0.48882576981841186
                ],
                [
                  "test_save_creates_file",
                  "test_save_with_missing_path",
                  0.4818120558297158
                ],
                [
                  "test_save_with_same_file",
                  "test_save_with_missing_path",
                  0.6485637367560111
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bad_type",
                "false"
              ],
              [
                "test_save_with_missing_path",
                "false"
              ],
              [
                "test_save_creates_file",
                "false"
              ],
              [
                "test_save_with_same_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "SendToExcel",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_nonexistobject",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_nonexistobject",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_nonexistobject",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_nonexistobject",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_nonexistobject",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_nonexistobject",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_nonexistobject",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_nonexistobject",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                [
                  "fields"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_nonexistobject",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "SimAutoPropertiesTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_attr_error_ui_visible",
                  "[PyCallExpression: self.assertLogs, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_request_build_date",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_create_if_not_found",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_ui_visible",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertLogs]"
                ],
                [
                  "test_process_id",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_current_dir",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_attr_error_ui_visible",
                  "[]"
                ],
                [
                  "test_request_build_date",
                  "[]"
                ],
                [
                  "test_create_if_not_found",
                  "[]"
                ],
                [
                  "test_ui_visible",
                  "[]"
                ],
                [
                  "test_process_id",
                  "[]"
                ],
                [
                  "test_current_dir",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_attr_error_ui_visible",
                  "false"
                ],
                [
                  "test_request_build_date",
                  "false"
                ],
                [
                  "test_create_if_not_found",
                  "false"
                ],
                [
                  "test_ui_visible",
                  "true"
                ],
                [
                  "test_process_id",
                  "false"
                ],
                [
                  "test_current_dir",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_attr_error_ui_visible",
                  "false"
                ],
                [
                  "test_request_build_date",
                  "false"
                ],
                [
                  "test_create_if_not_found",
                  "false"
                ],
                [
                  "test_ui_visible",
                  "false"
                ],
                [
                  "test_process_id",
                  "false"
                ],
                [
                  "test_current_dir",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_attr_error_ui_visible",
                  "false"
                ],
                [
                  "test_request_build_date",
                  "false"
                ],
                [
                  "test_create_if_not_found",
                  "false"
                ],
                [
                  "test_ui_visible",
                  "false"
                ],
                [
                  "test_process_id",
                  "false"
                ],
                [
                  "test_current_dir",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_attr_error_ui_visible",
                  "false"
                ],
                [
                  "test_request_build_date",
                  "false"
                ],
                [
                  "test_create_if_not_found",
                  "false"
                ],
                [
                  "test_ui_visible",
                  "false"
                ],
                [
                  "test_process_id",
                  "false"
                ],
                [
                  "test_current_dir",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "false"
              ],
              [
                "test_request_build_date",
                "false"
              ],
              [
                "test_create_if_not_found",
                "false"
              ],
              [
                "test_ui_visible",
                "false"
              ],
              [
                "test_process_id",
                "false"
              ],
              [
                "test_current_dir",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "false"
              ],
              [
                "test_request_build_date",
                "false"
              ],
              [
                "test_create_if_not_found",
                "false"
              ],
              [
                "test_ui_visible",
                "false"
              ],
              [
                "test_process_id",
                "false"
              ],
              [
                "test_current_dir",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                []
              ],
              [
                "test_request_build_date",
                []
              ],
              [
                "test_create_if_not_found",
                []
              ],
              [
                "test_ui_visible",
                []
              ],
              [
                "test_process_id",
                []
              ],
              [
                "test_current_dir",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "false"
              ],
              [
                "test_request_build_date",
                "false"
              ],
              [
                "test_create_if_not_found",
                "false"
              ],
              [
                "test_ui_visible",
                "false"
              ],
              [
                "test_process_id",
                "false"
              ],
              [
                "test_current_dir",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "false"
              ],
              [
                "test_request_build_date",
                "false"
              ],
              [
                "test_create_if_not_found",
                "false"
              ],
              [
                "test_ui_visible",
                "false"
              ],
              [
                "test_process_id",
                "false"
              ],
              [
                "test_current_dir",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_attr_error_ui_visible",
                  "0"
                ],
                [
                  "test_request_build_date",
                  "0"
                ],
                [
                  "test_create_if_not_found",
                  "0"
                ],
                [
                  "test_ui_visible",
                  "0"
                ],
                [
                  "test_process_id",
                  "0"
                ],
                [
                  "test_current_dir",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_attr_error_ui_visible",
                  "0"
                ],
                [
                  "test_request_build_date",
                  "0"
                ],
                [
                  "test_create_if_not_found",
                  "0"
                ],
                [
                  "test_ui_visible",
                  "0"
                ],
                [
                  "test_process_id",
                  "0"
                ],
                [
                  "test_current_dir",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "false"
              ],
              [
                "test_request_build_date",
                "false"
              ],
              [
                "test_create_if_not_found",
                "false"
              ],
              [
                "test_ui_visible",
                "false"
              ],
              [
                "test_process_id",
                "false"
              ],
              [
                "test_current_dir",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "false"
              ],
              [
                "test_request_build_date",
                "false"
              ],
              [
                "test_create_if_not_found",
                "false"
              ],
              [
                "test_ui_visible",
                "false"
              ],
              [
                "test_process_id",
                "false"
              ],
              [
                "test_current_dir",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "2"
              ],
              [
                "test_request_build_date",
                "1"
              ],
              [
                "test_create_if_not_found",
                "1"
              ],
              [
                "test_ui_visible",
                "2"
              ],
              [
                "test_process_id",
                "1"
              ],
              [
                "test_current_dir",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                [
                  "result",
                  "com_patch"
                ]
              ],
              [
                "test_request_build_date",
                [
                  "bd"
                ]
              ],
              [
                "test_create_if_not_found",
                []
              ],
              [
                "test_ui_visible",
                []
              ],
              [
                "test_process_id",
                [
                  "pid"
                ]
              ],
              [
                "test_current_dir",
                [
                  "cwd"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                []
              ],
              [
                "test_request_build_date",
                []
              ],
              [
                "test_create_if_not_found",
                []
              ],
              [
                "test_ui_visible",
                []
              ],
              [
                "test_process_id",
                []
              ],
              [
                "test_current_dir",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.35336303001841823,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_current_dir",
                  "test_attr_error_ui_visible",
                  0.2720909998716401
                ],
                [
                  "test_current_dir",
                  "test_process_id",
                  0.4551495636817563
                ],
                [
                  "test_process_id",
                  "test_ui_visible",
                  0.3567386206158706
                ],
                [
                  "test_request_build_date",
                  "test_attr_error_ui_visible",
                  0.26284900718044696
                ],
                [
                  "test_current_dir",
                  "test_ui_visible",
                  0.3475908485465506
                ],
                [
                  "test_process_id",
                  "test_attr_error_ui_visible",
                  0.2921403381626795
                ],
                [
                  "test_request_build_date",
                  "test_ui_visible",
                  0.32097036938318474
                ],
                [
                  "test_ui_visible",
                  "test_create_if_not_found",
                  0.37274965820548744
                ],
                [
                  "test_current_dir",
                  "test_create_if_not_found",
                  0.27975144247209416
                ],
                [
                  "test_request_build_date",
                  "test_create_if_not_found",
                  0.2439750182371333
                ],
                [
                  "test_process_id",
                  "test_request_build_date",
                  0.4763305116224668
                ],
                [
                  "test_attr_error_ui_visible",
                  "test_create_if_not_found",
                  0.2356725731026976
                ],
                [
                  "test_current_dir",
                  "test_request_build_date",
                  0.40951417967396114
                ],
                [
                  "test_ui_visible",
                  "test_attr_error_ui_visible",
                  0.7037592472469846
                ],
                [
                  "test_process_id",
                  "test_create_if_not_found",
                  0.2711630722733202
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_attr_error_ui_visible",
                "false"
              ],
              [
                "test_request_build_date",
                "false"
              ],
              [
                "test_create_if_not_found",
                "false"
              ],
              [
                "test_ui_visible",
                "false"
              ],
              [
                "test_process_id",
                "false"
              ],
              [
                "test_current_dir",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "SolvePowerFlowTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_solve_defaults",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_solve_bad_method",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_solve_defaults",
                  "[]"
                ],
                [
                  "test_solve_bad_method",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_solve_defaults",
                  "false"
                ],
                [
                  "test_solve_bad_method",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_solve_defaults",
                  "false"
                ],
                [
                  "test_solve_bad_method",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_solve_defaults",
                  "false"
                ],
                [
                  "test_solve_bad_method",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_solve_defaults",
                  "false"
                ],
                [
                  "test_solve_bad_method",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "false"
              ],
              [
                "test_solve_bad_method",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "false"
              ],
              [
                "test_solve_bad_method",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                []
              ],
              [
                "test_solve_bad_method",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "false"
              ],
              [
                "test_solve_bad_method",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "false"
              ],
              [
                "test_solve_bad_method",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_solve_defaults",
                  "0"
                ],
                [
                  "test_solve_bad_method",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_solve_defaults",
                  "0"
                ],
                [
                  "test_solve_bad_method",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "false"
              ],
              [
                "test_solve_bad_method",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "false"
              ],
              [
                "test_solve_bad_method",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "1"
              ],
              [
                "test_solve_bad_method",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                []
              ],
              [
                "test_solve_bad_method",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                []
              ],
              [
                "test_solve_bad_method",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5152098373193084,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_solve_defaults",
                  "test_solve_bad_method",
                  0.5152098373193084
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_solve_defaults",
                "false"
              ],
              [
                "test_solve_bad_method",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "OpenOneLineTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_open_invalid_format_file",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_open_default",
                  "[PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_open_invalid_format_file",
                  "[]"
                ],
                [
                  "test_open_default",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_open_invalid_format_file",
                  "false"
                ],
                [
                  "test_open_default",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_open_invalid_format_file",
                  "false"
                ],
                [
                  "test_open_default",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_open_invalid_format_file",
                  "false"
                ],
                [
                  "test_open_default",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_open_invalid_format_file",
                  "false"
                ],
                [
                  "test_open_default",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "false"
              ],
              [
                "test_open_default",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "false"
              ],
              [
                "test_open_default",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                []
              ],
              [
                "test_open_default",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "false"
              ],
              [
                "test_open_default",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "false"
              ],
              [
                "test_open_default",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_open_invalid_format_file",
                  "0"
                ],
                [
                  "test_open_default",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_open_invalid_format_file",
                  "0"
                ],
                [
                  "test_open_default",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "false"
              ],
              [
                "test_open_default",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "false"
              ],
              [
                "test_open_default",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "1"
              ],
              [
                "test_open_default",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                []
              ],
              [
                "test_open_default",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                []
              ],
              [
                "test_open_default",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7137183894183611,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_open_default",
                  "test_open_invalid_format_file",
                  0.7137183894183611
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_open_invalid_format_file",
                "false"
              ],
              [
                "test_open_default",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "CloseOnelineTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_close_with_wrong_name",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_close_default",
                  "[PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_close_with_name",
                  "[PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_close_with_wrong_name",
                  "[]"
                ],
                [
                  "test_close_default",
                  "[]"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "[]"
                ],
                [
                  "test_close_with_name",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_close_with_wrong_name",
                  "false"
                ],
                [
                  "test_close_default",
                  "false"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "false"
                ],
                [
                  "test_close_with_name",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_close_with_wrong_name",
                  "false"
                ],
                [
                  "test_close_default",
                  "false"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "false"
                ],
                [
                  "test_close_with_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_close_with_wrong_name",
                  "false"
                ],
                [
                  "test_close_default",
                  "false"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "false"
                ],
                [
                  "test_close_with_name",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_close_with_wrong_name",
                  "false"
                ],
                [
                  "test_close_default",
                  "false"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "false"
                ],
                [
                  "test_close_with_name",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "false"
              ],
              [
                "test_close_default",
                "false"
              ],
              [
                "test_close_with_invalid_identifier",
                "false"
              ],
              [
                "test_close_with_name",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "false"
              ],
              [
                "test_close_default",
                "false"
              ],
              [
                "test_close_with_invalid_identifier",
                "false"
              ],
              [
                "test_close_with_name",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                []
              ],
              [
                "test_close_default",
                []
              ],
              [
                "test_close_with_invalid_identifier",
                []
              ],
              [
                "test_close_with_name",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "false"
              ],
              [
                "test_close_default",
                "false"
              ],
              [
                "test_close_with_invalid_identifier",
                "false"
              ],
              [
                "test_close_with_name",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "false"
              ],
              [
                "test_close_default",
                "false"
              ],
              [
                "test_close_with_invalid_identifier",
                "false"
              ],
              [
                "test_close_with_name",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_close_with_wrong_name",
                  "0"
                ],
                [
                  "test_close_default",
                  "0"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "0"
                ],
                [
                  "test_close_with_name",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_close_with_wrong_name",
                  "0"
                ],
                [
                  "test_close_default",
                  "0"
                ],
                [
                  "test_close_with_invalid_identifier",
                  "0"
                ],
                [
                  "test_close_with_name",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "false"
              ],
              [
                "test_close_default",
                "false"
              ],
              [
                "test_close_with_invalid_identifier",
                "false"
              ],
              [
                "test_close_with_name",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "false"
              ],
              [
                "test_close_default",
                "false"
              ],
              [
                "test_close_with_invalid_identifier",
                "false"
              ],
              [
                "test_close_with_name",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "1"
              ],
              [
                "test_close_default",
                "1"
              ],
              [
                "test_close_with_invalid_identifier",
                "1"
              ],
              [
                "test_close_with_name",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                []
              ],
              [
                "test_close_default",
                []
              ],
              [
                "test_close_with_invalid_identifier",
                []
              ],
              [
                "test_close_with_name",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                []
              ],
              [
                "test_close_default",
                []
              ],
              [
                "test_close_with_invalid_identifier",
                []
              ],
              [
                "test_close_with_name",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8339840470474078,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_close_default",
                  "test_close_with_invalid_identifier",
                  0.788230180963542
                ],
                [
                  "test_close_with_name",
                  "test_close_with_invalid_identifier",
                  0.8762198777469683
                ],
                [
                  "test_close_default",
                  "test_close_with_wrong_name",
                  0.7449128169759901
                ],
                [
                  "test_close_default",
                  "test_close_with_name",
                  0.882090692333454
                ],
                [
                  "test_close_with_name",
                  "test_close_with_wrong_name",
                  0.8236697180399778
                ],
                [
                  "test_close_with_wrong_name",
                  "test_close_with_invalid_identifier",
                  0.8887809962245149
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_close_with_wrong_name",
                "false"
              ],
              [
                "test_close_default",
                "false"
              ],
              [
                "test_close_with_invalid_identifier",
                "false"
              ],
              [
                "test_close_with_name",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestCreateNewLinesFromFile2000Bus",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_create_lines",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_create_lines",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_create_lines",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_create_lines",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_create_lines",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_create_lines",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_create_lines",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_create_lines",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_create_lines",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                [
                  "self.line_df",
                  "self.saw"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_create_lines",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "CallSimAutoTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_weird_type_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_bad_function",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_weird_type_error",
                  "[]"
                ],
                [
                  "test_bad_function",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_weird_type_error",
                  "false"
                ],
                [
                  "test_bad_function",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_weird_type_error",
                  "false"
                ],
                [
                  "test_bad_function",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_weird_type_error",
                  "false"
                ],
                [
                  "test_bad_function",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_weird_type_error",
                  "false"
                ],
                [
                  "test_bad_function",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "false"
              ],
              [
                "test_bad_function",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "false"
              ],
              [
                "test_bad_function",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                []
              ],
              [
                "test_bad_function",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "false"
              ],
              [
                "test_bad_function",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "false"
              ],
              [
                "test_bad_function",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_weird_type_error",
                  "0"
                ],
                [
                  "test_bad_function",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_weird_type_error",
                  "0"
                ],
                [
                  "test_bad_function",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "false"
              ],
              [
                "test_bad_function",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "false"
              ],
              [
                "test_bad_function",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "1"
              ],
              [
                "test_bad_function",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                [
                  "m"
                ]
              ],
              [
                "test_bad_function",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                []
              ],
              [
                "test_bad_function",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3131121455425747,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_bad_function",
                  "test_weird_type_error",
                  0.3131121455425747
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_weird_type_error",
                "false"
              ],
              [
                "test_bad_function",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "ToNumericTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_series_commas",
                  "[]"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_bad_errors_input",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_bad_data_input",
                  "[PyCallExpression: self.assertRaisesRegex]"
                ],
                [
                  "test_df_commas",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_series_commas",
                  "[]"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "[]"
                ],
                [
                  "test_bad_errors_input",
                  "[]"
                ],
                [
                  "test_bad_data_input",
                  "[]"
                ],
                [
                  "test_df_commas",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_series_commas",
                  "false"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "false"
                ],
                [
                  "test_bad_errors_input",
                  "false"
                ],
                [
                  "test_bad_data_input",
                  "false"
                ],
                [
                  "test_df_commas",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_series_commas",
                  "false"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "false"
                ],
                [
                  "test_bad_errors_input",
                  "false"
                ],
                [
                  "test_bad_data_input",
                  "false"
                ],
                [
                  "test_df_commas",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_series_commas",
                  "false"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "false"
                ],
                [
                  "test_bad_errors_input",
                  "false"
                ],
                [
                  "test_bad_data_input",
                  "false"
                ],
                [
                  "test_df_commas",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_series_commas",
                  "false"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "false"
                ],
                [
                  "test_bad_errors_input",
                  "false"
                ],
                [
                  "test_bad_data_input",
                  "false"
                ],
                [
                  "test_df_commas",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                "false"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "false"
              ],
              [
                "test_bad_errors_input",
                "false"
              ],
              [
                "test_bad_data_input",
                "false"
              ],
              [
                "test_df_commas",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                "false"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "false"
              ],
              [
                "test_bad_errors_input",
                "false"
              ],
              [
                "test_bad_data_input",
                "false"
              ],
              [
                "test_df_commas",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                []
              ],
              [
                "test_get_power_flow_results_with_commas",
                []
              ],
              [
                "test_bad_errors_input",
                []
              ],
              [
                "test_bad_data_input",
                []
              ],
              [
                "test_df_commas",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                "false"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "false"
              ],
              [
                "test_bad_errors_input",
                "false"
              ],
              [
                "test_bad_data_input",
                "false"
              ],
              [
                "test_df_commas",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                "false"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "false"
              ],
              [
                "test_bad_errors_input",
                "false"
              ],
              [
                "test_bad_data_input",
                "false"
              ],
              [
                "test_df_commas",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_series_commas",
                  "0"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "0"
                ],
                [
                  "test_bad_errors_input",
                  "0"
                ],
                [
                  "test_bad_data_input",
                  "0"
                ],
                [
                  "test_df_commas",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_series_commas",
                  "0"
                ],
                [
                  "test_get_power_flow_results_with_commas",
                  "0"
                ],
                [
                  "test_bad_errors_input",
                  "0"
                ],
                [
                  "test_bad_data_input",
                  "0"
                ],
                [
                  "test_df_commas",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                "false"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "false"
              ],
              [
                "test_bad_errors_input",
                "false"
              ],
              [
                "test_bad_data_input",
                "false"
              ],
              [
                "test_df_commas",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                "false"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "false"
              ],
              [
                "test_bad_errors_input",
                "false"
              ],
              [
                "test_bad_data_input",
                "false"
              ],
              [
                "test_df_commas",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                "1"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "3"
              ],
              [
                "test_bad_errors_input",
                "1"
              ],
              [
                "test_bad_data_input",
                "1"
              ],
              [
                "test_df_commas",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                [
                  "series_in",
                  "expected",
                  "series_out"
                ]
              ],
              [
                "test_get_power_flow_results_with_commas",
                [
                  "output",
                  "df"
                ]
              ],
              [
                "test_bad_errors_input",
                [
                  "s_in"
                ]
              ],
              [
                "test_bad_data_input",
                []
              ],
              [
                "test_df_commas",
                [
                  "df_in",
                  "expected",
                  "df_out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_series_commas",
                []
              ],
              [
                "test_get_power_flow_results_with_commas",
                []
              ],
              [
                "test_bad_errors_input",
                []
              ],
              [
                "test_bad_data_input",
                []
              ],
              [
                "test_df_commas",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.42704891464640377,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_df_commas",
                  "test_bad_data_input",
                  0.44432597331227314
                ],
                [
                  "test_df_commas",
                  "test_get_power_flow_results_with_commas",
                  0.5995205623776874
                ],
                [
                  "test_series_commas",
                  "test_bad_errors_input",
                  0.29962151745192694
                ],
                [
                  "test_bad_data_input",
                  "test_bad_errors_input",
                  0.38172256598111365
                ],
                [
                  "test_df_commas",
                  "test_series_commas",
                  0.7633662335057924
                ],
                [
                  "test_df_commas",
                  "test_bad_errors_input",
                  0.3314447440074961
                ],
                [
                  "test_series_commas",
                  "test_get_power_flow_results_with_commas",
                  0.5798673991594135
                ],
                [
                  "test_bad_errors_input",
                  "test_get_power_flow_results_with_commas",
                  0.16123141605293845
                ],
                [
                  "test_bad_data_input",
                  "test_get_power_flow_results_with_commas",
                  0.3382506390767815
                ],
                [
                  "test_series_commas",
                  "test_bad_data_input",
                  0.3711380955386153
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_series_commas",
                "false"
              ],
              [
                "test_get_power_flow_results_with_commas",
                "true"
              ],
              [
                "test_bad_errors_input",
                "false"
              ],
              [
                "test_bad_data_input",
                "false"
              ],
              [
                "test_df_commas",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  }
]