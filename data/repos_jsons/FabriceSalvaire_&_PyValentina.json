[
  {
    "name": "unit-test_\u0026_FileFormat_\u0026_test_svg.py",
    "testCases": [
      {
        "name": "TestLine2D",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "number_of_items",
                  "tag_counter",
                  "data",
                  "origin",
                  "svg_path",
                  "interval",
                  "scene_importer",
                  "scene"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Line.py",
    "testCases": [
      {
        "name": "TestLine2D",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "13"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test",
                [
                  "p0",
                  "p2",
                  "p3",
                  "l0",
                  "l1",
                  "l2",
                  "l3",
                  "i0",
                  "i1",
                  "i2",
                  "lp1",
                  "lp0",
                  "lm0",
                  "lp2",
                  "lm2",
                  "lm1",
                  "v0",
                  "v1",
                  "v2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Path.py",
    "testCases": [
      {
        "name": "TestPath",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Conic.py",
    "testCases": [
      {
        "name": "TestConic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Bezier.py",
    "testCases": [
      {
        "name": "TestQuadraticBezier",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "p0",
                  "p1",
                  "p2",
                  "split",
                  "curve"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestCubicBezier",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "p0",
                  "p1",
                  "p2",
                  "p3",
                  "split",
                  "curve"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Vector.py",
    "testCases": [
      {
        "name": "TestVector2D",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_two_vector_operations",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_properties",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_math_operations",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ctor",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_two_vector_operations",
                  "[]"
                ],
                [
                  "test_properties",
                  "[]"
                ],
                [
                  "test_math_operations",
                  "[]"
                ],
                [
                  "test_ctor",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_two_vector_operations",
                  "true"
                ],
                [
                  "test_properties",
                  "false"
                ],
                [
                  "test_math_operations",
                  "false"
                ],
                [
                  "test_ctor",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_two_vector_operations",
                  "false"
                ],
                [
                  "test_properties",
                  "false"
                ],
                [
                  "test_math_operations",
                  "false"
                ],
                [
                  "test_ctor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_two_vector_operations",
                  "false"
                ],
                [
                  "test_properties",
                  "false"
                ],
                [
                  "test_math_operations",
                  "false"
                ],
                [
                  "test_ctor",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_two_vector_operations",
                  "false"
                ],
                [
                  "test_properties",
                  "false"
                ],
                [
                  "test_math_operations",
                  "false"
                ],
                [
                  "test_ctor",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                "false"
              ],
              [
                "test_properties",
                "false"
              ],
              [
                "test_math_operations",
                "false"
              ],
              [
                "test_ctor",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                "false"
              ],
              [
                "test_properties",
                "false"
              ],
              [
                "test_math_operations",
                "false"
              ],
              [
                "test_ctor",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                []
              ],
              [
                "test_properties",
                []
              ],
              [
                "test_math_operations",
                []
              ],
              [
                "test_ctor",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                "false"
              ],
              [
                "test_properties",
                "false"
              ],
              [
                "test_math_operations",
                "false"
              ],
              [
                "test_ctor",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_two_vector_operations",
                "false"
              ],
              [
                "test_properties",
                "true"
              ],
              [
                "test_math_operations",
                "false"
              ],
              [
                "test_ctor",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_two_vector_operations",
                  "0"
                ],
                [
                  "test_properties",
                  "0"
                ],
                [
                  "test_math_operations",
                  "0"
                ],
                [
                  "test_ctor",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_two_vector_operations",
                  "0"
                ],
                [
                  "test_properties",
                  "0"
                ],
                [
                  "test_math_operations",
                  "0"
                ],
                [
                  "test_ctor",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                "false"
              ],
              [
                "test_properties",
                "false"
              ],
              [
                "test_math_operations",
                "false"
              ],
              [
                "test_ctor",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                "false"
              ],
              [
                "test_properties",
                "false"
              ],
              [
                "test_math_operations",
                "false"
              ],
              [
                "test_ctor",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                "6"
              ],
              [
                "test_properties",
                "10"
              ],
              [
                "test_math_operations",
                "9"
              ],
              [
                "test_ctor",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                [
                  "perpendicular_direction",
                  "x",
                  "angle1",
                  "v1",
                  "v2",
                  "v2y",
                  "v2x",
                  "v3",
                  "direction"
                ]
              ],
              [
                "test_properties",
                [
                  "x",
                  "magnitude_square",
                  "y",
                  "v1"
                ]
              ],
              [
                "test_math_operations",
                [
                  "a",
                  "b",
                  "c",
                  "v1",
                  "v2"
                ]
              ],
              [
                "test_ctor",
                [
                  "x",
                  "y",
                  "v1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                []
              ],
              [
                "test_properties",
                []
              ],
              [
                "test_math_operations",
                []
              ],
              [
                "test_ctor",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8764768767058272,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ctor",
                  "test_math_operations",
                  0.8955881391288031
                ],
                [
                  "test_ctor",
                  "test_two_vector_operations",
                  0.8314263140364941
                ],
                [
                  "test_properties",
                  "test_two_vector_operations",
                  0.877388429736945
                ],
                [
                  "test_properties",
                  "test_math_operations",
                  0.911265038616533
                ],
                [
                  "test_math_operations",
                  "test_two_vector_operations",
                  0.8742570750202988
                ],
                [
                  "test_ctor",
                  "test_properties",
                  0.8689362636958893
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_two_vector_operations",
                "false"
              ],
              [
                "test_properties",
                "false"
              ],
              [
                "test_math_operations",
                "false"
              ],
              [
                "test_ctor",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Polygon.py",
    "testCases": [
      {
        "name": "TestPolygon",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_basic",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNot, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIs]"
                ],
                [
                  "test_convex_hull",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_simplification",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_basic",
                  "[]"
                ],
                [
                  "test_convex_hull",
                  "[]"
                ],
                [
                  "test_simplification",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_basic",
                  "true"
                ],
                [
                  "test_convex_hull",
                  "false"
                ],
                [
                  "test_simplification",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_convex_hull",
                  "true"
                ],
                [
                  "test_simplification",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_convex_hull",
                  "false"
                ],
                [
                  "test_simplification",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_basic",
                  "false"
                ],
                [
                  "test_convex_hull",
                  "false"
                ],
                [
                  "test_simplification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_convex_hull",
                "false"
              ],
              [
                "test_simplification",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_convex_hull",
                "false"
              ],
              [
                "test_simplification",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                []
              ],
              [
                "test_convex_hull",
                []
              ],
              [
                "test_simplification",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_convex_hull",
                "false"
              ],
              [
                "test_simplification",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_convex_hull",
                "false"
              ],
              [
                "test_simplification",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_convex_hull",
                  "0"
                ],
                [
                  "test_simplification",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_basic",
                  "0"
                ],
                [
                  "test_convex_hull",
                  "0"
                ],
                [
                  "test_simplification",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_convex_hull",
                "false"
              ],
              [
                "test_simplification",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_convex_hull",
                "false"
              ],
              [
                "test_simplification",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "18"
              ],
              [
                "test_convex_hull",
                "15"
              ],
              [
                "test_simplification",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                [
                  "p0",
                  "p1",
                  "p2",
                  "p3",
                  "polygon",
                  "origin",
                  "x",
                  "clone",
                  "y",
                  "points"
                ]
              ],
              [
                "test_convex_hull",
                [
                  "convex_hull_points",
                  "reversed_polygon",
                  "polygon",
                  "simplified_polygon",
                  "convex_hull",
                  "convex_hull_truth",
                  "convex_hull2",
                  "points"
                ]
              ],
              [
                "test_simplification",
                [
                  "polygon",
                  "simplified_polygon",
                  "simplified_polygon_truth",
                  "points"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                []
              ],
              [
                "test_convex_hull",
                []
              ],
              [
                "test_simplification",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8683375524237827,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_basic",
                  "test_convex_hull",
                  0.858367130196091
                ],
                [
                  "test_basic",
                  "test_simplification",
                  0.809071882002499
                ],
                [
                  "test_convex_hull",
                  "test_simplification",
                  0.9375736450727583
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_basic",
                "false"
              ],
              [
                "test_convex_hull",
                "false"
              ],
              [
                "test_simplification",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Segment.py",
    "testCases": [
      {
        "name": "TestSegment",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Polyline.py",
    "testCases": [
      {
        "name": "TestPolyline",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Triangle.py",
    "testCases": [
      {
        "name": "TestTriangle",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_Common_\u0026_Xml_\u0026_test_Objectivity.py",
    "testCases": [
      {
        "name": "TestObjectivity",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "13"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "object2",
                  "int_attribute",
                  "object1",
                  "object3",
                  "xml_element2",
                  "int_attribute2",
                  "xml_element1",
                  "string_attribute",
                  "float_attribute",
                  "composed_object"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Rectangle.py",
    "testCases": [
      {
        "name": "TestRectangle",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GraphicEngine_\u0026_test_TexPainter.py",
    "testCases": [
      {
        "name": "TestTexPainter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "paper",
                  "tex_painter"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "unit-test_\u0026_GeometryEngine_\u0026_test_Transformation.py",
    "testCases": [
      {
        "name": "TestTransformation",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test",
                [
                  "p0",
                  "p1",
                  "p1_true",
                  "offset",
                  "rotation",
                  "center",
                  "rotation_at",
                  "translation",
                  "angle"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]