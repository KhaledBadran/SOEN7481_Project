[
  {
    "name": "tests_\u0026_test_base.py",
    "testCases": [
      {
        "name": "TestNotImplementedFunction",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_call",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_call",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_call",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_call",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_call",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_call",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_call",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_call",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                [
                  "func"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_call",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestBaseAPIItem",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_subitem",
                  "[PyCallExpression: self.assertIs]"
                ],
                [
                  "test_construction",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cached_property",
                  "[PyCallExpression: self.assertIs]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_subitem",
                  "[]"
                ],
                [
                  "test_construction",
                  "[]"
                ],
                [
                  "test_cached_property",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_subitem",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_cached_property",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_subitem",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_cached_property",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_subitem",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_cached_property",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_subitem",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ],
                [
                  "test_cached_property",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_cached_property",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_cached_property",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                []
              ],
              [
                "test_construction",
                []
              ],
              [
                "test_cached_property",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_cached_property",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_cached_property",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_subitem",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ],
                [
                  "test_cached_property",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_subitem",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ],
                [
                  "test_cached_property",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_cached_property",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_cached_property",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "1"
              ],
              [
                "test_construction",
                "1"
              ],
              [
                "test_cached_property",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                [
                  "item",
                  "subitem"
                ]
              ],
              [
                "test_construction",
                [
                  "item"
                ]
              ],
              [
                "test_cached_property",
                [
                  "item",
                  "value"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                []
              ],
              [
                "test_construction",
                []
              ],
              [
                "test_cached_property",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5628860230000653,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_construction",
                  "test_get_subitem",
                  0.6076436202502
                ],
                [
                  "test_construction",
                  "test_cached_property",
                  0.5439282932204212
                ],
                [
                  "test_cached_property",
                  "test_get_subitem",
                  0.5370861555295747
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_subitem",
                "false"
              ],
              [
                "test_construction",
                "false"
              ],
              [
                "test_cached_property",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestBaseAPI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_construction",
                  "[PyCallExpression: self.assertIs, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertIsNot]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_construction",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_construction",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_construction",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_construction",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_construction",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_construction",
                  "1"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_construction",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                [
                  "item",
                  "item2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_construction",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestAPIPath",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_subitem",
                  "[PyCallExpression: self.assertIs, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_path",
                  "[PyCallExpression: self.assertTupleEqual]"
                ],
                [
                  "test_construction",
                  "[PyCallExpression: self.assertIs, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertTupleEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_subitem",
                  "[]"
                ],
                [
                  "test_path",
                  "[]"
                ],
                [
                  "test_construction",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_subitem",
                  "false"
                ],
                [
                  "test_path",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_subitem",
                  "false"
                ],
                [
                  "test_path",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_subitem",
                  "false"
                ],
                [
                  "test_path",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_subitem",
                  "false"
                ],
                [
                  "test_path",
                  "false"
                ],
                [
                  "test_construction",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "false"
              ],
              [
                "test_path",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "false"
              ],
              [
                "test_path",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                []
              ],
              [
                "test_path",
                []
              ],
              [
                "test_construction",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "false"
              ],
              [
                "test_path",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "false"
              ],
              [
                "test_path",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_subitem",
                  "1"
                ],
                [
                  "test_path",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_subitem",
                  "0"
                ],
                [
                  "test_path",
                  "0"
                ],
                [
                  "test_construction",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "false"
              ],
              [
                "test_path",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "false"
              ],
              [
                "test_path",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "2"
              ],
              [
                "test_path",
                "1"
              ],
              [
                "test_construction",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                [
                  "item"
                ]
              ],
              [
                "test_path",
                [
                  "item"
                ]
              ],
              [
                "test_construction",
                [
                  "item"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                [
                  "self.root"
                ]
              ],
              [
                "test_path",
                [
                  "self.root"
                ]
              ],
              [
                "test_construction",
                [
                  "self.root"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.607005601197884,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_construction",
                  "test_subitem",
                  0.5976143046671969
                ],
                [
                  "test_construction",
                  "test_path",
                  0.6599663291074443
                ],
                [
                  "test_subitem",
                  "test_path",
                  0.563436169819011
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_subitem",
                "false"
              ],
              [
                "test_path",
                "false"
              ],
              [
                "test_construction",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_http_api.py",
    "testCases": [
      {
        "name": "TestBaseHTTPAPI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_usage",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_usage",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_usage",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_usage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_usage",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_usage",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_usage",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_usage",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                [
                  "api"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_usage",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestSimpleHTTPAPI",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_url_and_method",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_get_request_result",
                  "[PyCallExpression: self.assertDictContainsSubset, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_set_headers",
                  "[PyCallExpression: self.assertDictContainsSubset, PyCallExpression: self.assertDictContainsSubset, PyCallExpression: self.assertDictContainsSubset]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_url_and_method",
                  "[]"
                ],
                [
                  "test_get_request_result",
                  "[]"
                ],
                [
                  "test_set_headers",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_url_and_method",
                  "false"
                ],
                [
                  "test_get_request_result",
                  "false"
                ],
                [
                  "test_set_headers",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_url_and_method",
                  "false"
                ],
                [
                  "test_get_request_result",
                  "false"
                ],
                [
                  "test_set_headers",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_url_and_method",
                  "true"
                ],
                [
                  "test_get_request_result",
                  "false"
                ],
                [
                  "test_set_headers",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_url_and_method",
                  "false"
                ],
                [
                  "test_get_request_result",
                  "false"
                ],
                [
                  "test_set_headers",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "false"
              ],
              [
                "test_get_request_result",
                "false"
              ],
              [
                "test_set_headers",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "false"
              ],
              [
                "test_get_request_result",
                "false"
              ],
              [
                "test_set_headers",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                []
              ],
              [
                "test_get_request_result",
                []
              ],
              [
                "test_set_headers",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "false"
              ],
              [
                "test_get_request_result",
                "false"
              ],
              [
                "test_set_headers",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "false"
              ],
              [
                "test_get_request_result",
                "false"
              ],
              [
                "test_set_headers",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_url_and_method",
                  "0"
                ],
                [
                  "test_get_request_result",
                  "0"
                ],
                [
                  "test_set_headers",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_url_and_method",
                  "0"
                ],
                [
                  "test_get_request_result",
                  "0"
                ],
                [
                  "test_set_headers",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "false"
              ],
              [
                "test_get_request_result",
                "false"
              ],
              [
                "test_set_headers",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "false"
              ],
              [
                "test_get_request_result",
                "false"
              ],
              [
                "test_set_headers",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "7"
              ],
              [
                "test_get_request_result",
                "3"
              ],
              [
                "test_set_headers",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                [
                  "method",
                  "url"
                ]
              ],
              [
                "test_get_request_result",
                [
                  "result"
                ]
              ],
              [
                "test_set_headers",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                [
                  "self.api"
                ]
              ],
              [
                "test_get_request_result",
                [
                  "self.api"
                ]
              ],
              [
                "test_set_headers",
                [
                  "self.api"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3796602908209019,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_request_result",
                  "test_set_headers",
                  0.6214668049353477
                ],
                [
                  "test_get_url_and_method",
                  "test_get_request_result",
                  0.2642430721494158
                ],
                [
                  "test_get_url_and_method",
                  "test_set_headers",
                  0.2532709953779423
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_url_and_method",
                "false"
              ],
              [
                "test_get_request_result",
                "false"
              ],
              [
                "test_set_headers",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]