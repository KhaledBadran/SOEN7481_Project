[
  {
    "name": "magpysv_\u0026_tests_\u0026_test_io.py",
    "testCases": [
      {
        "name": "WDCParsefileTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wdc_parsefile_newformat",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wdc_parsefile_newformat",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wdc_parsefile_newformat",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wdc_parsefile_newformat",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wdc_parsefile_newformat",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wdc_parsefile_newformat",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wdc_parsefile_newformat",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wdc_parsefile_newformat",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                [
                  "testfile",
                  "data"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_parsefile_newformat",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "WDCDatetimesTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wdc_datetimes",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wdc_datetimes",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wdc_datetimes",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wdc_datetimes",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wdc_datetimes",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wdc_datetimes",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wdc_datetimes",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wdc_datetimes",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                [
                  "df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                [
                  "self.data"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_datetimes",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "HourlyMeanConversionTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_hourly_mean_conversion",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_hourly_mean_conversion",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_hourly_mean_conversion",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_hourly_mean_conversion",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_hourly_mean_conversion",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_hourly_mean_conversion",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_hourly_mean_conversion",
                [
                  "self.data.base",
                  "self.data.hourly_mean_temp",
                  "self.data.component"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_hourly_mean_conversion",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_hourly_mean_conversion",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                [
                  "df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                [
                  "self.data"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_hourly_mean_conversion",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "AnglesToGeographicTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_angles_to_geographic",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_angles_to_geographic",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_angles_to_geographic",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_angles_to_geographic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_angles_to_geographic",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_angles_to_geographic",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_angles_to_geographic",
                [
                  "self.data.date",
                  "self.data.component",
                  "self.data.daily_mean"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_angles_to_geographic",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_angles_to_geographic",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_angles_to_geographic",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                [
                  "df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                [
                  "self.data"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_angles_to_geographic",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "WDCXYZTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_wdc_xyz",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "[]"
                ],
                [
                  "test_wdc_xyz",
                  "[]"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "false"
                ],
                [
                  "test_wdc_xyz",
                  "false"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "false"
                ],
                [
                  "test_wdc_xyz",
                  "false"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "false"
                ],
                [
                  "test_wdc_xyz",
                  "false"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "false"
                ],
                [
                  "test_wdc_xyz",
                  "false"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "false"
              ],
              [
                "test_wdc_xyz",
                "false"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "false"
              ],
              [
                "test_wdc_xyz",
                "false"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                [
                  "self.data.base",
                  "self.data.hourly_mean_temp"
                ]
              ],
              [
                "test_wdc_xyz",
                [
                  "self.data.base",
                  "self.data.hourly_mean_temp",
                  "self.data.component"
                ]
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                [
                  "self.data.base",
                  "self.data.hourly_mean_temp"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "false"
              ],
              [
                "test_wdc_xyz",
                "false"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "false"
              ],
              [
                "test_wdc_xyz",
                "true"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "0"
                ],
                [
                  "test_wdc_xyz",
                  "0"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "0"
                ],
                [
                  "test_wdc_xyz",
                  "0"
                ],
                [
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "false"
              ],
              [
                "test_wdc_xyz",
                "false"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "false"
              ],
              [
                "test_wdc_xyz",
                "false"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "1"
              ],
              [
                "test_wdc_xyz",
                "4"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                [
                  "df"
                ]
              ],
              [
                "test_wdc_xyz",
                [
                  "df"
                ]
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                [
                  "df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                [
                  "self.data.component",
                  "self.data"
                ]
              ],
              [
                "test_wdc_xyz",
                [
                  "self.data"
                ]
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                [
                  "self.data.component",
                  "self.data"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6314497455851527,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_wdc_xyz",
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  0.6072396824137292
                ],
                [
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  "test_wdc_xyz_is_nan_if_DHXY_missing",
                  0.7866157270608671
                ],
                [
                  "test_wdc_xyz",
                  "test_wdc_xyz_is_nan_if_Z_missing",
                  0.5004938272808617
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_xyz_is_nan_if_Z_missing",
                "false"
              ],
              [
                "test_wdc_xyz",
                "false"
              ],
              [
                "test_wdc_xyz_is_nan_if_DHXY_missing",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "WDCReadTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wdc_readfile",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wdc_readfile",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wdc_readfile",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wdc_readfile",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wdc_readfile",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wdc_readfile",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_wdc_readfile",
                [
                  "self.data.date",
                  "self.data.Z",
                  "self.data.X",
                  "self.data.Y",
                  "self.data.columns.name"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wdc_readfile",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wdc_readfile",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                [
                  "df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                [
                  "self.data",
                  "self.filename"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_readfile",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "WDCAppendTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_append_wdc_data",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_append_wdc_data",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_append_wdc_data",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_append_wdc_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_append_wdc_data",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_append_wdc_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_append_wdc_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_append_wdc_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                [
                  "df"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                [
                  "self.value1",
                  "self.value2",
                  "self.dimensions",
                  "self.filename"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_append_wdc_data",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "WDCHourlyToCSVTestCase",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "[]"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "[]"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "[]"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "[PyAssertStatement]"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "false"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                []
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                [
                  "self.wdc_data"
                ]
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                [
                  "self.wdc_data"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "0"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "0"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wdc_to_hourly_csv_call_write",
                  "0"
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "0"
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "1"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "2"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                []
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                []
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                [
                  "self.write_dir",
                  "self.obs_list",
                  "self.print_obs",
                  "self.wdc_data",
                  "self.wdc_path"
                ]
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                [
                  "self.write_dir",
                  "self.obs_list",
                  "self.print_obs",
                  "self.wdc_path"
                ]
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                [
                  "self.write_dir",
                  "self.obs_list",
                  "self.print_obs",
                  "self.wdc_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.831439649378186,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "test_wdc_to_hourly_csv_call_write",
                  0.8141962914574213
                ],
                [
                  "test_wdc_to_hourly_csv_call_print",
                  "test_wdc_to_hourly_csv_call_write",
                  0.8559095061673077
                ],
                [
                  "test_wdc_to_hourly_csv_path_exists",
                  "test_wdc_to_hourly_csv_call_print",
                  0.8242131505098295
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_wdc_to_hourly_csv_call_write",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_path_exists",
                "false"
              ],
              [
                "test_wdc_to_hourly_csv_call_print",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]