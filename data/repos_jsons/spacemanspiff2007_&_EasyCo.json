[
  {
    "name": "tests_\u0026_test_container.py",
    "testCases": [
      {
        "name": "test_container",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_schema_flat_keys",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_subscribe",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_schema_container_name",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_skip",
                  "[]"
                ],
                [
                  "test_value_container",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_schema_container_name_double",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_container_name",
                  "[]"
                ],
                [
                  "test_value_parent_container",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_schema_flat_keys",
                  "[]"
                ],
                [
                  "test_subscribe",
                  "[]"
                ],
                [
                  "test_schema_container_name",
                  "[]"
                ],
                [
                  "test_skip",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_value_container",
                  "[]"
                ],
                [
                  "test_schema_container_name_double",
                  "[]"
                ],
                [
                  "test_container_name",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_value_parent_container",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_schema_flat_keys",
                  "true"
                ],
                [
                  "test_subscribe",
                  "false"
                ],
                [
                  "test_schema_container_name",
                  "false"
                ],
                [
                  "test_skip",
                  "false"
                ],
                [
                  "test_value_container",
                  "false"
                ],
                [
                  "test_schema_container_name_double",
                  "false"
                ],
                [
                  "test_container_name",
                  "false"
                ],
                [
                  "test_value_parent_container",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_schema_flat_keys",
                  "false"
                ],
                [
                  "test_subscribe",
                  "false"
                ],
                [
                  "test_schema_container_name",
                  "false"
                ],
                [
                  "test_skip",
                  "false"
                ],
                [
                  "test_value_container",
                  "false"
                ],
                [
                  "test_schema_container_name_double",
                  "false"
                ],
                [
                  "test_container_name",
                  "false"
                ],
                [
                  "test_value_parent_container",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_schema_flat_keys",
                  "false"
                ],
                [
                  "test_subscribe",
                  "false"
                ],
                [
                  "test_schema_container_name",
                  "true"
                ],
                [
                  "test_skip",
                  "false"
                ],
                [
                  "test_value_container",
                  "false"
                ],
                [
                  "test_schema_container_name_double",
                  "false"
                ],
                [
                  "test_container_name",
                  "false"
                ],
                [
                  "test_value_parent_container",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_schema_flat_keys",
                  "false"
                ],
                [
                  "test_subscribe",
                  "false"
                ],
                [
                  "test_schema_container_name",
                  "false"
                ],
                [
                  "test_skip",
                  "true"
                ],
                [
                  "test_value_container",
                  "false"
                ],
                [
                  "test_schema_container_name_double",
                  "false"
                ],
                [
                  "test_container_name",
                  "false"
                ],
                [
                  "test_value_parent_container",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                "false"
              ],
              [
                "test_subscribe",
                "false"
              ],
              [
                "test_schema_container_name",
                "false"
              ],
              [
                "test_skip",
                "false"
              ],
              [
                "test_value_container",
                "false"
              ],
              [
                "test_schema_container_name_double",
                "false"
              ],
              [
                "test_container_name",
                "false"
              ],
              [
                "test_value_parent_container",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                "false"
              ],
              [
                "test_subscribe",
                "false"
              ],
              [
                "test_schema_container_name",
                "false"
              ],
              [
                "test_skip",
                "false"
              ],
              [
                "test_value_container",
                "false"
              ],
              [
                "test_schema_container_name_double",
                "false"
              ],
              [
                "test_container_name",
                "false"
              ],
              [
                "test_value_parent_container",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                []
              ],
              [
                "test_subscribe",
                []
              ],
              [
                "test_schema_container_name",
                []
              ],
              [
                "test_skip",
                []
              ],
              [
                "test_value_container",
                []
              ],
              [
                "test_schema_container_name_double",
                []
              ],
              [
                "test_container_name",
                []
              ],
              [
                "test_value_parent_container",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                "false"
              ],
              [
                "test_subscribe",
                "false"
              ],
              [
                "test_schema_container_name",
                "false"
              ],
              [
                "test_skip",
                "false"
              ],
              [
                "test_value_container",
                "false"
              ],
              [
                "test_schema_container_name_double",
                "false"
              ],
              [
                "test_container_name",
                "false"
              ],
              [
                "test_value_parent_container",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_schema_flat_keys",
                "false"
              ],
              [
                "test_subscribe",
                "true"
              ],
              [
                "test_schema_container_name",
                "false"
              ],
              [
                "test_skip",
                "false"
              ],
              [
                "test_value_container",
                "true"
              ],
              [
                "test_schema_container_name_double",
                "false"
              ],
              [
                "test_container_name",
                "false"
              ],
              [
                "test_value_parent_container",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_schema_flat_keys",
                  "0"
                ],
                [
                  "test_subscribe",
                  "0"
                ],
                [
                  "test_schema_container_name",
                  "0"
                ],
                [
                  "test_skip",
                  "0"
                ],
                [
                  "test_value_container",
                  "0"
                ],
                [
                  "test_schema_container_name_double",
                  "0"
                ],
                [
                  "test_container_name",
                  "0"
                ],
                [
                  "test_value_parent_container",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_schema_flat_keys",
                  "0"
                ],
                [
                  "test_subscribe",
                  "0"
                ],
                [
                  "test_schema_container_name",
                  "0"
                ],
                [
                  "test_skip",
                  "0"
                ],
                [
                  "test_value_container",
                  "0"
                ],
                [
                  "test_schema_container_name_double",
                  "0"
                ],
                [
                  "test_container_name",
                  "0"
                ],
                [
                  "test_value_parent_container",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                "false"
              ],
              [
                "test_subscribe",
                "false"
              ],
              [
                "test_schema_container_name",
                "false"
              ],
              [
                "test_skip",
                "false"
              ],
              [
                "test_value_container",
                "false"
              ],
              [
                "test_schema_container_name_double",
                "false"
              ],
              [
                "test_container_name",
                "false"
              ],
              [
                "test_value_parent_container",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                "false"
              ],
              [
                "test_subscribe",
                "false"
              ],
              [
                "test_schema_container_name",
                "false"
              ],
              [
                "test_skip",
                "false"
              ],
              [
                "test_value_container",
                "false"
              ],
              [
                "test_schema_container_name_double",
                "false"
              ],
              [
                "test_container_name",
                "false"
              ],
              [
                "test_value_parent_container",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                "1"
              ],
              [
                "test_subscribe",
                "4"
              ],
              [
                "test_schema_container_name",
                "3"
              ],
              [
                "test_skip",
                "6"
              ],
              [
                "test_value_container",
                "3"
              ],
              [
                "test_schema_container_name_double",
                "4"
              ],
              [
                "test_container_name",
                "2"
              ],
              [
                "test_value_parent_container",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                [
                  "schema"
                ]
              ],
              [
                "test_subscribe",
                [
                  "data",
                  "obj"
                ]
              ],
              [
                "test_schema_container_name",
                [
                  "schema"
                ]
              ],
              [
                "test_skip",
                [
                  "schema",
                  "container",
                  "data"
                ]
              ],
              [
                "test_value_container",
                [
                  "data",
                  "obj"
                ]
              ],
              [
                "test_schema_container_name_double",
                [
                  "schema"
                ]
              ],
              [
                "test_container_name",
                [
                  "schema",
                  "c",
                  "cfg",
                  "var1"
                ]
              ],
              [
                "test_value_parent_container",
                [
                  "data",
                  "obj"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                []
              ],
              [
                "test_subscribe",
                []
              ],
              [
                "test_schema_container_name",
                []
              ],
              [
                "test_skip",
                []
              ],
              [
                "test_value_container",
                []
              ],
              [
                "test_schema_container_name_double",
                []
              ],
              [
                "test_container_name",
                []
              ],
              [
                "test_value_parent_container",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7554808297549621,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_skip",
                  "test_schema_container_name_double",
                  0.64274121874785
                ],
                [
                  "test_schema_flat_keys",
                  "test_subscribe",
                  0.8138168251360449
                ],
                [
                  "test_schema_container_name",
                  "test_value_parent_container",
                  0.699514790669716
                ],
                [
                  "test_schema_container_name_double",
                  "test_value_container",
                  0.8016217020526983
                ],
                [
                  "test_schema_container_name_double",
                  "test_subscribe",
                  0.7854463585348247
                ],
                [
                  "test_skip",
                  "test_schema_container_name",
                  0.5807214284343283
                ],
                [
                  "test_value_parent_container",
                  "test_subscribe",
                  0.9540016290423265
                ],
                [
                  "test_value_container",
                  "test_value_parent_container",
                  0.9811265425372656
                ],
                [
                  "test_schema_flat_keys",
                  "test_value_container",
                  0.8296719860916646
                ],
                [
                  "test_schema_container_name",
                  "test_subscribe",
                  0.6987579430152546
                ],
                [
                  "test_schema_container_name_double",
                  "test_value_parent_container",
                  0.8018961609775747
                ],
                [
                  "test_skip",
                  "test_container_name",
                  0.7053291951251747
                ],
                [
                  "test_schema_container_name_double",
                  "test_container_name",
                  0.6768194473874283
                ],
                [
                  "test_value_container",
                  "test_subscribe",
                  0.9696668482250502
                ],
                [
                  "test_schema_flat_keys",
                  "test_container_name",
                  0.7238648604017037
                ],
                [
                  "test_value_parent_container",
                  "test_container_name",
                  0.6553783604238933
                ],
                [
                  "test_skip",
                  "test_value_container",
                  0.6752954448726284
                ],
                [
                  "test_subscribe",
                  "test_container_name",
                  0.6479458778603289
                ],
                [
                  "test_schema_container_name",
                  "test_container_name",
                  0.7062087261643715
                ],
                [
                  "test_schema_flat_keys",
                  "test_schema_container_name_double",
                  0.9238806523710769
                ],
                [
                  "test_schema_flat_keys",
                  "test_schema_container_name",
                  0.7865082984782845
                ],
                [
                  "test_schema_flat_keys",
                  "test_value_parent_container",
                  0.8168894939786329
                ],
                [
                  "test_schema_container_name",
                  "test_value_container",
                  0.6966573962748797
                ],
                [
                  "test_skip",
                  "test_subscribe",
                  0.6693629746648275
                ],
                [
                  "test_skip",
                  "test_value_parent_container",
                  0.730325858154325
                ],
                [
                  "test_schema_container_name",
                  "test_schema_container_name_double",
                  0.8622305935149174
                ],
                [
                  "test_value_container",
                  "test_container_name",
                  0.6454951601040475
                ],
                [
                  "test_skip",
                  "test_schema_flat_keys",
                  0.6722874598978208
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_schema_flat_keys",
                "false"
              ],
              [
                "test_subscribe",
                "false"
              ],
              [
                "test_schema_container_name",
                "false"
              ],
              [
                "test_skip",
                "false"
              ],
              [
                "test_value_container",
                "false"
              ],
              [
                "test_schema_container_name_double",
                "false"
              ],
              [
                "test_container_name",
                "false"
              ],
              [
                "test_value_parent_container",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_config_file.py",
    "testCases": [
      {
        "name": "test_configfile",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_const",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_load_upper",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_load_lower",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_const",
                  "[]"
                ],
                [
                  "test_load_upper",
                  "[]"
                ],
                [
                  "test_load_lower",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_const",
                  "false"
                ],
                [
                  "test_load_upper",
                  "false"
                ],
                [
                  "test_load_lower",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_const",
                  "false"
                ],
                [
                  "test_load_upper",
                  "false"
                ],
                [
                  "test_load_lower",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_const",
                  "true"
                ],
                [
                  "test_load_upper",
                  "false"
                ],
                [
                  "test_load_lower",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_const",
                  "false"
                ],
                [
                  "test_load_upper",
                  "false"
                ],
                [
                  "test_load_lower",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                "false"
              ],
              [
                "test_load_upper",
                "false"
              ],
              [
                "test_load_lower",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                "false"
              ],
              [
                "test_load_upper",
                "false"
              ],
              [
                "test_load_lower",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                []
              ],
              [
                "test_load_upper",
                []
              ],
              [
                "test_load_lower",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                "false"
              ],
              [
                "test_load_upper",
                "false"
              ],
              [
                "test_load_lower",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_const",
                "false"
              ],
              [
                "test_load_upper",
                "true"
              ],
              [
                "test_load_lower",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_const",
                  "0"
                ],
                [
                  "test_load_upper",
                  "0"
                ],
                [
                  "test_load_lower",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_const",
                  "0"
                ],
                [
                  "test_load_upper",
                  "0"
                ],
                [
                  "test_load_lower",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                "false"
              ],
              [
                "test_load_upper",
                "false"
              ],
              [
                "test_load_lower",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                "false"
              ],
              [
                "test_load_upper",
                "false"
              ],
              [
                "test_load_lower",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                "9"
              ],
              [
                "test_load_upper",
                "6"
              ],
              [
                "test_load_lower",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                [
                  "top_level_entry",
                  "a",
                  "my_float_comment",
                  "f",
                  "my_float",
                  "my_int",
                  "top_level_str"
                ]
              ],
              [
                "test_load_upper",
                [
                  "file"
                ]
              ],
              [
                "test_load_lower",
                [
                  "file"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                []
              ],
              [
                "test_load_upper",
                []
              ],
              [
                "test_load_lower",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7152797981096413,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_const",
                  "test_load_lower",
                  0.5763679730265309
                ],
                [
                  "test_const",
                  "test_load_upper",
                  0.5763679730265309
                ],
                [
                  "test_load_lower",
                  "test_load_upper",
                  0.993103448275862
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_const",
                "false"
              ],
              [
                "test_load_upper",
                "false"
              ],
              [
                "test_load_lower",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_folder_container.py",
    "testCases": [
      {
        "name": "test_container",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_folder",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_file",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_folder",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_file",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_folder",
                  "false"
                ],
                [
                  "test_file",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_folder",
                  "false"
                ],
                [
                  "test_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_folder",
                  "false"
                ],
                [
                  "test_file",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_folder",
                  "false"
                ],
                [
                  "test_file",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "false"
              ],
              [
                "test_file",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "false"
              ],
              [
                "test_file",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                []
              ],
              [
                "test_file",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "false"
              ],
              [
                "test_file",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "false"
              ],
              [
                "test_file",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_folder",
                  "0"
                ],
                [
                  "test_file",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_folder",
                  "0"
                ],
                [
                  "test_file",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "false"
              ],
              [
                "test_file",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "false"
              ],
              [
                "test_file",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "4"
              ],
              [
                "test_file",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                [
                  "s",
                  "cfg",
                  "f"
                ]
              ],
              [
                "test_file",
                [
                  "f"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                []
              ],
              [
                "test_file",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9023865639623672,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_folder",
                  "test_file",
                  0.9023865639623672
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_folder",
                "false"
              ],
              [
                "test_file",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]