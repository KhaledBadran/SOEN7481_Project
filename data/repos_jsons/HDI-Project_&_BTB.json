[
  {
    "name": "tests_\u0026_test_session.py",
    "testCases": [
      {
        "name": "TestBTBSession",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___init__custom",
                  "[]"
                ],
                [
                  "test_record_score_lt_best",
                  "[]"
                ],
                [
                  "test_run_score_none",
                  "[]"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "[]"
                ],
                [
                  "test_propose_no_tunables",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "[]"
                ],
                [
                  "test_propose_tuner_is_none",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "[]"
                ],
                [
                  "test__normalize_maximize_true",
                  "[]"
                ],
                [
                  "test__make_dumpable",
                  "[]"
                ],
                [
                  "test___init__default",
                  "[]"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "[]"
                ],
                [
                  "test_run_score",
                  "[]"
                ],
                [
                  "test_record_score_is_none",
                  "[]"
                ],
                [
                  "test_record_score_gt_best",
                  "[]"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "[]"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "[]"
                ],
                [
                  "test__normalize_maximize_false",
                  "[]"
                ],
                [
                  "test_propose_raise_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "[]"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___init__custom",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_record_score_lt_best",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_run_score_none",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_propose_no_tunables",
                  "[]"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_propose_tuner_is_none",
                  "[]"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test__normalize_maximize_true",
                  "[PyAssertStatement]"
                ],
                [
                  "test__make_dumpable",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__default",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "[PyAssertStatement]"
                ],
                [
                  "test_run_score",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_record_score_is_none",
                  "[]"
                ],
                [
                  "test_record_score_gt_best",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "[]"
                ],
                [
                  "test__normalize_maximize_false",
                  "[PyAssertStatement]"
                ],
                [
                  "test_propose_raise_error",
                  "[]"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "[]"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___init__custom",
                  "false"
                ],
                [
                  "test_record_score_lt_best",
                  "false"
                ],
                [
                  "test_run_score_none",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "false"
                ],
                [
                  "test_propose_no_tunables",
                  "false"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "false"
                ],
                [
                  "test_propose_tuner_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "false"
                ],
                [
                  "test__normalize_maximize_true",
                  "false"
                ],
                [
                  "test__make_dumpable",
                  "false"
                ],
                [
                  "test___init__default",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "false"
                ],
                [
                  "test_run_score",
                  "false"
                ],
                [
                  "test_record_score_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "false"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "false"
                ],
                [
                  "test__normalize_maximize_false",
                  "false"
                ],
                [
                  "test_propose_raise_error",
                  "false"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___init__custom",
                  "false"
                ],
                [
                  "test_record_score_lt_best",
                  "false"
                ],
                [
                  "test_run_score_none",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "false"
                ],
                [
                  "test_propose_no_tunables",
                  "false"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "false"
                ],
                [
                  "test_propose_tuner_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "false"
                ],
                [
                  "test__normalize_maximize_true",
                  "false"
                ],
                [
                  "test__make_dumpable",
                  "false"
                ],
                [
                  "test___init__default",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "false"
                ],
                [
                  "test_run_score",
                  "false"
                ],
                [
                  "test_record_score_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "false"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "false"
                ],
                [
                  "test__normalize_maximize_false",
                  "false"
                ],
                [
                  "test_propose_raise_error",
                  "false"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___init__custom",
                  "false"
                ],
                [
                  "test_record_score_lt_best",
                  "false"
                ],
                [
                  "test_run_score_none",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "false"
                ],
                [
                  "test_propose_no_tunables",
                  "false"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "false"
                ],
                [
                  "test_propose_tuner_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "false"
                ],
                [
                  "test__normalize_maximize_true",
                  "false"
                ],
                [
                  "test__make_dumpable",
                  "false"
                ],
                [
                  "test___init__default",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "false"
                ],
                [
                  "test_run_score",
                  "false"
                ],
                [
                  "test_record_score_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "false"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "false"
                ],
                [
                  "test__normalize_maximize_false",
                  "false"
                ],
                [
                  "test_propose_raise_error",
                  "false"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___init__custom",
                  "false"
                ],
                [
                  "test_record_score_lt_best",
                  "false"
                ],
                [
                  "test_run_score_none",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "false"
                ],
                [
                  "test_propose_no_tunables",
                  "false"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "false"
                ],
                [
                  "test_propose_tuner_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "false"
                ],
                [
                  "test__normalize_maximize_true",
                  "false"
                ],
                [
                  "test__make_dumpable",
                  "false"
                ],
                [
                  "test___init__default",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "false"
                ],
                [
                  "test_run_score",
                  "false"
                ],
                [
                  "test_record_score_is_none",
                  "false"
                ],
                [
                  "test_record_score_gt_best",
                  "false"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "false"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "false"
                ],
                [
                  "test__normalize_maximize_false",
                  "false"
                ],
                [
                  "test_propose_raise_error",
                  "false"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "false"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "false"
              ],
              [
                "test_record_score_lt_best",
                "false"
              ],
              [
                "test_run_score_none",
                "false"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "false"
              ],
              [
                "test_propose_no_tunables",
                "false"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "false"
              ],
              [
                "test_propose_tuner_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "false"
              ],
              [
                "test__normalize_maximize_true",
                "false"
              ],
              [
                "test__make_dumpable",
                "false"
              ],
              [
                "test___init__default",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "false"
              ],
              [
                "test_run_score",
                "false"
              ],
              [
                "test_record_score_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best",
                "false"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "false"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "false"
              ],
              [
                "test__normalize_maximize_false",
                "false"
              ],
              [
                "test_propose_raise_error",
                "false"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "false"
              ],
              [
                "test_record_score_lt_best",
                "false"
              ],
              [
                "test_run_score_none",
                "false"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "false"
              ],
              [
                "test_propose_no_tunables",
                "false"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "false"
              ],
              [
                "test_propose_tuner_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "false"
              ],
              [
                "test__normalize_maximize_true",
                "false"
              ],
              [
                "test__make_dumpable",
                "false"
              ],
              [
                "test___init__default",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "false"
              ],
              [
                "test_run_score",
                "false"
              ],
              [
                "test_record_score_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best",
                "false"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "false"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "false"
              ],
              [
                "test__normalize_maximize_false",
                "false"
              ],
              [
                "test_propose_raise_error",
                "false"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                []
              ],
              [
                "test_record_score_lt_best",
                []
              ],
              [
                "test_run_score_none",
                []
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                []
              ],
              [
                "test_propose_no_tunables",
                []
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                []
              ],
              [
                "test_propose_tuner_is_none",
                []
              ],
              [
                "test_record_score_gt_best_tuner_none",
                []
              ],
              [
                "test__normalize_maximize_true",
                []
              ],
              [
                "test__make_dumpable",
                []
              ],
              [
                "test___init__default",
                []
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                []
              ],
              [
                "test_run_score",
                []
              ],
              [
                "test_record_score_is_none",
                []
              ],
              [
                "test_record_score_gt_best",
                []
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                []
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                []
              ],
              [
                "test__normalize_maximize_false",
                []
              ],
              [
                "test_propose_raise_error",
                []
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                []
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "false"
              ],
              [
                "test_record_score_lt_best",
                "false"
              ],
              [
                "test_run_score_none",
                "false"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "false"
              ],
              [
                "test_propose_no_tunables",
                "false"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "false"
              ],
              [
                "test_propose_tuner_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "false"
              ],
              [
                "test__normalize_maximize_true",
                "false"
              ],
              [
                "test__make_dumpable",
                "false"
              ],
              [
                "test___init__default",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "false"
              ],
              [
                "test_run_score",
                "false"
              ],
              [
                "test_record_score_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best",
                "false"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "false"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "false"
              ],
              [
                "test__normalize_maximize_false",
                "false"
              ],
              [
                "test_propose_raise_error",
                "false"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "false"
              ],
              [
                "test_record_score_lt_best",
                "false"
              ],
              [
                "test_run_score_none",
                "false"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "false"
              ],
              [
                "test_propose_no_tunables",
                "false"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "false"
              ],
              [
                "test_propose_tuner_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "false"
              ],
              [
                "test__normalize_maximize_true",
                "false"
              ],
              [
                "test__make_dumpable",
                "false"
              ],
              [
                "test___init__default",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "false"
              ],
              [
                "test_run_score",
                "false"
              ],
              [
                "test_record_score_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best",
                "false"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "false"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "false"
              ],
              [
                "test__normalize_maximize_false",
                "false"
              ],
              [
                "test_propose_raise_error",
                "false"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___init__custom",
                  "0"
                ],
                [
                  "test_record_score_lt_best",
                  "0"
                ],
                [
                  "test_run_score_none",
                  "0"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "0"
                ],
                [
                  "test_propose_no_tunables",
                  "0"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "0"
                ],
                [
                  "test_propose_tuner_is_none",
                  "0"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "0"
                ],
                [
                  "test__normalize_maximize_true",
                  "0"
                ],
                [
                  "test__make_dumpable",
                  "0"
                ],
                [
                  "test___init__default",
                  "0"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "0"
                ],
                [
                  "test_run_score",
                  "0"
                ],
                [
                  "test_record_score_is_none",
                  "0"
                ],
                [
                  "test_record_score_gt_best",
                  "0"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "0"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "0"
                ],
                [
                  "test__normalize_maximize_false",
                  "0"
                ],
                [
                  "test_propose_raise_error",
                  "0"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "0"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___init__custom",
                  "0"
                ],
                [
                  "test_record_score_lt_best",
                  "0"
                ],
                [
                  "test_run_score_none",
                  "0"
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "0"
                ],
                [
                  "test_propose_no_tunables",
                  "0"
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "0"
                ],
                [
                  "test_propose_tuner_is_none",
                  "0"
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "0"
                ],
                [
                  "test__normalize_maximize_true",
                  "0"
                ],
                [
                  "test__make_dumpable",
                  "0"
                ],
                [
                  "test___init__default",
                  "0"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "0"
                ],
                [
                  "test_run_score",
                  "0"
                ],
                [
                  "test_record_score_is_none",
                  "0"
                ],
                [
                  "test_record_score_gt_best",
                  "0"
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "0"
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "0"
                ],
                [
                  "test__normalize_maximize_false",
                  "0"
                ],
                [
                  "test_propose_raise_error",
                  "0"
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "0"
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "false"
              ],
              [
                "test_record_score_lt_best",
                "false"
              ],
              [
                "test_run_score_none",
                "false"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "false"
              ],
              [
                "test_propose_no_tunables",
                "false"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "false"
              ],
              [
                "test_propose_tuner_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "false"
              ],
              [
                "test__normalize_maximize_true",
                "false"
              ],
              [
                "test__make_dumpable",
                "false"
              ],
              [
                "test___init__default",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "false"
              ],
              [
                "test_run_score",
                "false"
              ],
              [
                "test_record_score_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best",
                "false"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "false"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "false"
              ],
              [
                "test__normalize_maximize_false",
                "false"
              ],
              [
                "test_propose_raise_error",
                "false"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "false"
              ],
              [
                "test_record_score_lt_best",
                "false"
              ],
              [
                "test_run_score_none",
                "false"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "false"
              ],
              [
                "test_propose_no_tunables",
                "false"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "false"
              ],
              [
                "test_propose_tuner_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "false"
              ],
              [
                "test__normalize_maximize_true",
                "false"
              ],
              [
                "test__make_dumpable",
                "false"
              ],
              [
                "test___init__default",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "false"
              ],
              [
                "test_run_score",
                "false"
              ],
              [
                "test_record_score_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best",
                "false"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "false"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "false"
              ],
              [
                "test__normalize_maximize_false",
                "false"
              ],
              [
                "test_propose_raise_error",
                "false"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "13"
              ],
              [
                "test_record_score_lt_best",
                "4"
              ],
              [
                "test_run_score_none",
                "4"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "7"
              ],
              [
                "test_propose_no_tunables",
                "1"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "5"
              ],
              [
                "test_propose_tuner_is_none",
                "1"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "3"
              ],
              [
                "test__normalize_maximize_true",
                "1"
              ],
              [
                "test__make_dumpable",
                "1"
              ],
              [
                "test___init__default",
                "15"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "3"
              ],
              [
                "test_run_score",
                "4"
              ],
              [
                "test_record_score_is_none",
                "1"
              ],
              [
                "test_record_score_gt_best",
                "4"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "5"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "1"
              ],
              [
                "test__normalize_maximize_false",
                "1"
              ],
              [
                "test_propose_raise_error",
                "1"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "2"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                [
                  "tunable",
                  "instance",
                  "scorer",
                  "selector"
                ]
              ],
              [
                "test_record_score_lt_best",
                [
                  "expected_normalized_scores",
                  "tuner",
                  "instance"
                ]
              ],
              [
                "test_run_score_none",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                [
                  "tuner",
                  "instance",
                  "expected_proposals",
                  "res_config",
                  "res_name",
                  "expected_isinstance_calls"
                ]
              ],
              [
                "test_propose_no_tunables",
                [
                  "instance"
                ]
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                [
                  "instance",
                  "config",
                  "tunable_name"
                ]
              ],
              [
                "test_propose_tuner_is_none",
                [
                  "instance"
                ]
              ],
              [
                "test_record_score_gt_best_tuner_none",
                [
                  "expected_normalized_scores",
                  "instance"
                ]
              ],
              [
                "test__normalize_maximize_true",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test__make_dumpable",
                [
                  "result",
                  "randint",
                  "to_dump",
                  "expected_result"
                ]
              ],
              [
                "test___init__default",
                [
                  "tunable",
                  "instance",
                  "scorer"
                ]
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                [
                  "instance",
                  "selector",
                  "tunable_name"
                ]
              ],
              [
                "test_run_score",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test_record_score_is_none",
                [
                  "instance"
                ]
              ],
              [
                "test_record_score_gt_best",
                [
                  "expected_normalized_scores",
                  "tuner",
                  "instance"
                ]
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                [
                  "tuner",
                  "instance",
                  "expected_proposals",
                  "res_config",
                  "res_name"
                ]
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                [
                  "instance"
                ]
              ],
              [
                "test__normalize_maximize_false",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test_propose_raise_error",
                [
                  "tuner",
                  "instance"
                ]
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                [
                  "instance"
                ]
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                [
                  "instance",
                  "expected_mock_call",
                  "tunable_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                []
              ],
              [
                "test_record_score_lt_best",
                []
              ],
              [
                "test_run_score_none",
                []
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                []
              ],
              [
                "test_propose_no_tunables",
                []
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                []
              ],
              [
                "test_propose_tuner_is_none",
                []
              ],
              [
                "test_record_score_gt_best_tuner_none",
                []
              ],
              [
                "test__normalize_maximize_true",
                []
              ],
              [
                "test__make_dumpable",
                []
              ],
              [
                "test___init__default",
                []
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                []
              ],
              [
                "test_run_score",
                []
              ],
              [
                "test_record_score_is_none",
                []
              ],
              [
                "test_record_score_gt_best",
                []
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                []
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                []
              ],
              [
                "test__normalize_maximize_false",
                []
              ],
              [
                "test_propose_raise_error",
                []
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                []
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6614774451349642,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_propose_raise_error",
                  "test_run_score",
                  0.7250523667842477
                ],
                [
                  "test__make_dumpable",
                  "test_handle_error_errors_gt_max_errors",
                  0.518833293700236
                ],
                [
                  "test_propose_raise_error",
                  "test_record_score_is_none",
                  0.7520069496643305
                ],
                [
                  "test_propose_no_tunables",
                  "test_propose_tuner_is_none",
                  0.7572401854185358
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_handle_error_errors_gt_max_errors",
                  0.5247085223213812
                ],
                [
                  "test__normalize_maximize_true",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.5785897353663864
                ],
                [
                  "test_record_score_is_none",
                  "test_run_score_none",
                  0.7741592108607663
                ],
                [
                  "test_propose_raise_error",
                  "test_propose_tunable_cardinality_eq_one",
                  0.8006848851104914
                ],
                [
                  "test__normalize_maximize_false",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.6466865262269372
                ],
                [
                  "test__normalize_maximize_false",
                  "test_propose_tuner_is_none",
                  0.6469858333771061
                ],
                [
                  "test__normalize_maximize_false",
                  "test_record_score_gt_best_tuner_none",
                  0.7218435547869093
                ],
                [
                  "test__normalize_maximize_false",
                  "test_record_score_lt_best",
                  0.7464355620128751
                ],
                [
                  "test___init__custom",
                  "test__get_next_tunable_name_normalized_scores_none",
                  0.4807904768189324
                ],
                [
                  "test___init__custom",
                  "test_propose_raise_error",
                  0.5263549596234487
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_handle_error_errors_gt_max_errors",
                  0.5678229614293206
                ],
                [
                  "test___init__default",
                  "test_record_score_gt_best",
                  0.6630773575255782
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_propose_tunable_cardinality_eq_one",
                  0.6818148659312979
                ],
                [
                  "test__normalize_maximize_true",
                  "test_propose_tuner_is_none",
                  0.5862846532247689
                ],
                [
                  "test_propose_raise_error",
                  "test_handle_error_errors_gt_max_errors",
                  0.6356360519238498
                ],
                [
                  "test_propose_no_tunables",
                  "test_record_score_gt_best_tuner_none",
                  0.5964897489974349
                ],
                [
                  "test__normalize_maximize_true",
                  "test_record_score_lt_best",
                  0.6884520066159542
                ],
                [
                  "test__normalize_maximize_false",
                  "test_run_score",
                  0.7868086476646089
                ],
                [
                  "test__make_dumpable",
                  "test_propose_tunable_cardinality_eq_one",
                  0.49846484606296515
                ],
                [
                  "test_propose_no_tunables",
                  "test_record_score_is_none",
                  0.719831162877094
                ],
                [
                  "test__normalize_maximize_true",
                  "test_record_score_gt_best_tuner_none",
                  0.6662479181123836
                ],
                [
                  "test_propose_no_tunables",
                  "test_record_score_lt_best",
                  0.6259686371487613
                ],
                [
                  "test__normalize_maximize_true",
                  "test_record_score_is_none",
                  0.7414794302952226
                ],
                [
                  "test__make_dumpable",
                  "test_propose_tuner_is_none",
                  0.43744488188954506
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_run_score_none",
                  0.6936918954171079
                ],
                [
                  "test_record_score_gt_best",
                  "test_record_score_gt_best_tuner_none",
                  0.9840653510267302
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_propose_raise_error",
                  0.6803609006980395
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_record_score_gt_best_tuner_none",
                  0.5786258999463723
                ],
                [
                  "test_propose_raise_error",
                  "test_record_score_lt_best",
                  0.7654060132852943
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_record_score_gt_best_tuner_none",
                  0.7757719547737267
                ],
                [
                  "test__normalize_maximize_false",
                  "test_handle_error_errors_gt_max_errors",
                  0.7330713749983125
                ],
                [
                  "test__normalize_maximize_false",
                  "test___init__default",
                  0.5810407687972479
                ],
                [
                  "test__make_dumpable",
                  "test__get_next_tunable_name_normalized_scores_none",
                  0.4186663555024468
                ],
                [
                  "test___init__custom",
                  "test_handle_error_errors_gt_max_errors",
                  0.5377929192741148
                ],
                [
                  "test__make_dumpable",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.5567764362830022
                ],
                [
                  "test_propose_no_tunables",
                  "test_run_score",
                  0.6539735108664554
                ],
                [
                  "test_propose_raise_error",
                  "test_propose_tuner_is_none",
                  0.9107077248809251
                ],
                [
                  "test___init__custom",
                  "test_run_score_none",
                  0.6054245893602243
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_run_score",
                  0.6201028287085762
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_propose_raise_error",
                  0.6143237372880788
                ],
                [
                  "test__normalize_maximize_false",
                  "test_propose_tunable_cardinality_eq_one",
                  0.6466179988625009
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_handle_error_errors_lt_max_errors",
                  0.6672976811635084
                ],
                [
                  "test_run_score",
                  "test_run_score_none",
                  0.9287399227532857
                ],
                [
                  "test__make_dumpable",
                  "test_record_score_lt_best",
                  0.5918107935489036
                ],
                [
                  "test_record_score_lt_best",
                  "test_run_score",
                  0.7857203543885066
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_record_score_is_none",
                  0.5800991638819648
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_run_score",
                  0.5618851452713107
                ],
                [
                  "test_propose_raise_error",
                  "test_run_score_none",
                  0.6897304947150052
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "test_record_score_gt_best_tuner_none",
                  0.6600108160196068
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_run_score_none",
                  0.6839072226087217
                ],
                [
                  "test__make_dumpable",
                  "test_run_score_none",
                  0.5772824586458833
                ],
                [
                  "test_propose_no_tunables",
                  "test_propose_tunable_cardinality_eq_one",
                  0.6029558337732863
                ],
                [
                  "test_propose_no_tunables",
                  "test_handle_error_errors_gt_max_errors",
                  0.6948083337796511
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_record_score_is_none",
                  0.6451654344593886
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_record_score_gt_best_tuner_none",
                  0.6088106560352257
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "test_record_score_gt_best",
                  0.6696849035390293
                ],
                [
                  "test_propose_no_tunables",
                  "test_record_score_gt_best",
                  0.6145296290602158
                ],
                [
                  "test___init__default",
                  "test_record_score_lt_best",
                  0.6683844196935754
                ],
                [
                  "test___init__custom",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.6304811656663586
                ],
                [
                  "test___init__default",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.5986210685808225
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_propose_tunable_cardinality_eq_one",
                  0.8500828657848896
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_handle_error_errors_lt_max_errors",
                  0.6195605045959748
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "test_run_score",
                  0.6595485183732583
                ],
                [
                  "test_record_score_lt_best",
                  "test_run_score_none",
                  0.7537239954411329
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_record_score_gt_best_tuner_none",
                  0.7105287965191087
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_handle_error_errors_lt_max_errors",
                  0.5669750589755439
                ],
                [
                  "test__normalize_maximize_false",
                  "test_run_score_none",
                  0.7543009114977721
                ],
                [
                  "test__normalize_maximize_false",
                  "test_propose_raise_error",
                  0.6384597330354935
                ],
                [
                  "test__normalize_maximize_true",
                  "test__normalize_maximize_false",
                  0.950950166988625
                ],
                [
                  "test___init__default",
                  "test_record_score_gt_best_tuner_none",
                  0.6707982231323935
                ],
                [
                  "test__normalize_maximize_true",
                  "test_record_score_gt_best",
                  0.6885383336061897
                ],
                [
                  "test___init__custom",
                  "test_run_score",
                  0.6237004802495546
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_record_score_lt_best",
                  0.7170551102316277
                ],
                [
                  "test__normalize_maximize_true",
                  "test_propose_raise_error",
                  0.5547469807060803
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_run_score_none",
                  0.6704316555909413
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "test_handle_error_errors_gt_max_errors",
                  0.8943363209720764
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_propose_no_tunables",
                  0.5738045840530311
                ],
                [
                  "test__normalize_maximize_true",
                  "test_run_score",
                  0.7515082937181302
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "test_record_score_lt_best",
                  0.9742282588494721
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_record_score_lt_best",
                  0.7883999015486396
                ],
                [
                  "test___init__default",
                  "test_propose_tunable_cardinality_eq_one",
                  0.6414673548464146
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test__get_next_tunable_name_normalized_scores_none",
                  0.8166572927845973
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_propose_tunable_cardinality_eq_one",
                  0.8817626322110943
                ],
                [
                  "test__normalize_maximize_false",
                  "test_record_score_is_none",
                  0.7829468049214037
                ],
                [
                  "test___init__custom",
                  "test_record_score_is_none",
                  0.5695246246414023
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.653202287462664
                ],
                [
                  "test_propose_raise_error",
                  "test_record_score_gt_best_tuner_none",
                  0.7397313738697116
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_run_score_none",
                  0.7167889562256037
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "test_run_score",
                  0.7108946097717999
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "test_run_score_none",
                  0.736617079417704
                ],
                [
                  "test___init__default",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.5388680365987359
                ],
                [
                  "test__make_dumpable",
                  "test_run_score",
                  0.6064877196075534
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_record_score_lt_best",
                  0.5859781224201169
                ],
                [
                  "test___init__default",
                  "test__get_next_tunable_name_normalized_scores",
                  0.47389765913960163
                ],
                [
                  "test__make_dumpable",
                  "test_record_score_is_none",
                  0.6219222976530863
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "test_record_score_gt_best",
                  0.6741340322758603
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_propose_tuner_is_none",
                  0.6614433827762279
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_record_score_gt_best_tuner_none",
                  0.7111576136987214
                ],
                [
                  "test__normalize_maximize_true",
                  "test___init__default",
                  0.5471632899240423
                ],
                [
                  "test_record_score_gt_best",
                  "test_record_score_lt_best",
                  0.992059865533026
                ],
                [
                  "test_record_score_gt_best",
                  "test_run_score_none",
                  0.7594227525283196
                ],
                [
                  "test___init__default",
                  "test___init__custom",
                  0.9672267077591795
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_handle_error_errors_lt_max_errors",
                  0.6402014458225234
                ],
                [
                  "test_record_score_is_none",
                  "test_record_score_gt_best_tuner_none",
                  0.7861315270494672
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_run_score_none",
                  0.5552048515498275
                ],
                [
                  "test___init__default",
                  "test_handle_error_errors_lt_max_errors",
                  0.5348719726114437
                ],
                [
                  "test__make_dumpable",
                  "test_propose_raise_error",
                  0.50252274436936
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_record_score_gt_best",
                  0.6330286761020262
                ],
                [
                  "test__normalize_maximize_true",
                  "test_handle_error_errors_gt_max_errors",
                  0.7100238714038415
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "test_record_score_is_none",
                  0.8366056647469058
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_propose_raise_error",
                  0.888231183368655
                ],
                [
                  "test_propose_raise_error",
                  "test_handle_error_errors_lt_max_errors",
                  0.6560022041711091
                ],
                [
                  "test___init__custom",
                  "test_record_score_gt_best",
                  0.6788889013312714
                ],
                [
                  "test___init__custom",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.5704170558202759
                ],
                [
                  "test__make_dumpable",
                  "test_handle_error_errors_lt_max_errors",
                  0.4863734571139201
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.859810402003104
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.6590151600065964
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_run_score",
                  0.6840920995686772
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_record_score_is_none",
                  0.7263914585303478
                ],
                [
                  "test__normalize_maximize_true",
                  "test__make_dumpable",
                  0.6409882014228715
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_record_score_lt_best",
                  0.7441238056232565
                ],
                [
                  "test__normalize_maximize_false",
                  "test__make_dumpable",
                  0.6517676007950739
                ],
                [
                  "test___init__default",
                  "test_run_score_none",
                  0.5834186515446472
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_record_score_gt_best_tuner_none",
                  0.7394717780175617
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_handle_error_errors_lt_max_errors",
                  0.5297181217169223
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_record_score_gt_best",
                  0.7180937249071625
                ],
                [
                  "test___init__default",
                  "test_propose_raise_error",
                  0.4959514170040486
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.6819794330953245
                ],
                [
                  "test___init__default",
                  "test_record_score_is_none",
                  0.549254026522672
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_propose_tuner_is_none",
                  0.7020695628778482
                ],
                [
                  "test__make_dumpable",
                  "test__get_next_tunable_name_normalized_scores",
                  0.4668385317349118
                ],
                [
                  "test_propose_raise_error",
                  "test_record_score_gt_best",
                  0.7593285866179788
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_record_score_gt_best",
                  0.7362936253372494
                ],
                [
                  "test__make_dumpable",
                  "test_record_score_gt_best",
                  0.5963333865770108
                ],
                [
                  "test__normalize_maximize_true",
                  "test__get_next_tunable_name_normalized_scores_none",
                  0.5485164409123013
                ],
                [
                  "test__normalize_maximize_false",
                  "test_handle_error_errors_lt_max_errors",
                  0.7101150705021845
                ],
                [
                  "test___init__custom",
                  "test_handle_error_errors_lt_max_errors",
                  0.567661480328652
                ],
                [
                  "test___init__default",
                  "test__get_next_tunable_name_normalized_scores_none",
                  0.4553539982530057
                ],
                [
                  "test___init__custom",
                  "test_record_score_lt_best",
                  0.6776461969012495
                ],
                [
                  "test___init__default",
                  "test_propose_no_tunables",
                  0.41346547623661717
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "test_record_score_lt_best",
                  0.6705143480707935
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "test_run_score_none",
                  0.6872181022127746
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_record_score_lt_best",
                  0.7358296280137963
                ],
                [
                  "test_record_score_gt_best_tuner_none",
                  "test_run_score",
                  0.7577389427702373
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "test_record_score_is_none",
                  0.7757403734194728
                ],
                [
                  "test__normalize_maximize_true",
                  "test_propose_no_tunables",
                  0.7153292293991267
                ],
                [
                  "test_propose_no_tunables",
                  "test_handle_error_errors_lt_max_errors",
                  0.6823550876255453
                ],
                [
                  "test__normalize_maximize_false",
                  "test__get_next_tunable_name_normalized_scores",
                  0.6164113028235356
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_handle_error_errors_gt_max_errors",
                  0.6396172759431786
                ],
                [
                  "test_record_score_is_none",
                  "test_record_score_gt_best",
                  0.8178323825330979
                ],
                [
                  "test__normalize_maximize_false",
                  "test___init__custom",
                  0.6076582396176432
                ],
                [
                  "test__normalize_maximize_false",
                  "test_record_score_gt_best",
                  0.7452862391716879
                ],
                [
                  "test___init__custom",
                  "test__get_next_tunable_name_normalized_scores",
                  0.5163018643057138
                ],
                [
                  "test_propose_no_tunables",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.5513016003694773
                ],
                [
                  "test___init__custom",
                  "test_propose_tuner_is_none",
                  0.5396938285314368
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_propose_no_tunables",
                  0.5518656363100827
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.6785644666866483
                ],
                [
                  "test_record_score_is_none",
                  "test_record_score_lt_best",
                  0.824378055142552
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_handle_error_errors_gt_max_errors",
                  0.592717843319236
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_record_score_is_none",
                  0.7306332459229882
                ],
                [
                  "test__make_dumpable",
                  "test_propose_no_tunables",
                  0.4751909633114915
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_run_score",
                  0.7479150667291697
                ],
                [
                  "test___init__custom",
                  "test_record_score_gt_best_tuner_none",
                  0.6824870766926067
                ],
                [
                  "test_record_score_gt_best",
                  "test_run_score",
                  0.7909445942553592
                ],
                [
                  "test__normalize_maximize_true",
                  "test___init__custom",
                  0.5807062980385669
                ],
                [
                  "test__normalize_maximize_false",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.6043159308376889
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_run_score",
                  0.7208528602304
                ],
                [
                  "test___init__custom",
                  "test_propose_tunable_cardinality_eq_one",
                  0.6744487511151742
                ],
                [
                  "test___init__default",
                  "test_propose_tuner_is_none",
                  0.5192631764671941
                ],
                [
                  "test_propose_no_tunables",
                  "test_propose_raise_error",
                  0.6798326580428994
                ],
                [
                  "test__normalize_maximize_false",
                  "test__get_next_tunable_name_normalized_scores_none",
                  0.5648912795262774
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_propose_tuner_is_none",
                  0.7777720925793946
                ],
                [
                  "test___init__custom",
                  "test__make_dumpable",
                  0.460480917362921
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_propose_tunable_cardinality_eq_one",
                  0.6786010506923922
                ],
                [
                  "test___init__default",
                  "test__make_dumpable",
                  0.43115359938791364
                ],
                [
                  "test_propose_tuner_is_none",
                  "test_record_score_gt_best",
                  0.7301474350870066
                ],
                [
                  "test_propose_no_tunables",
                  "test_run_score_none",
                  0.6342986049928577
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_record_score_is_none",
                  0.7082791945636353
                ],
                [
                  "test__normalize_maximize_true",
                  "test_run_score_none",
                  0.7198194288984732
                ],
                [
                  "test__normalize_maximize_true",
                  "test_handle_error_errors_lt_max_errors",
                  0.678914604256241
                ],
                [
                  "test_record_score_is_none",
                  "test_run_score",
                  0.800137821786529
                ],
                [
                  "test__make_dumpable",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.5404927742813559
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_handle_error_errors_lt_max_errors",
                  0.5889256434390339
                ],
                [
                  "test___init__default",
                  "test_run_score",
                  0.5978501971729762
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_propose_tuner_is_none",
                  0.646033504101978
                ],
                [
                  "test__get_next_tunable_name_normalized_scores_none",
                  "test_record_score_gt_best",
                  0.586586240476685
                ],
                [
                  "test__normalize_maximize_false",
                  "test_propose_no_tunables",
                  0.7209644471646631
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_handle_error_errors_gt_max_errors",
                  0.6215171155360201
                ],
                [
                  "test___init__custom",
                  "test_propose_no_tunables",
                  0.44490696038882305
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_record_score_is_none",
                  0.6985974689154998
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_run_score",
                  0.7095654952933755
                ],
                [
                  "test___init__default",
                  "test_handle_error_errors_gt_max_errors",
                  0.5027387025839043
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_record_score_gt_best",
                  0.7924086955067468
                ],
                [
                  "test__normalize_maximize_true",
                  "test__get_next_tunable_name_normalized_scores",
                  0.5895686560721992
                ],
                [
                  "test__make_dumpable",
                  "test_record_score_gt_best_tuner_none",
                  0.5634780583277221
                ],
                [
                  "test_propose_normalized_scores_gt_tunable_names",
                  "test_propose_tuner_is_none",
                  0.8210295403777135
                ],
                [
                  "test__normalize_maximize_true",
                  "test_propose_tunable_cardinality_eq_one",
                  0.5884749098726216
                ],
                [
                  "test_propose_no_tunables",
                  "test_propose_normalized_scores_gt_tunable_names",
                  0.5984437489312765
                ],
                [
                  "test_propose_normalized_scores_lt_tunable_names",
                  "test_propose_raise_error",
                  0.7568915678899327
                ],
                [
                  "test_propose_tunable_cardinality_eq_one",
                  "test_handle_error_errors_gt_max_errors",
                  0.6140608902482314
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_run_score_none",
                  0.5966981630575634
                ],
                [
                  "test__normalize_maximize_true",
                  "test_propose_normalized_scores_lt_tunable_names",
                  0.5479558280269691
                ],
                [
                  "test__get_next_tunable_name_normalized_scores",
                  "test_record_score_lt_best",
                  0.6357142857142857
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "test_run_score_none",
                  0.6372211541173777
                ],
                [
                  "test_handle_error_errors_gt_max_errors",
                  "test_record_score_gt_best_tuner_none",
                  0.6391457135306796
                ],
                [
                  "test_handle_error_errors_lt_max_errors",
                  "test_record_score_lt_best",
                  0.6837766485121476
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___init__custom",
                "false"
              ],
              [
                "test_record_score_lt_best",
                "false"
              ],
              [
                "test_run_score_none",
                "false"
              ],
              [
                "test_propose_normalized_scores_lt_tunable_names",
                "false"
              ],
              [
                "test_propose_no_tunables",
                "false"
              ],
              [
                "test_propose_tunable_cardinality_eq_one",
                "false"
              ],
              [
                "test_propose_tuner_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best_tuner_none",
                "false"
              ],
              [
                "test__normalize_maximize_true",
                "false"
              ],
              [
                "test__make_dumpable",
                "false"
              ],
              [
                "test___init__default",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores",
                "false"
              ],
              [
                "test_run_score",
                "false"
              ],
              [
                "test_record_score_is_none",
                "false"
              ],
              [
                "test_record_score_gt_best",
                "false"
              ],
              [
                "test_propose_normalized_scores_gt_tunable_names",
                "false"
              ],
              [
                "test_handle_error_errors_gt_max_errors",
                "false"
              ],
              [
                "test__normalize_maximize_false",
                "false"
              ],
              [
                "test_propose_raise_error",
                "false"
              ],
              [
                "test_handle_error_errors_lt_max_errors",
                "false"
              ],
              [
                "test__get_next_tunable_name_normalized_scores_none",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 21
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_best.py",
    "testCases": [
      {
        "name": "TestBestKReward",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_select_less_scores_than_k_min",
                  "[]"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "[]"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_select_less_scores_than_k_min",
                  "[PyAssertStatement]"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "[PyAssertStatement]"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "[]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_lt_k",
                "false"
              ],
              [
                "test_compute_rewards_duplicates",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_lt_k",
                "false"
              ],
              [
                "test_compute_rewards_duplicates",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                []
              ],
              [
                "test_compute_rewards_lt_k",
                []
              ],
              [
                "test_compute_rewards_duplicates",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ],
              [
                "test_select_more_scores_than_k_min",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_lt_k",
                "false"
              ],
              [
                "test_compute_rewards_duplicates",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_lt_k",
                "false"
              ],
              [
                "test_compute_rewards_duplicates",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_select_less_scores_than_k_min",
                  "0"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "0"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_select_less_scores_than_k_min",
                  "0"
                ],
                [
                  "test_compute_rewards_lt_k",
                  "0"
                ],
                [
                  "test_compute_rewards_duplicates",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_lt_k",
                "false"
              ],
              [
                "test_compute_rewards_duplicates",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_lt_k",
                "false"
              ],
              [
                "test_compute_rewards_duplicates",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "2"
              ],
              [
                "test_compute_rewards_lt_k",
                "1"
              ],
              [
                "test_compute_rewards_duplicates",
                "1"
              ],
              [
                "test___init__",
                "2"
              ],
              [
                "test_compute_rewards_gt_k",
                "1"
              ],
              [
                "test_select_more_scores_than_k_min",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                [
                  "choice_rewards",
                  "selector",
                  "best",
                  "choice_scores"
                ]
              ],
              [
                "test_compute_rewards_lt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ],
              [
                "test_compute_rewards_duplicates",
                [
                  "scores",
                  "selector",
                  "k",
                  "choices",
                  "rewards"
                ]
              ],
              [
                "test___init__",
                [
                  "selector"
                ]
              ],
              [
                "test_compute_rewards_gt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ],
              [
                "test_select_more_scores_than_k_min",
                [
                  "choice_rewards",
                  "choice_rewards_expected",
                  "selector",
                  "best",
                  "choice_scores",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                []
              ],
              [
                "test_compute_rewards_lt_k",
                []
              ],
              [
                "test_compute_rewards_duplicates",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ],
              [
                "test_select_more_scores_than_k_min",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7435339713911255,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compute_rewards_gt_k",
                  "test_compute_rewards_duplicates",
                  0.9310885897373881
                ],
                [
                  "test___init__",
                  "test_compute_rewards_lt_k",
                  0.7447890930208941
                ],
                [
                  "test_compute_rewards_lt_k",
                  "test_compute_rewards_gt_k",
                  0.839428334104804
                ],
                [
                  "test_compute_rewards_gt_k",
                  "test_select_less_scores_than_k_min",
                  0.7980985477654311
                ],
                [
                  "test_compute_rewards_gt_k",
                  "test_select_more_scores_than_k_min",
                  0.8296358657834666
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "test_select_less_scores_than_k_min",
                  0.9305997184772675
                ],
                [
                  "test___init__",
                  "test_select_more_scores_than_k_min",
                  0.6199013315628588
                ],
                [
                  "test_compute_rewards_duplicates",
                  "test_select_more_scores_than_k_min",
                  0.8222151125249355
                ],
                [
                  "test_compute_rewards_lt_k",
                  "test_select_more_scores_than_k_min",
                  0.7345239675274844
                ],
                [
                  "test___init__",
                  "test_compute_rewards_gt_k",
                  0.6295895528665141
                ],
                [
                  "test_compute_rewards_lt_k",
                  "test_compute_rewards_duplicates",
                  0.713123038742591
                ],
                [
                  "test___init__",
                  "test_compute_rewards_duplicates",
                  0.5376006881293212
                ],
                [
                  "test_compute_rewards_duplicates",
                  "test_select_less_scores_than_k_min",
                  0.7759705586199586
                ],
                [
                  "test___init__",
                  "test_select_less_scores_than_k_min",
                  0.5565229650387093
                ],
                [
                  "test_compute_rewards_lt_k",
                  "test_select_less_scores_than_k_min",
                  0.689922206965259
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_lt_k",
                "false"
              ],
              [
                "test_compute_rewards_duplicates",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "TestBestKVelocity",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compute_rewards_kt_k",
                  "[]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compute_rewards_kt_k",
                  "[]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compute_rewards_kt_k",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compute_rewards_kt_k",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "1"
              ],
              [
                "test_compute_rewards_gt_k",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ],
              [
                "test_compute_rewards_gt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9773327865570935,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compute_rewards_kt_k",
                  "test_compute_rewards_gt_k",
                  0.9773327865570935
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_pure.py",
    "testCases": [
      {
        "name": "TestPureBestKVelocity",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_select_less_scores_than_k_min",
                  "[]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "[]"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_select_less_scores_than_k_min",
                  "[PyAssertStatement]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "[]"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_compute_rewards_kt_k",
                []
              ],
              [
                "test_select_more_scores_than_k_min",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_select_less_scores_than_k_min",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "0"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_select_less_scores_than_k_min",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_compute_rewards_kt_k",
                  "0"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "2"
              ],
              [
                "test_compute_rewards_gt_k",
                "1"
              ],
              [
                "test___init__",
                "2"
              ],
              [
                "test_compute_rewards_kt_k",
                "1"
              ],
              [
                "test_select_more_scores_than_k_min",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                [
                  "choice_rewards",
                  "selector",
                  "best",
                  "choice_scores"
                ]
              ],
              [
                "test_compute_rewards_gt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ],
              [
                "test___init__",
                [
                  "selector"
                ]
              ],
              [
                "test_compute_rewards_kt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ],
              [
                "test_select_more_scores_than_k_min",
                [
                  "choice_rewards",
                  "selector",
                  "best",
                  "choice_scores"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_compute_rewards_kt_k",
                []
              ],
              [
                "test_select_more_scores_than_k_min",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7113692741338589,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test_compute_rewards_gt_k",
                  0.6255931977089313
                ],
                [
                  "test_compute_rewards_kt_k",
                  "test_select_less_scores_than_k_min",
                  0.646839182561028
                ],
                [
                  "test_compute_rewards_gt_k",
                  "test_select_more_scores_than_k_min",
                  0.8058977260948481
                ],
                [
                  "test___init__",
                  "test_select_less_scores_than_k_min",
                  0.5566224351949802
                ],
                [
                  "test_compute_rewards_kt_k",
                  "test_compute_rewards_gt_k",
                  0.9803331793024016
                ],
                [
                  "test_compute_rewards_kt_k",
                  "test_select_more_scores_than_k_min",
                  0.8066777606656446
                ],
                [
                  "test_compute_rewards_gt_k",
                  "test_select_less_scores_than_k_min",
                  0.6207776359124388
                ],
                [
                  "test___init__",
                  "test_select_more_scores_than_k_min",
                  0.5442644632695464
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "test_select_less_scores_than_k_min",
                  0.8868082772497731
                ],
                [
                  "test___init__",
                  "test_compute_rewards_kt_k",
                  0.6398788833789972
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_ucb1.py",
    "testCases": [
      {
        "name": "TestUCB1",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bandit",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bandit",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bandit",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bandit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bandit",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bandit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bandit",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bandit",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                [
                  "choice_rewards",
                  "selector",
                  "best",
                  "choices",
                  "call_rewards"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bandit",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_test_tunable.py",
    "testCases": [
      {
        "name": "TestTunable",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_transform_list_of_dicts",
                  "[]"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_from_dict",
                  "[]"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "[]"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_pd_df",
                  "[]"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_empty_dict",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_simple_list",
                  "[]"
                ],
                [
                  "test_get_defaults",
                  "[]"
                ],
                [
                  "test___init__with_given_names",
                  "[]"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "[]"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_array_like_list",
                  "[]"
                ],
                [
                  "test_sample",
                  "[]"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_valid_dict",
                  "[]"
                ],
                [
                  "test_transform_empty_list",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_transform_list_of_dicts",
                  "[]"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "[]"
                ],
                [
                  "test_from_dict",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "[]"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "[]"
                ],
                [
                  "test_transform_pd_df",
                  "[]"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "[]"
                ],
                [
                  "test_transform_empty_dict",
                  "[]"
                ],
                [
                  "test_transform_simple_list",
                  "[]"
                ],
                [
                  "test_get_defaults",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__with_given_names",
                  "[PyAssertStatement]"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "[]"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "[]"
                ],
                [
                  "test_transform_array_like_list",
                  "[]"
                ],
                [
                  "test_sample",
                  "[PyAssertStatement]"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "[]"
                ],
                [
                  "test_transform_valid_dict",
                  "[]"
                ],
                [
                  "test_transform_empty_list",
                  "[]"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_transform_list_of_dicts",
                  "false"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "false"
                ],
                [
                  "test_from_dict",
                  "false"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_pd_df",
                  "false"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "false"
                ],
                [
                  "test_transform_empty_dict",
                  "false"
                ],
                [
                  "test_transform_simple_list",
                  "false"
                ],
                [
                  "test_get_defaults",
                  "false"
                ],
                [
                  "test___init__with_given_names",
                  "false"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "false"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "false"
                ],
                [
                  "test_transform_array_like_list",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "false"
                ],
                [
                  "test_transform_valid_dict",
                  "false"
                ],
                [
                  "test_transform_empty_list",
                  "false"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_transform_list_of_dicts",
                  "false"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "false"
                ],
                [
                  "test_from_dict",
                  "false"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_pd_df",
                  "false"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "false"
                ],
                [
                  "test_transform_empty_dict",
                  "false"
                ],
                [
                  "test_transform_simple_list",
                  "false"
                ],
                [
                  "test_get_defaults",
                  "false"
                ],
                [
                  "test___init__with_given_names",
                  "false"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "false"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "false"
                ],
                [
                  "test_transform_array_like_list",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "false"
                ],
                [
                  "test_transform_valid_dict",
                  "false"
                ],
                [
                  "test_transform_empty_list",
                  "false"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_transform_list_of_dicts",
                  "false"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "false"
                ],
                [
                  "test_from_dict",
                  "false"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_pd_df",
                  "false"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "false"
                ],
                [
                  "test_transform_empty_dict",
                  "false"
                ],
                [
                  "test_transform_simple_list",
                  "false"
                ],
                [
                  "test_get_defaults",
                  "false"
                ],
                [
                  "test___init__with_given_names",
                  "false"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "false"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "false"
                ],
                [
                  "test_transform_array_like_list",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "false"
                ],
                [
                  "test_transform_valid_dict",
                  "false"
                ],
                [
                  "test_transform_empty_list",
                  "false"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_transform_list_of_dicts",
                  "false"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "false"
                ],
                [
                  "test_from_dict",
                  "false"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "false"
                ],
                [
                  "test_transform_pd_df",
                  "false"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "false"
                ],
                [
                  "test_transform_empty_dict",
                  "false"
                ],
                [
                  "test_transform_simple_list",
                  "false"
                ],
                [
                  "test_get_defaults",
                  "false"
                ],
                [
                  "test___init__with_given_names",
                  "false"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "false"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "false"
                ],
                [
                  "test_transform_array_like_list",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "false"
                ],
                [
                  "test_transform_valid_dict",
                  "false"
                ],
                [
                  "test_transform_empty_list",
                  "false"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "false"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "false"
              ],
              [
                "test_from_dict",
                "false"
              ],
              [
                "test_transform_valid_pandas_series",
                "false"
              ],
              [
                "test_transform_invalid_pandas_series",
                "false"
              ],
              [
                "test_transform_pd_df",
                "false"
              ],
              [
                "test_inverse_transform_invalid_data",
                "false"
              ],
              [
                "test_transform_empty_dict",
                "false"
              ],
              [
                "test_transform_simple_list",
                "false"
              ],
              [
                "test_get_defaults",
                "false"
              ],
              [
                "test___init__with_given_names",
                "false"
              ],
              [
                "test_inverse_transform_valid_data",
                "false"
              ],
              [
                "test_from_dict_not_a_dict",
                "false"
              ],
              [
                "test_transform_array_like_list",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "false"
              ],
              [
                "test_transform_valid_dict",
                "false"
              ],
              [
                "test_transform_empty_list",
                "false"
              ],
              [
                "test_transform_simple_invalid_list",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "false"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "false"
              ],
              [
                "test_from_dict",
                "false"
              ],
              [
                "test_transform_valid_pandas_series",
                "false"
              ],
              [
                "test_transform_invalid_pandas_series",
                "false"
              ],
              [
                "test_transform_pd_df",
                "false"
              ],
              [
                "test_inverse_transform_invalid_data",
                "false"
              ],
              [
                "test_transform_empty_dict",
                "false"
              ],
              [
                "test_transform_simple_list",
                "false"
              ],
              [
                "test_get_defaults",
                "false"
              ],
              [
                "test___init__with_given_names",
                "false"
              ],
              [
                "test_inverse_transform_valid_data",
                "false"
              ],
              [
                "test_from_dict_not_a_dict",
                "false"
              ],
              [
                "test_transform_array_like_list",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "false"
              ],
              [
                "test_transform_valid_dict",
                "false"
              ],
              [
                "test_transform_empty_list",
                "false"
              ],
              [
                "test_transform_simple_invalid_list",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_transform_list_of_dicts",
                []
              ],
              [
                "test_transform_invalid_dict_one_missing",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ],
              [
                "test_from_dict",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp",
                  "self.instance"
                ]
              ],
              [
                "test_transform_valid_pandas_series",
                []
              ],
              [
                "test_transform_invalid_pandas_series",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_pd_df",
                []
              ],
              [
                "test_inverse_transform_invalid_data",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_empty_dict",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_simple_list",
                []
              ],
              [
                "test_get_defaults",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ],
              [
                "test___init__with_given_names",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ],
              [
                "test_inverse_transform_valid_data",
                []
              ],
              [
                "test_from_dict_not_a_dict",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp",
                  "self.instance"
                ]
              ],
              [
                "test_transform_array_like_list",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test_transform_list_of_invalid_dicts",
                [
                  "self.chp"
                ]
              ],
              [
                "test_transform_valid_dict",
                []
              ],
              [
                "test_transform_empty_list",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_simple_invalid_list",
                [
                  "self.chp",
                  "self.bhp",
                  "self.ihp"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "false"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "false"
              ],
              [
                "test_from_dict",
                "false"
              ],
              [
                "test_transform_valid_pandas_series",
                "false"
              ],
              [
                "test_transform_invalid_pandas_series",
                "false"
              ],
              [
                "test_transform_pd_df",
                "false"
              ],
              [
                "test_inverse_transform_invalid_data",
                "false"
              ],
              [
                "test_transform_empty_dict",
                "false"
              ],
              [
                "test_transform_simple_list",
                "false"
              ],
              [
                "test_get_defaults",
                "false"
              ],
              [
                "test___init__with_given_names",
                "false"
              ],
              [
                "test_inverse_transform_valid_data",
                "false"
              ],
              [
                "test_from_dict_not_a_dict",
                "false"
              ],
              [
                "test_transform_array_like_list",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "false"
              ],
              [
                "test_transform_valid_dict",
                "false"
              ],
              [
                "test_transform_empty_list",
                "false"
              ],
              [
                "test_transform_simple_invalid_list",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "false"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "false"
              ],
              [
                "test_from_dict",
                "false"
              ],
              [
                "test_transform_valid_pandas_series",
                "false"
              ],
              [
                "test_transform_invalid_pandas_series",
                "false"
              ],
              [
                "test_transform_pd_df",
                "false"
              ],
              [
                "test_inverse_transform_invalid_data",
                "false"
              ],
              [
                "test_transform_empty_dict",
                "false"
              ],
              [
                "test_transform_simple_list",
                "false"
              ],
              [
                "test_get_defaults",
                "false"
              ],
              [
                "test___init__with_given_names",
                "false"
              ],
              [
                "test_inverse_transform_valid_data",
                "false"
              ],
              [
                "test_from_dict_not_a_dict",
                "false"
              ],
              [
                "test_transform_array_like_list",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "false"
              ],
              [
                "test_transform_valid_dict",
                "false"
              ],
              [
                "test_transform_empty_list",
                "false"
              ],
              [
                "test_transform_simple_invalid_list",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_transform_list_of_dicts",
                  "0"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "0"
                ],
                [
                  "test_from_dict",
                  "0"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "0"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "0"
                ],
                [
                  "test_transform_pd_df",
                  "0"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "0"
                ],
                [
                  "test_transform_empty_dict",
                  "0"
                ],
                [
                  "test_transform_simple_list",
                  "0"
                ],
                [
                  "test_get_defaults",
                  "0"
                ],
                [
                  "test___init__with_given_names",
                  "0"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "0"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "0"
                ],
                [
                  "test_transform_array_like_list",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "0"
                ],
                [
                  "test_transform_valid_dict",
                  "0"
                ],
                [
                  "test_transform_empty_list",
                  "0"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_transform_list_of_dicts",
                  "0"
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "0"
                ],
                [
                  "test_from_dict",
                  "0"
                ],
                [
                  "test_transform_valid_pandas_series",
                  "0"
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "0"
                ],
                [
                  "test_transform_pd_df",
                  "0"
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "0"
                ],
                [
                  "test_transform_empty_dict",
                  "0"
                ],
                [
                  "test_transform_simple_list",
                  "0"
                ],
                [
                  "test_get_defaults",
                  "0"
                ],
                [
                  "test___init__with_given_names",
                  "0"
                ],
                [
                  "test_inverse_transform_valid_data",
                  "0"
                ],
                [
                  "test_from_dict_not_a_dict",
                  "0"
                ],
                [
                  "test_transform_array_like_list",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "0"
                ],
                [
                  "test_transform_valid_dict",
                  "0"
                ],
                [
                  "test_transform_empty_list",
                  "0"
                ],
                [
                  "test_transform_simple_invalid_list",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "false"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "false"
              ],
              [
                "test_from_dict",
                "false"
              ],
              [
                "test_transform_valid_pandas_series",
                "false"
              ],
              [
                "test_transform_invalid_pandas_series",
                "false"
              ],
              [
                "test_transform_pd_df",
                "false"
              ],
              [
                "test_inverse_transform_invalid_data",
                "false"
              ],
              [
                "test_transform_empty_dict",
                "false"
              ],
              [
                "test_transform_simple_list",
                "false"
              ],
              [
                "test_get_defaults",
                "false"
              ],
              [
                "test___init__with_given_names",
                "false"
              ],
              [
                "test_inverse_transform_valid_data",
                "false"
              ],
              [
                "test_from_dict_not_a_dict",
                "false"
              ],
              [
                "test_transform_array_like_list",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "false"
              ],
              [
                "test_transform_valid_dict",
                "false"
              ],
              [
                "test_transform_empty_list",
                "false"
              ],
              [
                "test_transform_simple_invalid_list",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "false"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "false"
              ],
              [
                "test_from_dict",
                "false"
              ],
              [
                "test_transform_valid_pandas_series",
                "false"
              ],
              [
                "test_transform_invalid_pandas_series",
                "false"
              ],
              [
                "test_transform_pd_df",
                "false"
              ],
              [
                "test_inverse_transform_invalid_data",
                "false"
              ],
              [
                "test_transform_empty_dict",
                "false"
              ],
              [
                "test_transform_simple_list",
                "false"
              ],
              [
                "test_get_defaults",
                "false"
              ],
              [
                "test___init__with_given_names",
                "false"
              ],
              [
                "test_inverse_transform_valid_data",
                "false"
              ],
              [
                "test_from_dict_not_a_dict",
                "false"
              ],
              [
                "test_transform_array_like_list",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "false"
              ],
              [
                "test_transform_valid_dict",
                "false"
              ],
              [
                "test_transform_empty_list",
                "false"
              ],
              [
                "test_transform_simple_invalid_list",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "4"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "1"
              ],
              [
                "test_from_dict",
                "7"
              ],
              [
                "test_transform_valid_pandas_series",
                "4"
              ],
              [
                "test_transform_invalid_pandas_series",
                "1"
              ],
              [
                "test_transform_pd_df",
                "4"
              ],
              [
                "test_inverse_transform_invalid_data",
                "1"
              ],
              [
                "test_transform_empty_dict",
                "1"
              ],
              [
                "test_transform_simple_list",
                "4"
              ],
              [
                "test_get_defaults",
                "1"
              ],
              [
                "test___init__with_given_names",
                "1"
              ],
              [
                "test_inverse_transform_valid_data",
                "4"
              ],
              [
                "test_from_dict_not_a_dict",
                "1"
              ],
              [
                "test_transform_array_like_list",
                "4"
              ],
              [
                "test_sample",
                "4"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "1"
              ],
              [
                "test_transform_valid_dict",
                "4"
              ],
              [
                "test_transform_empty_list",
                "1"
              ],
              [
                "test_transform_simple_invalid_list",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                [
                  "values_list_dict",
                  "results"
                ]
              ],
              [
                "test_transform_invalid_dict_one_missing",
                [
                  "values"
                ]
              ],
              [
                "test_from_dict",
                [
                  "result",
                  "hyperparameters",
                  "expected_tunable_hp"
                ]
              ],
              [
                "test_transform_valid_pandas_series",
                [
                  "result",
                  "values"
                ]
              ],
              [
                "test_transform_invalid_pandas_series",
                [
                  "values"
                ]
              ],
              [
                "test_transform_pd_df",
                [
                  "result",
                  "values"
                ]
              ],
              [
                "test_inverse_transform_invalid_data",
                [
                  "values"
                ]
              ],
              [
                "test_transform_empty_dict",
                []
              ],
              [
                "test_transform_simple_list",
                [
                  "result",
                  "values"
                ]
              ],
              [
                "test_get_defaults",
                [
                  "ihp",
                  "result",
                  "hyperparams",
                  "chp",
                  "bhp"
                ]
              ],
              [
                "test___init__with_given_names",
                []
              ],
              [
                "test_inverse_transform_valid_data",
                [
                  "result",
                  "values",
                  "expected_result"
                ]
              ],
              [
                "test_from_dict_not_a_dict",
                []
              ],
              [
                "test_transform_array_like_list",
                [
                  "result",
                  "values"
                ]
              ],
              [
                "test_sample",
                [
                  "result",
                  "expected_result"
                ]
              ],
              [
                "test_transform_list_of_invalid_dicts",
                [
                  "values_list_dict"
                ]
              ],
              [
                "test_transform_valid_dict",
                [
                  "values_dict",
                  "result"
                ]
              ],
              [
                "test_transform_empty_list",
                []
              ],
              [
                "test_transform_simple_invalid_list",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_transform_list_of_dicts",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_invalid_dict_one_missing",
                [
                  "self.instance"
                ]
              ],
              [
                "test_from_dict",
                []
              ],
              [
                "test_transform_valid_pandas_series",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_invalid_pandas_series",
                [
                  "self.instance"
                ]
              ],
              [
                "test_transform_pd_df",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_inverse_transform_invalid_data",
                [
                  "self.instance"
                ]
              ],
              [
                "test_transform_empty_dict",
                [
                  "self.instance"
                ]
              ],
              [
                "test_transform_simple_list",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_get_defaults",
                [
                  "self.instance"
                ]
              ],
              [
                "test___init__with_given_names",
                [
                  "self.instance"
                ]
              ],
              [
                "test_inverse_transform_valid_data",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_from_dict_not_a_dict",
                []
              ],
              [
                "test_transform_array_like_list",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_sample",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_list_of_invalid_dicts",
                [
                  "self.chp",
                  "self.instance"
                ]
              ],
              [
                "test_transform_valid_dict",
                [
                  "self.chp",
                  "self.bhp",
                  "self.instance",
                  "self.ihp"
                ]
              ],
              [
                "test_transform_empty_list",
                [
                  "self.instance"
                ]
              ],
              [
                "test_transform_simple_invalid_list",
                [
                  "self.instance"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.44691293848879604,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_transform_list_of_dicts",
                  "test_from_dict_not_a_dict",
                  0.2762874885599715
                ],
                [
                  "test_transform_simple_invalid_list",
                  "test_from_dict_not_a_dict",
                  0.49097312954577255
                ],
                [
                  "test_transform_array_like_list",
                  "test_transform_simple_list",
                  0.7264986749301918
                ],
                [
                  "test_transform_valid_dict",
                  "test_from_dict_not_a_dict",
                  0.3091420111676559
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_transform_simple_list",
                  0.6291709245861588
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_inverse_transform_valid_data",
                  0.37013225451869924
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_transform_simple_invalid_list",
                  0.6280549375830877
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_list_of_invalid_dicts",
                  0.5009946959434053
                ],
                [
                  "test_transform_simple_list",
                  "test_sample",
                  0.6224275133286804
                ],
                [
                  "test___init__with_given_names",
                  "test_sample",
                  0.3133041799951829
                ],
                [
                  "test_transform_empty_dict",
                  "test_get_defaults",
                  0.12857142857142856
                ],
                [
                  "test_transform_empty_list",
                  "test_transform_simple_list",
                  0.3048506975105313
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_array_like_list",
                  0.38978972143455365
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_empty_dict",
                  0.32602533184831317
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_simple_list",
                  0.6527142321820566
                ],
                [
                  "test_transform_empty_list",
                  "test_transform_pd_df",
                  0.283499184941015
                ],
                [
                  "test_from_dict_not_a_dict",
                  "test_from_dict",
                  0.1983350726430202
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_list_of_dicts",
                  0.40577424581382937
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_get_defaults",
                  0.5513350300850535
                ],
                [
                  "test_transform_empty_list",
                  "test_transform_valid_pandas_series",
                  0.233086618699226
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_transform_invalid_pandas_series",
                  0.5135717874467445
                ],
                [
                  "test_transform_array_like_list",
                  "test_from_dict_not_a_dict",
                  0.29012942659282975
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_sample",
                  0.35424286714567976
                ],
                [
                  "test_transform_simple_list",
                  "test_from_dict_not_a_dict",
                  0.2727723627949905
                ],
                [
                  "test_transform_empty_dict",
                  "test_sample",
                  0.2118322885977263
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_from_dict_not_a_dict",
                  0.37860509121978314
                ],
                [
                  "test___init__with_given_names",
                  "test_from_dict_not_a_dict",
                  0.31426968052735443
                ],
                [
                  "test_sample",
                  "test_from_dict",
                  0.30757338400930373
                ],
                [
                  "test_inverse_transform_valid_data",
                  "test_from_dict",
                  0.37214858810333024
                ],
                [
                  "test_transform_empty_list",
                  "test_from_dict_not_a_dict",
                  0.4233337566673018
                ],
                [
                  "test_transform_empty_dict",
                  "test_from_dict_not_a_dict",
                  0.5179323973782373
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_from_dict",
                  0.23309588458780509
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_array_like_list",
                  0.790438731610333
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_simple_list",
                  0.8809523809523809
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_transform_simple_list",
                  0.876095805063078
                ],
                [
                  "test_get_defaults",
                  "test_from_dict",
                  0.5581585458350401
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_inverse_transform_invalid_data",
                  0.5227220875470973
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_transform_pd_df",
                  0.8779182253193653
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_inverse_transform_invalid_data",
                  0.5344701181638046
                ],
                [
                  "test_inverse_transform_valid_data",
                  "test_from_dict_not_a_dict",
                  0.1607476073901374
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_valid_pandas_series",
                  0.8823536322421001
                ],
                [
                  "test_transform_pd_df",
                  "test_from_dict",
                  0.3794900464228594
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_valid_dict",
                  0.3728997624083888
                ],
                [
                  "test_transform_valid_dict",
                  "test_get_defaults",
                  0.5803250906899975
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_pd_df",
                  0.8582631007883725
                ],
                [
                  "test_transform_empty_list",
                  "test_get_defaults",
                  0.13661476666175615
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_pd_df",
                  0.5975958879179463
                ],
                [
                  "test_transform_valid_dict",
                  "test_sample",
                  0.6284704988949783
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_simple_invalid_list",
                  0.37163882420676736
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_pd_df",
                  0.46546147496014184
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_get_defaults",
                  0.5378021835755872
                ],
                [
                  "test_transform_array_like_list",
                  "test_sample",
                  0.47242221340938767
                ],
                [
                  "test_transform_simple_invalid_list",
                  "test_sample",
                  0.2243380149962209
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_transform_array_like_list",
                  0.5779509458936432
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_get_defaults",
                  0.2930471350766347
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_from_dict_not_a_dict",
                  0.2294157338705618
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_invalid_pandas_series",
                  0.4303489473092928
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_pd_df",
                  0.3557438296251731
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "test_sample",
                  0.39081911561447524
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_inverse_transform_invalid_data",
                  0.4153639647712474
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_transform_valid_pandas_series",
                  0.5562250441312064
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_invalid_dict_one_missing",
                  0.5005173307126191
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_empty_list",
                  0.5825898554656137
                ],
                [
                  "test_transform_array_like_list",
                  "test_transform_pd_df",
                  0.6985352885804892
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_array_like_list",
                  0.7454921043401315
                ],
                [
                  "test_transform_empty_list",
                  "test_transform_simple_invalid_list",
                  0.6079480856084424
                ],
                [
                  "test_transform_empty_list",
                  "test_transform_invalid_pandas_series",
                  0.5144538430201883
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_from_dict",
                  0.4115789119223301
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_transform_invalid_pandas_series",
                  0.48431325998363395
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_empty_list",
                  0.7286120888626996
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_sample",
                  0.37124343430549595
                ],
                [
                  "test_transform_empty_list",
                  "test_inverse_transform_valid_data",
                  0.19598367891383242
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_pd_df",
                  0.3131858450011787
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_inverse_transform_valid_data",
                  0.4718980112290714
                ],
                [
                  "test_transform_simple_list",
                  "test_transform_pd_df",
                  0.9452492258682752
                ],
                [
                  "test_transform_empty_list",
                  "test_transform_array_like_list",
                  0.2874024973854982
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_transform_simple_invalid_list",
                  0.5067151602136786
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_transform_array_like_list",
                  0.37113480951260275
                ],
                [
                  "test_transform_pd_df",
                  "test_transform_simple_invalid_list",
                  0.45992309579512564
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_list_of_invalid_dicts",
                  0.6530031565780587
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_array_like_list",
                  0.3992747047523452
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_list_of_dicts",
                  0.24982368550728987
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_transform_simple_invalid_list",
                  0.30623173724424596
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_list_of_invalid_dicts",
                  0.7588152181806319
                ],
                [
                  "test_transform_pd_df",
                  "test_inverse_transform_valid_data",
                  0.6612776539345786
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_sample",
                  0.61624887306595
                ],
                [
                  "test_transform_simple_invalid_list",
                  "test_inverse_transform_invalid_data",
                  0.632501735455006
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_transform_pd_df",
                  0.48725407978178686
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_list_of_dicts",
                  0.4332001127219817
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_transform_simple_list",
                  0.4768731578292163
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_get_defaults",
                  0.3489113503954588
                ],
                [
                  "test_transform_array_like_list",
                  "test_inverse_transform_valid_data",
                  0.5456600505517575
                ],
                [
                  "test_transform_empty_dict",
                  "test_from_dict",
                  0.04741115061147059
                ],
                [
                  "test_transform_array_like_list",
                  "test_inverse_transform_invalid_data",
                  0.4363930240887842
                ],
                [
                  "test_transform_valid_dict",
                  "test_inverse_transform_invalid_data",
                  0.48626453908386463
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_empty_list",
                  0.32927638704908735
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_inverse_transform_valid_data",
                  0.6748679548074191
                ],
                [
                  "test_transform_pd_df",
                  "test_sample",
                  0.6181713364314144
                ],
                [
                  "test_transform_empty_list",
                  "test_inverse_transform_invalid_data",
                  0.4244999675729204
                ],
                [
                  "test_transform_simple_invalid_list",
                  "test_from_dict",
                  0.22241835743364294
                ],
                [
                  "test_inverse_transform_valid_data",
                  "test_sample",
                  0.5875971125451711
                ],
                [
                  "test_get_defaults",
                  "test_from_dict_not_a_dict",
                  0.25896619868911863
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_list_of_dicts",
                  0.7038304069914948
                ],
                [
                  "test_transform_valid_dict",
                  "test_inverse_transform_valid_data",
                  0.6945444741541561
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_sample",
                  0.3118107228974714
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_empty_list",
                  0.24714541191218123
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_inverse_transform_invalid_data",
                  0.5272890033720838
                ],
                [
                  "test_inverse_transform_valid_data",
                  "test_inverse_transform_invalid_data",
                  0.4656612685212309
                ],
                [
                  "test___init__with_given_names",
                  "test_from_dict",
                  0.3782340199502285
                ],
                [
                  "test_transform_simple_list",
                  "test_from_dict",
                  0.3973914883916525
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_from_dict_not_a_dict",
                  0.48653363279984113
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_inverse_transform_valid_data",
                  0.5109374545406036
                ],
                [
                  "test_transform_empty_dict",
                  "test_inverse_transform_invalid_data",
                  0.46609159969939895
                ],
                [
                  "test_transform_empty_list",
                  "test_sample",
                  0.1969488215600006
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_get_defaults",
                  0.45929211632718103
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_invalid_pandas_series",
                  0.35342814288647056
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_from_dict",
                  0.47102328278512856
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_simple_invalid_list",
                  0.4180076008775096
                ],
                [
                  "test_transform_pd_df",
                  "test_from_dict_not_a_dict",
                  0.265747001726367
                ],
                [
                  "test_sample",
                  "test_from_dict_not_a_dict",
                  0.2584627619567986
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_transform_valid_pandas_series",
                  0.6200676875273506
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_simple_list",
                  0.3086066999241838
                ],
                [
                  "test_transform_array_like_list",
                  "test_from_dict",
                  0.4409874079817955
                ],
                [
                  "test_transform_empty_dict",
                  "test_inverse_transform_valid_data",
                  0.20750055037352458
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "test_get_defaults",
                  0.3218251521733945
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_valid_pandas_series",
                  0.37073277675707844
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_simple_list",
                  0.36514837167011077
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_invalid_dict_one_missing",
                  0.36860489038724287
                ],
                [
                  "test___init__with_given_names",
                  "test_inverse_transform_invalid_data",
                  0.4376881095324085
                ],
                [
                  "test_transform_valid_dict",
                  "test_transform_empty_list",
                  0.24942329796316196
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_sample",
                  0.42099293217257117
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_from_dict_not_a_dict",
                  0.461934885437156
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_simple_invalid_list",
                  0.6601782722034923
                ],
                [
                  "test_transform_pd_df",
                  "test_inverse_transform_invalid_data",
                  0.4737406018091068
                ],
                [
                  "test_inverse_transform_valid_data",
                  "test_get_defaults",
                  0.4322928132781762
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_valid_pandas_series",
                  0.24678382369818683
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_transform_empty_list",
                  0.288497368006987
                ],
                [
                  "test_transform_empty_list",
                  "test_from_dict",
                  0.05037715882851115
                ],
                [
                  "test_transform_invalid_pandas_series",
                  "test_from_dict",
                  0.19220536166333607
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_list_of_invalid_dicts",
                  0.4221647431970639
                ],
                [
                  "test_transform_simple_list",
                  "test_inverse_transform_invalid_data",
                  0.5065255615456923
                ],
                [
                  "test___init__with_given_names",
                  "test_inverse_transform_valid_data",
                  0.22733144649015785
                ],
                [
                  "test_transform_list_of_invalid_dicts",
                  "test_transform_pd_df",
                  0.5851042683036632
                ],
                [
                  "test_transform_array_like_list",
                  "test_transform_simple_invalid_list",
                  0.36056581113611774
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_from_dict",
                  0.5367122640483916
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_list_of_invalid_dicts",
                  0.334168347076093
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_simple_list",
                  0.47776654295295456
                ],
                [
                  "test_transform_simple_list",
                  "test_inverse_transform_valid_data",
                  0.6787593724688343
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "test_from_dict_not_a_dict",
                  0.49518756847213835
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_invalid_pandas_series",
                  0.3266372899592439
                ],
                [
                  "test_transform_pd_df",
                  "test_get_defaults",
                  0.43832721864530255
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_empty_dict",
                  0.3380617018914066
                ],
                [
                  "test_transform_valid_pandas_series",
                  "test_transform_array_like_list",
                  0.7188507574477845
                ],
                [
                  "test_transform_simple_invalid_list",
                  "test_get_defaults",
                  0.2310623952712223
                ],
                [
                  "test_transform_simple_list",
                  "test_transform_simple_invalid_list",
                  0.5022146273064424
                ],
                [
                  "test___init__with_given_names",
                  "test_get_defaults",
                  0.408491223118783
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_valid_pandas_series",
                  0.2838874869788344
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_invalid_pandas_series",
                  0.5860942701532694
                ],
                [
                  "test_inverse_transform_invalid_data",
                  "test_from_dict",
                  0.31807639515886355
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_simple_invalid_list",
                  0.652640461959407
                ],
                [
                  "test_transform_simple_invalid_list",
                  "test_inverse_transform_valid_data",
                  0.2841219211223912
                ],
                [
                  "test_transform_list_of_dicts",
                  "test_inverse_transform_invalid_data",
                  0.48851566948995045
                ],
                [
                  "test___init__with_given_names",
                  "test_transform_simple_invalid_list",
                  0.43396303660274627
                ],
                [
                  "test_transform_array_like_list",
                  "test_get_defaults",
                  0.49414866227978443
                ],
                [
                  "test_transform_valid_dict",
                  "test_from_dict",
                  0.513461279555551
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_array_like_list",
                  0.2704813730373557
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_transform_invalid_pandas_series",
                  0.6223759142641418
                ],
                [
                  "test_sample",
                  "test_get_defaults",
                  0.4369040952328105
                ],
                [
                  "test_transform_empty_dict",
                  "test_transform_invalid_dict_one_missing",
                  0.7975116580467629
                ],
                [
                  "test_transform_simple_list",
                  "test_get_defaults",
                  0.44991495795067216
                ],
                [
                  "test_transform_invalid_dict_one_missing",
                  "test_inverse_transform_valid_data",
                  0.33183011234370885
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_transform_list_of_dicts",
                "false"
              ],
              [
                "test_transform_invalid_dict_one_missing",
                "false"
              ],
              [
                "test_from_dict",
                "false"
              ],
              [
                "test_transform_valid_pandas_series",
                "false"
              ],
              [
                "test_transform_invalid_pandas_series",
                "false"
              ],
              [
                "test_transform_pd_df",
                "false"
              ],
              [
                "test_inverse_transform_invalid_data",
                "false"
              ],
              [
                "test_transform_empty_dict",
                "false"
              ],
              [
                "test_transform_simple_list",
                "false"
              ],
              [
                "test_get_defaults",
                "false"
              ],
              [
                "test___init__with_given_names",
                "false"
              ],
              [
                "test_inverse_transform_valid_data",
                "false"
              ],
              [
                "test_from_dict_not_a_dict",
                "false"
              ],
              [
                "test_transform_array_like_list",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_transform_list_of_invalid_dicts",
                "false"
              ],
              [
                "test_transform_valid_dict",
                "false"
              ],
              [
                "test_transform_empty_list",
                "false"
              ],
              [
                "test_transform_simple_invalid_list",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 19
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_recent.py",
    "testCases": [
      {
        "name": "TestRecentKReward",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_select_less_scores_than_k_min",
                  "[]"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test_compute_rewards",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_select_less_scores_than_k_min",
                  "[PyAssertStatement]"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_compute_rewards",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_select_less_scores_than_k_min",
                  "false"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_compute_rewards",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                []
              ],
              [
                "test_select_more_scores_than_k_min",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_compute_rewards",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_select_less_scores_than_k_min",
                  "0"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_compute_rewards",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_select_less_scores_than_k_min",
                  "0"
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_compute_rewards",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "2"
              ],
              [
                "test_select_more_scores_than_k_min",
                "2"
              ],
              [
                "test___init__",
                "2"
              ],
              [
                "test_compute_rewards",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                [
                  "choice_rewards",
                  "selector",
                  "best",
                  "choice_scores"
                ]
              ],
              [
                "test_select_more_scores_than_k_min",
                [
                  "choice_rewards",
                  "selector",
                  "best",
                  "choice_scores"
                ]
              ],
              [
                "test___init__",
                [
                  "selector"
                ]
              ],
              [
                "test_compute_rewards",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                []
              ],
              [
                "test_select_more_scores_than_k_min",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_compute_rewards",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7354245035732833,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compute_rewards",
                  "test_select_less_scores_than_k_min",
                  0.797091852816
                ],
                [
                  "test_compute_rewards",
                  "test_select_more_scores_than_k_min",
                  0.8721528051610793
                ],
                [
                  "test_select_more_scores_than_k_min",
                  "test_select_less_scores_than_k_min",
                  0.9676724988439418
                ],
                [
                  "test___init__",
                  "test_select_more_scores_than_k_min",
                  0.5686673699863686
                ],
                [
                  "test___init__",
                  "test_compute_rewards",
                  0.6560642636804308
                ],
                [
                  "test___init__",
                  "test_select_less_scores_than_k_min",
                  0.5508982309518792
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_select_less_scores_than_k_min",
                "false"
              ],
              [
                "test_select_more_scores_than_k_min",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_compute_rewards",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestRecentKVelocity",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compute_rewards_kt_k",
                  "[]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compute_rewards_kt_k",
                  "[]"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compute_rewards_kt_k",
                  "false"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compute_rewards_kt_k",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compute_rewards_kt_k",
                  "0"
                ],
                [
                  "test_compute_rewards_gt_k",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "1"
              ],
              [
                "test_compute_rewards_gt_k",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ],
              [
                "test_compute_rewards_gt_k",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                []
              ],
              [
                "test_compute_rewards_gt_k",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9803025555668593,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compute_rewards_kt_k",
                  "test_compute_rewards_gt_k",
                  0.9803025555668593
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards_kt_k",
                "false"
              ],
              [
                "test_compute_rewards_gt_k",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_uniform.py",
    "testCases": [
      {
        "name": "TestUniform",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_select",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_select",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_select",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_select",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_select",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_select",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_select",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_select",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                [
                  "actual",
                  "expected",
                  "selector",
                  "choices",
                  "choice_scores"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_selector.py",
    "testCases": [
      {
        "name": "TestSelector",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_compute_rewards",
                  "[]"
                ],
                [
                  "test_select",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test_bandit",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_compute_rewards",
                  "[PyAssertStatement]"
                ],
                [
                  "test_select",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement]"
                ],
                [
                  "test_bandit",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_compute_rewards",
                  "false"
                ],
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_bandit",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_compute_rewards",
                  "false"
                ],
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_bandit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_compute_rewards",
                  "false"
                ],
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_bandit",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_compute_rewards",
                  "false"
                ],
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test_bandit",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "false"
              ],
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "false"
              ],
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                []
              ],
              [
                "test_select",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_bandit",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "false"
              ],
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "false"
              ],
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_compute_rewards",
                  "0"
                ],
                [
                  "test_select",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_bandit",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_compute_rewards",
                  "0"
                ],
                [
                  "test_select",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test_bandit",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "false"
              ],
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "false"
              ],
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_bandit",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "1"
              ],
              [
                "test_select",
                "1"
              ],
              [
                "test___init__",
                "1"
              ],
              [
                "test_bandit",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                [
                  "scores",
                  "selector",
                  "rewards"
                ]
              ],
              [
                "test_select",
                [
                  "selector",
                  "best",
                  "choice_scores"
                ]
              ],
              [
                "test___init__",
                [
                  "selector"
                ]
              ],
              [
                "test_bandit",
                [
                  "choice_rewards",
                  "selector",
                  "best"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                []
              ],
              [
                "test_select",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test_bandit",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7816125576388341,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_compute_rewards",
                  "test_bandit",
                  0.8140271537701089
                ],
                [
                  "test___init__",
                  "test_bandit",
                  0.7151750903352728
                ],
                [
                  "test_compute_rewards",
                  "test_select",
                  0.7656807376336885
                ],
                [
                  "test___init__",
                  "test_select",
                  0.6566405182819729
                ],
                [
                  "test___init__",
                  "test_compute_rewards",
                  0.7682990308530374
                ],
                [
                  "test_bandit",
                  "test_select",
                  0.9698528149589234
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_compute_rewards",
                "false"
              ],
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test_bandit",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_integration_\u0026_test_session.py",
    "testCases": [
      {
        "name": "BTBSessionTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_errors",
                  "[]"
                ],
                [
                  "test_stop",
                  "[]"
                ],
                [
                  "test_multiple",
                  "[]"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "[]"
                ],
                [
                  "test_allow_duplicates",
                  "[]"
                ],
                [
                  "test_minimize",
                  "[]"
                ],
                [
                  "test_maximize",
                  "[]"
                ],
                [
                  "test_allow_errors",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_errors",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_stop",
                  "[]"
                ],
                [
                  "test_multiple",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "[PyAssertStatement]"
                ],
                [
                  "test_allow_duplicates",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_minimize",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_maximize",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_allow_errors",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_errors",
                  "true"
                ],
                [
                  "test_stop",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "true"
                ],
                [
                  "test_allow_duplicates",
                  "false"
                ],
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ],
                [
                  "test_allow_errors",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_stop",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "false"
                ],
                [
                  "test_allow_duplicates",
                  "false"
                ],
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ],
                [
                  "test_allow_errors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_stop",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "false"
                ],
                [
                  "test_allow_duplicates",
                  "false"
                ],
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ],
                [
                  "test_allow_errors",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_errors",
                  "false"
                ],
                [
                  "test_stop",
                  "false"
                ],
                [
                  "test_multiple",
                  "false"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "false"
                ],
                [
                  "test_allow_duplicates",
                  "false"
                ],
                [
                  "test_minimize",
                  "false"
                ],
                [
                  "test_maximize",
                  "false"
                ],
                [
                  "test_allow_errors",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_stop",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_normalized_score_becomes_none",
                "false"
              ],
              [
                "test_allow_duplicates",
                "false"
              ],
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ],
              [
                "test_allow_errors",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "true"
              ],
              [
                "test_stop",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_normalized_score_becomes_none",
                "true"
              ],
              [
                "test_allow_duplicates",
                "false"
              ],
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ],
              [
                "test_allow_errors",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                []
              ],
              [
                "test_stop",
                []
              ],
              [
                "test_multiple",
                []
              ],
              [
                "test_normalized_score_becomes_none",
                []
              ],
              [
                "test_allow_duplicates",
                []
              ],
              [
                "test_minimize",
                []
              ],
              [
                "test_maximize",
                []
              ],
              [
                "test_allow_errors",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_stop",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_normalized_score_becomes_none",
                "false"
              ],
              [
                "test_allow_duplicates",
                "false"
              ],
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ],
              [
                "test_allow_errors",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_stop",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_normalized_score_becomes_none",
                "false"
              ],
              [
                "test_allow_duplicates",
                "false"
              ],
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ],
              [
                "test_allow_errors",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_stop",
                  "0"
                ],
                [
                  "test_multiple",
                  "0"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "0"
                ],
                [
                  "test_allow_duplicates",
                  "0"
                ],
                [
                  "test_minimize",
                  "0"
                ],
                [
                  "test_maximize",
                  "0"
                ],
                [
                  "test_allow_errors",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_errors",
                  "0"
                ],
                [
                  "test_stop",
                  "0"
                ],
                [
                  "test_multiple",
                  "0"
                ],
                [
                  "test_normalized_score_becomes_none",
                  "0"
                ],
                [
                  "test_allow_duplicates",
                  "0"
                ],
                [
                  "test_minimize",
                  "0"
                ],
                [
                  "test_maximize",
                  "0"
                ],
                [
                  "test_allow_errors",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_stop",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_normalized_score_becomes_none",
                "false"
              ],
              [
                "test_allow_duplicates",
                "false"
              ],
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ],
              [
                "test_allow_errors",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_stop",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_normalized_score_becomes_none",
                "false"
              ],
              [
                "test_allow_duplicates",
                "false"
              ],
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ],
              [
                "test_allow_errors",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_errors",
                "2"
              ],
              [
                "test_stop",
                "0"
              ],
              [
                "test_multiple",
                "2"
              ],
              [
                "test_normalized_score_becomes_none",
                "1"
              ],
              [
                "test_allow_duplicates",
                "2"
              ],
              [
                "test_minimize",
                "3"
              ],
              [
                "test_maximize",
                "3"
              ],
              [
                "test_allow_errors",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                [
                  "session",
                  "tunables",
                  "best"
                ]
              ],
              [
                "test_stop",
                [
                  "session",
                  "tunables"
                ]
              ],
              [
                "test_multiple",
                [
                  "session",
                  "tunables",
                  "best"
                ]
              ],
              [
                "test_normalized_score_becomes_none",
                [
                  "scores",
                  "session",
                  "tunables"
                ]
              ],
              [
                "test_allow_duplicates",
                [
                  "session",
                  "tunables",
                  "best"
                ]
              ],
              [
                "test_minimize",
                [
                  "session",
                  "tunables",
                  "best"
                ]
              ],
              [
                "test_maximize",
                [
                  "session",
                  "tunables",
                  "best"
                ]
              ],
              [
                "test_allow_errors",
                [
                  "session",
                  "tunables",
                  "best"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                []
              ],
              [
                "test_stop",
                []
              ],
              [
                "test_multiple",
                []
              ],
              [
                "test_normalized_score_becomes_none",
                []
              ],
              [
                "test_allow_duplicates",
                []
              ],
              [
                "test_minimize",
                []
              ],
              [
                "test_maximize",
                []
              ],
              [
                "test_allow_errors",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7986719150345464,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_maximize",
                  "test_allow_duplicates",
                  0.8944747251955224
                ],
                [
                  "test_normalized_score_becomes_none",
                  "test_allow_errors",
                  0.6331349985856406
                ],
                [
                  "test_stop",
                  "test_maximize",
                  0.7929188092706831
                ],
                [
                  "test_minimize",
                  "test_allow_errors",
                  0.874335885936821
                ],
                [
                  "test_stop",
                  "test_allow_errors",
                  0.7669383576562359
                ],
                [
                  "test_multiple",
                  "test_normalized_score_becomes_none",
                  0.6009687678331131
                ],
                [
                  "test_allow_duplicates",
                  "test_allow_errors",
                  0.8583325077599887
                ],
                [
                  "test_maximize",
                  "test_minimize",
                  0.9734894474315844
                ],
                [
                  "test_minimize",
                  "test_errors",
                  0.8869848220147044
                ],
                [
                  "test_stop",
                  "test_errors",
                  0.8378823208695424
                ],
                [
                  "test_minimize",
                  "test_multiple",
                  0.902054974411799
                ],
                [
                  "test_multiple",
                  "test_allow_errors",
                  0.8735348093024473
                ],
                [
                  "test_stop",
                  "test_multiple",
                  0.873225356092299
                ],
                [
                  "test_stop",
                  "test_minimize",
                  0.7738413334506792
                ],
                [
                  "test_stop",
                  "test_allow_duplicates",
                  0.781126577552403
                ],
                [
                  "test_stop",
                  "test_normalized_score_becomes_none",
                  0.5672578683576276
                ],
                [
                  "test_minimize",
                  "test_allow_duplicates",
                  0.8957338786082336
                ],
                [
                  "test_minimize",
                  "test_normalized_score_becomes_none",
                  0.5234930531941017
                ],
                [
                  "test_maximize",
                  "test_normalized_score_becomes_none",
                  0.5281464162914062
                ],
                [
                  "test_multiple",
                  "test_allow_duplicates",
                  0.8968700041677191
                ],
                [
                  "test_maximize",
                  "test_errors",
                  0.8948692866001439
                ],
                [
                  "test_maximize",
                  "test_allow_errors",
                  0.882107913323704
                ],
                [
                  "test_normalized_score_becomes_none",
                  "test_allow_duplicates",
                  0.5706911933914297
                ],
                [
                  "test_errors",
                  "test_normalized_score_becomes_none",
                  0.6119498815944127
                ],
                [
                  "test_maximize",
                  "test_multiple",
                  0.9170205237216017
                ],
                [
                  "test_errors",
                  "test_allow_duplicates",
                  0.8725125761206666
                ],
                [
                  "test_errors",
                  "test_allow_errors",
                  0.9197090092274486
                ],
                [
                  "test_multiple",
                  "test_errors",
                  0.9592083230053376
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_errors",
                "false"
              ],
              [
                "test_stop",
                "false"
              ],
              [
                "test_multiple",
                "false"
              ],
              [
                "test_normalized_score_becomes_none",
                "false"
              ],
              [
                "test_allow_duplicates",
                "false"
              ],
              [
                "test_minimize",
                "false"
              ],
              [
                "test_maximize",
                "false"
              ],
              [
                "test_allow_errors",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_tuners_\u0026_test_base.py",
    "testCases": [
      {
        "name": "TestBaseTuner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "[]"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__sample_allow_duplicates",
                  "[]"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "[]"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "[]"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "[]"
                ],
                [
                  "test_record_raise_error",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_record_list_maximize_true",
                  "[]"
                ],
                [
                  "test___init__maximize_false",
                  "[]"
                ],
                [
                  "test__check_proposals_not_raise",
                  "[]"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "[]"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "[]"
                ],
                [
                  "test_record_scalar_values",
                  "[]"
                ],
                [
                  "test_record_list_maximize_false",
                  "[]"
                ],
                [
                  "test___init__defaults",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "[]"
                ],
                [
                  "test__sample_allow_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "[]"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "[PyAssertStatement]"
                ],
                [
                  "test_record_raise_error",
                  "[]"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "[]"
                ],
                [
                  "test_record_list_maximize_true",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__maximize_false",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test__check_proposals_not_raise",
                  "[PyAssertStatement]"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "[]"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test_record_scalar_values",
                  "[PyAssertStatement]"
                ],
                [
                  "test_record_list_maximize_false",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__defaults",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "false"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "false"
                ],
                [
                  "test__sample_allow_duplicates",
                  "false"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "false"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "false"
                ],
                [
                  "test_record_raise_error",
                  "false"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_record_list_maximize_true",
                  "false"
                ],
                [
                  "test___init__maximize_false",
                  "false"
                ],
                [
                  "test__check_proposals_not_raise",
                  "false"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "false"
                ],
                [
                  "test_record_scalar_values",
                  "false"
                ],
                [
                  "test_record_list_maximize_false",
                  "false"
                ],
                [
                  "test___init__defaults",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "false"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "false"
                ],
                [
                  "test__sample_allow_duplicates",
                  "false"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "false"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "false"
                ],
                [
                  "test_record_raise_error",
                  "false"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_record_list_maximize_true",
                  "false"
                ],
                [
                  "test___init__maximize_false",
                  "false"
                ],
                [
                  "test__check_proposals_not_raise",
                  "false"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "false"
                ],
                [
                  "test_record_scalar_values",
                  "false"
                ],
                [
                  "test_record_list_maximize_false",
                  "false"
                ],
                [
                  "test___init__defaults",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "false"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "false"
                ],
                [
                  "test__sample_allow_duplicates",
                  "false"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "false"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "false"
                ],
                [
                  "test_record_raise_error",
                  "false"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_record_list_maximize_true",
                  "false"
                ],
                [
                  "test___init__maximize_false",
                  "false"
                ],
                [
                  "test__check_proposals_not_raise",
                  "false"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "false"
                ],
                [
                  "test_record_scalar_values",
                  "false"
                ],
                [
                  "test_record_list_maximize_false",
                  "false"
                ],
                [
                  "test___init__defaults",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "false"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "false"
                ],
                [
                  "test__sample_allow_duplicates",
                  "false"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "false"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "false"
                ],
                [
                  "test_record_raise_error",
                  "false"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_record_list_maximize_true",
                  "false"
                ],
                [
                  "test___init__maximize_false",
                  "false"
                ],
                [
                  "test__check_proposals_not_raise",
                  "false"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "false"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "false"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "false"
                ],
                [
                  "test_record_scalar_values",
                  "false"
                ],
                [
                  "test_record_list_maximize_false",
                  "false"
                ],
                [
                  "test___init__defaults",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "false"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "false"
              ],
              [
                "test__sample_allow_duplicates",
                "false"
              ],
              [
                "test__sample_not_allow_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "false"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "false"
              ],
              [
                "test_record_raise_error",
                "false"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_record_list_maximize_true",
                "false"
              ],
              [
                "test___init__maximize_false",
                "false"
              ],
              [
                "test__check_proposals_not_raise",
                "false"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "false"
              ],
              [
                "test_record_scalar_values",
                "false"
              ],
              [
                "test_record_list_maximize_false",
                "false"
              ],
              [
                "test___init__defaults",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "false"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "false"
              ],
              [
                "test__sample_allow_duplicates",
                "false"
              ],
              [
                "test__sample_not_allow_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "false"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "false"
              ],
              [
                "test_record_raise_error",
                "false"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_record_list_maximize_true",
                "false"
              ],
              [
                "test___init__maximize_false",
                "false"
              ],
              [
                "test__check_proposals_not_raise",
                "false"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "false"
              ],
              [
                "test_record_scalar_values",
                "false"
              ],
              [
                "test_record_list_maximize_false",
                "false"
              ],
              [
                "test___init__defaults",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                []
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                []
              ],
              [
                "test__sample_allow_duplicates",
                []
              ],
              [
                "test__sample_not_allow_duplicates",
                []
              ],
              [
                "test_propose_many_values_allow_duplicates",
                []
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                []
              ],
              [
                "test_record_raise_error",
                []
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                []
              ],
              [
                "test_record_list_maximize_true",
                []
              ],
              [
                "test___init__maximize_false",
                []
              ],
              [
                "test__check_proposals_not_raise",
                []
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                []
              ],
              [
                "test_propose_one_value_no_duplicates",
                []
              ],
              [
                "test_propose_many_values_no_duplicates",
                []
              ],
              [
                "test_record_scalar_values",
                []
              ],
              [
                "test_record_list_maximize_false",
                []
              ],
              [
                "test___init__defaults",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "false"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "false"
              ],
              [
                "test__sample_allow_duplicates",
                "false"
              ],
              [
                "test__sample_not_allow_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "false"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "false"
              ],
              [
                "test_record_raise_error",
                "false"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_record_list_maximize_true",
                "false"
              ],
              [
                "test___init__maximize_false",
                "false"
              ],
              [
                "test__check_proposals_not_raise",
                "false"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "false"
              ],
              [
                "test_record_scalar_values",
                "false"
              ],
              [
                "test_record_list_maximize_false",
                "false"
              ],
              [
                "test___init__defaults",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "false"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "false"
              ],
              [
                "test__sample_allow_duplicates",
                "false"
              ],
              [
                "test__sample_not_allow_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "false"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "false"
              ],
              [
                "test_record_raise_error",
                "false"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_record_list_maximize_true",
                "false"
              ],
              [
                "test___init__maximize_false",
                "false"
              ],
              [
                "test__check_proposals_not_raise",
                "false"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "false"
              ],
              [
                "test_record_scalar_values",
                "false"
              ],
              [
                "test_record_list_maximize_false",
                "false"
              ],
              [
                "test___init__defaults",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "0"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "0"
                ],
                [
                  "test__sample_allow_duplicates",
                  "0"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "0"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "0"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "0"
                ],
                [
                  "test_record_raise_error",
                  "0"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "0"
                ],
                [
                  "test_record_list_maximize_true",
                  "0"
                ],
                [
                  "test___init__maximize_false",
                  "0"
                ],
                [
                  "test__check_proposals_not_raise",
                  "0"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "0"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "0"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "0"
                ],
                [
                  "test_record_scalar_values",
                  "0"
                ],
                [
                  "test_record_list_maximize_false",
                  "0"
                ],
                [
                  "test___init__defaults",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_propose_one_value_allow_duplicates",
                  "0"
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "0"
                ],
                [
                  "test__sample_allow_duplicates",
                  "0"
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "0"
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "0"
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "0"
                ],
                [
                  "test_record_raise_error",
                  "0"
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "0"
                ],
                [
                  "test_record_list_maximize_true",
                  "0"
                ],
                [
                  "test___init__maximize_false",
                  "0"
                ],
                [
                  "test__check_proposals_not_raise",
                  "0"
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "0"
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "0"
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "0"
                ],
                [
                  "test_record_scalar_values",
                  "0"
                ],
                [
                  "test_record_list_maximize_false",
                  "0"
                ],
                [
                  "test___init__defaults",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "false"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "false"
              ],
              [
                "test__sample_allow_duplicates",
                "false"
              ],
              [
                "test__sample_not_allow_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "false"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "false"
              ],
              [
                "test_record_raise_error",
                "false"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_record_list_maximize_true",
                "false"
              ],
              [
                "test___init__maximize_false",
                "false"
              ],
              [
                "test__check_proposals_not_raise",
                "false"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "false"
              ],
              [
                "test_record_scalar_values",
                "false"
              ],
              [
                "test_record_list_maximize_false",
                "false"
              ],
              [
                "test___init__defaults",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "false"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "false"
              ],
              [
                "test__sample_allow_duplicates",
                "false"
              ],
              [
                "test__sample_not_allow_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "false"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "false"
              ],
              [
                "test_record_raise_error",
                "false"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_record_list_maximize_true",
                "false"
              ],
              [
                "test___init__maximize_false",
                "false"
              ],
              [
                "test__check_proposals_not_raise",
                "false"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "false"
              ],
              [
                "test_record_scalar_values",
                "false"
              ],
              [
                "test_record_list_maximize_false",
                "false"
              ],
              [
                "test___init__defaults",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "4"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "1"
              ],
              [
                "test__sample_allow_duplicates",
                "2"
              ],
              [
                "test__sample_not_allow_duplicates",
                "2"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "3"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "2"
              ],
              [
                "test_record_raise_error",
                "1"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "1"
              ],
              [
                "test_record_list_maximize_true",
                "5"
              ],
              [
                "test___init__maximize_false",
                "7"
              ],
              [
                "test__check_proposals_not_raise",
                "1"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "1"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "4"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "3"
              ],
              [
                "test_record_scalar_values",
                "5"
              ],
              [
                "test_record_list_maximize_false",
                "5"
              ],
              [
                "test___init__defaults",
                "11"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                [
                  "result",
                  "instance",
                  "inverse_return"
                ]
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                [
                  "instance"
                ]
              ],
              [
                "test__sample_allow_duplicates",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test__sample_not_allow_duplicates",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test_propose_many_values_allow_duplicates",
                [
                  "result",
                  "instance",
                  "inverse_return"
                ]
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                [
                  "result",
                  "instance",
                  "side_effect"
                ]
              ],
              [
                "test_record_raise_error",
                [
                  "instance"
                ]
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                [
                  "instance"
                ]
              ],
              [
                "test_record_list_maximize_true",
                [
                  "instance"
                ]
              ],
              [
                "test___init__maximize_false",
                [
                  "tunable",
                  "instance"
                ]
              ],
              [
                "test__check_proposals_not_raise",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                [
                  "instance"
                ]
              ],
              [
                "test_propose_one_value_no_duplicates",
                [
                  "result",
                  "instance",
                  "inverse_return"
                ]
              ],
              [
                "test_propose_many_values_no_duplicates",
                [
                  "result",
                  "instance",
                  "inverse_return"
                ]
              ],
              [
                "test_record_scalar_values",
                [
                  "instance"
                ]
              ],
              [
                "test_record_list_maximize_false",
                [
                  "instance"
                ]
              ],
              [
                "test___init__defaults",
                [
                  "tunable",
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                []
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                []
              ],
              [
                "test__sample_allow_duplicates",
                []
              ],
              [
                "test__sample_not_allow_duplicates",
                []
              ],
              [
                "test_propose_many_values_allow_duplicates",
                []
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                []
              ],
              [
                "test_record_raise_error",
                []
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                []
              ],
              [
                "test_record_list_maximize_true",
                []
              ],
              [
                "test___init__maximize_false",
                []
              ],
              [
                "test__check_proposals_not_raise",
                []
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                []
              ],
              [
                "test_propose_one_value_no_duplicates",
                []
              ],
              [
                "test_propose_many_values_no_duplicates",
                []
              ],
              [
                "test_record_scalar_values",
                []
              ],
              [
                "test_record_list_maximize_false",
                []
              ],
              [
                "test___init__defaults",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6796019573534609,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_propose_one_value_no_duplicates",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.5175116072202992
                ],
                [
                  "test___init__maximize_false",
                  "test__sample_allow_duplicates",
                  0.6789257805550318
                ],
                [
                  "test___init__defaults",
                  "test__sample_allow_duplicates",
                  0.5971718037090238
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_propose_many_values_allow_duplicates",
                  0.6813496953454166
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "test_record_raise_error",
                  0.7249715207589708
                ],
                [
                  "test___init__defaults",
                  "test_record_list_maximize_true",
                  0.49266070561623176
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_propose_one_value_allow_duplicates",
                  0.6667579996259634
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test__sample_not_allow_duplicates",
                  0.7216200691892175
                ],
                [
                  "test___init__defaults",
                  "test__check_proposals_proposals_gt_cardinality",
                  0.4826587280883123
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_propose_many_values_no_duplicates",
                  0.6969800554714544
                ],
                [
                  "test___init__maximize_false",
                  "test__sample_not_allow_duplicates",
                  0.5842216489184007
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_record_list_maximize_false",
                  0.6731226236032117
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.5832118435198044
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_record_raise_error",
                  0.7192195144777795
                ],
                [
                  "test___init__defaults",
                  "test_record_scalar_values",
                  0.5066336265773792
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.5783148895522355
                ],
                [
                  "test_record_list_maximize_false",
                  "test_record_scalar_values",
                  0.9296053136447889
                ],
                [
                  "test___init__defaults",
                  "test_record_list_maximize_false",
                  0.4941423952944224
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test_propose_many_values_no_duplicates",
                  0.9458736368683867
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_propose_one_value_allow_duplicates",
                  0.6676809517599763
                ],
                [
                  "test__sample_allow_duplicates",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.6265289489922914
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test__check_proposals_not_raise",
                  0.9266877588290496
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test__sample_not_allow_duplicates",
                  0.7320036253792996
                ],
                [
                  "test___init__defaults",
                  "test__sample_not_allow_duplicates",
                  0.46917190387472396
                ],
                [
                  "test___init__maximize_false",
                  "test_propose_one_value_allow_duplicates",
                  0.5005092829691934
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_propose_many_values_allow_duplicates",
                  0.6947727257738786
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_propose_one_value_no_duplicates",
                  0.6433217753219445
                ],
                [
                  "test___init__maximize_false",
                  "test_record_scalar_values",
                  0.5348008084903245
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test_propose_many_values_allow_duplicates",
                  0.9675555050104532
                ],
                [
                  "test___init__maximize_false",
                  "test_record_list_maximize_false",
                  0.5546865214875049
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "test_record_raise_error",
                  0.5854644910749531
                ],
                [
                  "test_record_scalar_values",
                  "test_record_raise_error",
                  0.7338597992246426
                ],
                [
                  "test_record_list_maximize_true",
                  "test_record_raise_error",
                  0.7282226555024516
                ],
                [
                  "test___init__defaults",
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  0.4951623312498373
                ],
                [
                  "test___init__defaults",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.41859320694975855
                ],
                [
                  "test___init__maximize_false",
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  0.6079297513749032
                ],
                [
                  "test___init__defaults",
                  "test_propose_one_value_allow_duplicates",
                  0.4470914643867362
                ],
                [
                  "test___init__defaults",
                  "test_propose_one_value_no_duplicates",
                  0.4334379500764988
                ],
                [
                  "test___init__maximize_false",
                  "test_record_list_maximize_true",
                  0.548801737962384
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_record_scalar_values",
                  0.6899837579297765
                ],
                [
                  "test_record_list_maximize_true",
                  "test_record_list_maximize_false",
                  0.9909954594129877
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test_record_raise_error",
                  0.6864197516006747
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test_propose_one_value_allow_duplicates",
                  0.9287542606933722
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test__sample_not_allow_duplicates",
                  0.7199592403844762
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_record_list_maximize_true",
                  0.6769577993294379
                ],
                [
                  "test___init__maximize_false",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.4577666048875393
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_propose_many_values_allow_duplicates",
                  0.7045988256486383
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_propose_many_values_allow_duplicates",
                  0.7241623172989841
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test__check_proposals_trials_eq_cardinality",
                  0.925022393826518
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "test_record_scalar_values",
                  0.7639020889584944
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test_record_scalar_values",
                  0.6911737035184238
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "test__sample_not_allow_duplicates",
                  0.7350367527564797
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test_record_list_maximize_true",
                  0.5953527998097963
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_record_list_maximize_true",
                  0.6711042603681462
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test_record_list_maximize_false",
                  0.6753668632433899
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_propose_many_values_no_duplicates",
                  0.7389918543703371
                ],
                [
                  "test___init__maximize_false",
                  "test__check_proposals_proposals_gt_cardinality",
                  0.5797537095856293
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_propose_one_value_no_duplicates",
                  0.6147249415150688
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test__sample_allow_duplicates",
                  0.7872689772399615
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "test_record_list_maximize_true",
                  0.6789834732491761
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test_record_list_maximize_true",
                  0.6314397725075875
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test_propose_many_values_no_duplicates",
                  0.9388546883352226
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_record_scalar_values",
                  0.6174544517614234
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test__check_proposals_not_raise",
                  0.8678185877169902
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_record_raise_error",
                  0.7320020380849267
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_record_list_maximize_false",
                  0.7062249183019369
                ],
                [
                  "test___init__maximize_false",
                  "test_record_raise_error",
                  0.530858818415757
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_propose_one_value_no_duplicates",
                  0.6147253896340706
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_propose_one_value_allow_duplicates",
                  0.7043976408928204
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "test_record_list_maximize_false",
                  0.7690770797403627
                ],
                [
                  "test__check_proposals_not_raise",
                  "test__sample_not_allow_duplicates",
                  0.7828699245112717
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test__sample_allow_duplicates",
                  0.7674244769077329
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test_propose_many_values_allow_duplicates",
                  0.9749851691262614
                ],
                [
                  "test__sample_allow_duplicates",
                  "test__sample_not_allow_duplicates",
                  0.8774750125784915
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.531143043449442
                ],
                [
                  "test___init__defaults",
                  "test__check_proposals_trials_eq_cardinality",
                  0.5022873352640985
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.5447703657552433
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.5328701692569688
                ],
                [
                  "test___init__defaults",
                  "test_propose_many_values_allow_duplicates",
                  0.47301079905945675
                ],
                [
                  "test___init__maximize_false",
                  "test__check_proposals_trials_eq_cardinality",
                  0.616677391584129
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test__sample_not_allow_duplicates",
                  0.7383892768770758
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "test_record_list_maximize_true",
                  0.6821456501051799
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test__sample_allow_duplicates",
                  0.7657640884924038
                ],
                [
                  "test__sample_allow_duplicates",
                  "test_record_list_maximize_false",
                  0.7314679013132823
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  0.9491212866694388
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_record_list_maximize_true",
                  0.7041072975879613
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "test_record_list_maximize_true",
                  0.7667709963489441
                ],
                [
                  "test__check_proposals_not_raise",
                  "test__sample_allow_duplicates",
                  0.858197321621994
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_record_list_maximize_true",
                  0.6093291607265411
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_record_list_maximize_false",
                  0.6111617337687523
                ],
                [
                  "test_record_list_maximize_true",
                  "test_record_scalar_values",
                  0.9329354949430055
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "test_record_list_maximize_false",
                  0.6841972206024031
                ],
                [
                  "test_sample_no_duplicates_more_than_one_loop",
                  "test_record_scalar_values",
                  0.6559132733999382
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test_propose_many_values_allow_duplicates",
                  0.9028740322723957
                ],
                [
                  "test__sample_allow_duplicates",
                  "test_record_list_maximize_true",
                  0.7292745893254333
                ],
                [
                  "test___init__maximize_false",
                  "test_propose_one_value_no_duplicates",
                  0.47126817819359107
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "test__sample_allow_duplicates",
                  0.7951213532047668
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_propose_many_values_no_duplicates",
                  0.7192983071114478
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test__check_proposals_not_raise",
                  0.9354588669137138
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test_record_list_maximize_false",
                  0.5971433385889277
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test_record_raise_error",
                  0.5991077633995907
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.5390151183976583
                ],
                [
                  "test__sample_not_allow_duplicates",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.7253235664820743
                ],
                [
                  "test__sample_allow_duplicates",
                  "test_record_scalar_values",
                  0.730728688405207
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test__sample_not_allow_duplicates",
                  0.7411262997123601
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_propose_one_value_allow_duplicates",
                  0.655105902173905
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test__sample_not_allow_duplicates",
                  0.6934510198564068
                ],
                [
                  "test__check_proposals_not_raise",
                  "test_sample_no_duplicates_more_than_one_loop",
                  0.564617661296807
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test__sample_allow_duplicates",
                  0.8075946849860665
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_propose_one_value_no_duplicates",
                  0.6048684149707406
                ],
                [
                  "test__check_proposals_proposals_gt_cardinality",
                  "test_record_raise_error",
                  0.721311475409836
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test__sample_allow_duplicates",
                  0.7338799256447474
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "test_record_raise_error",
                  0.6917519807705375
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test_record_scalar_values",
                  0.6741365543394852
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_propose_many_values_no_duplicates",
                  0.7093804422989571
                ],
                [
                  "test___init__maximize_false",
                  "test_propose_many_values_allow_duplicates",
                  0.5185730066489133
                ],
                [
                  "test__sample_allow_duplicates",
                  "test_record_raise_error",
                  0.7502941069066987
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  0.9715277119678334
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_record_raise_error",
                  0.7488276521452765
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test_record_raise_error",
                  0.643810972826079
                ],
                [
                  "test___init__maximize_false",
                  "test_propose_many_values_no_duplicates",
                  0.5309500930367715
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "test_record_scalar_values",
                  0.6936772439772556
                ],
                [
                  "test___init__defaults",
                  "test___init__maximize_false",
                  0.8774535953713307
                ],
                [
                  "test_propose_many_values_allow_duplicates",
                  "test_record_list_maximize_false",
                  0.6810255334185923
                ],
                [
                  "test_propose_many_values_no_duplicates",
                  "test_record_list_maximize_true",
                  0.6733417706389323
                ],
                [
                  "test___init__defaults",
                  "test__check_proposals_not_raise",
                  0.5522324488437445
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_record_scalar_values",
                  0.68383685937623
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test_record_scalar_values",
                  0.6451046577534941
                ],
                [
                  "test_propose_one_value_no_duplicates",
                  "test_record_scalar_values",
                  0.6260214325469194
                ],
                [
                  "test_record_list_maximize_false",
                  "test_record_raise_error",
                  0.7304128037724112
                ],
                [
                  "test___init__defaults",
                  "test_record_raise_error",
                  0.4612072290621651
                ],
                [
                  "test_propose_one_value_allow_duplicates",
                  "test_record_list_maximize_false",
                  0.6333388437804897
                ],
                [
                  "test___init__maximize_false",
                  "test__check_proposals_not_raise",
                  0.6736789968557708
                ],
                [
                  "test___init__defaults",
                  "test_propose_many_values_no_duplicates",
                  0.48019618459662666
                ],
                [
                  "test__check_proposals_trials_eq_cardinality",
                  "test_record_list_maximize_false",
                  0.678993767232708
                ],
                [
                  "test__check_proposals_trials_and_proposals_gt_cardinality",
                  "test__sample_allow_duplicates",
                  0.7961388608622183
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_propose_one_value_allow_duplicates",
                "false"
              ],
              [
                "test__check_proposals_trials_eq_cardinality",
                "false"
              ],
              [
                "test__sample_allow_duplicates",
                "false"
              ],
              [
                "test__sample_not_allow_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_allow_duplicates",
                "false"
              ],
              [
                "test_sample_no_duplicates_more_than_one_loop",
                "false"
              ],
              [
                "test_record_raise_error",
                "false"
              ],
              [
                "test__check_proposals_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_record_list_maximize_true",
                "false"
              ],
              [
                "test___init__maximize_false",
                "false"
              ],
              [
                "test__check_proposals_not_raise",
                "false"
              ],
              [
                "test__check_proposals_trials_and_proposals_gt_cardinality",
                "false"
              ],
              [
                "test_propose_one_value_no_duplicates",
                "false"
              ],
              [
                "test_propose_many_values_no_duplicates",
                "false"
              ],
              [
                "test_record_scalar_values",
                "false"
              ],
              [
                "test_record_list_maximize_false",
                "false"
              ],
              [
                "test___init__defaults",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 17
      },
      {
        "name": "TestBaseMetaModelTuner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___init___users_values",
                  "[]"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "[]"
                ],
                [
                  "test_record",
                  "[]"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "[]"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "[]"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "[]"
                ],
                [
                  "test___init___default_values",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___init___users_values",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "[PyAssertStatement]"
                ],
                [
                  "test_record",
                  "[]"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "[PyAssertStatement]"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init___default_values",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___init___users_values",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "false"
                ],
                [
                  "test_record",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "false"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "false"
                ],
                [
                  "test___init___default_values",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___init___users_values",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "false"
                ],
                [
                  "test_record",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "false"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "false"
                ],
                [
                  "test___init___default_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___init___users_values",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "false"
                ],
                [
                  "test_record",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "false"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "false"
                ],
                [
                  "test___init___default_values",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___init___users_values",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "false"
                ],
                [
                  "test_record",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "false"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "false"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "false"
                ],
                [
                  "test___init___default_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "false"
              ],
              [
                "test_record",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "false"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "false"
              ],
              [
                "test___init___default_values",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "false"
              ],
              [
                "test_record",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "false"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "false"
              ],
              [
                "test___init___default_values",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                []
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                []
              ],
              [
                "test_record",
                []
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                []
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                []
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                []
              ],
              [
                "test___init___default_values",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "false"
              ],
              [
                "test_record",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "false"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "false"
              ],
              [
                "test___init___default_values",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "false"
              ],
              [
                "test_record",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "false"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "false"
              ],
              [
                "test___init___default_values",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___init___users_values",
                  "0"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "0"
                ],
                [
                  "test_record",
                  "0"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "0"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "0"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "0"
                ],
                [
                  "test___init___default_values",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___init___users_values",
                  "0"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "0"
                ],
                [
                  "test_record",
                  "0"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "0"
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "0"
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "0"
                ],
                [
                  "test___init___default_values",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "false"
              ],
              [
                "test_record",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "false"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "false"
              ],
              [
                "test___init___default_values",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "false"
              ],
              [
                "test_record",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "false"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "false"
              ],
              [
                "test___init___default_values",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "4"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "4"
              ],
              [
                "test_record",
                "2"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "3"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "2"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "4"
              ],
              [
                "test___init___default_values",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                [
                  "tunable",
                  "instance"
                ]
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test_record",
                [
                  "instance"
                ]
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test___init___default_values",
                [
                  "tunable",
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                []
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                []
              ],
              [
                "test_record",
                []
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                []
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                []
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                []
              ],
              [
                "test___init___default_values",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8965615800656896,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init___users_values",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  0.8818614491146468
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "test_record",
                  0.8466578971317067
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  "test_record",
                  0.8599473512896849
                ],
                [
                  "test___init___default_values",
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  0.8692310073997446
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "test_record",
                  0.8623595505617978
                ],
                [
                  "test___init___users_values",
                  "test__proposemin_trials_gt__trials_set",
                  0.8584695846129217
                ],
                [
                  "test___init___users_values",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  0.8830571777047608
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  0.954162244676025
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  0.9363531143056808
                ],
                [
                  "test___init___users_values",
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  0.8801346938400288
                ],
                [
                  "test__proposemin_trials_gt__trials_set",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  0.9389796359146854
                ],
                [
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  0.9958022260048306
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  0.9894454875385428
                ],
                [
                  "test___init___default_values",
                  "test_record",
                  0.8293480774302141
                ],
                [
                  "test___init___users_values",
                  "test_record",
                  0.8383292454042303
                ],
                [
                  "test___init___default_values",
                  "test__proposemin_trials_gt__trials_set",
                  0.8529419319169548
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "test_record",
                  0.853581331040713
                ],
                [
                  "test___init___default_values",
                  "test___init___users_values",
                  0.972997214604998
                ],
                [
                  "test__proposemin_trials_lt__trials_set_allow_duplicates",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  0.9852051489952323
                ],
                [
                  "test___init___default_values",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                  0.8706821455979579
                ],
                [
                  "test___init___default_values",
                  "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                  0.8682466662941284
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___init___users_values",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates_num_samples_is_min",
                "false"
              ],
              [
                "test_record",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_allow_duplicates",
                "false"
              ],
              [
                "test__proposemin_trials_gt__trials_set",
                "false"
              ],
              [
                "test__proposemin_trials_lt__trials_set_not_allow_duplicates",
                "false"
              ],
              [
                "test___init___default_values",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_hierarchical.py",
    "testCases": [
      {
        "name": "TestHierarchicalByAlgorithm",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_select",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_select",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_select",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_select",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_select",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "2"
              ],
              [
                "test___init__",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                [
                  "alg_scores",
                  "selector",
                  "best",
                  "by_algorithm",
                  "choice_scores"
                ]
              ],
              [
                "test___init__",
                [
                  "selector",
                  "by_algorithm"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6142234293040584,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test_select",
                  0.6142234293040584
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_tuners_\u0026_test_uniform.py",
    "testCases": [
      {
        "name": "TestUniformTuner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test__propose_allow_duplicates",
                  "[]"
                ],
                [
                  "test__propose_no_duplicates",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___init__",
                  "[PyAssertStatement]"
                ],
                [
                  "test__propose_allow_duplicates",
                  "[PyAssertStatement]"
                ],
                [
                  "test__propose_no_duplicates",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__propose_allow_duplicates",
                  "false"
                ],
                [
                  "test__propose_no_duplicates",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__propose_allow_duplicates",
                  "false"
                ],
                [
                  "test__propose_no_duplicates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__propose_allow_duplicates",
                  "false"
                ],
                [
                  "test__propose_no_duplicates",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__propose_allow_duplicates",
                  "false"
                ],
                [
                  "test__propose_no_duplicates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test__propose_allow_duplicates",
                "false"
              ],
              [
                "test__propose_no_duplicates",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test__propose_allow_duplicates",
                "false"
              ],
              [
                "test__propose_no_duplicates",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                []
              ],
              [
                "test__propose_allow_duplicates",
                []
              ],
              [
                "test__propose_no_duplicates",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test__propose_allow_duplicates",
                "false"
              ],
              [
                "test__propose_no_duplicates",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test__propose_allow_duplicates",
                "false"
              ],
              [
                "test__propose_no_duplicates",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__propose_allow_duplicates",
                  "0"
                ],
                [
                  "test__propose_no_duplicates",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__propose_allow_duplicates",
                  "0"
                ],
                [
                  "test__propose_no_duplicates",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test__propose_allow_duplicates",
                "false"
              ],
              [
                "test__propose_no_duplicates",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test__propose_allow_duplicates",
                "false"
              ],
              [
                "test__propose_no_duplicates",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "1"
              ],
              [
                "test__propose_allow_duplicates",
                "2"
              ],
              [
                "test__propose_no_duplicates",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                []
              ],
              [
                "test__propose_allow_duplicates",
                [
                  "result"
                ]
              ],
              [
                "test__propose_no_duplicates",
                [
                  "result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                [
                  "self.instance"
                ]
              ],
              [
                "test__propose_allow_duplicates",
                [
                  "self.instance"
                ]
              ],
              [
                "test__propose_no_duplicates",
                [
                  "self.instance"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6064527076785661,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test__propose_no_duplicates",
                  0.43825049008927774
                ],
                [
                  "test___init__",
                  "test__propose_allow_duplicates",
                  0.43825049008927774
                ],
                [
                  "test__propose_no_duplicates",
                  "test__propose_allow_duplicates",
                  0.942857142857143
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test__propose_allow_duplicates",
                "false"
              ],
              [
                "test__propose_no_duplicates",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_metamodels_\u0026_test_base.py",
    "testCases": [
      {
        "name": "TestBaseMetaModel",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__init_model__self_model_kwargs",
                  "[]"
                ],
                [
                  "test__fit",
                  "[]"
                ],
                [
                  "test__predict",
                  "[]"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "[]"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__init_model__self_model_kwargs",
                  "[PyAssertStatement]"
                ],
                [
                  "test__fit",
                  "[]"
                ],
                [
                  "test__predict",
                  "[]"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "[PyAssertStatement]"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__init_model__self_model_kwargs",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__init_model__self_model_kwargs",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__init_model__self_model_kwargs",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__init_model__self_model_kwargs",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "false"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                []
              ],
              [
                "test__fit",
                []
              ],
              [
                "test__predict",
                []
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                []
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__init_model__self_model_kwargs",
                  "0"
                ],
                [
                  "test__fit",
                  "0"
                ],
                [
                  "test__predict",
                  "0"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "0"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__init_model__self_model_kwargs",
                  "0"
                ],
                [
                  "test__fit",
                  "0"
                ],
                [
                  "test__predict",
                  "0"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "0"
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "2"
              ],
              [
                "test__fit",
                "0"
              ],
              [
                "test__predict",
                "2"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "2"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                [
                  "instance"
                ]
              ],
              [
                "test__fit",
                [
                  "instance"
                ]
              ],
              [
                "test__predict",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                [
                  "instance"
                ]
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                [
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                []
              ],
              [
                "test__fit",
                []
              ],
              [
                "test__predict",
                []
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                []
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7704018604201279,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "test__predict",
                  0.6744532734334624
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  0.9868238981245292
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "test__init_model__self_model_kwargs",
                  0.9657937911237017
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT_none",
                  "test__fit",
                  0.673894428129311
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "test__init_model__self_model_kwargs",
                  0.9792989852899694
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "test__fit",
                  0.667298877967264
                ],
                [
                  "test__init_model__self_model_kwargs",
                  "test__fit",
                  0.6721417106995442
                ],
                [
                  "test__init_model__self_model_kwargs",
                  "test__predict",
                  0.7031973235123176
                ],
                [
                  "test__init_model__MODEL_KWARGS_DEFAULT",
                  "test__predict",
                  0.6754414838878954
                ],
                [
                  "test__fit",
                  "test__predict",
                  0.7056748320332841
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__init_model__self_model_kwargs",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT",
                "false"
              ],
              [
                "test__init_model__MODEL_KWARGS_DEFAULT_none",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_selection_\u0026_test_custom_selector.py",
    "testCases": [
      {
        "name": "TestCustomSelector",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_select",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_select",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_select",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_select",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_select",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_select",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_select",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_select",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                [
                  "selector",
                  "best",
                  "choice_scores"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_select",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_hyperparams_\u0026_test_base.py",
    "testCases": [
      {
        "name": "TestBaseHyperParam",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "[]"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "[]"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_inverse_transform",
                  "[]"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "[]"
                ],
                [
                  "test__within_hyperparam_space",
                  "[]"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__within_search_space",
                  "[]"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "[]"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__within_range_invalid_range",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "[]"
                ],
                [
                  "test__within_range_valid_range",
                  "[]"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_transform_values_list",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "[]"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "[]"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "[]"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "[]"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "[]"
                ],
                [
                  "test_inverse_transform",
                  "[PyAssertStatement]"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "[]"
                ],
                [
                  "test__within_hyperparam_space",
                  "[]"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "[]"
                ],
                [
                  "test__within_search_space",
                  "[]"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "[]"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "[]"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "[]"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "[]"
                ],
                [
                  "test__within_range_invalid_range",
                  "[]"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "[]"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "[]"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "[]"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "[]"
                ],
                [
                  "test__within_range_valid_range",
                  "[]"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "[]"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "[]"
                ],
                [
                  "test_transform_values_list",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "false"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "false"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "false"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "false"
                ],
                [
                  "test_inverse_transform",
                  "false"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "false"
                ],
                [
                  "test__within_hyperparam_space",
                  "false"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "false"
                ],
                [
                  "test__within_search_space",
                  "false"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "false"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "false"
                ],
                [
                  "test__within_range_invalid_range",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "false"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "false"
                ],
                [
                  "test__within_range_valid_range",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "false"
                ],
                [
                  "test_transform_values_list",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "false"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "false"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "false"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "false"
                ],
                [
                  "test_inverse_transform",
                  "false"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "false"
                ],
                [
                  "test__within_hyperparam_space",
                  "false"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "false"
                ],
                [
                  "test__within_search_space",
                  "false"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "false"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "false"
                ],
                [
                  "test__within_range_invalid_range",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "false"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "false"
                ],
                [
                  "test__within_range_valid_range",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "false"
                ],
                [
                  "test_transform_values_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "false"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "false"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "false"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "false"
                ],
                [
                  "test_inverse_transform",
                  "false"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "false"
                ],
                [
                  "test__within_hyperparam_space",
                  "false"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "false"
                ],
                [
                  "test__within_search_space",
                  "false"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "false"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "false"
                ],
                [
                  "test__within_range_invalid_range",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "false"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "false"
                ],
                [
                  "test__within_range_valid_range",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "false"
                ],
                [
                  "test_transform_values_list",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "false"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "false"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "false"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "false"
                ],
                [
                  "test_inverse_transform",
                  "false"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "false"
                ],
                [
                  "test__within_hyperparam_space",
                  "false"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "false"
                ],
                [
                  "test__within_search_space",
                  "false"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "false"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "false"
                ],
                [
                  "test__within_range_invalid_range",
                  "false"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "false"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "false"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "false"
                ],
                [
                  "test__within_range_valid_range",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "false"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "false"
                ],
                [
                  "test_transform_values_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "false"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "false"
              ],
              [
                "test_transform_values_not_ndarray",
                "false"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "false"
              ],
              [
                "test_inverse_transform",
                "false"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "false"
              ],
              [
                "test__within_hyperparam_space",
                "false"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "false"
              ],
              [
                "test__within_search_space",
                "false"
              ],
              [
                "test_transform_dimensions_gt_two",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "false"
              ],
              [
                "test__to_array_len_shape_is_one",
                "false"
              ],
              [
                "test__to_array_not_all_scalars",
                "false"
              ],
              [
                "test__within_range_invalid_range",
                "false"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "false"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "false"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "false"
              ],
              [
                "test__within_range_valid_range",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "false"
              ],
              [
                "test_transform_values_list",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "false"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "false"
              ],
              [
                "test_transform_values_not_ndarray",
                "false"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "false"
              ],
              [
                "test_inverse_transform",
                "false"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "false"
              ],
              [
                "test__within_hyperparam_space",
                "false"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "false"
              ],
              [
                "test__within_search_space",
                "false"
              ],
              [
                "test_transform_dimensions_gt_two",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "false"
              ],
              [
                "test__to_array_len_shape_is_one",
                "false"
              ],
              [
                "test__to_array_not_all_scalars",
                "false"
              ],
              [
                "test__within_range_invalid_range",
                "false"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "false"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "false"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "false"
              ],
              [
                "test__within_range_valid_range",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "false"
              ],
              [
                "test_transform_values_list",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                []
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                []
              ],
              [
                "test__to_array_values_shape_gt_two",
                []
              ],
              [
                "test_transform_values_not_ndarray",
                []
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                []
              ],
              [
                "test_inverse_transform",
                []
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                []
              ],
              [
                "test__within_hyperparam_space",
                []
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                []
              ],
              [
                "test__within_search_space",
                []
              ],
              [
                "test_transform_dimensions_gt_two",
                []
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                []
              ],
              [
                "test__to_array_len_shape_is_one",
                []
              ],
              [
                "test__to_array_not_all_scalars",
                []
              ],
              [
                "test__within_range_invalid_range",
                []
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                []
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                []
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                []
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                []
              ],
              [
                "test__within_range_valid_range",
                []
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                []
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                []
              ],
              [
                "test_transform_values_list",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "false"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "false"
              ],
              [
                "test_transform_values_not_ndarray",
                "false"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "false"
              ],
              [
                "test_inverse_transform",
                "false"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "false"
              ],
              [
                "test__within_hyperparam_space",
                "false"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "false"
              ],
              [
                "test__within_search_space",
                "false"
              ],
              [
                "test_transform_dimensions_gt_two",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "false"
              ],
              [
                "test__to_array_len_shape_is_one",
                "false"
              ],
              [
                "test__to_array_not_all_scalars",
                "false"
              ],
              [
                "test__within_range_invalid_range",
                "false"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "false"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "false"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "false"
              ],
              [
                "test__within_range_valid_range",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "false"
              ],
              [
                "test_transform_values_list",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "false"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "false"
              ],
              [
                "test_transform_values_not_ndarray",
                "true"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "false"
              ],
              [
                "test_inverse_transform",
                "false"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "false"
              ],
              [
                "test__within_hyperparam_space",
                "false"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "false"
              ],
              [
                "test__within_search_space",
                "false"
              ],
              [
                "test_transform_dimensions_gt_two",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "false"
              ],
              [
                "test__to_array_len_shape_is_one",
                "false"
              ],
              [
                "test__to_array_not_all_scalars",
                "false"
              ],
              [
                "test__within_range_invalid_range",
                "false"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "false"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "false"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "false"
              ],
              [
                "test__within_range_valid_range",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "false"
              ],
              [
                "test_transform_values_list",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "0"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "0"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "0"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "0"
                ],
                [
                  "test_inverse_transform",
                  "0"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "0"
                ],
                [
                  "test__within_hyperparam_space",
                  "0"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "0"
                ],
                [
                  "test__within_search_space",
                  "0"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "0"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "0"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "0"
                ],
                [
                  "test__within_range_invalid_range",
                  "0"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "0"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "0"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "0"
                ],
                [
                  "test__within_range_valid_range",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "0"
                ],
                [
                  "test_transform_values_list",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__to_array_scalar_value_dimension_one",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "0"
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "0"
                ],
                [
                  "test_transform_values_not_ndarray",
                  "0"
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "0"
                ],
                [
                  "test_inverse_transform",
                  "0"
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "0"
                ],
                [
                  "test__within_hyperparam_space",
                  "0"
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "0"
                ],
                [
                  "test__within_search_space",
                  "0"
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "0"
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "0"
                ],
                [
                  "test__to_array_not_all_scalars",
                  "0"
                ],
                [
                  "test__within_range_invalid_range",
                  "0"
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "0"
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "0"
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "0"
                ],
                [
                  "test__within_range_valid_range",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "0"
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "0"
                ],
                [
                  "test_transform_values_list",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "false"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "false"
              ],
              [
                "test_transform_values_not_ndarray",
                "false"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "false"
              ],
              [
                "test_inverse_transform",
                "false"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "false"
              ],
              [
                "test__within_hyperparam_space",
                "false"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "false"
              ],
              [
                "test__within_search_space",
                "false"
              ],
              [
                "test_transform_dimensions_gt_two",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "false"
              ],
              [
                "test__to_array_len_shape_is_one",
                "false"
              ],
              [
                "test__to_array_not_all_scalars",
                "false"
              ],
              [
                "test__within_range_invalid_range",
                "false"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "false"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "false"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "false"
              ],
              [
                "test__within_range_valid_range",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "false"
              ],
              [
                "test_transform_values_list",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "false"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "false"
              ],
              [
                "test_transform_values_not_ndarray",
                "false"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "false"
              ],
              [
                "test_inverse_transform",
                "false"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "false"
              ],
              [
                "test__within_hyperparam_space",
                "false"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "false"
              ],
              [
                "test__within_search_space",
                "false"
              ],
              [
                "test_transform_dimensions_gt_two",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "false"
              ],
              [
                "test__to_array_len_shape_is_one",
                "false"
              ],
              [
                "test__to_array_not_all_scalars",
                "false"
              ],
              [
                "test__within_range_invalid_range",
                "false"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "false"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "false"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "false"
              ],
              [
                "test__within_range_valid_range",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "false"
              ],
              [
                "test_transform_values_list",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "1"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "1"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "1"
              ],
              [
                "test_transform_values_not_ndarray",
                "3"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "1"
              ],
              [
                "test_inverse_transform",
                "4"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "1"
              ],
              [
                "test__within_hyperparam_space",
                "1"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "1"
              ],
              [
                "test__within_search_space",
                "1"
              ],
              [
                "test_transform_dimensions_gt_two",
                "1"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "1"
              ],
              [
                "test__to_array_len_shape_is_one",
                "1"
              ],
              [
                "test__to_array_not_all_scalars",
                "1"
              ],
              [
                "test__within_range_invalid_range",
                "1"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "1"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "1"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "1"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "1"
              ],
              [
                "test__within_range_valid_range",
                "0"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "1"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "1"
              ],
              [
                "test_transform_values_list",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                [
                  "result",
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                [
                  "result",
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_values_shape_gt_two",
                [
                  "instance",
                  "values"
                ]
              ],
              [
                "test_transform_values_not_ndarray",
                [
                  "result",
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                [
                  "instance",
                  "array",
                  "values"
                ]
              ],
              [
                "test_inverse_transform",
                [
                  "result",
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                [
                  "instance",
                  "array",
                  "values"
                ]
              ],
              [
                "test__within_hyperparam_space",
                [
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                [
                  "instance",
                  "array",
                  "values"
                ]
              ],
              [
                "test__within_search_space",
                [
                  "instance",
                  "values"
                ]
              ],
              [
                "test_transform_dimensions_gt_two",
                [
                  "array"
                ]
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                [
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_len_shape_is_one",
                [
                  "instance",
                  "array",
                  "values"
                ]
              ],
              [
                "test__to_array_not_all_scalars",
                [
                  "instance",
                  "array",
                  "values"
                ]
              ],
              [
                "test__within_range_invalid_range",
                [
                  "instance",
                  "values",
                  "_max",
                  "_min"
                ]
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                [
                  "instance",
                  "array",
                  "values"
                ]
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                [
                  "instance",
                  "array",
                  "values"
                ]
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                [
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                [
                  "result",
                  "instance",
                  "values"
                ]
              ],
              [
                "test__within_range_valid_range",
                [
                  "instance",
                  "values",
                  "_max",
                  "_min"
                ]
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                [
                  "instance",
                  "values"
                ]
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                [
                  "instance",
                  "values"
                ]
              ],
              [
                "test_transform_values_list",
                [
                  "result",
                  "instance",
                  "values"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                []
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                []
              ],
              [
                "test__to_array_values_shape_gt_two",
                []
              ],
              [
                "test_transform_values_not_ndarray",
                []
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                []
              ],
              [
                "test_inverse_transform",
                []
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                []
              ],
              [
                "test__within_hyperparam_space",
                []
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                []
              ],
              [
                "test__within_search_space",
                []
              ],
              [
                "test_transform_dimensions_gt_two",
                []
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                []
              ],
              [
                "test__to_array_len_shape_is_one",
                []
              ],
              [
                "test__to_array_not_all_scalars",
                []
              ],
              [
                "test__within_range_invalid_range",
                []
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                []
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                []
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                []
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                []
              ],
              [
                "test__within_range_valid_range",
                []
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                []
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                []
              ],
              [
                "test_transform_values_list",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.779041761711518,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_len_shape_is_one",
                  0.8724329559481908
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8508676206140565
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.770181392279743
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "test__to_array_not_all_scalars",
                  0.9627001365450717
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "test__to_array_not_all_scalars",
                  0.966102415376024
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8930313062573082
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_scalar_value_dimension_one",
                  0.7196673863344129
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_values_shape_gt_two",
                  0.9107573774236649
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.6717143110532929
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.6283993389353788
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8276926009635628
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_values_reshape_dimensions_two",
                  0.7795590149002561
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_values_shape_gt_two",
                  0.7559289460184543
                ],
                [
                  "test__within_range_invalid_range",
                  "test__within_hyperparam_space",
                  0.8614435222839291
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8768946525027449
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8323887519656487
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_not_all_scalars",
                  0.6863684648030286
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.7478084440218644
                ],
                [
                  "test__within_hyperparam_space",
                  "test_transform_values_not_ndarray",
                  0.7473677532236447
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.8383172367248348
                ],
                [
                  "test__within_range_invalid_range",
                  "test_transform_values_list",
                  0.6547061248301485
                ],
                [
                  "test__within_search_space",
                  "test__within_hyperparam_space",
                  0.8014450631136169
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.7626532046659733
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8226793933569198
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_not_all_scalars",
                  0.8502892013991001
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.7973234920966483
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.8801930924536036
                ],
                [
                  "test_inverse_transform",
                  "test_transform_values_not_ndarray",
                  0.7944902355451976
                ],
                [
                  "test__within_range_valid_range",
                  "test__within_range_invalid_range",
                  0.9746794344808962
                ],
                [
                  "test__within_search_space",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.5536072896272272
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.7646440501825668
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.6974564103364885
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.6081422396926313
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.754440162798816
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_scalar_value_dimension_one",
                  0.8067842963896242
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_values_reshape_dimensions_two",
                  0.7950633741833881
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_len_shape_is_gt_two",
                  0.907123041763677
                ],
                [
                  "test__within_range_invalid_range",
                  "test__within_search_space",
                  0.6549945474146004
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.6500995126437921
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_values_reshape_dimensions_two",
                  0.8281766860861415
                ],
                [
                  "test__within_search_space",
                  "test_transform_values_list",
                  0.6618919560913712
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_values_shape_gt_two",
                  0.7260275006645374
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8472039397921513
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_not_all_scalars",
                  0.6169750619863285
                ],
                [
                  "test__within_search_space",
                  "test__to_array_len_shape_is_one",
                  0.6183973271589134
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8673984799789415
                ],
                [
                  "test__within_range_invalid_range",
                  "test_transform_dimensions_gt_two",
                  0.8007006277798855
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.7959093352492902
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_scalar_value_dimension_one",
                  0.7171087882915773
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_values_shape_gt_two",
                  0.6411378106988327
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "test__to_array_len_shape_is_gt_two",
                  0.9633508888056077
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "test__to_array_len_shape_is_gt_two",
                  0.9635719572535378
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.672057219511853
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.873877889138876
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8670071810000342
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_scalar_value_dimension_one",
                  0.8093110796696239
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.8819639730371358
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_values_reshape_dimensions_two",
                  0.7843644205723527
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.9663660389612514
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.9501524537769993
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_values_shape_gt_two",
                  0.8095136479925933
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_values_shape_gt_two",
                  0.8553932810208825
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_values_reshape_dimensions_two",
                  0.6939765384608796
                ],
                [
                  "test__within_search_space",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.5226191478237813
                ],
                [
                  "test__within_search_space",
                  "test__to_array_len_shape_is_gt_two",
                  0.5541204008197598
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_values_shape_gt_two",
                  0.8041155020094453
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_len_shape_is_gt_two",
                  0.8338233681885491
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.6182985848506274
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8703412406626239
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_values_shape_gt_two",
                  0.9104654680003258
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_not_all_scalars",
                  0.8588234786171218
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8204335344362647
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.788737612146091
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.8495428901701115
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.9143948947049604
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_values_reshape_dimensions_two",
                  0.7550417051657408
                ],
                [
                  "test__within_search_space",
                  "test__to_array_scalar_value_dimension_one",
                  0.6254627916220946
                ],
                [
                  "test_inverse_transform",
                  "test_transform_dimensions_gt_two",
                  0.6257779464862145
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.630061919161936
                ],
                [
                  "test__within_range_valid_range",
                  "test_inverse_transform",
                  0.6406012678467454
                ],
                [
                  "test__to_array_len_shape_is_gt_two",
                  "test__to_array_not_all_scalars",
                  0.9375253753186804
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.9178146529232245
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.7389443879973058
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8125775935791183
                ],
                [
                  "test__to_array_values_not_scalar_dimensions_two",
                  "test__to_array_values_reshape_dimensions_two",
                  0.9763193282925331
                ],
                [
                  "test__within_range_valid_range",
                  "test__within_hyperparam_space",
                  0.8766948053636889
                ],
                [
                  "test__within_search_space",
                  "test_transform_dimensions_gt_two",
                  0.5679576873143273
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_not_all_scalars",
                  0.830083919749738
                ],
                [
                  "test__within_search_space",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.5443996397334733
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "test__to_array_values_reshape_dimensions_two",
                  0.9450263572811988
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_values_shape_gt_two",
                  0.6214529362342275
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_scalar_value_dimension_one",
                  0.8213825613983488
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.6739436298159186
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "test__to_array_values_reshape_dimensions_two",
                  0.788827486734426
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.7967175176830882
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_values_reshape_dimensions_two",
                  0.6546242076835599
                ],
                [
                  "test__within_search_space",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.5905694890769175
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.749471346049603
                ],
                [
                  "test__within_search_space",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.5427569707616337
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_values_reshape_dimensions_two",
                  0.617033532905936
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8873552644998897
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_values_shape_gt_two",
                  0.9158881810343774
                ],
                [
                  "test__within_hyperparam_space",
                  "test_transform_dimensions_gt_two",
                  0.7469733490141455
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.7272338585183751
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "test__to_array_len_shape_is_gt_two",
                  0.9797740712465206
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.863783524425583
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_len_shape_is_gt_two",
                  0.824238297317056
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.940174755792013
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_len_shape_is_one",
                  0.8197213546526696
                ],
                [
                  "test_transform_values_list",
                  "test_transform_dimensions_gt_two",
                  0.616176027768252
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "test__to_array_values_reshape_dimensions_two",
                  0.9364342846757445
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_not_all_scalars",
                  0.8134822413547432
                ],
                [
                  "test__within_search_space",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.5961381040478324
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_values_reshape_dimensions_two",
                  0.7950463919999253
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.978926367561777
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.9594119455666703
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_len_shape_is_one",
                  0.8894477998033475
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.7767122075015
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.808223859120487
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_len_shape_is_gt_two",
                  0.8728116476452915
                ],
                [
                  "test__within_search_space",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.5213219492819668
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.7624541989719473
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_len_shape_is_one",
                  0.824012617259938
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test_transform_dimensions_gt_two",
                  0.7371994089429771
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.9353437285590062
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.9281664377875363
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.5985900516659405
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_len_shape_is_gt_two",
                  0.7983415227337172
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.7618688709119679
                ],
                [
                  "test__within_search_space",
                  "test_inverse_transform",
                  0.6948025754211632
                ],
                [
                  "test__within_hyperparam_space",
                  "test_transform_values_list",
                  0.7093084682410772
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.6310737939621877
                ],
                [
                  "test__within_range_invalid_range",
                  "test_inverse_transform",
                  0.636273850643518
                ],
                [
                  "test__within_search_space",
                  "test_transform_values_not_ndarray",
                  0.6507465729072552
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.9588016125371077
                ],
                [
                  "test__within_range_valid_range",
                  "test__within_search_space",
                  0.6611713517621415
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.7914690144656902
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.6519583364980094
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.61999217398901
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_len_shape_is_gt_two",
                  0.7350918922301523
                ],
                [
                  "test__within_search_space",
                  "test__to_array_not_all_scalars",
                  0.5121552198388796
                ],
                [
                  "test__within_range_valid_range",
                  "test_transform_dimensions_gt_two",
                  0.7628228312743585
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_len_shape_is_one",
                  0.7684460851751616
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "test__to_array_not_all_scalars",
                  0.9387150945479444
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.8628084466593355
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.9526141399280627
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_values_reshape_dimensions_two",
                  0.839710060393084
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_len_shape_is_gt_two",
                  0.8966599860726345
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.71032941040839
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.809983439721009
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_len_shape_is_one",
                  0.663835797544615
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_values_reshape_dimensions_two",
                  0.7977240352174656
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_len_shape_is_gt_two",
                  0.8567876262006927
                ],
                [
                  "test__within_range_invalid_range",
                  "test_transform_values_not_ndarray",
                  0.6940608259421698
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_len_shape_is_one",
                  0.8621298393928186
                ],
                [
                  "test__within_range_valid_range",
                  "test_transform_values_list",
                  0.646206172658864
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_len_shape_is_one",
                  0.8523051748788522
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "test__to_array_not_all_scalars",
                  0.8038075965435704
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_len_shape_is_one",
                  0.854967856892651
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_len_shape_is_gt_two",
                  0.7680163744849836
                ],
                [
                  "test_inverse_transform",
                  "test_transform_values_list",
                  0.7865249376417563
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.6993555719887565
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_len_shape_is_one",
                  0.824083149220612
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.6100888760865631
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8588877491871273
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8900232960332747
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.6307757002967701
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8366755206686645
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8673220901430727
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.6923737742715051
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.81116623933272
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8600124575310681
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.6177884983632125
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.8811681293673699
                ],
                [
                  "test__within_search_space",
                  "test__to_array_values_reshape_dimensions_two",
                  0.5393598899705937
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.6411853851084757
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.9310171677625715
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_not_all_scalars",
                  0.8414283544922949
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_values_shape_gt_two",
                  0.9317455424271591
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8683684610449672
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_not_all_scalars",
                  0.8327303129374691
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.9014410719200636
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.8145676203749234
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.8413753371192062
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.6239028082621827
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_not_all_scalars",
                  0.7623731054203834
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.7984472665856134
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test_transform_values_list",
                  0.8699859291713643
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.664847853143198
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.7793744576054156
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_len_shape_is_gt_two",
                  0.6381998918859385
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.9094695164154412
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "test__to_array_len_shape_is_gt_two",
                  0.9410583359374185
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_not_all_scalars",
                  0.7300030733626038
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  0.7894736842105261
                ],
                [
                  "test__to_array_values_shape_one_dimensions_two",
                  "test__to_array_values_reshape_dimensions_two",
                  0.954119923063242
                ],
                [
                  "test__within_range_valid_range",
                  "test_transform_values_not_ndarray",
                  0.6803015885877668
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_len_shape_is_gt_two",
                  0.6286254420024193
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.9082105494685635
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8586336177527185
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.9017117677781146
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "test__to_array_len_shape_is_gt_two",
                  0.9656951840460474
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_len_shape_is_gt_two",
                  0.8828609865628247
                ],
                [
                  "test__within_search_space",
                  "test__to_array_values_shape_gt_two",
                  0.5878778180433145
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.6173204695206381
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_not_all_scalars",
                  0.8120311150618241
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_len_shape_is_one",
                  0.7762477682908744
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.7352610356933044
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_values_reshape_dimensions_two",
                  0.8303988737722912
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.5556642565798017
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.6221544189403624
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.6632365324280729
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.7623993250199249
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_len_shape_is_gt_two",
                  0.7322582609820217
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8059236237240828
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8880584943211614
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_len_shape_is_one",
                  0.7335772578401945
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.9017429195437315
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.6307332223883548
                ],
                [
                  "test__within_search_space",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.5965158720160012
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_scalar_value_dimension_one",
                  0.6838074236161762
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8227309286575201
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_len_shape_is_one",
                  0.7007445755967193
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_len_shape_is_one",
                  0.8243221055778026
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.7472490065912767
                ],
                [
                  "test__to_array_len_shape_is_one",
                  "test__to_array_not_all_scalars",
                  0.9297381312463601
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_one",
                  "test__to_array_values_reshape_dimensions_two",
                  0.8067554826272615
                ],
                [
                  "test__to_array_scalar_value_dimension_one",
                  "test__to_array_values_shape_gt_two",
                  0.8609460320922784
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_not_all_scalars",
                  0.5857546452217233
                ],
                [
                  "test__to_array_list_values_of_list_values_one_scalar",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.8355733069578839
                ],
                [
                  "test__within_range_invalid_range",
                  "test__to_array_values_shape_gt_two",
                  0.8046504868668367
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.6363935302573944
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.7230229878273448
                ],
                [
                  "test__within_hyperparam_space",
                  "test_inverse_transform",
                  0.7402926324748532
                ],
                [
                  "test_transform_values_list",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.6471587386334908
                ],
                [
                  "test__within_search_space",
                  "test__to_array_list_values_of_list_values_one_scalar",
                  0.577896743774047
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_len_shape_is_gt_two",
                  0.8203464158881388
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  0.8312669083376266
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "test__to_array_len_shape_is_gt_two",
                  0.8840003101513104
                ],
                [
                  "test__to_array_scalar_value_dimensions_gt_one",
                  "test__to_array_not_all_scalars",
                  0.8631274327362916
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_scalar_value_dimension_one",
                  0.826033187630902
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_not_all_scalars",
                  0.7931904848648763
                ],
                [
                  "test__to_array_values_reshape_dimensions_two",
                  "test__to_array_not_all_scalars",
                  0.9638140217525948
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.7797799724276875
                ],
                [
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  "test__to_array_values_not_scalar_dimensions_two",
                  0.9502737931716516
                ],
                [
                  "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                  "test__to_array_values_shape_one_dimensions_two",
                  0.8914849883204186
                ],
                [
                  "test_inverse_transform",
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  0.5763813664688314
                ],
                [
                  "test_transform_dimensions_gt_two",
                  "test__to_array_values_reshape_dimensions_two",
                  0.8559960051113229
                ],
                [
                  "test__within_range_valid_range",
                  "test__to_array_list_values_of_list_values_dimensions_one",
                  0.6924921082531524
                ],
                [
                  "test_transform_values_not_ndarray",
                  "test__to_array_values_shape_gt_two",
                  0.6644523213743327
                ],
                [
                  "test__to_array_list_values_of_list_values_dimensions_two",
                  "test__to_array_more_than_one_column_for_dimensions_one",
                  0.8214775231960223
                ],
                [
                  "test__within_hyperparam_space",
                  "test__to_array_scalar_value_dimensions_gt_one",
                  0.792878936233639
                ],
                [
                  "test__to_array_values_shape_gt_two",
                  "test__to_array_len_shape_is_one",
                  0.8362867675252984
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__to_array_scalar_value_dimension_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_one",
                "false"
              ],
              [
                "test__to_array_values_shape_gt_two",
                "false"
              ],
              [
                "test_transform_values_not_ndarray",
                "false"
              ],
              [
                "test__to_array_more_than_one_column_for_dimensions_one",
                "false"
              ],
              [
                "test_inverse_transform",
                "false"
              ],
              [
                "test__to_array_values_reshape_dimensions_two",
                "false"
              ],
              [
                "test__within_hyperparam_space",
                "false"
              ],
              [
                "test__to_array_values_shape_one_dimensions_two",
                "false"
              ],
              [
                "test__within_search_space",
                "false"
              ],
              [
                "test_transform_dimensions_gt_two",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_two",
                "false"
              ],
              [
                "test__to_array_len_shape_is_one",
                "false"
              ],
              [
                "test__to_array_not_all_scalars",
                "false"
              ],
              [
                "test__within_range_invalid_range",
                "false"
              ],
              [
                "test__to_array_len_shape_is_gt_two",
                "false"
              ],
              [
                "test__to_array_values_not_scalar_dimensions_two",
                "false"
              ],
              [
                "test__to_array_scalar_value_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_dimensions_one",
                "false"
              ],
              [
                "test__within_range_valid_range",
                "false"
              ],
              [
                "test__to_array_list_values_of_scalar_values_dimensions_gt_one",
                "false"
              ],
              [
                "test__to_array_list_values_of_list_values_one_scalar",
                "false"
              ],
              [
                "test_transform_values_list",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 23
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_hyperparams_\u0026_test_boolean.py",
    "testCases": [
      {
        "name": "TestBooleanHyperParam",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "[]"
                ],
                [
                  "test_sample",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__inverse_transform_single_value",
                  "[]"
                ],
                [
                  "test__transform_multiple_values",
                  "[]"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "[]"
                ],
                [
                  "test__transform_single_value",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "[]"
                ],
                [
                  "test_sample",
                  "[]"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "[]"
                ],
                [
                  "test__inverse_transform_single_value",
                  "[]"
                ],
                [
                  "test__transform_multiple_values",
                  "[]"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "[]"
                ],
                [
                  "test__transform_single_value",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                []
              ],
              [
                "test__inverse_transform_single_value",
                []
              ],
              [
                "test__transform_multiple_values",
                []
              ],
              [
                "test__inverse_transform_multiple_values",
                []
              ],
              [
                "test__transform_single_value",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test_sample",
                "true"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "0"
                ],
                [
                  "test__inverse_transform_single_value",
                  "0"
                ],
                [
                  "test__transform_multiple_values",
                  "0"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "0"
                ],
                [
                  "test__transform_single_value",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__within_hyperparam_space_values_in_space",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "0"
                ],
                [
                  "test__inverse_transform_single_value",
                  "0"
                ],
                [
                  "test__transform_multiple_values",
                  "0"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "0"
                ],
                [
                  "test__transform_single_value",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "0"
              ],
              [
                "test_sample",
                "3"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "1"
              ],
              [
                "test__inverse_transform_single_value",
                "1"
              ],
              [
                "test__transform_multiple_values",
                "1"
              ],
              [
                "test__inverse_transform_multiple_values",
                "1"
              ],
              [
                "test__transform_single_value",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                [
                  "values"
                ]
              ],
              [
                "test_sample",
                [
                  "result",
                  "n",
                  "expected_result"
                ]
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                [
                  "values"
                ]
              ],
              [
                "test__inverse_transform_single_value",
                [
                  "result",
                  "values"
                ]
              ],
              [
                "test__transform_multiple_values",
                [
                  "result",
                  "values"
                ]
              ],
              [
                "test__inverse_transform_multiple_values",
                [
                  "result",
                  "values",
                  "expected_result"
                ]
              ],
              [
                "test__transform_single_value",
                [
                  "result",
                  "values"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                [
                  "self.instance"
                ]
              ],
              [
                "test_sample",
                [
                  "self.instance"
                ]
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                [
                  "self.instance"
                ]
              ],
              [
                "test__inverse_transform_single_value",
                [
                  "self.instance"
                ]
              ],
              [
                "test__transform_multiple_values",
                [
                  "self.instance"
                ]
              ],
              [
                "test__inverse_transform_multiple_values",
                [
                  "self.instance"
                ]
              ],
              [
                "test__transform_single_value",
                [
                  "self.instance"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6127126396197323,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__inverse_transform_multiple_values",
                  "test__transform_single_value",
                  0.6336411415827503
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "test_sample",
                  0.7296630942005824
                ],
                [
                  "test__inverse_transform_single_value",
                  "test__inverse_transform_multiple_values",
                  0.7524959837040407
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__transform_single_value",
                  0.5227733021739333
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test_sample",
                  0.4297479997159695
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__inverse_transform_multiple_values",
                  0.4387258359693737
                ],
                [
                  "test__transform_single_value",
                  "test__transform_multiple_values",
                  0.9061085066981075
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__within_hyperparam_space_values_out_of_space",
                  0.9151465950282726
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__transform_multiple_values",
                  0.5766979695019764
                ],
                [
                  "test__inverse_transform_single_value",
                  "test__transform_multiple_values",
                  0.7703200779791607
                ],
                [
                  "test__transform_multiple_values",
                  "test_sample",
                  0.6193684923565116
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__inverse_transform_single_value",
                  0.5043836455122322
                ],
                [
                  "test__transform_single_value",
                  "test_sample",
                  0.5005482376552445
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__transform_multiple_values",
                  0.5296109939172796
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "test__transform_multiple_values",
                  0.7830966850386144
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__inverse_transform_single_value",
                  0.5250410204321445
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__inverse_transform_multiple_values",
                  0.4368668282614673
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__transform_single_value",
                  0.5571405960248966
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test_sample",
                  0.39042604085303634
                ],
                [
                  "test__inverse_transform_single_value",
                  "test__transform_single_value",
                  0.8205802608466797
                ],
                [
                  "test__inverse_transform_single_value",
                  "test_sample",
                  0.5245821245621051
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_hyperparams_\u0026_test_numerical.py",
    "testCases": [
      {
        "name": "TestFloatHyperParam",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___init__with_np_inf",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test__transform_min_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_min_max",
                  "[]"
                ],
                [
                  "test___init__no_min_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test__transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__min_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sample",
                  "[]"
                ],
                [
                  "test___init__min_eq_max",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test___init__min_gt_max",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test___init__min_no_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__transform_min_no_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__no_min_no_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___init__with_np_inf",
                  "[]"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test__transform_min_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_min_max",
                  "[]"
                ],
                [
                  "test___init__no_min_max",
                  "[]"
                ],
                [
                  "test__transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test__transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__min_max",
                  "[]"
                ],
                [
                  "test_sample",
                  "[]"
                ],
                [
                  "test___init__min_eq_max",
                  "[]"
                ],
                [
                  "test___init__min_gt_max",
                  "[]"
                ],
                [
                  "test___init__min_no_max",
                  "[]"
                ],
                [
                  "test__transform_min_no_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__no_min_no_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___init__with_np_inf",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___init__with_np_inf",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___init__with_np_inf",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___init__with_np_inf",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                []
              ],
              [
                "test__inverse_transform_no_min_no_max",
                []
              ],
              [
                "test__transform_min_max",
                []
              ],
              [
                "test__inverse_transform_min_max",
                []
              ],
              [
                "test___init__no_min_max",
                []
              ],
              [
                "test__transform_no_min_no_max",
                []
              ],
              [
                "test__transform_no_min_max",
                []
              ],
              [
                "test___init__min_max",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test___init__min_eq_max",
                []
              ],
              [
                "test___init__min_gt_max",
                []
              ],
              [
                "test___init__min_no_max",
                []
              ],
              [
                "test__transform_min_no_max",
                []
              ],
              [
                "test__inverse_transform_no_min_max",
                []
              ],
              [
                "test___init__no_min_no_max",
                []
              ],
              [
                "test__inverse_transform_min_no_max",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test___init__with_np_inf",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max",
                "true"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "true"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___init__with_np_inf",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "0"
                ],
                [
                  "test__transform_min_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_max",
                  "0"
                ],
                [
                  "test___init__no_min_max",
                  "0"
                ],
                [
                  "test__transform_no_min_no_max",
                  "0"
                ],
                [
                  "test__transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__min_max",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test___init__min_eq_max",
                  "0"
                ],
                [
                  "test___init__min_gt_max",
                  "0"
                ],
                [
                  "test___init__min_no_max",
                  "0"
                ],
                [
                  "test__transform_min_no_max",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__no_min_no_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___init__with_np_inf",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "0"
                ],
                [
                  "test__transform_min_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_max",
                  "0"
                ],
                [
                  "test___init__no_min_max",
                  "0"
                ],
                [
                  "test__transform_no_min_no_max",
                  "0"
                ],
                [
                  "test__transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__min_max",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test___init__min_eq_max",
                  "0"
                ],
                [
                  "test___init__min_gt_max",
                  "0"
                ],
                [
                  "test___init__min_no_max",
                  "0"
                ],
                [
                  "test__transform_min_no_max",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__no_min_no_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                "3"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "1"
              ],
              [
                "test__transform_min_max",
                "1"
              ],
              [
                "test__inverse_transform_min_max",
                "1"
              ],
              [
                "test___init__no_min_max",
                "3"
              ],
              [
                "test__transform_no_min_no_max",
                "1"
              ],
              [
                "test__transform_no_min_max",
                "1"
              ],
              [
                "test___init__min_max",
                "3"
              ],
              [
                "test_sample",
                "2"
              ],
              [
                "test___init__min_eq_max",
                "1"
              ],
              [
                "test___init__min_gt_max",
                "1"
              ],
              [
                "test___init__min_no_max",
                "3"
              ],
              [
                "test__transform_min_no_max",
                "1"
              ],
              [
                "test__inverse_transform_no_min_max",
                "1"
              ],
              [
                "test___init__no_min_no_max",
                "3"
              ],
              [
                "test__inverse_transform_min_no_max",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                [
                  "instance"
                ]
              ],
              [
                "test__inverse_transform_no_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "expected_result"
                ]
              ],
              [
                "test__transform_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "_min",
                  "expected_result"
                ]
              ],
              [
                "test__inverse_transform_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "_min",
                  "expected_result"
                ]
              ],
              [
                "test___init__no_min_max",
                [
                  "instance",
                  "_max"
                ]
              ],
              [
                "test__transform_no_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "expected_result"
                ]
              ],
              [
                "test__transform_no_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "expected_result"
                ]
              ],
              [
                "test___init__min_max",
                [
                  "instance",
                  "_max",
                  "_min"
                ]
              ],
              [
                "test_sample",
                [
                  "result",
                  "instance",
                  "n_samples",
                  "expected_result"
                ]
              ],
              [
                "test___init__min_eq_max",
                [
                  "n"
                ]
              ],
              [
                "test___init__min_gt_max",
                []
              ],
              [
                "test___init__min_no_max",
                [
                  "instance",
                  "_min"
                ]
              ],
              [
                "test__transform_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_min",
                  "expected_result"
                ]
              ],
              [
                "test__inverse_transform_no_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "expected_result"
                ]
              ],
              [
                "test___init__no_min_no_max",
                [
                  "instance"
                ]
              ],
              [
                "test__inverse_transform_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_min",
                  "expected_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                []
              ],
              [
                "test__inverse_transform_no_min_no_max",
                []
              ],
              [
                "test__transform_min_max",
                []
              ],
              [
                "test__inverse_transform_min_max",
                []
              ],
              [
                "test___init__no_min_max",
                []
              ],
              [
                "test__transform_no_min_no_max",
                []
              ],
              [
                "test__transform_no_min_max",
                []
              ],
              [
                "test___init__min_max",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test___init__min_eq_max",
                []
              ],
              [
                "test___init__min_gt_max",
                []
              ],
              [
                "test___init__min_no_max",
                []
              ],
              [
                "test__transform_min_no_max",
                []
              ],
              [
                "test__inverse_transform_no_min_max",
                []
              ],
              [
                "test___init__no_min_no_max",
                []
              ],
              [
                "test__inverse_transform_min_no_max",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6989331223874793,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.9157209358746202
                ],
                [
                  "test___init__with_np_inf",
                  "test__transform_no_min_no_max",
                  0.49218160103874026
                ],
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_min_no_max",
                  0.933962582597073
                ],
                [
                  "test___init__with_np_inf",
                  "test___init__min_eq_max",
                  0.68062120505704
                ],
                [
                  "test___init__with_np_inf",
                  "test__transform_min_max",
                  0.4567924732183544
                ],
                [
                  "test___init__min_eq_max",
                  "test___init__min_max",
                  0.8484258195460213
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_no_min_no_max",
                  0.5861366663539462
                ],
                [
                  "test___init__with_np_inf",
                  "test___init__min_max",
                  0.677575501940559
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_no_min_no_max",
                  0.6302858668672517
                ],
                [
                  "test___init__with_np_inf",
                  "test_sample",
                  0.394668884686466
                ],
                [
                  "test___init__with_np_inf",
                  "test__transform_min_no_max",
                  0.45991207277927454
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_min_max",
                  0.9203900230262253
                ],
                [
                  "test___init__with_np_inf",
                  "test___init__min_gt_max",
                  0.6209942051395498
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_no_min_max",
                  0.6096797116552675
                ],
                [
                  "test___init__with_np_inf",
                  "test___init__min_no_max",
                  0.7542518762585577
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.6739857212299754
                ],
                [
                  "test__transform_no_min_max",
                  "test__transform_min_max",
                  0.9709195467257716
                ],
                [
                  "test___init__no_min_max",
                  "test___init__min_gt_max",
                  0.6999999999999998
                ],
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_no_min_max",
                  0.9758040717606614
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__transform_min_max",
                  0.9093102610290927
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_min_max",
                  0.5338539126015656
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.9095682059366896
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_min_max",
                  0.6607209922128306
                ],
                [
                  "test___init__min_gt_max",
                  "test___init__min_max",
                  0.7167025543698928
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_no_min_max",
                  0.6302382297547047
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.6198968102523634
                ],
                [
                  "test___init__with_np_inf",
                  "test__transform_no_min_max",
                  0.4630231256508848
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test_sample",
                  0.7380229848444291
                ],
                [
                  "test___init__min_max",
                  "test__transform_no_min_no_max",
                  0.6710630310651383
                ],
                [
                  "test__inverse_transform_min_max",
                  "test_sample",
                  0.6983194442145025
                ],
                [
                  "test___init__with_np_inf",
                  "test__inverse_transform_min_max",
                  0.47157921211471965
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_min_max",
                  0.6673173907519568
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.9506634585680039
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_no_min_max",
                  0.6177844354592078
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_no_min_max",
                  0.947503806824563
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_min_max",
                  0.9601473306434621
                ],
                [
                  "test___init__with_np_inf",
                  "test__inverse_transform_no_min_max",
                  0.453873577926434
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.9264920252922859
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.6109744683659252
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_no_min_max",
                  0.6219701244259431
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.9255877081911809
                ],
                [
                  "test___init__with_np_inf",
                  "test__inverse_transform_no_min_no_max",
                  0.4771420065654062
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_min_max",
                  0.7264831572567789
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.960165937659758
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "test__inverse_transform_min_max",
                  0.9598825643070003
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.49147565782243685
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_no_min_max",
                  0.6598687226099635
                ],
                [
                  "test___init__with_np_inf",
                  "test___init__no_min_max",
                  0.8182018243392718
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_no_min_no_max",
                  0.4488792012484348
                ],
                [
                  "test___init__min_max",
                  "test__transform_no_min_max",
                  0.6731708857298683
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "test__inverse_transform_min_max",
                  0.9519741421662489
                ],
                [
                  "test___init__min_max",
                  "test__transform_min_no_max",
                  0.6815064623325726
                ],
                [
                  "test___init__min_max",
                  "test_sample",
                  0.468292905790847
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_no_min_no_max",
                  0.6401188601911475
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_min_max",
                  0.6666065822479365
                ],
                [
                  "test__transform_min_no_max",
                  "test__transform_min_max",
                  0.9643959372630745
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_eq_max",
                  0.6712328767123289
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_min_max",
                  0.46550797178631254
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_min_max",
                  0.697384349400942
                ],
                [
                  "test___init__no_min_max",
                  "test___init__min_eq_max",
                  0.8172608149948384
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_min_no_max",
                  0.4913538149119954
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.6341119002967079
                ],
                [
                  "test___init__no_min_max",
                  "test___init__min_max",
                  0.8958781929623659
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_no_min_max",
                  0.46613846427140415
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__transform_no_min_max",
                  0.9451689948582668
                ],
                [
                  "test___init__min_max",
                  "test__transform_min_max",
                  0.7283950617283951
                ],
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_min_max",
                  0.9266159566200829
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_min_no_max",
                  0.6760726113548572
                ],
                [
                  "test___init__min_no_max",
                  "test_sample",
                  0.4680144670904549
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_no_min_max",
                  0.4569273560377537
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_min_max",
                  0.8731561680993254
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "test_sample",
                  0.74162391798777
                ],
                [
                  "test___init__min_no_max",
                  "test___init__no_min_max",
                  0.9091428088332145
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_no_min_no_max",
                  0.6729070523332055
                ],
                [
                  "test___init__min_eq_max",
                  "test___init__min_gt_max",
                  0.8110537708303207
                ],
                [
                  "test__transform_no_min_no_max",
                  "test_sample",
                  0.7631352952964522
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_max",
                  0.6832455714928135
                ],
                [
                  "test___init__no_min_no_max",
                  "test_sample",
                  0.36074504334969026
                ],
                [
                  "test__transform_min_no_max",
                  "test_sample",
                  0.7533017860240793
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_no_min_no_max",
                  0.4814569204856494
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.8823348759066487
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__with_np_inf",
                  0.8750844065019087
                ],
                [
                  "test__transform_min_no_max",
                  "test__transform_no_min_max",
                  0.9618196098342285
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_eq_max",
                  0.8515101004080037
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.9384079454318838
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_min_max",
                  0.6577333568584459
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_no_min_max",
                  0.6468948367278463
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_no_min_no_max",
                  0.5361052200939842
                ],
                [
                  "test___init__min_gt_max",
                  "test_sample",
                  0.3441236008058427
                ],
                [
                  "test___init__no_min_max",
                  "test_sample",
                  0.44449298437421336
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_min_no_max",
                  0.6334313876784777
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_min_max",
                  0.6978066483726462
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__transform_min_no_max",
                  0.9388184033808383
                ],
                [
                  "test__transform_no_min_max",
                  "test_sample",
                  0.7693096530164816
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_min_no_max",
                  0.48484871649463723
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_min_no_max",
                  0.6200979635307634
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_min_max",
                  0.5171145012542264
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_min_no_max",
                  0.49806966831499866
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.5366039903240353
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_gt_max",
                  0.6124283575657523
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_min_no_max",
                  0.6777869687383383
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.6311284100441533
                ],
                [
                  "test___init__min_eq_max",
                  "test_sample",
                  0.4746645307232767
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.9593644138891955
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "test_sample",
                  0.7541077440939837
                ],
                [
                  "test__transform_min_max",
                  "test_sample",
                  0.7388621402477809
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_min_max",
                  0.4805768383647914
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.9394840747068206
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_no_min_max",
                  0.47238237298172897
                ],
                [
                  "test___init__with_np_inf",
                  "test__inverse_transform_min_no_max",
                  0.4661981785656115
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_min_no_max",
                  0.6225870853937484
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_gt_max",
                  0.7332273710264624
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.9223041872855697
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_min_no_max",
                  0.93847426440693
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_max",
                  0.9548801091797514
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.4630478822698234
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__no_min_max",
                  0.8586411094249567
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test__inverse_transform_min_max",
                  0.9155680292963103
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_no_max",
                  0.8025727383155896
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_min_no_max",
                  0.6341621391257249
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___init__with_np_inf",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 16
      },
      {
        "name": "TestIntHyperParam",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___init__no_min_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test_sample",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test___init__no_min_no_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test___init__min_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test___init__min_eq_max",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "[]"
                ],
                [
                  "test___init__min_gt_max",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__transform_min_no_max",
                  "[]"
                ],
                [
                  "test___init__min_no_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_min_max",
                  "[]"
                ],
                [
                  "test__transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__min_max_step",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__transform_min_max",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___init__no_min_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test_sample",
                  "[]"
                ],
                [
                  "test___init__no_min_no_max",
                  "[]"
                ],
                [
                  "test___init__min_max",
                  "[]"
                ],
                [
                  "test___init__min_eq_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "[]"
                ],
                [
                  "test___init__min_gt_max",
                  "[]"
                ],
                [
                  "test__transform_min_no_max",
                  "[]"
                ],
                [
                  "test___init__min_no_max",
                  "[]"
                ],
                [
                  "test__transform_no_min_no_max",
                  "[]"
                ],
                [
                  "test__inverse_transform_min_max",
                  "[]"
                ],
                [
                  "test__transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__min_max_step",
                  "[]"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "[]"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "[]"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "[]"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "[]"
                ],
                [
                  "test__transform_min_max",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_step",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "false"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "false"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_step",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "false"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "false"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_step",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "false"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "false"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___init__no_min_max",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test___init__no_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_max",
                  "false"
                ],
                [
                  "test___init__min_eq_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_gt_max",
                  "false"
                ],
                [
                  "test__transform_min_no_max",
                  "false"
                ],
                [
                  "test___init__min_no_max",
                  "false"
                ],
                [
                  "test__transform_no_min_no_max",
                  "false"
                ],
                [
                  "test__inverse_transform_min_max",
                  "false"
                ],
                [
                  "test__transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_step",
                  "false"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "false"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "false"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "false"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "false"
                ],
                [
                  "test__transform_min_max",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_step",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_invalid_step",
                "false"
              ],
              [
                "test___init__exclude_min_no_max",
                "false"
              ],
              [
                "test___init__no_min_exclude_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_step",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_invalid_step",
                "false"
              ],
              [
                "test___init__exclude_min_no_max",
                "false"
              ],
              [
                "test___init__no_min_exclude_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                []
              ],
              [
                "test__inverse_transform_no_min_no_max",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test___init__no_min_no_max",
                []
              ],
              [
                "test___init__min_max",
                []
              ],
              [
                "test___init__min_eq_max",
                []
              ],
              [
                "test__inverse_transform_min_no_max",
                []
              ],
              [
                "test___init__min_gt_max",
                []
              ],
              [
                "test__transform_min_no_max",
                []
              ],
              [
                "test___init__min_no_max",
                []
              ],
              [
                "test__transform_no_min_no_max",
                []
              ],
              [
                "test__inverse_transform_min_max",
                []
              ],
              [
                "test__transform_no_min_max",
                []
              ],
              [
                "test___init__min_max_step",
                []
              ],
              [
                "test__inverse_transform_no_min_max",
                []
              ],
              [
                "test___init__min_max_invalid_step",
                []
              ],
              [
                "test___init__exclude_min_no_max",
                []
              ],
              [
                "test___init__no_min_exclude_max",
                []
              ],
              [
                "test__transform_min_max",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_step",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_invalid_step",
                "false"
              ],
              [
                "test___init__exclude_min_no_max",
                "false"
              ],
              [
                "test___init__no_min_exclude_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test___init__no_min_max",
                "true"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "true"
              ],
              [
                "test___init__min_max",
                "true"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "true"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_step",
                "true"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_invalid_step",
                "false"
              ],
              [
                "test___init__exclude_min_no_max",
                "true"
              ],
              [
                "test___init__no_min_exclude_max",
                "true"
              ],
              [
                "test__transform_min_max",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___init__no_min_max",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test___init__no_min_no_max",
                  "0"
                ],
                [
                  "test___init__min_max",
                  "0"
                ],
                [
                  "test___init__min_eq_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "0"
                ],
                [
                  "test___init__min_gt_max",
                  "0"
                ],
                [
                  "test__transform_min_no_max",
                  "0"
                ],
                [
                  "test___init__min_no_max",
                  "0"
                ],
                [
                  "test__transform_no_min_no_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_max",
                  "0"
                ],
                [
                  "test__transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__min_max_step",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "0"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "0"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "0"
                ],
                [
                  "test__transform_min_max",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___init__no_min_max",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test___init__no_min_no_max",
                  "0"
                ],
                [
                  "test___init__min_max",
                  "0"
                ],
                [
                  "test___init__min_eq_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "0"
                ],
                [
                  "test___init__min_gt_max",
                  "0"
                ],
                [
                  "test__transform_min_no_max",
                  "0"
                ],
                [
                  "test___init__min_no_max",
                  "0"
                ],
                [
                  "test__transform_no_min_no_max",
                  "0"
                ],
                [
                  "test__inverse_transform_min_max",
                  "0"
                ],
                [
                  "test__transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__min_max_step",
                  "0"
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "0"
                ],
                [
                  "test___init__min_max_invalid_step",
                  "0"
                ],
                [
                  "test___init__exclude_min_no_max",
                  "0"
                ],
                [
                  "test___init__no_min_exclude_max",
                  "0"
                ],
                [
                  "test__transform_min_max",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_step",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_invalid_step",
                "false"
              ],
              [
                "test___init__exclude_min_no_max",
                "false"
              ],
              [
                "test___init__no_min_exclude_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_step",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_invalid_step",
                "false"
              ],
              [
                "test___init__exclude_min_no_max",
                "false"
              ],
              [
                "test___init__no_min_exclude_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                "3"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "1"
              ],
              [
                "test_sample",
                "4"
              ],
              [
                "test___init__no_min_no_max",
                "4"
              ],
              [
                "test___init__min_max",
                "4"
              ],
              [
                "test___init__min_eq_max",
                "1"
              ],
              [
                "test__inverse_transform_min_no_max",
                "1"
              ],
              [
                "test___init__min_gt_max",
                "1"
              ],
              [
                "test__transform_min_no_max",
                "1"
              ],
              [
                "test___init__min_no_max",
                "4"
              ],
              [
                "test__transform_no_min_no_max",
                "1"
              ],
              [
                "test__inverse_transform_min_max",
                "1"
              ],
              [
                "test__transform_no_min_max",
                "1"
              ],
              [
                "test___init__min_max_step",
                "3"
              ],
              [
                "test__inverse_transform_no_min_max",
                "1"
              ],
              [
                "test___init__min_max_invalid_step",
                "1"
              ],
              [
                "test___init__exclude_min_no_max",
                "3"
              ],
              [
                "test___init__no_min_exclude_max",
                "4"
              ],
              [
                "test__transform_min_max",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                [
                  "expected_min",
                  "instance",
                  "expected_max",
                  "_max"
                ]
              ],
              [
                "test__inverse_transform_no_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "expected_result"
                ]
              ],
              [
                "test_sample",
                [
                  "result",
                  "instance",
                  "n_samples"
                ]
              ],
              [
                "test___init__no_min_no_max",
                [
                  "expected_min",
                  "instance",
                  "expected_max"
                ]
              ],
              [
                "test___init__min_max",
                [
                  "instance",
                  "_max",
                  "_min"
                ]
              ],
              [
                "test___init__min_eq_max",
                [
                  "n"
                ]
              ],
              [
                "test__inverse_transform_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_min",
                  "expected_result"
                ]
              ],
              [
                "test___init__min_gt_max",
                []
              ],
              [
                "test__transform_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_min",
                  "expected_result"
                ]
              ],
              [
                "test___init__min_no_max",
                [
                  "instance",
                  "_min"
                ]
              ],
              [
                "test__transform_no_min_no_max",
                [
                  "result",
                  "instance",
                  "values",
                  "expected_result"
                ]
              ],
              [
                "test__inverse_transform_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "_min",
                  "expected_result"
                ]
              ],
              [
                "test__transform_no_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "expected_result"
                ]
              ],
              [
                "test___init__min_max_step",
                [
                  "instance",
                  "_max",
                  "_step",
                  "_min"
                ]
              ],
              [
                "test__inverse_transform_no_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "expected_result"
                ]
              ],
              [
                "test___init__min_max_invalid_step",
                [
                  "_max",
                  "_step",
                  "_min"
                ]
              ],
              [
                "test___init__exclude_min_no_max",
                [
                  "expected_min",
                  "instance",
                  "expected_max"
                ]
              ],
              [
                "test___init__no_min_exclude_max",
                [
                  "expected_min",
                  "instance",
                  "expected_max"
                ]
              ],
              [
                "test__transform_min_max",
                [
                  "result",
                  "instance",
                  "values",
                  "_max",
                  "_min",
                  "expected_result"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                []
              ],
              [
                "test__inverse_transform_no_min_no_max",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test___init__no_min_no_max",
                []
              ],
              [
                "test___init__min_max",
                []
              ],
              [
                "test___init__min_eq_max",
                []
              ],
              [
                "test__inverse_transform_min_no_max",
                []
              ],
              [
                "test___init__min_gt_max",
                []
              ],
              [
                "test__transform_min_no_max",
                []
              ],
              [
                "test___init__min_no_max",
                []
              ],
              [
                "test__transform_no_min_no_max",
                []
              ],
              [
                "test__inverse_transform_min_max",
                []
              ],
              [
                "test__transform_no_min_max",
                []
              ],
              [
                "test___init__min_max_step",
                []
              ],
              [
                "test__inverse_transform_no_min_max",
                []
              ],
              [
                "test___init__min_max_invalid_step",
                []
              ],
              [
                "test___init__exclude_min_no_max",
                []
              ],
              [
                "test___init__no_min_exclude_max",
                []
              ],
              [
                "test__transform_min_max",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7175352563938827,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__no_min_max",
                  "test___init__min_max",
                  0.918634750359429
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test___init__min_no_max",
                  0.8475706863595912
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.8802664993896132
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__transform_min_max",
                  0.7377111135633175
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_max",
                  0.8274461686577033
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_no_min_max",
                  0.6291233561606067
                ],
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_no_min_max",
                  0.9530886090040058
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_max_invalid_step",
                  0.7445266493319367
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_min_max",
                  0.9630511577624173
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__transform_no_min_max",
                  0.6412284954175119
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_no_min_no_max",
                  0.4968054372267885
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "test__inverse_transform_min_max",
                  0.9656090991705352
                ],
                [
                  "test___init__no_min_max",
                  "test___init__min_max_invalid_step",
                  0.8663222948941567
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_min_max",
                  0.6621827228839171
                ],
                [
                  "test___init__min_gt_max",
                  "test___init__min_max",
                  0.7262040090592468
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__transform_no_min_max",
                  0.6174679839715955
                ],
                [
                  "test__transform_min_no_max",
                  "test__transform_no_min_max",
                  0.9683081848377082
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_no_min_no_max",
                  0.6393139231276915
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__min_eq_max",
                  0.754829412424069
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.8451732895199005
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_min_max",
                  0.9317627477967867
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__transform_min_no_max",
                  0.6768420666936071
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__transform_no_min_no_max",
                  0.6042753041918767
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.8885139829158493
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__min_no_max",
                  0.8572709817066754
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_no_min_no_max",
                  0.5231143743471869
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.9479295238708837
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.9300556246824515
                ],
                [
                  "test___init__min_gt_max",
                  "test___init__min_max_invalid_step",
                  0.7464798341932238
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_max",
                  0.9690706295638553
                ],
                [
                  "test___init__min_max_step",
                  "test__inverse_transform_no_min_no_max",
                  0.5126577464779474
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__min_max_invalid_step",
                  0.7947606672907419
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__no_min_max",
                  0.9317049755139727
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__inverse_transform_min_max",
                  0.6580128969221319
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_min_max",
                  0.7448307706403466
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.9171115986388643
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "test__inverse_transform_min_max",
                  0.9608933667042175
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_max_invalid_step",
                  0.8803928527035958
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_no_min_max",
                  0.704916496690033
                ],
                [
                  "test___init__min_max",
                  "test__transform_min_no_max",
                  0.6469485597401252
                ],
                [
                  "test___init__min_max_step",
                  "test__inverse_transform_no_min_max",
                  0.6485742572128156
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_no_min_max",
                  0.6273001843158884
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_no_min_no_max",
                  0.6073017715618931
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_min_no_max",
                  0.6439066660540429
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.5452857789882416
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.8877256615015056
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_no_max",
                  0.8589268063772038
                ],
                [
                  "test___init__min_max",
                  "test_sample",
                  0.5689046389082957
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test__inverse_transform_min_max",
                  0.8922440857744637
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_min_max",
                  0.8617042888143803
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.585906848587998
                ],
                [
                  "test___init__min_eq_max",
                  "test___init__min_max_step",
                  0.8244873630109233
                ],
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_min_max",
                  0.9318149210846822
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_min_max",
                  0.7277059350747559
                ],
                [
                  "test___init__min_max_step",
                  "test_sample",
                  0.5757106956927962
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__transform_min_max",
                  0.6523956159283566
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__transform_min_max",
                  0.6734976719070604
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_min_no_max",
                  0.6938727354388292
                ],
                [
                  "test___init__min_max",
                  "test___init__min_max_invalid_step",
                  0.9243494598251468
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__transform_min_no_max",
                  0.6266339897165353
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__transform_no_min_no_max",
                  0.5927104719176576
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_min_max",
                  0.5434736758699876
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__exclude_min_no_max",
                  0.9322547995477235
                ],
                [
                  "test__transform_min_max",
                  "test_sample",
                  0.5277472309306083
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_min_no_max",
                  0.529346062501659
                ],
                [
                  "test___init__no_min_max",
                  "test__transform_min_no_max",
                  0.6974961163966087
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.5724709010188654
                ],
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_min_no_max",
                  0.9159036516163056
                ],
                [
                  "test__inverse_transform_no_min_no_max",
                  "test_sample",
                  0.5395078832162413
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test___init__min_max",
                  0.837096127698187
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__min_max",
                  0.8521817387375293
                ],
                [
                  "test__transform_min_no_max",
                  "test__transform_min_max",
                  0.9686689945704539
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.6
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test___init__min_eq_max",
                  0.7229396810297575
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_min_max",
                  0.6668650498481644
                ],
                [
                  "test___init__min_max_step",
                  "test__transform_no_min_max",
                  0.6623022178315378
                ],
                [
                  "test___init__min_eq_max",
                  "test___init__min_max",
                  0.832998716273842
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_eq_max",
                  0.7204479459667008
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_no_min_no_max",
                  0.5834218321555878
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_min_max",
                  0.6514662893847489
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__inverse_transform_no_min_max",
                  0.6650793832923902
                ],
                [
                  "test__transform_min_no_max",
                  "test_sample",
                  0.5409852501173373
                ],
                [
                  "test___init__no_min_no_max",
                  "test__transform_no_min_max",
                  0.6337806620332662
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_gt_max",
                  0.7494271316419133
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__inverse_transform_no_min_no_max",
                  0.5279691351373276
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test___init__min_max_step",
                  0.80626377477213
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_no_min_max",
                  0.49624228987099667
                ],
                [
                  "test___init__min_max_step",
                  "test__transform_min_max",
                  0.718541941022515
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test_sample",
                  0.4777912445812292
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test_sample",
                  0.5004543046291962
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "test_sample",
                  0.5915815893841527
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_gt_max",
                  0.6456672730942077
                ],
                [
                  "test___init__min_gt_max",
                  "test___init__min_max_step",
                  0.6979381398511072
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.6206438858983666
                ],
                [
                  "test___init__no_min_max",
                  "test__inverse_transform_no_min_max",
                  0.690305242725442
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.4965853017613682
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__min_max_step",
                  0.7931660377930195
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_min_no_max",
                  0.6435877652684148
                ],
                [
                  "test___init__min_max",
                  "test__inverse_transform_min_max",
                  0.6801893838311327
                ],
                [
                  "test___init__min_eq_max",
                  "test_sample",
                  0.5448156607831017
                ],
                [
                  "test___init__no_min_max",
                  "test___init__min_gt_max",
                  0.6912221194617398
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__inverse_transform_min_max",
                  0.7207499701564472
                ],
                [
                  "test___init__min_max",
                  "test__transform_no_min_max",
                  0.6405778501045569
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__inverse_transform_min_no_max",
                  0.6733259802262709
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test___init__min_gt_max",
                  0.6531972647421809
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__min_gt_max",
                  0.6685631938613181
                ],
                [
                  "test___init__min_no_max",
                  "test___init__no_min_max",
                  0.8993413373535689
                ],
                [
                  "test__inverse_transform_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.9536209165061522
                ],
                [
                  "test___init__no_min_max",
                  "test_sample",
                  0.5424116152957009
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.6279373432883291
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.5062328083714609
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__transform_min_max",
                  0.8922980425589064
                ],
                [
                  "test___init__no_min_no_max",
                  "test_sample",
                  0.47697578581267003
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_min_max",
                  0.6469580964442586
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__no_min_exclude_max",
                  0.9739988151227215
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_max_step",
                  0.9398501212305471
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_no_min_max",
                  0.6160831149758973
                ],
                [
                  "test__inverse_transform_min_max",
                  "test_sample",
                  0.5656356928666315
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test___init__min_max_step",
                  0.8353100131432973
                ],
                [
                  "test__inverse_transform_no_min_max",
                  "test_sample",
                  0.5885400186439979
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_no_min_max",
                  0.6126998200740037
                ],
                [
                  "test___init__min_max_step",
                  "test__transform_min_no_max",
                  0.6592545556465615
                ],
                [
                  "test___init__min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.6340290417851715
                ],
                [
                  "test___init__min_no_max",
                  "test___init__min_eq_max",
                  0.835509977844025
                ],
                [
                  "test___init__min_max_step",
                  "test__transform_no_min_no_max",
                  0.5918162445404862
                ],
                [
                  "test___init__no_min_max",
                  "test___init__min_max_step",
                  0.9056612404543829
                ],
                [
                  "test___init__min_eq_max",
                  "test___init__min_gt_max",
                  0.8166666666666667
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_min_no_max",
                  0.6395556376208137
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__transform_no_min_max",
                  0.9291837426624712
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.6405616737343426
                ],
                [
                  "test___init__min_eq_max",
                  "test__transform_no_min_no_max",
                  0.5989852789259154
                ],
                [
                  "test___init__min_max",
                  "test___init__min_max_step",
                  0.9730646809622657
                ],
                [
                  "test___init__min_no_max",
                  "test_sample",
                  0.5517562674787481
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__inverse_transform_no_min_no_max",
                  0.8847185207393092
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test_sample",
                  0.5681893269100701
                ],
                [
                  "test___init__no_min_no_max",
                  "test__inverse_transform_min_max",
                  0.6364880506733593
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_no_min_max",
                  0.9240908147708394
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__no_min_max",
                  0.9350436814218022
                ],
                [
                  "test___init__min_max",
                  "test__transform_no_min_no_max",
                  0.5779738276630202
                ],
                [
                  "test___init__no_min_no_max",
                  "test___init__no_min_exclude_max",
                  0.9493799846686368
                ],
                [
                  "test___init__no_min_max",
                  "test___init__min_eq_max",
                  0.8000256012288657
                ],
                [
                  "test___init__min_gt_max",
                  "test__inverse_transform_no_min_no_max",
                  0.4301162633521314
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__transform_no_min_no_max",
                  0.5717797039027865
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__transform_min_no_max",
                  0.6455129430910272
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_no_min_max",
                  0.5067459361951188
                ],
                [
                  "test___init__min_max_step",
                  "test___init__min_max_invalid_step",
                  0.9529986398537121
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__transform_no_min_max",
                  0.6791566974636281
                ],
                [
                  "test__transform_no_min_no_max",
                  "test_sample",
                  0.5289638366880295
                ],
                [
                  "test___init__exclude_min_no_max",
                  "test__inverse_transform_min_no_max",
                  0.6421596064185886
                ],
                [
                  "test___init__min_max",
                  "test__transform_min_max",
                  0.6961960299090875
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_min_max",
                  0.5562630415806639
                ],
                [
                  "test__transform_no_min_max",
                  "test_sample",
                  0.5467405743329654
                ],
                [
                  "test___init__min_max_invalid_step",
                  "test__inverse_transform_no_min_no_max",
                  0.5272497301964962
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_min_max",
                  0.6515327693178214
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__inverse_transform_min_max",
                  0.637396010532247
                ],
                [
                  "test___init__min_eq_max",
                  "test___init__min_max_invalid_step",
                  0.874042843833838
                ],
                [
                  "test___init__min_gt_max",
                  "test__transform_min_no_max",
                  0.5321102905005168
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test___init__min_max_invalid_step",
                  0.7618727904378289
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__inverse_transform_min_no_max",
                  0.6233787261925371
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test__inverse_transform_no_min_max",
                  0.6046693311223913
                ],
                [
                  "test__transform_no_min_max",
                  "test__transform_min_max",
                  0.9688817556229011
                ],
                [
                  "test___init__min_max_step",
                  "test__inverse_transform_min_max",
                  0.7020215271620454
                ],
                [
                  "test___init__min_no_max",
                  "test__transform_min_no_max",
                  0.6373399209123514
                ],
                [
                  "test___init__min_max_step",
                  "test__inverse_transform_min_no_max",
                  0.6558298334909749
                ],
                [
                  "test__transform_no_min_no_max",
                  "test__transform_min_no_max",
                  0.9302190898178608
                ],
                [
                  "test__transform_min_no_max",
                  "test__inverse_transform_no_min_max",
                  0.9223293164422646
                ],
                [
                  "test__transform_no_min_max",
                  "test__inverse_transform_no_min_no_max",
                  0.8776092555870882
                ],
                [
                  "test__transform_min_max",
                  "test__inverse_transform_min_no_max",
                  0.9189321085280939
                ],
                [
                  "test___init__min_eq_max",
                  "test__inverse_transform_min_no_max",
                  0.6362332481991095
                ],
                [
                  "test___init__no_min_exclude_max",
                  "test___init__no_min_max",
                  0.9259367532222393
                ],
                [
                  "test___init__min_gt_max",
                  "test_sample",
                  0.43585252862648133
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___init__no_min_max",
                "false"
              ],
              [
                "test__inverse_transform_no_min_no_max",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test___init__no_min_no_max",
                "false"
              ],
              [
                "test___init__min_max",
                "false"
              ],
              [
                "test___init__min_eq_max",
                "false"
              ],
              [
                "test__inverse_transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_gt_max",
                "false"
              ],
              [
                "test__transform_min_no_max",
                "false"
              ],
              [
                "test___init__min_no_max",
                "false"
              ],
              [
                "test__transform_no_min_no_max",
                "false"
              ],
              [
                "test__inverse_transform_min_max",
                "false"
              ],
              [
                "test__transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_step",
                "false"
              ],
              [
                "test__inverse_transform_no_min_max",
                "false"
              ],
              [
                "test___init__min_max_invalid_step",
                "false"
              ],
              [
                "test___init__exclude_min_no_max",
                "false"
              ],
              [
                "test___init__no_min_exclude_max",
                "false"
              ],
              [
                "test__transform_min_max",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 19
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_hyperparams_\u0026_test_categorical.py",
    "testCases": [
      {
        "name": "TestCategoricalHyperParam",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__transform_invalid_value",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test__inverse_transform_single_value",
                  "[]"
                ],
                [
                  "test___init__",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "[]"
                ],
                [
                  "test__transform_single_value",
                  "[]"
                ],
                [
                  "test__transform_multiple_values",
                  "[]"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "[]"
                ],
                [
                  "test_sample",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__transform_invalid_value",
                  "[]"
                ],
                [
                  "test__inverse_transform_single_value",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "[]"
                ],
                [
                  "test__transform_single_value",
                  "[]"
                ],
                [
                  "test__transform_multiple_values",
                  "[]"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "[]"
                ],
                [
                  "test_sample",
                  "[]"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__transform_invalid_value",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__transform_invalid_value",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__transform_invalid_value",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__transform_invalid_value",
                  "false"
                ],
                [
                  "test__inverse_transform_single_value",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "false"
                ],
                [
                  "test__transform_single_value",
                  "false"
                ],
                [
                  "test__transform_multiple_values",
                  "false"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test__transform_invalid_value",
                []
              ],
              [
                "test__inverse_transform_single_value",
                []
              ],
              [
                "test___init__",
                [
                  "self.instance"
                ]
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                []
              ],
              [
                "test__transform_single_value",
                []
              ],
              [
                "test__transform_multiple_values",
                []
              ],
              [
                "test__inverse_transform_multiple_values",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__transform_invalid_value",
                  "0"
                ],
                [
                  "test__inverse_transform_single_value",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "0"
                ],
                [
                  "test__transform_single_value",
                  "0"
                ],
                [
                  "test__transform_multiple_values",
                  "0"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__transform_invalid_value",
                  "0"
                ],
                [
                  "test__inverse_transform_single_value",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "0"
                ],
                [
                  "test__transform_single_value",
                  "0"
                ],
                [
                  "test__transform_multiple_values",
                  "0"
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test__transform_invalid_value",
                "1"
              ],
              [
                "test__inverse_transform_single_value",
                "1"
              ],
              [
                "test___init__",
                "3"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "0"
              ],
              [
                "test__transform_single_value",
                "1"
              ],
              [
                "test__transform_multiple_values",
                "1"
              ],
              [
                "test__inverse_transform_multiple_values",
                "1"
              ],
              [
                "test_sample",
                "3"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                []
              ],
              [
                "test__inverse_transform_single_value",
                [
                  "result",
                  "value"
                ]
              ],
              [
                "test___init__",
                [
                  "encoder_instance",
                  "instance",
                  "expected_encoder_fit_call",
                  "choices"
                ]
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                [
                  "values",
                  "values_2"
                ]
              ],
              [
                "test__transform_single_value",
                [
                  "result",
                  "value",
                  "expected_result"
                ]
              ],
              [
                "test__transform_multiple_values",
                [
                  "values",
                  "expected_results",
                  "results"
                ]
              ],
              [
                "test__inverse_transform_multiple_values",
                [
                  "values",
                  "results"
                ]
              ],
              [
                "test_sample",
                [
                  "expected_results",
                  "results",
                  "n"
                ]
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                [
                  "values",
                  "values_2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test__transform_invalid_value",
                [
                  "self.instance"
                ]
              ],
              [
                "test__inverse_transform_single_value",
                [
                  "self.instance"
                ]
              ],
              [
                "test___init__",
                []
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                [
                  "self.instance"
                ]
              ],
              [
                "test__transform_single_value",
                [
                  "self.instance"
                ]
              ],
              [
                "test__transform_multiple_values",
                [
                  "self.instance"
                ]
              ],
              [
                "test__inverse_transform_multiple_values",
                [
                  "self.instance"
                ]
              ],
              [
                "test_sample",
                [
                  "self.instance"
                ]
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                [
                  "self.instance"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5407380171815951,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test__transform_single_value",
                  0.5174996305944751
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test_sample",
                  0.34130835071716425
                ],
                [
                  "test__transform_single_value",
                  "test__inverse_transform_multiple_values",
                  0.8108281864910628
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__inverse_transform_multiple_values",
                  0.4798128698178172
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__inverse_transform_single_value",
                  0.4475095674684909
                ],
                [
                  "test___init__",
                  "test__transform_multiple_values",
                  0.5007446873577307
                ],
                [
                  "test__transform_invalid_value",
                  "test__inverse_transform_single_value",
                  0.4979715940714133
                ],
                [
                  "test__transform_single_value",
                  "test__inverse_transform_single_value",
                  0.8241955141918907
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__transform_invalid_value",
                  0.47035587346735236
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__transform_single_value",
                  0.42713270538368486
                ],
                [
                  "test___init__",
                  "test__transform_invalid_value",
                  0.2760485888278269
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__within_hyperparam_space_values_out_of_space",
                  0.8578472520985216
                ],
                [
                  "test__transform_single_value",
                  "test_sample",
                  0.6757202856120927
                ],
                [
                  "test__transform_invalid_value",
                  "test__inverse_transform_multiple_values",
                  0.4069129299484899
                ],
                [
                  "test__transform_multiple_values",
                  "test__inverse_transform_multiple_values",
                  0.8950153610247628
                ],
                [
                  "test___init__",
                  "test__within_hyperparam_space_values_out_of_space",
                  0.37750568349224467
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__transform_multiple_values",
                  0.4583492485141057
                ],
                [
                  "test__transform_multiple_values",
                  "test__inverse_transform_single_value",
                  0.7768121808644739
                ],
                [
                  "test__transform_multiple_values",
                  "test_sample",
                  0.8010019886858419
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__transform_invalid_value",
                  0.5938729247896879
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__inverse_transform_single_value",
                  0.4890666629367698
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test_sample",
                  0.30581712367591507
                ],
                [
                  "test__transform_single_value",
                  "test__transform_invalid_value",
                  0.44307347309910416
                ],
                [
                  "test___init__",
                  "test__inverse_transform_multiple_values",
                  0.46673429959041157
                ],
                [
                  "test___init__",
                  "test__within_hyperparam_space_values_in_space",
                  0.38479340945527873
                ],
                [
                  "test__transform_multiple_values",
                  "test__transform_invalid_value",
                  0.3664983439345264
                ],
                [
                  "test__inverse_transform_single_value",
                  "test__inverse_transform_multiple_values",
                  0.9031556725273181
                ],
                [
                  "test__transform_invalid_value",
                  "test_sample",
                  0.1905465679551013
                ],
                [
                  "test__inverse_transform_multiple_values",
                  "test_sample",
                  0.7487246821031024
                ],
                [
                  "test___init__",
                  "test_sample",
                  0.4718517688235407
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__inverse_transform_multiple_values",
                  0.42138364779874216
                ],
                [
                  "test__inverse_transform_single_value",
                  "test_sample",
                  0.5820888438976071
                ],
                [
                  "test__transform_single_value",
                  "test__transform_multiple_values",
                  0.9193914358122431
                ],
                [
                  "test__within_hyperparam_space_values_in_space",
                  "test__transform_single_value",
                  0.4686233489032049
                ],
                [
                  "test__within_hyperparam_space_values_out_of_space",
                  "test__transform_multiple_values",
                  0.4021904470427731
                ],
                [
                  "test___init__",
                  "test__inverse_transform_single_value",
                  0.46618346756265433
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__transform_invalid_value",
                "false"
              ],
              [
                "test__inverse_transform_single_value",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_in_space",
                "false"
              ],
              [
                "test__transform_single_value",
                "false"
              ],
              [
                "test__transform_multiple_values",
                "false"
              ],
              [
                "test__inverse_transform_multiple_values",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test__within_hyperparam_space_values_out_of_space",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 9
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_tuners_\u0026_test_gaussian_process.py",
    "testCases": [
      {
        "name": "TestGaussianProcessTuner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___repr__",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___repr__",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___repr__",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___repr__",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "1"
              ],
              [
                "test___init__",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                [
                  "result",
                  "tunable",
                  "instance"
                ]
              ],
              [
                "test___init__",
                [
                  "tunable",
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8364444331084614,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test___repr__",
                  0.8364444331084614
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestGaussianProcessExpectedImprovementTuner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___repr__",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___repr__",
                  "[PyAssertStatement]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___repr__",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___repr__",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___repr__",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "1"
              ],
              [
                "test___init__",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                [
                  "result",
                  "tunable",
                  "instance"
                ]
              ],
              [
                "test___init__",
                [
                  "tunable",
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8364807042923593,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test___repr__",
                  0.8364807042923593
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___repr__",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestGaussianCopulaProcessExpectedImprovementTuner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test___repr__",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test___repr__",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                []
              ],
              [
                "test___repr__",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test___repr__",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test___repr__",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "2"
              ],
              [
                "test___repr__",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                [
                  "tunable",
                  "instance"
                ]
              ],
              [
                "test___repr__",
                [
                  "result",
                  "tunable",
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                []
              ],
              [
                "test___repr__",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8364807042923593,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test___repr__",
                  0.8364807042923593
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestGaussianCopulaProcessTuner",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test___repr__",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test___repr__",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test___repr__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                []
              ],
              [
                "test___repr__",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test___repr__",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test___repr__",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "2"
              ],
              [
                "test___repr__",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                [
                  "tunable",
                  "instance"
                ]
              ],
              [
                "test___repr__",
                [
                  "result",
                  "tunable",
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                []
              ],
              [
                "test___repr__",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8364444331084614,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test___repr__",
                  0.8364444331084614
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test___init__",
                "false"
              ],
              [
                "test___repr__",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_acquisition_\u0026_test_predicted_score.py",
    "testCases": [
      {
        "name": "TestPredictedScoreAcquisition",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__acquire",
                  "[]"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "[]"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__acquire",
                  "[PyAssertStatement]"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "[PyAssertStatement]"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "false"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "false"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "false"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "false"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_candidates_shape_one",
                "false"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_candidates_shape_one",
                "false"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                []
              ],
              [
                "test__acquire_candidates_shape_one",
                []
              ],
              [
                "test__acquire_num_candidates_gt_one",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_candidates_shape_one",
                "false"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_candidates_shape_one",
                "false"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__acquire",
                  "0"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "0"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__acquire",
                  "0"
                ],
                [
                  "test__acquire_candidates_shape_one",
                  "0"
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_candidates_shape_one",
                "false"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_candidates_shape_one",
                "false"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "2"
              ],
              [
                "test__acquire_candidates_shape_one",
                "2"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                [
                  "result",
                  "candidates",
                  "instance",
                  "expected_call",
                  "called_with"
                ]
              ],
              [
                "test__acquire_candidates_shape_one",
                [
                  "result",
                  "candidates",
                  "instance",
                  "expected_call",
                  "called_with"
                ]
              ],
              [
                "test__acquire_num_candidates_gt_one",
                [
                  "result",
                  "candidates",
                  "instance",
                  "expected_call",
                  "called_with"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                []
              ],
              [
                "test__acquire_candidates_shape_one",
                []
              ],
              [
                "test__acquire_num_candidates_gt_one",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8929105484298966,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__acquire",
                  "test__acquire_num_candidates_gt_one",
                  0.8254321082806984
                ],
                [
                  "test__acquire",
                  "test__acquire_candidates_shape_one",
                  0.9272686231648295
                ],
                [
                  "test__acquire_num_candidates_gt_one",
                  "test__acquire_candidates_shape_one",
                  0.9260309138441617
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_candidates_shape_one",
                "false"
              ],
              [
                "test__acquire_num_candidates_gt_one",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_metamodels_\u0026_test_gaussian_process.py",
    "testCases": [
      {
        "name": "TestGaussianProcessMetaModel",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__predict",
                  "[]"
                ],
                [
                  "test___init__",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__predict",
                  "[]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__predict",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__predict",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__predict",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "2"
              ],
              [
                "test___init__",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                [
                  "result",
                  "instance"
                ]
              ],
              [
                "test___init__",
                [
                  "instance"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                []
              ],
              [
                "test___init__",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6829042602625439,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test___init__",
                  "test__predict",
                  0.6829042602625439
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__predict",
                "false"
              ],
              [
                "test___init__",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestGaussianCopulaProcessMetaModel",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test___init__",
                  "[]"
                ],
                [
                  "test__trasnform",
                  "[]"
                ],
                [
                  "test__fit",
                  "[]"
                ],
                [
                  "test__predict_one_candidate",
                  "[]"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "[]"
                ],
                [
                  "test___init__",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test__trasnform",
                  "[]"
                ],
                [
                  "test__fit",
                  "[]"
                ],
                [
                  "test__predict_one_candidate",
                  "[]"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__trasnform",
                  "true"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict_one_candidate",
                  "false"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__trasnform",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict_one_candidate",
                  "false"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__trasnform",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict_one_candidate",
                  "false"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "false"
                ],
                [
                  "test___init__",
                  "false"
                ],
                [
                  "test__trasnform",
                  "false"
                ],
                [
                  "test__fit",
                  "false"
                ],
                [
                  "test__predict_one_candidate",
                  "false"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__trasnform",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict_one_candidate",
                "false"
              ],
              [
                "test__predict_candidate_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__trasnform",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict_one_candidate",
                "false"
              ],
              [
                "test__predict_candidate_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test__trasnform",
                []
              ],
              [
                "test__fit",
                []
              ],
              [
                "test__predict_one_candidate",
                []
              ],
              [
                "test__predict_candidate_gt_one",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__trasnform",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict_one_candidate",
                "false"
              ],
              [
                "test__predict_candidate_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__trasnform",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict_one_candidate",
                "false"
              ],
              [
                "test__predict_candidate_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__trasnform",
                  "0"
                ],
                [
                  "test__fit",
                  "0"
                ],
                [
                  "test__predict_one_candidate",
                  "0"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "0"
                ],
                [
                  "test___init__",
                  "0"
                ],
                [
                  "test__trasnform",
                  "0"
                ],
                [
                  "test__fit",
                  "0"
                ],
                [
                  "test__predict_one_candidate",
                  "0"
                ],
                [
                  "test__predict_candidate_gt_one",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__trasnform",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict_one_candidate",
                "false"
              ],
              [
                "test__predict_candidate_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__trasnform",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict_one_candidate",
                "false"
              ],
              [
                "test__predict_candidate_gt_one",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "1"
              ],
              [
                "test___init__",
                "2"
              ],
              [
                "test__trasnform",
                "1"
              ],
              [
                "test__fit",
                "2"
              ],
              [
                "test__predict_one_candidate",
                "1"
              ],
              [
                "test__predict_candidate_gt_one",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                [
                  "instance",
                  "trials",
                  "scores"
                ]
              ],
              [
                "test___init__",
                [
                  "instance"
                ]
              ],
              [
                "test__trasnform",
                [
                  "result",
                  "instance",
                  "trials",
                  "distribution",
                  "distributions",
                  "expected_result"
                ]
              ],
              [
                "test__fit",
                [
                  "instance",
                  "trials",
                  "scores",
                  "expected_scores",
                  "mock_fit_call",
                  "expected_trials"
                ]
              ],
              [
                "test__predict_one_candidate",
                [
                  "candidates",
                  "instance",
                  "trials",
                  "scores",
                  "expected_scores",
                  "predicted_scores"
                ]
              ],
              [
                "test__predict_candidate_gt_one",
                [
                  "candidates",
                  "instance",
                  "trials",
                  "scores",
                  "expected_scores",
                  "predicted_scores"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                []
              ],
              [
                "test___init__",
                []
              ],
              [
                "test__trasnform",
                []
              ],
              [
                "test__fit",
                []
              ],
              [
                "test__predict_one_candidate",
                []
              ],
              [
                "test__predict_candidate_gt_one",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7974710559577912,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__fit",
                  "test__fit_inconsistent_numbers_of_samples",
                  0.9521871369949153
                ],
                [
                  "test___init__",
                  "test__predict_candidate_gt_one",
                  0.47145946944733097
                ],
                [
                  "test__predict_one_candidate",
                  "test__predict_candidate_gt_one",
                  0.9941325309122613
                ],
                [
                  "test__fit",
                  "test__predict_one_candidate",
                  0.962317987165442
                ],
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "test__predict_candidate_gt_one",
                  0.9688765585717989
                ],
                [
                  "test__trasnform",
                  "test__fit_inconsistent_numbers_of_samples",
                  0.9502670486230105
                ],
                [
                  "test__trasnform",
                  "test__predict_candidate_gt_one",
                  0.9652649857990674
                ],
                [
                  "test___init__",
                  "test__fit",
                  0.39973753920619787
                ],
                [
                  "test___init__",
                  "test__fit_inconsistent_numbers_of_samples",
                  0.5235284346968169
                ],
                [
                  "test___init__",
                  "test__predict_one_candidate",
                  0.4807308197316369
                ],
                [
                  "test__trasnform",
                  "test__fit",
                  0.9736903558534835
                ],
                [
                  "test__fit",
                  "test__predict_candidate_gt_one",
                  0.967782443629529
                ],
                [
                  "test__fit_inconsistent_numbers_of_samples",
                  "test__predict_one_candidate",
                  0.9639430307230918
                ],
                [
                  "test___init__",
                  "test__trasnform",
                  0.42815806015415125
                ],
                [
                  "test__trasnform",
                  "test__predict_one_candidate",
                  0.9599894378581351
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__fit_inconsistent_numbers_of_samples",
                "false"
              ],
              [
                "test___init__",
                "false"
              ],
              [
                "test__trasnform",
                "false"
              ],
              [
                "test__fit",
                "false"
              ],
              [
                "test__predict_one_candidate",
                "false"
              ],
              [
                "test__predict_candidate_gt_one",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_tuning_\u0026_acquisition_\u0026_test_expected_improvement.py",
    "testCases": [
      {
        "name": "TestExpectedImprovementAcquisition",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test__acquire",
                  "[]"
                ],
                [
                  "test__acquire_n_candidates",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test__acquire",
                  "[]"
                ],
                [
                  "test__acquire_n_candidates",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_n_candidates",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_n_candidates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_n_candidates",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test__acquire",
                  "false"
                ],
                [
                  "test__acquire_n_candidates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_n_candidates",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_n_candidates",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                []
              ],
              [
                "test__acquire_n_candidates",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_n_candidates",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_n_candidates",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test__acquire",
                  "0"
                ],
                [
                  "test__acquire_n_candidates",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test__acquire",
                  "0"
                ],
                [
                  "test__acquire_n_candidates",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_n_candidates",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_n_candidates",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "1"
              ],
              [
                "test__acquire_n_candidates",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                [
                  "instance",
                  "best",
                  "predictions"
                ]
              ],
              [
                "test__acquire_n_candidates",
                [
                  "instance",
                  "best",
                  "predictions"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                []
              ],
              [
                "test__acquire_n_candidates",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9477694991636361,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test__acquire",
                  "test__acquire_n_candidates",
                  0.9477694991636361
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test__acquire",
                "false"
              ],
              [
                "test__acquire_n_candidates",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]