[
  {
    "name": "tests_\u0026_lime_\u0026_test_lime.py",
    "testCases": [
      {
        "name": "TestLIMEExplainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_LIME",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_LIME",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_LIME",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_LIME",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_LIME",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_LIME",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_LIME",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_LIME",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_LIME",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_LIME",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_LIME",
                [
                  "vectorizer",
                  "train_vectors",
                  "X_test",
                  "y_train",
                  "class_names",
                  "test_vectors",
                  "explanation",
                  "simple_rf_pipeline",
                  "pred",
                  "y_vec",
                  "newsgroups_test",
                  "segmenter",
                  "makegray_step",
                  "exp",
                  "labels_train",
                  "train",
                  "iris",
                  "c",
                  "test",
                  "X_vec",
                  "i",
                  "y_test",
                  "rf",
                  "nb",
                  "labels_test",
                  "newsgroups_train",
                  "X_train",
                  "mnist",
                  "flatten_step",
                  "idx",
                  "explainer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_LIME",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_shap_\u0026_test_shap.py",
    "testCases": [
      {
        "name": "TestShapExplainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_Shap",
                  "[]"
                ],
                [
                  "test_ShapLinearExplainer",
                  "[]"
                ],
                [
                  "test_ShapTreeExplainer",
                  "[]"
                ],
                [
                  "test_ShapGradientExplainer",
                  "[]"
                ],
                [
                  "test_ShapDeepExplainer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_Shap",
                  "[]"
                ],
                [
                  "test_ShapLinearExplainer",
                  "[]"
                ],
                [
                  "test_ShapTreeExplainer",
                  "[]"
                ],
                [
                  "test_ShapGradientExplainer",
                  "[]"
                ],
                [
                  "test_ShapDeepExplainer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_Shap",
                  "false"
                ],
                [
                  "test_ShapLinearExplainer",
                  "false"
                ],
                [
                  "test_ShapTreeExplainer",
                  "true"
                ],
                [
                  "test_ShapGradientExplainer",
                  "false"
                ],
                [
                  "test_ShapDeepExplainer",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_Shap",
                  "false"
                ],
                [
                  "test_ShapLinearExplainer",
                  "false"
                ],
                [
                  "test_ShapTreeExplainer",
                  "false"
                ],
                [
                  "test_ShapGradientExplainer",
                  "false"
                ],
                [
                  "test_ShapDeepExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_Shap",
                  "false"
                ],
                [
                  "test_ShapLinearExplainer",
                  "false"
                ],
                [
                  "test_ShapTreeExplainer",
                  "false"
                ],
                [
                  "test_ShapGradientExplainer",
                  "false"
                ],
                [
                  "test_ShapDeepExplainer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_Shap",
                  "false"
                ],
                [
                  "test_ShapLinearExplainer",
                  "false"
                ],
                [
                  "test_ShapTreeExplainer",
                  "false"
                ],
                [
                  "test_ShapGradientExplainer",
                  "false"
                ],
                [
                  "test_ShapDeepExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                "false"
              ],
              [
                "test_ShapLinearExplainer",
                "false"
              ],
              [
                "test_ShapTreeExplainer",
                "false"
              ],
              [
                "test_ShapGradientExplainer",
                "false"
              ],
              [
                "test_ShapDeepExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                "false"
              ],
              [
                "test_ShapLinearExplainer",
                "false"
              ],
              [
                "test_ShapTreeExplainer",
                "false"
              ],
              [
                "test_ShapGradientExplainer",
                "false"
              ],
              [
                "test_ShapDeepExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                []
              ],
              [
                "test_ShapLinearExplainer",
                []
              ],
              [
                "test_ShapTreeExplainer",
                []
              ],
              [
                "test_ShapGradientExplainer",
                []
              ],
              [
                "test_ShapDeepExplainer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                "false"
              ],
              [
                "test_ShapLinearExplainer",
                "false"
              ],
              [
                "test_ShapTreeExplainer",
                "false"
              ],
              [
                "test_ShapGradientExplainer",
                "false"
              ],
              [
                "test_ShapDeepExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                "false"
              ],
              [
                "test_ShapLinearExplainer",
                "false"
              ],
              [
                "test_ShapTreeExplainer",
                "false"
              ],
              [
                "test_ShapGradientExplainer",
                "false"
              ],
              [
                "test_ShapDeepExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_Shap",
                  "0"
                ],
                [
                  "test_ShapLinearExplainer",
                  "0"
                ],
                [
                  "test_ShapTreeExplainer",
                  "0"
                ],
                [
                  "test_ShapGradientExplainer",
                  "0"
                ],
                [
                  "test_ShapDeepExplainer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_Shap",
                  "0"
                ],
                [
                  "test_ShapLinearExplainer",
                  "0"
                ],
                [
                  "test_ShapTreeExplainer",
                  "0"
                ],
                [
                  "test_ShapGradientExplainer",
                  "0"
                ],
                [
                  "test_ShapDeepExplainer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_Shap",
                "true"
              ],
              [
                "test_ShapLinearExplainer",
                "true"
              ],
              [
                "test_ShapTreeExplainer",
                "true"
              ],
              [
                "test_ShapGradientExplainer",
                "true"
              ],
              [
                "test_ShapDeepExplainer",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                "false"
              ],
              [
                "test_ShapLinearExplainer",
                "false"
              ],
              [
                "test_ShapTreeExplainer",
                "false"
              ],
              [
                "test_ShapGradientExplainer",
                "false"
              ],
              [
                "test_ShapDeepExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_Shap",
                "0"
              ],
              [
                "test_ShapLinearExplainer",
                "0"
              ],
              [
                "test_ShapTreeExplainer",
                "0"
              ],
              [
                "test_ShapGradientExplainer",
                "0"
              ],
              [
                "test_ShapDeepExplainer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_Shap",
                [
                  "X_test",
                  "shap_values",
                  "y_train",
                  "f",
                  "shap_values_single",
                  "Y_test",
                  "knn",
                  "shapexplainer",
                  "y_valid",
                  "med",
                  "v",
                  "svc_linear",
                  "X",
                  "X_valid",
                  "X_train",
                  "y",
                  "Y_train"
                ]
              ],
              [
                "test_ShapLinearExplainer",
                [
                  "vectorizer",
                  "X_test",
                  "y_test",
                  "corpus_test",
                  "y_train",
                  "shap_values",
                  "corpus",
                  "y",
                  "X_train",
                  "corpus_train",
                  "model",
                  "shapexplainer"
                ]
              ],
              [
                "test_ShapTreeExplainer",
                [
                  "X_display",
                  "X_test",
                  "y_train",
                  "xgb_test",
                  "shap_values",
                  "params",
                  "model_train",
                  "matches",
                  "xgb_full",
                  "y_display",
                  "total",
                  "y_test",
                  "X",
                  "xgb_train",
                  "y",
                  "X_train",
                  "model"
                ]
              ],
              [
                "test_ShapGradientExplainer",
                []
              ],
              [
                "test_ShapDeepExplainer",
                [
                  "img_cols",
                  "x_train",
                  "batch_size",
                  "img_rows",
                  "num_classes",
                  "y_train",
                  "shap_values",
                  "e",
                  "input_shape",
                  "x_test",
                  "score",
                  "y_test",
                  "background",
                  "model",
                  "epochs"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                []
              ],
              [
                "test_ShapLinearExplainer",
                []
              ],
              [
                "test_ShapTreeExplainer",
                []
              ],
              [
                "test_ShapGradientExplainer",
                []
              ],
              [
                "test_ShapDeepExplainer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6865172163293498,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ShapLinearExplainer",
                  "test_ShapTreeExplainer",
                  0.7604616678462526
                ],
                [
                  "test_ShapLinearExplainer",
                  "test_ShapGradientExplainer",
                  0.46725589159614844
                ],
                [
                  "test_ShapGradientExplainer",
                  "test_ShapDeepExplainer",
                  0.5191469538870063
                ],
                [
                  "test_Shap",
                  "test_ShapDeepExplainer",
                  0.7874765370743645
                ],
                [
                  "test_ShapLinearExplainer",
                  "test_ShapDeepExplainer",
                  0.7553470615256743
                ],
                [
                  "test_ShapDeepExplainer",
                  "test_ShapTreeExplainer",
                  0.7685400061085379
                ],
                [
                  "test_Shap",
                  "test_ShapGradientExplainer",
                  0.5573040990928074
                ],
                [
                  "test_Shap",
                  "test_ShapLinearExplainer",
                  0.838431809099744
                ],
                [
                  "test_Shap",
                  "test_ShapTreeExplainer",
                  0.7985158162403746
                ],
                [
                  "test_ShapGradientExplainer",
                  "test_ShapTreeExplainer",
                  0.6126923208225882
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_Shap",
                "false"
              ],
              [
                "test_ShapLinearExplainer",
                "false"
              ],
              [
                "test_ShapTreeExplainer",
                "false"
              ],
              [
                "test_ShapGradientExplainer",
                "false"
              ],
              [
                "test_ShapDeepExplainer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_dipvae_\u0026_test_DIPVAE.py",
    "testCases": [
      {
        "name": "TestDIPVAEExplainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_DIPVAEExplainer",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertGreater]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_DIPVAEExplainer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_DIPVAEExplainer",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_DIPVAEExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_DIPVAEExplainer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_DIPVAEExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_DIPVAEExplainer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_DIPVAEExplainer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                [
                  "dipvaeii_args",
                  "input_images",
                  "dataset_obj",
                  "edited_images",
                  "dipvaeii_explainer",
                  "cuda_available",
                  "loss_epoch_list",
                  "convert_and_reshape"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_DIPVAEExplainer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_profwt_\u0026_test_ProfWt.py",
    "testCases": [
      {
        "name": "Testprofwexplainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_prof_weight_compute",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_prof_weight_compute",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_prof_weight_compute",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_prof_weight_compute",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_prof_weight_compute",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_prof_weight_compute",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_prof_weight_compute",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_prof_weight_compute",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_prof_weight_compute",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_prof_weight_compute",
                [
                  "a",
                  "train_label_path",
                  "start_layer",
                  "list_probe_filenames",
                  "y_train",
                  "w",
                  "y1",
                  "y",
                  "y2",
                  "Y",
                  "data_matrix",
                  "final_layer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_prof_weight_compute",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_prof_weight_compute",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_contrastive_\u0026_test_CEM.py",
    "testCases": [
      {
        "name": "TestCEMExplainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_CEM",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_CEM",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_CEM",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_CEM",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_CEM",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_CEM",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_CEM",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_CEM",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_CEM",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_CEM",
                [
                  "fig3",
                  "delta_pp",
                  "fig2",
                  "ae_js",
                  "fig1",
                  "delta_pn",
                  "fig0",
                  "data",
                  "axarr",
                  "model_js",
                  "mymodel",
                  "fp",
                  "arg_init_const",
                  "ae_wt",
                  "_",
                  "fig4",
                  "arg_kappa",
                  "_PATH",
                  "arg_mode",
                  "model_wt",
                  "adv_pp",
                  "adv_pn",
                  "arg_b",
                  "arg_gamma",
                  "ae_model",
                  "mnist_model",
                  "input_image",
                  "arg_max_iter",
                  "image_id",
                  "arg_beta",
                  "explainer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_protodash_\u0026_test_PDASH.py",
    "testCases": [
      {
        "name": "TestProtoDashExplainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ProtoDashExplainer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ProtoDashExplainer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ProtoDashExplainer",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ProtoDashExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ProtoDashExplainer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ProtoDashExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ProtoDashExplainer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ProtoDashExplainer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_ProtoDashExplainer",
                [
                  "df",
                  "original",
                  "data",
                  "onehot_encoded",
                  "nhanes",
                  "dfs",
                  "S",
                  "onehot_encoder",
                  "W",
                  "X",
                  "Y",
                  "explainer",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ProtoDashExplainer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_ted_\u0026_test_TED_Cartesian.py",
    "testCases": [
      {
        "name": "TestTED_Cartesian",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_instances",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_score",
                  "[PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertGreaterEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_instances",
                  "[]"
                ],
                [
                  "test_score",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_instances",
                  "false"
                ],
                [
                  "test_score",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_instances",
                  "false"
                ],
                [
                  "test_score",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_instances",
                  "true"
                ],
                [
                  "test_score",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_instances",
                  "false"
                ],
                [
                  "test_score",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                "false"
              ],
              [
                "test_score",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                "false"
              ],
              [
                "test_score",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_instances",
                [
                  "self.Y_test",
                  "self.E_test",
                  "self.estimator",
                  "self.X_train",
                  "self.Y_train",
                  "self.E_train",
                  "self.X_test"
                ]
              ],
              [
                "test_score",
                [
                  "self.estimator",
                  "self.X_train",
                  "self.Y_train",
                  "self.E_train"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                "false"
              ],
              [
                "test_score",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_instances",
                "true"
              ],
              [
                "test_score",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_instances",
                  "0"
                ],
                [
                  "test_score",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_instances",
                  "0"
                ],
                [
                  "test_score",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                "false"
              ],
              [
                "test_score",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                "false"
              ],
              [
                "test_score",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                "8"
              ],
              [
                "test_score",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                [
                  "E",
                  "X1",
                  "Y",
                  "X2"
                ]
              ],
              [
                "test_score",
                [
                  "Y_accuracy",
                  "E_accuracy",
                  "YE_accuracy"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                [
                  "self.ted"
                ]
              ],
              [
                "test_score",
                [
                  "self.Y_test",
                  "self.E_test",
                  "self.ted",
                  "self.X_test"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.738509582047684,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_instances",
                  "test_score",
                  0.738509582047684
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_instances",
                "false"
              ],
              [
                "test_score",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_contrastive_\u0026_test_CEM_MAF.py",
    "testCases": [
      {
        "name": "TestCEM_MAFImageExplainer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_CEM_MAFExplainer",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_CEM_MAFExplainer",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_CEM_MAFExplainer",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_CEM_MAFExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_CEM_MAFExplainer",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_CEM_MAFExplainer",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_CEM_MAFExplainer",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_CEM_MAFExplainer",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                [
                  "img_files",
                  "mymodel",
                  "local_path_img",
                  "sex_flag",
                  "img_id",
                  "dwnld",
                  "input_img",
                  "young_flag",
                  "celebA_model_file",
                  "aix360_path",
                  "attr_model_files",
                  "_",
                  "model_file",
                  "__",
                  "arg_kappa",
                  "arg_binary_search_steps",
                  "smile_flag",
                  "dataset_obj",
                  "arg_max_iterations",
                  "arg_mode",
                  "adv_class",
                  "local_path_models",
                  "arg_initial_const",
                  "orig_class",
                  "loaded_model",
                  "adv_pp",
                  "arg_gamma",
                  "attributes",
                  "img_ids",
                  "arg_img_name",
                  "arg_beta",
                  "explainer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_CEM_MAFExplainer",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_rbm_\u0026_test_Boolean_Rule_CG.py",
    "testCases": [
      {
        "name": "TestBooleanmRuleCG",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_classification",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_classification",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_classification",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_classification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_classification",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_classification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_classification",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_classification",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_classification",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "7"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_classification",
                [
                  "X_test",
                  "bc_df",
                  "boolean_model",
                  "Y_test",
                  "X_train",
                  "X_train_fb",
                  "Y_pred",
                  "Y_train",
                  "fb",
                  "explanation",
                  "X_test_fb",
                  "explainer"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                [
                  "self.bc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_rbm_\u0026_test_Linear_Rule_Regression.py",
    "testCases": [
      {
        "name": "TestLinearRuleRegression",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_classification",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_classification",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_classification",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_classification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_classification",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_classification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_classification",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_classification",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_classification",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_classification",
                [
                  "figs",
                  "X_test",
                  "expected",
                  "Y_test",
                  "X_train_fb",
                  "Y_pred",
                  "explanation",
                  "X_test_fb",
                  "boston_df",
                  "plot_data",
                  "X_train",
                  "linear_model",
                  "Y_train",
                  "fb",
                  "explainer",
                  "obtained_plot",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                [
                  "self.boston"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_rbm_\u0026_test_Logistic_Rule_Regression.py",
    "testCases": [
      {
        "name": "TestLogisticRuleRegression",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_classification",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_classification",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_classification",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_classification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_classification",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_classification",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_classification",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_classification",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_classification",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_classification",
                [
                  "figs",
                  "X_test",
                  "expected",
                  "Y_test",
                  "X_train_fb",
                  "Y_pred",
                  "explanation",
                  "X_test_fb",
                  "bc_df",
                  "logistic_model",
                  "plot_data",
                  "X_train",
                  "Y_train",
                  "fb",
                  "explainer",
                  "obtained_plot",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                [
                  "self.bc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_classification",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_rbm_\u0026_test_Feature_Binarizer_From_Trees.py",
    "testCases": [
      {
        "name": "TestFeatureBinarizerFromTrees",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fit_and_transform_exceptions",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_init",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertWarns, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertDictEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_fit_and_transform_binary",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertListEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fit_and_transform_exceptions",
                  "[]"
                ],
                [
                  "test_init",
                  "[]"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "[]"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "[]"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "[]"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "[]"
                ],
                [
                  "test_fit_and_transform_binary",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fit_and_transform_exceptions",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "false"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "false"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "false"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "true"
                ],
                [
                  "test_fit_and_transform_binary",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fit_and_transform_exceptions",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "false"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "false"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "false"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "false"
                ],
                [
                  "test_fit_and_transform_binary",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fit_and_transform_exceptions",
                  "true"
                ],
                [
                  "test_init",
                  "true"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "true"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "false"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "true"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "true"
                ],
                [
                  "test_fit_and_transform_binary",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fit_and_transform_exceptions",
                  "false"
                ],
                [
                  "test_init",
                  "false"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "false"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "false"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "false"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "false"
                ],
                [
                  "test_fit_and_transform_binary",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "false"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_categorical",
                "false"
              ],
              [
                "test_fit_and_transform_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_binary",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "false"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_categorical",
                "false"
              ],
              [
                "test_fit_and_transform_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_binary",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                [
                  "self.random_state",
                  "self.y",
                  "self.X",
                  "self.y_test",
                  "self.col_binary",
                  "self.X_test",
                  "self.col_ordinal"
                ]
              ],
              [
                "test_init",
                [
                  "self.random_state",
                  "self.y_train",
                  "self.y",
                  "self.X",
                  "self.X_train",
                  "self.y_test",
                  "self.col_binary",
                  "self.X_test",
                  "self.col_ordinal"
                ]
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                [
                  "self.y",
                  "self.X",
                  "self.y_test"
                ]
              ],
              [
                "test_fit_and_transform_return_ordinal",
                [
                  "self.y",
                  "self.X",
                  "self.y_test",
                  "self.col_binary",
                  "self.col_ordinal"
                ]
              ],
              [
                "test_fit_and_transform_categorical",
                [
                  "self.y",
                  "self.X",
                  "self.y_test",
                  "self.col_binary",
                  "self.col_ordinal"
                ]
              ],
              [
                "test_fit_and_transform_ordinal",
                [
                  "self.y",
                  "self.X",
                  "self.col_categorical",
                  "self.y_test",
                  "self.col_binary"
                ]
              ],
              [
                "test_fit_and_transform_binary",
                [
                  "self.y",
                  "self.X",
                  "self.col_categorical",
                  "self.y_test",
                  "self.col_ordinal"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "false"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_categorical",
                "false"
              ],
              [
                "test_fit_and_transform_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_binary",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "false"
              ],
              [
                "test_init",
                "true"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "false"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_categorical",
                "false"
              ],
              [
                "test_fit_and_transform_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_binary",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fit_and_transform_exceptions",
                  "0"
                ],
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "0"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "0"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "0"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "0"
                ],
                [
                  "test_fit_and_transform_binary",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fit_and_transform_exceptions",
                  "0"
                ],
                [
                  "test_init",
                  "0"
                ],
                [
                  "test_fit_and_transform_all_feature_classes",
                  "0"
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "0"
                ],
                [
                  "test_fit_and_transform_categorical",
                  "0"
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "0"
                ],
                [
                  "test_fit_and_transform_binary",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "false"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_categorical",
                "false"
              ],
              [
                "test_fit_and_transform_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_binary",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "false"
              ],
              [
                "test_init",
                "false"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "false"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_categorical",
                "false"
              ],
              [
                "test_fit_and_transform_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_binary",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "4"
              ],
              [
                "test_init",
                "30"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "15"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "3"
              ],
              [
                "test_fit_and_transform_categorical",
                "12"
              ],
              [
                "test_fit_and_transform_ordinal",
                "9"
              ],
              [
                "test_fit_and_transform_binary",
                "10"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                [
                  "Xn",
                  "fbt"
                ]
              ],
              [
                "test_init",
                [
                  "fbt"
                ]
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                [
                  "a",
                  "b",
                  "T",
                  "U",
                  "Xn",
                  "fbt",
                  "idx",
                  "cols"
                ]
              ],
              [
                "test_fit_and_transform_return_ordinal",
                [
                  "fbt"
                ]
              ],
              [
                "test_fit_and_transform_categorical",
                [
                  "a",
                  "temp",
                  "b",
                  "T",
                  "fbt"
                ]
              ],
              [
                "test_fit_and_transform_ordinal",
                [
                  "temp",
                  "T",
                  "fbt"
                ]
              ],
              [
                "test_fit_and_transform_binary",
                [
                  "a",
                  "temp",
                  "b",
                  "T",
                  "fbt"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                [
                  "self.y_train",
                  "self.X_train",
                  "self.col_categorical"
                ]
              ],
              [
                "test_init",
                [
                  "self.col_categorical"
                ]
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                [
                  "self.random_state",
                  "self.y_train",
                  "self.X_train",
                  "self.col_categorical",
                  "self.col_binary",
                  "self.X_test",
                  "self.col_ordinal"
                ]
              ],
              [
                "test_fit_and_transform_return_ordinal",
                [
                  "self.random_state",
                  "self.y_train",
                  "self.X_train",
                  "self.col_categorical",
                  "self.X_test"
                ]
              ],
              [
                "test_fit_and_transform_categorical",
                [
                  "self.random_state",
                  "self.y_train",
                  "self.X_train",
                  "self.col_categorical",
                  "self.X_test"
                ]
              ],
              [
                "test_fit_and_transform_ordinal",
                [
                  "self.random_state",
                  "self.y_train",
                  "self.X_train",
                  "self.X_test",
                  "self.col_ordinal"
                ]
              ],
              [
                "test_fit_and_transform_binary",
                [
                  "self.random_state",
                  "self.y_train",
                  "self.X_train",
                  "self.col_binary",
                  "self.X_test"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.841140375161301,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_fit_and_transform_exceptions",
                  "test_fit_and_transform_categorical",
                  0.8713103031525504
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "test_fit_and_transform_return_ordinal",
                  0.5877258670764591
                ],
                [
                  "test_fit_and_transform_ordinal",
                  "test_fit_and_transform_all_feature_classes",
                  0.677313256095398
                ],
                [
                  "test_init",
                  "test_fit_and_transform_exceptions",
                  0.9519410595336226
                ],
                [
                  "test_fit_and_transform_binary",
                  "test_fit_and_transform_all_feature_classes",
                  0.9381588333425462
                ],
                [
                  "test_fit_and_transform_binary",
                  "test_fit_and_transform_categorical",
                  0.9432274791439047
                ],
                [
                  "test_fit_and_transform_return_ordinal",
                  "test_fit_and_transform_all_feature_classes",
                  0.9481339443083558
                ],
                [
                  "test_init",
                  "test_fit_and_transform_return_ordinal",
                  0.9335436519247925
                ],
                [
                  "test_fit_and_transform_exceptions",
                  "test_fit_and_transform_binary",
                  0.9122374397672273
                ],
                [
                  "test_fit_and_transform_exceptions",
                  "test_fit_and_transform_return_ordinal",
                  0.97262517094934
                ],
                [
                  "test_fit_and_transform_binary",
                  "test_fit_and_transform_ordinal",
                  0.6594053855337871
                ],
                [
                  "test_init",
                  "test_fit_and_transform_binary",
                  0.8957200137460195
                ],
                [
                  "test_init",
                  "test_fit_and_transform_ordinal",
                  0.6327214868863121
                ],
                [
                  "test_fit_and_transform_exceptions",
                  "test_fit_and_transform_ordinal",
                  0.6316008024455897
                ],
                [
                  "test_fit_and_transform_categorical",
                  "test_fit_and_transform_all_feature_classes",
                  0.917605049463303
                ],
                [
                  "test_fit_and_transform_binary",
                  "test_fit_and_transform_return_ordinal",
                  0.8900138908785862
                ],
                [
                  "test_fit_and_transform_categorical",
                  "test_fit_and_transform_ordinal",
                  0.6978971061793513
                ],
                [
                  "test_init",
                  "test_fit_and_transform_all_feature_classes",
                  0.9392593345832692
                ],
                [
                  "test_fit_and_transform_exceptions",
                  "test_fit_and_transform_all_feature_classes",
                  0.9695086081543521
                ],
                [
                  "test_init",
                  "test_fit_and_transform_categorical",
                  0.8624092109704348
                ],
                [
                  "test_fit_and_transform_categorical",
                  "test_fit_and_transform_return_ordinal",
                  0.8315899842521214
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_fit_and_transform_exceptions",
                "false"
              ],
              [
                "test_init",
                "true"
              ],
              [
                "test_fit_and_transform_all_feature_classes",
                "true"
              ],
              [
                "test_fit_and_transform_return_ordinal",
                "true"
              ],
              [
                "test_fit_and_transform_categorical",
                "true"
              ],
              [
                "test_fit_and_transform_ordinal",
                "false"
              ],
              [
                "test_fit_and_transform_binary",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  }
]