[
  {
    "name": "tests_\u0026_test_model.py",
    "testCases": [
      {
        "name": "TestModel",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_indices",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_obj_vertices",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_uv_coords",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_normals",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_indices",
                  "[]"
                ],
                [
                  "test_obj_vertices",
                  "[]"
                ],
                [
                  "test_uv_coords",
                  "[]"
                ],
                [
                  "test_normals",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_indices",
                  "false"
                ],
                [
                  "test_obj_vertices",
                  "false"
                ],
                [
                  "test_uv_coords",
                  "false"
                ],
                [
                  "test_normals",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_indices",
                  "false"
                ],
                [
                  "test_obj_vertices",
                  "false"
                ],
                [
                  "test_uv_coords",
                  "false"
                ],
                [
                  "test_normals",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_indices",
                  "false"
                ],
                [
                  "test_obj_vertices",
                  "true"
                ],
                [
                  "test_uv_coords",
                  "true"
                ],
                [
                  "test_normals",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_indices",
                  "false"
                ],
                [
                  "test_obj_vertices",
                  "false"
                ],
                [
                  "test_uv_coords",
                  "false"
                ],
                [
                  "test_normals",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ],
              [
                "test_normals",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_indices",
                "true"
              ],
              [
                "test_obj_vertices",
                "true"
              ],
              [
                "test_uv_coords",
                "true"
              ],
              [
                "test_normals",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_indices",
                [
                  "self.vertices",
                  "self.normals",
                  "self.model.normals",
                  "self.model",
                  "self.normal_indices",
                  "self.uv_coords",
                  "self.model.vertices",
                  "self.uv_indices",
                  "self.model.uv_coords",
                  "self.indices"
                ]
              ],
              [
                "test_obj_vertices",
                [
                  "self.vertices",
                  "self.normals",
                  "self.model.uv_indices",
                  "self.model.normals",
                  "self.model.indices",
                  "self.model.normal_indices",
                  "self.normal_indices",
                  "self.uv_coords",
                  "self.uv_indices",
                  "self.model.uv_coords",
                  "self.indices"
                ]
              ],
              [
                "test_uv_coords",
                [
                  "self.vertices",
                  "self.normals",
                  "self.model.uv_indices",
                  "self.model.normals",
                  "self.model.indices",
                  "self.model.normal_indices",
                  "self.normal_indices",
                  "self.uv_coords",
                  "self.model.vertices",
                  "self.uv_indices",
                  "self.indices"
                ]
              ],
              [
                "test_normals",
                [
                  "self.vertices",
                  "self.normals",
                  "self.model.uv_indices",
                  "self.model.indices",
                  "self.model.normal_indices",
                  "self.normal_indices",
                  "self.uv_coords",
                  "self.model.vertices",
                  "self.uv_indices",
                  "self.model.uv_coords",
                  "self.indices"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ],
              [
                "test_normals",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ],
              [
                "test_normals",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_indices",
                  "0"
                ],
                [
                  "test_obj_vertices",
                  "0"
                ],
                [
                  "test_uv_coords",
                  "0"
                ],
                [
                  "test_normals",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_indices",
                  "0"
                ],
                [
                  "test_obj_vertices",
                  "0"
                ],
                [
                  "test_uv_coords",
                  "0"
                ],
                [
                  "test_normals",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_indices",
                "true"
              ],
              [
                "test_obj_vertices",
                "true"
              ],
              [
                "test_uv_coords",
                "true"
              ],
              [
                "test_normals",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ],
              [
                "test_normals",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                "4"
              ],
              [
                "test_obj_vertices",
                "4"
              ],
              [
                "test_uv_coords",
                "4"
              ],
              [
                "test_normals",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                [
                  "res",
                  "expected_indices"
                ]
              ],
              [
                "test_obj_vertices",
                [
                  "res",
                  "expected_vertices"
                ]
              ],
              [
                "test_uv_coords",
                [
                  "expected_uvs",
                  "res"
                ]
              ],
              [
                "test_normals",
                [
                  "res",
                  "expected_normals"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                [
                  "self.model.uv_indices",
                  "self.model.indices",
                  "self.model.normal_indices"
                ]
              ],
              [
                "test_obj_vertices",
                [
                  "self.model.vertices"
                ]
              ],
              [
                "test_uv_coords",
                [
                  "self.model.uv_coords"
                ]
              ],
              [
                "test_normals",
                [
                  "self.model.normals"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8376396552167492,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_normals",
                  "test_indices",
                  0.7027301756094245
                ],
                [
                  "test_obj_vertices",
                  "test_normals",
                  0.9777837967793555
                ],
                [
                  "test_obj_vertices",
                  "test_indices",
                  0.7099975170875313
                ],
                [
                  "test_obj_vertices",
                  "test_uv_coords",
                  0.9441652414101122
                ],
                [
                  "test_normals",
                  "test_uv_coords",
                  0.9436835725280128
                ],
                [
                  "test_uv_coords",
                  "test_indices",
                  0.7474776278860588
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ],
              [
                "test_normals",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_utils.py",
    "testCases": [
      {
        "name": "TestUtils",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_generate_triangles",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_quaternion_matrix",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "[]"
                ],
                [
                  "test_generate_triangles",
                  "[]"
                ],
                [
                  "test_quaternion_matrix",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "false"
                ],
                [
                  "test_generate_triangles",
                  "false"
                ],
                [
                  "test_quaternion_matrix",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "false"
                ],
                [
                  "test_generate_triangles",
                  "false"
                ],
                [
                  "test_quaternion_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "true"
                ],
                [
                  "test_generate_triangles",
                  "false"
                ],
                [
                  "test_quaternion_matrix",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "false"
                ],
                [
                  "test_generate_triangles",
                  "false"
                ],
                [
                  "test_quaternion_matrix",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "false"
              ],
              [
                "test_generate_triangles",
                "false"
              ],
              [
                "test_quaternion_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "true"
              ],
              [
                "test_generate_triangles",
                "true"
              ],
              [
                "test_quaternion_matrix",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                []
              ],
              [
                "test_generate_triangles",
                []
              ],
              [
                "test_quaternion_matrix",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "false"
              ],
              [
                "test_generate_triangles",
                "false"
              ],
              [
                "test_quaternion_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "false"
              ],
              [
                "test_generate_triangles",
                "false"
              ],
              [
                "test_quaternion_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "0"
                ],
                [
                  "test_generate_triangles",
                  "0"
                ],
                [
                  "test_quaternion_matrix",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "0"
                ],
                [
                  "test_generate_triangles",
                  "0"
                ],
                [
                  "test_quaternion_matrix",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "true"
              ],
              [
                "test_generate_triangles",
                "true"
              ],
              [
                "test_quaternion_matrix",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "false"
              ],
              [
                "test_generate_triangles",
                "false"
              ],
              [
                "test_quaternion_matrix",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "6"
              ],
              [
                "test_generate_triangles",
                "2"
              ],
              [
                "test_quaternion_matrix",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                [
                  "res",
                  "rotation",
                  "expected",
                  "expected_three",
                  "rotation_two",
                  "rotation_three",
                  "expected_two"
                ]
              ],
              [
                "test_generate_triangles",
                [
                  "res",
                  "indices",
                  "vertices",
                  "expected"
                ]
              ],
              [
                "test_quaternion_matrix",
                [
                  "res",
                  "rotation",
                  "expected"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                []
              ],
              [
                "test_generate_triangles",
                []
              ],
              [
                "test_quaternion_matrix",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8470621075729152,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_euler_angles_to_rotation_matrix",
                  "test_generate_triangles",
                  0.7785050812988947
                ],
                [
                  "test_euler_angles_to_rotation_matrix",
                  "test_quaternion_matrix",
                  0.967527599088703
                ],
                [
                  "test_quaternion_matrix",
                  "test_generate_triangles",
                  0.7951536423311479
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_euler_angles_to_rotation_matrix",
                "false"
              ],
              [
                "test_generate_triangles",
                "false"
              ],
              [
                "test_quaternion_matrix",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_camera.py",
    "testCases": [
      {
        "name": "TestCamera",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "[]"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "[]"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "[]"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "[]"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "[]"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "false"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "false"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "false"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "false"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "false"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "false"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "false"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "false"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "false"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "false"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "false"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "false"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "false"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "false"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "false"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "false"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "true"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "true"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "true"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "true"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "true"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                [
                  "self.p4",
                  "self.p3",
                  "self.p2",
                  "self.p1",
                  "self.sensor_height",
                  "self.sensor_width",
                  "self.screen_width",
                  "self.rotation",
                  "self.focal_length",
                  "self.location",
                  "self.screen_height"
                ]
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                [
                  "self.p4",
                  "self.p3",
                  "self.p2",
                  "self.p1",
                  "self.sensor_height",
                  "self.sensor_width",
                  "self.screen_width",
                  "self.rotation",
                  "self.focal_length",
                  "self.location",
                  "self.screen_height"
                ]
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                [
                  "self.p4",
                  "self.p3",
                  "self.p2",
                  "self.p1",
                  "self.sensor_height",
                  "self.sensor_width",
                  "self.screen_width",
                  "self.rotation",
                  "self.focal_length",
                  "self.location",
                  "self.screen_height"
                ]
              ],
              [
                "test_project_world_point_to_pixel_coords",
                [
                  "self.sensor_height",
                  "self.sensor_width",
                  "self.screen_width",
                  "self.rotation",
                  "self.focal_length",
                  "self.location",
                  "self.screen_height"
                ]
              ],
              [
                "test_project_world_points_to_uv_coords",
                [
                  "self.sensor_height",
                  "self.sensor_width",
                  "self.rotation",
                  "self.focal_length",
                  "self.location"
                ]
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                [
                  "self.p4",
                  "self.p3",
                  "self.p2",
                  "self.sensor_height",
                  "self.sensor_width",
                  "self.screen_width",
                  "self.rotation",
                  "self.focal_length",
                  "self.location",
                  "self.screen_height"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "false"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "false"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "false"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "false"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "false"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "false"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "0"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "0"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "0"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "0"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "0"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_3x4_P_projection_matrix",
                  "0"
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "0"
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "0"
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "0"
                ],
                [
                  "test_project_world_points_to_uv_coords",
                  "0"
                ],
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "true"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "true"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "true"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "true"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "true"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "false"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "false"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "false"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "2"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "2"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "2"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "3"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "3"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                [
                  "res",
                  "projection_mat"
                ]
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                [
                  "extrinsic_mat",
                  "res"
                ]
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                [
                  "res",
                  "intrinsic_mat"
                ]
              ],
              [
                "test_project_world_point_to_pixel_coords",
                [
                  "res",
                  "exp_p1",
                  "exp_p2",
                  "pix_p2",
                  "pix_p1"
                ]
              ],
              [
                "test_project_world_points_to_uv_coords",
                [
                  "res",
                  "exp_array",
                  "exp_p1",
                  "exp_p2",
                  "pix_p2",
                  "exp_p3",
                  "exp_p4",
                  "pix_p1"
                ]
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                [
                  "res",
                  "exp_p1"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                [
                  "self.cam"
                ]
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                [
                  "self.cam"
                ]
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                [
                  "self.cam"
                ]
              ],
              [
                "test_project_world_point_to_pixel_coords",
                [
                  "self.p4",
                  "self.p3",
                  "self.p2",
                  "self.p1",
                  "self.cam"
                ]
              ],
              [
                "test_project_world_points_to_uv_coords",
                [
                  "self.p4",
                  "self.p3",
                  "self.screen_width",
                  "self.p2",
                  "self.p1",
                  "self.cam",
                  "self.screen_height"
                ]
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                [
                  "self.p1",
                  "self.cam"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7088191824803958,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  "test_project_world_points_to_uv_coords",
                  0.7158749867731956
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "test_project_world_points_to_uv_coords",
                  0.5239704097890109
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  0.6232723870575917
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "test_project_world_point_to_pixel_coords",
                  0.6418269230769231
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "test_get_extrinsic_3x4_D_matrix",
                  0.9427684604728619
                ],
                [
                  "test_get_3x4_P_projection_matrix",
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  0.6351714029575157
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  0.8367775560575692
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "test_project_world_point_to_pixel_coords",
                  0.6243499738230873
                ],
                [
                  "test_get_3x4_P_projection_matrix",
                  "test_project_world_points_to_uv_coords",
                  0.5510387687779837
                ],
                [
                  "test_project_world_point_to_pixel_coords",
                  "test_project_world_points_to_uv_coords",
                  0.8235856765100251
                ],
                [
                  "test_get_3x4_P_projection_matrix",
                  "test_project_world_point_to_pixel_coords",
                  0.6488818387982491
                ],
                [
                  "test_get_extrinsic_3x4_D_matrix",
                  "test_get_3x4_P_projection_matrix",
                  0.9557790087219502
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "test_project_world_point_to_pixel_coords_including_z_value",
                  0.6497881580558778
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "test_project_world_points_to_uv_coords",
                  0.5381383681741642
                ],
                [
                  "test_get_intrinsic_3x4_A_matrix",
                  "test_get_3x4_P_projection_matrix",
                  0.9210638181599309
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_3x4_P_projection_matrix",
                "false"
              ],
              [
                "test_get_extrinsic_3x4_D_matrix",
                "false"
              ],
              [
                "test_get_intrinsic_3x4_A_matrix",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords",
                "false"
              ],
              [
                "test_project_world_points_to_uv_coords",
                "false"
              ],
              [
                "test_project_world_point_to_pixel_coords_including_z_value",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_mapper.py",
    "testCases": [
      {
        "name": "TestMapper",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_clean_duplicates",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_best_texture_for_id",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_visibility_analysis",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_clean_duplicates",
                  "[]"
                ],
                [
                  "test_get_best_texture_for_id",
                  "[]"
                ],
                [
                  "test_visibility_analysis",
                  "[]"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_clean_duplicates",
                  "false"
                ],
                [
                  "test_get_best_texture_for_id",
                  "false"
                ],
                [
                  "test_visibility_analysis",
                  "false"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_clean_duplicates",
                  "false"
                ],
                [
                  "test_get_best_texture_for_id",
                  "false"
                ],
                [
                  "test_visibility_analysis",
                  "false"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_clean_duplicates",
                  "true"
                ],
                [
                  "test_get_best_texture_for_id",
                  "false"
                ],
                [
                  "test_visibility_analysis",
                  "true"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_clean_duplicates",
                  "false"
                ],
                [
                  "test_get_best_texture_for_id",
                  "false"
                ],
                [
                  "test_visibility_analysis",
                  "false"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_clean_duplicates",
                "false"
              ],
              [
                "test_get_best_texture_for_id",
                "false"
              ],
              [
                "test_visibility_analysis",
                "false"
              ],
              [
                "test_set_duplicates_for_textures",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_clean_duplicates",
                "true"
              ],
              [
                "test_get_best_texture_for_id",
                "false"
              ],
              [
                "test_visibility_analysis",
                "true"
              ],
              [
                "test_set_duplicates_for_textures",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_clean_duplicates",
                []
              ],
              [
                "test_get_best_texture_for_id",
                []
              ],
              [
                "test_visibility_analysis",
                []
              ],
              [
                "test_set_duplicates_for_textures",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_clean_duplicates",
                "false"
              ],
              [
                "test_get_best_texture_for_id",
                "false"
              ],
              [
                "test_visibility_analysis",
                "false"
              ],
              [
                "test_set_duplicates_for_textures",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_clean_duplicates",
                "false"
              ],
              [
                "test_get_best_texture_for_id",
                "true"
              ],
              [
                "test_visibility_analysis",
                "false"
              ],
              [
                "test_set_duplicates_for_textures",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_clean_duplicates",
                  "0"
                ],
                [
                  "test_get_best_texture_for_id",
                  "0"
                ],
                [
                  "test_visibility_analysis",
                  "0"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_clean_duplicates",
                  "0"
                ],
                [
                  "test_get_best_texture_for_id",
                  "0"
                ],
                [
                  "test_visibility_analysis",
                  "0"
                ],
                [
                  "test_set_duplicates_for_textures",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_clean_duplicates",
                "true"
              ],
              [
                "test_get_best_texture_for_id",
                "false"
              ],
              [
                "test_visibility_analysis",
                "true"
              ],
              [
                "test_set_duplicates_for_textures",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_clean_duplicates",
                "false"
              ],
              [
                "test_get_best_texture_for_id",
                "false"
              ],
              [
                "test_visibility_analysis",
                "false"
              ],
              [
                "test_set_duplicates_for_textures",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_clean_duplicates",
                "8"
              ],
              [
                "test_get_best_texture_for_id",
                "4"
              ],
              [
                "test_visibility_analysis",
                "6"
              ],
              [
                "test_set_duplicates_for_textures",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_clean_duplicates",
                [
                  "res",
                  "screen_width",
                  "focal_length",
                  "sensor_height",
                  "texture3",
                  "expected_tri_ids_1",
                  "expected_tri_ids_0",
                  "rotation",
                  "cam3",
                  "screen_height",
                  "sensor_width",
                  "location",
                  "expected_tri_ids_2"
                ]
              ],
              [
                "test_get_best_texture_for_id",
                [
                  "screen_width",
                  "focal_length",
                  "sensor_height",
                  "screen_height",
                  "texture3",
                  "sensor_width",
                  "rotation",
                  "location",
                  "cam3"
                ]
              ],
              [
                "test_visibility_analysis",
                [
                  "res",
                  "exp_vis_vertices1",
                  "exp_vis_ids1",
                  "exp_vis_vertices2",
                  "exp_vis_ids2"
                ]
              ],
              [
                "test_set_duplicates_for_textures",
                [
                  "res",
                  "screen_width",
                  "focal_length",
                  "sensor_height",
                  "texture3",
                  "rotation",
                  "cam3",
                  "screen_height",
                  "expected_dups_0",
                  "expected_dups_1",
                  "sensor_width",
                  "expected_dups_2",
                  "location"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_clean_duplicates",
                [
                  "self.mapper"
                ]
              ],
              [
                "test_get_best_texture_for_id",
                [
                  "self.mapper"
                ]
              ],
              [
                "test_visibility_analysis",
                [
                  "self.mapper"
                ]
              ],
              [
                "test_set_duplicates_for_textures",
                [
                  "self.mapper"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7908304966987938,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_clean_duplicates",
                  "test_set_duplicates_for_textures",
                  0.9472616057978981
                ],
                [
                  "test_visibility_analysis",
                  "test_get_best_texture_for_id",
                  0.6489951752907702
                ],
                [
                  "test_set_duplicates_for_textures",
                  "test_get_best_texture_for_id",
                  0.8718407959876874
                ],
                [
                  "test_visibility_analysis",
                  "test_clean_duplicates",
                  0.7158241195441709
                ],
                [
                  "test_clean_duplicates",
                  "test_get_best_texture_for_id",
                  0.8121844246696345
                ],
                [
                  "test_visibility_analysis",
                  "test_set_duplicates_for_textures",
                  0.7488768589026017
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_clean_duplicates",
                "false"
              ],
              [
                "test_get_best_texture_for_id",
                "false"
              ],
              [
                "test_visibility_analysis",
                "false"
              ],
              [
                "test_set_duplicates_for_textures",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_texture.py",
    "testCases": [
      {
        "name": "TestTexture",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_remove_triangle_with_index",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_remove_triangle_with_index",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_remove_triangle_with_index",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_remove_triangle_with_index",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_remove_triangle_with_index",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_remove_triangle_with_index",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_remove_triangle_with_index",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_remove_triangle_with_index",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "9"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                [
                  "expected_vis_vert_indices",
                  "res",
                  "expected_vis_triangle_ids",
                  "expected_visible_vertices",
                  "expected_normal_indices",
                  "expected_uv_coords",
                  "expected_uv_indices",
                  "expected_dup_triangle_ids",
                  "expected_counts"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                [
                  "self.texture"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_remove_triangle_with_index",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_renderer.py",
    "testCases": [
      {
        "name": "TestRenderer",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_visible_triangles",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_rasterize",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_barycentric",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_wrong_ratio",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_visible_triangles",
                  "[]"
                ],
                [
                  "test_rasterize",
                  "[]"
                ],
                [
                  "test_barycentric",
                  "[]"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "[]"
                ],
                [
                  "test_wrong_ratio",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_visible_triangles",
                  "false"
                ],
                [
                  "test_rasterize",
                  "false"
                ],
                [
                  "test_barycentric",
                  "false"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "false"
                ],
                [
                  "test_wrong_ratio",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_visible_triangles",
                  "false"
                ],
                [
                  "test_rasterize",
                  "false"
                ],
                [
                  "test_barycentric",
                  "false"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "false"
                ],
                [
                  "test_wrong_ratio",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_visible_triangles",
                  "false"
                ],
                [
                  "test_rasterize",
                  "false"
                ],
                [
                  "test_barycentric",
                  "false"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "true"
                ],
                [
                  "test_wrong_ratio",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_visible_triangles",
                  "false"
                ],
                [
                  "test_rasterize",
                  "false"
                ],
                [
                  "test_barycentric",
                  "false"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "false"
                ],
                [
                  "test_wrong_ratio",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                "false"
              ],
              [
                "test_rasterize",
                "false"
              ],
              [
                "test_barycentric",
                "false"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "false"
              ],
              [
                "test_wrong_ratio",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_get_visible_triangles",
                "true"
              ],
              [
                "test_rasterize",
                "true"
              ],
              [
                "test_barycentric",
                "false"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "true"
              ],
              [
                "test_wrong_ratio",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_visible_triangles",
                []
              ],
              [
                "test_rasterize",
                [
                  "self.model"
                ]
              ],
              [
                "test_barycentric",
                [
                  "self.cam",
                  "self.model"
                ]
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                [
                  "self.cam",
                  "self.model"
                ]
              ],
              [
                "test_wrong_ratio",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                "false"
              ],
              [
                "test_rasterize",
                "false"
              ],
              [
                "test_barycentric",
                "false"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "false"
              ],
              [
                "test_wrong_ratio",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                "false"
              ],
              [
                "test_rasterize",
                "false"
              ],
              [
                "test_barycentric",
                "false"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "false"
              ],
              [
                "test_wrong_ratio",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_visible_triangles",
                  "0"
                ],
                [
                  "test_rasterize",
                  "0"
                ],
                [
                  "test_barycentric",
                  "0"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "0"
                ],
                [
                  "test_wrong_ratio",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_visible_triangles",
                  "0"
                ],
                [
                  "test_rasterize",
                  "0"
                ],
                [
                  "test_barycentric",
                  "0"
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "0"
                ],
                [
                  "test_wrong_ratio",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_get_visible_triangles",
                "true"
              ],
              [
                "test_rasterize",
                "true"
              ],
              [
                "test_barycentric",
                "false"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "true"
              ],
              [
                "test_wrong_ratio",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                "false"
              ],
              [
                "test_rasterize",
                "false"
              ],
              [
                "test_barycentric",
                "false"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "false"
              ],
              [
                "test_wrong_ratio",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                "4"
              ],
              [
                "test_rasterize",
                "2"
              ],
              [
                "test_barycentric",
                "6"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "4"
              ],
              [
                "test_wrong_ratio",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                [
                  "visible_triangle_counts",
                  "res",
                  "visible_vertices",
                  "vis_ids",
                  "counts",
                  "visible_triangle_ids",
                  "vis_verts"
                ]
              ],
              [
                "test_rasterize",
                [
                  "res",
                  "triangle_vertices",
                  "expected"
                ]
              ],
              [
                "test_barycentric",
                [
                  "p_inside4",
                  "p_inside3",
                  "p_inside5",
                  "p_outside",
                  "triangle_text_coords",
                  "triangle_text_coords2",
                  "p_inside2",
                  "triangle_text_coords3",
                  "p_inside1"
                ]
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                [
                  "res",
                  "expected_2",
                  "expected",
                  "triangle_text_coords",
                  "triangle_text_coords2"
                ]
              ],
              [
                "test_wrong_ratio",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                [
                  "self.cam",
                  "self.renderer",
                  "self.model"
                ]
              ],
              [
                "test_rasterize",
                [
                  "self.cam",
                  "self.renderer"
                ]
              ],
              [
                "test_barycentric",
                [
                  "self.renderer"
                ]
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                [
                  "self.renderer"
                ]
              ],
              [
                "test_wrong_ratio",
                [
                  "self.cam",
                  "self.renderer",
                  "self.model"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5642063789976337,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_rasterize",
                  "test_barycentric",
                  0.8150384372584137
                ],
                [
                  "test_rasterize",
                  "test_get_bounding_box_coords_for_triangle",
                  0.9614585357577785
                ],
                [
                  "test_barycentric",
                  "test_get_bounding_box_coords_for_triangle",
                  0.8549789366363739
                ],
                [
                  "test_get_visible_triangles",
                  "test_rasterize",
                  0.7993089081380857
                ],
                [
                  "test_get_visible_triangles",
                  "test_barycentric",
                  0.7355399628752171
                ],
                [
                  "test_get_visible_triangles",
                  "test_wrong_ratio",
                  0.22691898030656485
                ],
                [
                  "test_get_bounding_box_coords_for_triangle",
                  "test_wrong_ratio",
                  0.14857676530210895
                ],
                [
                  "test_rasterize",
                  "test_wrong_ratio",
                  0.14092364988943756
                ],
                [
                  "test_barycentric",
                  "test_wrong_ratio",
                  0.15738691877610053
                ],
                [
                  "test_get_visible_triangles",
                  "test_get_bounding_box_coords_for_triangle",
                  0.8019326950362564
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_visible_triangles",
                "false"
              ],
              [
                "test_rasterize",
                "false"
              ],
              [
                "test_barycentric",
                "false"
              ],
              [
                "test_get_bounding_box_coords_for_triangle",
                "false"
              ],
              [
                "test_wrong_ratio",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_wavefront.py",
    "testCases": [
      {
        "name": "TestWavefront",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_obj_normals",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_indices",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_obj_vertices",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_uv_coords",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_obj_normals",
                  "[]"
                ],
                [
                  "test_indices",
                  "[]"
                ],
                [
                  "test_obj_vertices",
                  "[]"
                ],
                [
                  "test_uv_coords",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_obj_normals",
                  "false"
                ],
                [
                  "test_indices",
                  "false"
                ],
                [
                  "test_obj_vertices",
                  "false"
                ],
                [
                  "test_uv_coords",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_obj_normals",
                  "false"
                ],
                [
                  "test_indices",
                  "false"
                ],
                [
                  "test_obj_vertices",
                  "false"
                ],
                [
                  "test_uv_coords",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_obj_normals",
                  "true"
                ],
                [
                  "test_indices",
                  "true"
                ],
                [
                  "test_obj_vertices",
                  "true"
                ],
                [
                  "test_uv_coords",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_obj_normals",
                  "false"
                ],
                [
                  "test_indices",
                  "false"
                ],
                [
                  "test_obj_vertices",
                  "false"
                ],
                [
                  "test_uv_coords",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                "false"
              ],
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_obj_normals",
                "true"
              ],
              [
                "test_indices",
                "true"
              ],
              [
                "test_obj_vertices",
                "true"
              ],
              [
                "test_uv_coords",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_obj_normals",
                [
                  "self.wavefront"
                ]
              ],
              [
                "test_indices",
                [
                  "self.wavefront"
                ]
              ],
              [
                "test_obj_vertices",
                [
                  "self.wavefront"
                ]
              ],
              [
                "test_uv_coords",
                [
                  "self.wavefront",
                  "self.model2"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                "false"
              ],
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                "false"
              ],
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_obj_normals",
                  "0"
                ],
                [
                  "test_indices",
                  "0"
                ],
                [
                  "test_obj_vertices",
                  "0"
                ],
                [
                  "test_uv_coords",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_obj_normals",
                  "0"
                ],
                [
                  "test_indices",
                  "0"
                ],
                [
                  "test_obj_vertices",
                  "0"
                ],
                [
                  "test_uv_coords",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_obj_normals",
                "true"
              ],
              [
                "test_indices",
                "true"
              ],
              [
                "test_obj_vertices",
                "true"
              ],
              [
                "test_uv_coords",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                "false"
              ],
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                "4"
              ],
              [
                "test_indices",
                "4"
              ],
              [
                "test_obj_vertices",
                "4"
              ],
              [
                "test_uv_coords",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                [
                  "res",
                  "model2_norms",
                  "model1_norms"
                ]
              ],
              [
                "test_indices",
                [
                  "res",
                  "indices"
                ]
              ],
              [
                "test_obj_vertices",
                [
                  "res",
                  "model2_verts",
                  "model1_verts"
                ]
              ],
              [
                "test_uv_coords",
                [
                  "res",
                  "uv_coords"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                [
                  "self.model1",
                  "self.model2"
                ]
              ],
              [
                "test_indices",
                [
                  "self.model1",
                  "self.model2"
                ]
              ],
              [
                "test_obj_vertices",
                [
                  "self.model1",
                  "self.model2"
                ]
              ],
              [
                "test_uv_coords",
                [
                  "self.model1"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.750986905653126,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_obj_normals",
                  "test_uv_coords",
                  0.6030702818069692
                ],
                [
                  "test_uv_coords",
                  "test_indices",
                  0.70986397754362
                ],
                [
                  "test_obj_vertices",
                  "test_obj_normals",
                  0.8535674368690068
                ],
                [
                  "test_obj_vertices",
                  "test_indices",
                  0.7632582541286
                ],
                [
                  "test_obj_normals",
                  "test_indices",
                  0.7348066298342542
                ],
                [
                  "test_obj_vertices",
                  "test_uv_coords",
                  0.8413548537363053
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_obj_normals",
                "false"
              ],
              [
                "test_indices",
                "false"
              ],
              [
                "test_obj_vertices",
                "false"
              ],
              [
                "test_uv_coords",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_indicesFormats.py",
    "testCases": [
      {
        "name": "TestIndicesFormats",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_indices_formats_from_string",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_indices_formats_from_string",
                  "[]"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "[]"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_indices_formats_from_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_indices_formats_from_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_indices_formats_from_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_indices_formats_from_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "false"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                []
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                []
              ],
              [
                "test_get_indices_formats_from_single_string",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_indices_formats_from_string",
                  "0"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "0"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_indices_formats_from_string",
                  "0"
                ],
                [
                  "test_get_indices_formats_from_wrong_string",
                  "0"
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "1"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "1"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                [
                  "expected",
                  "format_str"
                ]
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                [
                  "format_str"
                ]
              ],
              [
                "test_get_indices_formats_from_single_string",
                [
                  "expected",
                  "format_str"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                []
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                []
              ],
              [
                "test_get_indices_formats_from_single_string",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7990767770842805,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_indices_formats_from_string",
                  "test_get_indices_formats_from_wrong_string",
                  0.8868270309387541
                ],
                [
                  "test_get_indices_formats_from_string",
                  "test_get_indices_formats_from_single_string",
                  0.7771783343147165
                ],
                [
                  "test_get_indices_formats_from_single_string",
                  "test_get_indices_formats_from_wrong_string",
                  0.733224965999371
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_indices_formats_from_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_wrong_string",
                "false"
              ],
              [
                "test_get_indices_formats_from_single_string",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "tests_\u0026_test_indicesFormatter.py",
    "testCases": [
      {
        "name": "TestIndicesFormatter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_normal_coords_by_format",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_generate_indices",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_normal_coords_by_format",
                  "[]"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "[]"
                ],
                [
                  "test_generate_indices",
                  "[]"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_normal_coords_by_format",
                  "false"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "false"
                ],
                [
                  "test_generate_indices",
                  "false"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_normal_coords_by_format",
                  "false"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "false"
                ],
                [
                  "test_generate_indices",
                  "false"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_normal_coords_by_format",
                  "false"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "false"
                ],
                [
                  "test_generate_indices",
                  "false"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_normal_coords_by_format",
                  "false"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "false"
                ],
                [
                  "test_generate_indices",
                  "false"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "false"
              ],
              [
                "test_get_vertices_coords_by_format",
                "false"
              ],
              [
                "test_generate_indices",
                "false"
              ],
              [
                "test_get_uv_coords_by_format",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "true"
              ],
              [
                "test_get_vertices_coords_by_format",
                "true"
              ],
              [
                "test_generate_indices",
                "true"
              ],
              [
                "test_get_uv_coords_by_format",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                [
                  "self.formats"
                ]
              ],
              [
                "test_get_vertices_coords_by_format",
                [
                  "self.formats"
                ]
              ],
              [
                "test_generate_indices",
                [
                  "self.formats",
                  "self.all_verts"
                ]
              ],
              [
                "test_get_uv_coords_by_format",
                [
                  "self.formats"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "false"
              ],
              [
                "test_get_vertices_coords_by_format",
                "false"
              ],
              [
                "test_generate_indices",
                "false"
              ],
              [
                "test_get_uv_coords_by_format",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "false"
              ],
              [
                "test_get_vertices_coords_by_format",
                "false"
              ],
              [
                "test_generate_indices",
                "false"
              ],
              [
                "test_get_uv_coords_by_format",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_normal_coords_by_format",
                  "0"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "0"
                ],
                [
                  "test_generate_indices",
                  "0"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_normal_coords_by_format",
                  "0"
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "0"
                ],
                [
                  "test_generate_indices",
                  "0"
                ],
                [
                  "test_get_uv_coords_by_format",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "true"
              ],
              [
                "test_get_vertices_coords_by_format",
                "true"
              ],
              [
                "test_generate_indices",
                "true"
              ],
              [
                "test_get_uv_coords_by_format",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "false"
              ],
              [
                "test_get_vertices_coords_by_format",
                "false"
              ],
              [
                "test_generate_indices",
                "false"
              ],
              [
                "test_get_uv_coords_by_format",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "2"
              ],
              [
                "test_get_vertices_coords_by_format",
                "2"
              ],
              [
                "test_generate_indices",
                "2"
              ],
              [
                "test_get_uv_coords_by_format",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                [
                  "res",
                  "expected_normal_coords"
                ]
              ],
              [
                "test_get_vertices_coords_by_format",
                [
                  "res",
                  "expected_vertices_coords"
                ]
              ],
              [
                "test_generate_indices",
                [
                  "res",
                  "expected_indices"
                ]
              ],
              [
                "test_get_uv_coords_by_format",
                [
                  "res",
                  "expected_uv_coords"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                [
                  "self.formatter",
                  "self.all_verts"
                ]
              ],
              [
                "test_get_vertices_coords_by_format",
                [
                  "self.formatter",
                  "self.all_verts"
                ]
              ],
              [
                "test_generate_indices",
                [
                  "self.formatter"
                ]
              ],
              [
                "test_get_uv_coords_by_format",
                [
                  "self.formatter",
                  "self.all_verts"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.741383333139955,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_uv_coords_by_format",
                  "test_generate_indices",
                  0.6907861122682208
                ],
                [
                  "test_get_uv_coords_by_format",
                  "test_get_normal_coords_by_format",
                  0.9239750692714318
                ],
                [
                  "test_get_uv_coords_by_format",
                  "test_get_vertices_coords_by_format",
                  0.6889879271493043
                ],
                [
                  "test_get_normal_coords_by_format",
                  "test_get_vertices_coords_by_format",
                  0.6737802554645966
                ],
                [
                  "test_get_normal_coords_by_format",
                  "test_generate_indices",
                  0.7079036083615902
                ],
                [
                  "test_get_vertices_coords_by_format",
                  "test_generate_indices",
                  0.762867026324586
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_normal_coords_by_format",
                "false"
              ],
              [
                "test_get_vertices_coords_by_format",
                "false"
              ],
              [
                "test_generate_indices",
                "false"
              ],
              [
                "test_get_uv_coords_by_format",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  }
]