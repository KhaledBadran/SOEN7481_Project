[
  {
    "name": "test_\u0026_test_nn.py",
    "testCases": [
      {
        "name": "NNTester",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_adaptive_pooling_input_size",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_adaptive_pooling_input_size",
                  "[]"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_adaptive_pooling_input_size",
                  "true"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_adaptive_pooling_input_size",
                  "false"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_adaptive_pooling_input_size",
                  "false"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_adaptive_pooling_input_size",
                  "false"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "false"
              ],
              [
                "test_adaptive_pooling_size_none",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "false"
              ],
              [
                "test_adaptive_pooling_size_none",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                []
              ],
              [
                "test_adaptive_pooling_size_none",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "false"
              ],
              [
                "test_adaptive_pooling_size_none",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "false"
              ],
              [
                "test_adaptive_pooling_size_none",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_adaptive_pooling_input_size",
                  "0"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_adaptive_pooling_input_size",
                  "0"
                ],
                [
                  "test_adaptive_pooling_size_none",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "false"
              ],
              [
                "test_adaptive_pooling_size_none",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "false"
              ],
              [
                "test_adaptive_pooling_size_none",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "1"
              ],
              [
                "test_adaptive_pooling_size_none",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                [
                  "cls_name",
                  "output_size",
                  "module",
                  "x"
                ]
              ],
              [
                "test_adaptive_pooling_size_none",
                [
                  "cls_name",
                  "output",
                  "output_size",
                  "module",
                  "x"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                []
              ],
              [
                "test_adaptive_pooling_size_none",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7363703306697985,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_adaptive_pooling_input_size",
                  "test_adaptive_pooling_size_none",
                  0.7363703306697985
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_adaptive_pooling_input_size",
                "false"
              ],
              [
                "test_adaptive_pooling_size_none",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "test_\u0026_test_utils.py",
    "testCases": [
      {
        "name": "UtilsTester",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_prettyenv",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_prettyenv",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_prettyenv",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_prettyenv",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_prettyenv",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_prettyenv",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_prettyenv",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_prettyenv",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                [
                  "info_output"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_prettyenv",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_prettyenv",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "test_\u0026_test_models.py",
    "testCases": [
      {
        "name": "ModelsTester",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ssresnet18",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_head",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_cnn_model",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_ssresnet_model",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ssresnet18",
                  "[]"
                ],
                [
                  "test_create_head",
                  "[]"
                ],
                [
                  "test_cnn_model",
                  "[]"
                ],
                [
                  "test_ssresnet_model",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ssresnet18",
                  "false"
                ],
                [
                  "test_create_head",
                  "true"
                ],
                [
                  "test_cnn_model",
                  "false"
                ],
                [
                  "test_ssresnet_model",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ssresnet18",
                  "false"
                ],
                [
                  "test_create_head",
                  "false"
                ],
                [
                  "test_cnn_model",
                  "false"
                ],
                [
                  "test_ssresnet_model",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ssresnet18",
                  "false"
                ],
                [
                  "test_create_head",
                  "false"
                ],
                [
                  "test_cnn_model",
                  "false"
                ],
                [
                  "test_ssresnet_model",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ssresnet18",
                  "false"
                ],
                [
                  "test_create_head",
                  "false"
                ],
                [
                  "test_cnn_model",
                  "false"
                ],
                [
                  "test_ssresnet_model",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                "false"
              ],
              [
                "test_create_head",
                "false"
              ],
              [
                "test_cnn_model",
                "false"
              ],
              [
                "test_ssresnet_model",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                "false"
              ],
              [
                "test_create_head",
                "false"
              ],
              [
                "test_cnn_model",
                "false"
              ],
              [
                "test_ssresnet_model",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                []
              ],
              [
                "test_create_head",
                []
              ],
              [
                "test_cnn_model",
                []
              ],
              [
                "test_ssresnet_model",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                "false"
              ],
              [
                "test_create_head",
                "false"
              ],
              [
                "test_cnn_model",
                "false"
              ],
              [
                "test_ssresnet_model",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_ssresnet18",
                "true"
              ],
              [
                "test_create_head",
                "false"
              ],
              [
                "test_cnn_model",
                "false"
              ],
              [
                "test_ssresnet_model",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ssresnet18",
                  "0"
                ],
                [
                  "test_create_head",
                  "0"
                ],
                [
                  "test_cnn_model",
                  "0"
                ],
                [
                  "test_ssresnet_model",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ssresnet18",
                  "0"
                ],
                [
                  "test_create_head",
                  "0"
                ],
                [
                  "test_cnn_model",
                  "0"
                ],
                [
                  "test_ssresnet_model",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                "false"
              ],
              [
                "test_create_head",
                "false"
              ],
              [
                "test_cnn_model",
                "false"
              ],
              [
                "test_ssresnet_model",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                "false"
              ],
              [
                "test_create_head",
                "false"
              ],
              [
                "test_cnn_model",
                "false"
              ],
              [
                "test_ssresnet_model",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                "2"
              ],
              [
                "test_create_head",
                "2"
              ],
              [
                "test_cnn_model",
                "1"
              ],
              [
                "test_ssresnet_model",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                [
                  "batch_size",
                  "x",
                  "model",
                  "out"
                ]
              ],
              [
                "test_create_head",
                [
                  "head",
                  "num_classes",
                  "kwargs",
                  "in_features",
                  "input_tensor",
                  "args_to_test"
                ]
              ],
              [
                "test_cnn_model",
                [
                  "num_classes",
                  "model"
                ]
              ],
              [
                "test_ssresnet_model",
                [
                  "batch_size",
                  "x",
                  "model",
                  "out"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                []
              ],
              [
                "test_create_head",
                []
              ],
              [
                "test_cnn_model",
                []
              ],
              [
                "test_ssresnet_model",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7274800410406878,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_cnn_model",
                  "test_ssresnet_model",
                  0.6762142744779058
                ],
                [
                  "test_create_head",
                  "test_ssresnet_model",
                  0.6888781103456043
                ],
                [
                  "test_create_head",
                  "test_ssresnet18",
                  0.6979547773151322
                ],
                [
                  "test_create_head",
                  "test_cnn_model",
                  0.6748493807858076
                ],
                [
                  "test_ssresnet_model",
                  "test_ssresnet18",
                  0.9165692857515609
                ],
                [
                  "test_cnn_model",
                  "test_ssresnet18",
                  0.7104144175681155
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ssresnet18",
                "false"
              ],
              [
                "test_create_head",
                "false"
              ],
              [
                "test_cnn_model",
                "false"
              ],
              [
                "test_ssresnet_model",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_test_datasets.py",
    "testCases": [
      {
        "name": "DatasetsTester",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_downloadurl",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_downloadurls",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertRaises, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_openfire",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_downloadurl",
                  "[]"
                ],
                [
                  "test_downloadurls",
                  "[]"
                ],
                [
                  "test_openfire",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_downloadurl",
                  "false"
                ],
                [
                  "test_downloadurls",
                  "false"
                ],
                [
                  "test_openfire",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_downloadurl",
                  "false"
                ],
                [
                  "test_downloadurls",
                  "true"
                ],
                [
                  "test_openfire",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_downloadurl",
                  "false"
                ],
                [
                  "test_downloadurls",
                  "false"
                ],
                [
                  "test_openfire",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_downloadurl",
                  "false"
                ],
                [
                  "test_downloadurls",
                  "false"
                ],
                [
                  "test_openfire",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                "false"
              ],
              [
                "test_downloadurls",
                "false"
              ],
              [
                "test_openfire",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                "false"
              ],
              [
                "test_downloadurls",
                "false"
              ],
              [
                "test_openfire",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                []
              ],
              [
                "test_downloadurls",
                []
              ],
              [
                "test_openfire",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                "false"
              ],
              [
                "test_downloadurls",
                "false"
              ],
              [
                "test_openfire",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_downloadurl",
                "true"
              ],
              [
                "test_downloadurls",
                "false"
              ],
              [
                "test_openfire",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_downloadurl",
                  "0"
                ],
                [
                  "test_downloadurls",
                  "0"
                ],
                [
                  "test_openfire",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_downloadurl",
                  "0"
                ],
                [
                  "test_downloadurls",
                  "0"
                ],
                [
                  "test_openfire",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                "false"
              ],
              [
                "test_downloadurls",
                "false"
              ],
              [
                "test_openfire",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                "false"
              ],
              [
                "test_downloadurls",
                "false"
              ],
              [
                "test_openfire",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                "5"
              ],
              [
                "test_downloadurls",
                "4"
              ],
              [
                "test_openfire",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                [
                  "url"
                ]
              ],
              [
                "test_downloadurls",
                [
                  "urls"
                ]
              ],
              [
                "test_openfire",
                [
                  "img",
                  "extract",
                  "train_set",
                  "train_paths",
                  "num_samples",
                  "test_set",
                  "target"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                []
              ],
              [
                "test_downloadurls",
                []
              ],
              [
                "test_openfire",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5395480547329716,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_downloadurl",
                  "test_downloadurls",
                  0.7484685558646139
                ],
                [
                  "test_downloadurl",
                  "test_openfire",
                  0.43822685991237814
                ],
                [
                  "test_downloadurls",
                  "test_openfire",
                  0.4319487484219228
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_downloadurl",
                "false"
              ],
              [
                "test_downloadurls",
                "false"
              ],
              [
                "test_openfire",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_datasets_wildfire.py",
    "testCases": [
      {
        "name": "FireLabelerTester",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_label_correctly_short_dependency",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "[PyCallExpression: self.assertListEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_firenames_matching",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_label_correctly_short_dependency",
                  "[]"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "[]"
                ],
                [
                  "test_firenames_matching",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_label_correctly_short_dependency",
                  "true"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "true"
                ],
                [
                  "test_firenames_matching",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_label_correctly_short_dependency",
                  "false"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "false"
                ],
                [
                  "test_firenames_matching",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_label_correctly_short_dependency",
                  "false"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "false"
                ],
                [
                  "test_firenames_matching",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_label_correctly_short_dependency",
                  "false"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "false"
                ],
                [
                  "test_firenames_matching",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "false"
              ],
              [
                "test_label_correctly_long_dependency",
                "false"
              ],
              [
                "test_firenames_matching",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "false"
              ],
              [
                "test_label_correctly_long_dependency",
                "false"
              ],
              [
                "test_firenames_matching",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                [
                  "self.fixtures_long"
                ]
              ],
              [
                "test_label_correctly_long_dependency",
                [
                  "self.fixtures"
                ]
              ],
              [
                "test_firenames_matching",
                [
                  "self.fixtures_long",
                  "self.fixtures"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "false"
              ],
              [
                "test_label_correctly_long_dependency",
                "false"
              ],
              [
                "test_firenames_matching",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "false"
              ],
              [
                "test_label_correctly_long_dependency",
                "false"
              ],
              [
                "test_firenames_matching",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_label_correctly_short_dependency",
                  "0"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "0"
                ],
                [
                  "test_firenames_matching",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_label_correctly_short_dependency",
                  "0"
                ],
                [
                  "test_label_correctly_long_dependency",
                  "0"
                ],
                [
                  "test_firenames_matching",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "false"
              ],
              [
                "test_label_correctly_long_dependency",
                "false"
              ],
              [
                "test_firenames_matching",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "false"
              ],
              [
                "test_label_correctly_long_dependency",
                "false"
              ],
              [
                "test_firenames_matching",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "2"
              ],
              [
                "test_label_correctly_long_dependency",
                "2"
              ],
              [
                "test_firenames_matching",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                [
                  "df",
                  "fire_labeler"
                ]
              ],
              [
                "test_label_correctly_long_dependency",
                [
                  "df",
                  "fire_labeler"
                ]
              ],
              [
                "test_firenames_matching",
                [
                  "s1",
                  "s2"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                [
                  "self.fixtures"
                ]
              ],
              [
                "test_label_correctly_long_dependency",
                [
                  "self.fixtures_long"
                ]
              ],
              [
                "test_firenames_matching",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5073643384191083,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_label_correctly_short_dependency",
                  "test_label_correctly_long_dependency",
                  0.8605645987207635
                ],
                [
                  "test_label_correctly_short_dependency",
                  "test_firenames_matching",
                  0.3051924674071266
                ],
                [
                  "test_label_correctly_long_dependency",
                  "test_firenames_matching",
                  0.356335949129435
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_label_correctly_short_dependency",
                "false"
              ],
              [
                "test_label_correctly_long_dependency",
                "false"
              ],
              [
                "test_firenames_matching",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "test_\u0026_test_datasets_wildfire_split.py",
    "testCases": [
      {
        "name": "WildFireDatasetTester",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "[]"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "[]"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "[]"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "[]"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "[]"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "[]"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "true"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "true"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "false"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "false"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "false"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "false"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "false"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "false"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "false"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "false"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "false"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "false"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "false"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "false"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "false"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "false"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                [
                  "self.wildfire_path"
                ]
              ],
              [
                "test_wildfire_correctly_init_from_path",
                [
                  "self.wildfire_df"
                ]
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                [
                  "self.wildfire_df",
                  "self.path_to_frames_str"
                ]
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                [
                  "self.path_to_frames_str",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_invalid_csv_path_raises_exception",
                [
                  "self.wildfire_df",
                  "self.path_to_frames_str",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                [
                  "self.wildfire_df",
                  "self.path_to_frames_str"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "false"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "false"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "false"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "true"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "true"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "true"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "0"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "0"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "0"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "0"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "0"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "0"
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "0"
                ],
                [
                  "test_dataloader_can_be_init_with_wildfire",
                  "0"
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "0"
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "0"
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "false"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "false"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "false"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "false"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "false"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "false"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "5"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "2"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "0"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "4"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "1"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                [
                  "observation_3",
                  "wildfire",
                  "metadata_3"
                ]
              ],
              [
                "test_wildfire_correctly_init_from_path",
                [
                  "wildfire"
                ]
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                [
                  "wildfire"
                ]
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                [
                  "observation_3",
                  "wildfire",
                  "metadata_3"
                ]
              ],
              [
                "test_invalid_csv_path_raises_exception",
                []
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                [
                  "observation_3",
                  "wildfire",
                  "metadata_3"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                [
                  "self.wildfire_df",
                  "self.path_to_frames",
                  "self.path_to_frames_str"
                ]
              ],
              [
                "test_wildfire_correctly_init_from_path",
                [
                  "self.path_to_frames",
                  "self.path_to_frames_str",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                [
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                [
                  "self.wildfire_df",
                  "self.path_to_frames"
                ]
              ],
              [
                "test_invalid_csv_path_raises_exception",
                [
                  "self.path_to_frames"
                ]
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                [
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5975906207377347,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_invalid_csv_path_raises_exception",
                  "test_dataloader_can_be_init_with_wildfire",
                  0.5370861555295747
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "test_dataloader_can_be_init_with_wildfire",
                  0.649223557852128
                ],
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "test_invalid_csv_path_raises_exception",
                  0.405941784489311
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "test_wildfire_correctly_init_with_multiple_targets",
                  0.5623682103929742
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "test_invalid_csv_path_raises_exception",
                  0.539905524799017
                ],
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "test_dataloader_can_be_init_with_wildfire",
                  0.52326170976043
                ],
                [
                  "test_wildfire_correctly_init_with_transform",
                  "test_dataloader_can_be_init_with_wildfire",
                  0.5855400437691199
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "test_wildfire_correctly_init_from_dataframe",
                  0.7305673739751696
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "test_dataloader_can_be_init_with_wildfire",
                  0.4873270318830636
                ],
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "test_wildfire_correctly_init_with_multiple_targets",
                  0.9280596810534011
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "test_invalid_csv_path_raises_exception",
                  0.35254317825757275
                ],
                [
                  "test_wildfire_correctly_init_from_path",
                  "test_wildfire_correctly_init_with_transform",
                  0.5927013615021336
                ],
                [
                  "test_invalid_csv_path_raises_exception",
                  "test_wildfire_correctly_init_with_transform",
                  0.40184252074340204
                ],
                [
                  "test_wildfire_correctly_init_with_multiple_targets",
                  "test_wildfire_correctly_init_with_transform",
                  0.858960204241958
                ],
                [
                  "test_wildfire_correctly_init_from_dataframe",
                  "test_wildfire_correctly_init_with_transform",
                  0.8085309728167648
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_wildfire_correctly_init_from_dataframe",
                "false"
              ],
              [
                "test_wildfire_correctly_init_from_path",
                "false"
              ],
              [
                "test_dataloader_can_be_init_with_wildfire",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_multiple_targets",
                "false"
              ],
              [
                "test_invalid_csv_path_raises_exception",
                "false"
              ],
              [
                "test_wildfire_correctly_init_with_transform",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      },
      {
        "name": "WildFireDatasetSplitter",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_splitting_gives_good_splits_size",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "[PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "[PyCallExpression: self.assertIs]"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_splitting_gives_good_splits_size",
                  "[]"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "[]"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "[]"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "[]"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "[]"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_splitting_gives_good_splits_size",
                  "true"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "true"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "true"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "false"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "false"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_splitting_gives_good_splits_size",
                  "false"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "false"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "false"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "false"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "false"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_splitting_gives_good_splits_size",
                  "false"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "false"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "false"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "false"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "false"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_splitting_gives_good_splits_size",
                  "false"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "false"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "false"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "false"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "false"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "false"
              ],
              [
                "test_splitting_with_test_to_zero",
                "false"
              ],
              [
                "test_splitting_working_with_transforms",
                "false"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "false"
              ],
              [
                "test_consistent_ratios_good_init",
                "false"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "false"
              ],
              [
                "test_splitting_with_test_to_zero",
                "false"
              ],
              [
                "test_splitting_working_with_transforms",
                "false"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "false"
              ],
              [
                "test_consistent_ratios_good_init",
                "false"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                [
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_splitting_with_test_to_zero",
                [
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_splitting_working_with_transforms",
                [
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                [
                  "self.wildfire",
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_consistent_ratios_good_init",
                [
                  "self.wildfire",
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                [
                  "self.path_to_frames",
                  "self.wildfire_path"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "false"
              ],
              [
                "test_splitting_with_test_to_zero",
                "false"
              ],
              [
                "test_splitting_working_with_transforms",
                "false"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "false"
              ],
              [
                "test_consistent_ratios_good_init",
                "false"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "false"
              ],
              [
                "test_splitting_with_test_to_zero",
                "false"
              ],
              [
                "test_splitting_working_with_transforms",
                "false"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "false"
              ],
              [
                "test_consistent_ratios_good_init",
                "false"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_splitting_gives_good_splits_size",
                  "0"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "0"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "0"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "0"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "0"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_splitting_gives_good_splits_size",
                  "0"
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "0"
                ],
                [
                  "test_splitting_working_with_transforms",
                  "0"
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "0"
                ],
                [
                  "test_consistent_ratios_good_init",
                  "0"
                ],
                [
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "false"
              ],
              [
                "test_splitting_with_test_to_zero",
                "false"
              ],
              [
                "test_splitting_working_with_transforms",
                "false"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "false"
              ],
              [
                "test_consistent_ratios_good_init",
                "false"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "false"
              ],
              [
                "test_splitting_with_test_to_zero",
                "false"
              ],
              [
                "test_splitting_working_with_transforms",
                "false"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "false"
              ],
              [
                "test_consistent_ratios_good_init",
                "false"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "2"
              ],
              [
                "test_splitting_with_test_to_zero",
                "1"
              ],
              [
                "test_splitting_working_with_transforms",
                "1"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "1"
              ],
              [
                "test_consistent_ratios_good_init",
                "1"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                [
                  "n_samples_expected",
                  "ratios",
                  "splitter"
                ]
              ],
              [
                "test_splitting_with_test_to_zero",
                [
                  "ratios",
                  "splitter"
                ]
              ],
              [
                "test_splitting_working_with_transforms",
                [
                  "transforms_expected",
                  "ratios",
                  "splitter"
                ]
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                [
                  "ratios"
                ]
              ],
              [
                "test_consistent_ratios_good_init",
                [
                  "ratios",
                  "splitter"
                ]
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                [
                  "ratios",
                  "splitter"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                [
                  "self.wildfire"
                ]
              ],
              [
                "test_splitting_with_test_to_zero",
                [
                  "self.wildfire"
                ]
              ],
              [
                "test_splitting_working_with_transforms",
                [
                  "self.wildfire"
                ]
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                []
              ],
              [
                "test_consistent_ratios_good_init",
                []
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                [
                  "self.wildfire"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7603115438935737,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_consistent_ratios_good_init",
                  "test_splitting_with_test_to_zero",
                  0.738786752026125
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "test_splitting_working_with_transforms",
                  0.6861584995495983
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "test_splitting_gives_good_splits_size",
                  0.7252801489440802
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "test_splitting_gives_good_splits_size",
                  0.8918712738143145
                ],
                [
                  "test_consistent_ratios_good_init",
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  0.8047270004486238
                ],
                [
                  "test_consistent_ratios_good_init",
                  "test_inconsistent_ratios_raise_exception",
                  0.8462955844243879
                ],
                [
                  "test_splitting_gives_good_splits_size",
                  "test_splitting_working_with_transforms",
                  0.734558155216136
                ],
                [
                  "test_splitting_gives_good_splits_size",
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  0.736701910965339
                ],
                [
                  "test_splitting_working_with_transforms",
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  0.733599645866319
                ],
                [
                  "test_consistent_ratios_good_init",
                  "test_splitting_working_with_transforms",
                  0.7256353981321324
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "test_splitting_working_with_transforms",
                  0.7062173383424448
                ],
                [
                  "test_consistent_ratios_good_init",
                  "test_splitting_gives_good_splits_size",
                  0.7673190667179836
                ],
                [
                  "test_splitting_with_test_to_zero",
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  0.7430846525790378
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "test_splitting_with_test_to_zero",
                  0.70179098232453
                ],
                [
                  "test_inconsistent_ratios_raise_exception",
                  "test_splitting_with_unavailable_algorithm_raise_exception",
                  0.8626467490525533
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_splitting_gives_good_splits_size",
                "false"
              ],
              [
                "test_splitting_with_test_to_zero",
                "false"
              ],
              [
                "test_splitting_working_with_transforms",
                "false"
              ],
              [
                "test_inconsistent_ratios_raise_exception",
                "false"
              ],
              [
                "test_consistent_ratios_good_init",
                "false"
              ],
              [
                "test_splitting_with_unavailable_algorithm_raise_exception",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "test_\u0026_test_datasets_wildfire_frame_extractor.py",
    "testCases": [
      {
        "name": "WildFireFrameExtractorTester",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_frame_extraction_random",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_pick_frames_evenly",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertListEqual]"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "[PyCallExpression: self.assertWarns]"
                ],
                [
                  "test_pick_frames_randomly",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual]"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "[]"
                ],
                [
                  "test_frame_extraction_random",
                  "[]"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "[]"
                ],
                [
                  "test_pick_frames_evenly",
                  "[]"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "[]"
                ],
                [
                  "test_pick_frames_randomly",
                  "[]"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "[]"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "true"
                ],
                [
                  "test_frame_extraction_random",
                  "true"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "false"
                ],
                [
                  "test_pick_frames_evenly",
                  "true"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "true"
                ],
                [
                  "test_pick_frames_randomly",
                  "true"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "true"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "false"
                ],
                [
                  "test_frame_extraction_random",
                  "false"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "false"
                ],
                [
                  "test_pick_frames_evenly",
                  "false"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "false"
                ],
                [
                  "test_pick_frames_randomly",
                  "false"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "false"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "false"
                ],
                [
                  "test_frame_extraction_random",
                  "false"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "false"
                ],
                [
                  "test_pick_frames_evenly",
                  "false"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "false"
                ],
                [
                  "test_pick_frames_randomly",
                  "false"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "false"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "false"
                ],
                [
                  "test_frame_extraction_random",
                  "false"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "false"
                ],
                [
                  "test_pick_frames_evenly",
                  "false"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "false"
                ],
                [
                  "test_pick_frames_randomly",
                  "false"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "false"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "false"
              ],
              [
                "test_frame_extraction_random",
                "false"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "false"
              ],
              [
                "test_pick_frames_evenly",
                "false"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "false"
              ],
              [
                "test_pick_frames_randomly",
                "false"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "false"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "false"
              ],
              [
                "test_frame_extraction_random",
                "false"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "false"
              ],
              [
                "test_pick_frames_evenly",
                "false"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "false"
              ],
              [
                "test_pick_frames_randomly",
                "false"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "false"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                [
                  "self.path_to_states_count",
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ],
              [
                "test_frame_extraction_random",
                []
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                [
                  "self.path_to_states_count"
                ]
              ],
              [
                "test_pick_frames_evenly",
                [
                  "self.path_to_states_count",
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                [
                  "self.path_to_states_count",
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ],
              [
                "test_pick_frames_randomly",
                [
                  "self.path_to_states_count",
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                [
                  "self.path_to_states_count"
                ]
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                [
                  "self.path_to_states_count"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "false"
              ],
              [
                "test_frame_extraction_random",
                "false"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "false"
              ],
              [
                "test_pick_frames_evenly",
                "false"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "false"
              ],
              [
                "test_pick_frames_randomly",
                "false"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "false"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "false"
              ],
              [
                "test_frame_extraction_random",
                "false"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "false"
              ],
              [
                "test_pick_frames_evenly",
                "false"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "false"
              ],
              [
                "test_pick_frames_randomly",
                "false"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "false"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "0"
                ],
                [
                  "test_frame_extraction_random",
                  "0"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "0"
                ],
                [
                  "test_pick_frames_evenly",
                  "0"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "0"
                ],
                [
                  "test_pick_frames_randomly",
                  "0"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "0"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_pick_too_many_frames_raise_exception",
                  "0"
                ],
                [
                  "test_frame_extraction_random",
                  "0"
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "0"
                ],
                [
                  "test_pick_frames_evenly",
                  "0"
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "0"
                ],
                [
                  "test_pick_frames_randomly",
                  "0"
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "0"
                ],
                [
                  "test_frame_video_cannot_be_read_raise_exception",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "false"
              ],
              [
                "test_frame_extraction_random",
                "false"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "false"
              ],
              [
                "test_pick_frames_evenly",
                "false"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "false"
              ],
              [
                "test_pick_frames_randomly",
                "false"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "false"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "false"
              ],
              [
                "test_frame_extraction_random",
                "false"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "false"
              ],
              [
                "test_pick_frames_evenly",
                "false"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "false"
              ],
              [
                "test_pick_frames_randomly",
                "false"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "false"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "1"
              ],
              [
                "test_frame_extraction_random",
                "2"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "1"
              ],
              [
                "test_pick_frames_evenly",
                "2"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "1"
              ],
              [
                "test_pick_frames_randomly",
                "3"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "1"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                [
                  "frame_max",
                  "frame_min",
                  "n_frames",
                  "state",
                  "f_base"
                ]
              ],
              [
                "test_frame_extraction_random",
                [
                  "frame_extractor",
                  "labels_count",
                  "frames_count",
                  "frames_count_expected",
                  "labels"
                ]
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                []
              ],
              [
                "test_pick_frames_evenly",
                [
                  "frame_max",
                  "frame_min",
                  "frame_indexes_expected",
                  "state",
                  "f_base",
                  "frame_indexes"
                ]
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                [
                  "frame_max",
                  "frame_min",
                  "n_frames",
                  "state",
                  "f_base"
                ]
              ],
              [
                "test_pick_frames_randomly",
                [
                  "frame_max",
                  "frame_min",
                  "state",
                  "f_base",
                  "frame_indexes"
                ]
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                [
                  "frame_extractor",
                  "too_many_n_frames"
                ]
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                [
                  "frame_extractor"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                []
              ],
              [
                "test_frame_extraction_random",
                [
                  "self.path_to_states_count",
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                [
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ],
              [
                "test_pick_frames_evenly",
                []
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                []
              ],
              [
                "test_pick_frames_randomly",
                []
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                [
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                [
                  "self.path_to_states",
                  "self.path_to_videos"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6168894193951083,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_pick_frames_evenly",
                  "test_frame_extraction_all_strategies_too_many_frames",
                  0.5264721572227985
                ],
                [
                  "test_pick_frames_evenly",
                  "test_frame_extractor_bad_strategy_raise_exception",
                  0.33545114775101387
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "test_frame_video_cannot_be_read_raise_exception",
                  0.49952741981263094
                ],
                [
                  "test_frame_extractor_bad_strategy_raise_exception",
                  "test_frame_video_cannot_be_read_raise_exception",
                  0.6608154520568218
                ],
                [
                  "test_pick_frames_evenly",
                  "test_frame_extraction_random",
                  0.5768456540380722
                ],
                [
                  "test_pick_frames_evenly",
                  "test_frame_video_cannot_be_read_raise_exception",
                  0.4490014661471793
                ],
                [
                  "test_pick_frames_evenly",
                  "test_pick_too_many_frames_raise_exception",
                  0.8533038570916416
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "test_frame_extractor_bad_strategy_raise_exception",
                  0.7243592729269804
                ],
                [
                  "test_pick_frames_randomly",
                  "test_pick_too_many_frames_raise_exception",
                  0.8135064969087957
                ],
                [
                  "test_pick_frames_randomly",
                  "test_frame_extraction_all_strategies_too_many_frames",
                  0.5619514869490164
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "test_frame_extraction_all_strategies_too_many_frames",
                  0.6159507259128116
                ],
                [
                  "test_frame_extraction_all_strategies_too_many_frames",
                  "test_frame_video_cannot_be_read_raise_exception",
                  0.7206235116994415
                ],
                [
                  "test_pick_frames_evenly",
                  "test_pick_too_many_frames_allowed_raise_warning",
                  0.8481007362806156
                ],
                [
                  "test_pick_too_many_frames_raise_exception",
                  "test_frame_video_cannot_be_read_raise_exception",
                  0.5174836497797084
                ],
                [
                  "test_pick_frames_randomly",
                  "test_frame_extraction_random",
                  0.6442034174488969
                ],
                [
                  "test_pick_frames_randomly",
                  "test_frame_extractor_bad_strategy_raise_exception",
                  0.3508962882793221
                ],
                [
                  "test_frame_extraction_random",
                  "test_frame_extraction_all_strategies_too_many_frames",
                  0.7188872278954095
                ],
                [
                  "test_pick_frames_randomly",
                  "test_frame_video_cannot_be_read_raise_exception",
                  0.4713535553850996
                ],
                [
                  "test_pick_too_many_frames_raise_exception",
                  "test_frame_extraction_random",
                  0.5423006726618286
                ],
                [
                  "test_pick_too_many_frames_raise_exception",
                  "test_frame_extractor_bad_strategy_raise_exception",
                  0.45384615384615384
                ],
                [
                  "test_frame_extraction_random",
                  "test_frame_extractor_bad_strategy_raise_exception",
                  0.5030390855007911
                ],
                [
                  "test_pick_too_many_frames_raise_exception",
                  "test_frame_extraction_all_strategies_too_many_frames",
                  0.631802254719644
                ],
                [
                  "test_pick_too_many_frames_raise_exception",
                  "test_pick_too_many_frames_allowed_raise_warning",
                  0.9847278986450447
                ],
                [
                  "test_pick_frames_randomly",
                  "test_pick_frames_evenly",
                  0.8978280671126506
                ],
                [
                  "test_pick_frames_randomly",
                  "test_pick_too_many_frames_allowed_raise_warning",
                  0.8113930383075652
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "test_frame_extraction_random",
                  0.5389939304124998
                ],
                [
                  "test_pick_too_many_frames_allowed_raise_warning",
                  "test_frame_extractor_bad_strategy_raise_exception",
                  0.4204971616884896
                ],
                [
                  "test_frame_extraction_random",
                  "test_frame_video_cannot_be_read_raise_exception",
                  0.599741956582108
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_pick_too_many_frames_raise_exception",
                "false"
              ],
              [
                "test_frame_extraction_random",
                "false"
              ],
              [
                "test_frame_extractor_bad_strategy_raise_exception",
                "false"
              ],
              [
                "test_pick_frames_evenly",
                "false"
              ],
              [
                "test_pick_too_many_frames_allowed_raise_warning",
                "false"
              ],
              [
                "test_pick_frames_randomly",
                "false"
              ],
              [
                "test_frame_extraction_all_strategies_too_many_frames",
                "false"
              ],
              [
                "test_frame_video_cannot_be_read_raise_exception",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  }
]