[
  {
    "name": "tests_\u0026_test_tree.py",
    "testCases": [
      {
        "name": "TestClassificationRules",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_all_paths",
                  "[]"
                ],
                [
                  "test_single_path",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_all_paths",
                  "[PyAssertStatement]"
                ],
                [
                  "test_single_path",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_all_paths",
                  "false"
                ],
                [
                  "test_single_path",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_all_paths",
                  "false"
                ],
                [
                  "test_single_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_all_paths",
                  "false"
                ],
                [
                  "test_single_path",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_all_paths",
                  "false"
                ],
                [
                  "test_single_path",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "false"
              ],
              [
                "test_single_path",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "false"
              ],
              [
                "test_single_path",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_all_paths",
                [
                  "self.tree._tree_store",
                  "self.last_node"
                ]
              ],
              [
                "test_single_path",
                [
                  "self.tree._tree_store"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "false"
              ],
              [
                "test_single_path",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "false"
              ],
              [
                "test_single_path",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_all_paths",
                  "0"
                ],
                [
                  "test_single_path",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_all_paths",
                  "0"
                ],
                [
                  "test_single_path",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "false"
              ],
              [
                "test_single_path",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "false"
              ],
              [
                "test_single_path",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "1"
              ],
              [
                "test_single_path",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                [
                  "expected_rules"
                ]
              ],
              [
                "test_single_path",
                [
                  "expected_rules"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                [
                  "self.tree"
                ]
              ],
              [
                "test_single_path",
                [
                  "self.tree",
                  "self.last_node"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8974757118099299,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_single_path",
                  "test_all_paths",
                  0.8974757118099299
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_all_paths",
                "false"
              ],
              [
                "test_single_path",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestSurrogate",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_surrogate_default_min_p",
                  "[]"
                ],
                [
                  "test_surrgate_detection",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_surrogate_default_min_p",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_surrgate_detection",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_surrogate_default_min_p",
                  "false"
                ],
                [
                  "test_surrgate_detection",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_surrogate_default_min_p",
                  "false"
                ],
                [
                  "test_surrgate_detection",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_surrogate_default_min_p",
                  "false"
                ],
                [
                  "test_surrgate_detection",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_surrogate_default_min_p",
                  "false"
                ],
                [
                  "test_surrgate_detection",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "false"
              ],
              [
                "test_surrgate_detection",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "false"
              ],
              [
                "test_surrgate_detection",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                []
              ],
              [
                "test_surrgate_detection",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "false"
              ],
              [
                "test_surrgate_detection",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "false"
              ],
              [
                "test_surrgate_detection",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_surrogate_default_min_p",
                  "0"
                ],
                [
                  "test_surrgate_detection",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_surrogate_default_min_p",
                  "0"
                ],
                [
                  "test_surrgate_detection",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "false"
              ],
              [
                "test_surrgate_detection",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "false"
              ],
              [
                "test_surrgate_detection",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "2"
              ],
              [
                "test_surrgate_detection",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                [
                  "split",
                  "tree"
                ]
              ],
              [
                "test_surrgate_detection",
                [
                  "split",
                  "tree"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                [
                  "self.arr",
                  "self.ndarr"
                ]
              ],
              [
                "test_surrgate_detection",
                [
                  "self.arr",
                  "self.ndarr"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.624069823469446,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_surrgate_detection",
                  "test_surrogate_default_min_p",
                  0.624069823469446
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_surrogate_default_min_p",
                "false"
              ],
              [
                "test_surrgate_detection",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestTreeGenerated",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_iter",
                  "[]"
                ],
                [
                  "test_modification",
                  "[]"
                ],
                [
                  "test_deletion",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_iter",
                  "[PyAssertStatement]"
                ],
                [
                  "test_modification",
                  "[PyAssertStatement]"
                ],
                [
                  "test_deletion",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_iter",
                  "false"
                ],
                [
                  "test_modification",
                  "false"
                ],
                [
                  "test_deletion",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_iter",
                  "false"
                ],
                [
                  "test_modification",
                  "false"
                ],
                [
                  "test_deletion",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_iter",
                  "false"
                ],
                [
                  "test_modification",
                  "false"
                ],
                [
                  "test_deletion",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_iter",
                  "false"
                ],
                [
                  "test_modification",
                  "false"
                ],
                [
                  "test_deletion",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "false"
              ],
              [
                "test_modification",
                "false"
              ],
              [
                "test_deletion",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "false"
              ],
              [
                "test_modification",
                "false"
              ],
              [
                "test_deletion",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                []
              ],
              [
                "test_modification",
                []
              ],
              [
                "test_deletion",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "false"
              ],
              [
                "test_modification",
                "false"
              ],
              [
                "test_deletion",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "false"
              ],
              [
                "test_modification",
                "false"
              ],
              [
                "test_deletion",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_iter",
                  "0"
                ],
                [
                  "test_modification",
                  "0"
                ],
                [
                  "test_deletion",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_iter",
                  "0"
                ],
                [
                  "test_modification",
                  "0"
                ],
                [
                  "test_deletion",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "false"
              ],
              [
                "test_modification",
                "false"
              ],
              [
                "test_deletion",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "false"
              ],
              [
                "test_modification",
                "false"
              ],
              [
                "test_deletion",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "1"
              ],
              [
                "test_modification",
                "1"
              ],
              [
                "test_deletion",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                []
              ],
              [
                "test_modification",
                []
              ],
              [
                "test_deletion",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                [
                  "self.tree"
                ]
              ],
              [
                "test_modification",
                [
                  "self.tree"
                ]
              ],
              [
                "test_deletion",
                [
                  "self.tree"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6251832573119313,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_iter",
                  "test_modification",
                  0.711275464500633
                ],
                [
                  "test_iter",
                  "test_deletion",
                  0.5587442366156625
                ],
                [
                  "test_modification",
                  "test_deletion",
                  0.6055300708194984
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_iter",
                "false"
              ],
              [
                "test_modification",
                "false"
              ],
              [
                "test_deletion",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestComplexStructures",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_p_and_chi_values_selectivity",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_p_and_chi_values_selectivity",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_p_and_chi_values_selectivity",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_p_and_chi_values_selectivity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_p_and_chi_values_selectivity",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_p_and_chi_values_selectivity",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_p_and_chi_values_selectivity",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_p_and_chi_values_selectivity",
                  "1"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_selectivity",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestBugFixes",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unicode_printing",
                  "[]"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "[]"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unicode_printing",
                  "[PyAssertStatement]"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unicode_printing",
                  "false"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "false"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unicode_printing",
                  "false"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "false"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unicode_printing",
                  "false"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "false"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unicode_printing",
                  "false"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "false"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                "false"
              ],
              [
                "test_incorrect_weighted_counts",
                "false"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_unicode_printing",
                "true"
              ],
              [
                "test_incorrect_weighted_counts",
                "false"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_unicode_printing",
                [
                  "self.wt",
                  "self.ndarr"
                ]
              ],
              [
                "test_incorrect_weighted_counts",
                [
                  "self.string_ndarr"
                ]
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                [
                  "self.arr",
                  "self.wt",
                  "self.string_ndarr",
                  "self.ndarr"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                "false"
              ],
              [
                "test_incorrect_weighted_counts",
                "false"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                "false"
              ],
              [
                "test_incorrect_weighted_counts",
                "false"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unicode_printing",
                  "0"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "0"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unicode_printing",
                  "0"
                ],
                [
                  "test_incorrect_weighted_counts",
                  "0"
                ],
                [
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                "false"
              ],
              [
                "test_incorrect_weighted_counts",
                "false"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                "false"
              ],
              [
                "test_incorrect_weighted_counts",
                "false"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                "1"
              ],
              [
                "test_incorrect_weighted_counts",
                "2"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                [
                  "df",
                  "cols",
                  "no_exception"
                ]
              ],
              [
                "test_incorrect_weighted_counts",
                [
                  "tree"
                ]
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                [
                  "gender",
                  "lover",
                  "tree",
                  "region",
                  "age"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_unicode_printing",
                [
                  "self.arr",
                  "self.string_ndarr"
                ]
              ],
              [
                "test_incorrect_weighted_counts",
                [
                  "self.arr",
                  "self.wt",
                  "self.ndarr"
                ]
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.43281603357263293,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_incorrect_weighted_counts",
                  "test_unicode_printing",
                  0.3499352031837454
                ],
                [
                  "test_unicode_printing",
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  0.3143765099786166
                ],
                [
                  "test_incorrect_weighted_counts",
                  "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                  0.6341363875555368
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_unicode_printing",
                "false"
              ],
              [
                "test_incorrect_weighted_counts",
                "false"
              ],
              [
                "test_splits_shouldnt_carry_on_splitting_below_min_child_node_size",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestStoppingRules",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "[]"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "[]"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "[]"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "[PyAssertStatement]"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "[PyAssertStatement]"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "[PyAssertStatement]"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "false"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                []
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                [
                  "self.wt"
                ]
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                [
                  "self.wt"
                ]
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "0"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "0"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "0"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  "0"
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "0"
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "0"
                ],
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "1"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "1"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "1"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                [
                  "tree"
                ]
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                [
                  "tree"
                ]
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                [
                  "tree"
                ]
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                [
                  "tree"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                [
                  "self.arr",
                  "self.wt",
                  "self.ndarr"
                ]
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                [
                  "self.arr",
                  "self.ndarr"
                ]
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                [
                  "self.arr",
                  "self.ndarr"
                ]
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                [
                  "self.arr",
                  "self.wt",
                  "self.ndarr"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9348429085142169,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  0.9078412990032035
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  0.8862826000439605
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  0.9932202608115114
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "test_min_child_node_size_does_stop_for_weighted_case",
                  0.8802738351683667
                ],
                [
                  "test_min_child_node_size_does_stop_for_unweighted_case",
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  0.9674179220468453
                ],
                [
                  "test_min_child_node_size_does_not_stop_for_unweighted_case",
                  "test_min_child_node_size_does_not_stop_for_weighted_case",
                  0.9740215340114142
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_min_child_node_size_does_not_stop_for_weighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_not_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_unweighted_case",
                "false"
              ],
              [
                "test_min_child_node_size_does_stop_for_weighted_case",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestContinuousDependentVariable",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_bartlett_significance",
                  "[]"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "[]"
                ],
                [
                  "test_continuous_dependent_variable",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_bartlett_significance",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_continuous_dependent_variable",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_bartlett_significance",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_bartlett_significance",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_bartlett_significance",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_bartlett_significance",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "false"
                ],
                [
                  "test_continuous_dependent_variable",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "false"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "false"
              ],
              [
                "test_continuous_dependent_variable",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "false"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "false"
              ],
              [
                "test_continuous_dependent_variable",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_bartlett_significance",
                [
                  "self.random_arr"
                ]
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                [
                  "self.normal_arr"
                ]
              ],
              [
                "test_continuous_dependent_variable",
                [
                  "self.wt",
                  "self.normal_arr"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "false"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "false"
              ],
              [
                "test_continuous_dependent_variable",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "false"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "false"
              ],
              [
                "test_continuous_dependent_variable",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_bartlett_significance",
                  "0"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "0"
                ],
                [
                  "test_continuous_dependent_variable",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_bartlett_significance",
                  "0"
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "0"
                ],
                [
                  "test_continuous_dependent_variable",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "false"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "false"
              ],
              [
                "test_continuous_dependent_variable",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "false"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "false"
              ],
              [
                "test_continuous_dependent_variable",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "2"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "2"
              ],
              [
                "test_continuous_dependent_variable",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                [
                  "tree"
                ]
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                [
                  "tree"
                ]
              ],
              [
                "test_continuous_dependent_variable",
                [
                  "tree"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                [
                  "self.wt",
                  "self.ndarr",
                  "self.normal_arr"
                ]
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                [
                  "self.random_arr",
                  "self.wt",
                  "self.ndarr"
                ]
              ],
              [
                "test_continuous_dependent_variable",
                [
                  "self.random_arr",
                  "self.ndarr"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9198374140385398,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_continuous_dependent_variable",
                  "test_bartlett_significance",
                  0.8918068916268788
                ],
                [
                  "test_continuous_dependent_variable",
                  "test_continuous_dependent_variable_with_weighting",
                  0.9677053504887407
                ],
                [
                  "test_continuous_dependent_variable_with_weighting",
                  "test_bartlett_significance",
                  0.9
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_bartlett_significance",
                "false"
              ],
              [
                "test_continuous_dependent_variable_with_weighting",
                "false"
              ],
              [
                "test_continuous_dependent_variable",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestStringCategoricalDependentVariableForModelPrediction",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "[]"
                ],
                [
                  "test_risk_still_works",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "[PyAssertStatement]"
                ],
                [
                  "test_risk_still_works",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "false"
                ],
                [
                  "test_risk_still_works",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "false"
                ],
                [
                  "test_risk_still_works",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "false"
                ],
                [
                  "test_risk_still_works",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "false"
                ],
                [
                  "test_risk_still_works",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "false"
              ],
              [
                "test_risk_still_works",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "false"
              ],
              [
                "test_risk_still_works",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                [
                  "self.gender",
                  "self.lover",
                  "self.region",
                  "self.age"
                ]
              ],
              [
                "test_risk_still_works",
                [
                  "self.lover"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "false"
              ],
              [
                "test_risk_still_works",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "false"
              ],
              [
                "test_risk_still_works",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "0"
                ],
                [
                  "test_risk_still_works",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "0"
                ],
                [
                  "test_risk_still_works",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "false"
              ],
              [
                "test_risk_still_works",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "false"
              ],
              [
                "test_risk_still_works",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "1"
              ],
              [
                "test_risk_still_works",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                []
              ],
              [
                "test_risk_still_works",
                [
                  "int_lover",
                  "other_tree"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                [
                  "self.tree"
                ]
              ],
              [
                "test_risk_still_works",
                [
                  "self.gender",
                  "self.tree",
                  "self.region",
                  "self.age"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5128486118048259,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_string_dependent_categorical_variable_for_model_prediction",
                  "test_risk_still_works",
                  0.5128486118048259
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_string_dependent_categorical_variable_for_model_prediction",
                "false"
              ],
              [
                "test_risk_still_works",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_stats.py",
    "testCases": [
      {
        "name": "TestContinuousStats",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "[]"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "[]"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "[]"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "[PyAssertStatement, PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "false"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                [
                  "self.stats_normal_data",
                  "self.normal_arr"
                ]
              ],
              [
                "test_p_and_chi_values_for_random_data",
                [
                  "self.stats_normal_data",
                  "self.wt",
                  "self.normal_arr"
                ]
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                [
                  "self.stats_random_data",
                  "self.random_arr"
                ]
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                [
                  "self.stats_random_data",
                  "self.random_arr",
                  "self.wt"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "0"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "0"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "0"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "0"
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "0"
                ],
                [
                  "test_p_and_chi_values_for_normal_data_weighted",
                  "0"
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "3"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "3"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "3"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                [
                  "split"
                ]
              ],
              [
                "test_p_and_chi_values_for_random_data",
                [
                  "split"
                ]
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                [
                  "split"
                ]
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                [
                  "split"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                [
                  "self.stats_random_data",
                  "self.random_arr",
                  "self.wt",
                  "self.ndarr"
                ]
              ],
              [
                "test_p_and_chi_values_for_random_data",
                [
                  "self.stats_random_data",
                  "self.random_arr",
                  "self.ndarr"
                ]
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                [
                  "self.stats_normal_data",
                  "self.wt",
                  "self.ndarr",
                  "self.normal_arr"
                ]
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                [
                  "self.stats_normal_data",
                  "self.ndarr",
                  "self.normal_arr"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9684527606898952,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_p_and_chi_values_for_normal_data",
                  "test_p_and_chi_values_for_normal_data_weighted",
                  0.982265716787138
                ],
                [
                  "test_p_and_chi_values_for_random_data_weighted",
                  "test_p_and_chi_values_for_normal_data_weighted",
                  0.9705882352941175
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "test_p_and_chi_values_for_random_data_weighted",
                  0.982265716787138
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "test_p_and_chi_values_for_normal_data",
                  0.9702380952380952
                ],
                [
                  "test_p_and_chi_values_for_normal_data",
                  "test_p_and_chi_values_for_random_data_weighted",
                  0.9526794000164411
                ],
                [
                  "test_p_and_chi_values_for_random_data",
                  "test_p_and_chi_values_for_normal_data_weighted",
                  0.9526794000164411
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_p_and_chi_values_for_random_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_random_data",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data_weighted",
                "false"
              ],
              [
                "test_p_and_chi_values_for_normal_data",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "tests_\u0026_test_nominal_column.py",
    "testCases": [
      {
        "name": "TestDeepCopy",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_metadata",
                  "[]"
                ],
                [
                  "test_changing_copy",
                  "[]"
                ],
                [
                  "test_deep_copy_does_copy",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_metadata",
                  "[PyAssertStatement]"
                ],
                [
                  "test_changing_copy",
                  "[PyAssertStatement]"
                ],
                [
                  "test_deep_copy_does_copy",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_metadata",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_deep_copy_does_copy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_metadata",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_deep_copy_does_copy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_metadata",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_deep_copy_does_copy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_metadata",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_deep_copy_does_copy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_deep_copy_does_copy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_deep_copy_does_copy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                []
              ],
              [
                "test_changing_copy",
                []
              ],
              [
                "test_deep_copy_does_copy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_deep_copy_does_copy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_deep_copy_does_copy",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_metadata",
                  "0"
                ],
                [
                  "test_changing_copy",
                  "0"
                ],
                [
                  "test_deep_copy_does_copy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_metadata",
                  "0"
                ],
                [
                  "test_changing_copy",
                  "0"
                ],
                [
                  "test_deep_copy_does_copy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_deep_copy_does_copy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_deep_copy_does_copy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "1"
              ],
              [
                "test_changing_copy",
                "1"
              ],
              [
                "test_deep_copy_does_copy",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                []
              ],
              [
                "test_changing_copy",
                []
              ],
              [
                "test_deep_copy_does_copy",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                [
                  "self.orig",
                  "self.copy"
                ]
              ],
              [
                "test_changing_copy",
                [
                  "self.orig",
                  "self.copy"
                ]
              ],
              [
                "test_deep_copy_does_copy",
                [
                  "self.orig",
                  "self.copy"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.46294633384478684,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_deep_copy_does_copy",
                  "test_metadata",
                  0.5573704017131537
                ],
                [
                  "test_deep_copy_does_copy",
                  "test_changing_copy",
                  0.4801382997483599
                ],
                [
                  "test_changing_copy",
                  "test_metadata",
                  0.35133030007284705
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_metadata",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_deep_copy_does_copy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestBugFixes",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_comparison_of_different_object_types",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_comparison_of_different_object_types",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_comparison_of_different_object_types",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_comparison_of_different_object_types",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_comparison_of_different_object_types",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_comparison_of_different_object_types",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_comparison_of_different_object_types",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_comparison_of_different_object_types",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                [
                  "input_list",
                  "object_arr",
                  "vector"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_comparison_of_different_object_types",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ordinal_column.py",
    "testCases": [
      {
        "name": "TestOrdinalDeepCopy",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_deep_copy_does_copy",
                  "[]"
                ],
                [
                  "test_changing_copy",
                  "[]"
                ],
                [
                  "test_metadata",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_deep_copy_does_copy",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_changing_copy",
                  "[PyAssertStatement]"
                ],
                [
                  "test_metadata",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_deep_copy_does_copy",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_metadata",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_deep_copy_does_copy",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_deep_copy_does_copy",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_metadata",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_deep_copy_does_copy",
                  "false"
                ],
                [
                  "test_changing_copy",
                  "false"
                ],
                [
                  "test_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                []
              ],
              [
                "test_changing_copy",
                []
              ],
              [
                "test_metadata",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_deep_copy_does_copy",
                  "0"
                ],
                [
                  "test_changing_copy",
                  "0"
                ],
                [
                  "test_metadata",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_deep_copy_does_copy",
                  "0"
                ],
                [
                  "test_changing_copy",
                  "0"
                ],
                [
                  "test_metadata",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "2"
              ],
              [
                "test_changing_copy",
                "1"
              ],
              [
                "test_metadata",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                []
              ],
              [
                "test_changing_copy",
                []
              ],
              [
                "test_metadata",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                [
                  "self.orig",
                  "self.copy"
                ]
              ],
              [
                "test_changing_copy",
                [
                  "self.orig",
                  "self.copy"
                ]
              ],
              [
                "test_metadata",
                [
                  "self.orig",
                  "self.copy"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.46294633384478684,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_deep_copy_does_copy",
                  "test_metadata",
                  0.5573704017131537
                ],
                [
                  "test_changing_copy",
                  "test_metadata",
                  0.35133030007284705
                ],
                [
                  "test_deep_copy_does_copy",
                  "test_changing_copy",
                  0.4801382997483599
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_deep_copy_does_copy",
                "false"
              ],
              [
                "test_changing_copy",
                "false"
              ],
              [
                "test_metadata",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestOrdinalGrouping",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_groups_after_grouping",
                  "[]"
                ],
                [
                  "test_groups_after_copy",
                  "[]"
                ],
                [
                  "test_possible_groups",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_groups_after_grouping",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_after_copy",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_possible_groups",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_possible_groups",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_possible_groups",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_possible_groups",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_possible_groups",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_possible_groups",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_possible_groups",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                []
              ],
              [
                "test_groups_after_copy",
                []
              ],
              [
                "test_possible_groups",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_possible_groups",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_possible_groups",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_groups_after_grouping",
                  "0"
                ],
                [
                  "test_groups_after_copy",
                  "0"
                ],
                [
                  "test_possible_groups",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_groups_after_grouping",
                  "0"
                ],
                [
                  "test_groups_after_copy",
                  "0"
                ],
                [
                  "test_possible_groups",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_possible_groups",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_possible_groups",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "2"
              ],
              [
                "test_groups_after_copy",
                "2"
              ],
              [
                "test_possible_groups",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                [
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_after_copy",
                [
                  "col",
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_possible_groups",
                [
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_after_copy",
                [
                  "self.col"
                ]
              ],
              [
                "test_possible_groups",
                [
                  "self.col"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9393626239161167,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_groups_after_grouping",
                  "test_groups_after_copy",
                  0.9858591572960929
                ],
                [
                  "test_possible_groups",
                  "test_groups_after_grouping",
                  0.9210683813182904
                ],
                [
                  "test_possible_groups",
                  "test_groups_after_copy",
                  0.9111603331339667
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_possible_groups",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestOrdinalWithObjects",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_possible_groups",
                  "[]"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "[]"
                ],
                [
                  "test_groups_after_copy",
                  "[]"
                ],
                [
                  "test_groups_after_grouping",
                  "[]"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_possible_groups",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_after_copy",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_after_grouping",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_possible_groups",
                  "false"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_possible_groups",
                  "true"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "true"
                ],
                [
                  "test_groups_after_copy",
                  "true"
                ],
                [
                  "test_groups_after_grouping",
                  "true"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_possible_groups",
                  "false"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_possible_groups",
                  "false"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                []
              ],
              [
                "test_groups_after_copy_with_nan",
                []
              ],
              [
                "test_groups_after_copy",
                []
              ],
              [
                "test_groups_after_grouping",
                []
              ],
              [
                "test_groups_grouping_with_nan",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_possible_groups",
                  "0"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "0"
                ],
                [
                  "test_groups_after_copy",
                  "0"
                ],
                [
                  "test_groups_after_grouping",
                  "0"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_possible_groups",
                  "0"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "0"
                ],
                [
                  "test_groups_after_copy",
                  "0"
                ],
                [
                  "test_groups_after_grouping",
                  "0"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "2"
              ],
              [
                "test_groups_after_copy_with_nan",
                "2"
              ],
              [
                "test_groups_after_copy",
                "2"
              ],
              [
                "test_groups_after_grouping",
                "2"
              ],
              [
                "test_groups_grouping_with_nan",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                [
                  "actual_groups",
                  "metadata",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_after_copy_with_nan",
                [
                  "col",
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_after_copy",
                [
                  "col",
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_after_grouping",
                [
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_grouping_with_nan",
                [
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_after_copy_with_nan",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_after_copy",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_after_grouping",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_grouping_with_nan",
                [
                  "self.col"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9482499732428182,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_groups_grouping_with_nan",
                  "test_groups_after_copy",
                  0.9515498503156513
                ],
                [
                  "test_possible_groups",
                  "test_groups_after_grouping",
                  0.9587511037007936
                ],
                [
                  "test_possible_groups",
                  "test_groups_grouping_with_nan",
                  0.8846358058903215
                ],
                [
                  "test_possible_groups",
                  "test_groups_after_copy_with_nan",
                  0.8809433881869312
                ],
                [
                  "test_groups_after_copy",
                  "test_groups_after_copy_with_nan",
                  0.9611132438826415
                ],
                [
                  "test_possible_groups",
                  "test_groups_after_copy",
                  0.9553827318603263
                ],
                [
                  "test_groups_after_grouping",
                  "test_groups_grouping_with_nan",
                  0.959247745767654
                ],
                [
                  "test_groups_after_grouping",
                  "test_groups_after_copy",
                  0.9910035070868136
                ],
                [
                  "test_groups_grouping_with_nan",
                  "test_groups_after_copy_with_nan",
                  0.9884460527510918
                ],
                [
                  "test_groups_after_grouping",
                  "test_groups_after_copy_with_nan",
                  0.9514263029859579
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestOrdinalGroupingWithnan",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_possible_groups",
                  "[]"
                ],
                [
                  "test_groups_after_grouping",
                  "[]"
                ],
                [
                  "test_groups_after_copy",
                  "[]"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "[]"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_possible_groups",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_after_grouping",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_after_copy",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "[PyAssertStatement, PyAssertStatement]"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "[PyAssertStatement, PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_possible_groups",
                  "false"
                ],
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "false"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_possible_groups",
                  "true"
                ],
                [
                  "test_groups_after_grouping",
                  "true"
                ],
                [
                  "test_groups_after_copy",
                  "true"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "true"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_possible_groups",
                  "false"
                ],
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "false"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_possible_groups",
                  "false"
                ],
                [
                  "test_groups_after_grouping",
                  "false"
                ],
                [
                  "test_groups_after_copy",
                  "false"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "false"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                []
              ],
              [
                "test_groups_after_grouping",
                []
              ],
              [
                "test_groups_after_copy",
                []
              ],
              [
                "test_groups_grouping_with_nan",
                []
              ],
              [
                "test_groups_after_copy_with_nan",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_possible_groups",
                  "0"
                ],
                [
                  "test_groups_after_grouping",
                  "0"
                ],
                [
                  "test_groups_after_copy",
                  "0"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "0"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_possible_groups",
                  "0"
                ],
                [
                  "test_groups_after_grouping",
                  "0"
                ],
                [
                  "test_groups_after_copy",
                  "0"
                ],
                [
                  "test_groups_grouping_with_nan",
                  "0"
                ],
                [
                  "test_groups_after_copy_with_nan",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "2"
              ],
              [
                "test_groups_after_grouping",
                "2"
              ],
              [
                "test_groups_after_copy",
                "2"
              ],
              [
                "test_groups_grouping_with_nan",
                "2"
              ],
              [
                "test_groups_after_copy_with_nan",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                [
                  "actual_groups",
                  "metadata",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_after_grouping",
                [
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_after_copy",
                [
                  "col",
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_grouping_with_nan",
                [
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ],
              [
                "test_groups_after_copy_with_nan",
                [
                  "col",
                  "actual_groups",
                  "groupings",
                  "possible_groupings",
                  "groups"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_after_grouping",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_after_copy",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_grouping_with_nan",
                [
                  "self.col"
                ]
              ],
              [
                "test_groups_after_copy_with_nan",
                [
                  "self.col"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9482499732428182,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_possible_groups",
                  "test_groups_after_grouping",
                  0.9587511037007936
                ],
                [
                  "test_groups_after_grouping",
                  "test_groups_grouping_with_nan",
                  0.959247745767654
                ],
                [
                  "test_groups_after_copy",
                  "test_groups_after_copy_with_nan",
                  0.9611132438826415
                ],
                [
                  "test_possible_groups",
                  "test_groups_after_copy",
                  0.9553827318603263
                ],
                [
                  "test_groups_after_grouping",
                  "test_groups_after_copy",
                  0.9910035070868136
                ],
                [
                  "test_groups_after_grouping",
                  "test_groups_after_copy_with_nan",
                  0.9514263029859579
                ],
                [
                  "test_groups_grouping_with_nan",
                  "test_groups_after_copy_with_nan",
                  0.9884460527510918
                ],
                [
                  "test_groups_grouping_with_nan",
                  "test_groups_after_copy",
                  0.9515498503156513
                ],
                [
                  "test_possible_groups",
                  "test_groups_grouping_with_nan",
                  0.8846358058903215
                ],
                [
                  "test_possible_groups",
                  "test_groups_after_copy_with_nan",
                  0.8809433881869312
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_possible_groups",
                "false"
              ],
              [
                "test_groups_after_grouping",
                "false"
              ],
              [
                "test_groups_after_copy",
                "false"
              ],
              [
                "test_groups_grouping_with_nan",
                "false"
              ],
              [
                "test_groups_after_copy_with_nan",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      },
      {
        "name": "TestOrdinalConstructor",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_correctly_subs_nan_values",
                  "[]"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "[]"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_correctly_subs_nan_values",
                  "[PyAssertStatement]"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "[PyAssertStatement]"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "[PyAssertStatement]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_correctly_subs_nan_values",
                  "false"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "false"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_correctly_subs_nan_values",
                  "false"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "false"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_correctly_subs_nan_values",
                  "false"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "false"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_correctly_subs_nan_values",
                  "false"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "false"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "false"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "false"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "false"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "false"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                []
              ],
              [
                "test_correctly_subs_floats_for_ints",
                []
              ],
              [
                "test_correctly_subs_floated_metadata",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "false"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "false"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "false"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "false"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_correctly_subs_nan_values",
                  "0"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "0"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_correctly_subs_nan_values",
                  "0"
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "0"
                ],
                [
                  "test_correctly_subs_floated_metadata",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "false"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "false"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "false"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "false"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "1"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "1"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                []
              ],
              [
                "test_correctly_subs_floats_for_ints",
                []
              ],
              [
                "test_correctly_subs_floated_metadata",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                [
                  "self.col_with_nan"
                ]
              ],
              [
                "test_correctly_subs_floats_for_ints",
                [
                  "self.col_with_nan"
                ]
              ],
              [
                "test_correctly_subs_floated_metadata",
                [
                  "self.col_with_nan"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.41481101051459374,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_correctly_subs_nan_values",
                  "test_correctly_subs_floats_for_ints",
                  0.43082021842766455
                ],
                [
                  "test_correctly_subs_floats_for_ints",
                  "test_correctly_subs_floated_metadata",
                  0.36980013081681945
                ],
                [
                  "test_correctly_subs_nan_values",
                  "test_correctly_subs_floated_metadata",
                  0.44381268229929727
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_correctly_subs_nan_values",
                "false"
              ],
              [
                "test_correctly_subs_floats_for_ints",
                "false"
              ],
              [
                "test_correctly_subs_floated_metadata",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  }
]