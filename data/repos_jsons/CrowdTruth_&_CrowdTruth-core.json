[
  {
    "name": "test_\u0026_test_load.py",
    "testCases": [
      {
        "name": "TestLoad",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_data_frame",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_platform",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_empty_rows",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_folder",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_data_frame",
                  "[]"
                ],
                [
                  "test_platform",
                  "[]"
                ],
                [
                  "test_empty_rows",
                  "[]"
                ],
                [
                  "test_folder",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_data_frame",
                  "true"
                ],
                [
                  "test_platform",
                  "true"
                ],
                [
                  "test_empty_rows",
                  "false"
                ],
                [
                  "test_folder",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_data_frame",
                  "false"
                ],
                [
                  "test_platform",
                  "false"
                ],
                [
                  "test_empty_rows",
                  "false"
                ],
                [
                  "test_folder",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_data_frame",
                  "false"
                ],
                [
                  "test_platform",
                  "false"
                ],
                [
                  "test_empty_rows",
                  "false"
                ],
                [
                  "test_folder",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_data_frame",
                  "false"
                ],
                [
                  "test_platform",
                  "false"
                ],
                [
                  "test_empty_rows",
                  "false"
                ],
                [
                  "test_folder",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                "false"
              ],
              [
                "test_platform",
                "false"
              ],
              [
                "test_empty_rows",
                "false"
              ],
              [
                "test_folder",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                "false"
              ],
              [
                "test_platform",
                "false"
              ],
              [
                "test_empty_rows",
                "false"
              ],
              [
                "test_folder",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                []
              ],
              [
                "test_platform",
                []
              ],
              [
                "test_empty_rows",
                []
              ],
              [
                "test_folder",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                "false"
              ],
              [
                "test_platform",
                "false"
              ],
              [
                "test_empty_rows",
                "false"
              ],
              [
                "test_folder",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_data_frame",
                "false"
              ],
              [
                "test_platform",
                "false"
              ],
              [
                "test_empty_rows",
                "true"
              ],
              [
                "test_folder",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_data_frame",
                  "0"
                ],
                [
                  "test_platform",
                  "0"
                ],
                [
                  "test_empty_rows",
                  "0"
                ],
                [
                  "test_folder",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_data_frame",
                  "0"
                ],
                [
                  "test_platform",
                  "0"
                ],
                [
                  "test_empty_rows",
                  "0"
                ],
                [
                  "test_folder",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                "false"
              ],
              [
                "test_platform",
                "false"
              ],
              [
                "test_empty_rows",
                "false"
              ],
              [
                "test_folder",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                "false"
              ],
              [
                "test_platform",
                "false"
              ],
              [
                "test_empty_rows",
                "false"
              ],
              [
                "test_folder",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                "3"
              ],
              [
                "test_platform",
                "3"
              ],
              [
                "test_empty_rows",
                "3"
              ],
              [
                "test_folder",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                [
                  "data_file",
                  "df",
                  "data_df",
                  "test_config_file",
                  "_",
                  "test_config_df"
                ]
              ],
              [
                "test_platform",
                [
                  "test_config_amt",
                  "data_amt",
                  "data_cf",
                  "test_config_cf",
                  "_"
                ]
              ],
              [
                "test_empty_rows",
                [
                  "data_with",
                  "test_without",
                  "data_without",
                  "data_proc_judg",
                  "test_with",
                  "test_proc_judg",
                  "_"
                ]
              ],
              [
                "test_folder",
                [
                  "data",
                  "test_config",
                  "_"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                []
              ],
              [
                "test_platform",
                []
              ],
              [
                "test_empty_rows",
                []
              ],
              [
                "test_folder",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8404962900705426,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_platform",
                  "test_data_frame",
                  0.9548286519289073
                ],
                [
                  "test_folder",
                  "test_empty_rows",
                  0.8886757089417295
                ],
                [
                  "test_platform",
                  "test_empty_rows",
                  0.8248950838104913
                ],
                [
                  "test_empty_rows",
                  "test_data_frame",
                  0.8156675321735289
                ],
                [
                  "test_platform",
                  "test_folder",
                  0.7874914746612974
                ],
                [
                  "test_folder",
                  "test_data_frame",
                  0.7714192889073008
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_data_frame",
                "false"
              ],
              [
                "test_platform",
                "false"
              ],
              [
                "test_empty_rows",
                "false"
              ],
              [
                "test_folder",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "test_\u0026_test_metrics.py",
    "testCases": [
      {
        "name": "TestAgreementClosed",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_all_workers_agree",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_incremental_worker_agreement",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertGreater, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess, PyCallExpression: self.assertLess]"
                ],
                [
                  "test_all_workers_disagree",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ],
                [
                  "test_outlier_worker",
                  "[PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual, PyCallExpression: self.assertAlmostEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_all_workers_agree",
                  "[]"
                ],
                [
                  "test_incremental_worker_agreement",
                  "[]"
                ],
                [
                  "test_all_workers_disagree",
                  "[]"
                ],
                [
                  "test_outlier_worker",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_all_workers_agree",
                  "true"
                ],
                [
                  "test_incremental_worker_agreement",
                  "true"
                ],
                [
                  "test_all_workers_disagree",
                  "true"
                ],
                [
                  "test_outlier_worker",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_all_workers_agree",
                  "false"
                ],
                [
                  "test_incremental_worker_agreement",
                  "false"
                ],
                [
                  "test_all_workers_disagree",
                  "false"
                ],
                [
                  "test_outlier_worker",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_all_workers_agree",
                  "false"
                ],
                [
                  "test_incremental_worker_agreement",
                  "false"
                ],
                [
                  "test_all_workers_disagree",
                  "false"
                ],
                [
                  "test_outlier_worker",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_all_workers_agree",
                  "false"
                ],
                [
                  "test_incremental_worker_agreement",
                  "false"
                ],
                [
                  "test_all_workers_disagree",
                  "false"
                ],
                [
                  "test_outlier_worker",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                "false"
              ],
              [
                "test_incremental_worker_agreement",
                "false"
              ],
              [
                "test_all_workers_disagree",
                "false"
              ],
              [
                "test_outlier_worker",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                "false"
              ],
              [
                "test_incremental_worker_agreement",
                "false"
              ],
              [
                "test_all_workers_disagree",
                "false"
              ],
              [
                "test_outlier_worker",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                []
              ],
              [
                "test_incremental_worker_agreement",
                []
              ],
              [
                "test_all_workers_disagree",
                []
              ],
              [
                "test_outlier_worker",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                "false"
              ],
              [
                "test_incremental_worker_agreement",
                "false"
              ],
              [
                "test_all_workers_disagree",
                "false"
              ],
              [
                "test_outlier_worker",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_all_workers_agree",
                "true"
              ],
              [
                "test_incremental_worker_agreement",
                "false"
              ],
              [
                "test_all_workers_disagree",
                "true"
              ],
              [
                "test_outlier_worker",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_all_workers_agree",
                  "0"
                ],
                [
                  "test_incremental_worker_agreement",
                  "0"
                ],
                [
                  "test_all_workers_disagree",
                  "0"
                ],
                [
                  "test_outlier_worker",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_all_workers_agree",
                  "0"
                ],
                [
                  "test_incremental_worker_agreement",
                  "0"
                ],
                [
                  "test_all_workers_disagree",
                  "0"
                ],
                [
                  "test_outlier_worker",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                "false"
              ],
              [
                "test_incremental_worker_agreement",
                "false"
              ],
              [
                "test_all_workers_disagree",
                "false"
              ],
              [
                "test_outlier_worker",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                "false"
              ],
              [
                "test_incremental_worker_agreement",
                "false"
              ],
              [
                "test_all_workers_disagree",
                "false"
              ],
              [
                "test_outlier_worker",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                "3"
              ],
              [
                "test_incremental_worker_agreement",
                "13"
              ],
              [
                "test_all_workers_disagree",
                "3"
              ],
              [
                "test_outlier_worker",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                [
                  "data",
                  "config",
                  "results",
                  "test_config"
                ]
              ],
              [
                "test_incremental_worker_agreement",
                [
                  "data",
                  "config",
                  "results",
                  "test_config"
                ]
              ],
              [
                "test_all_workers_disagree",
                [
                  "data",
                  "config",
                  "results",
                  "test_config"
                ]
              ],
              [
                "test_outlier_worker",
                [
                  "data",
                  "config",
                  "results",
                  "test_config"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                []
              ],
              [
                "test_incremental_worker_agreement",
                []
              ],
              [
                "test_all_workers_disagree",
                []
              ],
              [
                "test_outlier_worker",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7537171846336596,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_all_workers_disagree",
                  "test_outlier_worker",
                  0.9256547449697531
                ],
                [
                  "test_all_workers_disagree",
                  "test_incremental_worker_agreement",
                  0.5561149324505933
                ],
                [
                  "test_outlier_worker",
                  "test_incremental_worker_agreement",
                  0.5869881204501752
                ],
                [
                  "test_all_workers_agree",
                  "test_incremental_worker_agreement",
                  0.5610925887213587
                ],
                [
                  "test_all_workers_agree",
                  "test_all_workers_disagree",
                  0.977603807774247
                ],
                [
                  "test_all_workers_agree",
                  "test_outlier_worker",
                  0.91484891343583
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_all_workers_agree",
                "false"
              ],
              [
                "test_incremental_worker_agreement",
                "false"
              ],
              [
                "test_all_workers_disagree",
                "false"
              ],
              [
                "test_outlier_worker",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      },
      {
        "name": "TestTutorial",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_metrics_correct_interval",
                  "[PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_metrics_correct_interval",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_metrics_correct_interval",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_metrics_correct_interval",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_metrics_correct_interval",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_metrics_correct_interval",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_metrics_correct_interval",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_metrics_correct_interval",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_metrics_correct_interval",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                [
                  "data",
                  "test_conf_const",
                  "config",
                  "results",
                  "test_config"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestCustomizedTutorial",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_metrics_correct_interval",
                  "[PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual, PyCallExpression: self.assertGreaterEqual, PyCallExpression: self.assertLessEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_metrics_correct_interval",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_metrics_correct_interval",
                  "true"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_metrics_correct_interval",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_metrics_correct_interval",
                  "true"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_metrics_correct_interval",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_metrics_correct_interval",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_metrics_correct_interval",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_metrics_correct_interval",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                [
                  "data",
                  "test_conf_const",
                  "config",
                  "results",
                  "test_config"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_metrics_correct_interval",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]