[
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_setup.py",
    "testCases": [
      {
        "name": "EasyNewsletterSetupTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_catalog",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_newsletter_factory",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_catalog",
                  "[]"
                ],
                [
                  "test_newsletter_factory",
                  "[]"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "[]"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_catalog",
                  "false"
                ],
                [
                  "test_newsletter_factory",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_catalog",
                  "false"
                ],
                [
                  "test_newsletter_factory",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_catalog",
                  "false"
                ],
                [
                  "test_newsletter_factory",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_catalog",
                  "false"
                ],
                [
                  "test_newsletter_factory",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "false"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                "false"
              ],
              [
                "test_newsletter_factory",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                "false"
              ],
              [
                "test_newsletter_factory",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_catalog",
                [
                  "self.search_settings",
                  "self.nav_settings",
                  "self.folder"
                ]
              ],
              [
                "test_newsletter_factory",
                [
                  "self.search_settings",
                  "self.portal",
                  "self.nav_settings"
                ]
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                [
                  "self.portal",
                  "self.nav_settings",
                  "self.folder"
                ]
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                [
                  "self.search_settings",
                  "self.portal",
                  "self.folder"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                "false"
              ],
              [
                "test_newsletter_factory",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                "false"
              ],
              [
                "test_newsletter_factory",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_catalog",
                  "0"
                ],
                [
                  "test_newsletter_factory",
                  "0"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "0"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_catalog",
                  "0"
                ],
                [
                  "test_newsletter_factory",
                  "0"
                ],
                [
                  "test_newsletter_subtypes_in_types_not_searched",
                  "0"
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                "false"
              ],
              [
                "test_newsletter_factory",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                "false"
              ],
              [
                "test_newsletter_factory",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                "1"
              ],
              [
                "test_newsletter_factory",
                "1"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "1"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                [
                  "indexes"
                ]
              ],
              [
                "test_newsletter_factory",
                []
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                []
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_catalog",
                [
                  "self.portal"
                ]
              ],
              [
                "test_newsletter_factory",
                [
                  "self.folder"
                ]
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                [
                  "self.search_settings"
                ]
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                [
                  "self.nav_settings"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.35679547440740006,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_catalog",
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  0.33487441105139065
                ],
                [
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  "test_newsletter_subtypes_in_types_not_searched",
                  0.636632707940204
                ],
                [
                  "test_newsletter_factory",
                  "test_newsletter_subtypes_in_meta_types_not_to_list",
                  0.29335732442442874
                ],
                [
                  "test_catalog",
                  "test_newsletter_subtypes_in_types_not_searched",
                  0.3328201177351375
                ],
                [
                  "test_newsletter_factory",
                  "test_catalog",
                  0.22237479499833038
                ],
                [
                  "test_newsletter_factory",
                  "test_newsletter_subtypes_in_types_not_searched",
                  0.32071349029490925
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_catalog",
                "true"
              ],
              [
                "test_newsletter_factory",
                "false"
              ],
              [
                "test_newsletter_subtypes_in_types_not_searched",
                "true"
              ],
              [
                "test_newsletter_subtypes_in_meta_types_not_to_list",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_utils.py",
    "testCases": [
      {
        "name": "UtilsIntegrationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_portal_mail_settings",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_portal_mail_settings",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_portal_mail_settings",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_portal_mail_settings",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_portal_mail_settings",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_portal_mail_settings",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_portal_mail_settings",
                [
                  "self.portal.email_from_name",
                  "self.registry",
                  "self.mail_host.smtp_pass",
                  "self.portal._original_MailHost",
                  "self.portal.email_from_address",
                  "self.mail_host.smtp_userid",
                  "self.portal",
                  "self.mail_host.smtp_port",
                  "self.portal.MailHost",
                  "self.portal_url",
                  "self.mail_host.smtp_host",
                  "self.mail_host"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_portal_mail_settings",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_portal_mail_settings",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_portal_mail_settings",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                "6"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                [
                  "settings"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_portal_mail_settings",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_portal_mail_settings",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_newsletter.py",
    "testCases": [
      {
        "name": "EasyNewsletterTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_send_test_personalization",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_send_test_issue_with_image",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_issue_send_test",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_before_the_personalization_filter",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_permission",
                  "[PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_create_newsletter",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_create_issue",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "[PyCallExpression: self.assertNotIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "[]"
                ],
                [
                  "test_send_test_personalization",
                  "[]"
                ],
                [
                  "test_send_test_issue_with_image",
                  "[]"
                ],
                [
                  "test_issue_send_test",
                  "[]"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "[]"
                ],
                [
                  "test_before_the_personalization_filter",
                  "[]"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "[]"
                ],
                [
                  "test_permission",
                  "[]"
                ],
                [
                  "test_create_newsletter",
                  "[]"
                ],
                [
                  "test_create_issue",
                  "[]"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "false"
                ],
                [
                  "test_send_test_personalization",
                  "false"
                ],
                [
                  "test_send_test_issue_with_image",
                  "false"
                ],
                [
                  "test_issue_send_test",
                  "false"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "false"
                ],
                [
                  "test_before_the_personalization_filter",
                  "true"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "false"
                ],
                [
                  "test_permission",
                  "false"
                ],
                [
                  "test_create_newsletter",
                  "false"
                ],
                [
                  "test_create_issue",
                  "false"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "false"
                ],
                [
                  "test_send_test_personalization",
                  "false"
                ],
                [
                  "test_send_test_issue_with_image",
                  "false"
                ],
                [
                  "test_issue_send_test",
                  "false"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "false"
                ],
                [
                  "test_before_the_personalization_filter",
                  "false"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "false"
                ],
                [
                  "test_permission",
                  "false"
                ],
                [
                  "test_create_newsletter",
                  "false"
                ],
                [
                  "test_create_issue",
                  "false"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "false"
                ],
                [
                  "test_send_test_personalization",
                  "false"
                ],
                [
                  "test_send_test_issue_with_image",
                  "false"
                ],
                [
                  "test_issue_send_test",
                  "false"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "false"
                ],
                [
                  "test_before_the_personalization_filter",
                  "false"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "false"
                ],
                [
                  "test_permission",
                  "false"
                ],
                [
                  "test_create_newsletter",
                  "false"
                ],
                [
                  "test_create_issue",
                  "false"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "false"
                ],
                [
                  "test_send_test_personalization",
                  "false"
                ],
                [
                  "test_send_test_issue_with_image",
                  "false"
                ],
                [
                  "test_issue_send_test",
                  "false"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "false"
                ],
                [
                  "test_before_the_personalization_filter",
                  "false"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "false"
                ],
                [
                  "test_permission",
                  "false"
                ],
                [
                  "test_create_newsletter",
                  "false"
                ],
                [
                  "test_create_issue",
                  "false"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "false"
              ],
              [
                "test_send_test_personalization",
                "false"
              ],
              [
                "test_send_test_issue_with_image",
                "false"
              ],
              [
                "test_issue_send_test",
                "false"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "false"
              ],
              [
                "test_before_the_personalization_filter",
                "false"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "false"
              ],
              [
                "test_permission",
                "false"
              ],
              [
                "test_create_newsletter",
                "false"
              ],
              [
                "test_create_issue",
                "false"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "false"
              ],
              [
                "test_send_test_personalization",
                "false"
              ],
              [
                "test_send_test_issue_with_image",
                "false"
              ],
              [
                "test_issue_send_test",
                "false"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "false"
              ],
              [
                "test_before_the_personalization_filter",
                "true"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "false"
              ],
              [
                "test_permission",
                "false"
              ],
              [
                "test_create_newsletter",
                "false"
              ],
              [
                "test_create_issue",
                "false"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.mailhost",
                  "self.newsletter",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name",
                  "self.default_prologue"
                ]
              ],
              [
                "test_send_test_personalization",
                [
                  "self.request",
                  "self.image",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.folder",
                  "self.portal.MailHost"
                ]
              ],
              [
                "test_send_test_issue_with_image",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.mailhost",
                  "self.newsletter",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name",
                  "self.default_prologue"
                ]
              ],
              [
                "test_issue_send_test",
                [
                  "self.request",
                  "self.image",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.default_epilogue",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.default_prologue"
                ]
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.image",
                  "self.mailhost",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name"
                ]
              ],
              [
                "test_before_the_personalization_filter",
                [
                  "self.request",
                  "self.image",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.folder",
                  "self.portal.MailHost"
                ]
              ],
              [
                "test_send_test_issue_with_scale_image",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.mailhost",
                  "self.newsletter",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.default_epilogue",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name",
                  "self.default_prologue"
                ]
              ],
              [
                "test_permission",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.image",
                  "self.mailhost",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name"
                ]
              ],
              [
                "test_create_newsletter",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.image",
                  "self.mailhost",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name",
                  "self.default_prologue"
                ]
              ],
              [
                "test_create_issue",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.image",
                  "self.mailhost",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name",
                  "self.default_prologue"
                ]
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                [
                  "self.newsletter.sender_email",
                  "self.request",
                  "self.mailhost",
                  "self.newsletter",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.default_epilogue",
                  "self.newsletter.test_email",
                  "self.folder",
                  "self.portal.MailHost",
                  "self.newsletter.sender_name",
                  "self.default_prologue"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "false"
              ],
              [
                "test_send_test_personalization",
                "false"
              ],
              [
                "test_send_test_issue_with_image",
                "false"
              ],
              [
                "test_issue_send_test",
                "false"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "false"
              ],
              [
                "test_before_the_personalization_filter",
                "false"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "false"
              ],
              [
                "test_permission",
                "false"
              ],
              [
                "test_create_newsletter",
                "false"
              ],
              [
                "test_create_issue",
                "false"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "false"
              ],
              [
                "test_send_test_personalization",
                "true"
              ],
              [
                "test_send_test_issue_with_image",
                "false"
              ],
              [
                "test_issue_send_test",
                "true"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "false"
              ],
              [
                "test_before_the_personalization_filter",
                "true"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "false"
              ],
              [
                "test_permission",
                "false"
              ],
              [
                "test_create_newsletter",
                "false"
              ],
              [
                "test_create_issue",
                "false"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "0"
                ],
                [
                  "test_send_test_personalization",
                  "0"
                ],
                [
                  "test_send_test_issue_with_image",
                  "0"
                ],
                [
                  "test_issue_send_test",
                  "0"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "0"
                ],
                [
                  "test_before_the_personalization_filter",
                  "0"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "0"
                ],
                [
                  "test_permission",
                  "0"
                ],
                [
                  "test_create_newsletter",
                  "0"
                ],
                [
                  "test_create_issue",
                  "0"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "0"
                ],
                [
                  "test_send_test_personalization",
                  "0"
                ],
                [
                  "test_send_test_issue_with_image",
                  "0"
                ],
                [
                  "test_issue_send_test",
                  "0"
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "0"
                ],
                [
                  "test_before_the_personalization_filter",
                  "0"
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "0"
                ],
                [
                  "test_permission",
                  "0"
                ],
                [
                  "test_create_newsletter",
                  "0"
                ],
                [
                  "test_create_issue",
                  "0"
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "false"
              ],
              [
                "test_send_test_personalization",
                "false"
              ],
              [
                "test_send_test_issue_with_image",
                "false"
              ],
              [
                "test_issue_send_test",
                "false"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "false"
              ],
              [
                "test_before_the_personalization_filter",
                "false"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "false"
              ],
              [
                "test_permission",
                "false"
              ],
              [
                "test_create_newsletter",
                "false"
              ],
              [
                "test_create_issue",
                "false"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "false"
              ],
              [
                "test_send_test_personalization",
                "false"
              ],
              [
                "test_send_test_issue_with_image",
                "false"
              ],
              [
                "test_issue_send_test",
                "false"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "false"
              ],
              [
                "test_before_the_personalization_filter",
                "false"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "false"
              ],
              [
                "test_permission",
                "false"
              ],
              [
                "test_create_newsletter",
                "false"
              ],
              [
                "test_create_issue",
                "false"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "4"
              ],
              [
                "test_send_test_personalization",
                "16"
              ],
              [
                "test_send_test_issue_with_image",
                "3"
              ],
              [
                "test_issue_send_test",
                "6"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "1"
              ],
              [
                "test_before_the_personalization_filter",
                "6"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "3"
              ],
              [
                "test_permission",
                "3"
              ],
              [
                "test_create_newsletter",
                "1"
              ],
              [
                "test_create_issue",
                "1"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "4"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": true,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                [
                  "msg",
                  "body",
                  "parsed_payloads"
                ]
              ],
              [
                "test_send_test_personalization",
                [
                  "msg4",
                  "msg3",
                  "view",
                  "msg2",
                  "msg1",
                  "parsed_payloads1",
                  "parsed_payloads2",
                  "msg5",
                  "parsed_payloads5",
                  "parsed_payloads3",
                  "parsed_payloads4",
                  "body"
                ]
              ],
              [
                "test_send_test_issue_with_image",
                [
                  "msg",
                  "body",
                  "parsed_payloads"
                ]
              ],
              [
                "test_issue_send_test",
                [
                  "msg",
                  "view",
                  "parsed_payloads"
                ]
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                [
                  "view",
                  "view_result",
                  "body"
                ]
              ],
              [
                "test_before_the_personalization_filter",
                [
                  "firstname",
                  "view",
                  "msg2",
                  "msg1",
                  "parsed_payloads1",
                  "edc",
                  "parsed_payloads2",
                  "body",
                  "lastname"
                ]
              ],
              [
                "test_send_test_issue_with_scale_image",
                [
                  "msg",
                  "image_scales_url",
                  "scales",
                  "scale_view",
                  "body",
                  "parsed_payloads"
                ]
              ],
              [
                "test_permission",
                [
                  "view",
                  "view_result",
                  "body"
                ]
              ],
              [
                "test_create_newsletter",
                []
              ],
              [
                "test_create_issue",
                []
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                [
                  "msg",
                  "path",
                  "stack",
                  "image_scales_url",
                  "scales",
                  "image_scale",
                  "scale_view",
                  "body",
                  "parsed_payloads"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                [
                  "self.image"
                ]
              ],
              [
                "test_send_test_personalization",
                [
                  "self.newsletter.sender_email",
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter.test_email",
                  "self.mailhost",
                  "self.newsletter",
                  "self.default_prologue",
                  "self.newsletter.sender_name"
                ]
              ],
              [
                "test_send_test_issue_with_image",
                [
                  "self.image"
                ]
              ],
              [
                "test_issue_send_test",
                [
                  "self.newsletter.sender_email",
                  "self.portal",
                  "self.newsletter.test_email",
                  "self.mailhost",
                  "self.newsletter",
                  "self.newsletter.sender_name"
                ]
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                [
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter",
                  "self.default_prologue"
                ]
              ],
              [
                "test_before_the_personalization_filter",
                [
                  "self.newsletter.sender_email",
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter.test_email",
                  "self.mailhost",
                  "self.newsletter",
                  "self.default_prologue",
                  "self.newsletter.sender_name"
                ]
              ],
              [
                "test_send_test_issue_with_scale_image",
                [
                  "self.portal",
                  "self.image"
                ]
              ],
              [
                "test_permission",
                [
                  "self.default_epilogue",
                  "self.portal",
                  "self.newsletter",
                  "self.default_prologue"
                ]
              ],
              [
                "test_create_newsletter",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_create_issue",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                [
                  "self.portal",
                  "self.image"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4471297934840692,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_before_the_personalization_filter",
                  "test_permission",
                  0.7338862213449489
                ],
                [
                  "test_mailonly_filter_in_issue_public_view",
                  "test_permission",
                  0.745903794514394
                ],
                [
                  "test_send_test_personalization",
                  "test_before_the_personalization_filter",
                  0.8542229414215055
                ],
                [
                  "test_issue_send_test",
                  "test_send_test_issue_with_resolveuid_image",
                  0.44956908939946577
                ],
                [
                  "test_send_test_issue_with_image",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.6141583478146952
                ],
                [
                  "test_create_newsletter",
                  "test_send_test_issue_with_scale_image",
                  0.14285714285714285
                ],
                [
                  "test_send_test_personalization",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.4950951404747643
                ],
                [
                  "test_send_test_personalization",
                  "test_permission",
                  0.567335270848675
                ],
                [
                  "test_create_newsletter",
                  "test_create_issue",
                  0.3779644730092272
                ],
                [
                  "test_create_issue",
                  "test_send_test_personalization",
                  0.4737201515788829
                ],
                [
                  "test_issue_send_test",
                  "test_send_test_issue_with_image",
                  0.44977134672981567
                ],
                [
                  "test_issue_send_test",
                  "test_send_test_personalization",
                  0.7457424450893122
                ],
                [
                  "test_send_test_issue_with_image",
                  "test_permission",
                  0.3017178137659937
                ],
                [
                  "test_before_the_personalization_filter",
                  "test_send_test_issue_with_scale_image",
                  0.40235995202965286
                ],
                [
                  "test_issue_send_test",
                  "test_permission",
                  0.6930659660669889
                ],
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.6222755746100778
                ],
                [
                  "test_create_newsletter",
                  "test_permission",
                  0.1285058810634358
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.8409287001388412
                ],
                [
                  "test_send_test_issue_with_image",
                  "test_send_test_issue_with_resolveuid_image",
                  0.8516650358758032
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "test_permission",
                  0.5145395834743836
                ],
                [
                  "test_create_issue",
                  "test_issue_send_test",
                  0.49074077185990694
                ],
                [
                  "test_send_test_issue_with_image",
                  "test_send_test_issue_with_scale_image",
                  0.6763246010507045
                ],
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "test_mailonly_filter_in_issue_public_view",
                  0.28811250108492364
                ],
                [
                  "test_create_issue",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.282346219657891
                ],
                [
                  "test_send_test_issue_with_resolveuid_scale_image",
                  "test_mailonly_filter_in_issue_public_view",
                  0.4374231070876754
                ],
                [
                  "test_issue_send_test",
                  "test_send_test_issue_with_scale_image",
                  0.4351706619396323
                ],
                [
                  "test_create_newsletter",
                  "test_send_test_issue_with_image",
                  0.2309401076758503
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "test_send_test_issue_with_resolveuid_image",
                  0.5888112426506381
                ],
                [
                  "test_send_test_issue_with_image",
                  "test_mailonly_filter_in_issue_public_view",
                  0.2930872159341287
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "test_mailonly_filter_in_issue_public_view",
                  0.33730362062911734
                ],
                [
                  "test_before_the_personalization_filter",
                  "test_mailonly_filter_in_issue_public_view",
                  0.6742093602202264
                ],
                [
                  "test_create_newsletter",
                  "test_send_test_issue_with_resolveuid_image",
                  0.25308553412176554
                ],
                [
                  "test_create_issue",
                  "test_permission",
                  0.518087014557098
                ],
                [
                  "test_issue_send_test",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.5073383818532367
                ],
                [
                  "test_before_the_personalization_filter",
                  "test_send_test_issue_with_resolveuid_image",
                  0.39981762133675125
                ],
                [
                  "test_create_issue",
                  "test_before_the_personalization_filter",
                  0.5249135836610616
                ],
                [
                  "test_create_newsletter",
                  "test_mailonly_filter_in_issue_public_view",
                  0.11805626722019105
                ],
                [
                  "test_create_newsletter",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.13944333775567927
                ],
                [
                  "test_create_issue",
                  "test_send_test_issue_with_image",
                  0.21821789023599236
                ],
                [
                  "test_send_test_issue_with_resolveuid_image",
                  "test_permission",
                  0.30664523572629
                ],
                [
                  "test_issue_send_test",
                  "test_before_the_personalization_filter",
                  0.8140864138862158
                ],
                [
                  "test_send_test_issue_with_scale_image",
                  "test_permission",
                  0.3671596601812452
                ],
                [
                  "test_create_issue",
                  "test_send_test_issue_with_scale_image",
                  0.1889822365046136
                ],
                [
                  "test_send_test_personalization",
                  "test_send_test_issue_with_scale_image",
                  0.3796862896891046
                ],
                [
                  "test_create_newsletter",
                  "test_before_the_personalization_filter",
                  0.103834826330233
                ],
                [
                  "test_send_test_personalization",
                  "test_send_test_issue_with_image",
                  0.47420170459116673
                ],
                [
                  "test_send_test_personalization",
                  "test_send_test_issue_with_resolveuid_image",
                  0.47628757593101495
                ],
                [
                  "test_create_newsletter",
                  "test_issue_send_test",
                  0.1498128508316767
                ],
                [
                  "test_create_newsletter",
                  "test_send_test_personalization",
                  0.11259370463467316
                ],
                [
                  "test_send_test_personalization",
                  "test_mailonly_filter_in_issue_public_view",
                  0.47957552874628767
                ],
                [
                  "test_create_issue",
                  "test_send_test_issue_with_resolveuid_image",
                  0.22547801696496664
                ],
                [
                  "test_create_issue",
                  "test_mailonly_filter_in_issue_public_view",
                  0.5242976291974633
                ],
                [
                  "test_before_the_personalization_filter",
                  "test_send_test_issue_with_resolveuid_scale_image",
                  0.538311315138518
                ],
                [
                  "test_issue_send_test",
                  "test_mailonly_filter_in_issue_public_view",
                  0.630813005578642
                ],
                [
                  "test_before_the_personalization_filter",
                  "test_send_test_issue_with_image",
                  0.40165873505122096
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_send_test_issue_with_resolveuid_image",
                "false"
              ],
              [
                "test_send_test_personalization",
                "false"
              ],
              [
                "test_send_test_issue_with_image",
                "false"
              ],
              [
                "test_issue_send_test",
                "false"
              ],
              [
                "test_mailonly_filter_in_issue_public_view",
                "true"
              ],
              [
                "test_before_the_personalization_filter",
                "false"
              ],
              [
                "test_send_test_issue_with_scale_image",
                "false"
              ],
              [
                "test_permission",
                "false"
              ],
              [
                "test_create_newsletter",
                "false"
              ],
              [
                "test_create_issue",
                "false"
              ],
              [
                "test_send_test_issue_with_resolveuid_scale_image",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_daily_issue.py",
    "testCases": [
      {
        "name": "DailyIssueContent",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_empty_issue",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_send_issue",
                  "[PyCallExpression: self.fail, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_create_new_issue",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_empty_issue",
                  "[]"
                ],
                [
                  "test_send_issue",
                  "[]"
                ],
                [
                  "test_create_new_issue",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_empty_issue",
                  "false"
                ],
                [
                  "test_send_issue",
                  "false"
                ],
                [
                  "test_create_new_issue",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_empty_issue",
                  "false"
                ],
                [
                  "test_send_issue",
                  "false"
                ],
                [
                  "test_create_new_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_empty_issue",
                  "false"
                ],
                [
                  "test_send_issue",
                  "false"
                ],
                [
                  "test_create_new_issue",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_empty_issue",
                  "false"
                ],
                [
                  "test_send_issue",
                  "false"
                ],
                [
                  "test_create_new_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                "false"
              ],
              [
                "test_send_issue",
                "false"
              ],
              [
                "test_create_new_issue",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_empty_issue",
                "false"
              ],
              [
                "test_send_issue",
                "true"
              ],
              [
                "test_create_new_issue",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                []
              ],
              [
                "test_send_issue",
                []
              ],
              [
                "test_create_new_issue",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                "false"
              ],
              [
                "test_send_issue",
                "false"
              ],
              [
                "test_create_new_issue",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_empty_issue",
                "false"
              ],
              [
                "test_send_issue",
                "true"
              ],
              [
                "test_create_new_issue",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_empty_issue",
                  "0"
                ],
                [
                  "test_send_issue",
                  "0"
                ],
                [
                  "test_create_new_issue",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_empty_issue",
                  "0"
                ],
                [
                  "test_send_issue",
                  "0"
                ],
                [
                  "test_create_new_issue",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                "false"
              ],
              [
                "test_send_issue",
                "false"
              ],
              [
                "test_create_new_issue",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                "false"
              ],
              [
                "test_send_issue",
                "false"
              ],
              [
                "test_create_new_issue",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                "2"
              ],
              [
                "test_send_issue",
                "1"
              ],
              [
                "test_create_new_issue",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                []
              ],
              [
                "test_send_issue",
                []
              ],
              [
                "test_create_new_issue",
                [
                  "issues"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                []
              ],
              [
                "test_send_issue",
                []
              ],
              [
                "test_create_new_issue",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3197896338886213,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_create_new_issue",
                  "test_send_issue",
                  0.473631171971627
                ],
                [
                  "test_empty_issue",
                  "test_send_issue",
                  0.24573659359149527
                ],
                [
                  "test_create_new_issue",
                  "test_empty_issue",
                  0.2400011361027416
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_empty_issue",
                "false"
              ],
              [
                "test_send_issue",
                "false"
              ],
              [
                "test_create_new_issue",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "DailyIssueMethodGET",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_an_alredy_sent_issue",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_an_alredy_sent_issue",
                  "[]"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "[]"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_an_alredy_sent_issue",
                  "false"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "false"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_an_alredy_sent_issue",
                  "false"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "false"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_an_alredy_sent_issue",
                  "false"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "false"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_an_alredy_sent_issue",
                  "false"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "false"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "false"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "false"
              ],
              [
                "test_get_with_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "false"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "false"
              ],
              [
                "test_get_with_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                []
              ],
              [
                "test_get_with_a_non_empty_issue",
                []
              ],
              [
                "test_get_with_an_empty_issue",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "false"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "false"
              ],
              [
                "test_get_with_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "true"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "true"
              ],
              [
                "test_get_with_an_empty_issue",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_an_alredy_sent_issue",
                  "0"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "0"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_an_alredy_sent_issue",
                  "0"
                ],
                [
                  "test_get_with_a_non_empty_issue",
                  "0"
                ],
                [
                  "test_get_with_an_empty_issue",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "false"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "false"
              ],
              [
                "test_get_with_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "false"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "false"
              ],
              [
                "test_get_with_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "1"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "1"
              ],
              [
                "test_get_with_an_empty_issue",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                []
              ],
              [
                "test_get_with_a_non_empty_issue",
                []
              ],
              [
                "test_get_with_an_empty_issue",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                []
              ],
              [
                "test_get_with_a_non_empty_issue",
                []
              ],
              [
                "test_get_with_an_empty_issue",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.718918915932872,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_get_with_a_non_empty_issue",
                  "test_get_an_alredy_sent_issue",
                  0.6900655593423543
                ],
                [
                  "test_get_with_an_empty_issue",
                  "test_get_an_alredy_sent_issue",
                  0.6888467201936644
                ],
                [
                  "test_get_with_an_empty_issue",
                  "test_get_with_a_non_empty_issue",
                  0.7778444682625973
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_get_an_alredy_sent_issue",
                "false"
              ],
              [
                "test_get_with_a_non_empty_issue",
                "false"
              ],
              [
                "test_get_with_an_empty_issue",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "DailyIssueMethodPOST",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_do_not_send_same_issue_twice",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_do_not_send_same_issue_twice",
                  "[]"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "[]"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_do_not_send_same_issue_twice",
                  "false"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_do_not_send_same_issue_twice",
                  "false"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_do_not_send_same_issue_twice",
                  "false"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_do_not_send_same_issue_twice",
                  "false"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "false"
              ],
              [
                "test_send_issue_and_check_http_status",
                "false"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "false"
              ],
              [
                "test_send_issue_and_check_http_status",
                "false"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                []
              ],
              [
                "test_send_issue_and_check_http_status",
                []
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "false"
              ],
              [
                "test_send_issue_and_check_http_status",
                "false"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "true"
              ],
              [
                "test_send_issue_and_check_http_status",
                "true"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_do_not_send_same_issue_twice",
                  "0"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "0"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_do_not_send_same_issue_twice",
                  "0"
                ],
                [
                  "test_send_issue_and_check_http_status",
                  "0"
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "false"
              ],
              [
                "test_send_issue_and_check_http_status",
                "false"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "false"
              ],
              [
                "test_send_issue_and_check_http_status",
                "false"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "3"
              ],
              [
                "test_send_issue_and_check_http_status",
                "2"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                []
              ],
              [
                "test_send_issue_and_check_http_status",
                []
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                [
                  "issues"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                []
              ],
              [
                "test_send_issue_and_check_http_status",
                []
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6860016269617984,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_send_issue_and_check_http_status",
                  "test_do_not_send_same_issue_twice",
                  0.6639137299238816
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "test_send_issue_and_check_http_status",
                  0.7134772412317412
                ],
                [
                  "test_do_not_create_or_send_an_empty_issue",
                  "test_do_not_send_same_issue_twice",
                  0.6806139097297726
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_do_not_send_same_issue_twice",
                "false"
              ],
              [
                "test_send_issue_and_check_http_status",
                "false"
              ],
              [
                "test_do_not_create_or_send_an_empty_issue",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TriggerDailyIssueMethodGET",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_send_issue_and_check_http_status",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_send_issue_and_check_http_status",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_send_issue_and_check_http_status",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_send_issue_and_check_http_status",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_send_issue_and_check_http_status",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                [
                  "self.view"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_and_check_http_status",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "DailyIssueMethodOtherThanGETorPOST",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_trying_another_method_on_view",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_trying_another_method_on_view",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_trying_another_method_on_view",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_trying_another_method_on_view",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_trying_another_method_on_view",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_trying_another_method_on_view",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_trying_another_method_on_view",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_trying_another_method_on_view",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_trying_another_method_on_view",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_placeholder.py",
    "testCases": [
      {
        "name": "PlaceholderIntegrationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_placeholder_calendar_week",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_placeholder_month_year",
                  "[PyCallExpression: self.assertNotEqual, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_placeholder_calendar_week",
                  "[]"
                ],
                [
                  "test_placeholder_month_year",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_placeholder_calendar_week",
                  "false"
                ],
                [
                  "test_placeholder_month_year",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_placeholder_calendar_week",
                  "false"
                ],
                [
                  "test_placeholder_month_year",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_placeholder_calendar_week",
                  "false"
                ],
                [
                  "test_placeholder_month_year",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_placeholder_calendar_week",
                  "false"
                ],
                [
                  "test_placeholder_month_year",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "false"
              ],
              [
                "test_placeholder_month_year",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "false"
              ],
              [
                "test_placeholder_month_year",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_placeholder_calendar_week",
                [
                  "self.portal",
                  "self.portal_url"
                ]
              ],
              [
                "test_placeholder_month_year",
                [
                  "self.portal",
                  "self.portal_url"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "false"
              ],
              [
                "test_placeholder_month_year",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "false"
              ],
              [
                "test_placeholder_month_year",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_placeholder_calendar_week",
                  "0"
                ],
                [
                  "test_placeholder_month_year",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_placeholder_calendar_week",
                  "0"
                ],
                [
                  "test_placeholder_month_year",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "false"
              ],
              [
                "test_placeholder_month_year",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "false"
              ],
              [
                "test_placeholder_month_year",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "2"
              ],
              [
                "test_placeholder_month_year",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                [
                  "issue_data",
                  "issue_data_fetcher",
                  "receiver",
                  "now",
                  "effective_date",
                  "html"
                ]
              ],
              [
                "test_placeholder_month_year",
                [
                  "issue_data",
                  "issue_data_fetcher",
                  "receiver",
                  "now",
                  "effective_date",
                  "html"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_placeholder_month_year",
                [
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9474021051329885,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_placeholder_month_year",
                  "test_placeholder_calendar_week",
                  0.9474021051329885
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_placeholder_calendar_week",
                "false"
              ],
              [
                "test_placeholder_month_year",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_registration.py",
    "testCases": [
      {
        "name": "RegistrationIntegrationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_register_subscriber",
                  "[PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_confirm_subscriber",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_register_subscriber",
                  "[]"
                ],
                [
                  "test_confirm_subscriber",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_register_subscriber",
                  "false"
                ],
                [
                  "test_confirm_subscriber",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_register_subscriber",
                  "false"
                ],
                [
                  "test_confirm_subscriber",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_register_subscriber",
                  "false"
                ],
                [
                  "test_confirm_subscriber",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_register_subscriber",
                  "false"
                ],
                [
                  "test_confirm_subscriber",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                "false"
              ],
              [
                "test_confirm_subscriber",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                "false"
              ],
              [
                "test_confirm_subscriber",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_register_subscriber",
                [
                  "self.newsletter.testEmail",
                  "self.portal.MailHost.smtp_host",
                  "self.newsletter",
                  "self.portal._original_MailHost",
                  "self.mail_settings.email_from_address",
                  "self.mail_settings",
                  "self.mail_settings.smtp_host",
                  "self.newsletter.senderName",
                  "self.newsletter.senderEmail",
                  "self.portal.MailHost",
                  "self.portal_url"
                ]
              ],
              [
                "test_confirm_subscriber",
                [
                  "self.newsletter.testEmail",
                  "self.portal.MailHost.smtp_host",
                  "self.mailhost",
                  "self.newsletter",
                  "self.portal._original_MailHost",
                  "self.mail_settings.email_from_address",
                  "self.mail_settings",
                  "self.mail_settings.smtp_host",
                  "self.newsletter.senderName",
                  "self.newsletter.senderEmail",
                  "self.portal.MailHost",
                  "self.portal_url"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                "false"
              ],
              [
                "test_confirm_subscriber",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_register_subscriber",
                "true"
              ],
              [
                "test_confirm_subscriber",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_register_subscriber",
                  "0"
                ],
                [
                  "test_confirm_subscriber",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_register_subscriber",
                  "0"
                ],
                [
                  "test_confirm_subscriber",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                "false"
              ],
              [
                "test_confirm_subscriber",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                "false"
              ],
              [
                "test_confirm_subscriber",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                "15"
              ],
              [
                "test_confirm_subscriber",
                "8"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                [
                  "msg",
                  "view",
                  "parsed_payloads",
                  "enl_reg_entry"
                ]
              ],
              [
                "test_confirm_subscriber",
                [
                  "view",
                  "subscriber",
                  "subscriber_uid",
                  "catalog",
                  "query",
                  "subscriber_obj",
                  "results",
                  "enl_reg_entry"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_register_subscriber",
                [
                  "self.enl_reg_tool",
                  "self.portal",
                  "self.mailhost"
                ]
              ],
              [
                "test_confirm_subscriber",
                [
                  "self.enl_reg_tool",
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6639178720195299,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_register_subscriber",
                  "test_confirm_subscriber",
                  0.6639178720195299
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_register_subscriber",
                "false"
              ],
              [
                "test_confirm_subscriber",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "RegistrationFunctionalTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_registration_portlet",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_registration_portlet",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_registration_portlet",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_registration_portlet",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_registration_portlet",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_registration_portlet",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_registration_portlet",
                [
                  "self.portal.MailHost.email_from_address",
                  "self.browser.handleErrors",
                  "self.newsletter.testEmail",
                  "self.portal.MailHost.smtp_host",
                  "self.mail_settings.email_from_address",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.portal",
                  "self.newsletter.senderName",
                  "self.newsletter.senderEmail",
                  "self.portal.MailHost",
                  "self.portal_url"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_registration_portlet",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_registration_portlet",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_registration_portlet",
                "0"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                [
                  "self.browser",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_registration_portlet",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_ct_newsletter.py",
    "testCases": [
      {
        "name": "NewsletterIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ct_newsletter_adding",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn]"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_ct_newsletter_fti",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_ct_newsletter_schema",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ct_newsletter_factory",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ct_newsletter_adding",
                  "[]"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "[]"
                ],
                [
                  "test_ct_newsletter_fti",
                  "[]"
                ],
                [
                  "test_ct_newsletter_schema",
                  "[]"
                ],
                [
                  "test_ct_newsletter_factory",
                  "[]"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ct_newsletter_adding",
                  "false"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ct_newsletter_adding",
                  "false"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ct_newsletter_adding",
                  "false"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ct_newsletter_adding",
                  "false"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "false"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_fti",
                "false"
              ],
              [
                "test_ct_newsletter_schema",
                "false"
              ],
              [
                "test_ct_newsletter_factory",
                "false"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "false"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_fti",
                "false"
              ],
              [
                "test_ct_newsletter_schema",
                "false"
              ],
              [
                "test_ct_newsletter_factory",
                "false"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_ct_newsletter_adding",
                []
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                []
              ],
              [
                "test_ct_newsletter_fti",
                [
                  "self.portal"
                ]
              ],
              [
                "test_ct_newsletter_schema",
                [
                  "self.portal"
                ]
              ],
              [
                "test_ct_newsletter_factory",
                [
                  "self.portal"
                ]
              ],
              [
                "test_ct_newsletter_globally_addable",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "false"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_fti",
                "false"
              ],
              [
                "test_ct_newsletter_schema",
                "false"
              ],
              [
                "test_ct_newsletter_factory",
                "false"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "false"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_fti",
                "false"
              ],
              [
                "test_ct_newsletter_schema",
                "false"
              ],
              [
                "test_ct_newsletter_factory",
                "false"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ct_newsletter_adding",
                  "0"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "0"
                ],
                [
                  "test_ct_newsletter_fti",
                  "0"
                ],
                [
                  "test_ct_newsletter_schema",
                  "0"
                ],
                [
                  "test_ct_newsletter_factory",
                  "0"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ct_newsletter_adding",
                  "0"
                ],
                [
                  "test_ct_newsletter_filter_content_type_true",
                  "0"
                ],
                [
                  "test_ct_newsletter_fti",
                  "0"
                ],
                [
                  "test_ct_newsletter_schema",
                  "0"
                ],
                [
                  "test_ct_newsletter_factory",
                  "0"
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "false"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_fti",
                "false"
              ],
              [
                "test_ct_newsletter_schema",
                "false"
              ],
              [
                "test_ct_newsletter_factory",
                "false"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "false"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_fti",
                "false"
              ],
              [
                "test_ct_newsletter_schema",
                "false"
              ],
              [
                "test_ct_newsletter_factory",
                "false"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "3"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "1"
              ],
              [
                "test_ct_newsletter_fti",
                "1"
              ],
              [
                "test_ct_newsletter_schema",
                "1"
              ],
              [
                "test_ct_newsletter_factory",
                "1"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                [
                  "parent",
                  "obj"
                ]
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                [
                  "parent",
                  "portal_types",
                  "parent_id",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_fti",
                [
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_schema",
                [
                  "schema",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_factory",
                [
                  "factory",
                  "obj",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_globally_addable",
                [
                  "fti"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_ct_newsletter_adding",
                [
                  "self.portal"
                ]
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                [
                  "self.portal"
                ]
              ],
              [
                "test_ct_newsletter_fti",
                []
              ],
              [
                "test_ct_newsletter_schema",
                []
              ],
              [
                "test_ct_newsletter_factory",
                []
              ],
              [
                "test_ct_newsletter_globally_addable",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5270575483747245,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ct_newsletter_schema",
                  "test_ct_newsletter_factory",
                  0.6672006408545298
                ],
                [
                  "test_ct_newsletter_factory",
                  "test_ct_newsletter_globally_addable",
                  0.531609533071195
                ],
                [
                  "test_ct_newsletter_factory",
                  "test_ct_newsletter_filter_content_type_true",
                  0.49603025115883975
                ],
                [
                  "test_ct_newsletter_schema",
                  "test_ct_newsletter_fti",
                  0.769800358919501
                ],
                [
                  "test_ct_newsletter_adding",
                  "test_ct_newsletter_globally_addable",
                  0.6008874335078326
                ],
                [
                  "test_ct_newsletter_fti",
                  "test_ct_newsletter_factory",
                  0.6587064830174596
                ],
                [
                  "test_ct_newsletter_schema",
                  "test_ct_newsletter_filter_content_type_true",
                  0.44651645774875803
                ],
                [
                  "test_ct_newsletter_fti",
                  "test_ct_newsletter_globally_addable",
                  0.5529073355808642
                ],
                [
                  "test_ct_newsletter_factory",
                  "test_ct_newsletter_adding",
                  0.5290846772682699
                ],
                [
                  "test_ct_newsletter_globally_addable",
                  "test_ct_newsletter_filter_content_type_true",
                  0.5844038280279606
                ],
                [
                  "test_ct_newsletter_fti",
                  "test_ct_newsletter_adding",
                  0.28181074009533896
                ],
                [
                  "test_ct_newsletter_schema",
                  "test_ct_newsletter_adding",
                  0.28368816544899667
                ],
                [
                  "test_ct_newsletter_schema",
                  "test_ct_newsletter_globally_addable",
                  0.4823787007632908
                ],
                [
                  "test_ct_newsletter_adding",
                  "test_ct_newsletter_filter_content_type_true",
                  0.5616387878613408
                ],
                [
                  "test_ct_newsletter_fti",
                  "test_ct_newsletter_filter_content_type_true",
                  0.45919983229669015
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_adding",
                "false"
              ],
              [
                "test_ct_newsletter_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_fti",
                "false"
              ],
              [
                "test_ct_newsletter_schema",
                "false"
              ],
              [
                "test_ct_newsletter_factory",
                "false"
              ],
              [
                "test_ct_newsletter_globally_addable",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_issuedatafetcher.py",
    "testCases": [
      {
        "name": "IssuedatafetcherIntegrationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_fetching_issue_data",
                  "[PyCallExpression: self.assertIn]"
                ],
                [
                  "test_before_personalization_filter",
                  "[PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_fetching_issue_data",
                  "[]"
                ],
                [
                  "test_before_personalization_filter",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_fetching_issue_data",
                  "false"
                ],
                [
                  "test_before_personalization_filter",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_fetching_issue_data",
                  "false"
                ],
                [
                  "test_before_personalization_filter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_fetching_issue_data",
                  "false"
                ],
                [
                  "test_before_personalization_filter",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_fetching_issue_data",
                  "false"
                ],
                [
                  "test_before_personalization_filter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                "false"
              ],
              [
                "test_before_personalization_filter",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_fetching_issue_data",
                "false"
              ],
              [
                "test_before_personalization_filter",
                "true"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_fetching_issue_data",
                [
                  "self.mail_settings.smtp_host",
                  "self.portal",
                  "self.portal.MailHost.smtp_host",
                  "self.mailhost",
                  "self.portal._original_MailHost",
                  "self.portal.MailHost",
                  "self.mail_settings.email_from_address",
                  "self.portal_url",
                  "self.mail_settings"
                ]
              ],
              [
                "test_before_personalization_filter",
                [
                  "self.mail_settings.smtp_host",
                  "self.portal",
                  "self.portal.MailHost.smtp_host",
                  "self.mailhost",
                  "self.portal._original_MailHost",
                  "self.portal.MailHost",
                  "self.mail_settings.email_from_address",
                  "self.portal_url",
                  "self.mail_settings"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                "false"
              ],
              [
                "test_before_personalization_filter",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                "false"
              ],
              [
                "test_before_personalization_filter",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_fetching_issue_data",
                  "0"
                ],
                [
                  "test_before_personalization_filter",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_fetching_issue_data",
                  "0"
                ],
                [
                  "test_before_personalization_filter",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                "false"
              ],
              [
                "test_before_personalization_filter",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                "false"
              ],
              [
                "test_before_personalization_filter",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                "1"
              ],
              [
                "test_before_personalization_filter",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                [
                  "issue_data",
                  "issue_data_fetcher",
                  "receiver",
                  "html"
                ]
              ],
              [
                "test_before_personalization_filter",
                [
                  "issue_data",
                  "issue_data_fetcher",
                  "receiver",
                  "edc",
                  "html"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_before_personalization_filter",
                [
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8656320921262791,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_before_personalization_filter",
                  "test_fetching_issue_data",
                  0.8656320921262791
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_fetching_issue_data",
                "false"
              ],
              [
                "test_before_personalization_filter",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_unsubscribe_form.py",
    "testCases": [
      {
        "name": "UnsubscribeFormIntegrationTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_submit_unsubscribe_form",
                  "[PyCallExpression: self.assertSequenceEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_submit_unsubscribe_form",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_submit_unsubscribe_form",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_submit_unsubscribe_form",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_submit_unsubscribe_form",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_submit_unsubscribe_form",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                [
                  "self.newsletter.testEmail",
                  "self.portal.MailHost.smtp_host",
                  "self.mail_settings.email_from_address",
                  "self.portal._original_MailHost",
                  "self.mail_settings",
                  "self.mail_settings.smtp_host",
                  "self.newsletter.senderName",
                  "self.newsletter.senderEmail",
                  "self.portal.MailHost",
                  "self.portal_url"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_submit_unsubscribe_form",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_submit_unsubscribe_form",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "5"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                [
                  "msg",
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                [
                  "self.portal",
                  "self.mailhost",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_submit_unsubscribe_form",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "UnsubscribeFormFunctionalTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unsubscribe_view",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_render_unsubscribe_form",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unsubscribe_view",
                  "[]"
                ],
                [
                  "test_render_unsubscribe_form",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unsubscribe_view",
                  "false"
                ],
                [
                  "test_render_unsubscribe_form",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unsubscribe_view",
                  "false"
                ],
                [
                  "test_render_unsubscribe_form",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unsubscribe_view",
                  "false"
                ],
                [
                  "test_render_unsubscribe_form",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unsubscribe_view",
                  "false"
                ],
                [
                  "test_render_unsubscribe_form",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                "false"
              ],
              [
                "test_render_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                "false"
              ],
              [
                "test_render_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_unsubscribe_view",
                [
                  "self.unsubscribe_form_url",
                  "self.browser.handleErrors",
                  "self.newsletter.testEmail",
                  "self.newsletter.senderName",
                  "self.newsletter.senderEmail",
                  "self.portal_url"
                ]
              ],
              [
                "test_render_unsubscribe_form",
                [
                  "self.portal",
                  "self.browser.handleErrors",
                  "self.newsletter.testEmail",
                  "self.unsubscribe_view_url",
                  "self.dummy_page",
                  "self.newsletter.senderName",
                  "self.newsletter",
                  "self.newsletter.senderEmail",
                  "self.portal_url"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                "false"
              ],
              [
                "test_render_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                "false"
              ],
              [
                "test_render_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unsubscribe_view",
                  "0"
                ],
                [
                  "test_render_unsubscribe_form",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unsubscribe_view",
                  "0"
                ],
                [
                  "test_render_unsubscribe_form",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                "false"
              ],
              [
                "test_render_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                "false"
              ],
              [
                "test_render_unsubscribe_form",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                "3"
              ],
              [
                "test_render_unsubscribe_form",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                [
                  "subscriber1_id"
                ]
              ],
              [
                "test_render_unsubscribe_form",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_view",
                [
                  "self.portal",
                  "self.unsubscribe_view_url",
                  "self.dummy_page",
                  "self.browser",
                  "self.newsletter"
                ]
              ],
              [
                "test_render_unsubscribe_form",
                [
                  "self.unsubscribe_form_url",
                  "self.browser"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.22369925456507317,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_render_unsubscribe_form",
                  "test_unsubscribe_view",
                  0.22369925456507317
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_unsubscribe_view",
                "true"
              ],
              [
                "test_render_unsubscribe_form",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_unsubscribe.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "[]"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "false"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "false"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "false"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "false"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "false"
              ],
              [
                "test_unsubscribe_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "false"
              ],
              [
                "test_unsubscribe_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_unsubscribe_is_registered",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "false"
              ],
              [
                "test_unsubscribe_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "false"
              ],
              [
                "test_unsubscribe_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "0"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unsubscribe_not_matching_interface",
                  "0"
                ],
                [
                  "test_unsubscribe_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "false"
              ],
              [
                "test_unsubscribe_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "false"
              ],
              [
                "test_unsubscribe_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "1"
              ],
              [
                "test_unsubscribe_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                []
              ],
              [
                "test_unsubscribe_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_unsubscribe_is_registered",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.24708310555370042,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_unsubscribe_is_registered",
                  "test_unsubscribe_not_matching_interface",
                  0.24708310555370042
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_unsubscribe_not_matching_interface",
                "false"
              ],
              [
                "test_unsubscribe_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_vocab_plone_users.py",
    "testCases": [
      {
        "name": "PloneUsersIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_vocab_plone_users",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_vocab_plone_users",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_vocab_plone_users",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_vocab_plone_users",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_vocab_plone_users",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_vocab_plone_users",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_vocab_plone_users",
                [
                  "self.john"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_vocab_plone_users",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_vocab_plone_users",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                [
                  "factory",
                  "vocabulary",
                  "vocab_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                [
                  "self.portal",
                  "self.jane"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_users",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_vocab_salutations.py",
    "testCases": [
      {
        "name": "SalutationsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_vocab_salutations",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_vocab_salutations",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_vocab_salutations",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_vocab_salutations",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_vocab_salutations",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_vocab_salutations",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_vocab_salutations",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_vocab_salutations",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                [
                  "factory",
                  "vocabulary",
                  "vocab_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_salutations",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_copy_as_draft.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "[]"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_draft_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_draft_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ],
              [
                "test_copy_as_draft_is_registered",
                [
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_draft_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_draft_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "0"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_copy_as_draft_not_matching_interface",
                  "0"
                ],
                [
                  "test_copy_as_draft_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_draft_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_draft_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "1"
              ],
              [
                "test_copy_as_draft_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                []
              ],
              [
                "test_copy_as_draft_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_copy_as_draft_is_registered",
                [
                  "self.issue",
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4977957276938644,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_copy_as_draft_is_registered",
                  "test_copy_as_draft_not_matching_interface",
                  0.4977957276938644
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_copy_as_draft_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_draft_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_vocab_plone_groups.py",
    "testCases": [
      {
        "name": "PloneGroupsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_vocab_plone_groups",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_vocab_plone_groups",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_vocab_plone_groups",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_vocab_plone_groups",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_vocab_plone_groups",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_vocab_plone_groups",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_vocab_plone_groups",
                [
                  "self.staff"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_vocab_plone_groups",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_vocab_plone_groups",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                [
                  "factory",
                  "vocabulary",
                  "vocab_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                [
                  "self.vip",
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_plone_groups",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_adapter_send_status.py",
    "testCases": [
      {
        "name": "SendStatusTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_add_records",
                  "[PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_reset_statistics_making_master",
                  "[PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_get_keys",
                  "[PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals]"
                ],
                [
                  "test_get_records",
                  "[PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_add_records",
                  "[]"
                ],
                [
                  "test_reset_statistics_making_master",
                  "[]"
                ],
                [
                  "test_get_keys",
                  "[]"
                ],
                [
                  "test_get_records",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_add_records",
                  "false"
                ],
                [
                  "test_reset_statistics_making_master",
                  "false"
                ],
                [
                  "test_get_keys",
                  "false"
                ],
                [
                  "test_get_records",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_add_records",
                  "false"
                ],
                [
                  "test_reset_statistics_making_master",
                  "false"
                ],
                [
                  "test_get_keys",
                  "false"
                ],
                [
                  "test_get_records",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_add_records",
                  "true"
                ],
                [
                  "test_reset_statistics_making_master",
                  "false"
                ],
                [
                  "test_get_keys",
                  "false"
                ],
                [
                  "test_get_records",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_add_records",
                  "false"
                ],
                [
                  "test_reset_statistics_making_master",
                  "false"
                ],
                [
                  "test_get_keys",
                  "false"
                ],
                [
                  "test_get_records",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                "false"
              ],
              [
                "test_reset_statistics_making_master",
                "false"
              ],
              [
                "test_get_keys",
                "false"
              ],
              [
                "test_get_records",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                "false"
              ],
              [
                "test_reset_statistics_making_master",
                "false"
              ],
              [
                "test_get_keys",
                "false"
              ],
              [
                "test_get_records",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_add_records",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_reset_statistics_making_master",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_get_keys",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_get_records",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                "false"
              ],
              [
                "test_reset_statistics_making_master",
                "false"
              ],
              [
                "test_get_keys",
                "false"
              ],
              [
                "test_get_records",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_add_records",
                "true"
              ],
              [
                "test_reset_statistics_making_master",
                "true"
              ],
              [
                "test_get_keys",
                "true"
              ],
              [
                "test_get_records",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_add_records",
                  "0"
                ],
                [
                  "test_reset_statistics_making_master",
                  "0"
                ],
                [
                  "test_get_keys",
                  "0"
                ],
                [
                  "test_get_records",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_add_records",
                  "0"
                ],
                [
                  "test_reset_statistics_making_master",
                  "0"
                ],
                [
                  "test_get_keys",
                  "0"
                ],
                [
                  "test_get_records",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                "false"
              ],
              [
                "test_reset_statistics_making_master",
                "false"
              ],
              [
                "test_get_keys",
                "false"
              ],
              [
                "test_get_records",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                "false"
              ],
              [
                "test_reset_statistics_making_master",
                "false"
              ],
              [
                "test_get_keys",
                "false"
              ],
              [
                "test_get_records",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                "3"
              ],
              [
                "test_reset_statistics_making_master",
                "2"
              ],
              [
                "test_get_keys",
                "3"
              ],
              [
                "test_get_records",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                [
                  "status_adapter"
                ]
              ],
              [
                "test_reset_statistics_making_master",
                [
                  "request",
                  "status_adapter"
                ]
              ],
              [
                "test_get_keys",
                [
                  "status_adapter"
                ]
              ],
              [
                "test_get_records",
                [
                  "status_adapter"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                [
                  "self.issue"
                ]
              ],
              [
                "test_reset_statistics_making_master",
                [
                  "self.issue"
                ]
              ],
              [
                "test_get_keys",
                [
                  "self.issue"
                ]
              ],
              [
                "test_get_records",
                [
                  "self.issue"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.7405287006856108,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_add_records",
                  "test_reset_statistics_making_master",
                  0.6407116072277477
                ],
                [
                  "test_get_records",
                  "test_get_keys",
                  0.9124999999999999
                ],
                [
                  "test_get_records",
                  "test_reset_statistics_making_master",
                  0.6609222207023923
                ],
                [
                  "test_get_keys",
                  "test_reset_statistics_making_master",
                  0.6822422923379533
                ],
                [
                  "test_add_records",
                  "test_get_records",
                  0.7689786245403704
                ],
                [
                  "test_add_records",
                  "test_get_keys",
                  0.7778174593052022
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_add_records",
                "false"
              ],
              [
                "test_reset_statistics_making_master",
                "false"
              ],
              [
                "test_get_keys",
                "false"
              ],
              [
                "test_get_records",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 4
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_ct_newsletter_issue.py",
    "testCases": [
      {
        "name": "NewsletterIssueIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ct_newsletter_issue_factory",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ct_newsletter_issue_factory",
                  "[]"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "[]"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "[]"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "[]"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "[]"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ct_newsletter_issue_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ct_newsletter_issue_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ct_newsletter_issue_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ct_newsletter_issue_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "false"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "false"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "false"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "false"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "false"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "false"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                [
                  "self.portal",
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_issue_fti",
                [
                  "self.portal",
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_issue_schema",
                [
                  "self.portal",
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                []
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                [
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_issue_adding",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "false"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "false"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "false"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "false"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "false"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "false"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ct_newsletter_issue_factory",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ct_newsletter_issue_factory",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_filter_content_type_true",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "0"
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "false"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "false"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "false"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "false"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "false"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "false"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "1"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "1"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "1"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "1"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "1"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                [
                  "factory",
                  "obj",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_issue_fti",
                [
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_issue_schema",
                [
                  "schema",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                [
                  "portal_types",
                  "parent_id",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                [
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_issue_adding",
                [
                  "obj"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                []
              ],
              [
                "test_ct_newsletter_issue_fti",
                []
              ],
              [
                "test_ct_newsletter_issue_schema",
                []
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                [
                  "self.portal",
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                [
                  "self.portal"
                ]
              ],
              [
                "test_ct_newsletter_issue_adding",
                [
                  "self.portal",
                  "self.parent"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6212136242415482,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ct_newsletter_issue_schema",
                  "test_ct_newsletter_issue_factory",
                  0.7609122407626044
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "test_ct_newsletter_issue_adding",
                  0.47483573524849143
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "test_ct_newsletter_issue_filter_content_type_true",
                  0.561072814607794
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "test_ct_newsletter_issue_globally_not_addable",
                  0.664784309968492
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "test_ct_newsletter_issue_fti",
                  0.8251204038343015
                ],
                [
                  "test_ct_newsletter_issue_factory",
                  "test_ct_newsletter_issue_adding",
                  0.6197765075688065
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "test_ct_newsletter_issue_adding",
                  0.457891045625714
                ],
                [
                  "test_ct_newsletter_issue_globally_not_addable",
                  "test_ct_newsletter_issue_filter_content_type_true",
                  0.6740722093592932
                ],
                [
                  "test_ct_newsletter_issue_adding",
                  "test_ct_newsletter_issue_globally_not_addable",
                  0.5994858686839314
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "test_ct_newsletter_issue_globally_not_addable",
                  0.587929801017612
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "test_ct_newsletter_issue_factory",
                  0.7510332699033224
                ],
                [
                  "test_ct_newsletter_issue_factory",
                  "test_ct_newsletter_issue_globally_not_addable",
                  0.5973336686786449
                ],
                [
                  "test_ct_newsletter_issue_factory",
                  "test_ct_newsletter_issue_filter_content_type_true",
                  0.5939028880120867
                ],
                [
                  "test_ct_newsletter_issue_schema",
                  "test_ct_newsletter_issue_filter_content_type_true",
                  0.5577656043320085
                ],
                [
                  "test_ct_newsletter_issue_fti",
                  "test_ct_newsletter_issue_filter_content_type_true",
                  0.5922879960201209
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_issue_factory",
                "false"
              ],
              [
                "test_ct_newsletter_issue_fti",
                "false"
              ],
              [
                "test_ct_newsletter_issue_schema",
                "false"
              ],
              [
                "test_ct_newsletter_issue_filter_content_type_true",
                "false"
              ],
              [
                "test_ct_newsletter_issue_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_issue_adding",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_copy_as_master.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "[]"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "false"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_master_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_master_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ],
              [
                "test_copy_as_master_is_registered",
                [
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_master_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_master_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "0"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_copy_as_master_not_matching_interface",
                  "0"
                ],
                [
                  "test_copy_as_master_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_master_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_master_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "1"
              ],
              [
                "test_copy_as_master_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                []
              ],
              [
                "test_copy_as_master_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_copy_as_master_is_registered",
                [
                  "self.issue",
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4977957276938644,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_copy_as_master_is_registered",
                  "test_copy_as_master_not_matching_interface",
                  0.4977957276938644
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_copy_as_master_not_matching_interface",
                "false"
              ],
              [
                "test_copy_as_master_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_unsubscribe_form.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_unsubscribe_form_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_unsubscribe_form_is_registered",
                  "[]"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_unsubscribe_form_is_registered",
                  "false"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_unsubscribe_form_is_registered",
                  "false"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_unsubscribe_form_is_registered",
                  "false"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_unsubscribe_form_is_registered",
                  "false"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "false"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "false"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                []
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                [
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "false"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "false"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_unsubscribe_form_is_registered",
                  "0"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_unsubscribe_form_is_registered",
                  "0"
                ],
                [
                  "test_unsubscribe_form_not_matching_interface",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "false"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "false"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "1"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                [
                  "view"
                ]
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3412618163949676,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_unsubscribe_form_is_registered",
                  "test_unsubscribe_form_not_matching_interface",
                  0.3412618163949676
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_unsubscribe_form_is_registered",
                "true"
              ],
              [
                "test_unsubscribe_form_not_matching_interface",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_aggregate_content.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "[]"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "false"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "false"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "false"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "false"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "false"
              ],
              [
                "test_aggregate_content_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "false"
              ],
              [
                "test_aggregate_content_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ],
              [
                "test_aggregate_content_is_registered",
                [
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "false"
              ],
              [
                "test_aggregate_content_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "false"
              ],
              [
                "test_aggregate_content_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "0"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_aggregate_content_not_matching_interface",
                  "0"
                ],
                [
                  "test_aggregate_content_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "false"
              ],
              [
                "test_aggregate_content_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "false"
              ],
              [
                "test_aggregate_content_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "1"
              ],
              [
                "test_aggregate_content_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                []
              ],
              [
                "test_aggregate_content_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_aggregate_content_is_registered",
                [
                  "self.issue",
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4780914437337575,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_aggregate_content_is_registered",
                  "test_aggregate_content_not_matching_interface",
                  0.4780914437337575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_aggregate_content_not_matching_interface",
                "false"
              ],
              [
                "test_aggregate_content_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_newsletter_drafts.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "[]"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ],
              [
                "test_newsletter_drafts_is_registered",
                [
                  "self.issue"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "0"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_newsletter_drafts_not_matching_interface",
                  "0"
                ],
                [
                  "test_newsletter_drafts_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "1"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                []
              ],
              [
                "test_newsletter_drafts_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_newsletter_drafts_is_registered",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4780914437337575,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_newsletter_drafts_is_registered",
                  "test_newsletter_drafts_not_matching_interface",
                  0.4780914437337575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_drafts_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_drafts_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_vocab_output_templates.py",
    "testCases": [
      {
        "name": "OutputTemplatesIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_vocab_output_templates",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_vocab_output_templates",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_vocab_output_templates",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_vocab_output_templates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_vocab_output_templates",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_vocab_output_templates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_vocab_output_templates",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_vocab_output_templates",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                [
                  "factory",
                  "vocabulary",
                  "vocab_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_output_templates",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_newsletter_masters.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_newsletter_masters_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_newsletter_masters_is_registered",
                  "[]"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_newsletter_masters_is_registered",
                  "false"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_newsletter_masters_is_registered",
                  "false"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_newsletter_masters_is_registered",
                  "false"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_newsletter_masters_is_registered",
                  "false"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "false"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "false"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                [
                  "self.issue"
                ]
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "false"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "false"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_newsletter_masters_is_registered",
                  "0"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_newsletter_masters_is_registered",
                  "0"
                ],
                [
                  "test_newsletter_masters_not_matching_interface",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "false"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "false"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "1"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                [
                  "view"
                ]
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4780914437337575,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_newsletter_masters_is_registered",
                  "test_newsletter_masters_not_matching_interface",
                  0.4780914437337575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_masters_is_registered",
                "true"
              ],
              [
                "test_newsletter_masters_not_matching_interface",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_subscribers_upload.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "[]"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "[]"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "false"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "true"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "false"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "false"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "false"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "false"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "false"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "false"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "false"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "false"
              ],
              [
                "test_subscribers_upload_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "false"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "false"
              ],
              [
                "test_subscribers_upload_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_subscribers_upload_create_subscribers",
                []
              ],
              [
                "test_subscribers_upload_is_registered",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "false"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "false"
              ],
              [
                "test_subscribers_upload_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "false"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "false"
              ],
              [
                "test_subscribers_upload_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "0"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "0"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_subscribers_upload_not_matching_interface",
                  "0"
                ],
                [
                  "test_subscribers_upload_create_subscribers",
                  "0"
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "false"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "false"
              ],
              [
                "test_subscribers_upload_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "false"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "false"
              ],
              [
                "test_subscribers_upload_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "1"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "1"
              ],
              [
                "test_subscribers_upload_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                []
              ],
              [
                "test_subscribers_upload_create_subscribers",
                [
                  "template",
                  "view",
                  "filename",
                  "file"
                ]
              ],
              [
                "test_subscribers_upload_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_subscribers_upload_create_subscribers",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_subscribers_upload_is_registered",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4353647214979039,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_subscribers_upload_is_registered",
                  "test_subscribers_upload_not_matching_interface",
                  0.4780914437337575
                ],
                [
                  "test_subscribers_upload_not_matching_interface",
                  "test_subscribers_upload_create_subscribers",
                  0.21536524612697402
                ],
                [
                  "test_subscribers_upload_is_registered",
                  "test_subscribers_upload_create_subscribers",
                  0.6126374746329801
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_subscribers_upload_not_matching_interface",
                "false"
              ],
              [
                "test_subscribers_upload_create_subscribers",
                "true"
              ],
              [
                "test_subscribers_upload_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_ct_newsletter_subscriber.py",
    "testCases": [
      {
        "name": "NewsletterSubscriberIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "[PyCallExpression: self.assertFalse]"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertIn, PyCallExpression: self.assertNotIn]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "[]"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "[]"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "[]"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "[]"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "false"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                [
                  "self.portal",
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                [
                  "self.portal",
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                [
                  "self.portal",
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                [
                  "self.parent"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_ct_newsletter_subscriber_schema",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  "0"
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "1"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "1"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "1"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "1"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                [
                  "schema",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                [
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                [
                  "factory",
                  "obj",
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                [
                  "fti"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                [
                  "obj"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                []
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                []
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                []
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                [
                  "self.portal"
                ]
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                [
                  "self.portal",
                  "self.parent"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.6339102851291921,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_ct_newsletter_subscriber_factory",
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  0.5973336686786449
                ],
                [
                  "test_ct_newsletter_subscriber_schema",
                  "test_ct_newsletter_subscriber_adding",
                  0.457891045625714
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "test_ct_newsletter_subscriber_adding",
                  0.47483573524849143
                ],
                [
                  "test_ct_newsletter_subscriber_schema",
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  0.587929801017612
                ],
                [
                  "test_ct_newsletter_subscriber_schema",
                  "test_ct_newsletter_subscriber_factory",
                  0.7609122407626044
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "test_ct_newsletter_subscriber_factory",
                  0.7510332699033224
                ],
                [
                  "test_ct_newsletter_subscriber_fti",
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  0.664784309968492
                ],
                [
                  "test_ct_newsletter_subscriber_factory",
                  "test_ct_newsletter_subscriber_adding",
                  0.6197765075688065
                ],
                [
                  "test_ct_newsletter_subscriber_schema",
                  "test_ct_newsletter_subscriber_fti",
                  0.8251204038343015
                ],
                [
                  "test_ct_newsletter_subscriber_adding",
                  "test_ct_newsletter_subscriber_globally_not_addable",
                  0.5994858686839314
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_ct_newsletter_subscriber_schema",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_fti",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_factory",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_globally_not_addable",
                "false"
              ],
              [
                "test_ct_newsletter_subscriber_adding",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_subscribers_download.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_subscribers_download_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_subscribers_download_call",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_subscribers_download_is_registered",
                  "[]"
                ],
                [
                  "test_subscribers_download_call",
                  "[]"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_subscribers_download_is_registered",
                  "false"
                ],
                [
                  "test_subscribers_download_call",
                  "false"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_subscribers_download_is_registered",
                  "false"
                ],
                [
                  "test_subscribers_download_call",
                  "false"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_subscribers_download_is_registered",
                  "false"
                ],
                [
                  "test_subscribers_download_call",
                  "false"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_subscribers_download_is_registered",
                  "false"
                ],
                [
                  "test_subscribers_download_call",
                  "false"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "false"
              ],
              [
                "test_subscribers_download_call",
                "false"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "false"
              ],
              [
                "test_subscribers_download_call",
                "false"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                [
                  "self.newsletter.subscriber"
                ]
              ],
              [
                "test_subscribers_download_call",
                [
                  "self.newsletter.subscriber"
                ]
              ],
              [
                "test_subscribers_download_not_matching_interface",
                [
                  "self.newsletter.subscriber",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "false"
              ],
              [
                "test_subscribers_download_call",
                "false"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "false"
              ],
              [
                "test_subscribers_download_call",
                "false"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_subscribers_download_is_registered",
                  "0"
                ],
                [
                  "test_subscribers_download_call",
                  "0"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_subscribers_download_is_registered",
                  "0"
                ],
                [
                  "test_subscribers_download_call",
                  "0"
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "false"
              ],
              [
                "test_subscribers_download_call",
                "false"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "false"
              ],
              [
                "test_subscribers_download_call",
                "false"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "1"
              ],
              [
                "test_subscribers_download_call",
                "2"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                [
                  "view"
                ]
              ],
              [
                "test_subscribers_download_call",
                [
                  "result",
                  "view"
                ]
              ],
              [
                "test_subscribers_download_not_matching_interface",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_subscribers_download_call",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_subscribers_download_not_matching_interface",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4931454265214881,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_subscribers_download_is_registered",
                  "test_subscribers_download_call",
                  0.5517268488330711
                ],
                [
                  "test_subscribers_download_not_matching_interface",
                  "test_subscribers_download_call",
                  0.4496179869976355
                ],
                [
                  "test_subscribers_download_is_registered",
                  "test_subscribers_download_not_matching_interface",
                  0.4780914437337575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_subscribers_download_is_registered",
                "true"
              ],
              [
                "test_subscribers_download_call",
                "false"
              ],
              [
                "test_subscribers_download_not_matching_interface",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_newsletter_issue_send.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_send_issue_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_send_issue_is_registered",
                  "[]"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_send_issue_is_registered",
                  "false"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_send_issue_is_registered",
                  "false"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_send_issue_is_registered",
                  "false"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_send_issue_is_registered",
                  "false"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                "false"
              ],
              [
                "test_send_issue_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                "false"
              ],
              [
                "test_send_issue_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_send_issue_is_registered",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_send_issue_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                "false"
              ],
              [
                "test_send_issue_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                "false"
              ],
              [
                "test_send_issue_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_send_issue_is_registered",
                  "0"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_send_issue_is_registered",
                  "0"
                ],
                [
                  "test_send_issue_not_matching_interface",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                "false"
              ],
              [
                "test_send_issue_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                "false"
              ],
              [
                "test_send_issue_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                "1"
              ],
              [
                "test_send_issue_not_matching_interface",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                [
                  "view"
                ]
              ],
              [
                "test_send_issue_not_matching_interface",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_send_issue_is_registered",
                [
                  "self.issue",
                  "self.portal"
                ]
              ],
              [
                "test_send_issue_not_matching_interface",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4780914437337575,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_send_issue_is_registered",
                  "test_send_issue_not_matching_interface",
                  0.4780914437337575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_send_issue_is_registered",
                "true"
              ],
              [
                "test_send_issue_not_matching_interface",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_viewlet_newsletter_actions.py",
    "testCases": [
      {
        "name": "ViewletIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIn]"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual, PyCallExpression: self.assertNotIn]"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "[PyCallExpression: self.assertIsNotNone, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "[]"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "[]"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": true,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "false"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "false"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "true"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "true"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "true"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "false"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "false"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "false"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "false"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "false"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "false"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "false"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "false"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                [
                  "self.issue",
                  "self.app"
                ]
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                [
                  "self.issue",
                  "self.app",
                  "self.portal"
                ]
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                [
                  "self.app",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "false"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "false"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "true"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "true"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "0"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "0"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "0"
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "0"
                ],
                [
                  "test_newsletter_actions_is_not_available_on_issue",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "false"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "false"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "false"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "false"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "3"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "3"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                [
                  "manager_name",
                  "view",
                  "manager",
                  "my_viewlets"
                ]
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                [
                  "manager_name",
                  "view",
                  "manager",
                  "my_viewlets"
                ]
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                [
                  "manager_name",
                  "view",
                  "manager",
                  "my_viewlets"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                [
                  "self.request",
                  "self.portal",
                  "self.newsletter"
                ]
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                [
                  "self.request",
                  "self.newsletter"
                ]
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                [
                  "self.request",
                  "self.issue",
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9586686625337956,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "test_newsletter_actions_is_not_available_on_issue",
                  0.9733006901358483
                ],
                [
                  "test_newsletter_actions_is_empty_for_non_editors",
                  "test_newsletter_actions_is_not_available_on_issue",
                  0.9432898338269794
                ],
                [
                  "test_newsletter_actions_is_registered_and_rendered",
                  "test_newsletter_actions_is_empty_for_non_editors",
                  0.9594154636385591
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_actions_is_registered_and_rendered",
                "false"
              ],
              [
                "test_newsletter_actions_is_empty_for_non_editors",
                "false"
              ],
              [
                "test_newsletter_actions_is_not_available_on_issue",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_newsletter_subscribers.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "[]"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_newsletter_subscribers_is_registered",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "0"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_newsletter_subscribers_not_matching_interface",
                  "0"
                ],
                [
                  "test_newsletter_subscribers_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "1"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                []
              ],
              [
                "test_newsletter_subscribers_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_newsletter_subscribers_is_registered",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4780914437337575,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_newsletter_subscribers_is_registered",
                  "test_newsletter_subscribers_not_matching_interface",
                  0.4780914437337575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_subscribers_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_subscribers_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_vocab_aggregation_templates.py",
    "testCases": [
      {
        "name": "AggregationTemplatesIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_vocab_aggregation_templates",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_vocab_aggregation_templates",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_vocab_aggregation_templates",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_vocab_aggregation_templates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_vocab_aggregation_templates",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_vocab_aggregation_templates",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_vocab_aggregation_templates",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_vocab_aggregation_templates",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                [
                  "factory",
                  "vocabulary",
                  "vocab_name"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_vocab_aggregation_templates",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_newsletter_issue_send_form.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "[]"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "false"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                [
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "0"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_newsletter_send_issue_form_not_matching_interface",
                  "0"
                ],
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "1"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                []
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                [
                  "view"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                [
                  "self.portal"
                ]
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                [
                  "self.issue",
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.51604684654214,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_newsletter_send_issue_form_is_registered",
                  "test_newsletter_send_issue_form_not_matching_interface",
                  0.51604684654214
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_newsletter_send_issue_form_not_matching_interface",
                "false"
              ],
              [
                "test_newsletter_send_issue_form_is_registered",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_view_newsletter_issue_statistics.py",
    "testCases": [
      {
        "name": "ViewsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_issue_statistics_is_registered",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "[PyCallExpression: self.assertRaises]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_issue_statistics_is_registered",
                  "[]"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_issue_statistics_is_registered",
                  "false"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_issue_statistics_is_registered",
                  "false"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_issue_statistics_is_registered",
                  "false"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_issue_statistics_is_registered",
                  "false"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "false"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "false"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                [
                  "self.newsletter"
                ]
              ],
              [
                "test_issue_statistics_not_matching_interface",
                [
                  "self.issue",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "false"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "false"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_issue_statistics_is_registered",
                  "0"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_issue_statistics_is_registered",
                  "0"
                ],
                [
                  "test_issue_statistics_not_matching_interface",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "false"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "false"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "1"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                [
                  "view"
                ]
              ],
              [
                "test_issue_statistics_not_matching_interface",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                [
                  "self.issue",
                  "self.portal"
                ]
              ],
              [
                "test_issue_statistics_not_matching_interface",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.4780914437337575,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_issue_statistics_is_registered",
                  "test_issue_statistics_not_matching_interface",
                  0.4780914437337575
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_issue_statistics_is_registered",
                "true"
              ],
              [
                "test_issue_statistics_not_matching_interface",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_behavior_external_delivery_service.py",
    "testCases": [
      {
        "name": "ExternalDeliveryServiceIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_behavior_external_delivery_service",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_behavior_external_delivery_service",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_behavior_external_delivery_service",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_behavior_external_delivery_service",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_behavior_external_delivery_service",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_behavior_external_delivery_service",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_behavior_external_delivery_service",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_behavior_external_delivery_service",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                [
                  "behavior"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_delivery_service",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_behavior_external_subscriber_sources.py",
    "testCases": [
      {
        "name": "ExternalSubscriberSourcesIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_behavior_external_subscriber_sources",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_behavior_external_subscriber_sources",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_behavior_external_subscriber_sources",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_behavior_external_subscriber_sources",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_behavior_external_subscriber_sources",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_behavior_external_subscriber_sources",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_behavior_external_subscriber_sources",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_behavior_external_subscriber_sources",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                [
                  "behavior"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_external_subscriber_sources",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_behavior_plone_user_group_recipients.py",
    "testCases": [
      {
        "name": "PloneUserGroupRecipientsIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_behavior_plone_user_group_recipients",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                [
                  "behavior"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_plone_user_group_recipients",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_subscriber_ireceiverspostsendingfilter.py",
    "testCases": [
      {
        "name": "FilterAlreadySentReceiversTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_filter",
                  "[PyCallExpression: self.assertEquals, PyCallExpression: self.assertEquals]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_filter",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_filter",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_filter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_filter",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_filter",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_filter",
                [
                  "self.portal",
                  "self.newsletter"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_filter",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_filter",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_filter",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                [
                  "successful_receivers",
                  "already_sent",
                  "receivers",
                  "final_receivers",
                  "status_adapter"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                [
                  "self.issue"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_filter",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  },
  {
    "name": "src_\u0026_Products_\u0026_EasyNewsletter_\u0026_tests_\u0026_test_behavior_collection_as_newsletter_aggregation_source.py",
    "testCases": [
      {
        "name": "CollectionAsNewsletterAggregationSourceIntegrationTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                [
                  "self.portal"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_behavior_collection_as_newsletter_aggregation_source",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                [
                  "behavior"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": true,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_behavior_collection_as_newsletter_aggregation_source",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]