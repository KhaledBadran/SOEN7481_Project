[
  {
    "name": "clubcpg_\u0026_tests_\u0026_test_Module.py",
    "testCases": [
      {
        "name": "TestTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_cases_works",
                  "[PyCallExpression: self.assertTrue]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_cases_works",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_cases_works",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_cases_works",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_cases_works",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_cases_works",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_cases_works",
                  "1"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_cases_works",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_cases_works",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      },
      {
        "name": "TestParseBam",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_parser_loaded",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_can_extract_reads",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_parser_loaded",
                  "[]"
                ],
                [
                  "test_can_extract_reads",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_parser_loaded",
                  "false"
                ],
                [
                  "test_can_extract_reads",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_parser_loaded",
                  "false"
                ],
                [
                  "test_can_extract_reads",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_parser_loaded",
                  "false"
                ],
                [
                  "test_can_extract_reads",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_parser_loaded",
                  "false"
                ],
                [
                  "test_can_extract_reads",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                "false"
              ],
              [
                "test_can_extract_reads",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                "false"
              ],
              [
                "test_can_extract_reads",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "test_parser_loaded",
                [
                  "self.required_data"
                ]
              ],
              [
                "test_can_extract_reads",
                [
                  "self.required_data"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                "false"
              ],
              [
                "test_can_extract_reads",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_parser_loaded",
                "false"
              ],
              [
                "test_can_extract_reads",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_parser_loaded",
                  "0"
                ],
                [
                  "test_can_extract_reads",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_parser_loaded",
                  "0"
                ],
                [
                  "test_can_extract_reads",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                "false"
              ],
              [
                "test_can_extract_reads",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                "false"
              ],
              [
                "test_can_extract_reads",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                "1"
              ],
              [
                "test_can_extract_reads",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                []
              ],
              [
                "test_can_extract_reads",
                [
                  "reads",
                  "matrix"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                [
                  "self.parserA"
                ]
              ],
              [
                "test_can_extract_reads",
                [
                  "self.parserA"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5046722944375538,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_parser_loaded",
                  "test_can_extract_reads",
                  0.5046722944375538
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_parser_loaded",
                "false"
              ],
              [
                "test_can_extract_reads",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestCoverageCalculation",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testCoverageCalc",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsNone, PyCallExpression: self.assertEqual]"
                ],
                [
                  "testCoverageCalcLoaded",
                  "[PyCallExpression: self.assertIsInstance]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testCoverageCalc",
                  "[]"
                ],
                [
                  "testCoverageCalcLoaded",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testCoverageCalc",
                  "false"
                ],
                [
                  "testCoverageCalcLoaded",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testCoverageCalc",
                  "false"
                ],
                [
                  "testCoverageCalcLoaded",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testCoverageCalc",
                  "false"
                ],
                [
                  "testCoverageCalcLoaded",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testCoverageCalc",
                  "false"
                ],
                [
                  "testCoverageCalcLoaded",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "false"
              ],
              [
                "testCoverageCalcLoaded",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "false"
              ],
              [
                "testCoverageCalcLoaded",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "testCoverageCalc",
                [
                  "self.required_data"
                ]
              ],
              [
                "testCoverageCalcLoaded",
                [
                  "self.required_data"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "false"
              ],
              [
                "testCoverageCalcLoaded",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "false"
              ],
              [
                "testCoverageCalcLoaded",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testCoverageCalc",
                  "0"
                ],
                [
                  "testCoverageCalcLoaded",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testCoverageCalc",
                  "0"
                ],
                [
                  "testCoverageCalcLoaded",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "false"
              ],
              [
                "testCoverageCalcLoaded",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "false"
              ],
              [
                "testCoverageCalcLoaded",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "4"
              ],
              [
                "testCoverageCalcLoaded",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                [
                  "b",
                  "bad_result",
                  "matrix"
                ]
              ],
              [
                "testCoverageCalcLoaded",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                [
                  "self.calc"
                ]
              ],
              [
                "testCoverageCalcLoaded",
                [
                  "self.calc"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.447769025557318,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testCoverageCalcLoaded",
                  "testCoverageCalc",
                  0.447769025557318
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testCoverageCalc",
                "false"
              ],
              [
                "testCoverageCalcLoaded",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestClustering",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testClustering",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "testExtractedReads",
                  "[PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "testPostClusterFiltering",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testClustering",
                  "[]"
                ],
                [
                  "testExtractedReads",
                  "[]"
                ],
                [
                  "testPostClusterFiltering",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testClustering",
                  "false"
                ],
                [
                  "testExtractedReads",
                  "false"
                ],
                [
                  "testPostClusterFiltering",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testClustering",
                  "false"
                ],
                [
                  "testExtractedReads",
                  "false"
                ],
                [
                  "testPostClusterFiltering",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testClustering",
                  "false"
                ],
                [
                  "testExtractedReads",
                  "false"
                ],
                [
                  "testPostClusterFiltering",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testClustering",
                  "false"
                ],
                [
                  "testExtractedReads",
                  "false"
                ],
                [
                  "testPostClusterFiltering",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                "false"
              ],
              [
                "testExtractedReads",
                "false"
              ],
              [
                "testPostClusterFiltering",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                "false"
              ],
              [
                "testExtractedReads",
                "false"
              ],
              [
                "testPostClusterFiltering",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "testClustering",
                [
                  "self.required_data",
                  "self.matrix_B",
                  "self.filtered",
                  "self.parserA",
                  "self.parserB",
                  "self.data_to_cluster",
                  "self.reads_B",
                  "self.reads_A"
                ]
              ],
              [
                "testExtractedReads",
                [
                  "self.cluster",
                  "self.required_data",
                  "self.filtered",
                  "self.parserA",
                  "self.parserB",
                  "self.full_matrix",
                  "self.data_to_cluster",
                  "self.reads_B",
                  "self.reads_A"
                ]
              ],
              [
                "testPostClusterFiltering",
                [
                  "self.required_data",
                  "self.matrix_B",
                  "self.matrix_A",
                  "self.parserA",
                  "self.parserB",
                  "self.full_matrix",
                  "self.data_to_cluster",
                  "self.reads_B",
                  "self.reads_A"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                "false"
              ],
              [
                "testExtractedReads",
                "false"
              ],
              [
                "testPostClusterFiltering",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "testClustering",
                "false"
              ],
              [
                "testExtractedReads",
                "false"
              ],
              [
                "testPostClusterFiltering",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testClustering",
                  "0"
                ],
                [
                  "testExtractedReads",
                  "0"
                ],
                [
                  "testPostClusterFiltering",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testClustering",
                  "0"
                ],
                [
                  "testExtractedReads",
                  "0"
                ],
                [
                  "testPostClusterFiltering",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                "false"
              ],
              [
                "testExtractedReads",
                "false"
              ],
              [
                "testPostClusterFiltering",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                "false"
              ],
              [
                "testExtractedReads",
                "false"
              ],
              [
                "testPostClusterFiltering",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                "3"
              ],
              [
                "testExtractedReads",
                "2"
              ],
              [
                "testPostClusterFiltering",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                []
              ],
              [
                "testExtractedReads",
                []
              ],
              [
                "testPostClusterFiltering",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                [
                  "self.cluster",
                  "self.matrix_A",
                  "self.full_matrix"
                ]
              ],
              [
                "testExtractedReads",
                [
                  "self.matrix_B",
                  "self.matrix_A"
                ]
              ],
              [
                "testPostClusterFiltering",
                [
                  "self.cluster",
                  "self.filtered"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5194621842777982,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "testClustering",
                  "testPostClusterFiltering",
                  0.6375996996822159
                ],
                [
                  "testExtractedReads",
                  "testClustering",
                  0.5256753469283639
                ],
                [
                  "testExtractedReads",
                  "testPostClusterFiltering",
                  0.3951115062228149
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testClustering",
                "false"
              ],
              [
                "testExtractedReads",
                "false"
              ],
              [
                "testPostClusterFiltering",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 3
      },
      {
        "name": "TestImpuation",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "testImputedResults",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "testImputedResults",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "testImputedResults",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "testImputedResults",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "testImputedResults",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "testImputedResults",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": true,
            "detail": [
              [
                "testImputedResults",
                [
                  "self.predictions",
                  "self.required_data",
                  "self.prelim.model",
                  "self.matrix",
                  "self.imputer",
                  "self.prelim"
                ]
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "testImputedResults",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "testImputedResults",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                [
                  "self.imputed_matrix"
                ]
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.0,
              "threshold": 0.6,
              "cosineSimilarityScores": []
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "testImputedResults",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 1
      }
    ]
  }
]