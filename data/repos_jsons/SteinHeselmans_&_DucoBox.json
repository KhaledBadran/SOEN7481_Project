[
  {
    "name": "tests_\u0026_test_ducobox.py",
    "testCases": [
      {
        "name": "TestDucoBox",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_no_values",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_happy",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_no_values",
                  "[]"
                ],
                [
                  "test_happy",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "2"
              ],
              [
                "test_happy",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                [
                  "box",
                  "itf_mock_object"
                ]
              ],
              [
                "test_happy",
                [
                  "box",
                  "itf_mock_object"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9219037424177584,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_happy",
                  "test_no_values",
                  0.9219037424177584
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "true"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_duconode.py",
    "testCases": [
      {
        "name": "TestDucoNode",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_store",
                  "[]"
                ],
                [
                  "test_load",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_creation_str",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_stringify",
                  "[PyCallExpression: self.assertTrue, PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_no_equality",
                  "[PyCallExpression: self.assertNotEqual]"
                ],
                [
                  "test_creation_int",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNotNone]"
                ],
                [
                  "test_equality",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_sample",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_creation_float",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_load_fail_no_section",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_load_fail_no_option",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_store",
                  "[]"
                ],
                [
                  "test_load",
                  "[]"
                ],
                [
                  "test_creation_str",
                  "[]"
                ],
                [
                  "test_stringify",
                  "[]"
                ],
                [
                  "test_no_equality",
                  "[]"
                ],
                [
                  "test_creation_int",
                  "[]"
                ],
                [
                  "test_equality",
                  "[]"
                ],
                [
                  "test_sample",
                  "[]"
                ],
                [
                  "test_creation_float",
                  "[]"
                ],
                [
                  "test_load_fail_no_section",
                  "[]"
                ],
                [
                  "test_load_fail_no_option",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_store",
                  "false"
                ],
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_creation_str",
                  "false"
                ],
                [
                  "test_stringify",
                  "false"
                ],
                [
                  "test_no_equality",
                  "false"
                ],
                [
                  "test_creation_int",
                  "false"
                ],
                [
                  "test_equality",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_creation_float",
                  "false"
                ],
                [
                  "test_load_fail_no_section",
                  "false"
                ],
                [
                  "test_load_fail_no_option",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_store",
                  "false"
                ],
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_creation_str",
                  "false"
                ],
                [
                  "test_stringify",
                  "false"
                ],
                [
                  "test_no_equality",
                  "false"
                ],
                [
                  "test_creation_int",
                  "false"
                ],
                [
                  "test_equality",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_creation_float",
                  "false"
                ],
                [
                  "test_load_fail_no_section",
                  "false"
                ],
                [
                  "test_load_fail_no_option",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_store",
                  "false"
                ],
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_creation_str",
                  "false"
                ],
                [
                  "test_stringify",
                  "false"
                ],
                [
                  "test_no_equality",
                  "false"
                ],
                [
                  "test_creation_int",
                  "false"
                ],
                [
                  "test_equality",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_creation_float",
                  "false"
                ],
                [
                  "test_load_fail_no_section",
                  "false"
                ],
                [
                  "test_load_fail_no_option",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_store",
                  "false"
                ],
                [
                  "test_load",
                  "false"
                ],
                [
                  "test_creation_str",
                  "false"
                ],
                [
                  "test_stringify",
                  "false"
                ],
                [
                  "test_no_equality",
                  "false"
                ],
                [
                  "test_creation_int",
                  "false"
                ],
                [
                  "test_equality",
                  "false"
                ],
                [
                  "test_sample",
                  "false"
                ],
                [
                  "test_creation_float",
                  "false"
                ],
                [
                  "test_load_fail_no_section",
                  "false"
                ],
                [
                  "test_load_fail_no_option",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                "false"
              ],
              [
                "test_load",
                "false"
              ],
              [
                "test_creation_str",
                "false"
              ],
              [
                "test_stringify",
                "false"
              ],
              [
                "test_no_equality",
                "false"
              ],
              [
                "test_creation_int",
                "false"
              ],
              [
                "test_equality",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_creation_float",
                "false"
              ],
              [
                "test_load_fail_no_section",
                "false"
              ],
              [
                "test_load_fail_no_option",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                "false"
              ],
              [
                "test_load",
                "false"
              ],
              [
                "test_creation_str",
                "false"
              ],
              [
                "test_stringify",
                "false"
              ],
              [
                "test_no_equality",
                "false"
              ],
              [
                "test_creation_int",
                "false"
              ],
              [
                "test_equality",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_creation_float",
                "false"
              ],
              [
                "test_load_fail_no_section",
                "false"
              ],
              [
                "test_load_fail_no_option",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                []
              ],
              [
                "test_load",
                []
              ],
              [
                "test_creation_str",
                []
              ],
              [
                "test_stringify",
                []
              ],
              [
                "test_no_equality",
                []
              ],
              [
                "test_creation_int",
                []
              ],
              [
                "test_equality",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test_creation_float",
                []
              ],
              [
                "test_load_fail_no_section",
                []
              ],
              [
                "test_load_fail_no_option",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                "false"
              ],
              [
                "test_load",
                "false"
              ],
              [
                "test_creation_str",
                "false"
              ],
              [
                "test_stringify",
                "false"
              ],
              [
                "test_no_equality",
                "false"
              ],
              [
                "test_creation_int",
                "false"
              ],
              [
                "test_equality",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_creation_float",
                "false"
              ],
              [
                "test_load_fail_no_section",
                "false"
              ],
              [
                "test_load_fail_no_option",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_store",
                "false"
              ],
              [
                "test_load",
                "true"
              ],
              [
                "test_creation_str",
                "true"
              ],
              [
                "test_stringify",
                "false"
              ],
              [
                "test_no_equality",
                "false"
              ],
              [
                "test_creation_int",
                "true"
              ],
              [
                "test_equality",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_creation_float",
                "true"
              ],
              [
                "test_load_fail_no_section",
                "true"
              ],
              [
                "test_load_fail_no_option",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_store",
                  "0"
                ],
                [
                  "test_load",
                  "0"
                ],
                [
                  "test_creation_str",
                  "0"
                ],
                [
                  "test_stringify",
                  "0"
                ],
                [
                  "test_no_equality",
                  "0"
                ],
                [
                  "test_creation_int",
                  "0"
                ],
                [
                  "test_equality",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test_creation_float",
                  "0"
                ],
                [
                  "test_load_fail_no_section",
                  "0"
                ],
                [
                  "test_load_fail_no_option",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_store",
                  "0"
                ],
                [
                  "test_load",
                  "0"
                ],
                [
                  "test_creation_str",
                  "0"
                ],
                [
                  "test_stringify",
                  "0"
                ],
                [
                  "test_no_equality",
                  "0"
                ],
                [
                  "test_creation_int",
                  "0"
                ],
                [
                  "test_equality",
                  "0"
                ],
                [
                  "test_sample",
                  "0"
                ],
                [
                  "test_creation_float",
                  "0"
                ],
                [
                  "test_load_fail_no_section",
                  "0"
                ],
                [
                  "test_load_fail_no_option",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                "false"
              ],
              [
                "test_load",
                "false"
              ],
              [
                "test_creation_str",
                "false"
              ],
              [
                "test_stringify",
                "false"
              ],
              [
                "test_no_equality",
                "false"
              ],
              [
                "test_creation_int",
                "false"
              ],
              [
                "test_equality",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_creation_float",
                "false"
              ],
              [
                "test_load_fail_no_section",
                "false"
              ],
              [
                "test_load_fail_no_option",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                "false"
              ],
              [
                "test_load",
                "false"
              ],
              [
                "test_creation_str",
                "false"
              ],
              [
                "test_stringify",
                "false"
              ],
              [
                "test_no_equality",
                "false"
              ],
              [
                "test_creation_int",
                "false"
              ],
              [
                "test_equality",
                "false"
              ],
              [
                "test_sample",
                "false"
              ],
              [
                "test_creation_float",
                "false"
              ],
              [
                "test_load_fail_no_section",
                "false"
              ],
              [
                "test_load_fail_no_option",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                "4"
              ],
              [
                "test_load",
                "4"
              ],
              [
                "test_creation_str",
                "2"
              ],
              [
                "test_stringify",
                "2"
              ],
              [
                "test_no_equality",
                "1"
              ],
              [
                "test_creation_int",
                "3"
              ],
              [
                "test_equality",
                "1"
              ],
              [
                "test_sample",
                "3"
              ],
              [
                "test_creation_float",
                "2"
              ],
              [
                "test_load_fail_no_section",
                "3"
              ],
              [
                "test_load_fail_no_option",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                [
                  "cfgparser_mock_object",
                  "node",
                  "section"
                ]
              ],
              [
                "test_load",
                [
                  "cfgparser_mock_object",
                  "node"
                ]
              ],
              [
                "test_creation_str",
                [
                  "node"
                ]
              ],
              [
                "test_stringify",
                [
                  "node"
                ]
              ],
              [
                "test_no_equality",
                [
                  "node2",
                  "node1"
                ]
              ],
              [
                "test_creation_int",
                [
                  "node"
                ]
              ],
              [
                "test_equality",
                [
                  "node2",
                  "node1"
                ]
              ],
              [
                "test_sample",
                [
                  "node"
                ]
              ],
              [
                "test_creation_float",
                [
                  "node"
                ]
              ],
              [
                "test_load_fail_no_section",
                [
                  "cfgparser_mock_object",
                  "node"
                ]
              ],
              [
                "test_load_fail_no_option",
                [
                  "cfgparser_mock_object",
                  "node"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_store",
                []
              ],
              [
                "test_load",
                []
              ],
              [
                "test_creation_str",
                []
              ],
              [
                "test_stringify",
                []
              ],
              [
                "test_no_equality",
                []
              ],
              [
                "test_creation_int",
                []
              ],
              [
                "test_equality",
                []
              ],
              [
                "test_sample",
                []
              ],
              [
                "test_creation_float",
                []
              ],
              [
                "test_load_fail_no_section",
                []
              ],
              [
                "test_load_fail_no_option",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5875052340977842,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_creation_str",
                  "test_store",
                  0.3409746856641066
                ],
                [
                  "test_creation_float",
                  "test_sample",
                  0.599707531057446
                ],
                [
                  "test_creation_str",
                  "test_load",
                  0.5615091200855055
                ],
                [
                  "test_store",
                  "test_load",
                  0.6083535957970884
                ],
                [
                  "test_sample",
                  "test_stringify",
                  0.3724726882444767
                ],
                [
                  "test_creation_str",
                  "test_equality",
                  0.6618919560913712
                ],
                [
                  "test_creation_str",
                  "test_stringify",
                  0.5635759629410776
                ],
                [
                  "test_equality",
                  "test_load",
                  0.5513490531805725
                ],
                [
                  "test_store",
                  "test_stringify",
                  0.3122683473189801
                ],
                [
                  "test_store",
                  "test_sample",
                  0.24537534357275892
                ],
                [
                  "test_no_equality",
                  "test_load_fail_no_section",
                  0.6285808858036098
                ],
                [
                  "test_equality",
                  "test_store",
                  0.35906624935876585
                ],
                [
                  "test_creation_float",
                  "test_load",
                  0.564888170185597
                ],
                [
                  "test_equality",
                  "test_no_equality",
                  0.9847319278346618
                ],
                [
                  "test_no_equality",
                  "test_stringify",
                  0.5526971103567273
                ],
                [
                  "test_creation_str",
                  "test_load_fail_no_section",
                  0.5870801383534751
                ],
                [
                  "test_load",
                  "test_sample",
                  0.47445837973583405
                ],
                [
                  "test_creation_int",
                  "test_creation_float",
                  0.8260331876309022
                ],
                [
                  "test_creation_int",
                  "test_load_fail_no_section",
                  0.6521113167513779
                ],
                [
                  "test_creation_int",
                  "test_load_fail_no_option",
                  0.6495983543529202
                ],
                [
                  "test_load",
                  "test_load_fail_no_section",
                  0.8448285743614258
                ],
                [
                  "test_load_fail_no_section",
                  "test_stringify",
                  0.39533412737590345
                ],
                [
                  "test_load",
                  "test_load_fail_no_option",
                  0.8415729608089895
                ],
                [
                  "test_creation_float",
                  "test_load_fail_no_option",
                  0.6117936727163077
                ],
                [
                  "test_creation_int",
                  "test_load",
                  0.6089579369984119
                ],
                [
                  "test_equality",
                  "test_sample",
                  0.6086270034005168
                ],
                [
                  "test_load_fail_no_option",
                  "test_stringify",
                  0.39381067613160997
                ],
                [
                  "test_creation_float",
                  "test_load_fail_no_section",
                  0.6141603882180455
                ],
                [
                  "test_creation_str",
                  "test_creation_float",
                  0.7317274774221446
                ],
                [
                  "test_load_fail_no_section",
                  "test_sample",
                  0.5557130929344644
                ],
                [
                  "test_creation_str",
                  "test_no_equality",
                  0.6517861419401112
                ],
                [
                  "test_creation_int",
                  "test_sample",
                  0.6121748388284335
                ],
                [
                  "test_no_equality",
                  "test_store",
                  0.3535839999514189
                ],
                [
                  "test_creation_str",
                  "test_load_fail_no_option",
                  0.5848177787307143
                ],
                [
                  "test_equality",
                  "test_load_fail_no_section",
                  0.6163156344279367
                ],
                [
                  "test_creation_float",
                  "test_stringify",
                  0.5244448920732585
                ],
                [
                  "test_no_equality",
                  "test_load_fail_no_option",
                  0.6261585997769192
                ],
                [
                  "test_creation_int",
                  "test_creation_str",
                  0.8170571691028834
                ],
                [
                  "test_creation_float",
                  "test_store",
                  0.2820440961630843
                ],
                [
                  "test_store",
                  "test_load_fail_no_section",
                  0.6189692428449413
                ],
                [
                  "test_creation_int",
                  "test_stringify",
                  0.5542739954736933
                ],
                [
                  "test_equality",
                  "test_stringify",
                  0.5612665688336717
                ],
                [
                  "test_creation_str",
                  "test_sample",
                  0.5304958917673055
                ],
                [
                  "test_equality",
                  "test_load_fail_no_option",
                  0.6139406135149205
                ],
                [
                  "test_creation_int",
                  "test_no_equality",
                  0.7787306058075258
                ],
                [
                  "test_no_equality",
                  "test_load",
                  0.5429310160483206
                ],
                [
                  "test_creation_int",
                  "test_equality",
                  0.7715167498104595
                ],
                [
                  "test_load_fail_no_option",
                  "test_sample",
                  0.5535716086954976
                ],
                [
                  "test_load",
                  "test_stringify",
                  0.40304999064442387
                ],
                [
                  "test_load_fail_no_section",
                  "test_load_fail_no_option",
                  0.9652581599987881
                ],
                [
                  "test_creation_int",
                  "test_store",
                  0.26827744801910997
                ],
                [
                  "test_creation_float",
                  "test_equality",
                  0.7908294280124675
                ],
                [
                  "test_store",
                  "test_load_fail_no_option",
                  0.6099540606012522
                ],
                [
                  "test_creation_float",
                  "test_no_equality",
                  0.7787549872351
                ],
                [
                  "test_no_equality",
                  "test_sample",
                  0.5993344423908241
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_store",
                "false"
              ],
              [
                "test_load",
                "true"
              ],
              [
                "test_creation_str",
                "false"
              ],
              [
                "test_stringify",
                "true"
              ],
              [
                "test_no_equality",
                "false"
              ],
              [
                "test_creation_int",
                "false"
              ],
              [
                "test_equality",
                "false"
              ],
              [
                "test_sample",
                "true"
              ],
              [
                "test_creation_float",
                "false"
              ],
              [
                "test_load_fail_no_section",
                "true"
              ],
              [
                "test_load_fail_no_option",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 11
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ducogrille.py",
    "testCases": [
      {
        "name": "TestDucoGrilleExtended",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_no_values",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_happy",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_no_values",
                  "[]"
                ],
                [
                  "test_happy",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "2"
              ],
              [
                "test_happy",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                [
                  "temperature_call",
                  "sensor",
                  "itf_mock_object"
                ]
              ],
              [
                "test_happy",
                [
                  "temperature_call",
                  "sensor",
                  "itf_mock_object"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9765923036866992,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_happy",
                  "test_no_values",
                  0.9765923036866992
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "true"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_integration.py",
    "testCases": [
      {
        "name": "TestIntegration",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_version",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_invalid_interval",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_invalid_loglevel",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_help",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_no_port",
                  "[PyCallExpression: self.assertRaises, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_version",
                  "[]"
                ],
                [
                  "test_invalid_interval",
                  "[]"
                ],
                [
                  "test_invalid_loglevel",
                  "[]"
                ],
                [
                  "test_help",
                  "[]"
                ],
                [
                  "test_no_port",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_invalid_interval",
                  "false"
                ],
                [
                  "test_invalid_loglevel",
                  "false"
                ],
                [
                  "test_help",
                  "false"
                ],
                [
                  "test_no_port",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_invalid_interval",
                  "false"
                ],
                [
                  "test_invalid_loglevel",
                  "false"
                ],
                [
                  "test_help",
                  "false"
                ],
                [
                  "test_no_port",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_invalid_interval",
                  "false"
                ],
                [
                  "test_invalid_loglevel",
                  "false"
                ],
                [
                  "test_help",
                  "false"
                ],
                [
                  "test_no_port",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_version",
                  "false"
                ],
                [
                  "test_invalid_interval",
                  "false"
                ],
                [
                  "test_invalid_loglevel",
                  "false"
                ],
                [
                  "test_help",
                  "false"
                ],
                [
                  "test_no_port",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                "false"
              ],
              [
                "test_invalid_interval",
                "false"
              ],
              [
                "test_invalid_loglevel",
                "false"
              ],
              [
                "test_help",
                "false"
              ],
              [
                "test_no_port",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                "false"
              ],
              [
                "test_invalid_interval",
                "false"
              ],
              [
                "test_invalid_loglevel",
                "false"
              ],
              [
                "test_help",
                "false"
              ],
              [
                "test_no_port",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                []
              ],
              [
                "test_invalid_interval",
                []
              ],
              [
                "test_invalid_loglevel",
                []
              ],
              [
                "test_help",
                []
              ],
              [
                "test_no_port",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                "false"
              ],
              [
                "test_invalid_interval",
                "false"
              ],
              [
                "test_invalid_loglevel",
                "false"
              ],
              [
                "test_help",
                "false"
              ],
              [
                "test_no_port",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_version",
                "true"
              ],
              [
                "test_invalid_interval",
                "true"
              ],
              [
                "test_invalid_loglevel",
                "false"
              ],
              [
                "test_help",
                "true"
              ],
              [
                "test_no_port",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_version",
                  "0"
                ],
                [
                  "test_invalid_interval",
                  "0"
                ],
                [
                  "test_invalid_loglevel",
                  "0"
                ],
                [
                  "test_help",
                  "0"
                ],
                [
                  "test_no_port",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_version",
                  "0"
                ],
                [
                  "test_invalid_interval",
                  "0"
                ],
                [
                  "test_invalid_loglevel",
                  "0"
                ],
                [
                  "test_help",
                  "0"
                ],
                [
                  "test_no_port",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                "false"
              ],
              [
                "test_invalid_interval",
                "false"
              ],
              [
                "test_invalid_loglevel",
                "false"
              ],
              [
                "test_help",
                "false"
              ],
              [
                "test_no_port",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                "false"
              ],
              [
                "test_invalid_interval",
                "false"
              ],
              [
                "test_invalid_loglevel",
                "false"
              ],
              [
                "test_help",
                "false"
              ],
              [
                "test_no_port",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                "2"
              ],
              [
                "test_invalid_interval",
                "2"
              ],
              [
                "test_invalid_loglevel",
                "1"
              ],
              [
                "test_help",
                "2"
              ],
              [
                "test_no_port",
                "2"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                []
              ],
              [
                "test_invalid_interval",
                []
              ],
              [
                "test_invalid_loglevel",
                []
              ],
              [
                "test_help",
                []
              ],
              [
                "test_no_port",
                []
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                []
              ],
              [
                "test_invalid_interval",
                []
              ],
              [
                "test_invalid_loglevel",
                []
              ],
              [
                "test_help",
                []
              ],
              [
                "test_no_port",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.694779461142534,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_help",
                  "test_version",
                  0.8888888888888891
                ],
                [
                  "test_no_port",
                  "test_invalid_interval",
                  0.7825855808712294
                ],
                [
                  "test_help",
                  "test_invalid_loglevel",
                  0.44095855184409843
                ],
                [
                  "test_version",
                  "test_invalid_interval",
                  0.8040302522073697
                ],
                [
                  "test_no_port",
                  "test_invalid_loglevel",
                  0.429197537639476
                ],
                [
                  "test_version",
                  "test_no_port",
                  0.8651809126974003
                ],
                [
                  "test_invalid_loglevel",
                  "test_invalid_interval",
                  0.6267831705280087
                ],
                [
                  "test_help",
                  "test_invalid_interval",
                  0.8040302522073697
                ],
                [
                  "test_help",
                  "test_no_port",
                  0.8651809126974003
                ],
                [
                  "test_version",
                  "test_invalid_loglevel",
                  0.44095855184409843
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_version",
                "false"
              ],
              [
                "test_invalid_interval",
                "false"
              ],
              [
                "test_invalid_loglevel",
                "false"
              ],
              [
                "test_help",
                "false"
              ],
              [
                "test_no_port",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 5
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ducointerface.py",
    "testCases": [
      {
        "name": "TestDucoInterface",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_network_complex",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_store_single_node",
                  "[]"
                ],
                [
                  "test_store_invalid_file",
                  "[]"
                ],
                [
                  "test_network_simple",
                  "[PyCallExpression: self.assertFalse, PyCallExpression: self.assertTrue, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsInstance, PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual, PyCallExpression: self.assertIsNone]"
                ],
                [
                  "test_store_no_file",
                  "[]"
                ],
                [
                  "test_store_no_nodes",
                  "[]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_network_complex",
                  "[]"
                ],
                [
                  "test_store_single_node",
                  "[]"
                ],
                [
                  "test_store_invalid_file",
                  "[]"
                ],
                [
                  "test_network_simple",
                  "[]"
                ],
                [
                  "test_store_no_file",
                  "[]"
                ],
                [
                  "test_store_no_nodes",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_network_complex",
                  "false"
                ],
                [
                  "test_store_single_node",
                  "false"
                ],
                [
                  "test_store_invalid_file",
                  "false"
                ],
                [
                  "test_network_simple",
                  "false"
                ],
                [
                  "test_store_no_file",
                  "false"
                ],
                [
                  "test_store_no_nodes",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_network_complex",
                  "false"
                ],
                [
                  "test_store_single_node",
                  "false"
                ],
                [
                  "test_store_invalid_file",
                  "false"
                ],
                [
                  "test_network_simple",
                  "false"
                ],
                [
                  "test_store_no_file",
                  "false"
                ],
                [
                  "test_store_no_nodes",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": true,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_network_complex",
                  "true"
                ],
                [
                  "test_store_single_node",
                  "false"
                ],
                [
                  "test_store_invalid_file",
                  "false"
                ],
                [
                  "test_network_simple",
                  "false"
                ],
                [
                  "test_store_no_file",
                  "false"
                ],
                [
                  "test_store_no_nodes",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_network_complex",
                  "false"
                ],
                [
                  "test_store_single_node",
                  "false"
                ],
                [
                  "test_store_invalid_file",
                  "false"
                ],
                [
                  "test_network_simple",
                  "false"
                ],
                [
                  "test_store_no_file",
                  "false"
                ],
                [
                  "test_store_no_nodes",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                "false"
              ],
              [
                "test_store_single_node",
                "false"
              ],
              [
                "test_store_invalid_file",
                "false"
              ],
              [
                "test_network_simple",
                "false"
              ],
              [
                "test_store_no_file",
                "false"
              ],
              [
                "test_store_no_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                "false"
              ],
              [
                "test_store_single_node",
                "false"
              ],
              [
                "test_store_invalid_file",
                "false"
              ],
              [
                "test_network_simple",
                "false"
              ],
              [
                "test_store_no_file",
                "false"
              ],
              [
                "test_store_no_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                []
              ],
              [
                "test_store_single_node",
                []
              ],
              [
                "test_store_invalid_file",
                []
              ],
              [
                "test_network_simple",
                []
              ],
              [
                "test_store_no_file",
                []
              ],
              [
                "test_store_no_nodes",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                "false"
              ],
              [
                "test_store_single_node",
                "false"
              ],
              [
                "test_store_invalid_file",
                "false"
              ],
              [
                "test_network_simple",
                "false"
              ],
              [
                "test_store_no_file",
                "false"
              ],
              [
                "test_store_no_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                "false"
              ],
              [
                "test_store_single_node",
                "false"
              ],
              [
                "test_store_invalid_file",
                "false"
              ],
              [
                "test_network_simple",
                "false"
              ],
              [
                "test_store_no_file",
                "false"
              ],
              [
                "test_store_no_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_network_complex",
                  "0"
                ],
                [
                  "test_store_single_node",
                  "0"
                ],
                [
                  "test_store_invalid_file",
                  "0"
                ],
                [
                  "test_network_simple",
                  "0"
                ],
                [
                  "test_store_no_file",
                  "0"
                ],
                [
                  "test_store_no_nodes",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_network_complex",
                  "0"
                ],
                [
                  "test_store_single_node",
                  "0"
                ],
                [
                  "test_store_invalid_file",
                  "0"
                ],
                [
                  "test_network_simple",
                  "0"
                ],
                [
                  "test_store_no_file",
                  "0"
                ],
                [
                  "test_store_no_nodes",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_network_complex",
                "false"
              ],
              [
                "test_store_single_node",
                "true"
              ],
              [
                "test_store_invalid_file",
                "false"
              ],
              [
                "test_network_simple",
                "false"
              ],
              [
                "test_store_no_file",
                "false"
              ],
              [
                "test_store_no_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                "false"
              ],
              [
                "test_store_single_node",
                "false"
              ],
              [
                "test_store_invalid_file",
                "false"
              ],
              [
                "test_network_simple",
                "false"
              ],
              [
                "test_store_no_file",
                "false"
              ],
              [
                "test_store_no_nodes",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": true,
            "detail": [
              [
                "test_network_complex",
                "65"
              ],
              [
                "test_store_single_node",
                "1"
              ],
              [
                "test_store_invalid_file",
                "1"
              ],
              [
                "test_network_simple",
                "18"
              ],
              [
                "test_store_no_file",
                "0"
              ],
              [
                "test_store_no_nodes",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                [
                  "node",
                  "serial_mock_object",
                  "itf"
                ]
              ],
              [
                "test_store_single_node",
                [
                  "cfgparser_mock_object",
                  "node",
                  "open_mock",
                  "itf"
                ]
              ],
              [
                "test_store_invalid_file",
                [
                  "open_mock",
                  "itf"
                ]
              ],
              [
                "test_network_simple",
                [
                  "node",
                  "serial_mock_object",
                  "itf"
                ]
              ],
              [
                "test_store_no_file",
                [
                  "itf"
                ]
              ],
              [
                "test_store_no_nodes",
                [
                  "open_mock",
                  "itf"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                []
              ],
              [
                "test_store_single_node",
                []
              ],
              [
                "test_store_invalid_file",
                []
              ],
              [
                "test_network_simple",
                []
              ],
              [
                "test_store_no_file",
                []
              ],
              [
                "test_store_no_nodes",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.48932344179014375,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_store_no_file",
                  "test_store_no_nodes",
                  0.6702627371054852
                ],
                [
                  "test_store_invalid_file",
                  "test_store_single_node",
                  0.8055602973950949
                ],
                [
                  "test_network_complex",
                  "test_store_no_file",
                  0.19124899268823173
                ],
                [
                  "test_network_complex",
                  "test_store_no_nodes",
                  0.14958105381857578
                ],
                [
                  "test_network_simple",
                  "test_store_no_file",
                  0.296927843424336
                ],
                [
                  "test_network_simple",
                  "test_store_no_nodes",
                  0.28000008612076255
                ],
                [
                  "test_store_no_file",
                  "test_store_invalid_file",
                  0.6702627371054852
                ],
                [
                  "test_store_no_file",
                  "test_store_single_node",
                  0.5416296424682584
                ],
                [
                  "test_store_invalid_file",
                  "test_store_no_nodes",
                  0.980769230769231
                ],
                [
                  "test_network_simple",
                  "test_network_complex",
                  0.9574313651180462
                ],
                [
                  "test_store_no_nodes",
                  "test_store_single_node",
                  0.8055602973950949
                ],
                [
                  "test_network_simple",
                  "test_store_single_node",
                  0.352206578463419
                ],
                [
                  "test_network_complex",
                  "test_store_invalid_file",
                  0.14958105381857578
                ],
                [
                  "test_network_simple",
                  "test_store_invalid_file",
                  0.28000008612076255
                ],
                [
                  "test_network_complex",
                  "test_store_single_node",
                  0.20882962504079725
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_network_complex",
                "false"
              ],
              [
                "test_store_single_node",
                "false"
              ],
              [
                "test_store_invalid_file",
                "false"
              ],
              [
                "test_network_simple",
                "false"
              ],
              [
                "test_store_no_file",
                "false"
              ],
              [
                "test_store_no_nodes",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 6
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ducovalveco2sensor.py",
    "testCases": [
      {
        "name": "TestDucoValveCO2SensorExtended",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_no_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_happy",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_no_values",
                  "[]"
                ],
                [
                  "test_happy",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "3"
              ],
              [
                "test_happy",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                [
                  "co2_call",
                  "temperature_call",
                  "sensor",
                  "itf_mock_object"
                ]
              ],
              [
                "test_happy",
                [
                  "co2_call",
                  "temperature_call",
                  "sensor",
                  "itf_mock_object"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9778046040608336,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_happy",
                  "test_no_values",
                  0.9778046040608336
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "true"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ducovalvehumiditysensor.py",
    "testCases": [
      {
        "name": "TestDucoValveHumiditySensorExtended",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_no_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_happy",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_no_values",
                  "[]"
                ],
                [
                  "test_happy",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "3"
              ],
              [
                "test_happy",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                [
                  "temperature_call",
                  "sensor",
                  "itf_mock_object",
                  "humidity_call"
                ]
              ],
              [
                "test_happy",
                [
                  "temperature_call",
                  "sensor",
                  "itf_mock_object",
                  "humidity_call"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.962740212637843,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_happy",
                  "test_no_values",
                  0.962740212637843
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "true"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ducousercontrolco2sensor.py",
    "testCases": [
      {
        "name": "TestDucoUserControlCO2SensorExtended",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_no_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_happy",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_no_values",
                  "[]"
                ],
                [
                  "test_happy",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_no_values",
                  "false"
                ],
                [
                  "test_happy",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "true"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_no_values",
                  "0"
                ],
                [
                  "test_happy",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "false"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                "3"
              ],
              [
                "test_happy",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                [
                  "co2_call",
                  "temperature_call",
                  "sensor",
                  "itf_mock_object"
                ]
              ],
              [
                "test_happy",
                [
                  "co2_call",
                  "temperature_call",
                  "sensor",
                  "itf_mock_object"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_no_values",
                []
              ],
              [
                "test_happy",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9778864094912956,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_happy",
                  "test_no_values",
                  0.9778864094912956
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_no_values",
                "true"
              ],
              [
                "test_happy",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  },
  {
    "name": "tests_\u0026_test_ducousercontrolhumiditysensor.py",
    "testCases": [
      {
        "name": "TestDucoUserControlHumiditySensorBasic",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_happy",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_no_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_happy",
                  "[]"
                ],
                [
                  "test_no_values",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                []
              ],
              [
                "test_no_values",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_happy",
                "true"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_happy",
                  "0"
                ],
                [
                  "test_no_values",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_happy",
                  "0"
                ],
                [
                  "test_no_values",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "3"
              ],
              [
                "test_no_values",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                [
                  "sensor",
                  "itf_mock_object"
                ]
              ],
              [
                "test_no_values",
                [
                  "sensor",
                  "itf_mock_object"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                []
              ],
              [
                "test_no_values",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9418448340689352,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_happy",
                  "test_no_values",
                  0.9418448340689352
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      },
      {
        "name": "TestDucoUserControlHumiditySensorExtended",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_happy",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_no_values",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_happy",
                  "[]"
                ],
                [
                  "test_no_values",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_happy",
                  "false"
                ],
                [
                  "test_no_values",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                []
              ],
              [
                "test_no_values",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": true,
            "detail": [
              [
                "test_happy",
                "true"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_happy",
                  "0"
                ],
                [
                  "test_no_values",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_happy",
                  "0"
                ],
                [
                  "test_no_values",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                "3"
              ],
              [
                "test_no_values",
                "3"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                [
                  "temperature_call",
                  "sensor",
                  "itf_mock_object",
                  "humidity_call"
                ]
              ],
              [
                "test_no_values",
                [
                  "temperature_call",
                  "sensor",
                  "itf_mock_object",
                  "humidity_call"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_happy",
                []
              ],
              [
                "test_no_values",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.9629244280070594,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_happy",
                  "test_no_values",
                  0.9629244280070594
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_happy",
                "false"
              ],
              [
                "test_no_values",
                "true"
              ]
            ]
          }
        ],
        "numberOfMethods": 2
      }
    ]
  }
]