[
  {
    "name": "tests_\u0026_test_keggapi.py",
    "testCases": [
      {
        "name": "KEGGapiTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": true,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_keggapi_info_returns_dict",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_download_textfile_file_exists",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_keggapi_info_returns_dict",
                  "[]"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "[]"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "[]"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "[]"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "[]"
                ],
                [
                  "test_download_textfile_file_exists",
                  "[]"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "[]"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_keggapi_info_returns_dict",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "false"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "false"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "false"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "false"
                ],
                [
                  "test_download_textfile_file_exists",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "false"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_keggapi_info_returns_dict",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "false"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "false"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "false"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "false"
                ],
                [
                  "test_download_textfile_file_exists",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "false"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_keggapi_info_returns_dict",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "false"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "false"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "false"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "false"
                ],
                [
                  "test_download_textfile_file_exists",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "false"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_keggapi_info_returns_dict",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "false"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "false"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "false"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "false"
                ],
                [
                  "test_download_textfile_file_exists",
                  "false"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "false"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "false"
              ],
              [
                "test_keggapi_info_returns_str",
                "false"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "false"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "false"
              ],
              [
                "test_download_textfile_file_exists",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "false"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": true,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "false"
              ],
              [
                "test_keggapi_info_returns_str",
                "false"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "false"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "false"
              ],
              [
                "test_download_textfile_file_exists",
                "true"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "false"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                []
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                []
              ],
              [
                "test_keggapi_info_returns_str",
                []
              ],
              [
                "test_download_json_file_doesnt_exist",
                []
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                []
              ],
              [
                "test_download_textfile_file_exists",
                []
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                []
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "false"
              ],
              [
                "test_keggapi_info_returns_str",
                "false"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "false"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "false"
              ],
              [
                "test_download_textfile_file_exists",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "false"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "false"
              ],
              [
                "test_keggapi_info_returns_str",
                "false"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "false"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "false"
              ],
              [
                "test_download_textfile_file_exists",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "false"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_keggapi_info_returns_dict",
                  "0"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "0"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "0"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "0"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "0"
                ],
                [
                  "test_download_textfile_file_exists",
                  "0"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "0"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_keggapi_info_returns_dict",
                  "0"
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "0"
                ],
                [
                  "test_keggapi_info_returns_str",
                  "0"
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "0"
                ],
                [
                  "test_download_textfile_raise_error_if_newline",
                  "0"
                ],
                [
                  "test_download_textfile_file_exists",
                  "0"
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "0"
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "false"
              ],
              [
                "test_keggapi_info_returns_str",
                "false"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "false"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "false"
              ],
              [
                "test_download_textfile_file_exists",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "false"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "false"
              ],
              [
                "test_keggapi_info_returns_str",
                "false"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "false"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "false"
              ],
              [
                "test_download_textfile_file_exists",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "false"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "1"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "2"
              ],
              [
                "test_keggapi_info_returns_str",
                "1"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "1"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "1"
              ],
              [
                "test_download_textfile_file_exists",
                "1"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "1"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                [
                  "expected_dict",
                  "response_dict"
                ]
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                [
                  "descriptionlist",
                  "test_genes",
                  "itemlist",
                  "test_descriptions"
                ]
              ],
              [
                "test_keggapi_info_returns_str",
                [
                  "response_str"
                ]
              ],
              [
                "test_download_json_file_doesnt_exist",
                [
                  "data"
                ]
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                []
              ],
              [
                "test_download_textfile_file_exists",
                [
                  "filepath",
                  "text"
                ]
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                [
                  "test_genes",
                  "itemlist"
                ]
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                [
                  "text"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                []
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                []
              ],
              [
                "test_keggapi_info_returns_str",
                []
              ],
              [
                "test_download_json_file_doesnt_exist",
                []
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                []
              ],
              [
                "test_download_textfile_file_exists",
                []
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                []
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.5232757643876832,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_keggapi_info_returns_str",
                  "test_download_textfile_file_doesnt_exist",
                  0.45127098950751027
                ],
                [
                  "test_keggapi_info_returns_dict",
                  "test_download_json_file_doesnt_exist",
                  0.43041423101055837
                ],
                [
                  "test_keggapi_info_returns_str",
                  "test_download_textfile_raise_error_if_newline",
                  0.5114896104728048
                ],
                [
                  "test_download_textfile_file_exists",
                  "test_download_textfile_raise_error_if_newline",
                  0.5940885257860045
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "test_download_textfile_raise_error_if_newline",
                  0.5147369507237332
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "test_download_textfile_raise_error_if_newline",
                  0.6685631938613181
                ],
                [
                  "test_keggapi_info_returns_str",
                  "test_download_json_file_doesnt_exist",
                  0.4502251688907482
                ],
                [
                  "test_keggapi_info_returns_str",
                  "test_keggapi_list_wantdescrTrue",
                  0.5353832824363526
                ],
                [
                  "test_keggapi_info_returns_dict",
                  "test_download_textfile_raise_error_if_newline",
                  0.5099019513592785
                ],
                [
                  "test_keggapi_info_returns_dict",
                  "test_download_textfile_file_exists",
                  0.4077862096248241
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "test_keggapi_list_wantdescrFalse",
                  0.4273738431706883
                ],
                [
                  "test_keggapi_info_returns_str",
                  "test_download_textfile_file_exists",
                  0.4143683299645178
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "test_download_textfile_file_doesnt_exist",
                  0.5568460463897046
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "test_download_textfile_raise_error_if_newline",
                  0.5422176684690384
                ],
                [
                  "test_keggapi_info_returns_dict",
                  "test_keggapi_list_wantdescrTrue",
                  0.531306428361855
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "test_download_textfile_raise_error_if_newline",
                  0.5131156509334682
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "test_download_textfile_file_exists",
                  0.4291920227691872
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "test_download_textfile_file_doesnt_exist",
                  0.48191240567244203
                ],
                [
                  "test_keggapi_info_returns_str",
                  "test_keggapi_info_returns_dict",
                  0.7523352417694629
                ],
                [
                  "test_download_textfile_file_doesnt_exist",
                  "test_download_textfile_file_exists",
                  0.6406221326384731
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "test_keggapi_list_wantdescrTrue",
                  0.9192617153425122
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "test_keggapi_list_wantdescrTrue",
                  0.4196984500696014
                ],
                [
                  "test_keggapi_info_returns_dict",
                  "test_download_textfile_file_doesnt_exist",
                  0.4441026811597043
                ],
                [
                  "test_keggapi_list_wantdescrFalse",
                  "test_download_textfile_file_exists",
                  0.44250404606243743
                ],
                [
                  "test_keggapi_info_returns_dict",
                  "test_keggapi_list_wantdescrFalse",
                  0.5518433521870162
                ],
                [
                  "test_download_json_file_doesnt_exist",
                  "test_download_textfile_file_exists",
                  0.4857444929366679
                ],
                [
                  "test_keggapi_list_wantdescrTrue",
                  "test_download_textfile_file_doesnt_exist",
                  0.4674148451942887
                ],
                [
                  "test_keggapi_info_returns_str",
                  "test_keggapi_list_wantdescrFalse",
                  0.5580019360909326
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": false,
            "detail": [
              [
                "test_keggapi_info_returns_dict",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrTrue",
                "false"
              ],
              [
                "test_keggapi_info_returns_str",
                "false"
              ],
              [
                "test_download_json_file_doesnt_exist",
                "false"
              ],
              [
                "test_download_textfile_raise_error_if_newline",
                "false"
              ],
              [
                "test_download_textfile_file_exists",
                "false"
              ],
              [
                "test_keggapi_list_wantdescrFalse",
                "false"
              ],
              [
                "test_download_textfile_file_doesnt_exist",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 8
      }
    ]
  },
  {
    "name": "tests_\u0026_test_kegggraph.py",
    "testCases": [
      {
        "name": "KEGGLinkGraphTests",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "[PyCallExpression: self.assertIsInstance]"
                ],
                [
                  "test_1",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "[PyCallExpression: self.assertEqual, PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "[PyCallExpression: self.assertEqual]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "[]"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "[]"
                ],
                [
                  "test_1",
                  "[]"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "[]"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "[]"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "[]"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "false"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "false"
                ],
                [
                  "test_1",
                  "false"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "false"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "false"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "false"
                ],
                [
                  "test_1",
                  "false"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "false"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "false"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "false"
                ],
                [
                  "test_1",
                  "false"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "false"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "false"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "false"
                ],
                [
                  "test_1",
                  "false"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "false"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "false"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "false"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "false"
              ],
              [
                "test_1",
                "false"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "false"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "false"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "false"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "false"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "false"
              ],
              [
                "test_1",
                "false"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "false"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "false"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "false"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                []
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                []
              ],
              [
                "test_1",
                []
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                []
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                []
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                []
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "false"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "false"
              ],
              [
                "test_1",
                "false"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "false"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "false"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "false"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "false"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "false"
              ],
              [
                "test_1",
                "false"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "false"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "false"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "false"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": true,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "0"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "0"
                ],
                [
                  "test_1",
                  "1"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "0"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "0"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "0"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "0"
                ],
                [
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  "0"
                ],
                [
                  "test_1",
                  "0"
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "0"
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "0"
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "0"
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": true,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "false"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "false"
              ],
              [
                "test_1",
                "false"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "false"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "false"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "false"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "true"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "false"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "false"
              ],
              [
                "test_1",
                "false"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "false"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "false"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "false"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "1"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "1"
              ],
              [
                "test_1",
                "1"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "2"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "1"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "1"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                [
                  "list_nodes",
                  "linkgraph"
                ]
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                [
                  "list_nodes",
                  "linkgraph"
                ]
              ],
              [
                "test_1",
                [
                  "linkgraph"
                ]
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                [
                  "linkgraph"
                ]
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                [
                  "projected_graph",
                  "linkgraph"
                ]
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                [
                  "linkgraph"
                ]
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                [
                  "linkgraph",
                  "graph"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                []
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                []
              ],
              [
                "test_1",
                []
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                []
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                []
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                []
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": false,
            "detail": {
              "testClassCohesionScore": 0.8245026216582535,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "test_kegglinkgraph_correct_nodetypes",
                  0.7898934256794545
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  0.8151634344554844
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  0.7517785180297054
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "test_kegglinkgraph_number_of_nodes",
                  0.7969850595746354
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  0.7764369457390996
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  0.888459407653281
                ],
                [
                  "test_1",
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  0.8466068268482454
                ],
                [
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  0.9568701028356917
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  0.8667190566019204
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  0.8046578869733976
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                  0.7660323462854264
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "test_kegglinkgraph_number_of_nodes",
                  0.874013194350671
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "test_1",
                  0.8786581771221835
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "test_1",
                  0.7582791424667449
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "test_kegglinkgraph_number_of_nodes",
                  0.8076606470596865
                ],
                [
                  "test_1",
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  0.8499333890808439
                ],
                [
                  "test_kegglinkgraph_number_of_nodes",
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  0.9006101335613629
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "test_1",
                  0.8327803387482567
                ],
                [
                  "test_kegglinkgraph_correct_nodetypes",
                  "test_1",
                  0.7689215936899414
                ],
                [
                  "test_kegglinkgraph_projection_has_edges",
                  "test_kegglinkgraph_correct_nodetypes",
                  0.6965682895736597
                ],
                [
                  "test_kegglinkgraph_same_nodes_as_original_function",
                  "test_kegglinkgraph_get_linked_nodes_islist",
                  0.887527138493629
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_kegglinkgraph_get_nodes_by_nodetype_islist",
                "false"
              ],
              [
                "test_kegglinkgraph_get_linked_nodes_islist",
                "false"
              ],
              [
                "test_1",
                "true"
              ],
              [
                "test_kegglinkgraph_correct_nodetypes",
                "false"
              ],
              [
                "test_kegglinkgraph_projection_has_edges",
                "false"
              ],
              [
                "test_kegglinkgraph_number_of_nodes",
                "false"
              ],
              [
                "test_kegglinkgraph_same_nodes_as_original_function",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 7
      }
    ]
  },
  {
    "name": "tests_\u0026_test_keggutils.py",
    "testCases": [
      {
        "name": "KEGGutilsTest",
        "detectorResults": [
          {
            "name": "AssertionRoulette",
            "hasSmell": false,
            "detail": {
              "assertionCallsInTests": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_unique_nodetypes",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_linked_nodes",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_neighbor_graph_edges",
                  "[PyCallExpression: self.assertEqual]"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "[PyCallExpression: self.assertRaises]"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "[PyCallExpression: self.assertTrue]"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "[PyCallExpression: self.assertFalse]"
                ]
              ],
              "assertStatementsInTests": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "[]"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "[]"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "[]"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "[]"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "[]"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "[]"
                ],
                [
                  "test_unique_nodetypes",
                  "[]"
                ],
                [
                  "test_linked_nodes",
                  "[]"
                ],
                [
                  "test_neighbor_graph_edges",
                  "[]"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "[]"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "[]"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "[]"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "[]"
                ]
              ]
            }
          },
          {
            "name": "ConditionalTestLogic",
            "hasSmell": false,
            "detail": {
              "testHasConditionalTestLogic": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "false"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "false"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "false"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "false"
                ],
                [
                  "test_unique_nodetypes",
                  "false"
                ],
                [
                  "test_linked_nodes",
                  "false"
                ],
                [
                  "test_neighbor_graph_edges",
                  "false"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "false"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "false"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "false"
                ]
              ],
              "testHasComprehension": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "false"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "false"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "false"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "false"
                ],
                [
                  "test_unique_nodetypes",
                  "false"
                ],
                [
                  "test_linked_nodes",
                  "false"
                ],
                [
                  "test_neighbor_graph_edges",
                  "false"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "false"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "false"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "ConstructorInitialization",
            "hasSmell": false
          },
          {
            "name": "DefaultTest",
            "hasSmell": false
          },
          {
            "name": "DuplicateAssertion",
            "hasSmell": false,
            "detail": {
              "testHasDuplicateAssertCall": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "false"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "false"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "false"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "false"
                ],
                [
                  "test_unique_nodetypes",
                  "false"
                ],
                [
                  "test_linked_nodes",
                  "false"
                ],
                [
                  "test_neighbor_graph_edges",
                  "false"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "false"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "false"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "false"
                ]
              ],
              "testHasDuplicateAssertStatement": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "false"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "false"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "false"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "false"
                ],
                [
                  "test_unique_nodetypes",
                  "false"
                ],
                [
                  "test_linked_nodes",
                  "false"
                ],
                [
                  "test_neighbor_graph_edges",
                  "false"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "false"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "false"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "false"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "false"
                ]
              ]
            }
          },
          {
            "name": "EmptyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "false"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype",
                "false"
              ],
              [
                "test_neighbor_graph_nodes",
                "false"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "false"
              ],
              [
                "test_unique_nodetypes",
                "false"
              ],
              [
                "test_linked_nodes",
                "false"
              ],
              [
                "test_neighbor_graph_edges",
                "false"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "false"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "false"
              ],
              [
                "test_has_nodetype_doesnthave",
                "false"
              ]
            ]
          },
          {
            "name": "ExceptionHandling",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "false"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype",
                "false"
              ],
              [
                "test_neighbor_graph_nodes",
                "false"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "false"
              ],
              [
                "test_unique_nodetypes",
                "false"
              ],
              [
                "test_linked_nodes",
                "false"
              ],
              [
                "test_neighbor_graph_edges",
                "false"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "false"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "false"
              ],
              [
                "test_has_nodetype_doesnthave",
                "false"
              ]
            ]
          },
          {
            "name": "GeneralFixture",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                []
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                []
              ],
              [
                "test_get_nodes_by_nodetype",
                []
              ],
              [
                "test_neighbor_graph_nodes",
                []
              ],
              [
                "test_has_nodetypes_actuallyhas",
                []
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                []
              ],
              [
                "test_unique_nodetypes",
                []
              ],
              [
                "test_linked_nodes",
                []
              ],
              [
                "test_neighbor_graph_edges",
                []
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                []
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                []
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                []
              ],
              [
                "test_has_nodetype_doesnthave",
                []
              ]
            ]
          },
          {
            "name": "IgnoredTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "false"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype",
                "false"
              ],
              [
                "test_neighbor_graph_nodes",
                "false"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "false"
              ],
              [
                "test_unique_nodetypes",
                "false"
              ],
              [
                "test_linked_nodes",
                "false"
              ],
              [
                "test_neighbor_graph_edges",
                "false"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "false"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "false"
              ],
              [
                "test_has_nodetype_doesnthave",
                "false"
              ]
            ]
          },
          {
            "name": "MagicNumberTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "false"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype",
                "false"
              ],
              [
                "test_neighbor_graph_nodes",
                "false"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "false"
              ],
              [
                "test_unique_nodetypes",
                "false"
              ],
              [
                "test_linked_nodes",
                "false"
              ],
              [
                "test_neighbor_graph_edges",
                "false"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "false"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "false"
              ],
              [
                "test_has_nodetype_doesnthave",
                "false"
              ]
            ]
          },
          {
            "name": "RedundantAssertion",
            "hasSmell": false,
            "detail": {
              "testMethodHaveRedundantAssertCall": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "0"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "0"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "0"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "0"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "0"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "0"
                ],
                [
                  "test_unique_nodetypes",
                  "0"
                ],
                [
                  "test_linked_nodes",
                  "0"
                ],
                [
                  "test_neighbor_graph_edges",
                  "0"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "0"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "0"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "0"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "0"
                ]
              ],
              "testMethodHaveRedundantAssertStatement": [
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "0"
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "0"
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "0"
                ],
                [
                  "test_neighbor_graph_nodes",
                  "0"
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "0"
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "0"
                ],
                [
                  "test_unique_nodetypes",
                  "0"
                ],
                [
                  "test_linked_nodes",
                  "0"
                ],
                [
                  "test_neighbor_graph_edges",
                  "0"
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "0"
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "0"
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "0"
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "0"
                ]
              ]
            }
          },
          {
            "name": "RedundantPrint",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "false"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype",
                "false"
              ],
              [
                "test_neighbor_graph_nodes",
                "false"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "false"
              ],
              [
                "test_unique_nodetypes",
                "false"
              ],
              [
                "test_linked_nodes",
                "false"
              ],
              [
                "test_neighbor_graph_edges",
                "false"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "false"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "false"
              ],
              [
                "test_has_nodetype_doesnthave",
                "false"
              ]
            ]
          },
          {
            "name": "SleepyTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "false"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype",
                "false"
              ],
              [
                "test_neighbor_graph_nodes",
                "false"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "false"
              ],
              [
                "test_unique_nodetypes",
                "false"
              ],
              [
                "test_linked_nodes",
                "false"
              ],
              [
                "test_neighbor_graph_edges",
                "false"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "false"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "false"
              ],
              [
                "test_has_nodetype_doesnthave",
                "false"
              ]
            ]
          },
          {
            "name": "UnknownTest",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "1"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "1"
              ],
              [
                "test_get_nodes_by_nodetype",
                "1"
              ],
              [
                "test_neighbor_graph_nodes",
                "1"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "1"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "1"
              ],
              [
                "test_unique_nodetypes",
                "1"
              ],
              [
                "test_linked_nodes",
                "1"
              ],
              [
                "test_neighbor_graph_edges",
                "1"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "1"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "1"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "1"
              ],
              [
                "test_has_nodetype_doesnthave",
                "1"
              ]
            ]
          },
          {
            "name": "ObscureInLineSetup",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                [
                  "hsa_nodetypes"
                ]
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                [
                  "graph"
                ]
              ],
              [
                "test_get_nodes_by_nodetype",
                [
                  "graph"
                ]
              ],
              [
                "test_neighbor_graph_nodes",
                []
              ],
              [
                "test_has_nodetypes_actuallyhas",
                [
                  "graph"
                ]
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                [
                  "graph"
                ]
              ],
              [
                "test_unique_nodetypes",
                []
              ],
              [
                "test_linked_nodes",
                []
              ],
              [
                "test_neighbor_graph_edges",
                []
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                [
                  "graph"
                ]
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                [
                  "graph"
                ]
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                [
                  "graph"
                ]
              ],
              [
                "test_has_nodetype_doesnthave",
                [
                  "graph"
                ]
              ]
            ]
          },
          {
            "name": "TestMaverick",
            "hasSmell": false,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                []
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                []
              ],
              [
                "test_get_nodes_by_nodetype",
                []
              ],
              [
                "test_neighbor_graph_nodes",
                []
              ],
              [
                "test_has_nodetypes_actuallyhas",
                []
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                []
              ],
              [
                "test_unique_nodetypes",
                []
              ],
              [
                "test_linked_nodes",
                []
              ],
              [
                "test_neighbor_graph_edges",
                []
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                []
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                []
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                []
              ],
              [
                "test_has_nodetype_doesnthave",
                []
              ]
            ]
          },
          {
            "name": "LackCohesion",
            "hasSmell": true,
            "detail": {
              "testClassCohesionScore": 0.3561941608764864,
              "threshold": 0.6,
              "cosineSimilarityScores": [
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_linked_nodes",
                  0.2005738892714385
                ],
                [
                  "test_neighbor_graph_nodes",
                  "test_neighbor_graph_edges",
                  0.8573214099741123
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "test_neighbor_graph_nodes",
                  0.1636634176769943
                ],
                [
                  "test_unique_nodetypes",
                  "test_neighbor_graph_nodes",
                  0.1767766952966369
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_neighbor_graph_edges",
                  0.15811388300841894
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_get_nodes_by_nodetype",
                  0.5669817440703095
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_get_nodes_by_nodetype",
                  0.2566324512873683
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_linked_nodes",
                  0.25197631533948484
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "test_unique_nodetypes",
                  0.11572751247156894
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "test_get_nodes_by_nodetype_missingnodetype",
                  0.8571428571428571
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.20261022461827694
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_has_nodetypes_actuallyhas",
                  0.6390096504226938
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_linked_nodes",
                  0.2005738892714385
                ],
                [
                  "test_linked_nodes",
                  "test_neighbor_graph_nodes",
                  0.5345224838248488
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_get_nodes_by_nodetype",
                  0.7170651469124503
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_get_nodes_by_nodetype_invalidgraph",
                  0.3857583749052298
                ],
                [
                  "test_unique_nodetypes",
                  "test_linked_nodes",
                  0.18898223650461363
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_neighbor_graph_nodes",
                  0.16081688022566926
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_has_nodetypes_actuallyhas",
                  0.7889320586105296
                ],
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "test_neighbor_graph_nodes",
                  0.09449111825230681
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_has_nodetype_doesnthave",
                  0.33333333333333337
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_get_nodes_by_nodetype_missingnodetype",
                  0.5439433649162871
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_has_nodetype_doesnthave",
                  0.2653343152526162
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_neighbor_graph_edges",
                  0.15756771943166706
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "test_neighbor_graph_nodes",
                  0.12961896184130317
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_unique_nodetypes",
                  0.1137147065368355
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "test_linked_nodes",
                  0.17496355305594133
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_get_nodes_by_nodetype_invalidgraph",
                  0.6667692860264165
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.43301270189221935
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "test_linked_nodes",
                  0.3048506975105313
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_linked_nodes",
                  0.20701966780270628
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_get_nodes_by_nodetype_missingnodetype",
                  0.5400617248673217
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_unique_nodetypes",
                  0.12500000000000003
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_get_nodes_by_nodetype",
                  0.7630583624573739
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "test_neighbor_graph_nodes",
                  0.13638618139749525
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_neighbor_graph_edges",
                  0.20207259421636903
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_neighbor_graph_nodes",
                  0.23570226039551587
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_get_nodes_by_nodetype_missingnodetype",
                  0.7817676856238778
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_unique_nodetypes",
                  0.13693063937629152
                ],
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "test_linked_nodes",
                  0.37038926633581065
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.47425200683433544
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "test_neighbor_graph_edges",
                  0.16035674514745463
                ],
                [
                  "test_linked_nodes",
                  "test_neighbor_graph_edges",
                  0.48007935851918326
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_get_nodes_by_nodetype_invalidgraph",
                  0.6972522601510261
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_neighbor_graph_nodes",
                  0.16137430609197573
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_has_nodetype_doesnthave",
                  0.41079191812887456
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_neighbor_graph_edges",
                  0.23094010767585033
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_neighbor_graph_nodes",
                  0.18761969359661412
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_get_nodes_by_nodetype",
                  0.5865884600854132
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_linked_nodes",
                  0.25197631533948484
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  0.7201931413999582
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "test_get_nodes_by_nodetype_missingnodetype",
                  0.8146130799625568
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "test_unique_nodetypes",
                  0.1466471150213533
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_get_nodes_by_nodetype_invalidgraph",
                  0.5263968047576972
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "test_neighbor_graph_edges",
                  0.1270001270001905
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_get_nodes_by_nodetype_invalidgraph",
                  0.5400617248673217
                ],
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "test_unique_nodetypes",
                  0.1781741612749496
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_neighbor_graph_edges",
                  0.18382900600361157
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.3563483225498992
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "test_get_nodes_by_nodetype_invalidgraph",
                  0.763699762464897
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.2004459314343183
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "test_neighbor_graph_edges",
                  0.1336306209562122
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_has_nodetypes_actuallyhas",
                  0.5605569890127446
                ],
                [
                  "test_get_nodes_by_nodetype_missingnodetype",
                  "test_unique_nodetypes",
                  0.11572751247156894
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_neighbor_graph_nodes",
                  0.20623947784607638
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_get_nodes_by_nodetype_missingnodetype",
                  0.3086066999241839
                ],
                [
                  "test_has_nodetype_doesnthave",
                  "test_unique_nodetypes",
                  0.25000000000000006
                ],
                [
                  "test_get_nodes_by_nodetype_invalidgraph",
                  "test_linked_nodes",
                  0.1458029608799511
                ],
                [
                  "test_has_nodetypes_actuallyhas",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.2683725200608466
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_kegg_link_graph_adds_nodes",
                  0.6551724137931033
                ],
                [
                  "test_get_nodes_by_nodetype",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.5291067161269939
                ],
                [
                  "test_kegg_link_graph_returns_bipartite_graphs",
                  "test_kegg_link_graph_adds_nodes",
                  0.682288239221013
                ],
                [
                  "test_unique_nodetypes",
                  "test_neighbor_graph_edges",
                  0.17320508075688776
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_unique_nodetypes",
                  0.1137147065368355
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_has_nodetype_doesnthave",
                  0.2653343152526162
                ],
                [
                  "test_kegg_link_graph_adds_nodes",
                  "test_get_nodes_by_nodetype_missingnodetype",
                  0.7018624063435963
                ],
                [
                  "test_kegg_link_graph_all_nodes_are_correctly_copied",
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  0.24313226954193232
                ],
                [
                  "test_get_nodes_by_nodetype_correct_nodetype_dict",
                  "test_neighbor_graph_edges",
                  0.09258200997725516
                ]
              ]
            }
          },
          {
            "name": "SuboptimalAssert",
            "hasSmell": true,
            "detail": [
              [
                "test_get_nodes_by_nodetype_correct_nodetype_dict",
                "false"
              ],
              [
                "test_kegg_link_graph_all_nodes_are_correctly_copied",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype",
                "false"
              ],
              [
                "test_neighbor_graph_nodes",
                "false"
              ],
              [
                "test_has_nodetypes_actuallyhas",
                "false"
              ],
              [
                "test_get_nodes_by_nodetype_missingnodetype",
                "false"
              ],
              [
                "test_unique_nodetypes",
                "false"
              ],
              [
                "test_linked_nodes",
                "false"
              ],
              [
                "test_neighbor_graph_edges",
                "false"
              ],
              [
                "test_kegg_link_graph_adds_nodes",
                "true"
              ],
              [
                "test_get_nodes_by_nodetype_invalidgraph",
                "false"
              ],
              [
                "test_kegg_link_graph_returns_bipartite_graphs",
                "false"
              ],
              [
                "test_has_nodetype_doesnthave",
                "false"
              ]
            ]
          }
        ],
        "numberOfMethods": 13
      }
    ]
  }
]